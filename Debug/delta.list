
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001224c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e68  080124f0  080124f0  000224f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014358  08014358  00030284  2**0
                  CONTENTS
  4 .ARM          00000008  08014358  08014358  00024358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014360  08014360  00030284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014360  08014360  00024360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014364  08014364  00024364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  24000000  08014368  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b0c  24000288  080145ec  00030288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000d94  080145ec  00030d94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c270  00000000  00000000  000302b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003563  00000000  00000000  0004c522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0004fa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00050db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039564  00000000  00000000  00051f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d204  00000000  00000000  0008b4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165523  00000000  00000000  000a86c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020dbeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006244  00000000  00000000  0020dc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000288 	.word	0x24000288
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080124d4 	.word	0x080124d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400028c 	.word	0x2400028c
 80002dc:	080124d4 	.word	0x080124d4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	0000      	movs	r0, r0
	...

08000a80 <cinematicaInversa>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void cinematicaInversa(Vec3D _Pfin) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	ed2d 8b04 	vpush	{d8-d9}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	eeb0 5b40 	vmov.f64	d5, d0
 8000a8e:	eeb0 6b41 	vmov.f64	d6, d1
 8000a92:	eeb0 7b42 	vmov.f64	d7, d2
 8000a96:	ed87 5b00 	vstr	d5, [r7]
 8000a9a:	ed87 6b02 	vstr	d6, [r7, #8]
 8000a9e:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8000aa2:	ed97 7b02 	vldr	d7, [r7, #8]
 8000aa6:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8000e60 <cinematicaInversa+0x3e0>
 8000aaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000aae:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8000e68 <cinematicaInversa+0x3e8>
 8000ab2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ab6:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000aba:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000abe:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ac2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ac6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000aca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000ace:	eeb0 0b45 	vmov.f64	d0, d5
 8000ad2:	f011 f8d1 	bl	8011c78 <pow>
 8000ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8000ada:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ade:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ae2:	4bf9      	ldr	r3, [pc, #996]	; (8000ec8 <cinematicaInversa+0x448>)
 8000ae4:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8000ae8:	ed97 7b00 	vldr	d7, [r7]
 8000aec:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e70 <cinematicaInversa+0x3f0>
 8000af0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000af4:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e78 <cinematicaInversa+0x3f8>
 8000af8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000afc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e80 <cinematicaInversa+0x400>
 8000b00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b04:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b08:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8000e88 <cinematicaInversa+0x408>
 8000b0c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000b10:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b14:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b18:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b1c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b20:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b24:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000b28:	eeb0 0b45 	vmov.f64	d0, d5
 8000b2c:	f011 f8a4 	bl	8011c78 <pow>
 8000b30:	eeb0 7b40 	vmov.f64	d7, d0
 8000b34:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b3c:	4be3      	ldr	r3, [pc, #908]	; (8000ecc <cinematicaInversa+0x44c>)
 8000b3e:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8000b42:	ed97 7b00 	vldr	d7, [r7]
 8000b46:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8000e70 <cinematicaInversa+0x3f0>
 8000b4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000b4e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8000e78 <cinematicaInversa+0x3f8>
 8000b52:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b56:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b5a:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8000e88 <cinematicaInversa+0x408>
 8000b5e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000b62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b6a:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8000e90 <cinematicaInversa+0x410>
 8000b6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b72:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8000e68 <cinematicaInversa+0x3e8>
 8000b76:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000b7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b82:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b86:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000b8a:	eeb0 0b45 	vmov.f64	d0, d5
 8000b8e:	f011 f873 	bl	8011c78 <pow>
 8000b92:	eeb0 7b40 	vmov.f64	d7, d0
 8000b96:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b9e:	4bcc      	ldr	r3, [pc, #816]	; (8000ed0 <cinematicaInversa+0x450>)
 8000ba0:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8000ba4:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ba8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8000e60 <cinematicaInversa+0x3e0>
 8000bac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bb0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8000e68 <cinematicaInversa+0x3e8>
 8000bb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bb8:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000bbc:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000bc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000bc4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000bc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000bcc:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000bd0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000bd4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8000e60 <cinematicaInversa+0x3e0>
 8000bd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bdc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000be0:	eeb0 0b47 	vmov.f64	d0, d7
 8000be4:	f011 f848 	bl	8011c78 <pow>
 8000be8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bec:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8000e98 <cinematicaInversa+0x418>
 8000bf0:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000bf4:	ed97 7b04 	vldr	d7, [r7, #16]
 8000bf8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000bfc:	eeb0 0b47 	vmov.f64	d0, d7
 8000c00:	f011 f83a 	bl	8011c78 <pow>
 8000c04:	eeb0 7b40 	vmov.f64	d7, d0
 8000c08:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000c0c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8000ea0 <cinematicaInversa+0x420>
 8000c10:	ee37 9b46 	vsub.f64	d9, d7, d6
 8000c14:	ed97 7b00 	vldr	d7, [r7]
 8000c18:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c20:	f011 f82a 	bl	8011c78 <pow>
 8000c24:	eeb0 7b40 	vmov.f64	d7, d0
 8000c28:	ee39 5b07 	vadd.f64	d5, d9, d7
 8000c2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c30:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000c34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c38:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000c3c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8000ea8 <cinematicaInversa+0x428>
 8000c40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c44:	4ba3      	ldr	r3, [pc, #652]	; (8000ed4 <cinematicaInversa+0x454>)
 8000c46:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8000c4a:	ed97 7b00 	vldr	d7, [r7]
 8000c4e:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8000e70 <cinematicaInversa+0x3f0>
 8000c52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c56:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8000eb0 <cinematicaInversa+0x430>
 8000c5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c5e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000c62:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8000e88 <cinematicaInversa+0x408>
 8000c66:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000c6a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c72:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8000e80 <cinematicaInversa+0x400>
 8000c76:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000c7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c7e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000c82:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c86:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000c8a:	ed97 7b00 	vldr	d7, [r7]
 8000c8e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8000e70 <cinematicaInversa+0x3f0>
 8000c92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c96:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000c9a:	eeb0 0b47 	vmov.f64	d0, d7
 8000c9e:	f010 ffeb 	bl	8011c78 <pow>
 8000ca2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ca6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8000e98 <cinematicaInversa+0x418>
 8000caa:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000cae:	ed97 7b02 	vldr	d7, [r7, #8]
 8000cb2:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8000e88 <cinematicaInversa+0x408>
 8000cb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000cbe:	eeb0 0b47 	vmov.f64	d0, d7
 8000cc2:	f010 ffd9 	bl	8011c78 <pow>
 8000cc6:	eeb0 7b40 	vmov.f64	d7, d0
 8000cca:	ee39 9b07 	vadd.f64	d9, d9, d7
 8000cce:	ed97 7b04 	vldr	d7, [r7, #16]
 8000cd2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000cd6:	eeb0 0b47 	vmov.f64	d0, d7
 8000cda:	f010 ffcd 	bl	8011c78 <pow>
 8000cde:	eeb0 7b40 	vmov.f64	d7, d0
 8000ce2:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000ce6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8000ea0 <cinematicaInversa+0x420>
 8000cea:	ee37 5b46 	vsub.f64	d5, d7, d6
 8000cee:	ed97 7b04 	vldr	d7, [r7, #16]
 8000cf2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000cf6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000cfa:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000cfe:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8000e80 <cinematicaInversa+0x400>
 8000d02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d06:	4b74      	ldr	r3, [pc, #464]	; (8000ed8 <cinematicaInversa+0x458>)
 8000d08:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8000d0c:	ed97 7b00 	vldr	d7, [r7]
 8000d10:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000e70 <cinematicaInversa+0x3f0>
 8000d14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d18:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000e78 <cinematicaInversa+0x3f8>
 8000d1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d20:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d24:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8000e88 <cinematicaInversa+0x408>
 8000d28:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000d2c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d34:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8000e90 <cinematicaInversa+0x410>
 8000d38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d3c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8000e68 <cinematicaInversa+0x3e8>
 8000d40:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000d44:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d48:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000d4c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d50:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000d54:	ed97 7b00 	vldr	d7, [r7]
 8000d58:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8000e70 <cinematicaInversa+0x3f0>
 8000d5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d60:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d64:	eeb0 0b47 	vmov.f64	d0, d7
 8000d68:	f010 ff86 	bl	8011c78 <pow>
 8000d6c:	eeb0 9b40 	vmov.f64	d9, d0
 8000d70:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d74:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8000e88 <cinematicaInversa+0x408>
 8000d78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d7c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d80:	eeb0 0b47 	vmov.f64	d0, d7
 8000d84:	f010 ff78 	bl	8011c78 <pow>
 8000d88:	eeb0 7b40 	vmov.f64	d7, d0
 8000d8c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8000d90:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d94:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d98:	eeb0 0b47 	vmov.f64	d0, d7
 8000d9c:	f010 ff6c 	bl	8011c78 <pow>
 8000da0:	eeb0 7b40 	vmov.f64	d7, d0
 8000da4:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000da8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000ea0 <cinematicaInversa+0x420>
 8000dac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000db0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000eb8 <cinematicaInversa+0x438>
 8000db4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000db8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000ec0 <cinematicaInversa+0x440>
 8000dbc:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000dc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000dc4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000dc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dcc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000dd0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000e80 <cinematicaInversa+0x400>
 8000dd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dd8:	4b40      	ldr	r3, [pc, #256]	; (8000edc <cinematicaInversa+0x45c>)
 8000dda:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8000dde:	ed97 7b02 	vldr	d7, [r7, #8]
 8000de2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8000e60 <cinematicaInversa+0x3e0>
 8000de6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000dee:	eeb0 0b47 	vmov.f64	d0, d7
 8000df2:	f010 ff41 	bl	8011c78 <pow>
 8000df6:	eeb0 8b40 	vmov.f64	d8, d0
 8000dfa:	ed97 7b04 	vldr	d7, [r7, #16]
 8000dfe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e02:	eeb0 0b47 	vmov.f64	d0, d7
 8000e06:	f010 ff37 	bl	8011c78 <pow>
 8000e0a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e0e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000e12:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000ea0 <cinematicaInversa+0x420>
 8000e16:	ee37 8b46 	vsub.f64	d8, d7, d6
 8000e1a:	ed97 7b00 	vldr	d7, [r7]
 8000e1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e22:	eeb0 0b47 	vmov.f64	d0, d7
 8000e26:	f010 ff27 	bl	8011c78 <pow>
 8000e2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e2e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000e32:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000eb8 <cinematicaInversa+0x438>
 8000e36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e3a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000ec0 <cinematicaInversa+0x440>
 8000e3e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000e42:	ed97 7b04 	vldr	d7, [r7, #16]
 8000e46:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000e4a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000e4e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e52:	eeb0 0b45 	vmov.f64	d0, d5
 8000e56:	f010 ff0f 	bl	8011c78 <pow>
 8000e5a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e5e:	e03f      	b.n	8000ee0 <cinematicaInversa+0x460>
 8000e60:	1eb851ec 	.word	0x1eb851ec
 8000e64:	3fb1eb85 	.word	0x3fb1eb85
 8000e68:	24dd2f1b 	.word	0x24dd2f1b
 8000e6c:	3fc58106 	.word	0x3fc58106
 8000e70:	5625749b 	.word	0x5625749b
 8000e74:	3faf09d1 	.word	0x3faf09d1
 8000e78:	e8584caa 	.word	0xe8584caa
 8000e7c:	400bb67a 	.word	0x400bb67a
 8000e80:	24dd2f1d 	.word	0x24dd2f1d
 8000e84:	3fe58106 	.word	0x3fe58106
 8000e88:	1eb851ec 	.word	0x1eb851ec
 8000e8c:	3fa1eb85 	.word	0x3fa1eb85
 8000e90:	9ba5e356 	.word	0x9ba5e356
 8000e94:	3fe020c4 	.word	0x3fe020c4
 8000e98:	3532e7b5 	.word	0x3532e7b5
 8000e9c:	3fc0de09 	.word	0x3fc0de09
 8000ea0:	70a3d70a 	.word	0x70a3d70a
 8000ea4:	3fd70a3d 	.word	0x3fd70a3d
 8000ea8:	24dd2f1b 	.word	0x24dd2f1b
 8000eac:	3fd58106 	.word	0x3fd58106
 8000eb0:	e8584caa 	.word	0xe8584caa
 8000eb4:	c00bb67a 	.word	0xc00bb67a
 8000eb8:	93d96639 	.word	0x93d96639
 8000ebc:	3f9ce6c0 	.word	0x3f9ce6c0
 8000ec0:	47ae147c 	.word	0x47ae147c
 8000ec4:	3fc47ae1 	.word	0x3fc47ae1
 8000ec8:	240002a8 	.word	0x240002a8
 8000ecc:	240002f0 	.word	0x240002f0
 8000ed0:	24000338 	.word	0x24000338
 8000ed4:	240002b0 	.word	0x240002b0
 8000ed8:	240002f8 	.word	0x240002f8
 8000edc:	24000340 	.word	0x24000340
 8000ee0:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001260 <cinematicaInversa+0x7e0>
 8000ee4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ee8:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001268 <cinematicaInversa+0x7e8>
 8000eec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ef0:	4be7      	ldr	r3, [pc, #924]	; (8001290 <cinematicaInversa+0x810>)
 8000ef2:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8000ef6:	ed97 7b00 	vldr	d7, [r7]
 8000efa:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001270 <cinematicaInversa+0x7f0>
 8000efe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f02:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f06:	eeb0 0b47 	vmov.f64	d0, d7
 8000f0a:	f010 feb5 	bl	8011c78 <pow>
 8000f0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000f12:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001278 <cinematicaInversa+0x7f8>
 8000f16:	ee37 8b06 	vadd.f64	d8, d7, d6
 8000f1a:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f1e:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001280 <cinematicaInversa+0x800>
 8000f22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f26:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f2a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f2e:	f010 fea3 	bl	8011c78 <pow>
 8000f32:	eeb0 7b40 	vmov.f64	d7, d0
 8000f36:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000f3a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f42:	eeb0 0b47 	vmov.f64	d0, d7
 8000f46:	f010 fe97 	bl	8011c78 <pow>
 8000f4a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f4e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f52:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001288 <cinematicaInversa+0x808>
 8000f56:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000f5a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f62:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000f66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f6a:	eeb0 0b45 	vmov.f64	d0, d5
 8000f6e:	f010 fe83 	bl	8011c78 <pow>
 8000f72:	eeb0 7b40 	vmov.f64	d7, d0
 8000f76:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001278 <cinematicaInversa+0x7f8>
 8000f7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f7e:	4bc5      	ldr	r3, [pc, #788]	; (8001294 <cinematicaInversa+0x814>)
 8000f80:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8000f84:	ed97 7b00 	vldr	d7, [r7]
 8000f88:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001270 <cinematicaInversa+0x7f0>
 8000f8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f90:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f94:	eeb0 0b47 	vmov.f64	d0, d7
 8000f98:	f010 fe6e 	bl	8011c78 <pow>
 8000f9c:	eeb0 8b40 	vmov.f64	d8, d0
 8000fa0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fa4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001280 <cinematicaInversa+0x800>
 8000fa8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8000fb4:	f010 fe60 	bl	8011c78 <pow>
 8000fb8:	eeb0 7b40 	vmov.f64	d7, d0
 8000fbc:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000fc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000fc4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fc8:	eeb0 0b47 	vmov.f64	d0, d7
 8000fcc:	f010 fe54 	bl	8011c78 <pow>
 8000fd0:	eeb0 7b40 	vmov.f64	d7, d0
 8000fd4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000fd8:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001288 <cinematicaInversa+0x808>
 8000fdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fe0:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001268 <cinematicaInversa+0x7e8>
 8000fe4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fe8:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001260 <cinematicaInversa+0x7e0>
 8000fec:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000ff0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ff4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ff8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ffc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001000:	eeb0 0b45 	vmov.f64	d0, d5
 8001004:	f010 fe38 	bl	8011c78 <pow>
 8001008:	eeb0 7b40 	vmov.f64	d7, d0
 800100c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001278 <cinematicaInversa+0x7f8>
 8001010:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001014:	4ba0      	ldr	r3, [pc, #640]	; (8001298 <cinematicaInversa+0x818>)
 8001016:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800101a:	4ba0      	ldr	r3, [pc, #640]	; (800129c <cinematicaInversa+0x81c>)
 800101c:	ed93 7b00 	vldr	d7, [r3]
 8001020:	eeb1 8b47 	vneg.f64	d8, d7
 8001024:	4b9d      	ldr	r3, [pc, #628]	; (800129c <cinematicaInversa+0x81c>)
 8001026:	ed93 7b00 	vldr	d7, [r3]
 800102a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800102e:	eeb0 0b47 	vmov.f64	d0, d7
 8001032:	f010 fe21 	bl	8011c78 <pow>
 8001036:	eeb0 5b40 	vmov.f64	d5, d0
 800103a:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <cinematicaInversa+0x820>)
 800103c:	ed93 7b00 	vldr	d7, [r3]
 8001040:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001044:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001048:	4b91      	ldr	r3, [pc, #580]	; (8001290 <cinematicaInversa+0x810>)
 800104a:	ed93 7b00 	vldr	d7, [r3]
 800104e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001052:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001056:	eeb0 0b47 	vmov.f64	d0, d7
 800105a:	f011 f88d 	bl	8012178 <sqrt>
 800105e:	eeb0 7b40 	vmov.f64	d7, d0
 8001062:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001066:	4b8e      	ldr	r3, [pc, #568]	; (80012a0 <cinematicaInversa+0x820>)
 8001068:	ed93 7b00 	vldr	d7, [r3]
 800106c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001070:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001074:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <cinematicaInversa+0x824>)
 8001076:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800107a:	4b88      	ldr	r3, [pc, #544]	; (800129c <cinematicaInversa+0x81c>)
 800107c:	ed93 7b00 	vldr	d7, [r3]
 8001080:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001084:	eeb0 0b47 	vmov.f64	d0, d7
 8001088:	f010 fdf6 	bl	8011c78 <pow>
 800108c:	eeb0 5b40 	vmov.f64	d5, d0
 8001090:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <cinematicaInversa+0x820>)
 8001092:	ed93 7b00 	vldr	d7, [r3]
 8001096:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800109a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800109e:	4b7c      	ldr	r3, [pc, #496]	; (8001290 <cinematicaInversa+0x810>)
 80010a0:	ed93 7b00 	vldr	d7, [r3]
 80010a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80010ac:	eeb0 0b47 	vmov.f64	d0, d7
 80010b0:	f011 f862 	bl	8012178 <sqrt>
 80010b4:	eeb0 6b40 	vmov.f64	d6, d0
 80010b8:	4b78      	ldr	r3, [pc, #480]	; (800129c <cinematicaInversa+0x81c>)
 80010ba:	ed93 7b00 	vldr	d7, [r3]
 80010be:	ee36 5b47 	vsub.f64	d5, d6, d7
 80010c2:	4b77      	ldr	r3, [pc, #476]	; (80012a0 <cinematicaInversa+0x820>)
 80010c4:	ed93 7b00 	vldr	d7, [r3]
 80010c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80010cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010d0:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <cinematicaInversa+0x828>)
 80010d2:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80010d6:	4b75      	ldr	r3, [pc, #468]	; (80012ac <cinematicaInversa+0x82c>)
 80010d8:	ed93 7b00 	vldr	d7, [r3]
 80010dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80010e0:	eeb0 0b47 	vmov.f64	d0, d7
 80010e4:	f010 fdc8 	bl	8011c78 <pow>
 80010e8:	eeb0 5b40 	vmov.f64	d5, d0
 80010ec:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <cinematicaInversa+0x830>)
 80010ee:	ed93 7b00 	vldr	d7, [r3]
 80010f2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80010f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <cinematicaInversa+0x814>)
 80010fc:	ed93 7b00 	vldr	d7, [r3]
 8001100:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001104:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001108:	eeb0 0b47 	vmov.f64	d0, d7
 800110c:	f011 f834 	bl	8012178 <sqrt>
 8001110:	eeb0 6b40 	vmov.f64	d6, d0
 8001114:	4b65      	ldr	r3, [pc, #404]	; (80012ac <cinematicaInversa+0x82c>)
 8001116:	ed93 7b00 	vldr	d7, [r3]
 800111a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800111e:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <cinematicaInversa+0x830>)
 8001120:	ed93 7b00 	vldr	d7, [r3]
 8001124:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001128:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800112c:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <cinematicaInversa+0x834>)
 800112e:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001132:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <cinematicaInversa+0x82c>)
 8001134:	ed93 7b00 	vldr	d7, [r3]
 8001138:	eeb1 8b47 	vneg.f64	d8, d7
 800113c:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <cinematicaInversa+0x82c>)
 800113e:	ed93 7b00 	vldr	d7, [r3]
 8001142:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001146:	eeb0 0b47 	vmov.f64	d0, d7
 800114a:	f010 fd95 	bl	8011c78 <pow>
 800114e:	eeb0 5b40 	vmov.f64	d5, d0
 8001152:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <cinematicaInversa+0x830>)
 8001154:	ed93 7b00 	vldr	d7, [r3]
 8001158:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800115c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <cinematicaInversa+0x814>)
 8001162:	ed93 7b00 	vldr	d7, [r3]
 8001166:	ee26 7b07 	vmul.f64	d7, d6, d7
 800116a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800116e:	eeb0 0b47 	vmov.f64	d0, d7
 8001172:	f011 f801 	bl	8012178 <sqrt>
 8001176:	eeb0 7b40 	vmov.f64	d7, d0
 800117a:	ee38 5b47 	vsub.f64	d5, d8, d7
 800117e:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <cinematicaInversa+0x830>)
 8001180:	ed93 7b00 	vldr	d7, [r3]
 8001184:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001188:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800118c:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <cinematicaInversa+0x838>)
 800118e:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <cinematicaInversa+0x83c>)
 8001194:	ed93 7b00 	vldr	d7, [r3]
 8001198:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800119c:	eeb0 0b47 	vmov.f64	d0, d7
 80011a0:	f010 fd6a 	bl	8011c78 <pow>
 80011a4:	eeb0 5b40 	vmov.f64	d5, d0
 80011a8:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <cinematicaInversa+0x840>)
 80011aa:	ed93 7b00 	vldr	d7, [r3]
 80011ae:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80011b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <cinematicaInversa+0x818>)
 80011b8:	ed93 7b00 	vldr	d7, [r3]
 80011bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80011c4:	eeb0 0b47 	vmov.f64	d0, d7
 80011c8:	f010 ffd6 	bl	8012178 <sqrt>
 80011cc:	eeb0 6b40 	vmov.f64	d6, d0
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <cinematicaInversa+0x83c>)
 80011d2:	ed93 7b00 	vldr	d7, [r3]
 80011d6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <cinematicaInversa+0x840>)
 80011dc:	ed93 7b00 	vldr	d7, [r3]
 80011e0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80011e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <cinematicaInversa+0x844>)
 80011ea:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <cinematicaInversa+0x83c>)
 80011f0:	ed93 7b00 	vldr	d7, [r3]
 80011f4:	eeb1 8b47 	vneg.f64	d8, d7
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <cinematicaInversa+0x83c>)
 80011fa:	ed93 7b00 	vldr	d7, [r3]
 80011fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001202:	eeb0 0b47 	vmov.f64	d0, d7
 8001206:	f010 fd37 	bl	8011c78 <pow>
 800120a:	eeb0 5b40 	vmov.f64	d5, d0
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <cinematicaInversa+0x840>)
 8001210:	ed93 7b00 	vldr	d7, [r3]
 8001214:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001218:	ee27 6b06 	vmul.f64	d6, d7, d6
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <cinematicaInversa+0x818>)
 800121e:	ed93 7b00 	vldr	d7, [r3]
 8001222:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001226:	ee35 7b47 	vsub.f64	d7, d5, d7
 800122a:	eeb0 0b47 	vmov.f64	d0, d7
 800122e:	f010 ffa3 	bl	8012178 <sqrt>
 8001232:	eeb0 7b40 	vmov.f64	d7, d0
 8001236:	ee38 5b47 	vsub.f64	d5, d8, d7
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <cinematicaInversa+0x840>)
 800123c:	ed93 7b00 	vldr	d7, [r3]
 8001240:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001244:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <cinematicaInversa+0x848>)
 800124a:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 800124e:	491f      	ldr	r1, [pc, #124]	; (80012cc <cinematicaInversa+0x84c>)
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	e9c1 2300 	strd	r2, r3, [r1]
 800125c:	e038      	b.n	80012d0 <cinematicaInversa+0x850>
 800125e:	bf00      	nop
 8001260:	47ae147c 	.word	0x47ae147c
 8001264:	3fc47ae1 	.word	0x3fc47ae1
 8001268:	93d96639 	.word	0x93d96639
 800126c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001270:	5625749b 	.word	0x5625749b
 8001274:	3faf09d1 	.word	0x3faf09d1
 8001278:	3532e7b5 	.word	0x3532e7b5
 800127c:	3fc0de09 	.word	0x3fc0de09
 8001280:	1eb851ec 	.word	0x1eb851ec
 8001284:	3fa1eb85 	.word	0x3fa1eb85
 8001288:	70a3d70a 	.word	0x70a3d70a
 800128c:	3fd70a3d 	.word	0x3fd70a3d
 8001290:	240002b8 	.word	0x240002b8
 8001294:	24000300 	.word	0x24000300
 8001298:	24000348 	.word	0x24000348
 800129c:	240002b0 	.word	0x240002b0
 80012a0:	240002a8 	.word	0x240002a8
 80012a4:	240002d0 	.word	0x240002d0
 80012a8:	240002d8 	.word	0x240002d8
 80012ac:	240002f8 	.word	0x240002f8
 80012b0:	240002f0 	.word	0x240002f0
 80012b4:	24000318 	.word	0x24000318
 80012b8:	24000320 	.word	0x24000320
 80012bc:	24000340 	.word	0x24000340
 80012c0:	24000338 	.word	0x24000338
 80012c4:	24000360 	.word	0x24000360
 80012c8:	24000368 	.word	0x24000368
 80012cc:	240002c0 	.word	0x240002c0
	XJ1_2 = 0;
 80012d0:	49f1      	ldr	r1, [pc, #964]	; (8001698 <cinematicaInversa+0xc18>)
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 80012de:	4bef      	ldr	r3, [pc, #956]	; (800169c <cinematicaInversa+0xc1c>)
 80012e0:	ed93 7b00 	vldr	d7, [r3]
 80012e4:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8001630 <cinematicaInversa+0xbb0>
 80012e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012ec:	4bec      	ldr	r3, [pc, #944]	; (80016a0 <cinematicaInversa+0xc20>)
 80012ee:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 80012f2:	4bec      	ldr	r3, [pc, #944]	; (80016a4 <cinematicaInversa+0xc24>)
 80012f4:	ed93 7b00 	vldr	d7, [r3]
 80012f8:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001630 <cinematicaInversa+0xbb0>
 80012fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001300:	4be9      	ldr	r3, [pc, #932]	; (80016a8 <cinematicaInversa+0xc28>)
 8001302:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001306:	4be9      	ldr	r3, [pc, #932]	; (80016ac <cinematicaInversa+0xc2c>)
 8001308:	ed93 7b00 	vldr	d7, [r3]
 800130c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001638 <cinematicaInversa+0xbb8>
 8001310:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001314:	4be6      	ldr	r3, [pc, #920]	; (80016b0 <cinematicaInversa+0xc30>)
 8001316:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 800131a:	4be6      	ldr	r3, [pc, #920]	; (80016b4 <cinematicaInversa+0xc34>)
 800131c:	ed93 7b00 	vldr	d7, [r3]
 8001320:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8001638 <cinematicaInversa+0xbb8>
 8001324:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001328:	4be3      	ldr	r3, [pc, #908]	; (80016b8 <cinematicaInversa+0xc38>)
 800132a:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 800132e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001332:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001640 <cinematicaInversa+0xbc0>
 8001336:	ee37 7b46 	vsub.f64	d7, d7, d6
 800133a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001648 <cinematicaInversa+0xbc8>
 800133e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001342:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001346:	ee27 5b06 	vmul.f64	d5, d7, d6
 800134a:	ed97 7b04 	vldr	d7, [r7, #16]
 800134e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001352:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001356:	4bd9      	ldr	r3, [pc, #868]	; (80016bc <cinematicaInversa+0xc3c>)
 8001358:	ed93 7b00 	vldr	d7, [r3]
 800135c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001360:	ed97 7b02 	vldr	d7, [r7, #8]
 8001364:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001640 <cinematicaInversa+0xbc0>
 8001368:	ee37 7b46 	vsub.f64	d7, d7, d6
 800136c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001370:	eeb0 0b47 	vmov.f64	d0, d7
 8001374:	f010 fc80 	bl	8011c78 <pow>
 8001378:	eeb0 9b40 	vmov.f64	d9, d0
 800137c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001380:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001384:	eeb0 0b47 	vmov.f64	d0, d7
 8001388:	f010 fc76 	bl	8011c78 <pow>
 800138c:	eeb0 7b40 	vmov.f64	d7, d0
 8001390:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001394:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8001650 <cinematicaInversa+0xbd0>
 8001398:	ee37 9b46 	vsub.f64	d9, d7, d6
 800139c:	ed97 7b00 	vldr	d7, [r7]
 80013a0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013a4:	eeb0 0b47 	vmov.f64	d0, d7
 80013a8:	f010 fc66 	bl	8011c78 <pow>
 80013ac:	eeb0 7b40 	vmov.f64	d7, d0
 80013b0:	ee39 7b07 	vadd.f64	d7, d9, d7
 80013b4:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001658 <cinematicaInversa+0xbd8>
 80013b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013bc:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001660 <cinematicaInversa+0xbe0>
 80013c0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80013c4:	ed97 7b04 	vldr	d7, [r7, #16]
 80013c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80013cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013d0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013d4:	4bba      	ldr	r3, [pc, #744]	; (80016c0 <cinematicaInversa+0xc40>)
 80013d6:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 80013da:	ed97 7b02 	vldr	d7, [r7, #8]
 80013de:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8001640 <cinematicaInversa+0xbc0>
 80013e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013e6:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8001648 <cinematicaInversa+0xbc8>
 80013ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013ee:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80013f2:	ee27 5b06 	vmul.f64	d5, d7, d6
 80013f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80013fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80013fe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001402:	4bb0      	ldr	r3, [pc, #704]	; (80016c4 <cinematicaInversa+0xc44>)
 8001404:	ed93 7b00 	vldr	d7, [r3]
 8001408:	ee26 8b07 	vmul.f64	d8, d6, d7
 800140c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001410:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8001640 <cinematicaInversa+0xbc0>
 8001414:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001418:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800141c:	eeb0 0b47 	vmov.f64	d0, d7
 8001420:	f010 fc2a 	bl	8011c78 <pow>
 8001424:	eeb0 9b40 	vmov.f64	d9, d0
 8001428:	ed97 7b04 	vldr	d7, [r7, #16]
 800142c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001430:	eeb0 0b47 	vmov.f64	d0, d7
 8001434:	f010 fc20 	bl	8011c78 <pow>
 8001438:	eeb0 7b40 	vmov.f64	d7, d0
 800143c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001440:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001650 <cinematicaInversa+0xbd0>
 8001444:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001448:	ed97 7b00 	vldr	d7, [r7]
 800144c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001450:	eeb0 0b47 	vmov.f64	d0, d7
 8001454:	f010 fc10 	bl	8011c78 <pow>
 8001458:	eeb0 7b40 	vmov.f64	d7, d0
 800145c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001460:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001658 <cinematicaInversa+0xbd8>
 8001464:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001468:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001660 <cinematicaInversa+0xbe0>
 800146c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001470:	ed97 7b04 	vldr	d7, [r7, #16]
 8001474:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001478:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800147c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001480:	4b91      	ldr	r3, [pc, #580]	; (80016c8 <cinematicaInversa+0xc48>)
 8001482:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001486:	ed97 7b00 	vldr	d7, [r7]
 800148a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001668 <cinematicaInversa+0xbe8>
 800148e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001492:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001670 <cinematicaInversa+0xbf0>
 8001496:	ee27 6b06 	vmul.f64	d6, d7, d6
 800149a:	ed97 7b02 	vldr	d7, [r7, #8]
 800149e:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8001678 <cinematicaInversa+0xbf8>
 80014a2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80014a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80014aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014ae:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8001680 <cinematicaInversa+0xc00>
 80014b2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80014b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80014ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80014be:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80014c2:	4b76      	ldr	r3, [pc, #472]	; (800169c <cinematicaInversa+0xc1c>)
 80014c4:	ed93 7b00 	vldr	d7, [r3]
 80014c8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80014cc:	ed97 7b00 	vldr	d7, [r7]
 80014d0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001668 <cinematicaInversa+0xbe8>
 80014d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014dc:	eeb0 0b47 	vmov.f64	d0, d7
 80014e0:	f010 fbca 	bl	8011c78 <pow>
 80014e4:	eeb0 7b40 	vmov.f64	d7, d0
 80014e8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001688 <cinematicaInversa+0xc08>
 80014ec:	ee37 9b06 	vadd.f64	d9, d7, d6
 80014f0:	ed97 7b02 	vldr	d7, [r7, #8]
 80014f4:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001678 <cinematicaInversa+0xbf8>
 80014f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014fc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001500:	eeb0 0b47 	vmov.f64	d0, d7
 8001504:	f010 fbb8 	bl	8011c78 <pow>
 8001508:	eeb0 7b40 	vmov.f64	d7, d0
 800150c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001510:	ed97 7b04 	vldr	d7, [r7, #16]
 8001514:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001518:	eeb0 0b47 	vmov.f64	d0, d7
 800151c:	f010 fbac 	bl	8011c78 <pow>
 8001520:	eeb0 7b40 	vmov.f64	d7, d0
 8001524:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001528:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001650 <cinematicaInversa+0xbd0>
 800152c:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001530:	ed97 7b04 	vldr	d7, [r7, #16]
 8001534:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001538:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800153c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001540:	4b62      	ldr	r3, [pc, #392]	; (80016cc <cinematicaInversa+0xc4c>)
 8001542:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001546:	ed97 7b00 	vldr	d7, [r7]
 800154a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001668 <cinematicaInversa+0xbe8>
 800154e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001552:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001670 <cinematicaInversa+0xbf0>
 8001556:	ee27 6b06 	vmul.f64	d6, d7, d6
 800155a:	ed97 7b02 	vldr	d7, [r7, #8]
 800155e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001678 <cinematicaInversa+0xbf8>
 8001562:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001566:	ee37 7b07 	vadd.f64	d7, d7, d7
 800156a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800156e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001680 <cinematicaInversa+0xc00>
 8001572:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001576:	ed97 7b04 	vldr	d7, [r7, #16]
 800157a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800157e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001582:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <cinematicaInversa+0xc24>)
 8001584:	ed93 7b00 	vldr	d7, [r3]
 8001588:	ee26 8b07 	vmul.f64	d8, d6, d7
 800158c:	ed97 7b00 	vldr	d7, [r7]
 8001590:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001668 <cinematicaInversa+0xbe8>
 8001594:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001598:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800159c:	eeb0 0b47 	vmov.f64	d0, d7
 80015a0:	f010 fb6a 	bl	8011c78 <pow>
 80015a4:	eeb0 7b40 	vmov.f64	d7, d0
 80015a8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8001688 <cinematicaInversa+0xc08>
 80015ac:	ee37 9b06 	vadd.f64	d9, d7, d6
 80015b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80015b4:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8001678 <cinematicaInversa+0xbf8>
 80015b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015bc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015c0:	eeb0 0b47 	vmov.f64	d0, d7
 80015c4:	f010 fb58 	bl	8011c78 <pow>
 80015c8:	eeb0 7b40 	vmov.f64	d7, d0
 80015cc:	ee39 9b07 	vadd.f64	d9, d9, d7
 80015d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80015d4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015d8:	eeb0 0b47 	vmov.f64	d0, d7
 80015dc:	f010 fb4c 	bl	8011c78 <pow>
 80015e0:	eeb0 7b40 	vmov.f64	d7, d0
 80015e4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80015e8:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001650 <cinematicaInversa+0xbd0>
 80015ec:	ee37 5b46 	vsub.f64	d5, d7, d6
 80015f0:	ed97 7b04 	vldr	d7, [r7, #16]
 80015f4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80015f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015fc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <cinematicaInversa+0xc50>)
 8001602:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001606:	ed97 7b00 	vldr	d7, [r7]
 800160a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001668 <cinematicaInversa+0xbe8>
 800160e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001612:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001690 <cinematicaInversa+0xc10>
 8001616:	ee27 6b06 	vmul.f64	d6, d7, d6
 800161a:	ed97 7b02 	vldr	d7, [r7, #8]
 800161e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8001678 <cinematicaInversa+0xbf8>
 8001622:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001626:	ee37 7b07 	vadd.f64	d7, d7, d7
 800162a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800162e:	e051      	b.n	80016d4 <cinematicaInversa+0xc54>
 8001630:	e8584caa 	.word	0xe8584caa
 8001634:	3ffbb67a 	.word	0x3ffbb67a
 8001638:	e8584caa 	.word	0xe8584caa
 800163c:	bffbb67a 	.word	0xbffbb67a
 8001640:	1eb851ec 	.word	0x1eb851ec
 8001644:	3fb1eb85 	.word	0x3fb1eb85
 8001648:	24dd2f1b 	.word	0x24dd2f1b
 800164c:	3fc58106 	.word	0x3fc58106
 8001650:	70a3d70a 	.word	0x70a3d70a
 8001654:	3fd70a3d 	.word	0x3fd70a3d
 8001658:	93d96639 	.word	0x93d96639
 800165c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001660:	47ae147c 	.word	0x47ae147c
 8001664:	3fc47ae1 	.word	0x3fc47ae1
 8001668:	5625749b 	.word	0x5625749b
 800166c:	3faf09d1 	.word	0x3faf09d1
 8001670:	e8584caa 	.word	0xe8584caa
 8001674:	c00bb67a 	.word	0xc00bb67a
 8001678:	1eb851ec 	.word	0x1eb851ec
 800167c:	3fa1eb85 	.word	0x3fa1eb85
 8001680:	24dd2f1d 	.word	0x24dd2f1d
 8001684:	3fe58106 	.word	0x3fe58106
 8001688:	3532e7b5 	.word	0x3532e7b5
 800168c:	3fc0de09 	.word	0x3fc0de09
 8001690:	e8584caa 	.word	0xe8584caa
 8001694:	400bb67a 	.word	0x400bb67a
 8001698:	240002c8 	.word	0x240002c8
 800169c:	24000318 	.word	0x24000318
 80016a0:	24000308 	.word	0x24000308
 80016a4:	24000320 	.word	0x24000320
 80016a8:	24000310 	.word	0x24000310
 80016ac:	24000360 	.word	0x24000360
 80016b0:	24000350 	.word	0x24000350
 80016b4:	24000368 	.word	0x24000368
 80016b8:	24000358 	.word	0x24000358
 80016bc:	240002d0 	.word	0x240002d0
 80016c0:	240002e0 	.word	0x240002e0
 80016c4:	240002d8 	.word	0x240002d8
 80016c8:	240002e8 	.word	0x240002e8
 80016cc:	24000328 	.word	0x24000328
 80016d0:	24000330 	.word	0x24000330
 80016d4:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8001918 <cinematicaInversa+0xe98>
 80016d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016dc:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8001920 <cinematicaInversa+0xea0>
 80016e0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80016e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80016e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016ec:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016f0:	4b9f      	ldr	r3, [pc, #636]	; (8001970 <cinematicaInversa+0xef0>)
 80016f2:	ed93 7b00 	vldr	d7, [r3]
 80016f6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80016fa:	ed97 7b00 	vldr	d7, [r7]
 80016fe:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8001928 <cinematicaInversa+0xea8>
 8001702:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001706:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800170a:	eeb0 0b47 	vmov.f64	d0, d7
 800170e:	f010 fab3 	bl	8011c78 <pow>
 8001712:	eeb0 9b40 	vmov.f64	d9, d0
 8001716:	ed97 7b02 	vldr	d7, [r7, #8]
 800171a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8001930 <cinematicaInversa+0xeb0>
 800171e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001722:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001726:	eeb0 0b47 	vmov.f64	d0, d7
 800172a:	f010 faa5 	bl	8011c78 <pow>
 800172e:	eeb0 7b40 	vmov.f64	d7, d0
 8001732:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001736:	ed97 7b04 	vldr	d7, [r7, #16]
 800173a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800173e:	eeb0 0b47 	vmov.f64	d0, d7
 8001742:	f010 fa99 	bl	8011c78 <pow>
 8001746:	eeb0 7b40 	vmov.f64	d7, d0
 800174a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800174e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001938 <cinematicaInversa+0xeb8>
 8001752:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001756:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001940 <cinematicaInversa+0xec0>
 800175a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800175e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001948 <cinematicaInversa+0xec8>
 8001762:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001766:	ed97 7b04 	vldr	d7, [r7, #16]
 800176a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800176e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001772:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001776:	4b7f      	ldr	r3, [pc, #508]	; (8001974 <cinematicaInversa+0xef4>)
 8001778:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800177c:	ed97 7b00 	vldr	d7, [r7]
 8001780:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001928 <cinematicaInversa+0xea8>
 8001784:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001788:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8001950 <cinematicaInversa+0xed0>
 800178c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001790:	ed97 7b02 	vldr	d7, [r7, #8]
 8001794:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8001930 <cinematicaInversa+0xeb0>
 8001798:	ee37 7b05 	vadd.f64	d7, d7, d5
 800179c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017a4:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001918 <cinematicaInversa+0xe98>
 80017a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017ac:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001920 <cinematicaInversa+0xea0>
 80017b0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80017b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80017b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017c0:	4b6d      	ldr	r3, [pc, #436]	; (8001978 <cinematicaInversa+0xef8>)
 80017c2:	ed93 7b00 	vldr	d7, [r3]
 80017c6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80017ca:	ed97 7b00 	vldr	d7, [r7]
 80017ce:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001928 <cinematicaInversa+0xea8>
 80017d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017da:	eeb0 0b47 	vmov.f64	d0, d7
 80017de:	f010 fa4b 	bl	8011c78 <pow>
 80017e2:	eeb0 9b40 	vmov.f64	d9, d0
 80017e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80017ea:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8001930 <cinematicaInversa+0xeb0>
 80017ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017f2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017f6:	eeb0 0b47 	vmov.f64	d0, d7
 80017fa:	f010 fa3d 	bl	8011c78 <pow>
 80017fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001802:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001806:	ed97 7b04 	vldr	d7, [r7, #16]
 800180a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800180e:	eeb0 0b47 	vmov.f64	d0, d7
 8001812:	f010 fa31 	bl	8011c78 <pow>
 8001816:	eeb0 7b40 	vmov.f64	d7, d0
 800181a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800181e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001938 <cinematicaInversa+0xeb8>
 8001822:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001826:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001940 <cinematicaInversa+0xec0>
 800182a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800182e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001948 <cinematicaInversa+0xec8>
 8001832:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001836:	ed97 7b04 	vldr	d7, [r7, #16]
 800183a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800183e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001842:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001846:	4b4d      	ldr	r3, [pc, #308]	; (800197c <cinematicaInversa+0xefc>)
 8001848:	ed83 7b00 	vstr	d7, [r3]

	titha1 = -1.0 * asin(ZJ1_1 / L1);
 800184c:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <cinematicaInversa+0xf00>)
 800184e:	ed93 7b00 	vldr	d7, [r3]
 8001852:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001958 <cinematicaInversa+0xed8>
 8001856:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800185a:	eeb0 0b46 	vmov.f64	d0, d6
 800185e:	f010 fc5d 	bl	801211c <asin>
 8001862:	eeb0 7b40 	vmov.f64	d7, d0
 8001866:	eeb1 7b47 	vneg.f64	d7, d7
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <cinematicaInversa+0xf04>)
 800186c:	ed83 7b00 	vstr	d7, [r3]
	titha1 = titha1 * RAD_TO_DEG;
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <cinematicaInversa+0xf04>)
 8001872:	ed93 7b00 	vldr	d7, [r3]
 8001876:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001960 <cinematicaInversa+0xee0>
 800187a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800187e:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8001968 <cinematicaInversa+0xee8>
 8001882:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <cinematicaInversa+0xf04>)
 8001888:	ed83 7b00 	vstr	d7, [r3]
	titha2 = -1.0 * asin(ZJ2_1 / L1);
 800188c:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <cinematicaInversa+0xf08>)
 800188e:	ed93 7b00 	vldr	d7, [r3]
 8001892:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001958 <cinematicaInversa+0xed8>
 8001896:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800189a:	eeb0 0b46 	vmov.f64	d0, d6
 800189e:	f010 fc3d 	bl	801211c <asin>
 80018a2:	eeb0 7b40 	vmov.f64	d7, d0
 80018a6:	eeb1 7b47 	vneg.f64	d7, d7
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <cinematicaInversa+0xf0c>)
 80018ac:	ed83 7b00 	vstr	d7, [r3]
	titha2 = titha2 * RAD_TO_DEG;
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <cinematicaInversa+0xf0c>)
 80018b2:	ed93 7b00 	vldr	d7, [r3]
 80018b6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001960 <cinematicaInversa+0xee0>
 80018ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018be:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001968 <cinematicaInversa+0xee8>
 80018c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <cinematicaInversa+0xf0c>)
 80018c8:	ed83 7b00 	vstr	d7, [r3]
	titha3 = -1.0 * asin(ZJ3_1 / L1);
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <cinematicaInversa+0xef4>)
 80018ce:	ed93 7b00 	vldr	d7, [r3]
 80018d2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001958 <cinematicaInversa+0xed8>
 80018d6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80018da:	eeb0 0b46 	vmov.f64	d0, d6
 80018de:	f010 fc1d 	bl	801211c <asin>
 80018e2:	eeb0 7b40 	vmov.f64	d7, d0
 80018e6:	eeb1 7b47 	vneg.f64	d7, d7
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <cinematicaInversa+0xf10>)
 80018ec:	ed83 7b00 	vstr	d7, [r3]
	titha3 = titha3 * RAD_TO_DEG;
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <cinematicaInversa+0xf10>)
 80018f2:	ed93 7b00 	vldr	d7, [r3]
 80018f6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001960 <cinematicaInversa+0xee0>
 80018fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018fe:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8001968 <cinematicaInversa+0xee8>
 8001902:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <cinematicaInversa+0xf10>)
 8001908:	ed83 7b00 	vstr	d7, [r3]
}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	ecbd 8b04 	vpop	{d8-d9}
 8001916:	bd80      	pop	{r7, pc}
 8001918:	9ba5e356 	.word	0x9ba5e356
 800191c:	3fe020c4 	.word	0x3fe020c4
 8001920:	24dd2f1b 	.word	0x24dd2f1b
 8001924:	3fc58106 	.word	0x3fc58106
 8001928:	5625749b 	.word	0x5625749b
 800192c:	3faf09d1 	.word	0x3faf09d1
 8001930:	1eb851ec 	.word	0x1eb851ec
 8001934:	3fa1eb85 	.word	0x3fa1eb85
 8001938:	70a3d70a 	.word	0x70a3d70a
 800193c:	3fd70a3d 	.word	0x3fd70a3d
 8001940:	93d96639 	.word	0x93d96639
 8001944:	3f9ce6c0 	.word	0x3f9ce6c0
 8001948:	47ae147c 	.word	0x47ae147c
 800194c:	3fc47ae1 	.word	0x3fc47ae1
 8001950:	e8584caa 	.word	0xe8584caa
 8001954:	400bb67a 	.word	0x400bb67a
 8001958:	9999999a 	.word	0x9999999a
 800195c:	3fd99999 	.word	0x3fd99999
 8001960:	00000000 	.word	0x00000000
 8001964:	40668000 	.word	0x40668000
 8001968:	54442eea 	.word	0x54442eea
 800196c:	400921fb 	.word	0x400921fb
 8001970:	24000360 	.word	0x24000360
 8001974:	24000370 	.word	0x24000370
 8001978:	24000368 	.word	0x24000368
 800197c:	24000378 	.word	0x24000378
 8001980:	240002e0 	.word	0x240002e0
 8001984:	240003c0 	.word	0x240003c0
 8001988:	24000328 	.word	0x24000328
 800198c:	240003c8 	.word	0x240003c8
 8001990:	240003d0 	.word	0x240003d0

08001994 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019aa:	4b74      	ldr	r3, [pc, #464]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	4a72      	ldr	r2, [pc, #456]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ba:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b6c      	ldr	r3, [pc, #432]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ce:	4a6b      	ldr	r2, [pc, #428]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	4a63      	ldr	r2, [pc, #396]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ee:	f043 0320 	orr.w	r3, r3, #32
 80019f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f6:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a04:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	4a5c      	ldr	r2, [pc, #368]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a32:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	4a4d      	ldr	r2, [pc, #308]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a50:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5e:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	4a45      	ldr	r2, [pc, #276]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001a82:	483f      	ldr	r0, [pc, #252]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001a84:	f006 fb42 	bl	800810c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2170      	movs	r1, #112	; 0x70
 8001a8c:	483d      	ldr	r0, [pc, #244]	; (8001b84 <MX_GPIO_Init+0x1f0>)
 8001a8e:	f006 fb3d 	bl	800810c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8001a92:	233f      	movs	r3, #63	; 0x3f
 8001a94:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4838      	ldr	r0, [pc, #224]	; (8001b88 <MX_GPIO_Init+0x1f4>)
 8001aa8:	f006 f968 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	482f      	ldr	r0, [pc, #188]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001ac4:	f006 f95a 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8001ac8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4827      	ldr	r0, [pc, #156]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001ae2:	f006 f94b 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8001ae6:	2370      	movs	r3, #112	; 0x70
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	4821      	ldr	r0, [pc, #132]	; (8001b84 <MX_GPIO_Init+0x1f0>)
 8001afe:	f006 f93d 	bl	8007d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2101      	movs	r1, #1
 8001b06:	2006      	movs	r0, #6
 8001b08:	f005 fb91 	bl	800722e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b0c:	2006      	movs	r0, #6
 8001b0e:	f005 fba8 	bl	8007262 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2101      	movs	r1, #1
 8001b16:	2007      	movs	r0, #7
 8001b18:	f005 fb89 	bl	800722e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b1c:	2007      	movs	r0, #7
 8001b1e:	f005 fba0 	bl	8007262 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	2008      	movs	r0, #8
 8001b28:	f005 fb81 	bl	800722e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b2c:	2008      	movs	r0, #8
 8001b2e:	f005 fb98 	bl	8007262 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2101      	movs	r1, #1
 8001b36:	2009      	movs	r0, #9
 8001b38:	f005 fb79 	bl	800722e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b3c:	2009      	movs	r0, #9
 8001b3e:	f005 fb90 	bl	8007262 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2101      	movs	r1, #1
 8001b46:	200a      	movs	r0, #10
 8001b48:	f005 fb71 	bl	800722e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f005 fb88 	bl	8007262 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2101      	movs	r1, #1
 8001b56:	2017      	movs	r0, #23
 8001b58:	f005 fb69 	bl	800722e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b5c:	2017      	movs	r0, #23
 8001b5e:	f005 fb80 	bl	8007262 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2102      	movs	r1, #2
 8001b66:	2028      	movs	r0, #40	; 0x28
 8001b68:	f005 fb61 	bl	800722e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b6c:	2028      	movs	r0, #40	; 0x28
 8001b6e:	f005 fb78 	bl	8007262 <HAL_NVIC_EnableIRQ>

}
 8001b72:	bf00      	nop
 8001b74:	3730      	adds	r7, #48	; 0x30
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	58020800 	.word	0x58020800
 8001b84:	58020c00 	.word	0x58020c00
 8001b88:	58021000 	.word	0x58021000
 8001b8c:	00000000 	.word	0x00000000

08001b90 <homingAprox>:
#define ES1s_UNPRESSED (HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))
#define ES2s_UNPRESSED (HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))
#define ES3s_UNPRESSED (HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))


void homingAprox(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0

	// homeOk = 0;

	rpm = 0.3; //Valor a confirmar
 8001b94:	4922      	ldr	r1, [pc, #136]	; (8001c20 <homingAprox+0x90>)
 8001b96:	a320      	add	r3, pc, #128	; (adr r3, 8001c18 <homingAprox+0x88>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	e9c1 2300 	strd	r2, r3, [r1]
	homAprox = true;
 8001ba0:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <homingAprox+0x94>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <homingAprox+0x98>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	701a      	strb	r2, [r3, #0]


	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);//Apago interrupcion input capture motor 1
 8001bac:	2100      	movs	r1, #0
 8001bae:	481f      	ldr	r0, [pc, #124]	; (8001c2c <homingAprox+0x9c>)
 8001bb0:	f009 fb8a 	bl	800b2c8 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);//Apago interrupcion input capture motor 2
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	481e      	ldr	r0, [pc, #120]	; (8001c30 <homingAprox+0xa0>)
 8001bb8:	f009 fb86 	bl	800b2c8 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);//Apago interrupcion input capture motor 3
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	481d      	ldr	r0, [pc, #116]	; (8001c34 <homingAprox+0xa4>)
 8001bc0:	f009 fb82 	bl	800b2c8 <HAL_TIM_IC_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8001bc4:	2006      	movs	r0, #6
 8001bc6:	f005 fb5a 	bl	800727e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8001bca:	2007      	movs	r0, #7
 8001bcc:	f005 fb57 	bl	800727e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8001bd0:	2008      	movs	r0, #8
 8001bd2:	f005 fb54 	bl	800727e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8001bd6:	2009      	movs	r0, #9
 8001bd8:	f005 fb51 	bl	800727e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8001bdc:	200a      	movs	r0, #10
 8001bde:	f005 fb4e 	bl	800727e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8001be2:	2017      	movs	r0, #23
 8001be4:	f005 fb4b 	bl	800727e <HAL_NVIC_DisableIRQ>

	//Las tres piernas se mueven hacia arriba
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);//Set direccion con la misma convencion que motor.c
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bee:	4812      	ldr	r0, [pc, #72]	; (8001c38 <homingAprox+0xa8>)
 8001bf0:	f006 fa8c 	bl	800810c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfa:	480f      	ldr	r0, [pc, #60]	; (8001c38 <homingAprox+0xa8>)
 8001bfc:	f006 fa86 	bl	800810c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c06:	480c      	ldr	r0, [pc, #48]	; (8001c38 <homingAprox+0xa8>)
 8001c08:	f006 fa80 	bl	800810c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001c0c:	2014      	movs	r0, #20
 8001c0e:	f005 f9df 	bl	8006fd0 <HAL_Delay>


	// uint32_t hom = 0;


	while (homAprox) {
 8001c12:	e167      	b.n	8001ee4 <homingAprox+0x354>
 8001c14:	f3af 8000 	nop.w
 8001c18:	33333333 	.word	0x33333333
 8001c1c:	3fd33333 	.word	0x3fd33333
 8001c20:	24000380 	.word	0x24000380
 8001c24:	24000388 	.word	0x24000388
 8001c28:	24000389 	.word	0x24000389
 8001c2c:	240005d4 	.word	0x240005d4
 8001c30:	24000620 	.word	0x24000620
 8001c34:	2400066c 	.word	0x2400066c
 8001c38:	58020800 	.word	0x58020800
		// 	rpm = rpm + 0.001;
		// }

		//TIM12->CNT=0;

		periodoM[0]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * STEPREV)) - 1.0);
 8001c3c:	4bb4      	ldr	r3, [pc, #720]	; (8001f10 <homingAprox+0x380>)
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c48:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c4c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001c50:	4bb0      	ldr	r3, [pc, #704]	; (8001f14 <homingAprox+0x384>)
 8001c52:	ed93 7b00 	vldr	d7, [r3]
 8001c56:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c5a:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8001f00 <homingAprox+0x370>
 8001c5e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c62:	ed9f 5ba9 	vldr	d5, [pc, #676]	; 8001f08 <homingAprox+0x378>
 8001c66:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c6a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c7a:	4ba7      	ldr	r3, [pc, #668]	; (8001f18 <homingAprox+0x388>)
 8001c7c:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * STEPREV)) - 1.0);
 8001c80:	4ba6      	ldr	r3, [pc, #664]	; (8001f1c <homingAprox+0x38c>)
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c90:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001c94:	4b9f      	ldr	r3, [pc, #636]	; (8001f14 <homingAprox+0x384>)
 8001c96:	ed93 7b00 	vldr	d7, [r3]
 8001c9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c9e:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8001f00 <homingAprox+0x370>
 8001ca2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ca6:	ed9f 5b98 	vldr	d5, [pc, #608]	; 8001f08 <homingAprox+0x378>
 8001caa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cae:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001cbe:	4b96      	ldr	r3, [pc, #600]	; (8001f18 <homingAprox+0x388>)
 8001cc0:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * STEPREV)) - 1.0);
 8001cc4:	4b96      	ldr	r3, [pc, #600]	; (8001f20 <homingAprox+0x390>)
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001cd0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cd4:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001cd8:	4b8e      	ldr	r3, [pc, #568]	; (8001f14 <homingAprox+0x384>)
 8001cda:	ed93 7b00 	vldr	d7, [r3]
 8001cde:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001ce2:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8001f00 <homingAprox+0x370>
 8001ce6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cea:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8001f08 <homingAprox+0x378>
 8001cee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cf2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cf6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cfa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cfe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d02:	4b85      	ldr	r3, [pc, #532]	; (8001f18 <homingAprox+0x388>)
 8001d04:	ed83 7b04 	vstr	d7, [r3, #16]

		//PREGUNTAR
		if (TIM12->CNT > periodoM[0]) {
 8001d08:	4b81      	ldr	r3, [pc, #516]	; (8001f10 <homingAprox+0x380>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d14:	4b80      	ldr	r3, [pc, #512]	; (8001f18 <homingAprox+0x388>)
 8001d16:	ed93 7b00 	vldr	d7, [r3]
 8001d1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	dd0c      	ble.n	8001d3e <homingAprox+0x1ae>
					TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001d24:	4b7c      	ldr	r3, [pc, #496]	; (8001f18 <homingAprox+0x388>)
 8001d26:	ed93 7b00 	vldr	d7, [r3]
 8001d2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d32:	4b77      	ldr	r3, [pc, #476]	; (8001f10 <homingAprox+0x380>)
 8001d34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d38:	ee17 2a90 	vmov	r2, s15
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM13->CNT > periodoM[1]) {
 8001d3e:	4b77      	ldr	r3, [pc, #476]	; (8001f1c <homingAprox+0x38c>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d4a:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <homingAprox+0x388>)
 8001d4c:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d50:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d58:	dd0c      	ble.n	8001d74 <homingAprox+0x1e4>
					TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001d5a:	4b6f      	ldr	r3, [pc, #444]	; (8001f18 <homingAprox+0x388>)
 8001d5c:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d60:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d68:	4b6c      	ldr	r3, [pc, #432]	; (8001f1c <homingAprox+0x38c>)
 8001d6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d6e:	ee17 2a90 	vmov	r2, s15
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM14->CNT > periodoM[2]) {
 8001d74:	4b6a      	ldr	r3, [pc, #424]	; (8001f20 <homingAprox+0x390>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d80:	4b65      	ldr	r3, [pc, #404]	; (8001f18 <homingAprox+0x388>)
 8001d82:	ed93 7b04 	vldr	d7, [r3, #16]
 8001d86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	dd0c      	ble.n	8001daa <homingAprox+0x21a>
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001d90:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <homingAprox+0x388>)
 8001d92:	ed93 7b04 	vldr	d7, [r3, #16]
 8001d96:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d9e:	4b60      	ldr	r3, [pc, #384]	; (8001f20 <homingAprox+0x390>)
 8001da0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001da4:	ee17 2a90 	vmov	r2, s15
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
		}

		TIM12->ARR = periodoM[0];
 8001daa:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <homingAprox+0x388>)
 8001dac:	ed93 7b00 	vldr	d7, [r3]
 8001db0:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <homingAprox+0x380>)
 8001db2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001db6:	ee17 2a90 	vmov	r2, s15
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8001dbc:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <homingAprox+0x380>)
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001dc8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001dcc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dd0:	4b4f      	ldr	r3, [pc, #316]	; (8001f10 <homingAprox+0x380>)
 8001dd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dd6:	ee17 2a90 	vmov	r2, s15
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->ARR =periodoM[1];
 8001ddc:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <homingAprox+0x388>)
 8001dde:	ed93 7b02 	vldr	d7, [r3, #8]
 8001de2:	4b4e      	ldr	r3, [pc, #312]	; (8001f1c <homingAprox+0x38c>)
 8001de4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001de8:	ee17 2a90 	vmov	r2, s15
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8001dee:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <homingAprox+0x38c>)
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001dfa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001dfe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e02:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <homingAprox+0x38c>)
 8001e04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e08:	ee17 2a90 	vmov	r2, s15
 8001e0c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->ARR =periodoM[2];
 8001e0e:	4b42      	ldr	r3, [pc, #264]	; (8001f18 <homingAprox+0x388>)
 8001e10:	ed93 7b04 	vldr	d7, [r3, #16]
 8001e14:	4b42      	ldr	r3, [pc, #264]	; (8001f20 <homingAprox+0x390>)
 8001e16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e1a:	ee17 2a90 	vmov	r2, s15
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8001e20:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <homingAprox+0x390>)
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001e2c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001e30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <homingAprox+0x390>)
 8001e36:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e3a:	ee17 2a90 	vmov	r2, s15
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34


		if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001e40:	2101      	movs	r1, #1
 8001e42:	4838      	ldr	r0, [pc, #224]	; (8001f24 <homingAprox+0x394>)
 8001e44:	f006 f94a 	bl	80080dc <HAL_GPIO_ReadPin>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00d      	beq.n	8001e6a <homingAprox+0x2da>
 8001e4e:	2104      	movs	r1, #4
 8001e50:	4834      	ldr	r0, [pc, #208]	; (8001f24 <homingAprox+0x394>)
 8001e52:	f006 f943 	bl	80080dc <HAL_GPIO_ReadPin>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <homingAprox+0x2da>
 8001e5c:	2110      	movs	r1, #16
 8001e5e:	4831      	ldr	r0, [pc, #196]	; (8001f24 <homingAprox+0x394>)
 8001e60:	f006 f93c 	bl	80080dc <HAL_GPIO_ReadPin>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d126      	bne.n	8001eb8 <homingAprox+0x328>
			HAL_Delay(30);
 8001e6a:	201e      	movs	r0, #30
 8001e6c:	f005 f8b0 	bl	8006fd0 <HAL_Delay>
			if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001e70:	2101      	movs	r1, #1
 8001e72:	482c      	ldr	r0, [pc, #176]	; (8001f24 <homingAprox+0x394>)
 8001e74:	f006 f932 	bl	80080dc <HAL_GPIO_ReadPin>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <homingAprox+0x30a>
 8001e7e:	2104      	movs	r1, #4
 8001e80:	4828      	ldr	r0, [pc, #160]	; (8001f24 <homingAprox+0x394>)
 8001e82:	f006 f92b 	bl	80080dc <HAL_GPIO_ReadPin>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <homingAprox+0x30a>
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	4825      	ldr	r0, [pc, #148]	; (8001f24 <homingAprox+0x394>)
 8001e90:	f006 f924 	bl	80080dc <HAL_GPIO_ReadPin>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10e      	bne.n	8001eb8 <homingAprox+0x328>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4822      	ldr	r0, [pc, #136]	; (8001f28 <homingAprox+0x398>)
 8001e9e:	f008 ffcb 	bl	800ae38 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4821      	ldr	r0, [pc, #132]	; (8001f2c <homingAprox+0x39c>)
 8001ea6:	f008 ffc7 	bl	800ae38 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4820      	ldr	r0, [pc, #128]	; (8001f30 <homingAprox+0x3a0>)
 8001eae:	f008 ffc3 	bl	800ae38 <HAL_TIM_PWM_Stop>
				// HAL_UART_Transmit(&huart3,homeOk, sizeof(homeOk), 100);
				homAprox = false;
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <homingAprox+0x3a4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart3,homeOk, sizeof(homeOk), 100);
			}
		}

		if(homStart){
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <homingAprox+0x3a8>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00e      	beq.n	8001ede <homingAprox+0x34e>
			homStart = false;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <homingAprox+0x3a8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart3,(uint8_t *)"StartHomAprox\n", 15, 100);
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4817      	ldr	r0, [pc, #92]	; (8001f28 <homingAprox+0x398>)
 8001eca:	f008 fea7 	bl	800ac1c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4816      	ldr	r0, [pc, #88]	; (8001f2c <homingAprox+0x39c>)
 8001ed2:	f008 fea3 	bl	800ac1c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4815      	ldr	r0, [pc, #84]	; (8001f30 <homingAprox+0x3a0>)
 8001eda:	f008 fe9f 	bl	800ac1c <HAL_TIM_PWM_Start>
		}
		HAL_Delay(1);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f005 f876 	bl	8006fd0 <HAL_Delay>
	while (homAprox) {
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <homingAprox+0x3a4>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f47f aea7 	bne.w	8001c3c <homingAprox+0xac>
	}

	HAL_UART_Transmit(&huart3,(uint8_t *)"F\n", 3, 100);
 8001eee:	2364      	movs	r3, #100	; 0x64
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	4912      	ldr	r1, [pc, #72]	; (8001f3c <homingAprox+0x3ac>)
 8001ef4:	4812      	ldr	r0, [pc, #72]	; (8001f40 <homingAprox+0x3b0>)
 8001ef6:	f00a fce5 	bl	800c8c4 <HAL_UART_Transmit>
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	00000000 	.word	0x00000000
 8001f04:	40990000 	.word	0x40990000
 8001f08:	00000000 	.word	0x00000000
 8001f0c:	41ec9c38 	.word	0x41ec9c38
 8001f10:	40001800 	.word	0x40001800
 8001f14:	24000380 	.word	0x24000380
 8001f18:	24000500 	.word	0x24000500
 8001f1c:	40001c00 	.word	0x40001c00
 8001f20:	40002000 	.word	0x40002000
 8001f24:	58021000 	.word	0x58021000
 8001f28:	24000704 	.word	0x24000704
 8001f2c:	24000750 	.word	0x24000750
 8001f30:	2400079c 	.word	0x2400079c
 8001f34:	24000388 	.word	0x24000388
 8001f38:	24000389 	.word	0x24000389
 8001f3c:	080124f0 	.word	0x080124f0
 8001f40:	24000cf0 	.word	0x24000cf0
 8001f44:	00000000 	.word	0x00000000

08001f48 <homingArm1>:


void homingArm1(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0

	rpm = 0.5;
 8001f4c:	4970      	ldr	r1, [pc, #448]	; (8002110 <homingArm1+0x1c8>)
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b70      	ldr	r3, [pc, #448]	; (8002114 <homingArm1+0x1cc>)
 8001f54:	e9c1 2300 	strd	r2, r3, [r1]
	TIM12->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * STEPREV)) - 1.0);
 8001f58:	4b6f      	ldr	r3, [pc, #444]	; (8002118 <homingArm1+0x1d0>)
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001f64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001f68:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001f6c:	4b68      	ldr	r3, [pc, #416]	; (8002110 <homingArm1+0x1c8>)
 8001f6e:	ed93 7b00 	vldr	d7, [r3]
 8001f72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001f76:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8002100 <homingArm1+0x1b8>
 8001f7a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f7e:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8002108 <homingArm1+0x1c0>
 8001f82:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f86:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001f8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f8e:	4b62      	ldr	r3, [pc, #392]	; (8002118 <homingArm1+0x1d0>)
 8001f90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f94:	ee17 2a90 	vmov	r2, s15
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM12->CCR1 = (TIM12->ARR) / 2;
 8001f9a:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <homingArm1+0x1d0>)
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	4a5e      	ldr	r2, [pc, #376]	; (8002118 <homingArm1+0x1d0>)
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	6353      	str	r3, [r2, #52]	; 0x34


	if (ES1s_PRESSED) {
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	485d      	ldr	r0, [pc, #372]	; (800211c <homingArm1+0x1d4>)
 8001fa8:	f006 f898 	bl	80080dc <HAL_GPIO_ReadPin>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11b      	bne.n	8001fea <homingArm1+0xa2>

        HAL_UART_Transmit(&huart3,(uint8_t *)"ES1_Pressed\n", 13, 100);
 8001fb2:	2364      	movs	r3, #100	; 0x64
 8001fb4:	220d      	movs	r2, #13
 8001fb6:	495a      	ldr	r1, [pc, #360]	; (8002120 <homingArm1+0x1d8>)
 8001fb8:	485a      	ldr	r0, [pc, #360]	; (8002124 <homingArm1+0x1dc>)
 8001fba:	f00a fc83 	bl	800c8c4 <HAL_UART_Transmit>

		while(ES1s_PRESSED){
 8001fbe:	e00c      	b.n	8001fda <homingArm1+0x92>

			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc6:	4858      	ldr	r0, [pc, #352]	; (8002128 <homingArm1+0x1e0>)
 8001fc8:	f006 f8a0 	bl	800810c <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4857      	ldr	r0, [pc, #348]	; (800212c <homingArm1+0x1e4>)
 8001fd0:	f008 fe24 	bl	800ac1c <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 8001fd4:	201e      	movs	r0, #30
 8001fd6:	f004 fffb 	bl	8006fd0 <HAL_Delay>
		while(ES1s_PRESSED){
 8001fda:	2101      	movs	r1, #1
 8001fdc:	484f      	ldr	r0, [pc, #316]	; (800211c <homingArm1+0x1d4>)
 8001fde:	f006 f87d 	bl	80080dc <HAL_GPIO_ReadPin>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0eb      	beq.n	8001fc0 <homingArm1+0x78>
 8001fe8:	e074      	b.n	80020d4 <homingArm1+0x18c>
		}
	}

    else if (ES1s_UNPRESSED) {
 8001fea:	2101      	movs	r1, #1
 8001fec:	484b      	ldr	r0, [pc, #300]	; (800211c <homingArm1+0x1d4>)
 8001fee:	f006 f875 	bl	80080dc <HAL_GPIO_ReadPin>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d067      	beq.n	80020c8 <homingArm1+0x180>

        while(ES1s_UNPRESSED){
 8001ff8:	e00c      	b.n	8002014 <homingArm1+0xcc>
            HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002000:	4849      	ldr	r0, [pc, #292]	; (8002128 <homingArm1+0x1e0>)
 8002002:	f006 f883 	bl	800810c <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002006:	2100      	movs	r1, #0
 8002008:	4848      	ldr	r0, [pc, #288]	; (800212c <homingArm1+0x1e4>)
 800200a:	f008 fe07 	bl	800ac1c <HAL_TIM_PWM_Start>
            HAL_Delay(30);
 800200e:	201e      	movs	r0, #30
 8002010:	f004 ffde 	bl	8006fd0 <HAL_Delay>
        while(ES1s_UNPRESSED){
 8002014:	2101      	movs	r1, #1
 8002016:	4841      	ldr	r0, [pc, #260]	; (800211c <homingArm1+0x1d4>)
 8002018:	f006 f860 	bl	80080dc <HAL_GPIO_ReadPin>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1eb      	bne.n	8001ffa <homingArm1+0xb2>
        }

        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8002022:	2100      	movs	r1, #0
 8002024:	4841      	ldr	r0, [pc, #260]	; (800212c <homingArm1+0x1e4>)
 8002026:	f008 ff07 	bl	800ae38 <HAL_TIM_PWM_Stop>

        rpm = 0.5;
 800202a:	4939      	ldr	r1, [pc, #228]	; (8002110 <homingArm1+0x1c8>)
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	4b38      	ldr	r3, [pc, #224]	; (8002114 <homingArm1+0x1cc>)
 8002032:	e9c1 2300 	strd	r2, r3, [r1]
        TIM12->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * STEPREV)) - 1.0);
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <homingArm1+0x1d0>)
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002042:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002046:	ee37 6b06 	vadd.f64	d6, d7, d6
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <homingArm1+0x1c8>)
 800204c:	ed93 7b00 	vldr	d7, [r3]
 8002050:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002054:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002100 <homingArm1+0x1b8>
 8002058:	ee27 6b06 	vmul.f64	d6, d7, d6
 800205c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8002108 <homingArm1+0x1c0>
 8002060:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002064:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002068:	ee37 7b46 	vsub.f64	d7, d7, d6
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <homingArm1+0x1d0>)
 800206e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002072:	ee17 2a90 	vmov	r2, s15
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM12->CCR1 = (TIM12->ARR) / 2;
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <homingArm1+0x1d0>)
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	4a26      	ldr	r2, [pc, #152]	; (8002118 <homingArm1+0x1d0>)
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	6353      	str	r3, [r2, #52]	; 0x34

        if (ES1s_PRESSED) {
 8002082:	2101      	movs	r1, #1
 8002084:	4825      	ldr	r0, [pc, #148]	; (800211c <homingArm1+0x1d4>)
 8002086:	f006 f829 	bl	80080dc <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d121      	bne.n	80020d4 <homingArm1+0x18c>

            HAL_UART_Transmit(&huart3,(uint8_t *)"ES1_Pressed\n", 13, 100);
 8002090:	2364      	movs	r3, #100	; 0x64
 8002092:	220d      	movs	r2, #13
 8002094:	4922      	ldr	r1, [pc, #136]	; (8002120 <homingArm1+0x1d8>)
 8002096:	4823      	ldr	r0, [pc, #140]	; (8002124 <homingArm1+0x1dc>)
 8002098:	f00a fc14 	bl	800c8c4 <HAL_UART_Transmit>

            while(ES1s_PRESSED){
 800209c:	e00c      	b.n	80020b8 <homingArm1+0x170>

                HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a4:	4820      	ldr	r0, [pc, #128]	; (8002128 <homingArm1+0x1e0>)
 80020a6:	f006 f831 	bl	800810c <HAL_GPIO_WritePin>
                HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80020aa:	2100      	movs	r1, #0
 80020ac:	481f      	ldr	r0, [pc, #124]	; (800212c <homingArm1+0x1e4>)
 80020ae:	f008 fdb5 	bl	800ac1c <HAL_TIM_PWM_Start>
                HAL_Delay(30);
 80020b2:	201e      	movs	r0, #30
 80020b4:	f004 ff8c 	bl	8006fd0 <HAL_Delay>
            while(ES1s_PRESSED){
 80020b8:	2101      	movs	r1, #1
 80020ba:	4818      	ldr	r0, [pc, #96]	; (800211c <homingArm1+0x1d4>)
 80020bc:	f006 f80e 	bl	80080dc <HAL_GPIO_ReadPin>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0eb      	beq.n	800209e <homingArm1+0x156>
 80020c6:	e005      	b.n	80020d4 <homingArm1+0x18c>
            }

        }

    }else{
		HAL_UART_Transmit(&huart3,(uint8_t *)"Error homArm1\n", 15, 100);
 80020c8:	2364      	movs	r3, #100	; 0x64
 80020ca:	220f      	movs	r2, #15
 80020cc:	4918      	ldr	r1, [pc, #96]	; (8002130 <homingArm1+0x1e8>)
 80020ce:	4815      	ldr	r0, [pc, #84]	; (8002124 <homingArm1+0x1dc>)
 80020d0:	f00a fbf8 	bl	800c8c4 <HAL_UART_Transmit>

	}

    HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 80020d4:	2100      	movs	r1, #0
 80020d6:	4815      	ldr	r0, [pc, #84]	; (800212c <homingArm1+0x1e4>)
 80020d8:	f008 feae 	bl	800ae38 <HAL_TIM_PWM_Stop>
    titha1 = 0;
 80020dc:	4915      	ldr	r1, [pc, #84]	; (8002134 <homingArm1+0x1ec>)
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_Delay(1);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f004 ff70 	bl	8006fd0 <HAL_Delay>
    HAL_UART_Transmit(&huart3,(uint8_t *)"endArm1\n", 9, 100);
 80020f0:	2364      	movs	r3, #100	; 0x64
 80020f2:	2209      	movs	r2, #9
 80020f4:	4910      	ldr	r1, [pc, #64]	; (8002138 <homingArm1+0x1f0>)
 80020f6:	480b      	ldr	r0, [pc, #44]	; (8002124 <homingArm1+0x1dc>)
 80020f8:	f00a fbe4 	bl	800c8c4 <HAL_UART_Transmit>


}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	00000000 	.word	0x00000000
 8002104:	40990000 	.word	0x40990000
 8002108:	00000000 	.word	0x00000000
 800210c:	41ec9c38 	.word	0x41ec9c38
 8002110:	24000380 	.word	0x24000380
 8002114:	3fe00000 	.word	0x3fe00000
 8002118:	40001800 	.word	0x40001800
 800211c:	58021000 	.word	0x58021000
 8002120:	080124f4 	.word	0x080124f4
 8002124:	24000cf0 	.word	0x24000cf0
 8002128:	58020800 	.word	0x58020800
 800212c:	24000704 	.word	0x24000704
 8002130:	08012504 	.word	0x08012504
 8002134:	240003c0 	.word	0x240003c0
 8002138:	08012514 	.word	0x08012514
 800213c:	00000000 	.word	0x00000000

08002140 <homingArm2>:

void homingArm2(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0

	rpm = 0.5;
 8002144:	4970      	ldr	r1, [pc, #448]	; (8002308 <homingArm2+0x1c8>)
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	4b70      	ldr	r3, [pc, #448]	; (800230c <homingArm2+0x1cc>)
 800214c:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * STEPREV)) - 1.0);
 8002150:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <homingArm2+0x1d0>)
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	ee07 3a90 	vmov	s15, r3
 8002158:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800215c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002160:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002164:	4b68      	ldr	r3, [pc, #416]	; (8002308 <homingArm2+0x1c8>)
 8002166:	ed93 7b00 	vldr	d7, [r3]
 800216a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800216e:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80022f8 <homingArm2+0x1b8>
 8002172:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002176:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8002300 <homingArm2+0x1c0>
 800217a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800217e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002182:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002186:	4b62      	ldr	r3, [pc, #392]	; (8002310 <homingArm2+0x1d0>)
 8002188:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800218c:	ee17 2a90 	vmov	r2, s15
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 8002192:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <homingArm2+0x1d0>)
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	4a5e      	ldr	r2, [pc, #376]	; (8002310 <homingArm2+0x1d0>)
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	6353      	str	r3, [r2, #52]	; 0x34


	if (ES2s_PRESSED) {
 800219c:	2104      	movs	r1, #4
 800219e:	485d      	ldr	r0, [pc, #372]	; (8002314 <homingArm2+0x1d4>)
 80021a0:	f005 ff9c 	bl	80080dc <HAL_GPIO_ReadPin>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11b      	bne.n	80021e2 <homingArm2+0xa2>

        HAL_UART_Transmit(&huart3,(uint8_t *)"ES2_Pressed\n", 13, 100);
 80021aa:	2364      	movs	r3, #100	; 0x64
 80021ac:	220d      	movs	r2, #13
 80021ae:	495a      	ldr	r1, [pc, #360]	; (8002318 <homingArm2+0x1d8>)
 80021b0:	485a      	ldr	r0, [pc, #360]	; (800231c <homingArm2+0x1dc>)
 80021b2:	f00a fb87 	bl	800c8c4 <HAL_UART_Transmit>

		while(ES2s_PRESSED){
 80021b6:	e00c      	b.n	80021d2 <homingArm2+0x92>

			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 80021b8:	2201      	movs	r2, #1
 80021ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021be:	4858      	ldr	r0, [pc, #352]	; (8002320 <homingArm2+0x1e0>)
 80021c0:	f005 ffa4 	bl	800810c <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80021c4:	2100      	movs	r1, #0
 80021c6:	4857      	ldr	r0, [pc, #348]	; (8002324 <homingArm2+0x1e4>)
 80021c8:	f008 fd28 	bl	800ac1c <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 80021cc:	201e      	movs	r0, #30
 80021ce:	f004 feff 	bl	8006fd0 <HAL_Delay>
		while(ES2s_PRESSED){
 80021d2:	2104      	movs	r1, #4
 80021d4:	484f      	ldr	r0, [pc, #316]	; (8002314 <homingArm2+0x1d4>)
 80021d6:	f005 ff81 	bl	80080dc <HAL_GPIO_ReadPin>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0eb      	beq.n	80021b8 <homingArm2+0x78>
 80021e0:	e074      	b.n	80022cc <homingArm2+0x18c>
		}
	}

    else if (ES2s_UNPRESSED) {
 80021e2:	2104      	movs	r1, #4
 80021e4:	484b      	ldr	r0, [pc, #300]	; (8002314 <homingArm2+0x1d4>)
 80021e6:	f005 ff79 	bl	80080dc <HAL_GPIO_ReadPin>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d067      	beq.n	80022c0 <homingArm2+0x180>

        while(ES2s_UNPRESSED){
 80021f0:	e00c      	b.n	800220c <homingArm2+0xcc>
            HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021f8:	4849      	ldr	r0, [pc, #292]	; (8002320 <homingArm2+0x1e0>)
 80021fa:	f005 ff87 	bl	800810c <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80021fe:	2100      	movs	r1, #0
 8002200:	4848      	ldr	r0, [pc, #288]	; (8002324 <homingArm2+0x1e4>)
 8002202:	f008 fd0b 	bl	800ac1c <HAL_TIM_PWM_Start>
            HAL_Delay(30);
 8002206:	201e      	movs	r0, #30
 8002208:	f004 fee2 	bl	8006fd0 <HAL_Delay>
        while(ES2s_UNPRESSED){
 800220c:	2104      	movs	r1, #4
 800220e:	4841      	ldr	r0, [pc, #260]	; (8002314 <homingArm2+0x1d4>)
 8002210:	f005 ff64 	bl	80080dc <HAL_GPIO_ReadPin>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1eb      	bne.n	80021f2 <homingArm2+0xb2>
        }

        HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 800221a:	2100      	movs	r1, #0
 800221c:	4841      	ldr	r0, [pc, #260]	; (8002324 <homingArm2+0x1e4>)
 800221e:	f008 fe0b 	bl	800ae38 <HAL_TIM_PWM_Stop>

        rpm = 0.5;
 8002222:	4939      	ldr	r1, [pc, #228]	; (8002308 <homingArm2+0x1c8>)
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <homingArm2+0x1cc>)
 800222a:	e9c1 2300 	strd	r2, r3, [r1]
        TIM13->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * STEPREV)) - 1.0);
 800222e:	4b38      	ldr	r3, [pc, #224]	; (8002310 <homingArm2+0x1d0>)
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800223a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800223e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <homingArm2+0x1c8>)
 8002244:	ed93 7b00 	vldr	d7, [r3]
 8002248:	ee26 7b07 	vmul.f64	d7, d6, d7
 800224c:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80022f8 <homingArm2+0x1b8>
 8002250:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002254:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8002300 <homingArm2+0x1c0>
 8002258:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800225c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002260:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <homingArm2+0x1d0>)
 8002266:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800226a:	ee17 2a90 	vmov	r2, s15
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM13->CCR1 = (TIM13->ARR) / 2;
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <homingArm2+0x1d0>)
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	4a26      	ldr	r2, [pc, #152]	; (8002310 <homingArm2+0x1d0>)
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	6353      	str	r3, [r2, #52]	; 0x34

        if (ES2s_PRESSED) {
 800227a:	2104      	movs	r1, #4
 800227c:	4825      	ldr	r0, [pc, #148]	; (8002314 <homingArm2+0x1d4>)
 800227e:	f005 ff2d 	bl	80080dc <HAL_GPIO_ReadPin>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d121      	bne.n	80022cc <homingArm2+0x18c>

            HAL_UART_Transmit(&huart3,(uint8_t *)"ES2_Pressed\n", 13, 100);
 8002288:	2364      	movs	r3, #100	; 0x64
 800228a:	220d      	movs	r2, #13
 800228c:	4922      	ldr	r1, [pc, #136]	; (8002318 <homingArm2+0x1d8>)
 800228e:	4823      	ldr	r0, [pc, #140]	; (800231c <homingArm2+0x1dc>)
 8002290:	f00a fb18 	bl	800c8c4 <HAL_UART_Transmit>

            while(ES2s_PRESSED){
 8002294:	e00c      	b.n	80022b0 <homingArm2+0x170>

                HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 8002296:	2201      	movs	r2, #1
 8002298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800229c:	4820      	ldr	r0, [pc, #128]	; (8002320 <homingArm2+0x1e0>)
 800229e:	f005 ff35 	bl	800810c <HAL_GPIO_WritePin>
                HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80022a2:	2100      	movs	r1, #0
 80022a4:	481f      	ldr	r0, [pc, #124]	; (8002324 <homingArm2+0x1e4>)
 80022a6:	f008 fcb9 	bl	800ac1c <HAL_TIM_PWM_Start>
                HAL_Delay(30);
 80022aa:	201e      	movs	r0, #30
 80022ac:	f004 fe90 	bl	8006fd0 <HAL_Delay>
            while(ES2s_PRESSED){
 80022b0:	2104      	movs	r1, #4
 80022b2:	4818      	ldr	r0, [pc, #96]	; (8002314 <homingArm2+0x1d4>)
 80022b4:	f005 ff12 	bl	80080dc <HAL_GPIO_ReadPin>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0eb      	beq.n	8002296 <homingArm2+0x156>
 80022be:	e005      	b.n	80022cc <homingArm2+0x18c>
            }

        }

    }else{
		HAL_UART_Transmit(&huart3,(uint8_t *)"Error homArm2\n", 15, 100);
 80022c0:	2364      	movs	r3, #100	; 0x64
 80022c2:	220f      	movs	r2, #15
 80022c4:	4918      	ldr	r1, [pc, #96]	; (8002328 <homingArm2+0x1e8>)
 80022c6:	4815      	ldr	r0, [pc, #84]	; (800231c <homingArm2+0x1dc>)
 80022c8:	f00a fafc 	bl	800c8c4 <HAL_UART_Transmit>
	}

    HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 80022cc:	2100      	movs	r1, #0
 80022ce:	4815      	ldr	r0, [pc, #84]	; (8002324 <homingArm2+0x1e4>)
 80022d0:	f008 fdb2 	bl	800ae38 <HAL_TIM_PWM_Stop>
    titha2 = 0;
 80022d4:	4915      	ldr	r1, [pc, #84]	; (800232c <homingArm2+0x1ec>)
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_Delay(1);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f004 fe74 	bl	8006fd0 <HAL_Delay>
    HAL_UART_Transmit(&huart3,(uint8_t *)"endArm2\n", 9, 100);
 80022e8:	2364      	movs	r3, #100	; 0x64
 80022ea:	2209      	movs	r2, #9
 80022ec:	4910      	ldr	r1, [pc, #64]	; (8002330 <homingArm2+0x1f0>)
 80022ee:	480b      	ldr	r0, [pc, #44]	; (800231c <homingArm2+0x1dc>)
 80022f0:	f00a fae8 	bl	800c8c4 <HAL_UART_Transmit>

}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	00000000 	.word	0x00000000
 80022fc:	40990000 	.word	0x40990000
 8002300:	00000000 	.word	0x00000000
 8002304:	41ec9c38 	.word	0x41ec9c38
 8002308:	24000380 	.word	0x24000380
 800230c:	3fe00000 	.word	0x3fe00000
 8002310:	40001c00 	.word	0x40001c00
 8002314:	58021000 	.word	0x58021000
 8002318:	08012520 	.word	0x08012520
 800231c:	24000cf0 	.word	0x24000cf0
 8002320:	58020800 	.word	0x58020800
 8002324:	24000750 	.word	0x24000750
 8002328:	08012530 	.word	0x08012530
 800232c:	240003c8 	.word	0x240003c8
 8002330:	08012540 	.word	0x08012540
 8002334:	00000000 	.word	0x00000000

08002338 <homingArm3>:

void homingArm3(void) {
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0

	rpm = 0.5;
 800233c:	4976      	ldr	r1, [pc, #472]	; (8002518 <homingArm3+0x1e0>)
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	4b76      	ldr	r3, [pc, #472]	; (800251c <homingArm3+0x1e4>)
 8002344:	e9c1 2300 	strd	r2, r3, [r1]
	TIM14->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * STEPREV)) - 1.0);
 8002348:	4b75      	ldr	r3, [pc, #468]	; (8002520 <homingArm3+0x1e8>)
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002354:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002358:	ee37 6b06 	vadd.f64	d6, d7, d6
 800235c:	4b6e      	ldr	r3, [pc, #440]	; (8002518 <homingArm3+0x1e0>)
 800235e:	ed93 7b00 	vldr	d7, [r3]
 8002362:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002366:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8002508 <homingArm3+0x1d0>
 800236a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800236e:	ed9f 5b68 	vldr	d5, [pc, #416]	; 8002510 <homingArm3+0x1d8>
 8002372:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002376:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800237a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800237e:	4b68      	ldr	r3, [pc, #416]	; (8002520 <homingArm3+0x1e8>)
 8002380:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002384:	ee17 2a90 	vmov	r2, s15
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->CCR1 = (TIM14->ARR) / 2;
 800238a:	4b65      	ldr	r3, [pc, #404]	; (8002520 <homingArm3+0x1e8>)
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	4a64      	ldr	r2, [pc, #400]	; (8002520 <homingArm3+0x1e8>)
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	6353      	str	r3, [r2, #52]	; 0x34


	if (ES3s_PRESSED) {
 8002394:	2110      	movs	r1, #16
 8002396:	4863      	ldr	r0, [pc, #396]	; (8002524 <homingArm3+0x1ec>)
 8002398:	f005 fea0 	bl	80080dc <HAL_GPIO_ReadPin>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11b      	bne.n	80023da <homingArm3+0xa2>

        HAL_UART_Transmit(&huart3,(uint8_t *)"ES3_Pressed\n", 13, 100);
 80023a2:	2364      	movs	r3, #100	; 0x64
 80023a4:	220d      	movs	r2, #13
 80023a6:	4960      	ldr	r1, [pc, #384]	; (8002528 <homingArm3+0x1f0>)
 80023a8:	4860      	ldr	r0, [pc, #384]	; (800252c <homingArm3+0x1f4>)
 80023aa:	f00a fa8b 	bl	800c8c4 <HAL_UART_Transmit>

		while(ES3s_PRESSED){
 80023ae:	e00c      	b.n	80023ca <homingArm3+0x92>

			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023b6:	485e      	ldr	r0, [pc, #376]	; (8002530 <homingArm3+0x1f8>)
 80023b8:	f005 fea8 	bl	800810c <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80023bc:	2100      	movs	r1, #0
 80023be:	485d      	ldr	r0, [pc, #372]	; (8002534 <homingArm3+0x1fc>)
 80023c0:	f008 fc2c 	bl	800ac1c <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 80023c4:	201e      	movs	r0, #30
 80023c6:	f004 fe03 	bl	8006fd0 <HAL_Delay>
		while(ES3s_PRESSED){
 80023ca:	2110      	movs	r1, #16
 80023cc:	4855      	ldr	r0, [pc, #340]	; (8002524 <homingArm3+0x1ec>)
 80023ce:	f005 fe85 	bl	80080dc <HAL_GPIO_ReadPin>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0eb      	beq.n	80023b0 <homingArm3+0x78>
 80023d8:	e074      	b.n	80024c4 <homingArm3+0x18c>
		}
	}

    else if (ES3s_UNPRESSED) {
 80023da:	2110      	movs	r1, #16
 80023dc:	4851      	ldr	r0, [pc, #324]	; (8002524 <homingArm3+0x1ec>)
 80023de:	f005 fe7d 	bl	80080dc <HAL_GPIO_ReadPin>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d067      	beq.n	80024b8 <homingArm3+0x180>

        while(ES3s_UNPRESSED){
 80023e8:	e00c      	b.n	8002404 <homingArm3+0xcc>
            HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 80023ea:	2200      	movs	r2, #0
 80023ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f0:	484f      	ldr	r0, [pc, #316]	; (8002530 <homingArm3+0x1f8>)
 80023f2:	f005 fe8b 	bl	800810c <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80023f6:	2100      	movs	r1, #0
 80023f8:	484e      	ldr	r0, [pc, #312]	; (8002534 <homingArm3+0x1fc>)
 80023fa:	f008 fc0f 	bl	800ac1c <HAL_TIM_PWM_Start>
            HAL_Delay(30);
 80023fe:	201e      	movs	r0, #30
 8002400:	f004 fde6 	bl	8006fd0 <HAL_Delay>
        while(ES3s_UNPRESSED){
 8002404:	2110      	movs	r1, #16
 8002406:	4847      	ldr	r0, [pc, #284]	; (8002524 <homingArm3+0x1ec>)
 8002408:	f005 fe68 	bl	80080dc <HAL_GPIO_ReadPin>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1eb      	bne.n	80023ea <homingArm3+0xb2>
        }

        HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8002412:	2100      	movs	r1, #0
 8002414:	4847      	ldr	r0, [pc, #284]	; (8002534 <homingArm3+0x1fc>)
 8002416:	f008 fd0f 	bl	800ae38 <HAL_TIM_PWM_Stop>

        rpm = 0.5;
 800241a:	493f      	ldr	r1, [pc, #252]	; (8002518 <homingArm3+0x1e0>)
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	4b3e      	ldr	r3, [pc, #248]	; (800251c <homingArm3+0x1e4>)
 8002422:	e9c1 2300 	strd	r2, r3, [r1]
        TIM14->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * STEPREV)) - 1.0);
 8002426:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <homingArm3+0x1e8>)
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002432:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002436:	ee37 6b06 	vadd.f64	d6, d7, d6
 800243a:	4b37      	ldr	r3, [pc, #220]	; (8002518 <homingArm3+0x1e0>)
 800243c:	ed93 7b00 	vldr	d7, [r3]
 8002440:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002444:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8002508 <homingArm3+0x1d0>
 8002448:	ee27 6b06 	vmul.f64	d6, d7, d6
 800244c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8002510 <homingArm3+0x1d8>
 8002450:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002454:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002458:	ee37 7b46 	vsub.f64	d7, d7, d6
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <homingArm3+0x1e8>)
 800245e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002462:	ee17 2a90 	vmov	r2, s15
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM14->CCR1 = (TIM14->ARR) / 2;
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <homingArm3+0x1e8>)
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	4a2c      	ldr	r2, [pc, #176]	; (8002520 <homingArm3+0x1e8>)
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	6353      	str	r3, [r2, #52]	; 0x34

        if (ES3s_PRESSED) {
 8002472:	2110      	movs	r1, #16
 8002474:	482b      	ldr	r0, [pc, #172]	; (8002524 <homingArm3+0x1ec>)
 8002476:	f005 fe31 	bl	80080dc <HAL_GPIO_ReadPin>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d121      	bne.n	80024c4 <homingArm3+0x18c>

            HAL_UART_Transmit(&huart3,(uint8_t *)"ES3_Pressed\n", 13, 100);
 8002480:	2364      	movs	r3, #100	; 0x64
 8002482:	220d      	movs	r2, #13
 8002484:	4928      	ldr	r1, [pc, #160]	; (8002528 <homingArm3+0x1f0>)
 8002486:	4829      	ldr	r0, [pc, #164]	; (800252c <homingArm3+0x1f4>)
 8002488:	f00a fa1c 	bl	800c8c4 <HAL_UART_Transmit>

            while(ES3s_PRESSED){
 800248c:	e00c      	b.n	80024a8 <homingArm3+0x170>

                HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 800248e:	2201      	movs	r2, #1
 8002490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002494:	4826      	ldr	r0, [pc, #152]	; (8002530 <homingArm3+0x1f8>)
 8002496:	f005 fe39 	bl	800810c <HAL_GPIO_WritePin>
                HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800249a:	2100      	movs	r1, #0
 800249c:	4825      	ldr	r0, [pc, #148]	; (8002534 <homingArm3+0x1fc>)
 800249e:	f008 fbbd 	bl	800ac1c <HAL_TIM_PWM_Start>
                HAL_Delay(30);
 80024a2:	201e      	movs	r0, #30
 80024a4:	f004 fd94 	bl	8006fd0 <HAL_Delay>
            while(ES3s_PRESSED){
 80024a8:	2110      	movs	r1, #16
 80024aa:	481e      	ldr	r0, [pc, #120]	; (8002524 <homingArm3+0x1ec>)
 80024ac:	f005 fe16 	bl	80080dc <HAL_GPIO_ReadPin>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0eb      	beq.n	800248e <homingArm3+0x156>
 80024b6:	e005      	b.n	80024c4 <homingArm3+0x18c>
            }

        }

    }else{
		HAL_UART_Transmit(&huart3,(uint8_t *)"Error homArm3\n", 15, 100);
 80024b8:	2364      	movs	r3, #100	; 0x64
 80024ba:	220f      	movs	r2, #15
 80024bc:	491e      	ldr	r1, [pc, #120]	; (8002538 <homingArm3+0x200>)
 80024be:	481b      	ldr	r0, [pc, #108]	; (800252c <homingArm3+0x1f4>)
 80024c0:	f00a fa00 	bl	800c8c4 <HAL_UART_Transmit>
	}

    HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 80024c4:	2100      	movs	r1, #0
 80024c6:	481b      	ldr	r0, [pc, #108]	; (8002534 <homingArm3+0x1fc>)
 80024c8:	f008 fcb6 	bl	800ae38 <HAL_TIM_PWM_Stop>
    titha3 = 0;
 80024cc:	491b      	ldr	r1, [pc, #108]	; (800253c <homingArm3+0x204>)
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_Delay(1);
 80024da:	2001      	movs	r0, #1
 80024dc:	f004 fd78 	bl	8006fd0 <HAL_Delay>
    HAL_UART_Transmit(&huart3,(uint8_t *)"endArm3\n", 9, 100);
 80024e0:	2364      	movs	r3, #100	; 0x64
 80024e2:	2209      	movs	r2, #9
 80024e4:	4916      	ldr	r1, [pc, #88]	; (8002540 <homingArm3+0x208>)
 80024e6:	4811      	ldr	r0, [pc, #68]	; (800252c <homingArm3+0x1f4>)
 80024e8:	f00a f9ec 	bl	800c8c4 <HAL_UART_Transmit>

	/*-------------------------------------------------------------------------------------*/



	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 80024ec:	2100      	movs	r1, #0
 80024ee:	4815      	ldr	r0, [pc, #84]	; (8002544 <homingArm3+0x20c>)
 80024f0:	f008 fd9a 	bl	800b028 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 80024f4:	2100      	movs	r1, #0
 80024f6:	4814      	ldr	r0, [pc, #80]	; (8002548 <homingArm3+0x210>)
 80024f8:	f008 fd96 	bl	800b028 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 80024fc:	2100      	movs	r1, #0
 80024fe:	4813      	ldr	r0, [pc, #76]	; (800254c <homingArm3+0x214>)
 8002500:	f008 fd92 	bl	800b028 <HAL_TIM_IC_Start_IT>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);	  //Activo interrupcion EndStop 2 Superior
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);	  //Activo interrupcion EndStop 2 Inferior
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);	  //Activo interrupcion EndStop 3 Superior
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn); //Activo interrupcion EndStop 3 Inferior
	*/
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	00000000 	.word	0x00000000
 800250c:	40990000 	.word	0x40990000
 8002510:	00000000 	.word	0x00000000
 8002514:	41ec9c38 	.word	0x41ec9c38
 8002518:	24000380 	.word	0x24000380
 800251c:	3fe00000 	.word	0x3fe00000
 8002520:	40002000 	.word	0x40002000
 8002524:	58021000 	.word	0x58021000
 8002528:	0801254c 	.word	0x0801254c
 800252c:	24000cf0 	.word	0x24000cf0
 8002530:	58020800 	.word	0x58020800
 8002534:	2400079c 	.word	0x2400079c
 8002538:	0801255c 	.word	0x0801255c
 800253c:	240003d0 	.word	0x240003d0
 8002540:	0801256c 	.word	0x0801256c
 8002544:	240005d4 	.word	0x240005d4
 8002548:	24000620 	.word	0x24000620
 800254c:	2400066c 	.word	0x2400066c

08002550 <interpretaComando>:


volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 8002556:	4bbf      	ldr	r3, [pc, #764]	; (8002854 <interpretaComando+0x304>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	3b48      	subs	r3, #72	; 0x48
 800255c:	2b2e      	cmp	r3, #46	; 0x2e
 800255e:	f200 83e3 	bhi.w	8002d28 <interpretaComando+0x7d8>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <interpretaComando+0x18>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	08002cb9 	.word	0x08002cb9
 800256c:	08002d29 	.word	0x08002d29
 8002570:	08002d29 	.word	0x08002d29
 8002574:	08002d29 	.word	0x08002d29
 8002578:	08002d29 	.word	0x08002d29
 800257c:	08002955 	.word	0x08002955
 8002580:	08002d29 	.word	0x08002d29
 8002584:	08002d29 	.word	0x08002d29
 8002588:	08002a71 	.word	0x08002a71
 800258c:	08002d29 	.word	0x08002d29
 8002590:	08002d29 	.word	0x08002d29
 8002594:	08002d29 	.word	0x08002d29
 8002598:	08002d29 	.word	0x08002d29
 800259c:	08002d29 	.word	0x08002d29
 80025a0:	08002d29 	.word	0x08002d29
 80025a4:	08002d29 	.word	0x08002d29
 80025a8:	08002d29 	.word	0x08002d29
 80025ac:	08002d29 	.word	0x08002d29
 80025b0:	08002d29 	.word	0x08002d29
 80025b4:	08002d29 	.word	0x08002d29
 80025b8:	08002d29 	.word	0x08002d29
 80025bc:	08002d29 	.word	0x08002d29
 80025c0:	08002d29 	.word	0x08002d29
 80025c4:	08002d29 	.word	0x08002d29
 80025c8:	08002d29 	.word	0x08002d29
 80025cc:	08002d29 	.word	0x08002d29
 80025d0:	08002d29 	.word	0x08002d29
 80025d4:	08002d29 	.word	0x08002d29
 80025d8:	08002d29 	.word	0x08002d29
 80025dc:	08002d29 	.word	0x08002d29
 80025e0:	08002d29 	.word	0x08002d29
 80025e4:	08002d29 	.word	0x08002d29
 80025e8:	08002cb9 	.word	0x08002cb9
 80025ec:	08002d29 	.word	0x08002d29
 80025f0:	08002d29 	.word	0x08002d29
 80025f4:	08002d29 	.word	0x08002d29
 80025f8:	08002d29 	.word	0x08002d29
 80025fc:	08002955 	.word	0x08002955
 8002600:	08002d29 	.word	0x08002d29
 8002604:	08002d29 	.word	0x08002d29
 8002608:	08002a71 	.word	0x08002a71
 800260c:	08002d29 	.word	0x08002d29
 8002610:	08002d29 	.word	0x08002d29
 8002614:	08002d29 	.word	0x08002d29
 8002618:	08002d29 	.word	0x08002d29
 800261c:	08002d29 	.word	0x08002d29
 8002620:	08002625 	.word	0x08002625

	case 'v':
		HAL_UART_Transmit(&huart3, (uint8_t *)"params\n",8, 100);
 8002624:	2364      	movs	r3, #100	; 0x64
 8002626:	2208      	movs	r2, #8
 8002628:	498b      	ldr	r1, [pc, #556]	; (8002858 <interpretaComando+0x308>)
 800262a:	488c      	ldr	r0, [pc, #560]	; (800285c <interpretaComando+0x30c>)
 800262c:	f00a f94a 	bl	800c8c4 <HAL_UART_Transmit>
		uint8_t i = 1;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t j = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while(rx_buffer[i] != 0){
 800263c:	e182      	b.n	8002944 <interpretaComando+0x3f4>
			if(rx_buffer[i] == 'm'){
 800263e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002642:	4a84      	ldr	r2, [pc, #528]	; (8002854 <interpretaComando+0x304>)
 8002644:	5cd3      	ldrb	r3, [r2, r3]
 8002646:	2b6d      	cmp	r3, #109	; 0x6d
 8002648:	d13b      	bne.n	80026c2 <interpretaComando+0x172>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800264a:	e012      	b.n	8002672 <interpretaComando+0x122>
					auxString[j] = rx_buffer[i+1];
 800264c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002656:	497f      	ldr	r1, [pc, #508]	; (8002854 <interpretaComando+0x304>)
 8002658:	5c89      	ldrb	r1, [r1, r2]
 800265a:	4a81      	ldr	r2, [pc, #516]	; (8002860 <interpretaComando+0x310>)
 800265c:	54d1      	strb	r1, [r2, r3]
					j++;
 800265e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002662:	3301      	adds	r3, #1
 8002664:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800266c:	3301      	adds	r3, #1
 800266e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002676:	3301      	adds	r3, #1
 8002678:	4a76      	ldr	r2, [pc, #472]	; (8002854 <interpretaComando+0x304>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	2b20      	cmp	r3, #32
 800267e:	d1e5      	bne.n	800264c <interpretaComando+0xfc>
				}
				vmax = strtod(&auxString[0], NULL);
 8002680:	2100      	movs	r1, #0
 8002682:	4877      	ldr	r0, [pc, #476]	; (8002860 <interpretaComando+0x310>)
 8002684:	f00d fa3e 	bl	800fb04 <strtod>
 8002688:	eeb0 7b40 	vmov.f64	d7, d0
 800268c:	4b75      	ldr	r3, [pc, #468]	; (8002864 <interpretaComando+0x314>)
 800268e:	ed83 7b00 	vstr	d7, [r3]

				for (int k = 0; k <= 10; k++) {
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
 8002696:	e007      	b.n	80026a8 <interpretaComando+0x158>
					auxString[k] = 0;
 8002698:	4a71      	ldr	r2, [pc, #452]	; (8002860 <interpretaComando+0x310>)
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	4413      	add	r3, r2
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	3301      	adds	r3, #1
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	2b0a      	cmp	r3, #10
 80026ac:	ddf4      	ble.n	8002698 <interpretaComando+0x148>
				}

				j=0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3, (uint8_t *)"vm\n",4, 100);
 80026b4:	2364      	movs	r3, #100	; 0x64
 80026b6:	2204      	movs	r2, #4
 80026b8:	496b      	ldr	r1, [pc, #428]	; (8002868 <interpretaComando+0x318>)
 80026ba:	4868      	ldr	r0, [pc, #416]	; (800285c <interpretaComando+0x30c>)
 80026bc:	f00a f902 	bl	800c8c4 <HAL_UART_Transmit>
 80026c0:	e13b      	b.n	800293a <interpretaComando+0x3ea>
			}
			else if(rx_buffer[i] == 'v'){
 80026c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026c6:	4a63      	ldr	r2, [pc, #396]	; (8002854 <interpretaComando+0x304>)
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
 80026ca:	2b76      	cmp	r3, #118	; 0x76
 80026cc:	d143      	bne.n	8002756 <interpretaComando+0x206>
				 if(rx_buffer[i+1] == 'f'){
 80026ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d2:	3301      	adds	r3, #1
 80026d4:	4a5f      	ldr	r2, [pc, #380]	; (8002854 <interpretaComando+0x304>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	2b66      	cmp	r3, #102	; 0x66
 80026da:	f040 812e 	bne.w	800293a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80026de:	e012      	b.n	8002706 <interpretaComando+0x1b6>
						auxString[j] = rx_buffer[i+2];
 80026e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026e4:	1c9a      	adds	r2, r3, #2
 80026e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026ea:	495a      	ldr	r1, [pc, #360]	; (8002854 <interpretaComando+0x304>)
 80026ec:	5c89      	ldrb	r1, [r1, r2]
 80026ee:	4a5c      	ldr	r2, [pc, #368]	; (8002860 <interpretaComando+0x310>)
 80026f0:	54d1      	strb	r1, [r2, r3]
						j++;
 80026f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026f6:	3301      	adds	r3, #1
 80026f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 80026fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002700:	3301      	adds	r3, #1
 8002702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800270a:	3302      	adds	r3, #2
 800270c:	4a51      	ldr	r2, [pc, #324]	; (8002854 <interpretaComando+0x304>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	2b20      	cmp	r3, #32
 8002712:	d1e5      	bne.n	80026e0 <interpretaComando+0x190>
					}
					vf = strtod(&auxString[0], NULL);
 8002714:	2100      	movs	r1, #0
 8002716:	4852      	ldr	r0, [pc, #328]	; (8002860 <interpretaComando+0x310>)
 8002718:	f00d f9f4 	bl	800fb04 <strtod>
 800271c:	eeb0 7b40 	vmov.f64	d7, d0
 8002720:	4b52      	ldr	r3, [pc, #328]	; (800286c <interpretaComando+0x31c>)
 8002722:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	e007      	b.n	800273c <interpretaComando+0x1ec>
						auxString[k] = 0;
 800272c:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <interpretaComando+0x310>)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4413      	add	r3, r2
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3301      	adds	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b0a      	cmp	r3, #10
 8002740:	ddf4      	ble.n	800272c <interpretaComando+0x1dc>
					}

					j=0;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"vf\n", 4, 100);
 8002748:	2364      	movs	r3, #100	; 0x64
 800274a:	2204      	movs	r2, #4
 800274c:	4948      	ldr	r1, [pc, #288]	; (8002870 <interpretaComando+0x320>)
 800274e:	4843      	ldr	r0, [pc, #268]	; (800285c <interpretaComando+0x30c>)
 8002750:	f00a f8b8 	bl	800c8c4 <HAL_UART_Transmit>
 8002754:	e0f1      	b.n	800293a <interpretaComando+0x3ea>
				}
			}

			else if(rx_buffer[i] == 'v'){
 8002756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800275a:	4a3e      	ldr	r2, [pc, #248]	; (8002854 <interpretaComando+0x304>)
 800275c:	5cd3      	ldrb	r3, [r2, r3]
 800275e:	2b76      	cmp	r3, #118	; 0x76
 8002760:	d143      	bne.n	80027ea <interpretaComando+0x29a>
				 if(rx_buffer[i+1] == 'i'){
 8002762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002766:	3301      	adds	r3, #1
 8002768:	4a3a      	ldr	r2, [pc, #232]	; (8002854 <interpretaComando+0x304>)
 800276a:	5cd3      	ldrb	r3, [r2, r3]
 800276c:	2b69      	cmp	r3, #105	; 0x69
 800276e:	f040 80e4 	bne.w	800293a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002772:	e012      	b.n	800279a <interpretaComando+0x24a>
						auxString[j] = rx_buffer[i+2];
 8002774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002778:	1c9a      	adds	r2, r3, #2
 800277a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800277e:	4935      	ldr	r1, [pc, #212]	; (8002854 <interpretaComando+0x304>)
 8002780:	5c89      	ldrb	r1, [r1, r2]
 8002782:	4a37      	ldr	r2, [pc, #220]	; (8002860 <interpretaComando+0x310>)
 8002784:	54d1      	strb	r1, [r2, r3]
						j++;
 8002786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800278a:	3301      	adds	r3, #1
 800278c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 8002790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002794:	3301      	adds	r3, #1
 8002796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800279a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800279e:	3302      	adds	r3, #2
 80027a0:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <interpretaComando+0x304>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d1e5      	bne.n	8002774 <interpretaComando+0x224>
					}
					vi = strtod(&auxString[0], NULL);
 80027a8:	2100      	movs	r1, #0
 80027aa:	482d      	ldr	r0, [pc, #180]	; (8002860 <interpretaComando+0x310>)
 80027ac:	f00d f9aa 	bl	800fb04 <strtod>
 80027b0:	eeb0 7b40 	vmov.f64	d7, d0
 80027b4:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <interpretaComando+0x324>)
 80027b6:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	e007      	b.n	80027d0 <interpretaComando+0x280>
						auxString[k] = 0;
 80027c0:	4a27      	ldr	r2, [pc, #156]	; (8002860 <interpretaComando+0x310>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4413      	add	r3, r2
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b0a      	cmp	r3, #10
 80027d4:	ddf4      	ble.n	80027c0 <interpretaComando+0x270>
					}

					j=0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"vi\n", 4, 100);
 80027dc:	2364      	movs	r3, #100	; 0x64
 80027de:	2204      	movs	r2, #4
 80027e0:	4925      	ldr	r1, [pc, #148]	; (8002878 <interpretaComando+0x328>)
 80027e2:	481e      	ldr	r0, [pc, #120]	; (800285c <interpretaComando+0x30c>)
 80027e4:	f00a f86e 	bl	800c8c4 <HAL_UART_Transmit>
 80027e8:	e0a7      	b.n	800293a <interpretaComando+0x3ea>
				}
			}


			else if(rx_buffer[i] == 'a'){
 80027ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ee:	4a19      	ldr	r2, [pc, #100]	; (8002854 <interpretaComando+0x304>)
 80027f0:	5cd3      	ldrb	r3, [r2, r3]
 80027f2:	2b61      	cmp	r3, #97	; 0x61
 80027f4:	d159      	bne.n	80028aa <interpretaComando+0x35a>
				 if(rx_buffer[i+1] == 'm'){
 80027f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027fa:	3301      	adds	r3, #1
 80027fc:	4a15      	ldr	r2, [pc, #84]	; (8002854 <interpretaComando+0x304>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	2b6d      	cmp	r3, #109	; 0x6d
 8002802:	f040 809a 	bne.w	800293a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002806:	e012      	b.n	800282e <interpretaComando+0x2de>
						auxString[j] = rx_buffer[i+2];
 8002808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800280c:	1c9a      	adds	r2, r3, #2
 800280e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002812:	4910      	ldr	r1, [pc, #64]	; (8002854 <interpretaComando+0x304>)
 8002814:	5c89      	ldrb	r1, [r1, r2]
 8002816:	4a12      	ldr	r2, [pc, #72]	; (8002860 <interpretaComando+0x310>)
 8002818:	54d1      	strb	r1, [r2, r3]
						j++;
 800281a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800281e:	3301      	adds	r3, #1
 8002820:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 8002824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002828:	3301      	adds	r3, #1
 800282a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800282e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002832:	3302      	adds	r3, #2
 8002834:	4a07      	ldr	r2, [pc, #28]	; (8002854 <interpretaComando+0x304>)
 8002836:	5cd3      	ldrb	r3, [r2, r3]
 8002838:	2b20      	cmp	r3, #32
 800283a:	d1e5      	bne.n	8002808 <interpretaComando+0x2b8>
					}
					amax = strtod(&auxString[0], NULL);
 800283c:	2100      	movs	r1, #0
 800283e:	4808      	ldr	r0, [pc, #32]	; (8002860 <interpretaComando+0x310>)
 8002840:	f00d f960 	bl	800fb04 <strtod>
 8002844:	eeb0 7b40 	vmov.f64	d7, d0
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <interpretaComando+0x32c>)
 800284a:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	e01d      	b.n	8002890 <interpretaComando+0x340>
 8002854:	24000494 	.word	0x24000494
 8002858:	08012578 	.word	0x08012578
 800285c:	24000cf0 	.word	0x24000cf0
 8002860:	24000398 	.word	0x24000398
 8002864:	240003d8 	.word	0x240003d8
 8002868:	08012580 	.word	0x08012580
 800286c:	240003f8 	.word	0x240003f8
 8002870:	08012584 	.word	0x08012584
 8002874:	240003f0 	.word	0x240003f0
 8002878:	08012588 	.word	0x08012588
 800287c:	240003e0 	.word	0x240003e0
						auxString[k] = 0;
 8002880:	4aad      	ldr	r2, [pc, #692]	; (8002b38 <interpretaComando+0x5e8>)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	4413      	add	r3, r2
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b0a      	cmp	r3, #10
 8002894:	ddf4      	ble.n	8002880 <interpretaComando+0x330>
					}

					j=0;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"am\n", 4, 100);
 800289c:	2364      	movs	r3, #100	; 0x64
 800289e:	2204      	movs	r2, #4
 80028a0:	49a6      	ldr	r1, [pc, #664]	; (8002b3c <interpretaComando+0x5ec>)
 80028a2:	48a7      	ldr	r0, [pc, #668]	; (8002b40 <interpretaComando+0x5f0>)
 80028a4:	f00a f80e 	bl	800c8c4 <HAL_UART_Transmit>
 80028a8:	e047      	b.n	800293a <interpretaComando+0x3ea>
				}
			}
			else if(rx_buffer[i] == 'j'){
 80028aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ae:	4aa5      	ldr	r2, [pc, #660]	; (8002b44 <interpretaComando+0x5f4>)
 80028b0:	5cd3      	ldrb	r3, [r2, r3]
 80028b2:	2b6a      	cmp	r3, #106	; 0x6a
 80028b4:	d141      	bne.n	800293a <interpretaComando+0x3ea>
				 if(rx_buffer[i+1] == 'm'){
 80028b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ba:	3301      	adds	r3, #1
 80028bc:	4aa1      	ldr	r2, [pc, #644]	; (8002b44 <interpretaComando+0x5f4>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	2b6d      	cmp	r3, #109	; 0x6d
 80028c2:	d13a      	bne.n	800293a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80028c4:	e012      	b.n	80028ec <interpretaComando+0x39c>
						auxString[j] = rx_buffer[i+2];
 80028c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ca:	1c9a      	adds	r2, r3, #2
 80028cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80028d0:	499c      	ldr	r1, [pc, #624]	; (8002b44 <interpretaComando+0x5f4>)
 80028d2:	5c89      	ldrb	r1, [r1, r2]
 80028d4:	4a98      	ldr	r2, [pc, #608]	; (8002b38 <interpretaComando+0x5e8>)
 80028d6:	54d1      	strb	r1, [r2, r3]
						j++;
 80028d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80028dc:	3301      	adds	r3, #1
 80028de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 80028e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e6:	3301      	adds	r3, #1
 80028e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80028ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f0:	3302      	adds	r3, #2
 80028f2:	4a94      	ldr	r2, [pc, #592]	; (8002b44 <interpretaComando+0x5f4>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d1e5      	bne.n	80028c6 <interpretaComando+0x376>
					}
					jmax = strtod(&auxString[0], NULL);
 80028fa:	2100      	movs	r1, #0
 80028fc:	488e      	ldr	r0, [pc, #568]	; (8002b38 <interpretaComando+0x5e8>)
 80028fe:	f00d f901 	bl	800fb04 <strtod>
 8002902:	eeb0 7b40 	vmov.f64	d7, d0
 8002906:	4b90      	ldr	r3, [pc, #576]	; (8002b48 <interpretaComando+0x5f8>)
 8002908:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	e007      	b.n	8002922 <interpretaComando+0x3d2>
						auxString[k] = 0;
 8002912:	4a89      	ldr	r2, [pc, #548]	; (8002b38 <interpretaComando+0x5e8>)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4413      	add	r3, r2
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	3301      	adds	r3, #1
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b0a      	cmp	r3, #10
 8002926:	ddf4      	ble.n	8002912 <interpretaComando+0x3c2>
					}
					j=0;
 8002928:	2300      	movs	r3, #0
 800292a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"jm\n", 4, 100);
 800292e:	2364      	movs	r3, #100	; 0x64
 8002930:	2204      	movs	r2, #4
 8002932:	4986      	ldr	r1, [pc, #536]	; (8002b4c <interpretaComando+0x5fc>)
 8002934:	4882      	ldr	r0, [pc, #520]	; (8002b40 <interpretaComando+0x5f0>)
 8002936:	f009 ffc5 	bl	800c8c4 <HAL_UART_Transmit>
				}
			}
			i++;
 800293a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800293e:	3301      	adds	r3, #1
 8002940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(rx_buffer[i] != 0){
 8002944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002948:	4a7e      	ldr	r2, [pc, #504]	; (8002b44 <interpretaComando+0x5f4>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f ae76 	bne.w	800263e <interpretaComando+0xee>
		}


		break;
 8002952:	e1e9      	b.n	8002d28 <interpretaComando+0x7d8>



	case 'M':						//:M(motor) + numero de motor (1. 2. 3) + Angulo de 0 a 90
	case 'm':
		switch(rx_buffer[1]){
 8002954:	4b7b      	ldr	r3, [pc, #492]	; (8002b44 <interpretaComando+0x5f4>)
 8002956:	785b      	ldrb	r3, [r3, #1]
 8002958:	2b33      	cmp	r3, #51	; 0x33
 800295a:	d05b      	beq.n	8002a14 <interpretaComando+0x4c4>
 800295c:	2b33      	cmp	r3, #51	; 0x33
 800295e:	dc7f      	bgt.n	8002a60 <interpretaComando+0x510>
 8002960:	2b31      	cmp	r3, #49	; 0x31
 8002962:	d002      	beq.n	800296a <interpretaComando+0x41a>
 8002964:	2b32      	cmp	r3, #50	; 0x32
 8002966:	d02f      	beq.n	80029c8 <interpretaComando+0x478>
 8002968:	e07a      	b.n	8002a60 <interpretaComando+0x510>
		case '1':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor1\n\r", 8, 100);
 800296a:	2364      	movs	r3, #100	; 0x64
 800296c:	2208      	movs	r2, #8
 800296e:	4978      	ldr	r1, [pc, #480]	; (8002b50 <interpretaComando+0x600>)
 8002970:	4873      	ldr	r0, [pc, #460]	; (8002b40 <interpretaComando+0x5f0>)
 8002972:	f009 ffa7 	bl	800c8c4 <HAL_UART_Transmit>
			aux =  strtod(&rx_buffer[2], NULL);
 8002976:	2100      	movs	r1, #0
 8002978:	4876      	ldr	r0, [pc, #472]	; (8002b54 <interpretaComando+0x604>)
 800297a:	f00d f8c3 	bl	800fb04 <strtod>
 800297e:	eeb0 7b40 	vmov.f64	d7, d0
 8002982:	4b75      	ldr	r3, [pc, #468]	; (8002b58 <interpretaComando+0x608>)
 8002984:	ed83 7b00 	vstr	d7, [r3]
			if(aux>=0 && aux<=90){  // verificacion de limites articulares
 8002988:	4b73      	ldr	r3, [pc, #460]	; (8002b58 <interpretaComando+0x608>)
 800298a:	ed93 7b00 	vldr	d7, [r3]
 800298e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	db10      	blt.n	80029ba <interpretaComando+0x46a>
 8002998:	4b6f      	ldr	r3, [pc, #444]	; (8002b58 <interpretaComando+0x608>)
 800299a:	ed93 7b00 	vldr	d7, [r3]
 800299e:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8002b30 <interpretaComando+0x5e0>
 80029a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	d806      	bhi.n	80029ba <interpretaComando+0x46a>
				titha1 = aux;
 80029ac:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <interpretaComando+0x608>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	496a      	ldr	r1, [pc, #424]	; (8002b5c <interpretaComando+0x60c>)
 80029b4:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 80029b8:	e059      	b.n	8002a6e <interpretaComando+0x51e>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 80029ba:	2364      	movs	r3, #100	; 0x64
 80029bc:	220a      	movs	r2, #10
 80029be:	4968      	ldr	r1, [pc, #416]	; (8002b60 <interpretaComando+0x610>)
 80029c0:	485f      	ldr	r0, [pc, #380]	; (8002b40 <interpretaComando+0x5f0>)
 80029c2:	f009 ff7f 	bl	800c8c4 <HAL_UART_Transmit>
			break;
 80029c6:	e052      	b.n	8002a6e <interpretaComando+0x51e>
		case '2':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor2\n\r", 8, 100);
 80029c8:	2364      	movs	r3, #100	; 0x64
 80029ca:	2208      	movs	r2, #8
 80029cc:	4965      	ldr	r1, [pc, #404]	; (8002b64 <interpretaComando+0x614>)
 80029ce:	485c      	ldr	r0, [pc, #368]	; (8002b40 <interpretaComando+0x5f0>)
 80029d0:	f009 ff78 	bl	800c8c4 <HAL_UART_Transmit>
			if(aux>=0 && aux<=90){  // verificacion de limites articulares
 80029d4:	4b60      	ldr	r3, [pc, #384]	; (8002b58 <interpretaComando+0x608>)
 80029d6:	ed93 7b00 	vldr	d7, [r3]
 80029da:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80029de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e2:	db10      	blt.n	8002a06 <interpretaComando+0x4b6>
 80029e4:	4b5c      	ldr	r3, [pc, #368]	; (8002b58 <interpretaComando+0x608>)
 80029e6:	ed93 7b00 	vldr	d7, [r3]
 80029ea:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002b30 <interpretaComando+0x5e0>
 80029ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80029f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f6:	d806      	bhi.n	8002a06 <interpretaComando+0x4b6>
				titha2 = aux;
 80029f8:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <interpretaComando+0x608>)
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	495a      	ldr	r1, [pc, #360]	; (8002b68 <interpretaComando+0x618>)
 8002a00:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 8002a04:	e033      	b.n	8002a6e <interpretaComando+0x51e>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 8002a06:	2364      	movs	r3, #100	; 0x64
 8002a08:	220a      	movs	r2, #10
 8002a0a:	4955      	ldr	r1, [pc, #340]	; (8002b60 <interpretaComando+0x610>)
 8002a0c:	484c      	ldr	r0, [pc, #304]	; (8002b40 <interpretaComando+0x5f0>)
 8002a0e:	f009 ff59 	bl	800c8c4 <HAL_UART_Transmit>
			break;
 8002a12:	e02c      	b.n	8002a6e <interpretaComando+0x51e>
		case '3':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor3\n\r", 8, 100);
 8002a14:	2364      	movs	r3, #100	; 0x64
 8002a16:	2208      	movs	r2, #8
 8002a18:	4954      	ldr	r1, [pc, #336]	; (8002b6c <interpretaComando+0x61c>)
 8002a1a:	4849      	ldr	r0, [pc, #292]	; (8002b40 <interpretaComando+0x5f0>)
 8002a1c:	f009 ff52 	bl	800c8c4 <HAL_UART_Transmit>
			if(aux>=0 && aux<=90){   // verificacion de limites articulares
 8002a20:	4b4d      	ldr	r3, [pc, #308]	; (8002b58 <interpretaComando+0x608>)
 8002a22:	ed93 7b00 	vldr	d7, [r3]
 8002a26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2e:	db10      	blt.n	8002a52 <interpretaComando+0x502>
 8002a30:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <interpretaComando+0x608>)
 8002a32:	ed93 7b00 	vldr	d7, [r3]
 8002a36:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002b30 <interpretaComando+0x5e0>
 8002a3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a42:	d806      	bhi.n	8002a52 <interpretaComando+0x502>
				titha3 = aux;
 8002a44:	4b44      	ldr	r3, [pc, #272]	; (8002b58 <interpretaComando+0x608>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	4949      	ldr	r1, [pc, #292]	; (8002b70 <interpretaComando+0x620>)
 8002a4c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 8002a50:	e00d      	b.n	8002a6e <interpretaComando+0x51e>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 8002a52:	2364      	movs	r3, #100	; 0x64
 8002a54:	220a      	movs	r2, #10
 8002a56:	4942      	ldr	r1, [pc, #264]	; (8002b60 <interpretaComando+0x610>)
 8002a58:	4839      	ldr	r0, [pc, #228]	; (8002b40 <interpretaComando+0x5f0>)
 8002a5a:	f009 ff33 	bl	800c8c4 <HAL_UART_Transmit>
			break;
 8002a5e:	e006      	b.n	8002a6e <interpretaComando+0x51e>

		default:
			HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorMotor\n\r", 12, 100);
 8002a60:	2364      	movs	r3, #100	; 0x64
 8002a62:	220c      	movs	r2, #12
 8002a64:	4943      	ldr	r1, [pc, #268]	; (8002b74 <interpretaComando+0x624>)
 8002a66:	4836      	ldr	r0, [pc, #216]	; (8002b40 <interpretaComando+0x5f0>)
 8002a68:	f009 ff2c 	bl	800c8c4 <HAL_UART_Transmit>
			break;
 8002a6c:	bf00      	nop
		}
		break;
 8002a6e:	e15b      	b.n	8002d28 <interpretaComando+0x7d8>



	case 'P':												//:Px0.1 y0.1 z-0.5 \0 (Eje, valor, espacio, Eje, valor, espacio, Eje, valor, espacio)
	case 'p':
		HAL_UART_Transmit(&huart3,(uint8_t *)"Punto\n\r", 7, 100);
 8002a70:	2364      	movs	r3, #100	; 0x64
 8002a72:	2207      	movs	r2, #7
 8002a74:	4940      	ldr	r1, [pc, #256]	; (8002b78 <interpretaComando+0x628>)
 8002a76:	4832      	ldr	r0, [pc, #200]	; (8002b40 <interpretaComando+0x5f0>)
 8002a78:	f009 ff24 	bl	800c8c4 <HAL_UART_Transmit>
		flagErrorEndStop = 0;
 8002a7c:	493f      	ldr	r1, [pc, #252]	; (8002b7c <interpretaComando+0x62c>)
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	e9c1 2300 	strd	r2, r3, [r1]
		i = 1;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		j = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while(rx_buffer[i] != 0){
 8002a96:	e0f8      	b.n	8002c8a <interpretaComando+0x73a>
			if(rx_buffer[i] == 'x'){
 8002a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a9c:	4a29      	ldr	r2, [pc, #164]	; (8002b44 <interpretaComando+0x5f4>)
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	2b78      	cmp	r3, #120	; 0x78
 8002aa2:	d13b      	bne.n	8002b1c <interpretaComando+0x5cc>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002aa4:	e012      	b.n	8002acc <interpretaComando+0x57c>
					auxString[j] = rx_buffer[i+1];
 8002aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ab0:	4924      	ldr	r1, [pc, #144]	; (8002b44 <interpretaComando+0x5f4>)
 8002ab2:	5c89      	ldrb	r1, [r1, r2]
 8002ab4:	4a20      	ldr	r2, [pc, #128]	; (8002b38 <interpretaComando+0x5e8>)
 8002ab6:	54d1      	strb	r1, [r2, r3]
					j++;
 8002ab8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002abc:	3301      	adds	r3, #1
 8002abe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <interpretaComando+0x5f4>)
 8002ad4:	5cd3      	ldrb	r3, [r2, r3]
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d1e5      	bne.n	8002aa6 <interpretaComando+0x556>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 8002ada:	2100      	movs	r1, #0
 8002adc:	4816      	ldr	r0, [pc, #88]	; (8002b38 <interpretaComando+0x5e8>)
 8002ade:	f00d f811 	bl	800fb04 <strtod>
 8002ae2:	eeb0 7b40 	vmov.f64	d7, d0
 8002ae6:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <interpretaComando+0x630>)
 8002ae8:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e007      	b.n	8002b02 <interpretaComando+0x5b2>
					auxString[k] = 0;
 8002af2:	4a11      	ldr	r2, [pc, #68]	; (8002b38 <interpretaComando+0x5e8>)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3301      	adds	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b0a      	cmp	r3, #10
 8002b06:	ddf4      	ble.n	8002af2 <interpretaComando+0x5a2>
				}
				j=0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3, (uint8_t *)"PuntoX_ok\n\r", 11, 100);
 8002b0e:	2364      	movs	r3, #100	; 0x64
 8002b10:	220b      	movs	r2, #11
 8002b12:	491c      	ldr	r1, [pc, #112]	; (8002b84 <interpretaComando+0x634>)
 8002b14:	480a      	ldr	r0, [pc, #40]	; (8002b40 <interpretaComando+0x5f0>)
 8002b16:	f009 fed5 	bl	800c8c4 <HAL_UART_Transmit>
 8002b1a:	e0b1      	b.n	8002c80 <interpretaComando+0x730>
			}
			else if(rx_buffer[i] == 'y'){
 8002b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b20:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <interpretaComando+0x5f4>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	2b79      	cmp	r3, #121	; 0x79
 8002b26:	d16a      	bne.n	8002bfe <interpretaComando+0x6ae>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002b28:	e041      	b.n	8002bae <interpretaComando+0x65e>
 8002b2a:	bf00      	nop
 8002b2c:	f3af 8000 	nop.w
 8002b30:	00000000 	.word	0x00000000
 8002b34:	40568000 	.word	0x40568000
 8002b38:	24000398 	.word	0x24000398
 8002b3c:	0801258c 	.word	0x0801258c
 8002b40:	24000cf0 	.word	0x24000cf0
 8002b44:	24000494 	.word	0x24000494
 8002b48:	240003e8 	.word	0x240003e8
 8002b4c:	08012590 	.word	0x08012590
 8002b50:	08012594 	.word	0x08012594
 8002b54:	24000496 	.word	0x24000496
 8002b58:	24000390 	.word	0x24000390
 8002b5c:	240003c0 	.word	0x240003c0
 8002b60:	080125a0 	.word	0x080125a0
 8002b64:	080125ac 	.word	0x080125ac
 8002b68:	240003c8 	.word	0x240003c8
 8002b6c:	080125b8 	.word	0x080125b8
 8002b70:	240003d0 	.word	0x240003d0
 8002b74:	080125c4 	.word	0x080125c4
 8002b78:	080125d4 	.word	0x080125d4
 8002b7c:	24000520 	.word	0x24000520
 8002b80:	24000418 	.word	0x24000418
 8002b84:	080125dc 	.word	0x080125dc
					auxString[j] = rx_buffer[i+1];
 8002b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b92:	4969      	ldr	r1, [pc, #420]	; (8002d38 <interpretaComando+0x7e8>)
 8002b94:	5c89      	ldrb	r1, [r1, r2]
 8002b96:	4a69      	ldr	r2, [pc, #420]	; (8002d3c <interpretaComando+0x7ec>)
 8002b98:	54d1      	strb	r1, [r2, r3]
					j++;
 8002b9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	4a60      	ldr	r2, [pc, #384]	; (8002d38 <interpretaComando+0x7e8>)
 8002bb6:	5cd3      	ldrb	r3, [r2, r3]
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d1e5      	bne.n	8002b88 <interpretaComando+0x638>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	485f      	ldr	r0, [pc, #380]	; (8002d3c <interpretaComando+0x7ec>)
 8002bc0:	f00c ffa0 	bl	800fb04 <strtod>
 8002bc4:	eeb0 7b40 	vmov.f64	d7, d0
 8002bc8:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <interpretaComando+0x7f0>)
 8002bca:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	e007      	b.n	8002be4 <interpretaComando+0x694>
					auxString[k] = 0;
 8002bd4:	4a59      	ldr	r2, [pc, #356]	; (8002d3c <interpretaComando+0x7ec>)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4413      	add	r3, r2
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	3301      	adds	r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b0a      	cmp	r3, #10
 8002be8:	ddf4      	ble.n	8002bd4 <interpretaComando+0x684>
				}
				j=0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3,(uint8_t *)"PuntoY_ok\n\r", 11, 100);
 8002bf0:	2364      	movs	r3, #100	; 0x64
 8002bf2:	220b      	movs	r2, #11
 8002bf4:	4953      	ldr	r1, [pc, #332]	; (8002d44 <interpretaComando+0x7f4>)
 8002bf6:	4854      	ldr	r0, [pc, #336]	; (8002d48 <interpretaComando+0x7f8>)
 8002bf8:	f009 fe64 	bl	800c8c4 <HAL_UART_Transmit>
 8002bfc:	e040      	b.n	8002c80 <interpretaComando+0x730>
			}
			else if(rx_buffer[i] == 'z'){
 8002bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c02:	4a4d      	ldr	r2, [pc, #308]	; (8002d38 <interpretaComando+0x7e8>)
 8002c04:	5cd3      	ldrb	r3, [r2, r3]
 8002c06:	2b7a      	cmp	r3, #122	; 0x7a
 8002c08:	d13a      	bne.n	8002c80 <interpretaComando+0x730>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002c0a:	e012      	b.n	8002c32 <interpretaComando+0x6e2>
					auxString[j] = rx_buffer[i+1];
 8002c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c16:	4948      	ldr	r1, [pc, #288]	; (8002d38 <interpretaComando+0x7e8>)
 8002c18:	5c89      	ldrb	r1, [r1, r2]
 8002c1a:	4a48      	ldr	r2, [pc, #288]	; (8002d3c <interpretaComando+0x7ec>)
 8002c1c:	54d1      	strb	r1, [r2, r3]
					j++;
 8002c1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c22:	3301      	adds	r3, #1
 8002c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c36:	3301      	adds	r3, #1
 8002c38:	4a3f      	ldr	r2, [pc, #252]	; (8002d38 <interpretaComando+0x7e8>)
 8002c3a:	5cd3      	ldrb	r3, [r2, r3]
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d1e5      	bne.n	8002c0c <interpretaComando+0x6bc>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 8002c40:	2100      	movs	r1, #0
 8002c42:	483e      	ldr	r0, [pc, #248]	; (8002d3c <interpretaComando+0x7ec>)
 8002c44:	f00c ff5e 	bl	800fb04 <strtod>
 8002c48:	eeb0 7b40 	vmov.f64	d7, d0
 8002c4c:	4b3c      	ldr	r3, [pc, #240]	; (8002d40 <interpretaComando+0x7f0>)
 8002c4e:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	e007      	b.n	8002c68 <interpretaComando+0x718>
					auxString[k] = 0;
 8002c58:	4a38      	ldr	r2, [pc, #224]	; (8002d3c <interpretaComando+0x7ec>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3301      	adds	r3, #1
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b0a      	cmp	r3, #10
 8002c6c:	ddf4      	ble.n	8002c58 <interpretaComando+0x708>
				}
				j=0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3,(uint8_t *)"PuntoZ_ok\n\r", 11, 100);
 8002c74:	2364      	movs	r3, #100	; 0x64
 8002c76:	220b      	movs	r2, #11
 8002c78:	4934      	ldr	r1, [pc, #208]	; (8002d4c <interpretaComando+0x7fc>)
 8002c7a:	4833      	ldr	r0, [pc, #204]	; (8002d48 <interpretaComando+0x7f8>)
 8002c7c:	f009 fe22 	bl	800c8c4 <HAL_UART_Transmit>
			}
			i++;
 8002c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c84:	3301      	adds	r3, #1
 8002c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(rx_buffer[i] != 0){
 8002c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c8e:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <interpretaComando+0x7e8>)
 8002c90:	5cd3      	ldrb	r3, [r2, r3]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f47f af00 	bne.w	8002a98 <interpretaComando+0x548>
		}
		cinematicaInversa(Pfin);
 8002c98:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <interpretaComando+0x7f0>)
 8002c9a:	ed93 5b00 	vldr	d5, [r3]
 8002c9e:	ed93 6b02 	vldr	d6, [r3, #8]
 8002ca2:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ca6:	eeb0 0b45 	vmov.f64	d0, d5
 8002caa:	eeb0 1b46 	vmov.f64	d1, d6
 8002cae:	eeb0 2b47 	vmov.f64	d2, d7
 8002cb2:	f7fd fee5 	bl	8000a80 <cinematicaInversa>
		break;
 8002cb6:	e037      	b.n	8002d28 <interpretaComando+0x7d8>
	case 'H':
	case 'h':
		HAL_UART_Transmit(&huart3,(uint8_t *)"Homing\n\r", 8, 100);
 8002cb8:	2364      	movs	r3, #100	; 0x64
 8002cba:	2208      	movs	r2, #8
 8002cbc:	4924      	ldr	r1, [pc, #144]	; (8002d50 <interpretaComando+0x800>)
 8002cbe:	4822      	ldr	r0, [pc, #136]	; (8002d48 <interpretaComando+0x7f8>)
 8002cc0:	f009 fe00 	bl	800c8c4 <HAL_UART_Transmit>
		//PREGUNTA : se activan los enables en el homming para asegurarse de que el robot empiece a operar en una posicion segura  ?
		HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);  //activo Enable
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2110      	movs	r1, #16
 8002cc8:	4822      	ldr	r0, [pc, #136]	; (8002d54 <interpretaComando+0x804>)
 8002cca:	f005 fa1f 	bl	800810c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2120      	movs	r1, #32
 8002cd2:	4820      	ldr	r0, [pc, #128]	; (8002d54 <interpretaComando+0x804>)
 8002cd4:	f005 fa1a 	bl	800810c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	481d      	ldr	r0, [pc, #116]	; (8002d54 <interpretaComando+0x804>)
 8002cde:	f005 fa15 	bl	800810c <HAL_GPIO_WritePin>
		homingAprox();
 8002ce2:	f7fe ff55 	bl	8001b90 <homingAprox>
		homingArm1();
 8002ce6:	f7ff f92f 	bl	8001f48 <homingArm1>
		homingArm2();
 8002cea:	f7ff fa29 	bl	8002140 <homingArm2>
		homingArm3();
 8002cee:	f7ff fb23 	bl	8002338 <homingArm3>
		Pini.x=0;
 8002cf2:	4919      	ldr	r1, [pc, #100]	; (8002d58 <interpretaComando+0x808>)
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y=0;
 8002d00:	4915      	ldr	r1, [pc, #84]	; (8002d58 <interpretaComando+0x808>)
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = -0.334658034417224;
 8002d0e:	4912      	ldr	r1, [pc, #72]	; (8002d58 <interpretaComando+0x808>)
 8002d10:	a307      	add	r3, pc, #28	; (adr r3, 8002d30 <interpretaComando+0x7e0>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	e9c1 2304 	strd	r2, r3, [r1, #16]
		HAL_UART_Transmit(&huart3,(uint8_t *)"Fin_Homing\n\r", 12, 100);
 8002d1a:	2364      	movs	r3, #100	; 0x64
 8002d1c:	220c      	movs	r2, #12
 8002d1e:	490f      	ldr	r1, [pc, #60]	; (8002d5c <interpretaComando+0x80c>)
 8002d20:	4809      	ldr	r0, [pc, #36]	; (8002d48 <interpretaComando+0x7f8>)
 8002d22:	f009 fdcf 	bl	800c8c4 <HAL_UART_Transmit>

	break;
 8002d26:	bf00      	nop

	}

}
 8002d28:	bf00      	nop
 8002d2a:	3728      	adds	r7, #40	; 0x28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	884a9983 	.word	0x884a9983
 8002d34:	bfd56b09 	.word	0xbfd56b09
 8002d38:	24000494 	.word	0x24000494
 8002d3c:	24000398 	.word	0x24000398
 8002d40:	24000418 	.word	0x24000418
 8002d44:	080125e8 	.word	0x080125e8
 8002d48:	24000cf0 	.word	0x24000cf0
 8002d4c:	080125f4 	.word	0x080125f4
 8002d50:	08012600 	.word	0x08012600
 8002d54:	58020c00 	.word	0x58020c00
 8002d58:	24000400 	.word	0x24000400
 8002d5c:	0801260c 	.word	0x0801260c

08002d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	ed2d 8b02 	vpush	{d8}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d68:	f004 f8a0 	bl	8006eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d6c:	f000 f96c 	bl	8003048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d70:	f7fe fe10 	bl	8001994 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002d74:	f001 faa0 	bl	80042b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d78:	f001 fb0e 	bl	8004398 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002d7c:	f001 fb7e 	bl	800447c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8002d80:	f003 fef2 	bl	8006b68 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8002d84:	f001 fc3c 	bl	8004600 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002d88:	f001 fc9e 	bl	80046c8 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002d8c:	f001 fcec 	bl	8004768 <MX_TIM14_Init>
  MX_TIM5_Init();
 8002d90:	f001 fbe6 	bl	8004560 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002d94:	f001 fd38 	bl	8004808 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8002d98:	f003 fe4e 	bl	8006a38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002d9c:	f003 fe98 	bl	8006ad0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, data, sizeof(data), 100); //Enviamos el mensaje: Start
 8002da0:	2364      	movs	r3, #100	; 0x64
 8002da2:	2207      	movs	r2, #7
 8002da4:	498a      	ldr	r1, [pc, #552]	; (8002fd0 <main+0x270>)
 8002da6:	488b      	ldr	r0, [pc, #556]	; (8002fd4 <main+0x274>)
 8002da8:	f009 fd8c 	bl	800c8c4 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002dac:	2201      	movs	r2, #1
 8002dae:	498a      	ldr	r1, [pc, #552]	; (8002fd8 <main+0x278>)
 8002db0:	4888      	ldr	r0, [pc, #544]	; (8002fd4 <main+0x274>)
 8002db2:	f009 fe1d 	bl	800c9f0 <HAL_UART_Receive_IT>


	HAL_TIM_Base_Start(&htim12);
 8002db6:	4889      	ldr	r0, [pc, #548]	; (8002fdc <main+0x27c>)
 8002db8:	f007 fd90 	bl	800a8dc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002dbc:	4888      	ldr	r0, [pc, #544]	; (8002fe0 <main+0x280>)
 8002dbe:	f007 fd8d 	bl	800a8dc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002dc2:	4888      	ldr	r0, [pc, #544]	; (8002fe4 <main+0x284>)
 8002dc4:	f007 fd8a 	bl	800a8dc <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4887      	ldr	r0, [pc, #540]	; (8002fe8 <main+0x288>)
 8002dcc:	f008 f92c 	bl	800b028 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4886      	ldr	r0, [pc, #536]	; (8002fec <main+0x28c>)
 8002dd4:	f008 f928 	bl	800b028 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4885      	ldr	r0, [pc, #532]	; (8002ff0 <main+0x290>)
 8002ddc:	f008 f924 	bl	800b028 <HAL_TIM_IC_Start_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Ejemplo :px0 y0 z-0.8 \nr", 24, 100);
 8002de0:	2364      	movs	r3, #100	; 0x64
 8002de2:	2218      	movs	r2, #24
 8002de4:	4983      	ldr	r1, [pc, #524]	; (8002ff4 <main+0x294>)
 8002de6:	487b      	ldr	r0, [pc, #492]	; (8002fd4 <main+0x274>)
 8002de8:	f009 fd6c 	bl	800c8c4 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (FlagButton == 1) {
 8002dec:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <main+0x298>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d1fb      	bne.n	8002dec <main+0x8c>
			FlagButton = 0;
 8002df4:	4b80      	ldr	r3, [pc, #512]	; (8002ff8 <main+0x298>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
			distancia = sqrt(pow(Pfin.x - Pini.x, 2) + pow(Pfin.y - Pini.y, 2) + pow(Pfin.z - Pini.z, 2));
 8002dfa:	4b80      	ldr	r3, [pc, #512]	; (8002ffc <main+0x29c>)
 8002dfc:	ed93 6b00 	vldr	d6, [r3]
 8002e00:	4b7f      	ldr	r3, [pc, #508]	; (8003000 <main+0x2a0>)
 8002e02:	ed93 7b00 	vldr	d7, [r3]
 8002e06:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e0a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002e0e:	eeb0 0b47 	vmov.f64	d0, d7
 8002e12:	f00e ff31 	bl	8011c78 <pow>
 8002e16:	eeb0 8b40 	vmov.f64	d8, d0
 8002e1a:	4b78      	ldr	r3, [pc, #480]	; (8002ffc <main+0x29c>)
 8002e1c:	ed93 6b02 	vldr	d6, [r3, #8]
 8002e20:	4b77      	ldr	r3, [pc, #476]	; (8003000 <main+0x2a0>)
 8002e22:	ed93 7b02 	vldr	d7, [r3, #8]
 8002e26:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e2a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002e2e:	eeb0 0b47 	vmov.f64	d0, d7
 8002e32:	f00e ff21 	bl	8011c78 <pow>
 8002e36:	eeb0 7b40 	vmov.f64	d7, d0
 8002e3a:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002e3e:	4b6f      	ldr	r3, [pc, #444]	; (8002ffc <main+0x29c>)
 8002e40:	ed93 6b04 	vldr	d6, [r3, #16]
 8002e44:	4b6e      	ldr	r3, [pc, #440]	; (8003000 <main+0x2a0>)
 8002e46:	ed93 7b04 	vldr	d7, [r3, #16]
 8002e4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e4e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002e52:	eeb0 0b47 	vmov.f64	d0, d7
 8002e56:	f00e ff0f 	bl	8011c78 <pow>
 8002e5a:	eeb0 7b40 	vmov.f64	d7, d0
 8002e5e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002e62:	eeb0 0b47 	vmov.f64	d0, d7
 8002e66:	f00f f987 	bl	8012178 <sqrt>
 8002e6a:	eeb0 7b40 	vmov.f64	d7, d0
 8002e6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e72:	4b64      	ldr	r3, [pc, #400]	; (8003004 <main+0x2a4>)
 8002e74:	edc3 7a00 	vstr	s15, [r3]
			vDirector[0] = (Pfin.x - Pini.x) / distancia;	//Vector director en X
 8002e78:	4b60      	ldr	r3, [pc, #384]	; (8002ffc <main+0x29c>)
 8002e7a:	ed93 6b00 	vldr	d6, [r3]
 8002e7e:	4b60      	ldr	r3, [pc, #384]	; (8003000 <main+0x2a0>)
 8002e80:	ed93 7b00 	vldr	d7, [r3]
 8002e84:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002e88:	4b5e      	ldr	r3, [pc, #376]	; (8003004 <main+0x2a4>)
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002e92:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002e96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e9a:	4b5b      	ldr	r3, [pc, #364]	; (8003008 <main+0x2a8>)
 8002e9c:	edc3 7a00 	vstr	s15, [r3]
			vDirector[1] = (Pfin.y - Pini.y) / distancia;	//Vector director en Y
 8002ea0:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <main+0x29c>)
 8002ea2:	ed93 6b02 	vldr	d6, [r3, #8]
 8002ea6:	4b56      	ldr	r3, [pc, #344]	; (8003000 <main+0x2a0>)
 8002ea8:	ed93 7b02 	vldr	d7, [r3, #8]
 8002eac:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002eb0:	4b54      	ldr	r3, [pc, #336]	; (8003004 <main+0x2a4>)
 8002eb2:	edd3 7a00 	vldr	s15, [r3]
 8002eb6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002eba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002ebe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ec2:	4b51      	ldr	r3, [pc, #324]	; (8003008 <main+0x2a8>)
 8002ec4:	edc3 7a01 	vstr	s15, [r3, #4]
			vDirector[2] = (Pfin.z - Pini.z) / distancia;	//Vector director en Z
 8002ec8:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <main+0x29c>)
 8002eca:	ed93 6b04 	vldr	d6, [r3, #16]
 8002ece:	4b4c      	ldr	r3, [pc, #304]	; (8003000 <main+0x2a0>)
 8002ed0:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ed4:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002ed8:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <main+0x2a4>)
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ee2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002ee6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <main+0x2a8>)
 8002eec:	edc3 7a02 	vstr	s15, [r3, #8]
			configStepMotor1(titha1);
 8002ef0:	4b46      	ldr	r3, [pc, #280]	; (800300c <main+0x2ac>)
 8002ef2:	ed93 7b00 	vldr	d7, [r3]
 8002ef6:	eeb0 0b47 	vmov.f64	d0, d7
 8002efa:	f000 fb91 	bl	8003620 <configStepMotor1>
			configStepMotor2(titha2);
 8002efe:	4b44      	ldr	r3, [pc, #272]	; (8003010 <main+0x2b0>)
 8002f00:	ed93 7b00 	vldr	d7, [r3]
 8002f04:	eeb0 0b47 	vmov.f64	d0, d7
 8002f08:	f000 fc46 	bl	8003798 <configStepMotor2>
			configStepMotor3(titha3);
 8002f0c:	4b41      	ldr	r3, [pc, #260]	; (8003014 <main+0x2b4>)
 8002f0e:	ed93 7b00 	vldr	d7, [r3]
 8002f12:	eeb0 0b47 	vmov.f64	d0, d7
 8002f16:	f000 fcfb 	bl	8003910 <configStepMotor3>
			inicializarTrayectoria(0, distancia, 0, 0, 0.4, 4, 1); //(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)
 8002f1a:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <main+0x2a4>)
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002f28:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002f2c:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8002fc0 <main+0x260>
 8002f30:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8002fc8 <main+0x268>
 8002f34:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8002fc8 <main+0x268>
 8002f38:	eeb0 1b47 	vmov.f64	d1, d7
 8002f3c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8002fc8 <main+0x268>
 8002f40:	f001 fe8e 	bl	8004c60 <inicializarTrayectoria>
			FlagTiempo = 0;
 8002f44:	4b34      	ldr	r3, [pc, #208]	; (8003018 <main+0x2b8>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
			FlagTrayectoM1 = 0;
 8002f4a:	4934      	ldr	r1, [pc, #208]	; (800301c <main+0x2bc>)
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM2 = 0;
 8002f58:	4931      	ldr	r1, [pc, #196]	; (8003020 <main+0x2c0>)
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM3 = 0;
 8002f66:	492f      	ldr	r1, [pc, #188]	; (8003024 <main+0x2c4>)
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9c1 2300 	strd	r2, r3, [r1]
			Start=1;
 8002f74:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <main+0x2c8>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
			rpm1 = 0;
 8002f7a:	492c      	ldr	r1, [pc, #176]	; (800302c <main+0x2cc>)
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9c1 2300 	strd	r2, r3, [r1]
			rpm2 = 0;
 8002f88:	4929      	ldr	r1, [pc, #164]	; (8003030 <main+0x2d0>)
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9c1 2300 	strd	r2, r3, [r1]
			rpm3 = 0;
 8002f96:	4927      	ldr	r1, [pc, #156]	; (8003034 <main+0x2d4>)
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9c1 2300 	strd	r2, r3, [r1]
			mandalemecha = 1;
 8002fa4:	4924      	ldr	r1, [pc, #144]	; (8003038 <main+0x2d8>)
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <main+0x2dc>)
 8002fac:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_TIM_Base_Start(&htim5);
 8002fb0:	4823      	ldr	r0, [pc, #140]	; (8003040 <main+0x2e0>)
 8002fb2:	f007 fc93 	bl	800a8dc <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 8002fb6:	4823      	ldr	r0, [pc, #140]	; (8003044 <main+0x2e4>)
 8002fb8:	f007 fd28 	bl	800aa0c <HAL_TIM_Base_Start_IT>
		if (FlagButton == 1) {
 8002fbc:	e716      	b.n	8002dec <main+0x8c>
 8002fbe:	bf00      	nop
 8002fc0:	9999999a 	.word	0x9999999a
 8002fc4:	3fd99999 	.word	0x3fd99999
	...
 8002fd0:	24000000 	.word	0x24000000
 8002fd4:	24000cf0 	.word	0x24000cf0
 8002fd8:	240004b2 	.word	0x240004b2
 8002fdc:	24000704 	.word	0x24000704
 8002fe0:	24000750 	.word	0x24000750
 8002fe4:	2400079c 	.word	0x2400079c
 8002fe8:	240005d4 	.word	0x240005d4
 8002fec:	24000620 	.word	0x24000620
 8002ff0:	2400066c 	.word	0x2400066c
 8002ff4:	0801261c 	.word	0x0801261c
 8002ff8:	24000518 	.word	0x24000518
 8002ffc:	24000418 	.word	0x24000418
 8003000:	24000400 	.word	0x24000400
 8003004:	24000430 	.word	0x24000430
 8003008:	24000434 	.word	0x24000434
 800300c:	240003c0 	.word	0x240003c0
 8003010:	240003c8 	.word	0x240003c8
 8003014:	240003d0 	.word	0x240003d0
 8003018:	240004b4 	.word	0x240004b4
 800301c:	240004d8 	.word	0x240004d8
 8003020:	240004e0 	.word	0x240004e0
 8003024:	24000008 	.word	0x24000008
 8003028:	24000570 	.word	0x24000570
 800302c:	24000528 	.word	0x24000528
 8003030:	24000530 	.word	0x24000530
 8003034:	24000538 	.word	0x24000538
 8003038:	24000578 	.word	0x24000578
 800303c:	3ff00000 	.word	0x3ff00000
 8003040:	240006b8 	.word	0x240006b8
 8003044:	240007e8 	.word	0x240007e8

08003048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b09c      	sub	sp, #112	; 0x70
 800304c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800304e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003052:	224c      	movs	r2, #76	; 0x4c
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f00b ff7a 	bl	800ef50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	2220      	movs	r2, #32
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f00b ff74 	bl	800ef50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003068:	2002      	movs	r0, #2
 800306a:	f005 f883 	bl	8008174 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800306e:	2300      	movs	r3, #0
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	4b32      	ldr	r3, [pc, #200]	; (800313c <SystemClock_Config+0xf4>)
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	4a31      	ldr	r2, [pc, #196]	; (800313c <SystemClock_Config+0xf4>)
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800307e:	4b2f      	ldr	r3, [pc, #188]	; (800313c <SystemClock_Config+0xf4>)
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <SystemClock_Config+0xf8>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003090:	4a2b      	ldr	r2, [pc, #172]	; (8003140 <SystemClock_Config+0xf8>)
 8003092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003096:	6193      	str	r3, [r2, #24]
 8003098:	4b29      	ldr	r3, [pc, #164]	; (8003140 <SystemClock_Config+0xf8>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80030a4:	bf00      	nop
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <SystemClock_Config+0xf8>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b2:	d1f8      	bne.n	80030a6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030b4:	2302      	movs	r3, #2
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80030b8:	2301      	movs	r3, #1
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030bc:	2340      	movs	r3, #64	; 0x40
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030c0:	2302      	movs	r3, #2
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030c4:	2300      	movs	r3, #0
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030c8:	2304      	movs	r3, #4
 80030ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80030cc:	2310      	movs	r3, #16
 80030ce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80030d0:	2302      	movs	r3, #2
 80030d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80030d4:	2302      	movs	r3, #2
 80030d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030d8:	2302      	movs	r3, #2
 80030da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80030dc:	230c      	movs	r3, #12
 80030de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f005 f87b 	bl	80081e8 <HAL_RCC_OscConfig>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80030f8:	f000 fa8a 	bl	8003610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030fc:	233f      	movs	r3, #63	; 0x3f
 80030fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003100:	2303      	movs	r3, #3
 8003102:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003108:	2308      	movs	r3, #8
 800310a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003110:	2340      	movs	r3, #64	; 0x40
 8003112:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003118:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800311a:	2300      	movs	r3, #0
 800311c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	2101      	movs	r1, #1
 8003122:	4618      	mov	r0, r3
 8003124:	f005 fc8e 	bl	8008a44 <HAL_RCC_ClockConfig>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800312e:	f000 fa6f 	bl	8003610 <Error_Handler>
  }
}
 8003132:	bf00      	nop
 8003134:	3770      	adds	r7, #112	; 0x70
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	58000400 	.word	0x58000400
 8003140:	58024800 	.word	0x58024800

08003144 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003154:	d103      	bne.n	800315e <HAL_GPIO_EXTI_Callback+0x1a>

	case BUTTON_Pin:
		FlagButton = 1;
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_GPIO_EXTI_Callback+0x28>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
		break;
 800315c:	e000      	b.n	8003160 <HAL_GPIO_EXTI_Callback+0x1c>
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/

	default:

		break;
 800315e:	bf00      	nop
	}

}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	24000518 	.word	0x24000518

08003170 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a30      	ldr	r2, [pc, #192]	; (8003240 <HAL_UART_RxCpltCallback+0xd0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d14d      	bne.n	800321e <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <HAL_UART_RxCpltCallback+0xd4>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b3a      	cmp	r3, #58	; 0x3a
 800318c:	d006      	beq.n	800319c <HAL_UART_RxCpltCallback+0x2c>
 800318e:	2b3a      	cmp	r3, #58	; 0x3a
 8003190:	dc36      	bgt.n	8003200 <HAL_UART_RxCpltCallback+0x90>
 8003192:	2b08      	cmp	r3, #8
 8003194:	d009      	beq.n	80031aa <HAL_UART_RxCpltCallback+0x3a>
 8003196:	2b0d      	cmp	r3, #13
 8003198:	d01e      	beq.n	80031d8 <HAL_UART_RxCpltCallback+0x68>
 800319a:	e031      	b.n	8003200 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 80031a2:	4b2a      	ldr	r3, [pc, #168]	; (800324c <HAL_UART_RxCpltCallback+0xdc>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
			break;
 80031a8:	e040      	b.n	800322c <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 80031aa:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d037      	beq.n	8003222 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 80031b2:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 80031bc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80031be:	e030      	b.n	8003222 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <HAL_UART_RxCpltCallback+0xe0>)
 80031c8:	2100      	movs	r1, #0
 80031ca:	5499      	strb	r1, [r3, r2]
				rx_index++;
 80031cc:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 80031d6:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b1e      	cmp	r3, #30
 80031de:	d1ef      	bne.n	80031c0 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <HAL_UART_RxCpltCallback+0xdc>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d11e      	bne.n	8003226 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 80031e8:	4b17      	ldr	r3, [pc, #92]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <HAL_UART_RxCpltCallback+0xe0>)
 80031f0:	2100      	movs	r1, #0
 80031f2:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 80031f4:	f7ff f9ac 	bl	8002550 <interpretaComando>
				cm0 = 0;
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <HAL_UART_RxCpltCallback+0xdc>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80031fe:	e012      	b.n	8003226 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b1d      	cmp	r3, #29
 8003206:	d810      	bhi.n	800322a <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	b2d1      	uxtb	r1, r2
 8003210:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <HAL_UART_RxCpltCallback+0xd8>)
 8003212:	7011      	strb	r1, [r2, #0]
 8003214:	4619      	mov	r1, r3
 8003216:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <HAL_UART_RxCpltCallback+0xe0>)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	5453      	strb	r3, [r2, r1]
			}
			break;
 800321c:	e005      	b.n	800322a <HAL_UART_RxCpltCallback+0xba>
		}
	}
 800321e:	bf00      	nop
 8003220:	e004      	b.n	800322c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <HAL_UART_RxCpltCallback+0xbc>
			break;
 800322a:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 800322c:	2201      	movs	r2, #1
 800322e:	4905      	ldr	r1, [pc, #20]	; (8003244 <HAL_UART_RxCpltCallback+0xd4>)
 8003230:	4808      	ldr	r0, [pc, #32]	; (8003254 <HAL_UART_RxCpltCallback+0xe4>)
 8003232:	f009 fbdd 	bl	800c9f0 <HAL_UART_Receive_IT>
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40004800 	.word	0x40004800
 8003244:	240004b2 	.word	0x240004b2
 8003248:	24000490 	.word	0x24000490
 800324c:	240004b3 	.word	0x240004b3
 8003250:	24000494 	.word	0x24000494
 8003254:	24000cf0 	.word	0x24000cf0

08003258 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	__NOP();
 8003260:	bf00      	nop
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003280:	d116      	bne.n	80032b0 <HAL_TIM_IC_CaptureCallback+0x40>
		if (pMotor1 == numStep1) {
 8003282:	4b29      	ldr	r3, [pc, #164]	; (8003328 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d10a      	bne.n	80032a4 <HAL_TIM_IC_CaptureCallback+0x34>
			HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1); //Apago el PWM del motor 1
 800328e:	2100      	movs	r1, #0
 8003290:	4827      	ldr	r0, [pc, #156]	; (8003330 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8003292:	f007 fdd1 	bl	800ae38 <HAL_TIM_PWM_Stop>
			FlagTrayectoM1 = 1;
 8003296:	4927      	ldr	r1, [pc, #156]	; (8003334 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	4b26      	ldr	r3, [pc, #152]	; (8003338 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800329e:	e9c1 2300 	strd	r2, r3, [r1]
		} else {
			pMotor3++;
		}

	}
}
 80032a2:	e03c      	b.n	800331e <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor1++;
 80032a4:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80032ac:	6013      	str	r3, [r2, #0]
}
 80032ae:	e036      	b.n	800331e <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM3) {
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a21      	ldr	r2, [pc, #132]	; (800333c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d116      	bne.n	80032e8 <HAL_TIM_IC_CaptureCallback+0x78>
		if (pMotor2 == numStep2) {
 80032ba:	4b21      	ldr	r3, [pc, #132]	; (8003340 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d10a      	bne.n	80032dc <HAL_TIM_IC_CaptureCallback+0x6c>
			HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);//Apago el PWM del motor 1
 80032c6:	2100      	movs	r1, #0
 80032c8:	481f      	ldr	r0, [pc, #124]	; (8003348 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80032ca:	f007 fdb5 	bl	800ae38 <HAL_TIM_PWM_Stop>
			FlagTrayectoM2 = 1;
 80032ce:	491f      	ldr	r1, [pc, #124]	; (800334c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80032d6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80032da:	e020      	b.n	800331e <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor2++;
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	4a17      	ldr	r2, [pc, #92]	; (8003340 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80032e4:	6013      	str	r3, [r2, #0]
}
 80032e6:	e01a      	b.n	800331e <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM4) {
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a18      	ldr	r2, [pc, #96]	; (8003350 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d115      	bne.n	800331e <HAL_TIM_IC_CaptureCallback+0xae>
		if (pMotor3 == numStep3) {
 80032f2:	4b18      	ldr	r3, [pc, #96]	; (8003354 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d10a      	bne.n	8003314 <HAL_TIM_IC_CaptureCallback+0xa4>
			HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);//Apago el PWM del motor 1
 80032fe:	2100      	movs	r1, #0
 8003300:	4816      	ldr	r0, [pc, #88]	; (800335c <HAL_TIM_IC_CaptureCallback+0xec>)
 8003302:	f007 fd99 	bl	800ae38 <HAL_TIM_PWM_Stop>
			FlagTrayectoM3 = 1;
 8003306:	4916      	ldr	r1, [pc, #88]	; (8003360 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800330e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003312:	e004      	b.n	800331e <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor3++;
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800331c:	6013      	str	r3, [r2, #0]
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	240003a4 	.word	0x240003a4
 800332c:	240003b0 	.word	0x240003b0
 8003330:	24000704 	.word	0x24000704
 8003334:	240004d8 	.word	0x240004d8
 8003338:	3ff00000 	.word	0x3ff00000
 800333c:	40000400 	.word	0x40000400
 8003340:	240003a8 	.word	0x240003a8
 8003344:	240003b4 	.word	0x240003b4
 8003348:	24000750 	.word	0x24000750
 800334c:	240004e0 	.word	0x240004e0
 8003350:	40000800 	.word	0x40000800
 8003354:	240003ac 	.word	0x240003ac
 8003358:	240003b8 	.word	0x240003b8
 800335c:	2400079c 	.word	0x2400079c
 8003360:	24000008 	.word	0x24000008
 8003364:	00000000 	.word	0x00000000

08003368 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	if (htim == &htim15) {  //Timer que actualiza curva de velocidad
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a91      	ldr	r2, [pc, #580]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003374:	4293      	cmp	r3, r2
 8003376:	f040 8110 	bne.w	800359a <HAL_TIM_PeriodElapsedCallback+0x232>
		if (FlagTrayectoM1 == 1 && FlagTrayectoM2 == 1 && FlagTrayectoM3 == 1) {
 800337a:	4b90      	ldr	r3, [pc, #576]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800337c:	ed93 7b00 	vldr	d7, [r3]
 8003380:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003384:	eeb4 7b46 	vcmp.f64	d7, d6
 8003388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338c:	d133      	bne.n	80033f6 <HAL_TIM_PeriodElapsedCallback+0x8e>
 800338e:	4b8c      	ldr	r3, [pc, #560]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003390:	ed93 7b00 	vldr	d7, [r3]
 8003394:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003398:	eeb4 7b46 	vcmp.f64	d7, d6
 800339c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a0:	d129      	bne.n	80033f6 <HAL_TIM_PeriodElapsedCallback+0x8e>
 80033a2:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80033a4:	ed93 7b00 	vldr	d7, [r3]
 80033a8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80033b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b4:	d11f      	bne.n	80033f6 <HAL_TIM_PeriodElapsedCallback+0x8e>
			HAL_TIM_Base_Stop_IT(&htim15);
 80033b6:	4880      	ldr	r0, [pc, #512]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80033b8:	f007 fba0 	bl	800aafc <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 80033bc:	4882      	ldr	r0, [pc, #520]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80033be:	f007 fafd 	bl	800a9bc <HAL_TIM_Base_Stop>
			Pini.x = Pfin.x;
 80033c2:	4b82      	ldr	r3, [pc, #520]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x264>)
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	4981      	ldr	r1, [pc, #516]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80033ca:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y = Pfin.y;
 80033ce:	4b7f      	ldr	r3, [pc, #508]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x264>)
 80033d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033d4:	497e      	ldr	r1, [pc, #504]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80033d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z = Pfin.z;
 80033da:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x264>)
 80033dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033e0:	497b      	ldr	r1, [pc, #492]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80033e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
			mandalemecha = 0;
 80033e6:	497b      	ldr	r1, [pc, #492]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
			}
		}
	}
}
 80033f4:	e0d1      	b.n	800359a <HAL_TIM_PeriodElapsedCallback+0x232>
			if (!FlagTiempo) {
 80033f6:	4b78      	ldr	r3, [pc, #480]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <HAL_TIM_PeriodElapsedCallback+0xa2>
				FlagTiempo = 1;
 80033fe:	4b76      	ldr	r3, [pc, #472]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
				TIM5->CNT = 0;	// comienzo a contabilizar el tiempo recien acá
 8003404:	4b75      	ldr	r3, [pc, #468]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003406:	2200      	movs	r2, #0
 8003408:	625a      	str	r2, [r3, #36]	; 0x24
			Tiempo = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / 64000000.0));
 800340a:	4b74      	ldr	r3, [pc, #464]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003416:	4b71      	ldr	r3, [pc, #452]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	3301      	adds	r3, #1
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8003424:	ed9f 4b60 	vldr	d4, [pc, #384]	; 80035a8 <HAL_TIM_PeriodElapsedCallback+0x240>
 8003428:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800342c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003430:	4b6b      	ldr	r3, [pc, #428]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003432:	ed83 7b00 	vstr	d7, [r3]
			obtenerVelCurva(Tiempo);
 8003436:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003438:	ed93 7b00 	vldr	d7, [r3]
 800343c:	eeb0 0b47 	vmov.f64	d0, d7
 8003440:	f002 f9b4 	bl	80057ac <obtenerVelCurva>
			Recta3D[0] = Pini.x + X * vDirector[0];
 8003444:	4b62      	ldr	r3, [pc, #392]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003446:	ed93 6b00 	vldr	d6, [r3]
 800344a:	4b66      	ldr	r3, [pc, #408]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003454:	4b64      	ldr	r3, [pc, #400]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003456:	ed93 7b00 	vldr	d7, [r3]
 800345a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800345e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003462:	4b62      	ldr	r3, [pc, #392]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003464:	ed83 7b00 	vstr	d7, [r3]
			Recta3D[1] = Pini.y + X * vDirector[1];
 8003468:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800346a:	ed93 6b02 	vldr	d6, [r3, #8]
 800346e:	4b5d      	ldr	r3, [pc, #372]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003470:	edd3 7a01 	vldr	s15, [r3, #4]
 8003474:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003478:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800347a:	ed93 7b00 	vldr	d7, [r3]
 800347e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003482:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003486:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003488:	ed83 7b02 	vstr	d7, [r3, #8]
			Recta3D[2] = Pini.z + X * vDirector[2];
 800348c:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800348e:	ed93 6b04 	vldr	d6, [r3, #16]
 8003492:	4b54      	ldr	r3, [pc, #336]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003494:	edd3 7a02 	vldr	s15, [r3, #8]
 8003498:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800349c:	4b52      	ldr	r3, [pc, #328]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800349e:	ed93 7b00 	vldr	d7, [r3]
 80034a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80034a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80034aa:	4b50      	ldr	r3, [pc, #320]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 80034ac:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3D[0] = 0 + DX * vDirector[0];
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80034b2:	edd3 7a00 	vldr	s15, [r3]
 80034b6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034ba:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80034bc:	ed93 7b00 	vldr	d7, [r3]
 80034c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034c4:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80035b0 <HAL_TIM_PeriodElapsedCallback+0x248>
 80034c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034cc:	4b49      	ldr	r3, [pc, #292]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034ce:	ed83 7b00 	vstr	d7, [r3]
			dRecta3D[1] = 0 + DX * vDirector[1];
 80034d2:	4b44      	ldr	r3, [pc, #272]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80034d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80034d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034dc:	4b44      	ldr	r3, [pc, #272]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80034de:	ed93 7b00 	vldr	d7, [r3]
 80034e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034e6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80035b0 <HAL_TIM_PeriodElapsedCallback+0x248>
 80034ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034f0:	ed83 7b02 	vstr	d7, [r3, #8]
			dRecta3D[2] = 0 + DX * vDirector[2];
 80034f4:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80034f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80034fa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034fe:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003500:	ed93 7b00 	vldr	d7, [r3]
 8003504:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003508:	ed9f 6b29 	vldr	d6, [pc, #164]	; 80035b0 <HAL_TIM_PeriodElapsedCallback+0x248>
 800350c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003510:	4b38      	ldr	r3, [pc, #224]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003512:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3DZ=dRecta3D[2]; // NO HACE NADA ?
 8003516:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003518:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800351c:	4936      	ldr	r1, [pc, #216]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800351e:	e9c1 2300 	strd	r2, r3, [r1]
			jacobianoInverso(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
 8003522:	4b34      	ldr	r3, [pc, #208]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003524:	ed93 7b00 	vldr	d7, [r3]
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800352a:	ed93 6b02 	vldr	d6, [r3, #8]
 800352e:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003530:	ed93 2b04 	vldr	d2, [r3, #16]
 8003534:	4b2d      	ldr	r3, [pc, #180]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003536:	ed93 3b00 	vldr	d3, [r3]
 800353a:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 800353c:	ed93 4b02 	vldr	d4, [r3, #8]
 8003540:	4b2a      	ldr	r3, [pc, #168]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003542:	ed93 5b04 	vldr	d5, [r3, #16]
 8003546:	eeb0 1b46 	vmov.f64	d1, d6
 800354a:	eeb0 0b47 	vmov.f64	d0, d7
 800354e:	f002 fcc3 	bl	8005ed8 <jacobianoInverso>
			SetPerfilTimers(omega[0], omega[1], omega[2]);
 8003552:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003554:	ed93 7b00 	vldr	d7, [r3]
 8003558:	4b28      	ldr	r3, [pc, #160]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800355a:	ed93 6b02 	vldr	d6, [r3, #8]
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003560:	ed93 5b04 	vldr	d5, [r3, #16]
 8003564:	eeb0 2b45 	vmov.f64	d2, d5
 8003568:	eeb0 1b46 	vmov.f64	d1, d6
 800356c:	eeb0 0b47 	vmov.f64	d0, d7
 8003570:	f002 ffda 	bl	8006528 <SetPerfilTimers>
			if(Start==1){
 8003574:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d10e      	bne.n	800359a <HAL_TIM_PeriodElapsedCallback+0x232>
				Start=0;
 800357c:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);	// Activar generacion de pwm
 8003582:	2100      	movs	r1, #0
 8003584:	481f      	ldr	r0, [pc, #124]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003586:	f007 fb49 	bl	800ac1c <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
 800358a:	2100      	movs	r1, #0
 800358c:	481e      	ldr	r0, [pc, #120]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800358e:	f007 fb45 	bl	800ac1c <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
 8003592:	2100      	movs	r1, #0
 8003594:	481d      	ldr	r0, [pc, #116]	; (800360c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003596:	f007 fb41 	bl	800ac1c <HAL_TIM_PWM_Start>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	f3af 8000 	nop.w
 80035a8:	00000000 	.word	0x00000000
 80035ac:	418e8480 	.word	0x418e8480
	...
 80035b8:	240007e8 	.word	0x240007e8
 80035bc:	240004d8 	.word	0x240004d8
 80035c0:	240004e0 	.word	0x240004e0
 80035c4:	24000008 	.word	0x24000008
 80035c8:	240006b8 	.word	0x240006b8
 80035cc:	24000418 	.word	0x24000418
 80035d0:	24000400 	.word	0x24000400
 80035d4:	24000578 	.word	0x24000578
 80035d8:	240004b4 	.word	0x240004b4
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	240004b8 	.word	0x240004b8
 80035e4:	24000434 	.word	0x24000434
 80035e8:	240004c0 	.word	0x240004c0
 80035ec:	24000440 	.word	0x24000440
 80035f0:	240004c8 	.word	0x240004c8
 80035f4:	24000458 	.word	0x24000458
 80035f8:	24000580 	.word	0x24000580
 80035fc:	24000470 	.word	0x24000470
 8003600:	24000570 	.word	0x24000570
 8003604:	24000704 	.word	0x24000704
 8003608:	24000750 	.word	0x24000750
 800360c:	2400079c 	.word	0x2400079c

08003610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <configStepMotor1>:
double remanente3;
double Periodo;		//periodo de timer PWM
//double ErrorPeriodo;
//double ErrorAcumuladoPeriodo[3];

void configStepMotor1(double angulo) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor1 = 0;
 800362a:	4b51      	ldr	r3, [pc, #324]	; (8003770 <configStepMotor1+0x150>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual1) {
 8003630:	4b50      	ldr	r3, [pc, #320]	; (8003774 <configStepMotor1+0x154>)
 8003632:	ed93 7b00 	vldr	d7, [r3]
 8003636:	ed97 6b00 	vldr	d6, [r7]
 800363a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800363e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003642:	db22      	blt.n	800368a <configStepMotor1+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Inf_GPIO_Port, E_EndStop1_Inf_Pin))){
 8003644:	2102      	movs	r1, #2
 8003646:	484c      	ldr	r0, [pc, #304]	; (8003778 <configStepMotor1+0x158>)
 8003648:	f004 fd48 	bl	80080dc <HAL_GPIO_ReadPin>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <configStepMotor1+0x40>
			flagErrorEndStop = 1;
 8003652:	494a      	ldr	r1, [pc, #296]	; (800377c <configStepMotor1+0x15c>)
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	4b49      	ldr	r3, [pc, #292]	; (8003780 <configStepMotor1+0x160>)
 800365a:	e9c1 2300 	strd	r2, r3, [r1]
 800365e:	e036      	b.n	80036ce <configStepMotor1+0xae>
		} else {
			anguloDif = angulo - anguloActual1;	//Calculo cuantos grados se tiene que mover.
 8003660:	4b44      	ldr	r3, [pc, #272]	; (8003774 <configStepMotor1+0x154>)
 8003662:	ed93 7b00 	vldr	d7, [r3]
 8003666:	ed97 6b00 	vldr	d6, [r7]
 800366a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800366e:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8003672:	4940      	ldr	r1, [pc, #256]	; (8003774 <configStepMotor1+0x154>)
 8003674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003678:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET); //Antihorario visto de frente
 800367c:	2201      	movs	r2, #1
 800367e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003682:	4840      	ldr	r0, [pc, #256]	; (8003784 <configStepMotor1+0x164>)
 8003684:	f004 fd42 	bl	800810c <HAL_GPIO_WritePin>
 8003688:	e021      	b.n	80036ce <configStepMotor1+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 800368a:	2101      	movs	r1, #1
 800368c:	483a      	ldr	r0, [pc, #232]	; (8003778 <configStepMotor1+0x158>)
 800368e:	f004 fd25 	bl	80080dc <HAL_GPIO_ReadPin>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <configStepMotor1+0x86>
			flagErrorEndStop = 1;
 8003698:	4938      	ldr	r1, [pc, #224]	; (800377c <configStepMotor1+0x15c>)
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	4b38      	ldr	r3, [pc, #224]	; (8003780 <configStepMotor1+0x160>)
 80036a0:	e9c1 2300 	strd	r2, r3, [r1]
 80036a4:	e013      	b.n	80036ce <configStepMotor1+0xae>
		} else {
			anguloDif = anguloActual1 - angulo;	//Calculo cuantos grados se tiene que mover.
 80036a6:	4b33      	ldr	r3, [pc, #204]	; (8003774 <configStepMotor1+0x154>)
 80036a8:	ed93 6b00 	vldr	d6, [r3]
 80036ac:	ed97 7b00 	vldr	d7, [r7]
 80036b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80036b4:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 80036b8:	492e      	ldr	r1, [pc, #184]	; (8003774 <configStepMotor1+0x154>)
 80036ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036be:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET); // Horario visto de frente
 80036c2:	2200      	movs	r2, #0
 80036c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036c8:	482e      	ldr	r0, [pc, #184]	; (8003784 <configStepMotor1+0x164>)
 80036ca:	f004 fd1f 	bl	800810c <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep1 = (anguloDif * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 80036ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80036d2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8003760 <configStepMotor1+0x140>
 80036d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80036da:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003768 <configStepMotor1+0x148>
 80036de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036e2:	4b29      	ldr	r3, [pc, #164]	; (8003788 <configStepMotor1+0x168>)
 80036e4:	ed83 7b00 	vstr	d7, [r3]
	numStep1 = (uint32_t) calculoStep1;	// cuando pasa la unidad lo sumo al numero de pasos para
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <configStepMotor1+0x168>)
 80036ea:	ed93 7b00 	vldr	d7, [r3]
 80036ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80036f2:	ee17 2a90 	vmov	r2, s15
 80036f6:	4b25      	ldr	r3, [pc, #148]	; (800378c <configStepMotor1+0x16c>)
 80036f8:	601a      	str	r2, [r3, #0]
	remanente1 = remanente1 + (calculoStep1 - numStep1);// que el error no se amplifique.
 80036fa:	4b23      	ldr	r3, [pc, #140]	; (8003788 <configStepMotor1+0x168>)
 80036fc:	ed93 6b00 	vldr	d6, [r3]
 8003700:	4b22      	ldr	r3, [pc, #136]	; (800378c <configStepMotor1+0x16c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800370c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003710:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <configStepMotor1+0x170>)
 8003712:	ed93 7b00 	vldr	d7, [r3]
 8003716:	ee36 7b07 	vadd.f64	d7, d6, d7
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <configStepMotor1+0x170>)
 800371c:	ed83 7b00 	vstr	d7, [r3]
	if (remanente1 >= 1) {
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <configStepMotor1+0x170>)
 8003722:	ed93 7b00 	vldr	d7, [r3]
 8003726:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800372a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800372e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003732:	da00      	bge.n	8003736 <configStepMotor1+0x116>
		remanente1 = remanente1 - 1;
		numStep1 = numStep1 + 1;
	}
}
 8003734:	e00e      	b.n	8003754 <configStepMotor1+0x134>
		remanente1 = remanente1 - 1;
 8003736:	4b16      	ldr	r3, [pc, #88]	; (8003790 <configStepMotor1+0x170>)
 8003738:	ed93 7b00 	vldr	d7, [r3]
 800373c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003740:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <configStepMotor1+0x170>)
 8003746:	ed83 7b00 	vstr	d7, [r3]
		numStep1 = numStep1 + 1;
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <configStepMotor1+0x16c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3301      	adds	r3, #1
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <configStepMotor1+0x16c>)
 8003752:	6013      	str	r3, [r2, #0]
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	f3af 8000 	nop.w
 8003760:	00000000 	.word	0x00000000
 8003764:	40990000 	.word	0x40990000
 8003768:	00000000 	.word	0x00000000
 800376c:	40768000 	.word	0x40768000
 8003770:	240003a4 	.word	0x240003a4
 8003774:	24000588 	.word	0x24000588
 8003778:	58021000 	.word	0x58021000
 800377c:	24000520 	.word	0x24000520
 8003780:	3ff00000 	.word	0x3ff00000
 8003784:	58020800 	.word	0x58020800
 8003788:	240005a0 	.word	0x240005a0
 800378c:	240003b0 	.word	0x240003b0
 8003790:	240005b8 	.word	0x240005b8
 8003794:	00000000 	.word	0x00000000

08003798 <configStepMotor2>:

void configStepMotor2(double angulo) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor2 = 0;
 80037a2:	4b51      	ldr	r3, [pc, #324]	; (80038e8 <configStepMotor2+0x150>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual2) {
 80037a8:	4b50      	ldr	r3, [pc, #320]	; (80038ec <configStepMotor2+0x154>)
 80037aa:	ed93 7b00 	vldr	d7, [r3]
 80037ae:	ed97 6b00 	vldr	d6, [r7]
 80037b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80037b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ba:	db22      	blt.n	8003802 <configStepMotor2+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Inf_GPIO_Port, E_EndStop2_Inf_Pin))){
 80037bc:	2108      	movs	r1, #8
 80037be:	484c      	ldr	r0, [pc, #304]	; (80038f0 <configStepMotor2+0x158>)
 80037c0:	f004 fc8c 	bl	80080dc <HAL_GPIO_ReadPin>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <configStepMotor2+0x40>
			flagErrorEndStop = 1;
 80037ca:	494a      	ldr	r1, [pc, #296]	; (80038f4 <configStepMotor2+0x15c>)
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	4b49      	ldr	r3, [pc, #292]	; (80038f8 <configStepMotor2+0x160>)
 80037d2:	e9c1 2300 	strd	r2, r3, [r1]
 80037d6:	e036      	b.n	8003846 <configStepMotor2+0xae>
		} else {
			anguloDif = angulo - anguloActual2;	//Calculo cuantos grados se tiene que mover.
 80037d8:	4b44      	ldr	r3, [pc, #272]	; (80038ec <configStepMotor2+0x154>)
 80037da:	ed93 7b00 	vldr	d7, [r3]
 80037de:	ed97 6b00 	vldr	d6, [r7]
 80037e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80037e6:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 80037ea:	4940      	ldr	r1, [pc, #256]	; (80038ec <configStepMotor2+0x154>)
 80037ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037f0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET); // VERIFICAR SENTIDO DE GIRO
 80037f4:	2201      	movs	r2, #1
 80037f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037fa:	4840      	ldr	r0, [pc, #256]	; (80038fc <configStepMotor2+0x164>)
 80037fc:	f004 fc86 	bl	800810c <HAL_GPIO_WritePin>
 8003800:	e021      	b.n	8003846 <configStepMotor2+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 8003802:	2104      	movs	r1, #4
 8003804:	483a      	ldr	r0, [pc, #232]	; (80038f0 <configStepMotor2+0x158>)
 8003806:	f004 fc69 	bl	80080dc <HAL_GPIO_ReadPin>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <configStepMotor2+0x86>
			flagErrorEndStop = 1;
 8003810:	4938      	ldr	r1, [pc, #224]	; (80038f4 <configStepMotor2+0x15c>)
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	4b38      	ldr	r3, [pc, #224]	; (80038f8 <configStepMotor2+0x160>)
 8003818:	e9c1 2300 	strd	r2, r3, [r1]
 800381c:	e013      	b.n	8003846 <configStepMotor2+0xae>
		} else {
			anguloDif = anguloActual2 - angulo;	//Calculo cuantos grados se tiene que mover.
 800381e:	4b33      	ldr	r3, [pc, #204]	; (80038ec <configStepMotor2+0x154>)
 8003820:	ed93 6b00 	vldr	d6, [r3]
 8003824:	ed97 7b00 	vldr	d7, [r7]
 8003828:	ee36 7b47 	vsub.f64	d7, d6, d7
 800382c:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 8003830:	492e      	ldr	r1, [pc, #184]	; (80038ec <configStepMotor2+0x154>)
 8003832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003836:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET); // VERIFICAR SENTIDO DE GIRO
 800383a:	2200      	movs	r2, #0
 800383c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003840:	482e      	ldr	r0, [pc, #184]	; (80038fc <configStepMotor2+0x164>)
 8003842:	f004 fc63 	bl	800810c <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep2 = (anguloDif * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 8003846:	ed97 7b02 	vldr	d7, [r7, #8]
 800384a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80038d8 <configStepMotor2+0x140>
 800384e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003852:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80038e0 <configStepMotor2+0x148>
 8003856:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800385a:	4b29      	ldr	r3, [pc, #164]	; (8003900 <configStepMotor2+0x168>)
 800385c:	ed83 7b00 	vstr	d7, [r3]
	numStep2 = (uint32_t) calculoStep2;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003860:	4b27      	ldr	r3, [pc, #156]	; (8003900 <configStepMotor2+0x168>)
 8003862:	ed93 7b00 	vldr	d7, [r3]
 8003866:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800386a:	ee17 2a90 	vmov	r2, s15
 800386e:	4b25      	ldr	r3, [pc, #148]	; (8003904 <configStepMotor2+0x16c>)
 8003870:	601a      	str	r2, [r3, #0]
	remanente2 = remanente2 + (calculoStep2 - numStep2);// que el error no se amplifique.
 8003872:	4b23      	ldr	r3, [pc, #140]	; (8003900 <configStepMotor2+0x168>)
 8003874:	ed93 6b00 	vldr	d6, [r3]
 8003878:	4b22      	ldr	r3, [pc, #136]	; (8003904 <configStepMotor2+0x16c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	ee07 3a90 	vmov	s15, r3
 8003880:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003884:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003888:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <configStepMotor2+0x170>)
 800388a:	ed93 7b00 	vldr	d7, [r3]
 800388e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <configStepMotor2+0x170>)
 8003894:	ed83 7b00 	vstr	d7, [r3]
	if (remanente2 >= 1) {
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <configStepMotor2+0x170>)
 800389a:	ed93 7b00 	vldr	d7, [r3]
 800389e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80038a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	da00      	bge.n	80038ae <configStepMotor2+0x116>
		remanente2 = remanente2 - 1;
		numStep2 = numStep2 + 1;
	}
}
 80038ac:	e00e      	b.n	80038cc <configStepMotor2+0x134>
		remanente2 = remanente2 - 1;
 80038ae:	4b16      	ldr	r3, [pc, #88]	; (8003908 <configStepMotor2+0x170>)
 80038b0:	ed93 7b00 	vldr	d7, [r3]
 80038b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80038b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <configStepMotor2+0x170>)
 80038be:	ed83 7b00 	vstr	d7, [r3]
		numStep2 = numStep2 + 1;
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <configStepMotor2+0x16c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3301      	adds	r3, #1
 80038c8:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <configStepMotor2+0x16c>)
 80038ca:	6013      	str	r3, [r2, #0]
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	f3af 8000 	nop.w
 80038d8:	00000000 	.word	0x00000000
 80038dc:	40990000 	.word	0x40990000
 80038e0:	00000000 	.word	0x00000000
 80038e4:	40768000 	.word	0x40768000
 80038e8:	240003a8 	.word	0x240003a8
 80038ec:	24000590 	.word	0x24000590
 80038f0:	58021000 	.word	0x58021000
 80038f4:	24000520 	.word	0x24000520
 80038f8:	3ff00000 	.word	0x3ff00000
 80038fc:	58020800 	.word	0x58020800
 8003900:	240005a8 	.word	0x240005a8
 8003904:	240003b4 	.word	0x240003b4
 8003908:	240005c0 	.word	0x240005c0
 800390c:	00000000 	.word	0x00000000

08003910 <configStepMotor3>:

void configStepMotor3(double angulo) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor3 = 0;
 800391a:	4b51      	ldr	r3, [pc, #324]	; (8003a60 <configStepMotor3+0x150>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual3) {
 8003920:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <configStepMotor3+0x154>)
 8003922:	ed93 7b00 	vldr	d7, [r3]
 8003926:	ed97 6b00 	vldr	d6, [r7]
 800392a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003932:	db22      	blt.n	800397a <configStepMotor3+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 8003934:	2120      	movs	r1, #32
 8003936:	484c      	ldr	r0, [pc, #304]	; (8003a68 <configStepMotor3+0x158>)
 8003938:	f004 fbd0 	bl	80080dc <HAL_GPIO_ReadPin>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <configStepMotor3+0x40>
			flagErrorEndStop = 1;
 8003942:	494a      	ldr	r1, [pc, #296]	; (8003a6c <configStepMotor3+0x15c>)
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	4b49      	ldr	r3, [pc, #292]	; (8003a70 <configStepMotor3+0x160>)
 800394a:	e9c1 2300 	strd	r2, r3, [r1]
 800394e:	e036      	b.n	80039be <configStepMotor3+0xae>
		} else {
			anguloDif = angulo - anguloActual3;	//Calculo cuantos grados se tiene que mover.
 8003950:	4b44      	ldr	r3, [pc, #272]	; (8003a64 <configStepMotor3+0x154>)
 8003952:	ed93 7b00 	vldr	d7, [r3]
 8003956:	ed97 6b00 	vldr	d6, [r7]
 800395a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800395e:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8003962:	4940      	ldr	r1, [pc, #256]	; (8003a64 <configStepMotor3+0x154>)
 8003964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003968:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET); // Brazo Baja (Antihorario)
 800396c:	2201      	movs	r2, #1
 800396e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003972:	4840      	ldr	r0, [pc, #256]	; (8003a74 <configStepMotor3+0x164>)
 8003974:	f004 fbca 	bl	800810c <HAL_GPIO_WritePin>
 8003978:	e021      	b.n	80039be <configStepMotor3+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 800397a:	2120      	movs	r1, #32
 800397c:	483a      	ldr	r0, [pc, #232]	; (8003a68 <configStepMotor3+0x158>)
 800397e:	f004 fbad 	bl	80080dc <HAL_GPIO_ReadPin>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d106      	bne.n	8003996 <configStepMotor3+0x86>
					flagErrorEndStop = 1;
 8003988:	4938      	ldr	r1, [pc, #224]	; (8003a6c <configStepMotor3+0x15c>)
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <configStepMotor3+0x160>)
 8003990:	e9c1 2300 	strd	r2, r3, [r1]
 8003994:	e013      	b.n	80039be <configStepMotor3+0xae>
		} else {
			anguloDif = anguloActual3 - angulo;	//Calculo cuantos grados se tiene que mover.
 8003996:	4b33      	ldr	r3, [pc, #204]	; (8003a64 <configStepMotor3+0x154>)
 8003998:	ed93 6b00 	vldr	d6, [r3]
 800399c:	ed97 7b00 	vldr	d7, [r7]
 80039a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039a4:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 80039a8:	492e      	ldr	r1, [pc, #184]	; (8003a64 <configStepMotor3+0x154>)
 80039aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ae:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET); // Brazo Sube (Horario)
 80039b2:	2200      	movs	r2, #0
 80039b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039b8:	482e      	ldr	r0, [pc, #184]	; (8003a74 <configStepMotor3+0x164>)
 80039ba:	f004 fba7 	bl	800810c <HAL_GPIO_WritePin>
		}
	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep3 = (anguloDif * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 80039be:	ed97 7b02 	vldr	d7, [r7, #8]
 80039c2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8003a50 <configStepMotor3+0x140>
 80039c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80039ca:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003a58 <configStepMotor3+0x148>
 80039ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <configStepMotor3+0x168>)
 80039d4:	ed83 7b00 	vstr	d7, [r3]
	numStep3 = (uint32_t) calculoStep3;	// cuando pasa la unidad lo sumo al numero de pasos para
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <configStepMotor3+0x168>)
 80039da:	ed93 7b00 	vldr	d7, [r3]
 80039de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039e2:	ee17 2a90 	vmov	r2, s15
 80039e6:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <configStepMotor3+0x16c>)
 80039e8:	601a      	str	r2, [r3, #0]
	remanente3 = remanente3 + (calculoStep3 - numStep3);// que el error no se amplifique.
 80039ea:	4b23      	ldr	r3, [pc, #140]	; (8003a78 <configStepMotor3+0x168>)
 80039ec:	ed93 6b00 	vldr	d6, [r3]
 80039f0:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <configStepMotor3+0x16c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	ee07 3a90 	vmov	s15, r3
 80039f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80039fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003a00:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <configStepMotor3+0x170>)
 8003a02:	ed93 7b00 	vldr	d7, [r3]
 8003a06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <configStepMotor3+0x170>)
 8003a0c:	ed83 7b00 	vstr	d7, [r3]
	if (remanente3 >= 1) {
 8003a10:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <configStepMotor3+0x170>)
 8003a12:	ed93 7b00 	vldr	d7, [r3]
 8003a16:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003a1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a22:	da00      	bge.n	8003a26 <configStepMotor3+0x116>
		remanente3 = remanente3 - 1;
		numStep3 = numStep3 + 1;
	}
}
 8003a24:	e00e      	b.n	8003a44 <configStepMotor3+0x134>
		remanente3 = remanente3 - 1;
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <configStepMotor3+0x170>)
 8003a28:	ed93 7b00 	vldr	d7, [r3]
 8003a2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003a30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a34:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <configStepMotor3+0x170>)
 8003a36:	ed83 7b00 	vstr	d7, [r3]
		numStep3 = numStep3 + 1;
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <configStepMotor3+0x16c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <configStepMotor3+0x16c>)
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	f3af 8000 	nop.w
 8003a50:	00000000 	.word	0x00000000
 8003a54:	40990000 	.word	0x40990000
 8003a58:	00000000 	.word	0x00000000
 8003a5c:	40768000 	.word	0x40768000
 8003a60:	240003ac 	.word	0x240003ac
 8003a64:	24000598 	.word	0x24000598
 8003a68:	58021000 	.word	0x58021000
 8003a6c:	24000520 	.word	0x24000520
 8003a70:	3ff00000 	.word	0x3ff00000
 8003a74:	58020800 	.word	0x58020800
 8003a78:	240005b0 	.word	0x240005b0
 8003a7c:	240003b8 	.word	0x240003b8
 8003a80:	240005c8 	.word	0x240005c8

08003a84 <transpuesta>:
 *      Author: EliasC
 */

#include <operaciones.h>

array2D transpuesta(double Maux[3][3]) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b096      	sub	sp, #88	; 0x58
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
	array2D MTaux;
	for (int i = 0; i < 3; ++i) {
 8003a8e:	2300      	movs	r3, #0
 8003a90:	657b      	str	r3, [r7, #84]	; 0x54
 8003a92:	e024      	b.n	8003ade <transpuesta+0x5a>
		for (int j = 0; j < 3; ++j) {
 8003a94:	2300      	movs	r3, #0
 8003a96:	653b      	str	r3, [r7, #80]	; 0x50
 8003a98:	e01b      	b.n	8003ad2 <transpuesta+0x4e>
			MTaux.m[j][i] = Maux[i][j];	//transpuesta de la matriz l2 JP=[l21';l22';l23'];
 8003a9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4413      	add	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	441a      	add	r2, r3
 8003aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ab4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003abe:	4413      	add	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	3358      	adds	r3, #88	; 0x58
 8003ac4:	443b      	add	r3, r7
 8003ac6:	3b50      	subs	r3, #80	; 0x50
 8003ac8:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < 3; ++j) {
 8003acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ace:	3301      	adds	r3, #1
 8003ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	dde0      	ble.n	8003a9a <transpuesta+0x16>
	for (int i = 0; i < 3; ++i) {
 8003ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ada:	3301      	adds	r3, #1
 8003adc:	657b      	str	r3, [r7, #84]	; 0x54
 8003ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	ddd7      	ble.n	8003a94 <transpuesta+0x10>
		}
	}
	return MTaux;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f107 0308 	add.w	r3, r7, #8
 8003aec:	2248      	movs	r2, #72	; 0x48
 8003aee:	4619      	mov	r1, r3
 8003af0:	f00b fa20 	bl	800ef34 <memcpy>
}
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	3758      	adds	r7, #88	; 0x58
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <productDot>:

double productDot(double VectA[], double VectB[]) {
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
	double dotaux = 0;
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e016      	b.n	8003b46 <productDot+0x4a>
		dotaux = dotaux + VectA[i] * VectB[i];
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	ed93 6b00 	vldr	d6, [r3]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	ed93 7b00 	vldr	d7, [r3]
 8003b30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003b34:	ed97 6b04 	vldr	d6, [r7, #16]
 8003b38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b3c:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3301      	adds	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	dde5      	ble.n	8003b18 <productDot+0x1c>
	}
	return dotaux;
 8003b4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b50:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b54:	eeb0 0b47 	vmov.f64	d0, d7
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <determinante>:

double determinante(double Maux[3][3]) {
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
	double det;
	det = Maux[0][0] * Maux[1][1] * Maux[2][2]; // + Maux[0][1] * Maux[1][2] * Maux[2][0] + Maux[1][0] * Maux[2][1] * Maux[0][2] - Maux[2][0] * Maux[1][1] * Maux[0][2] - Maux[1][0] * Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[1][2] * Maux[0][0];
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	ed93 6b00 	vldr	d6, [r3]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3318      	adds	r3, #24
 8003b74:	ed93 7b02 	vldr	d7, [r3, #8]
 8003b78:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3330      	adds	r3, #48	; 0x30
 8003b80:	ed93 7b04 	vldr	d7, [r3, #16]
 8003b84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003b88:	ed87 7b02 	vstr	d7, [r7, #8]
	return det;
 8003b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b90:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b94:	eeb0 0b47 	vmov.f64	d0, d7
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <adjunta>:

array2D adjunta(double Maux[3][3]) {
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b094      	sub	sp, #80	; 0x50
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
	array2D adj;
	adj.m[0][0] = Maux[1][1] * Maux[2][2] - Maux[2][1] * Maux[1][2];
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	3318      	adds	r3, #24
 8003bb0:	ed93 6b02 	vldr	d6, [r3, #8]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	3330      	adds	r3, #48	; 0x30
 8003bb8:	ed93 7b04 	vldr	d7, [r3, #16]
 8003bbc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	3330      	adds	r3, #48	; 0x30
 8003bc4:	ed93 5b02 	vldr	d5, [r3, #8]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	3318      	adds	r3, #24
 8003bcc:	ed93 7b04 	vldr	d7, [r3, #16]
 8003bd0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bd4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003bd8:	ed87 7b02 	vstr	d7, [r7, #8]
	adj.m[0][1] = Maux[1][0] * Maux[2][2] - Maux[2][0] * Maux[1][2];
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	3318      	adds	r3, #24
 8003be0:	ed93 6b00 	vldr	d6, [r3]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	3330      	adds	r3, #48	; 0x30
 8003be8:	ed93 7b04 	vldr	d7, [r3, #16]
 8003bec:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	3330      	adds	r3, #48	; 0x30
 8003bf4:	ed93 5b00 	vldr	d5, [r3]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	3318      	adds	r3, #24
 8003bfc:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c04:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c08:	ed87 7b04 	vstr	d7, [r7, #16]
	adj.m[0][2] = Maux[1][0] * Maux[2][1] - Maux[2][0] * Maux[1][1];
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	3318      	adds	r3, #24
 8003c10:	ed93 6b00 	vldr	d6, [r3]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	3330      	adds	r3, #48	; 0x30
 8003c18:	ed93 7b02 	vldr	d7, [r3, #8]
 8003c1c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	3330      	adds	r3, #48	; 0x30
 8003c24:	ed93 5b00 	vldr	d5, [r3]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	3318      	adds	r3, #24
 8003c2c:	ed93 7b02 	vldr	d7, [r3, #8]
 8003c30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c34:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c38:	ed87 7b06 	vstr	d7, [r7, #24]
	adj.m[1][0] = Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[0][2];
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	ed93 6b02 	vldr	d6, [r3, #8]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	3330      	adds	r3, #48	; 0x30
 8003c46:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	3330      	adds	r3, #48	; 0x30
 8003c52:	ed93 5b02 	vldr	d5, [r3, #8]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c5c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c64:	ed87 7b08 	vstr	d7, [r7, #32]
	adj.m[1][1] = Maux[0][0] * Maux[2][2] - Maux[2][0] * Maux[0][2];
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	ed93 6b00 	vldr	d6, [r3]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	3330      	adds	r3, #48	; 0x30
 8003c72:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c76:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	3330      	adds	r3, #48	; 0x30
 8003c7e:	ed93 5b00 	vldr	d5, [r3]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c88:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c90:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	adj.m[1][2] = Maux[0][0] * Maux[2][1] - Maux[2][0] * Maux[0][1];
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	ed93 6b00 	vldr	d6, [r3]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	3330      	adds	r3, #48	; 0x30
 8003c9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8003ca2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	3330      	adds	r3, #48	; 0x30
 8003caa:	ed93 5b00 	vldr	d5, [r3]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	ed93 7b02 	vldr	d7, [r3, #8]
 8003cb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003cbc:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	adj.m[2][0] = Maux[0][1] * Maux[1][2] - Maux[1][1] * Maux[0][2];
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	ed93 6b02 	vldr	d6, [r3, #8]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	3318      	adds	r3, #24
 8003cca:	ed93 7b04 	vldr	d7, [r3, #16]
 8003cce:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	3318      	adds	r3, #24
 8003cd6:	ed93 5b02 	vldr	d5, [r3, #8]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	ed93 7b04 	vldr	d7, [r3, #16]
 8003ce0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ce4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ce8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	adj.m[2][1] = Maux[0][0] * Maux[1][2] - Maux[1][0] * Maux[0][2];
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	ed93 6b00 	vldr	d6, [r3]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	3318      	adds	r3, #24
 8003cf6:	ed93 7b04 	vldr	d7, [r3, #16]
 8003cfa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	3318      	adds	r3, #24
 8003d02:	ed93 5b00 	vldr	d5, [r3]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	ed93 7b04 	vldr	d7, [r3, #16]
 8003d0c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d10:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003d14:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	adj.m[2][2] = Maux[0][0] * Maux[1][1] - Maux[1][0] * Maux[0][1];
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	ed93 6b00 	vldr	d6, [r3]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	3318      	adds	r3, #24
 8003d22:	ed93 7b02 	vldr	d7, [r3, #8]
 8003d26:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	3318      	adds	r3, #24
 8003d2e:	ed93 5b00 	vldr	d5, [r3]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	ed93 7b02 	vldr	d7, [r3, #8]
 8003d38:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d3c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003d40:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	return adj;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f107 0308 	add.w	r3, r7, #8
 8003d4c:	2248      	movs	r2, #72	; 0x48
 8003d4e:	4619      	mov	r1, r3
 8003d50:	f00b f8f0 	bl	800ef34 <memcpy>
}
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	3750      	adds	r7, #80	; 0x50
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <inversa>:

array2D inversa(double A[3][3]) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b0bc      	sub	sp, #240	; 0xf0
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003d64:	64b9      	str	r1, [r7, #72]	; 0x48
	array2D Minv;
	array2D Maux;
	double det;
	Maux = adjunta(A);
 8003d66:	463b      	mov	r3, r7
 8003d68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ff19 	bl	8003ba2 <adjunta>
 8003d70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d74:	4639      	mov	r1, r7
 8003d76:	2248      	movs	r2, #72	; 0x48
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f00b f8db 	bl	800ef34 <memcpy>
	Maux = transpuesta(Maux.m);
 8003d7e:	463b      	mov	r3, r7
 8003d80:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fe7c 	bl	8003a84 <transpuesta>
 8003d8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d90:	4639      	mov	r1, r7
 8003d92:	2248      	movs	r2, #72	; 0x48
 8003d94:	4618      	mov	r0, r3
 8003d96:	f00b f8cd 	bl	800ef34 <memcpy>
	det = determinante(A);
 8003d9a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003d9c:	f7ff fee1 	bl	8003b62 <determinante>
 8003da0:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	for (int i = 0; i < 3; ++i) {
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003daa:	e035      	b.n	8003e18 <inversa+0xbc>
		for (int j = 0; j < 3; ++j) {
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003db2:	e028      	b.n	8003e06 <inversa+0xaa>
			Minv.m[i][j] = (1 / det) * Maux.m[i][j];
 8003db4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003db8:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8003dbc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003dc0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4413      	add	r3, r2
 8003dca:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	33f0      	adds	r3, #240	; 0xf0
 8003dd4:	443b      	add	r3, r7
 8003dd6:	3ba0      	subs	r3, #160	; 0xa0
 8003dd8:	ed93 7b00 	vldr	d7, [r3]
 8003ddc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003de0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003de4:	4613      	mov	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4413      	add	r3, r2
 8003dea:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003dee:	4413      	add	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	33f0      	adds	r3, #240	; 0xf0
 8003df4:	443b      	add	r3, r7
 8003df6:	3b58      	subs	r3, #88	; 0x58
 8003df8:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; ++j) {
 8003dfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e00:	3301      	adds	r3, #1
 8003e02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	ddd2      	ble.n	8003db4 <inversa+0x58>
	for (int i = 0; i < 3; ++i) {
 8003e0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e12:	3301      	adds	r3, #1
 8003e14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	ddc5      	ble.n	8003dac <inversa+0x50>
		}
	}
	return Minv;
 8003e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e22:	4618      	mov	r0, r3
 8003e24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e28:	2248      	movs	r2, #72	; 0x48
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	f00b f882 	bl	800ef34 <memcpy>
}
 8003e30:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003e32:	37f0      	adds	r7, #240	; 0xf0
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <productMatriz>:

array2D productMatriz(double MatrizA[3][3], double MatrizB[3][3]) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b09c      	sub	sp, #112	; 0x70
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
	array2D producto;

	for (int k = 0; k < 3; ++k) {
 8003e44:	2300      	movs	r3, #0
 8003e46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e48:	e04b      	b.n	8003ee2 <productMatriz+0xaa>
		for (int i = 0; i < 3; ++i) {
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4e:	e042      	b.n	8003ed6 <productMatriz+0x9e>
			double suma = 0;
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e60:	e024      	b.n	8003eac <productMatriz+0x74>
				suma += MatrizA[i][j] * MatrizB[j][k];
 8003e62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	441a      	add	r2, r3
 8003e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	ed93 6b00 	vldr	d6, [r3]
 8003e7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	441a      	add	r2, r3
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	ed93 7b00 	vldr	d7, [r3]
 8003e96:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003e9a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8003e9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ea2:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8003ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	ddd7      	ble.n	8003e62 <productMatriz+0x2a>
			}
			producto.m[i][k] = suma;
 8003eb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	3370      	adds	r3, #112	; 0x70
 8003ec2:	443b      	add	r3, r7
 8003ec4:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8003ec8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003ecc:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8003ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ed6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	ddb9      	ble.n	8003e50 <productMatriz+0x18>
	for (int k = 0; k < 3; ++k) {
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	3301      	adds	r3, #1
 8003ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	ddb0      	ble.n	8003e4a <productMatriz+0x12>
		}
	}
	return producto;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f107 0310 	add.w	r3, r7, #16
 8003ef0:	2248      	movs	r2, #72	; 0x48
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f00b f81e 	bl	800ef34 <memcpy>
}
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	3770      	adds	r7, #112	; 0x70
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_MspInit+0x44>)
 8003f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f0c:	4a0d      	ldr	r2, [pc, #52]	; (8003f44 <HAL_MspInit+0x44>)
 8003f0e:	f043 0302 	orr.w	r3, r3, #2
 8003f12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_MspInit+0x44>)
 8003f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003f24:	2005      	movs	r0, #5
 8003f26:	f003 f977 	bl	8007218 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	2051      	movs	r0, #81	; 0x51
 8003f30:	f003 f97d 	bl	800722e <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003f34:	2051      	movs	r0, #81	; 0x51
 8003f36:	f003 f994 	bl	8007262 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	58024400 	.word	0x58024400

08003f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f56:	b480      	push	{r7}
 8003f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f5a:	e7fe      	b.n	8003f5a <HardFault_Handler+0x4>

08003f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f60:	e7fe      	b.n	8003f60 <MemManage_Handler+0x4>

08003f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f62:	b480      	push	{r7}
 8003f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f66:	e7fe      	b.n	8003f66 <BusFault_Handler+0x4>

08003f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f6c:	e7fe      	b.n	8003f6c <UsageFault_Handler+0x4>

08003f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f9c:	f002 fff8 	bl	8006f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fa0:	bf00      	nop
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003fa8:	2001      	movs	r0, #1
 8003faa:	f004 f8c8 	bl	800813e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003fb6:	2002      	movs	r0, #2
 8003fb8:	f004 f8c1 	bl	800813e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003fbc:	bf00      	nop
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8003fc4:	2004      	movs	r0, #4
 8003fc6:	f004 f8ba 	bl	800813e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003fd2:	2008      	movs	r0, #8
 8003fd4:	f004 f8b3 	bl	800813e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003fd8:	bf00      	nop
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003fe0:	2010      	movs	r0, #16
 8003fe2:	f004 f8ac 	bl	800813e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003fee:	2020      	movs	r0, #32
 8003ff0:	f004 f8a5 	bl	800813e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ff4:	bf00      	nop
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <TIM2_IRQHandler+0x10>)
 8003ffe:	f007 fa21 	bl	800b444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	240005d4 	.word	0x240005d4

0800400c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <TIM3_IRQHandler+0x10>)
 8004012:	f007 fa17 	bl	800b444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	24000620 	.word	0x24000620

08004020 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004024:	4802      	ldr	r0, [pc, #8]	; (8004030 <TIM4_IRQHandler+0x10>)
 8004026:	f007 fa0d 	bl	800b444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2400066c 	.word	0x2400066c

08004034 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <USART3_IRQHandler+0x10>)
 800403a:	f008 fd2f 	bl	800ca9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	24000cf0 	.word	0x24000cf0

08004048 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800404c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004050:	f004 f875 	bl	800813e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}

08004058 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800406c:	4802      	ldr	r0, [pc, #8]	; (8004078 <TIM15_IRQHandler+0x10>)
 800406e:	f007 f9e9 	bl	800b444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	240007e8 	.word	0x240007e8

0800407c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
	return 1;
 8004080:	2301      	movs	r3, #1
}
 8004082:	4618      	mov	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <_kill>:

int _kill(int pid, int sig)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004096:	f00a ff23 	bl	800eee0 <__errno>
 800409a:	4603      	mov	r3, r0
 800409c:	2216      	movs	r2, #22
 800409e:	601a      	str	r2, [r3, #0]
	return -1;
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_exit>:

void _exit (int status)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040b4:	f04f 31ff 	mov.w	r1, #4294967295
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ffe7 	bl	800408c <_kill>
	while (1) {}		/* Make sure we hang here */
 80040be:	e7fe      	b.n	80040be <_exit+0x12>

080040c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e00a      	b.n	80040e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040d2:	f3af 8000 	nop.w
 80040d6:	4601      	mov	r1, r0
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	60ba      	str	r2, [r7, #8]
 80040de:	b2ca      	uxtb	r2, r1
 80040e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	3301      	adds	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dbf0      	blt.n	80040d2 <_read+0x12>
	}

return len;
 80040f0:	687b      	ldr	r3, [r7, #4]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e009      	b.n	8004120 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	60ba      	str	r2, [r7, #8]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	3301      	adds	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	dbf1      	blt.n	800410c <_write+0x12>
	}
	return len;
 8004128:	687b      	ldr	r3, [r7, #4]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_close>:

int _close(int file)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
	return -1;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800415a:	605a      	str	r2, [r3, #4]
	return 0;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <_isatty>:

int _isatty(int file)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
	return 1;
 8004172:	2301      	movs	r3, #1
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
	return 0;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <_sbrk+0x50>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <_sbrk+0x16>
		heap_end = &end;
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <_sbrk+0x50>)
 80041ae:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <_sbrk+0x54>)
 80041b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80041b2:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <_sbrk+0x50>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <_sbrk+0x50>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4413      	add	r3, r2
 80041c0:	466a      	mov	r2, sp
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d907      	bls.n	80041d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80041c6:	f00a fe8b 	bl	800eee0 <__errno>
 80041ca:	4603      	mov	r3, r0
 80041cc:	220c      	movs	r2, #12
 80041ce:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
 80041d4:	e006      	b.n	80041e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <_sbrk+0x50>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	4a03      	ldr	r2, [pc, #12]	; (80041ec <_sbrk+0x50>)
 80041e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80041e2:	68fb      	ldr	r3, [r7, #12]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	240005d0 	.word	0x240005d0
 80041f0:	24000d98 	.word	0x24000d98

080041f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80041f8:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <SystemInit+0xac>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <SystemInit+0xac>)
 8004200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004208:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <SystemInit+0xb0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a25      	ldr	r2, [pc, #148]	; (80042a4 <SystemInit+0xb0>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004214:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <SystemInit+0xb0>)
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <SystemInit+0xb0>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4921      	ldr	r1, [pc, #132]	; (80042a4 <SystemInit+0xb0>)
 8004220:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <SystemInit+0xb4>)
 8004222:	4013      	ands	r3, r2
 8004224:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004226:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <SystemInit+0xb0>)
 8004228:	2200      	movs	r2, #0
 800422a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <SystemInit+0xb0>)
 800422e:	2200      	movs	r2, #0
 8004230:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <SystemInit+0xb0>)
 8004234:	2200      	movs	r2, #0
 8004236:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8004238:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <SystemInit+0xb0>)
 800423a:	2200      	movs	r2, #0
 800423c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800423e:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <SystemInit+0xb0>)
 8004240:	2200      	movs	r2, #0
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8004244:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <SystemInit+0xb0>)
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <SystemInit+0xb0>)
 800424c:	2200      	movs	r2, #0
 800424e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8004250:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <SystemInit+0xb0>)
 8004252:	2200      	movs	r2, #0
 8004254:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004256:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <SystemInit+0xb0>)
 8004258:	2200      	movs	r2, #0
 800425a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <SystemInit+0xb0>)
 800425e:	2200      	movs	r2, #0
 8004260:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004262:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <SystemInit+0xb0>)
 8004264:	2200      	movs	r2, #0
 8004266:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004268:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <SystemInit+0xb0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a0d      	ldr	r2, [pc, #52]	; (80042a4 <SystemInit+0xb0>)
 800426e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004272:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <SystemInit+0xb0>)
 8004276:	2200      	movs	r2, #0
 8004278:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <SystemInit+0xb8>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <SystemInit+0xbc>)
 8004280:	4013      	ands	r3, r2
 8004282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004286:	d202      	bcs.n	800428e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <SystemInit+0xc0>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800428e:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <SystemInit+0xac>)
 8004290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004294:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00
 80042a4:	58024400 	.word	0x58024400
 80042a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80042ac:	5c001000 	.word	0x5c001000
 80042b0:	ffff0000 	.word	0xffff0000
 80042b4:	51008108 	.word	0x51008108

080042b8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08c      	sub	sp, #48	; 0x30
 80042bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042be:	f107 0320 	add.w	r3, r7, #32
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	609a      	str	r2, [r3, #8]
 80042ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042cc:	f107 0314 	add.w	r3, r7, #20
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80042d8:	1d3b      	adds	r3, r7, #4
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042e4:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <MX_TIM2_Init+0xdc>)
 80042e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80042ec:	4b29      	ldr	r3, [pc, #164]	; (8004394 <MX_TIM2_Init+0xdc>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f2:	4b28      	ldr	r3, [pc, #160]	; (8004394 <MX_TIM2_Init+0xdc>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80042f8:	4b26      	ldr	r3, [pc, #152]	; (8004394 <MX_TIM2_Init+0xdc>)
 80042fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004300:	4b24      	ldr	r3, [pc, #144]	; (8004394 <MX_TIM2_Init+0xdc>)
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004306:	4b23      	ldr	r3, [pc, #140]	; (8004394 <MX_TIM2_Init+0xdc>)
 8004308:	2200      	movs	r2, #0
 800430a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800430c:	4821      	ldr	r0, [pc, #132]	; (8004394 <MX_TIM2_Init+0xdc>)
 800430e:	f006 fa8d 	bl	800a82c <HAL_TIM_Base_Init>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8004318:	f7ff f97a 	bl	8003610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800431c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004320:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004322:	f107 0320 	add.w	r3, r7, #32
 8004326:	4619      	mov	r1, r3
 8004328:	481a      	ldr	r0, [pc, #104]	; (8004394 <MX_TIM2_Init+0xdc>)
 800432a:	f007 fb5b 	bl	800b9e4 <HAL_TIM_ConfigClockSource>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004334:	f7ff f96c 	bl	8003610 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004338:	4816      	ldr	r0, [pc, #88]	; (8004394 <MX_TIM2_Init+0xdc>)
 800433a:	f006 fe13 	bl	800af64 <HAL_TIM_IC_Init>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004344:	f7ff f964 	bl	8003610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800434c:	2300      	movs	r3, #0
 800434e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	4619      	mov	r1, r3
 8004356:	480f      	ldr	r0, [pc, #60]	; (8004394 <MX_TIM2_Init+0xdc>)
 8004358:	f008 f9b8 	bl	800c6cc <HAL_TIMEx_MasterConfigSynchronization>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8004362:	f7ff f955 	bl	8003610 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800436a:	2301      	movs	r3, #1
 800436c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004376:	1d3b      	adds	r3, r7, #4
 8004378:	2200      	movs	r2, #0
 800437a:	4619      	mov	r1, r3
 800437c:	4805      	ldr	r0, [pc, #20]	; (8004394 <MX_TIM2_Init+0xdc>)
 800437e:	f007 f980 	bl	800b682 <HAL_TIM_IC_ConfigChannel>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8004388:	f7ff f942 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800438c:	bf00      	nop
 800438e:	3730      	adds	r7, #48	; 0x30
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	240005d4 	.word	0x240005d4

08004398 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08c      	sub	sp, #48	; 0x30
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800439e:	f107 0320 	add.w	r3, r7, #32
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	609a      	str	r2, [r3, #8]
 80043aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80043b8:	1d3b      	adds	r3, r7, #4
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	605a      	str	r2, [r3, #4]
 80043c0:	609a      	str	r2, [r3, #8]
 80043c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80043c4:	4b2b      	ldr	r3, [pc, #172]	; (8004474 <MX_TIM3_Init+0xdc>)
 80043c6:	4a2c      	ldr	r2, [pc, #176]	; (8004478 <MX_TIM3_Init+0xe0>)
 80043c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80043ca:	4b2a      	ldr	r3, [pc, #168]	; (8004474 <MX_TIM3_Init+0xdc>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043d0:	4b28      	ldr	r3, [pc, #160]	; (8004474 <MX_TIM3_Init+0xdc>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80043d6:	4b27      	ldr	r3, [pc, #156]	; (8004474 <MX_TIM3_Init+0xdc>)
 80043d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043de:	4b25      	ldr	r3, [pc, #148]	; (8004474 <MX_TIM3_Init+0xdc>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e4:	4b23      	ldr	r3, [pc, #140]	; (8004474 <MX_TIM3_Init+0xdc>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80043ea:	4822      	ldr	r0, [pc, #136]	; (8004474 <MX_TIM3_Init+0xdc>)
 80043ec:	f006 fa1e 	bl	800a82c <HAL_TIM_Base_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80043f6:	f7ff f90b 	bl	8003610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004400:	f107 0320 	add.w	r3, r7, #32
 8004404:	4619      	mov	r1, r3
 8004406:	481b      	ldr	r0, [pc, #108]	; (8004474 <MX_TIM3_Init+0xdc>)
 8004408:	f007 faec 	bl	800b9e4 <HAL_TIM_ConfigClockSource>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004412:	f7ff f8fd 	bl	8003610 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004416:	4817      	ldr	r0, [pc, #92]	; (8004474 <MX_TIM3_Init+0xdc>)
 8004418:	f006 fda4 	bl	800af64 <HAL_TIM_IC_Init>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8004422:	f7ff f8f5 	bl	8003610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800442e:	f107 0314 	add.w	r3, r7, #20
 8004432:	4619      	mov	r1, r3
 8004434:	480f      	ldr	r0, [pc, #60]	; (8004474 <MX_TIM3_Init+0xdc>)
 8004436:	f008 f949 	bl	800c6cc <HAL_TIMEx_MasterConfigSynchronization>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8004440:	f7ff f8e6 	bl	8003610 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004444:	2300      	movs	r3, #0
 8004446:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004448:	2301      	movs	r3, #1
 800444a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004454:	1d3b      	adds	r3, r7, #4
 8004456:	2200      	movs	r2, #0
 8004458:	4619      	mov	r1, r3
 800445a:	4806      	ldr	r0, [pc, #24]	; (8004474 <MX_TIM3_Init+0xdc>)
 800445c:	f007 f911 	bl	800b682 <HAL_TIM_IC_ConfigChannel>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8004466:	f7ff f8d3 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800446a:	bf00      	nop
 800446c:	3730      	adds	r7, #48	; 0x30
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	24000620 	.word	0x24000620
 8004478:	40000400 	.word	0x40000400

0800447c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08c      	sub	sp, #48	; 0x30
 8004480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004482:	f107 0320 	add.w	r3, r7, #32
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004490:	f107 0314 	add.w	r3, r7, #20
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800449c:	1d3b      	adds	r3, r7, #4
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	605a      	str	r2, [r3, #4]
 80044a4:	609a      	str	r2, [r3, #8]
 80044a6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <MX_TIM4_Init+0xdc>)
 80044aa:	4a2c      	ldr	r2, [pc, #176]	; (800455c <MX_TIM4_Init+0xe0>)
 80044ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80044ae:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <MX_TIM4_Init+0xdc>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b4:	4b28      	ldr	r3, [pc, #160]	; (8004558 <MX_TIM4_Init+0xdc>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80044ba:	4b27      	ldr	r3, [pc, #156]	; (8004558 <MX_TIM4_Init+0xdc>)
 80044bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044c2:	4b25      	ldr	r3, [pc, #148]	; (8004558 <MX_TIM4_Init+0xdc>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044c8:	4b23      	ldr	r3, [pc, #140]	; (8004558 <MX_TIM4_Init+0xdc>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80044ce:	4822      	ldr	r0, [pc, #136]	; (8004558 <MX_TIM4_Init+0xdc>)
 80044d0:	f006 f9ac 	bl	800a82c <HAL_TIM_Base_Init>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80044da:	f7ff f899 	bl	8003610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80044e4:	f107 0320 	add.w	r3, r7, #32
 80044e8:	4619      	mov	r1, r3
 80044ea:	481b      	ldr	r0, [pc, #108]	; (8004558 <MX_TIM4_Init+0xdc>)
 80044ec:	f007 fa7a 	bl	800b9e4 <HAL_TIM_ConfigClockSource>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80044f6:	f7ff f88b 	bl	8003610 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80044fa:	4817      	ldr	r0, [pc, #92]	; (8004558 <MX_TIM4_Init+0xdc>)
 80044fc:	f006 fd32 	bl	800af64 <HAL_TIM_IC_Init>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004506:	f7ff f883 	bl	8003610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004512:	f107 0314 	add.w	r3, r7, #20
 8004516:	4619      	mov	r1, r3
 8004518:	480f      	ldr	r0, [pc, #60]	; (8004558 <MX_TIM4_Init+0xdc>)
 800451a:	f008 f8d7 	bl	800c6cc <HAL_TIMEx_MasterConfigSynchronization>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8004524:	f7ff f874 	bl	8003610 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004528:	2300      	movs	r3, #0
 800452a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800452c:	2301      	movs	r3, #1
 800452e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004538:	1d3b      	adds	r3, r7, #4
 800453a:	2200      	movs	r2, #0
 800453c:	4619      	mov	r1, r3
 800453e:	4806      	ldr	r0, [pc, #24]	; (8004558 <MX_TIM4_Init+0xdc>)
 8004540:	f007 f89f 	bl	800b682 <HAL_TIM_IC_ConfigChannel>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800454a:	f7ff f861 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800454e:	bf00      	nop
 8004550:	3730      	adds	r7, #48	; 0x30
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	2400066c 	.word	0x2400066c
 800455c:	40000800 	.word	0x40000800

08004560 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004566:	f107 0310 	add.w	r3, r7, #16
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	605a      	str	r2, [r3, #4]
 8004570:	609a      	str	r2, [r3, #8]
 8004572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004574:	1d3b      	adds	r3, r7, #4
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	605a      	str	r2, [r3, #4]
 800457c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800457e:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <MX_TIM5_Init+0x98>)
 8004580:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <MX_TIM5_Init+0x9c>)
 8004582:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64000-1;
 8004584:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <MX_TIM5_Init+0x98>)
 8004586:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800458a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <MX_TIM5_Init+0x98>)
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004592:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <MX_TIM5_Init+0x98>)
 8004594:	f04f 32ff 	mov.w	r2, #4294967295
 8004598:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800459a:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <MX_TIM5_Init+0x98>)
 800459c:	2200      	movs	r2, #0
 800459e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045a0:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <MX_TIM5_Init+0x98>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80045a6:	4814      	ldr	r0, [pc, #80]	; (80045f8 <MX_TIM5_Init+0x98>)
 80045a8:	f006 f940 	bl	800a82c <HAL_TIM_Base_Init>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80045b2:	f7ff f82d 	bl	8003610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80045bc:	f107 0310 	add.w	r3, r7, #16
 80045c0:	4619      	mov	r1, r3
 80045c2:	480d      	ldr	r0, [pc, #52]	; (80045f8 <MX_TIM5_Init+0x98>)
 80045c4:	f007 fa0e 	bl	800b9e4 <HAL_TIM_ConfigClockSource>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80045ce:	f7ff f81f 	bl	8003610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045d2:	2300      	movs	r3, #0
 80045d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80045da:	1d3b      	adds	r3, r7, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4806      	ldr	r0, [pc, #24]	; (80045f8 <MX_TIM5_Init+0x98>)
 80045e0:	f008 f874 	bl	800c6cc <HAL_TIMEx_MasterConfigSynchronization>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80045ea:	f7ff f811 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80045ee:	bf00      	nop
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	240006b8 	.word	0x240006b8
 80045fc:	40000c00 	.word	0x40000c00

08004600 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08c      	sub	sp, #48	; 0x30
 8004604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004606:	f107 0320 	add.w	r3, r7, #32
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]
 800461e:	60da      	str	r2, [r3, #12]
 8004620:	611a      	str	r2, [r3, #16]
 8004622:	615a      	str	r2, [r3, #20]
 8004624:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004626:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <MX_TIM12_Init+0xc0>)
 8004628:	4a26      	ldr	r2, [pc, #152]	; (80046c4 <MX_TIM12_Init+0xc4>)
 800462a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 500-1;
 800462c:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <MX_TIM12_Init+0xc0>)
 800462e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004632:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <MX_TIM12_Init+0xc0>)
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 40000;
 800463a:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <MX_TIM12_Init+0xc0>)
 800463c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004640:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004642:	4b1f      	ldr	r3, [pc, #124]	; (80046c0 <MX_TIM12_Init+0xc0>)
 8004644:	2200      	movs	r2, #0
 8004646:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004648:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <MX_TIM12_Init+0xc0>)
 800464a:	2200      	movs	r2, #0
 800464c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800464e:	481c      	ldr	r0, [pc, #112]	; (80046c0 <MX_TIM12_Init+0xc0>)
 8004650:	f006 f8ec 	bl	800a82c <HAL_TIM_Base_Init>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 800465a:	f7fe ffd9 	bl	8003610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800465e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004662:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004664:	f107 0320 	add.w	r3, r7, #32
 8004668:	4619      	mov	r1, r3
 800466a:	4815      	ldr	r0, [pc, #84]	; (80046c0 <MX_TIM12_Init+0xc0>)
 800466c:	f007 f9ba 	bl	800b9e4 <HAL_TIM_ConfigClockSource>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8004676:	f7fe ffcb 	bl	8003610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800467a:	4811      	ldr	r0, [pc, #68]	; (80046c0 <MX_TIM12_Init+0xc0>)
 800467c:	f006 fa6d 	bl	800ab5a <HAL_TIM_PWM_Init>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8004686:	f7fe ffc3 	bl	8003610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800468a:	2360      	movs	r3, #96	; 0x60
 800468c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 800468e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800469c:	1d3b      	adds	r3, r7, #4
 800469e:	2200      	movs	r2, #0
 80046a0:	4619      	mov	r1, r3
 80046a2:	4807      	ldr	r0, [pc, #28]	; (80046c0 <MX_TIM12_Init+0xc0>)
 80046a4:	f007 f88a 	bl	800b7bc <HAL_TIM_PWM_ConfigChannel>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 80046ae:	f7fe ffaf 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80046b2:	4803      	ldr	r0, [pc, #12]	; (80046c0 <MX_TIM12_Init+0xc0>)
 80046b4:	f000 fa44 	bl	8004b40 <HAL_TIM_MspPostInit>

}
 80046b8:	bf00      	nop
 80046ba:	3730      	adds	r7, #48	; 0x30
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	24000704 	.word	0x24000704
 80046c4:	40001800 	.word	0x40001800

080046c8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	611a      	str	r2, [r3, #16]
 80046dc:	615a      	str	r2, [r3, #20]
 80046de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80046e0:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <MX_TIM13_Init+0x98>)
 80046e2:	4a20      	ldr	r2, [pc, #128]	; (8004764 <MX_TIM13_Init+0x9c>)
 80046e4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 500-1;
 80046e6:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <MX_TIM13_Init+0x98>)
 80046e8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80046ec:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ee:	4b1c      	ldr	r3, [pc, #112]	; (8004760 <MX_TIM13_Init+0x98>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 40000;
 80046f4:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <MX_TIM13_Init+0x98>)
 80046f6:	f649 4240 	movw	r2, #40000	; 0x9c40
 80046fa:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046fc:	4b18      	ldr	r3, [pc, #96]	; (8004760 <MX_TIM13_Init+0x98>)
 80046fe:	2200      	movs	r2, #0
 8004700:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004702:	4b17      	ldr	r3, [pc, #92]	; (8004760 <MX_TIM13_Init+0x98>)
 8004704:	2200      	movs	r2, #0
 8004706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004708:	4815      	ldr	r0, [pc, #84]	; (8004760 <MX_TIM13_Init+0x98>)
 800470a:	f006 f88f 	bl	800a82c <HAL_TIM_Base_Init>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8004714:	f7fe ff7c 	bl	8003610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004718:	4811      	ldr	r0, [pc, #68]	; (8004760 <MX_TIM13_Init+0x98>)
 800471a:	f006 fa1e 	bl	800ab5a <HAL_TIM_PWM_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8004724:	f7fe ff74 	bl	8003610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004728:	2360      	movs	r3, #96	; 0x60
 800472a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 800472c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004730:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800473a:	1d3b      	adds	r3, r7, #4
 800473c:	2200      	movs	r2, #0
 800473e:	4619      	mov	r1, r3
 8004740:	4807      	ldr	r0, [pc, #28]	; (8004760 <MX_TIM13_Init+0x98>)
 8004742:	f007 f83b 	bl	800b7bc <HAL_TIM_PWM_ConfigChannel>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 800474c:	f7fe ff60 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004750:	4803      	ldr	r0, [pc, #12]	; (8004760 <MX_TIM13_Init+0x98>)
 8004752:	f000 f9f5 	bl	8004b40 <HAL_TIM_MspPostInit>

}
 8004756:	bf00      	nop
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	24000750 	.word	0x24000750
 8004764:	40001c00 	.word	0x40001c00

08004768 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800476e:	1d3b      	adds	r3, r7, #4
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	611a      	str	r2, [r3, #16]
 800477c:	615a      	str	r2, [r3, #20]
 800477e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004780:	4b1f      	ldr	r3, [pc, #124]	; (8004800 <MX_TIM14_Init+0x98>)
 8004782:	4a20      	ldr	r2, [pc, #128]	; (8004804 <MX_TIM14_Init+0x9c>)
 8004784:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 500-1;
 8004786:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <MX_TIM14_Init+0x98>)
 8004788:	f240 12f3 	movw	r2, #499	; 0x1f3
 800478c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <MX_TIM14_Init+0x98>)
 8004790:	2200      	movs	r2, #0
 8004792:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 40000;
 8004794:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <MX_TIM14_Init+0x98>)
 8004796:	f649 4240 	movw	r2, #40000	; 0x9c40
 800479a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800479c:	4b18      	ldr	r3, [pc, #96]	; (8004800 <MX_TIM14_Init+0x98>)
 800479e:	2200      	movs	r2, #0
 80047a0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047a2:	4b17      	ldr	r3, [pc, #92]	; (8004800 <MX_TIM14_Init+0x98>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80047a8:	4815      	ldr	r0, [pc, #84]	; (8004800 <MX_TIM14_Init+0x98>)
 80047aa:	f006 f83f 	bl	800a82c <HAL_TIM_Base_Init>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 80047b4:	f7fe ff2c 	bl	8003610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80047b8:	4811      	ldr	r0, [pc, #68]	; (8004800 <MX_TIM14_Init+0x98>)
 80047ba:	f006 f9ce 	bl	800ab5a <HAL_TIM_PWM_Init>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80047c4:	f7fe ff24 	bl	8003610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047c8:	2360      	movs	r3, #96	; 0x60
 80047ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 80047cc:	f644 6320 	movw	r3, #20000	; 0x4e20
 80047d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047da:	1d3b      	adds	r3, r7, #4
 80047dc:	2200      	movs	r2, #0
 80047de:	4619      	mov	r1, r3
 80047e0:	4807      	ldr	r0, [pc, #28]	; (8004800 <MX_TIM14_Init+0x98>)
 80047e2:	f006 ffeb 	bl	800b7bc <HAL_TIM_PWM_ConfigChannel>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80047ec:	f7fe ff10 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80047f0:	4803      	ldr	r0, [pc, #12]	; (8004800 <MX_TIM14_Init+0x98>)
 80047f2:	f000 f9a5 	bl	8004b40 <HAL_TIM_MspPostInit>

}
 80047f6:	bf00      	nop
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2400079c 	.word	0x2400079c
 8004804:	40002000 	.word	0x40002000

08004808 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800480e:	f107 0310 	add.w	r3, r7, #16
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	609a      	str	r2, [r3, #8]
 800481a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800481c:	1d3b      	adds	r3, r7, #4
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004826:	4b1f      	ldr	r3, [pc, #124]	; (80048a4 <MX_TIM15_Init+0x9c>)
 8004828:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <MX_TIM15_Init+0xa0>)
 800482a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 800482c:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <MX_TIM15_Init+0x9c>)
 800482e:	2201      	movs	r2, #1
 8004830:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <MX_TIM15_Init+0x9c>)
 8004834:	2200      	movs	r2, #0
 8004836:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8004838:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <MX_TIM15_Init+0x9c>)
 800483a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800483e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004840:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <MX_TIM15_Init+0x9c>)
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004846:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <MX_TIM15_Init+0x9c>)
 8004848:	2200      	movs	r2, #0
 800484a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800484c:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <MX_TIM15_Init+0x9c>)
 800484e:	2200      	movs	r2, #0
 8004850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004852:	4814      	ldr	r0, [pc, #80]	; (80048a4 <MX_TIM15_Init+0x9c>)
 8004854:	f005 ffea 	bl	800a82c <HAL_TIM_Base_Init>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800485e:	f7fe fed7 	bl	8003610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004868:	f107 0310 	add.w	r3, r7, #16
 800486c:	4619      	mov	r1, r3
 800486e:	480d      	ldr	r0, [pc, #52]	; (80048a4 <MX_TIM15_Init+0x9c>)
 8004870:	f007 f8b8 	bl	800b9e4 <HAL_TIM_ConfigClockSource>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800487a:	f7fe fec9 	bl	8003610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800487e:	2300      	movs	r3, #0
 8004880:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004886:	1d3b      	adds	r3, r7, #4
 8004888:	4619      	mov	r1, r3
 800488a:	4806      	ldr	r0, [pc, #24]	; (80048a4 <MX_TIM15_Init+0x9c>)
 800488c:	f007 ff1e 	bl	800c6cc <HAL_TIMEx_MasterConfigSynchronization>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8004896:	f7fe febb 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800489a:	bf00      	nop
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	240007e8 	.word	0x240007e8
 80048a8:	40014000 	.word	0x40014000

080048ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b092      	sub	sp, #72	; 0x48
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048cc:	d136      	bne.n	800493c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048ce:	4b92      	ldr	r3, [pc, #584]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80048d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048d4:	4a90      	ldr	r2, [pc, #576]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048de:	4b8e      	ldr	r3, [pc, #568]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80048e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	633b      	str	r3, [r7, #48]	; 0x30
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ec:	4b8a      	ldr	r3, [pc, #552]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80048ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048f2:	4a89      	ldr	r2, [pc, #548]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048fc:	4b86      	ldr	r3, [pc, #536]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80048fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = E_CountPap1_Pin;
 800490a:	2320      	movs	r3, #32
 800490c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490e:	2302      	movs	r3, #2
 8004910:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004912:	2302      	movs	r3, #2
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004916:	2300      	movs	r3, #0
 8004918:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800491a:	2301      	movs	r3, #1
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPap1_GPIO_Port, &GPIO_InitStruct);
 800491e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004922:	4619      	mov	r1, r3
 8004924:	487d      	ldr	r0, [pc, #500]	; (8004b1c <HAL_TIM_Base_MspInit+0x270>)
 8004926:	f003 fa29 	bl	8007d7c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2101      	movs	r1, #1
 800492e:	201c      	movs	r0, #28
 8004930:	f002 fc7d 	bl	800722e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004934:	201c      	movs	r0, #28
 8004936:	f002 fc94 	bl	8007262 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800493a:	e0e8      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a77      	ldr	r2, [pc, #476]	; (8004b20 <HAL_TIM_Base_MspInit+0x274>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d136      	bne.n	80049b4 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004946:	4b74      	ldr	r3, [pc, #464]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800494c:	4a72      	ldr	r2, [pc, #456]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 800494e:	f043 0302 	orr.w	r3, r3, #2
 8004952:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004956:	4b70      	ldr	r3, [pc, #448]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	62bb      	str	r3, [r7, #40]	; 0x28
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004964:	4b6c      	ldr	r3, [pc, #432]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800496a:	4a6b      	ldr	r2, [pc, #428]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004974:	4b68      	ldr	r3, [pc, #416]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = E_CountPaP2_Pin;
 8004982:	2340      	movs	r3, #64	; 0x40
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004986:	2302      	movs	r3, #2
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800498a:	2302      	movs	r3, #2
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498e:	2300      	movs	r3, #0
 8004990:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004992:	2302      	movs	r3, #2
 8004994:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP2_GPIO_Port, &GPIO_InitStruct);
 8004996:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800499a:	4619      	mov	r1, r3
 800499c:	485f      	ldr	r0, [pc, #380]	; (8004b1c <HAL_TIM_Base_MspInit+0x270>)
 800499e:	f003 f9ed 	bl	8007d7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80049a2:	2200      	movs	r2, #0
 80049a4:	2101      	movs	r1, #1
 80049a6:	201d      	movs	r0, #29
 80049a8:	f002 fc41 	bl	800722e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80049ac:	201d      	movs	r0, #29
 80049ae:	f002 fc58 	bl	8007262 <HAL_NVIC_EnableIRQ>
}
 80049b2:	e0ac      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a5a      	ldr	r2, [pc, #360]	; (8004b24 <HAL_TIM_Base_MspInit+0x278>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d137      	bne.n	8004a2e <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80049be:	4b56      	ldr	r3, [pc, #344]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80049c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049c4:	4a54      	ldr	r2, [pc, #336]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80049c6:	f043 0304 	orr.w	r3, r3, #4
 80049ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049ce:	4b52      	ldr	r3, [pc, #328]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80049d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	623b      	str	r3, [r7, #32]
 80049da:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049dc:	4b4e      	ldr	r3, [pc, #312]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80049de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049e2:	4a4d      	ldr	r2, [pc, #308]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80049e4:	f043 0308 	orr.w	r3, r3, #8
 80049e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049ec:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 80049ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = E_CountPaP3_Pin;
 80049fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a00:	2302      	movs	r3, #2
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a04:	2302      	movs	r3, #2
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP3_GPIO_Port, &GPIO_InitStruct);
 8004a10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a14:	4619      	mov	r1, r3
 8004a16:	4844      	ldr	r0, [pc, #272]	; (8004b28 <HAL_TIM_Base_MspInit+0x27c>)
 8004a18:	f003 f9b0 	bl	8007d7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2101      	movs	r1, #1
 8004a20:	201e      	movs	r0, #30
 8004a22:	f002 fc04 	bl	800722e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004a26:	201e      	movs	r0, #30
 8004a28:	f002 fc1b 	bl	8007262 <HAL_NVIC_EnableIRQ>
}
 8004a2c:	e06f      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a3e      	ldr	r2, [pc, #248]	; (8004b2c <HAL_TIM_Base_MspInit+0x280>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d10f      	bne.n	8004a58 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004a38:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004a3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a3e:	4a36      	ldr	r2, [pc, #216]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004a40:	f043 0308 	orr.w	r3, r3, #8
 8004a44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a48:	4b33      	ldr	r3, [pc, #204]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	69bb      	ldr	r3, [r7, #24]
}
 8004a56:	e05a      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a34      	ldr	r2, [pc, #208]	; (8004b30 <HAL_TIM_Base_MspInit+0x284>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d10f      	bne.n	8004a82 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a68:	4a2b      	ldr	r2, [pc, #172]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a72:	4b29      	ldr	r3, [pc, #164]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	697b      	ldr	r3, [r7, #20]
}
 8004a80:	e045      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2b      	ldr	r2, [pc, #172]	; (8004b34 <HAL_TIM_Base_MspInit+0x288>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d10f      	bne.n	8004aac <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004a8c:	4b22      	ldr	r3, [pc, #136]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a92:	4a21      	ldr	r2, [pc, #132]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a9c:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	693b      	ldr	r3, [r7, #16]
}
 8004aaa:	e030      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a21      	ldr	r2, [pc, #132]	; (8004b38 <HAL_TIM_Base_MspInit+0x28c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10f      	bne.n	8004ad6 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004ab6:	4b18      	ldr	r3, [pc, #96]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004abc:	4a16      	ldr	r2, [pc, #88]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
}
 8004ad4:	e01b      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <HAL_TIM_Base_MspInit+0x290>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d116      	bne.n	8004b0e <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004ae0:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ae6:	4a0c      	ldr	r2, [pc, #48]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <HAL_TIM_Base_MspInit+0x26c>)
 8004af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8004afe:	2200      	movs	r2, #0
 8004b00:	2101      	movs	r1, #1
 8004b02:	2074      	movs	r0, #116	; 0x74
 8004b04:	f002 fb93 	bl	800722e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004b08:	2074      	movs	r0, #116	; 0x74
 8004b0a:	f002 fbaa 	bl	8007262 <HAL_NVIC_EnableIRQ>
}
 8004b0e:	bf00      	nop
 8004b10:	3748      	adds	r7, #72	; 0x48
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	58024400 	.word	0x58024400
 8004b1c:	58020000 	.word	0x58020000
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	58020c00 	.word	0x58020c00
 8004b2c:	40000c00 	.word	0x40000c00
 8004b30:	40001800 	.word	0x40001800
 8004b34:	40001c00 	.word	0x40001c00
 8004b38:	40002000 	.word	0x40002000
 8004b3c:	40014000 	.word	0x40014000

08004b40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b48:	f107 0314 	add.w	r3, r7, #20
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	60da      	str	r2, [r3, #12]
 8004b56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a39      	ldr	r2, [pc, #228]	; (8004c44 <HAL_TIM_MspPostInit+0x104>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d120      	bne.n	8004ba4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b62:	4b39      	ldr	r3, [pc, #228]	; (8004c48 <HAL_TIM_MspPostInit+0x108>)
 8004b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b68:	4a37      	ldr	r2, [pc, #220]	; (8004c48 <HAL_TIM_MspPostInit+0x108>)
 8004b6a:	f043 0302 	orr.w	r3, r3, #2
 8004b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b72:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <HAL_TIM_MspPostInit+0x108>)
 8004b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8004b80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b86:	2302      	movs	r3, #2
 8004b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004b92:	2302      	movs	r3, #2
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8004b96:	f107 0314 	add.w	r3, r7, #20
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	482b      	ldr	r0, [pc, #172]	; (8004c4c <HAL_TIM_MspPostInit+0x10c>)
 8004b9e:	f003 f8ed 	bl	8007d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004ba2:	e04a      	b.n	8004c3a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a29      	ldr	r2, [pc, #164]	; (8004c50 <HAL_TIM_MspPostInit+0x110>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d120      	bne.n	8004bf0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bae:	4b26      	ldr	r3, [pc, #152]	; (8004c48 <HAL_TIM_MspPostInit+0x108>)
 8004bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bb4:	4a24      	ldr	r2, [pc, #144]	; (8004c48 <HAL_TIM_MspPostInit+0x108>)
 8004bb6:	f043 0320 	orr.w	r3, r3, #32
 8004bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bbe:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <HAL_TIM_MspPostInit+0x108>)
 8004bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8004bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004bde:	2309      	movs	r3, #9
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8004be2:	f107 0314 	add.w	r3, r7, #20
 8004be6:	4619      	mov	r1, r3
 8004be8:	481a      	ldr	r0, [pc, #104]	; (8004c54 <HAL_TIM_MspPostInit+0x114>)
 8004bea:	f003 f8c7 	bl	8007d7c <HAL_GPIO_Init>
}
 8004bee:	e024      	b.n	8004c3a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <HAL_TIM_MspPostInit+0x118>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d11f      	bne.n	8004c3a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bfa:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <HAL_TIM_MspPostInit+0x108>)
 8004bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c00:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <HAL_TIM_MspPostInit+0x108>)
 8004c02:	f043 0320 	orr.w	r3, r3, #32
 8004c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_TIM_MspPostInit+0x108>)
 8004c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8004c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004c22:	2302      	movs	r3, #2
 8004c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c26:	2300      	movs	r3, #0
 8004c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004c2a:	2309      	movs	r3, #9
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 8004c2e:	f107 0314 	add.w	r3, r7, #20
 8004c32:	4619      	mov	r1, r3
 8004c34:	4807      	ldr	r0, [pc, #28]	; (8004c54 <HAL_TIM_MspPostInit+0x114>)
 8004c36:	f003 f8a1 	bl	8007d7c <HAL_GPIO_Init>
}
 8004c3a:	bf00      	nop
 8004c3c:	3728      	adds	r7, #40	; 0x28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40001800 	.word	0x40001800
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	58020400 	.word	0x58020400
 8004c50:	40001c00 	.word	0x40001c00
 8004c54:	58021400 	.word	0x58021400
 8004c58:	40002000 	.word	0x40002000
 8004c5c:	00000000 	.word	0x00000000

08004c60 <inicializarTrayectoria>:

double DVHip, Aaux1, ViHip2, XiHip2, Aaux, XiHip3, ViHip4, XiHip4;

//(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)

void inicializarTrayectoria(double XiHip1, double XfHip4, double V0Hip, double Vf, double Vmax, double Amax, double Jerk) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	ed2d 8b04 	vpush	{d8-d9}
 8004c66:	b090      	sub	sp, #64	; 0x40
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8004c6e:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8004c72:	ed87 2b08 	vstr	d2, [r7, #32]
 8004c76:	ed87 3b06 	vstr	d3, [r7, #24]
 8004c7a:	ed87 4b04 	vstr	d4, [r7, #16]
 8004c7e:	ed87 5b02 	vstr	d5, [r7, #8]
 8004c82:	ed87 6b00 	vstr	d6, [r7]

	if (XfHip4 < XiHip1) {
 8004c86:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004c8a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004c8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c96:	d519      	bpl.n	8004ccc <inicializarTrayectoria+0x6c>
		Ai = -Amax;
 8004c98:	ed97 7b02 	vldr	d7, [r7, #8]
 8004c9c:	eeb1 7b47 	vneg.f64	d7, d7
 8004ca0:	4b7e      	ldr	r3, [pc, #504]	; (8004e9c <inicializarTrayectoria+0x23c>)
 8004ca2:	ed83 7b00 	vstr	d7, [r3]
		Af = +Amax;
 8004ca6:	497e      	ldr	r1, [pc, #504]	; (8004ea0 <inicializarTrayectoria+0x240>)
 8004ca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cac:	e9c1 2300 	strd	r2, r3, [r1]
		Vm = -Vmax;
 8004cb0:	ed97 7b04 	vldr	d7, [r7, #16]
 8004cb4:	eeb1 7b47 	vneg.f64	d7, d7
 8004cb8:	4b7a      	ldr	r3, [pc, #488]	; (8004ea4 <inicializarTrayectoria+0x244>)
 8004cba:	ed83 7b00 	vstr	d7, [r3]
		Jerk = -Jerk;
 8004cbe:	ed97 7b00 	vldr	d7, [r7]
 8004cc2:	eeb1 7b47 	vneg.f64	d7, d7
 8004cc6:	ed87 7b00 	vstr	d7, [r7]
 8004cca:	e019      	b.n	8004d00 <inicializarTrayectoria+0xa0>
	} else if (XfHip4 > XiHip1) {
 8004ccc:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004cd0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004cd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cdc:	dd10      	ble.n	8004d00 <inicializarTrayectoria+0xa0>
		Ai = Amax;
 8004cde:	496f      	ldr	r1, [pc, #444]	; (8004e9c <inicializarTrayectoria+0x23c>)
 8004ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ce4:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8004ce8:	ed97 7b02 	vldr	d7, [r7, #8]
 8004cec:	eeb1 7b47 	vneg.f64	d7, d7
 8004cf0:	4b6b      	ldr	r3, [pc, #428]	; (8004ea0 <inicializarTrayectoria+0x240>)
 8004cf2:	ed83 7b00 	vstr	d7, [r3]
		Vm = Vmax;
 8004cf6:	496b      	ldr	r1, [pc, #428]	; (8004ea4 <inicializarTrayectoria+0x244>)
 8004cf8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cfc:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (V0Hip > Vmax) {
 8004d00:	ed97 6b08 	vldr	d6, [r7, #32]
 8004d04:	ed97 7b04 	vldr	d7, [r7, #16]
 8004d08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d10:	dd0b      	ble.n	8004d2a <inicializarTrayectoria+0xca>
		Ai = -Amax;
 8004d12:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d16:	eeb1 7b47 	vneg.f64	d7, d7
 8004d1a:	4b60      	ldr	r3, [pc, #384]	; (8004e9c <inicializarTrayectoria+0x23c>)
 8004d1c:	ed83 7b00 	vstr	d7, [r3]
		Af = Amax;
 8004d20:	495f      	ldr	r1, [pc, #380]	; (8004ea0 <inicializarTrayectoria+0x240>)
 8004d22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d26:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (Vf > Vmax) {
 8004d2a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004d2e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004d32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3a:	dd0b      	ble.n	8004d54 <inicializarTrayectoria+0xf4>
		Ai = Amax;
 8004d3c:	4957      	ldr	r1, [pc, #348]	; (8004e9c <inicializarTrayectoria+0x23c>)
 8004d3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d42:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8004d46:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d4a:	eeb1 7b47 	vneg.f64	d7, d7
 8004d4e:	4b54      	ldr	r3, [pc, #336]	; (8004ea0 <inicializarTrayectoria+0x240>)
 8004d50:	ed83 7b00 	vstr	d7, [r3]
	}

	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004d5a:	f000 bd05 	b.w	8005768 <inicializarTrayectoria+0xb08>
		DVHip = (Ai * Ai) / (2 * Jerk) * 2;
 8004d5e:	4b4f      	ldr	r3, [pc, #316]	; (8004e9c <inicializarTrayectoria+0x23c>)
 8004d60:	ed93 6b00 	vldr	d6, [r3]
 8004d64:	4b4d      	ldr	r3, [pc, #308]	; (8004e9c <inicializarTrayectoria+0x23c>)
 8004d66:	ed93 7b00 	vldr	d7, [r3]
 8004d6a:	ee26 5b07 	vmul.f64	d5, d6, d7
 8004d6e:	ed97 7b00 	vldr	d7, [r7]
 8004d72:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004d76:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004d7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d7e:	4b4a      	ldr	r3, [pc, #296]	; (8004ea8 <inicializarTrayectoria+0x248>)
 8004d80:	ed83 7b00 	vstr	d7, [r3]

		if (fabs(DVHip) > fabs(Vm - V0Hip)) { // Para cuando la velocidad inicial es muy cercana a la maxima
 8004d84:	4b48      	ldr	r3, [pc, #288]	; (8004ea8 <inicializarTrayectoria+0x248>)
 8004d86:	ed93 7b00 	vldr	d7, [r3]
 8004d8a:	eeb0 6bc7 	vabs.f64	d6, d7
 8004d8e:	4b45      	ldr	r3, [pc, #276]	; (8004ea4 <inicializarTrayectoria+0x244>)
 8004d90:	ed93 5b00 	vldr	d5, [r3]
 8004d94:	ed97 7b08 	vldr	d7, [r7, #32]
 8004d98:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004d9c:	eeb0 7bc7 	vabs.f64	d7, d7
 8004da0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da8:	dd35      	ble.n	8004e16 <inicializarTrayectoria+0x1b6>
			if (fabs(Vm - V0Hip) != 0) {
 8004daa:	4b3e      	ldr	r3, [pc, #248]	; (8004ea4 <inicializarTrayectoria+0x244>)
 8004dac:	ed93 6b00 	vldr	d6, [r3]
 8004db0:	ed97 7b08 	vldr	d7, [r7, #32]
 8004db4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004db8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc0:	d029      	beq.n	8004e16 <inicializarTrayectoria+0x1b6>
				Aaux1 = ((Ai) / fabs(Ai)) * sqrt(fabs(Vm - V0Hip) * fabs(Jerk));
 8004dc2:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <inicializarTrayectoria+0x23c>)
 8004dc4:	ed93 6b00 	vldr	d6, [r3]
 8004dc8:	4b34      	ldr	r3, [pc, #208]	; (8004e9c <inicializarTrayectoria+0x23c>)
 8004dca:	ed93 7b00 	vldr	d7, [r3]
 8004dce:	eeb0 7bc7 	vabs.f64	d7, d7
 8004dd2:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8004dd6:	4b33      	ldr	r3, [pc, #204]	; (8004ea4 <inicializarTrayectoria+0x244>)
 8004dd8:	ed93 6b00 	vldr	d6, [r3]
 8004ddc:	ed97 7b08 	vldr	d7, [r7, #32]
 8004de0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004de4:	eeb0 6bc7 	vabs.f64	d6, d7
 8004de8:	ed97 7b00 	vldr	d7, [r7]
 8004dec:	eeb0 7bc7 	vabs.f64	d7, d7
 8004df0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004df4:	eeb0 0b47 	vmov.f64	d0, d7
 8004df8:	f00d f9be 	bl	8012178 <sqrt>
 8004dfc:	eeb0 7b40 	vmov.f64	d7, d0
 8004e00:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004e04:	4b29      	ldr	r3, [pc, #164]	; (8004eac <inicializarTrayectoria+0x24c>)
 8004e06:	ed83 7b00 	vstr	d7, [r3]
				Ai = Aaux1;
 8004e0a:	4b28      	ldr	r3, [pc, #160]	; (8004eac <inicializarTrayectoria+0x24c>)
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	4922      	ldr	r1, [pc, #136]	; (8004e9c <inicializarTrayectoria+0x23c>)
 8004e12:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}

		if (fabs(Vm - V0Hip) == 0) { // Para cuando la velocidad inicial es igual a la maxima
 8004e16:	4b23      	ldr	r3, [pc, #140]	; (8004ea4 <inicializarTrayectoria+0x244>)
 8004e18:	ed93 6b00 	vldr	d6, [r3]
 8004e1c:	ed97 7b08 	vldr	d7, [r7, #32]
 8004e20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004e24:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2c:	d150      	bne.n	8004ed0 <inicializarTrayectoria+0x270>
			a3Hip1 = 0;
 8004e2e:	4920      	ldr	r1, [pc, #128]	; (8004eb0 <inicializarTrayectoria+0x250>)
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	e9c1 2300 	strd	r2, r3, [r1]
			a2Hip1 = 0;
 8004e3c:	491d      	ldr	r1, [pc, #116]	; (8004eb4 <inicializarTrayectoria+0x254>)
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9c1 2300 	strd	r2, r3, [r1]
			a1Hip1 = 0;
 8004e4a:	491b      	ldr	r1, [pc, #108]	; (8004eb8 <inicializarTrayectoria+0x258>)
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip1 = 0;
 8004e58:	4918      	ldr	r1, [pc, #96]	; (8004ebc <inicializarTrayectoria+0x25c>)
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = 0;
 8004e66:	4916      	ldr	r1, [pc, #88]	; (8004ec0 <inicializarTrayectoria+0x260>)
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip2 = 0;
 8004e74:	4913      	ldr	r1, [pc, #76]	; (8004ec4 <inicializarTrayectoria+0x264>)
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip2 = 0;
 8004e82:	4911      	ldr	r1, [pc, #68]	; (8004ec8 <inicializarTrayectoria+0x268>)
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = XiHip1;
 8004e90:	490e      	ldr	r1, [pc, #56]	; (8004ecc <inicializarTrayectoria+0x26c>)
 8004e92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e96:	e9c1 2300 	strd	r2, r3, [r1]
 8004e9a:	e195      	b.n	80051c8 <inicializarTrayectoria+0x568>
 8004e9c:	24000a90 	.word	0x24000a90
 8004ea0:	24000a98 	.word	0x24000a98
 8004ea4:	24000b40 	.word	0x24000b40
 8004ea8:	24000b98 	.word	0x24000b98
 8004eac:	24000ba0 	.word	0x24000ba0
 8004eb0:	24000ab8 	.word	0x24000ab8
 8004eb4:	24000ab0 	.word	0x24000ab0
 8004eb8:	24000aa8 	.word	0x24000aa8
 8004ebc:	24000aa0 	.word	0x24000aa0
 8004ec0:	24000b58 	.word	0x24000b58
 8004ec4:	24000b60 	.word	0x24000b60
 8004ec8:	24000b68 	.word	0x24000b68
 8004ecc:	24000b28 	.word	0x24000b28
		} else {
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 1
			a3Hip1 = (Jerk / 6);
 8004ed0:	ed97 6b00 	vldr	d6, [r7]
 8004ed4:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004ed8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004edc:	4bcf      	ldr	r3, [pc, #828]	; (800521c <inicializarTrayectoria+0x5bc>)
 8004ede:	ed83 7b00 	vstr	d7, [r3]
			a2Hip1 = 0;
 8004ee2:	49cf      	ldr	r1, [pc, #828]	; (8005220 <inicializarTrayectoria+0x5c0>)
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = ((Ai / (6 * a3Hip1)));
 8004ef0:	4bcc      	ldr	r3, [pc, #816]	; (8005224 <inicializarTrayectoria+0x5c4>)
 8004ef2:	ed93 5b00 	vldr	d5, [r3]
 8004ef6:	4bc9      	ldr	r3, [pc, #804]	; (800521c <inicializarTrayectoria+0x5bc>)
 8004ef8:	ed93 7b00 	vldr	d7, [r3]
 8004efc:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004f00:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004f04:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004f08:	4bc7      	ldr	r3, [pc, #796]	; (8005228 <inicializarTrayectoria+0x5c8>)
 8004f0a:	ed83 7b00 	vstr	d7, [r3]
			a1Hip1 = V0Hip;
 8004f0e:	49c7      	ldr	r1, [pc, #796]	; (800522c <inicializarTrayectoria+0x5cc>)
 8004f10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f14:	e9c1 2300 	strd	r2, r3, [r1]
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8004f18:	4bc1      	ldr	r3, [pc, #772]	; (8005220 <inicializarTrayectoria+0x5c0>)
 8004f1a:	ed93 7b00 	vldr	d7, [r3]
 8004f1e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004f22:	4bc1      	ldr	r3, [pc, #772]	; (8005228 <inicializarTrayectoria+0x5c8>)
 8004f24:	ed93 7b00 	vldr	d7, [r3]
 8004f28:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004f2c:	4bbf      	ldr	r3, [pc, #764]	; (800522c <inicializarTrayectoria+0x5cc>)
 8004f2e:	ed93 7b00 	vldr	d7, [r3]
 8004f32:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 3 * a3Hip1 * pow(tfHip1, 2);
 8004f36:	4bb9      	ldr	r3, [pc, #740]	; (800521c <inicializarTrayectoria+0x5bc>)
 8004f38:	ed93 7b00 	vldr	d7, [r3]
 8004f3c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004f40:	ee27 9b06 	vmul.f64	d9, d7, d6
 8004f44:	4bb8      	ldr	r3, [pc, #736]	; (8005228 <inicializarTrayectoria+0x5c8>)
 8004f46:	ed93 7b00 	vldr	d7, [r3]
 8004f4a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f4e:	eeb0 0b47 	vmov.f64	d0, d7
 8004f52:	f00c fe91 	bl	8011c78 <pow>
 8004f56:	eeb0 7b40 	vmov.f64	d7, d0
 8004f5a:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004f5e:	ee38 7b07 	vadd.f64	d7, d8, d7
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8004f62:	4bb3      	ldr	r3, [pc, #716]	; (8005230 <inicializarTrayectoria+0x5d0>)
 8004f64:	ed83 7b00 	vstr	d7, [r3]
			a0Hip1 = XiHip1;
 8004f68:	49b2      	ldr	r1, [pc, #712]	; (8005234 <inicializarTrayectoria+0x5d4>)
 8004f6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f6e:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8004f72:	4bae      	ldr	r3, [pc, #696]	; (800522c <inicializarTrayectoria+0x5cc>)
 8004f74:	ed93 6b00 	vldr	d6, [r3]
 8004f78:	4bab      	ldr	r3, [pc, #684]	; (8005228 <inicializarTrayectoria+0x5c8>)
 8004f7a:	ed93 7b00 	vldr	d7, [r3]
 8004f7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004f82:	4bac      	ldr	r3, [pc, #688]	; (8005234 <inicializarTrayectoria+0x5d4>)
 8004f84:	ed93 7b00 	vldr	d7, [r3]
 8004f88:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004f8c:	4ba6      	ldr	r3, [pc, #664]	; (8005228 <inicializarTrayectoria+0x5c8>)
 8004f8e:	ed93 7b00 	vldr	d7, [r3]
 8004f92:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f96:	eeb0 0b47 	vmov.f64	d0, d7
 8004f9a:	f00c fe6d 	bl	8011c78 <pow>
 8004f9e:	eeb0 6b40 	vmov.f64	d6, d0
 8004fa2:	4b9f      	ldr	r3, [pc, #636]	; (8005220 <inicializarTrayectoria+0x5c0>)
 8004fa4:	ed93 7b00 	vldr	d7, [r3]
 8004fa8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004fac:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip1 * pow(tfHip1, 3);
 8004fb0:	4b9d      	ldr	r3, [pc, #628]	; (8005228 <inicializarTrayectoria+0x5c8>)
 8004fb2:	ed93 7b00 	vldr	d7, [r3]
 8004fb6:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004fba:	eeb0 0b47 	vmov.f64	d0, d7
 8004fbe:	f00c fe5b 	bl	8011c78 <pow>
 8004fc2:	eeb0 6b40 	vmov.f64	d6, d0
 8004fc6:	4b95      	ldr	r3, [pc, #596]	; (800521c <inicializarTrayectoria+0x5bc>)
 8004fc8:	ed93 7b00 	vldr	d7, [r3]
 8004fcc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004fd0:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8004fd4:	4b98      	ldr	r3, [pc, #608]	; (8005238 <inicializarTrayectoria+0x5d8>)
 8004fd6:	ed83 7b00 	vstr	d7, [r3]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 1
			a3Hip2 = (-Jerk / 6);
 8004fda:	ed97 7b00 	vldr	d7, [r7]
 8004fde:	eeb1 6b47 	vneg.f64	d6, d7
 8004fe2:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004fe6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004fea:	4b94      	ldr	r3, [pc, #592]	; (800523c <inicializarTrayectoria+0x5dc>)
 8004fec:	ed83 7b00 	vstr	d7, [r3]
			a2Hip2 = Ai / 2;
 8004ff0:	4b8c      	ldr	r3, [pc, #560]	; (8005224 <inicializarTrayectoria+0x5c4>)
 8004ff2:	ed93 6b00 	vldr	d6, [r3]
 8004ff6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004ffa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ffe:	4b90      	ldr	r3, [pc, #576]	; (8005240 <inicializarTrayectoria+0x5e0>)
 8005000:	ed83 7b00 	vstr	d7, [r3]
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8005004:	4b8f      	ldr	r3, [pc, #572]	; (8005244 <inicializarTrayectoria+0x5e4>)
 8005006:	ed93 6b00 	vldr	d6, [r3]
 800500a:	4b8d      	ldr	r3, [pc, #564]	; (8005240 <inicializarTrayectoria+0x5e0>)
 800500c:	ed93 7b00 	vldr	d7, [r3]
 8005010:	ee37 5b07 	vadd.f64	d5, d7, d7
 8005014:	4b83      	ldr	r3, [pc, #524]	; (8005224 <inicializarTrayectoria+0x5c4>)
 8005016:	ed93 3b00 	vldr	d3, [r3]
 800501a:	ed97 4b00 	vldr	d4, [r7]
 800501e:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005022:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005026:	ee36 6b47 	vsub.f64	d6, d6, d7
					- 3 * a3Hip2 * (Ai / Jerk) * (Ai / Jerk);
 800502a:	4b84      	ldr	r3, [pc, #528]	; (800523c <inicializarTrayectoria+0x5dc>)
 800502c:	ed93 7b00 	vldr	d7, [r3]
 8005030:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8005034:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005038:	4b7a      	ldr	r3, [pc, #488]	; (8005224 <inicializarTrayectoria+0x5c4>)
 800503a:	ed93 3b00 	vldr	d3, [r3]
 800503e:	ed97 4b00 	vldr	d4, [r7]
 8005042:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005046:	ee25 5b07 	vmul.f64	d5, d5, d7
 800504a:	4b76      	ldr	r3, [pc, #472]	; (8005224 <inicializarTrayectoria+0x5c4>)
 800504c:	ed93 3b00 	vldr	d3, [r3]
 8005050:	ed97 4b00 	vldr	d4, [r7]
 8005054:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005058:	ee25 7b07 	vmul.f64	d7, d5, d7
 800505c:	ee36 7b47 	vsub.f64	d7, d6, d7
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8005060:	4b79      	ldr	r3, [pc, #484]	; (8005248 <inicializarTrayectoria+0x5e8>)
 8005062:	ed83 7b00 	vstr	d7, [r3]
			tiHip2 = ((ViHip2 - VfHip1) / Ai) + tfHip1;
 8005066:	4b78      	ldr	r3, [pc, #480]	; (8005248 <inicializarTrayectoria+0x5e8>)
 8005068:	ed93 6b00 	vldr	d6, [r3]
 800506c:	4b70      	ldr	r3, [pc, #448]	; (8005230 <inicializarTrayectoria+0x5d0>)
 800506e:	ed93 7b00 	vldr	d7, [r3]
 8005072:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005076:	4b6b      	ldr	r3, [pc, #428]	; (8005224 <inicializarTrayectoria+0x5c4>)
 8005078:	ed93 7b00 	vldr	d7, [r3]
 800507c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005080:	4b69      	ldr	r3, [pc, #420]	; (8005228 <inicializarTrayectoria+0x5c8>)
 8005082:	ed93 7b00 	vldr	d7, [r3]
 8005086:	ee36 7b07 	vadd.f64	d7, d6, d7
 800508a:	4b70      	ldr	r3, [pc, #448]	; (800524c <inicializarTrayectoria+0x5ec>)
 800508c:	ed83 7b00 	vstr	d7, [r3]
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8005090:	4b64      	ldr	r3, [pc, #400]	; (8005224 <inicializarTrayectoria+0x5c4>)
 8005092:	ed93 7b00 	vldr	d7, [r3]
 8005096:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800509a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 800509e:	4b6a      	ldr	r3, [pc, #424]	; (8005248 <inicializarTrayectoria+0x5e8>)
 80050a0:	ed93 6b00 	vldr	d6, [r3]
 80050a4:	4b62      	ldr	r3, [pc, #392]	; (8005230 <inicializarTrayectoria+0x5d0>)
 80050a6:	ed93 7b00 	vldr	d7, [r3]
 80050aa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80050ae:	4b5d      	ldr	r3, [pc, #372]	; (8005224 <inicializarTrayectoria+0x5c4>)
 80050b0:	ed93 7b00 	vldr	d7, [r3]
 80050b4:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80050b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80050bc:	eeb0 0b45 	vmov.f64	d0, d5
 80050c0:	f00c fdda 	bl	8011c78 <pow>
 80050c4:	eeb0 7b40 	vmov.f64	d7, d0
 80050c8:	ee28 6b07 	vmul.f64	d6, d8, d7
 80050cc:	4b5a      	ldr	r3, [pc, #360]	; (8005238 <inicializarTrayectoria+0x5d8>)
 80050ce:	ed93 7b00 	vldr	d7, [r3]
 80050d2:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ VfHip1 * ((ViHip2 - VfHip1) / Ai);    //x=(Cte/2)*t^2+Vi*t
 80050d6:	4b5c      	ldr	r3, [pc, #368]	; (8005248 <inicializarTrayectoria+0x5e8>)
 80050d8:	ed93 5b00 	vldr	d5, [r3]
 80050dc:	4b54      	ldr	r3, [pc, #336]	; (8005230 <inicializarTrayectoria+0x5d0>)
 80050de:	ed93 7b00 	vldr	d7, [r3]
 80050e2:	ee35 4b47 	vsub.f64	d4, d5, d7
 80050e6:	4b4f      	ldr	r3, [pc, #316]	; (8005224 <inicializarTrayectoria+0x5c4>)
 80050e8:	ed93 7b00 	vldr	d7, [r3]
 80050ec:	ee84 5b07 	vdiv.f64	d5, d4, d7
 80050f0:	4b4f      	ldr	r3, [pc, #316]	; (8005230 <inicializarTrayectoria+0x5d0>)
 80050f2:	ed93 7b00 	vldr	d7, [r3]
 80050f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80050fa:	ee36 7b07 	vadd.f64	d7, d6, d7
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 80050fe:	4b54      	ldr	r3, [pc, #336]	; (8005250 <inicializarTrayectoria+0x5f0>)
 8005100:	ed83 7b00 	vstr	d7, [r3]
					//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 2
			tfHip2 = fabs(Ai / (-Jerk)) + tiHip2;
 8005104:	4b47      	ldr	r3, [pc, #284]	; (8005224 <inicializarTrayectoria+0x5c4>)
 8005106:	ed93 7b00 	vldr	d7, [r3]
 800510a:	eeb1 5b47 	vneg.f64	d5, d7
 800510e:	ed97 6b00 	vldr	d6, [r7]
 8005112:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005116:	eeb0 6bc7 	vabs.f64	d6, d7
 800511a:	4b4c      	ldr	r3, [pc, #304]	; (800524c <inicializarTrayectoria+0x5ec>)
 800511c:	ed93 7b00 	vldr	d7, [r3]
 8005120:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005124:	4b4b      	ldr	r3, [pc, #300]	; (8005254 <inicializarTrayectoria+0x5f4>)
 8005126:	ed83 7b00 	vstr	d7, [r3]
			a1Hip2 = ViHip2;
 800512a:	4b47      	ldr	r3, [pc, #284]	; (8005248 <inicializarTrayectoria+0x5e8>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	4949      	ldr	r1, [pc, #292]	; (8005258 <inicializarTrayectoria+0x5f8>)
 8005132:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip2 = XiHip2;
 8005136:	4b46      	ldr	r3, [pc, #280]	; (8005250 <inicializarTrayectoria+0x5f0>)
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	4947      	ldr	r1, [pc, #284]	; (800525c <inicializarTrayectoria+0x5fc>)
 800513e:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 8005142:	4b44      	ldr	r3, [pc, #272]	; (8005254 <inicializarTrayectoria+0x5f4>)
 8005144:	ed93 6b00 	vldr	d6, [r3]
 8005148:	4b40      	ldr	r3, [pc, #256]	; (800524c <inicializarTrayectoria+0x5ec>)
 800514a:	ed93 7b00 	vldr	d7, [r3]
 800514e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005152:	4b41      	ldr	r3, [pc, #260]	; (8005258 <inicializarTrayectoria+0x5f8>)
 8005154:	ed93 7b00 	vldr	d7, [r3]
 8005158:	ee26 6b07 	vmul.f64	d6, d6, d7
 800515c:	4b3f      	ldr	r3, [pc, #252]	; (800525c <inicializarTrayectoria+0x5fc>)
 800515e:	ed93 7b00 	vldr	d7, [r3]
 8005162:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ a2Hip2 * pow((tfHip2 - tiHip2), 2.0)
 8005166:	4b3b      	ldr	r3, [pc, #236]	; (8005254 <inicializarTrayectoria+0x5f4>)
 8005168:	ed93 6b00 	vldr	d6, [r3]
 800516c:	4b37      	ldr	r3, [pc, #220]	; (800524c <inicializarTrayectoria+0x5ec>)
 800516e:	ed93 7b00 	vldr	d7, [r3]
 8005172:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005176:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800517a:	eeb0 0b47 	vmov.f64	d0, d7
 800517e:	f00c fd7b 	bl	8011c78 <pow>
 8005182:	eeb0 6b40 	vmov.f64	d6, d0
 8005186:	4b2e      	ldr	r3, [pc, #184]	; (8005240 <inicializarTrayectoria+0x5e0>)
 8005188:	ed93 7b00 	vldr	d7, [r3]
 800518c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005190:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip2 * pow((tfHip2 - tiHip2), 3.0);
 8005194:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <inicializarTrayectoria+0x5f4>)
 8005196:	ed93 6b00 	vldr	d6, [r3]
 800519a:	4b2c      	ldr	r3, [pc, #176]	; (800524c <inicializarTrayectoria+0x5ec>)
 800519c:	ed93 7b00 	vldr	d7, [r3]
 80051a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80051a4:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80051a8:	eeb0 0b47 	vmov.f64	d0, d7
 80051ac:	f00c fd64 	bl	8011c78 <pow>
 80051b0:	eeb0 6b40 	vmov.f64	d6, d0
 80051b4:	4b21      	ldr	r3, [pc, #132]	; (800523c <inicializarTrayectoria+0x5dc>)
 80051b6:	ed93 7b00 	vldr	d7, [r3]
 80051ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051be:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 80051c2:	4b27      	ldr	r3, [pc, #156]	; (8005260 <inicializarTrayectoria+0x600>)
 80051c4:	ed83 7b00 	vstr	d7, [r3]
		}

		// Condiciones borde:    Se calcula de adelante hacia atras
		DVHip = pow(Af, 2) / (2 * Jerk) * 2;
 80051c8:	4b26      	ldr	r3, [pc, #152]	; (8005264 <inicializarTrayectoria+0x604>)
 80051ca:	ed93 7b00 	vldr	d7, [r3]
 80051ce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051d2:	eeb0 0b47 	vmov.f64	d0, d7
 80051d6:	f00c fd4f 	bl	8011c78 <pow>
 80051da:	eeb0 5b40 	vmov.f64	d5, d0
 80051de:	ed97 7b00 	vldr	d7, [r7]
 80051e2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80051e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80051ea:	ee37 7b07 	vadd.f64	d7, d7, d7
 80051ee:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <inicializarTrayectoria+0x608>)
 80051f0:	ed83 7b00 	vstr	d7, [r3]
		if (fabs(DVHip) > fabs(Vm - Vf)) { // Para cuando la velocidad final es muy cercana a la maxima
 80051f4:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <inicializarTrayectoria+0x608>)
 80051f6:	ed93 7b00 	vldr	d7, [r3]
 80051fa:	eeb0 6bc7 	vabs.f64	d6, d7
 80051fe:	4b11      	ldr	r3, [pc, #68]	; (8005244 <inicializarTrayectoria+0x5e4>)
 8005200:	ed93 5b00 	vldr	d5, [r3]
 8005204:	ed97 7b06 	vldr	d7, [r7, #24]
 8005208:	ee35 7b47 	vsub.f64	d7, d5, d7
 800520c:	eeb0 7bc7 	vabs.f64	d7, d7
 8005210:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005218:	dd5e      	ble.n	80052d8 <inicializarTrayectoria+0x678>
 800521a:	e027      	b.n	800526c <inicializarTrayectoria+0x60c>
 800521c:	24000ab8 	.word	0x24000ab8
 8005220:	24000ab0 	.word	0x24000ab0
 8005224:	24000a90 	.word	0x24000a90
 8005228:	24000b58 	.word	0x24000b58
 800522c:	24000aa8 	.word	0x24000aa8
 8005230:	24000b48 	.word	0x24000b48
 8005234:	24000aa0 	.word	0x24000aa0
 8005238:	24000b20 	.word	0x24000b20
 800523c:	24000ad8 	.word	0x24000ad8
 8005240:	24000ad0 	.word	0x24000ad0
 8005244:	24000b40 	.word	0x24000b40
 8005248:	24000ba8 	.word	0x24000ba8
 800524c:	24000b60 	.word	0x24000b60
 8005250:	24000bb0 	.word	0x24000bb0
 8005254:	24000b68 	.word	0x24000b68
 8005258:	24000ac8 	.word	0x24000ac8
 800525c:	24000ac0 	.word	0x24000ac0
 8005260:	24000b28 	.word	0x24000b28
 8005264:	24000a98 	.word	0x24000a98
 8005268:	24000b98 	.word	0x24000b98
			if (fabs(Vm - Vf) != 0) {
 800526c:	4b34      	ldr	r3, [pc, #208]	; (8005340 <inicializarTrayectoria+0x6e0>)
 800526e:	ed93 6b00 	vldr	d6, [r3]
 8005272:	ed97 7b06 	vldr	d7, [r7, #24]
 8005276:	ee36 7b47 	vsub.f64	d7, d6, d7
 800527a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800527e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005282:	d029      	beq.n	80052d8 <inicializarTrayectoria+0x678>
				Aaux = ((Af) / fabs(Af)) * sqrt(fabs(Vm - Vf) * fabs(Jerk));
 8005284:	4b2f      	ldr	r3, [pc, #188]	; (8005344 <inicializarTrayectoria+0x6e4>)
 8005286:	ed93 6b00 	vldr	d6, [r3]
 800528a:	4b2e      	ldr	r3, [pc, #184]	; (8005344 <inicializarTrayectoria+0x6e4>)
 800528c:	ed93 7b00 	vldr	d7, [r3]
 8005290:	eeb0 7bc7 	vabs.f64	d7, d7
 8005294:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8005298:	4b29      	ldr	r3, [pc, #164]	; (8005340 <inicializarTrayectoria+0x6e0>)
 800529a:	ed93 6b00 	vldr	d6, [r3]
 800529e:	ed97 7b06 	vldr	d7, [r7, #24]
 80052a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052a6:	eeb0 6bc7 	vabs.f64	d6, d7
 80052aa:	ed97 7b00 	vldr	d7, [r7]
 80052ae:	eeb0 7bc7 	vabs.f64	d7, d7
 80052b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80052b6:	eeb0 0b47 	vmov.f64	d0, d7
 80052ba:	f00c ff5d 	bl	8012178 <sqrt>
 80052be:	eeb0 7b40 	vmov.f64	d7, d0
 80052c2:	ee28 7b07 	vmul.f64	d7, d8, d7
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <inicializarTrayectoria+0x6e8>)
 80052c8:	ed83 7b00 	vstr	d7, [r3]
				Af = Aaux;
 80052cc:	4b1e      	ldr	r3, [pc, #120]	; (8005348 <inicializarTrayectoria+0x6e8>)
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	491c      	ldr	r1, [pc, #112]	; (8005344 <inicializarTrayectoria+0x6e4>)
 80052d4:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		if (fabs(Vm - Vf) == 0) { // Para cuando la velocidad final es igual a la maxima
 80052d8:	4b19      	ldr	r3, [pc, #100]	; (8005340 <inicializarTrayectoria+0x6e0>)
 80052da:	ed93 6b00 	vldr	d6, [r3]
 80052de:	ed97 7b06 	vldr	d7, [r7, #24]
 80052e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80052ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ee:	d139      	bne.n	8005364 <inicializarTrayectoria+0x704>
			VfHip3 = Vf;
 80052f0:	4916      	ldr	r1, [pc, #88]	; (800534c <inicializarTrayectoria+0x6ec>)
 80052f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f6:	e9c1 2300 	strd	r2, r3, [r1]
			XiHip3 = XfHip4;
 80052fa:	4915      	ldr	r1, [pc, #84]	; (8005350 <inicializarTrayectoria+0x6f0>)
 80052fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005300:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 8005304:	4b12      	ldr	r3, [pc, #72]	; (8005350 <inicializarTrayectoria+0x6f0>)
 8005306:	ed93 6b00 	vldr	d6, [r3]
 800530a:	4b12      	ldr	r3, [pc, #72]	; (8005354 <inicializarTrayectoria+0x6f4>)
 800530c:	ed93 7b00 	vldr	d7, [r3]
 8005310:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <inicializarTrayectoria+0x6e0>)
 8005316:	ed93 6b00 	vldr	d6, [r3]
 800531a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800531e:	eeb0 6bc7 	vabs.f64	d6, d7
 8005322:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <inicializarTrayectoria+0x6f8>)
 8005324:	ed93 7b00 	vldr	d7, [r3]
 8005328:	ee36 7b07 	vadd.f64	d7, d6, d7
 800532c:	4b0b      	ldr	r3, [pc, #44]	; (800535c <inicializarTrayectoria+0x6fc>)
 800532e:	ed83 7b00 	vstr	d7, [r3]
			TiempoTotX = tiHip3;
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <inicializarTrayectoria+0x6fc>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	4909      	ldr	r1, [pc, #36]	; (8005360 <inicializarTrayectoria+0x700>)
 800533a:	e9c1 2300 	strd	r2, r3, [r1]
 800533e:	e18b      	b.n	8005658 <inicializarTrayectoria+0x9f8>
 8005340:	24000b40 	.word	0x24000b40
 8005344:	24000a98 	.word	0x24000a98
 8005348:	24000bb8 	.word	0x24000bb8
 800534c:	24000b50 	.word	0x24000b50
 8005350:	24000b38 	.word	0x24000b38
 8005354:	24000b28 	.word	0x24000b28
 8005358:	24000b68 	.word	0x24000b68
 800535c:	24000b70 	.word	0x24000b70
 8005360:	24000b88 	.word	0x24000b88
		} else {
			ViHip4 = pow(Af, 2) / (2 * Jerk) + Vf;
 8005364:	4bc7      	ldr	r3, [pc, #796]	; (8005684 <inicializarTrayectoria+0xa24>)
 8005366:	ed93 7b00 	vldr	d7, [r3]
 800536a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800536e:	eeb0 0b47 	vmov.f64	d0, d7
 8005372:	f00c fc81 	bl	8011c78 <pow>
 8005376:	eeb0 5b40 	vmov.f64	d5, d0
 800537a:	ed97 7b00 	vldr	d7, [r7]
 800537e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005382:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005386:	ed97 7b06 	vldr	d7, [r7, #24]
 800538a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800538e:	4bbe      	ldr	r3, [pc, #760]	; (8005688 <inicializarTrayectoria+0xa28>)
 8005390:	ed83 7b00 	vstr	d7, [r3]
			XiHip4 =
					XfHip4
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 8005394:	4bbb      	ldr	r3, [pc, #748]	; (8005684 <inicializarTrayectoria+0xa24>)
 8005396:	ed93 7b00 	vldr	d7, [r3]
 800539a:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800539e:	eeb0 0b47 	vmov.f64	d0, d7
 80053a2:	f00c fc69 	bl	8011c78 <pow>
 80053a6:	eeb0 8b40 	vmov.f64	d8, d0
 80053aa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80053ae:	ed97 0b00 	vldr	d0, [r7]
 80053b2:	f00c fc61 	bl	8011c78 <pow>
 80053b6:	eeb0 7b40 	vmov.f64	d7, d0
 80053ba:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80053be:	ee27 6b06 	vmul.f64	d6, d7, d6
 80053c2:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80053c6:	eeb0 6bc7 	vabs.f64	d6, d7
									* ((ViHip4) / fabs(ViHip4))
 80053ca:	4baf      	ldr	r3, [pc, #700]	; (8005688 <inicializarTrayectoria+0xa28>)
 80053cc:	ed93 4b00 	vldr	d4, [r3]
 80053d0:	4bad      	ldr	r3, [pc, #692]	; (8005688 <inicializarTrayectoria+0xa28>)
 80053d2:	ed93 7b00 	vldr	d7, [r3]
 80053d6:	eeb0 5bc7 	vabs.f64	d5, d7
 80053da:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80053de:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ Vf * (fabs(Af / Jerk)));
 80053e2:	4ba8      	ldr	r3, [pc, #672]	; (8005684 <inicializarTrayectoria+0xa24>)
 80053e4:	ed93 4b00 	vldr	d4, [r3]
 80053e8:	ed97 5b00 	vldr	d5, [r7]
 80053ec:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80053f0:	eeb0 5bc7 	vabs.f64	d5, d7
 80053f4:	ed97 7b06 	vldr	d7, [r7, #24]
 80053f8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80053fc:	ee36 7b07 	vadd.f64	d7, d6, d7
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 8005400:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8005404:	ee36 7b47 	vsub.f64	d7, d6, d7
			XiHip4 =
 8005408:	4ba0      	ldr	r3, [pc, #640]	; (800568c <inicializarTrayectoria+0xa2c>)
 800540a:	ed83 7b00 	vstr	d7, [r3]
			VfHip3 = Vm - pow(Af, 2) / (2 * (Jerk));
 800540e:	4ba0      	ldr	r3, [pc, #640]	; (8005690 <inicializarTrayectoria+0xa30>)
 8005410:	ed93 8b00 	vldr	d8, [r3]
 8005414:	4b9b      	ldr	r3, [pc, #620]	; (8005684 <inicializarTrayectoria+0xa24>)
 8005416:	ed93 7b00 	vldr	d7, [r3]
 800541a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800541e:	eeb0 0b47 	vmov.f64	d0, d7
 8005422:	f00c fc29 	bl	8011c78 <pow>
 8005426:	eeb0 5b40 	vmov.f64	d5, d0
 800542a:	ed97 7b00 	vldr	d7, [r7]
 800542e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005432:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005436:	ee38 7b47 	vsub.f64	d7, d8, d7
 800543a:	4b96      	ldr	r3, [pc, #600]	; (8005694 <inicializarTrayectoria+0xa34>)
 800543c:	ed83 7b00 	vstr	d7, [r3]
			XfHip3 = XiHip4
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 8005440:	4b92      	ldr	r3, [pc, #584]	; (800568c <inicializarTrayectoria+0xa2c>)
 8005442:	ed93 8b00 	vldr	d8, [r3]
 8005446:	4b90      	ldr	r3, [pc, #576]	; (8005688 <inicializarTrayectoria+0xa28>)
 8005448:	ed93 5b00 	vldr	d5, [r3]
 800544c:	4b8e      	ldr	r3, [pc, #568]	; (8005688 <inicializarTrayectoria+0xa28>)
 800544e:	ed93 7b00 	vldr	d7, [r3]
 8005452:	eeb0 7bc7 	vabs.f64	d7, d7
 8005456:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800545a:	4b8a      	ldr	r3, [pc, #552]	; (8005684 <inicializarTrayectoria+0xa24>)
 800545c:	ed93 7b00 	vldr	d7, [r3]
 8005460:	eeb0 5bc7 	vabs.f64	d5, d7
 8005464:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8005468:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800546c:	ee26 9b07 	vmul.f64	d9, d6, d7
							* pow(((ViHip4 - VfHip3) / Af), 2)
 8005470:	4b85      	ldr	r3, [pc, #532]	; (8005688 <inicializarTrayectoria+0xa28>)
 8005472:	ed93 6b00 	vldr	d6, [r3]
 8005476:	4b87      	ldr	r3, [pc, #540]	; (8005694 <inicializarTrayectoria+0xa34>)
 8005478:	ed93 7b00 	vldr	d7, [r3]
 800547c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005480:	4b80      	ldr	r3, [pc, #512]	; (8005684 <inicializarTrayectoria+0xa24>)
 8005482:	ed93 7b00 	vldr	d7, [r3]
 8005486:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800548a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800548e:	eeb0 0b45 	vmov.f64	d0, d5
 8005492:	f00c fbf1 	bl	8011c78 <pow>
 8005496:	eeb0 7b40 	vmov.f64	d7, d0
 800549a:	ee29 6b07 	vmul.f64	d6, d9, d7
							+ ViHip4 * ((ViHip4 - VfHip3) / Af));
 800549e:	4b7a      	ldr	r3, [pc, #488]	; (8005688 <inicializarTrayectoria+0xa28>)
 80054a0:	ed93 5b00 	vldr	d5, [r3]
 80054a4:	4b7b      	ldr	r3, [pc, #492]	; (8005694 <inicializarTrayectoria+0xa34>)
 80054a6:	ed93 7b00 	vldr	d7, [r3]
 80054aa:	ee35 4b47 	vsub.f64	d4, d5, d7
 80054ae:	4b75      	ldr	r3, [pc, #468]	; (8005684 <inicializarTrayectoria+0xa24>)
 80054b0:	ed93 7b00 	vldr	d7, [r3]
 80054b4:	ee84 5b07 	vdiv.f64	d5, d4, d7
 80054b8:	4b73      	ldr	r3, [pc, #460]	; (8005688 <inicializarTrayectoria+0xa28>)
 80054ba:	ed93 7b00 	vldr	d7, [r3]
 80054be:	ee25 7b07 	vmul.f64	d7, d5, d7
 80054c2:	ee36 7b07 	vadd.f64	d7, d6, d7
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 80054c6:	ee38 7b47 	vsub.f64	d7, d8, d7
			XfHip3 = XiHip4
 80054ca:	4b73      	ldr	r3, [pc, #460]	; (8005698 <inicializarTrayectoria+0xa38>)
 80054cc:	ed83 7b00 	vstr	d7, [r3]
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 80054d0:	4b6c      	ldr	r3, [pc, #432]	; (8005684 <inicializarTrayectoria+0xa24>)
 80054d2:	ed93 5b00 	vldr	d5, [r3]
 80054d6:	ed97 7b00 	vldr	d7, [r7]
 80054da:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80054de:	4b6c      	ldr	r3, [pc, #432]	; (8005690 <inicializarTrayectoria+0xa30>)
 80054e0:	ed93 7b00 	vldr	d7, [r3]
 80054e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80054e8:	4b6b      	ldr	r3, [pc, #428]	; (8005698 <inicializarTrayectoria+0xa38>)
 80054ea:	ed93 7b00 	vldr	d7, [r3]
 80054ee:	ee36 8b07 	vadd.f64	d8, d6, d7
					- (pow(Af, 3) / (6 * (pow(-Jerk, 2))));
 80054f2:	4b64      	ldr	r3, [pc, #400]	; (8005684 <inicializarTrayectoria+0xa24>)
 80054f4:	ed93 7b00 	vldr	d7, [r3]
 80054f8:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80054fc:	eeb0 0b47 	vmov.f64	d0, d7
 8005500:	f00c fbba 	bl	8011c78 <pow>
 8005504:	eeb0 9b40 	vmov.f64	d9, d0
 8005508:	ed97 7b00 	vldr	d7, [r7]
 800550c:	eeb1 7b47 	vneg.f64	d7, d7
 8005510:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005514:	eeb0 0b47 	vmov.f64	d0, d7
 8005518:	f00c fbae 	bl	8011c78 <pow>
 800551c:	eeb0 7b40 	vmov.f64	d7, d0
 8005520:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8005524:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005528:	ee89 7b06 	vdiv.f64	d7, d9, d6
 800552c:	ee38 7b47 	vsub.f64	d7, d8, d7
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 8005530:	4b5a      	ldr	r3, [pc, #360]	; (800569c <inicializarTrayectoria+0xa3c>)
 8005532:	ed83 7b00 	vstr	d7, [r3]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 8005536:	4b59      	ldr	r3, [pc, #356]	; (800569c <inicializarTrayectoria+0xa3c>)
 8005538:	ed93 6b00 	vldr	d6, [r3]
 800553c:	4b58      	ldr	r3, [pc, #352]	; (80056a0 <inicializarTrayectoria+0xa40>)
 800553e:	ed93 7b00 	vldr	d7, [r3]
 8005542:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005546:	4b52      	ldr	r3, [pc, #328]	; (8005690 <inicializarTrayectoria+0xa30>)
 8005548:	ed93 6b00 	vldr	d6, [r3]
 800554c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005550:	eeb0 6bc7 	vabs.f64	d6, d7
 8005554:	4b53      	ldr	r3, [pc, #332]	; (80056a4 <inicializarTrayectoria+0xa44>)
 8005556:	ed93 7b00 	vldr	d7, [r3]
 800555a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800555e:	4b52      	ldr	r3, [pc, #328]	; (80056a8 <inicializarTrayectoria+0xa48>)
 8005560:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 3
			a3Hip3 = (-Jerk / 6);
 8005564:	ed97 7b00 	vldr	d7, [r7]
 8005568:	eeb1 6b47 	vneg.f64	d6, d7
 800556c:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005570:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005574:	4b4d      	ldr	r3, [pc, #308]	; (80056ac <inicializarTrayectoria+0xa4c>)
 8005576:	ed83 7b00 	vstr	d7, [r3]
			a2Hip3 = 0;
 800557a:	494d      	ldr	r1, [pc, #308]	; (80056b0 <inicializarTrayectoria+0xa50>)
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip3 = (Af / (-Jerk)) + tiHip3;
 8005588:	4b3e      	ldr	r3, [pc, #248]	; (8005684 <inicializarTrayectoria+0xa24>)
 800558a:	ed93 7b00 	vldr	d7, [r3]
 800558e:	eeb1 5b47 	vneg.f64	d5, d7
 8005592:	ed97 7b00 	vldr	d7, [r7]
 8005596:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800559a:	4b43      	ldr	r3, [pc, #268]	; (80056a8 <inicializarTrayectoria+0xa48>)
 800559c:	ed93 7b00 	vldr	d7, [r3]
 80055a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055a4:	4b43      	ldr	r3, [pc, #268]	; (80056b4 <inicializarTrayectoria+0xa54>)
 80055a6:	ed83 7b00 	vstr	d7, [r3]
			a1Hip3 = Vm;
 80055aa:	4b39      	ldr	r3, [pc, #228]	; (8005690 <inicializarTrayectoria+0xa30>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	4941      	ldr	r1, [pc, #260]	; (80056b8 <inicializarTrayectoria+0xa58>)
 80055b2:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip3 = XiHip3;
 80055b6:	4b39      	ldr	r3, [pc, #228]	; (800569c <inicializarTrayectoria+0xa3c>)
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	493f      	ldr	r1, [pc, #252]	; (80056bc <inicializarTrayectoria+0xa5c>)
 80055be:	e9c1 2300 	strd	r2, r3, [r1]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 2
			tiHip4 = ((ViHip4 - VfHip3) / Af) + tfHip3;
 80055c2:	4b31      	ldr	r3, [pc, #196]	; (8005688 <inicializarTrayectoria+0xa28>)
 80055c4:	ed93 6b00 	vldr	d6, [r3]
 80055c8:	4b32      	ldr	r3, [pc, #200]	; (8005694 <inicializarTrayectoria+0xa34>)
 80055ca:	ed93 7b00 	vldr	d7, [r3]
 80055ce:	ee36 5b47 	vsub.f64	d5, d6, d7
 80055d2:	4b2c      	ldr	r3, [pc, #176]	; (8005684 <inicializarTrayectoria+0xa24>)
 80055d4:	ed93 7b00 	vldr	d7, [r3]
 80055d8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80055dc:	4b35      	ldr	r3, [pc, #212]	; (80056b4 <inicializarTrayectoria+0xa54>)
 80055de:	ed93 7b00 	vldr	d7, [r3]
 80055e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055e6:	4b36      	ldr	r3, [pc, #216]	; (80056c0 <inicializarTrayectoria+0xa60>)
 80055e8:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 4
			a3Hip4 = Jerk / 6;
 80055ec:	ed97 6b00 	vldr	d6, [r7]
 80055f0:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80055f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80055f8:	4b32      	ldr	r3, [pc, #200]	; (80056c4 <inicializarTrayectoria+0xa64>)
 80055fa:	ed83 7b00 	vstr	d7, [r3]
			a2Hip4 = Af / 2;
 80055fe:	4b21      	ldr	r3, [pc, #132]	; (8005684 <inicializarTrayectoria+0xa24>)
 8005600:	ed93 6b00 	vldr	d6, [r3]
 8005604:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005608:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800560c:	4b2e      	ldr	r3, [pc, #184]	; (80056c8 <inicializarTrayectoria+0xa68>)
 800560e:	ed83 7b00 	vstr	d7, [r3]
			tfHip4 = fabs(Af / Jerk) + tiHip4;
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <inicializarTrayectoria+0xa24>)
 8005614:	ed93 5b00 	vldr	d5, [r3]
 8005618:	ed97 6b00 	vldr	d6, [r7]
 800561c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005620:	eeb0 6bc7 	vabs.f64	d6, d7
 8005624:	4b26      	ldr	r3, [pc, #152]	; (80056c0 <inicializarTrayectoria+0xa60>)
 8005626:	ed93 7b00 	vldr	d7, [r3]
 800562a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800562e:	4b27      	ldr	r3, [pc, #156]	; (80056cc <inicializarTrayectoria+0xa6c>)
 8005630:	ed83 7b00 	vstr	d7, [r3]
			a1Hip4 = ViHip4;
 8005634:	4b14      	ldr	r3, [pc, #80]	; (8005688 <inicializarTrayectoria+0xa28>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	4925      	ldr	r1, [pc, #148]	; (80056d0 <inicializarTrayectoria+0xa70>)
 800563c:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip4 = XiHip4;
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <inicializarTrayectoria+0xa2c>)
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	4923      	ldr	r1, [pc, #140]	; (80056d4 <inicializarTrayectoria+0xa74>)
 8005648:	e9c1 2300 	strd	r2, r3, [r1]
			TiempoTotX = tfHip4;
 800564c:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <inicializarTrayectoria+0xa6c>)
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	4921      	ldr	r1, [pc, #132]	; (80056d8 <inicializarTrayectoria+0xa78>)
 8005654:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (XiHip1 < XfHip4) {      // Por si va en un sentido o en el otro
 8005658:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800565c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005660:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005668:	d553      	bpl.n	8005712 <inicializarTrayectoria+0xab2>
			if (XiHip3 < XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <inicializarTrayectoria+0xa3c>)
 800566c:	ed93 6b00 	vldr	d6, [r3]
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <inicializarTrayectoria+0xa40>)
 8005672:	ed93 7b00 	vldr	d7, [r3]
 8005676:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800567a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567e:	d42d      	bmi.n	80056dc <inicializarTrayectoria+0xa7c>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8005680:	e077      	b.n	8005772 <inicializarTrayectoria+0xb12>
 8005682:	bf00      	nop
 8005684:	24000a98 	.word	0x24000a98
 8005688:	24000bc0 	.word	0x24000bc0
 800568c:	24000bc8 	.word	0x24000bc8
 8005690:	24000b40 	.word	0x24000b40
 8005694:	24000b50 	.word	0x24000b50
 8005698:	24000b30 	.word	0x24000b30
 800569c:	24000b38 	.word	0x24000b38
 80056a0:	24000b28 	.word	0x24000b28
 80056a4:	24000b68 	.word	0x24000b68
 80056a8:	24000b70 	.word	0x24000b70
 80056ac:	24000af8 	.word	0x24000af8
 80056b0:	24000af0 	.word	0x24000af0
 80056b4:	24000b78 	.word	0x24000b78
 80056b8:	24000ae8 	.word	0x24000ae8
 80056bc:	24000ae0 	.word	0x24000ae0
 80056c0:	24000b80 	.word	0x24000b80
 80056c4:	24000b18 	.word	0x24000b18
 80056c8:	24000b10 	.word	0x24000b10
 80056cc:	24000b90 	.word	0x24000b90
 80056d0:	24000b08 	.word	0x24000b08
 80056d4:	24000b00 	.word	0x24000b00
 80056d8:	24000b88 	.word	0x24000b88
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 80056dc:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <inicializarTrayectoria+0xb38>)
 80056de:	ed93 6b00 	vldr	d6, [r3]
 80056e2:	ed97 7b04 	vldr	d7, [r7, #16]
 80056e6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8005790 <inicializarTrayectoria+0xb30>
 80056ea:	ee27 5b05 	vmul.f64	d5, d7, d5
 80056ee:	4b2a      	ldr	r3, [pc, #168]	; (8005798 <inicializarTrayectoria+0xb38>)
 80056f0:	ed93 3b00 	vldr	d3, [r3]
 80056f4:	4b28      	ldr	r3, [pc, #160]	; (8005798 <inicializarTrayectoria+0xb38>)
 80056f6:	ed93 7b00 	vldr	d7, [r3]
 80056fa:	eeb0 4bc7 	vabs.f64	d4, d7
 80056fe:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005702:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005706:	ee36 7b47 	vsub.f64	d7, d6, d7
 800570a:	4b23      	ldr	r3, [pc, #140]	; (8005798 <inicializarTrayectoria+0xb38>)
 800570c:	ed83 7b00 	vstr	d7, [r3]
 8005710:	e025      	b.n	800575e <inicializarTrayectoria+0xafe>
			}
		} else {
			if (XiHip3 > XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <inicializarTrayectoria+0xb3c>)
 8005714:	ed93 6b00 	vldr	d6, [r3]
 8005718:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <inicializarTrayectoria+0xb40>)
 800571a:	ed93 7b00 	vldr	d7, [r3]
 800571e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005726:	dc00      	bgt.n	800572a <inicializarTrayectoria+0xaca>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8005728:	e023      	b.n	8005772 <inicializarTrayectoria+0xb12>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 800572a:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <inicializarTrayectoria+0xb38>)
 800572c:	ed93 6b00 	vldr	d6, [r3]
 8005730:	ed97 7b04 	vldr	d7, [r7, #16]
 8005734:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8005790 <inicializarTrayectoria+0xb30>
 8005738:	ee27 5b05 	vmul.f64	d5, d7, d5
 800573c:	4b16      	ldr	r3, [pc, #88]	; (8005798 <inicializarTrayectoria+0xb38>)
 800573e:	ed93 3b00 	vldr	d3, [r3]
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <inicializarTrayectoria+0xb38>)
 8005744:	ed93 7b00 	vldr	d7, [r3]
 8005748:	eeb0 4bc7 	vabs.f64	d4, d7
 800574c:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005750:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005758:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <inicializarTrayectoria+0xb38>)
 800575a:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 800575e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005762:	3301      	adds	r3, #1
 8005764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005768:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800576c:	2b63      	cmp	r3, #99	; 0x63
 800576e:	f67f aaf6 	bls.w	8004d5e <inicializarTrayectoria+0xfe>
			}
		}
	}
	TiempoTotal = tfHip4;
 8005772:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <inicializarTrayectoria+0xb44>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	490b      	ldr	r1, [pc, #44]	; (80057a8 <inicializarTrayectoria+0xb48>)
 800577a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800577e:	bf00      	nop
 8005780:	3740      	adds	r7, #64	; 0x40
 8005782:	46bd      	mov	sp, r7
 8005784:	ecbd 8b04 	vpop	{d8-d9}
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	f3af 8000 	nop.w
 8005790:	47ae147b 	.word	0x47ae147b
 8005794:	3f847ae1 	.word	0x3f847ae1
 8005798:	24000b40 	.word	0x24000b40
 800579c:	24000b38 	.word	0x24000b38
 80057a0:	24000b28 	.word	0x24000b28
 80057a4:	24000b90 	.word	0x24000b90
 80057a8:	24000488 	.word	0x24000488

080057ac <obtenerVelCurva>:

void obtenerVelCurva(double t) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	ed2d 8b04 	vpush	{d8-d9}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	ed87 0b00 	vstr	d0, [r7]
	/*   -----------------------------------------------------------------------
	 * 	 Funcion que devuelve la velocidad de la trayectoria en un instante dado
	 *	 Entrada: tiempo actual,
	 *	 Salida:  velocidad lineal en m/s en el instante de tiempo t
	 -----------------------------------------------------------------------*/
	if (t <= tfHip1) {                                      // Hiperbola 1
 80057ba:	4bc3      	ldr	r3, [pc, #780]	; (8005ac8 <obtenerVelCurva+0x31c>)
 80057bc:	ed93 7b00 	vldr	d7, [r3]
 80057c0:	ed97 6b00 	vldr	d6, [r7]
 80057c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80057c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057cc:	d866      	bhi.n	800589c <obtenerVelCurva+0xf0>
		X = a0Hip1 + a1Hip1 * t + a2Hip1 * pow(t, 2) + a3Hip1 * pow(t, 3);
 80057ce:	4bbf      	ldr	r3, [pc, #764]	; (8005acc <obtenerVelCurva+0x320>)
 80057d0:	ed93 6b00 	vldr	d6, [r3]
 80057d4:	ed97 7b00 	vldr	d7, [r7]
 80057d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80057dc:	4bbc      	ldr	r3, [pc, #752]	; (8005ad0 <obtenerVelCurva+0x324>)
 80057de:	ed93 7b00 	vldr	d7, [r3]
 80057e2:	ee36 8b07 	vadd.f64	d8, d6, d7
 80057e6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80057ea:	ed97 0b00 	vldr	d0, [r7]
 80057ee:	f00c fa43 	bl	8011c78 <pow>
 80057f2:	eeb0 6b40 	vmov.f64	d6, d0
 80057f6:	4bb7      	ldr	r3, [pc, #732]	; (8005ad4 <obtenerVelCurva+0x328>)
 80057f8:	ed93 7b00 	vldr	d7, [r3]
 80057fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005800:	ee38 8b07 	vadd.f64	d8, d8, d7
 8005804:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005808:	ed97 0b00 	vldr	d0, [r7]
 800580c:	f00c fa34 	bl	8011c78 <pow>
 8005810:	eeb0 6b40 	vmov.f64	d6, d0
 8005814:	4bb0      	ldr	r3, [pc, #704]	; (8005ad8 <obtenerVelCurva+0x32c>)
 8005816:	ed93 7b00 	vldr	d7, [r3]
 800581a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800581e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005822:	4bae      	ldr	r3, [pc, #696]	; (8005adc <obtenerVelCurva+0x330>)
 8005824:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip1 + 2.0 * a2Hip1 * t + 3 * a3Hip1 * pow(t, 2);
 8005828:	4baa      	ldr	r3, [pc, #680]	; (8005ad4 <obtenerVelCurva+0x328>)
 800582a:	ed93 7b00 	vldr	d7, [r3]
 800582e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005832:	ed97 7b00 	vldr	d7, [r7]
 8005836:	ee26 6b07 	vmul.f64	d6, d6, d7
 800583a:	4ba4      	ldr	r3, [pc, #656]	; (8005acc <obtenerVelCurva+0x320>)
 800583c:	ed93 7b00 	vldr	d7, [r3]
 8005840:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005844:	4ba4      	ldr	r3, [pc, #656]	; (8005ad8 <obtenerVelCurva+0x32c>)
 8005846:	ed93 7b00 	vldr	d7, [r3]
 800584a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800584e:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005852:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005856:	ed97 0b00 	vldr	d0, [r7]
 800585a:	f00c fa0d 	bl	8011c78 <pow>
 800585e:	eeb0 7b40 	vmov.f64	d7, d0
 8005862:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005866:	ee38 7b07 	vadd.f64	d7, d8, d7
 800586a:	4b9d      	ldr	r3, [pc, #628]	; (8005ae0 <obtenerVelCurva+0x334>)
 800586c:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip1 + 6 * a3Hip1 * t;
 8005870:	4b98      	ldr	r3, [pc, #608]	; (8005ad4 <obtenerVelCurva+0x328>)
 8005872:	ed93 7b00 	vldr	d7, [r3]
 8005876:	ee37 6b07 	vadd.f64	d6, d7, d7
 800587a:	4b97      	ldr	r3, [pc, #604]	; (8005ad8 <obtenerVelCurva+0x32c>)
 800587c:	ed93 7b00 	vldr	d7, [r3]
 8005880:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005884:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005888:	ed97 7b00 	vldr	d7, [r7]
 800588c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005890:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005894:	4b93      	ldr	r3, [pc, #588]	; (8005ae4 <obtenerVelCurva+0x338>)
 8005896:	ed83 7b00 	vstr	d7, [r3]
		X = 0;
		DX = 0;
		DDX = 0;
	}

}
 800589a:	e30e      	b.n	8005eba <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip2)) {                              // Parabola 1
 800589c:	4b92      	ldr	r3, [pc, #584]	; (8005ae8 <obtenerVelCurva+0x33c>)
 800589e:	ed93 7b00 	vldr	d7, [r3]
 80058a2:	ed97 6b00 	vldr	d6, [r7]
 80058a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80058aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ae:	d848      	bhi.n	8005942 <obtenerVelCurva+0x196>
		X = (Ai / 2) * pow((t - tfHip1), 2) + VfHip1 * (t - tfHip1) + XfHip1;
 80058b0:	4b8e      	ldr	r3, [pc, #568]	; (8005aec <obtenerVelCurva+0x340>)
 80058b2:	ed93 7b00 	vldr	d7, [r3]
 80058b6:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80058ba:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80058be:	4b82      	ldr	r3, [pc, #520]	; (8005ac8 <obtenerVelCurva+0x31c>)
 80058c0:	ed93 7b00 	vldr	d7, [r3]
 80058c4:	ed97 6b00 	vldr	d6, [r7]
 80058c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80058cc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058d0:	eeb0 0b47 	vmov.f64	d0, d7
 80058d4:	f00c f9d0 	bl	8011c78 <pow>
 80058d8:	eeb0 7b40 	vmov.f64	d7, d0
 80058dc:	ee28 6b07 	vmul.f64	d6, d8, d7
 80058e0:	4b79      	ldr	r3, [pc, #484]	; (8005ac8 <obtenerVelCurva+0x31c>)
 80058e2:	ed93 7b00 	vldr	d7, [r3]
 80058e6:	ed97 5b00 	vldr	d5, [r7]
 80058ea:	ee35 5b47 	vsub.f64	d5, d5, d7
 80058ee:	4b80      	ldr	r3, [pc, #512]	; (8005af0 <obtenerVelCurva+0x344>)
 80058f0:	ed93 7b00 	vldr	d7, [r3]
 80058f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80058f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80058fc:	4b7d      	ldr	r3, [pc, #500]	; (8005af4 <obtenerVelCurva+0x348>)
 80058fe:	ed93 7b00 	vldr	d7, [r3]
 8005902:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005906:	4b75      	ldr	r3, [pc, #468]	; (8005adc <obtenerVelCurva+0x330>)
 8005908:	ed83 7b00 	vstr	d7, [r3]
		DX = Ai * (t - tfHip1) + VfHip1;
 800590c:	4b6e      	ldr	r3, [pc, #440]	; (8005ac8 <obtenerVelCurva+0x31c>)
 800590e:	ed93 7b00 	vldr	d7, [r3]
 8005912:	ed97 6b00 	vldr	d6, [r7]
 8005916:	ee36 6b47 	vsub.f64	d6, d6, d7
 800591a:	4b74      	ldr	r3, [pc, #464]	; (8005aec <obtenerVelCurva+0x340>)
 800591c:	ed93 7b00 	vldr	d7, [r3]
 8005920:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005924:	4b72      	ldr	r3, [pc, #456]	; (8005af0 <obtenerVelCurva+0x344>)
 8005926:	ed93 7b00 	vldr	d7, [r3]
 800592a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800592e:	4b6c      	ldr	r3, [pc, #432]	; (8005ae0 <obtenerVelCurva+0x334>)
 8005930:	ed83 7b00 	vstr	d7, [r3]
		DDX = Ai;
 8005934:	4b6d      	ldr	r3, [pc, #436]	; (8005aec <obtenerVelCurva+0x340>)
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	496a      	ldr	r1, [pc, #424]	; (8005ae4 <obtenerVelCurva+0x338>)
 800593c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005940:	e2bb      	b.n	8005eba <obtenerVelCurva+0x70e>
	} else if (t <= (tfHip2)) {                            // Hiperbola 2
 8005942:	4b6d      	ldr	r3, [pc, #436]	; (8005af8 <obtenerVelCurva+0x34c>)
 8005944:	ed93 7b00 	vldr	d7, [r3]
 8005948:	ed97 6b00 	vldr	d6, [r7]
 800594c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005954:	f200 808b 	bhi.w	8005a6e <obtenerVelCurva+0x2c2>
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 8005958:	4b63      	ldr	r3, [pc, #396]	; (8005ae8 <obtenerVelCurva+0x33c>)
 800595a:	ed93 7b00 	vldr	d7, [r3]
 800595e:	ed97 6b00 	vldr	d6, [r7]
 8005962:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005966:	4b65      	ldr	r3, [pc, #404]	; (8005afc <obtenerVelCurva+0x350>)
 8005968:	ed93 7b00 	vldr	d7, [r3]
 800596c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005970:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <obtenerVelCurva+0x354>)
 8005972:	ed93 7b00 	vldr	d7, [r3]
 8005976:	ee36 8b07 	vadd.f64	d8, d6, d7
 800597a:	4b5b      	ldr	r3, [pc, #364]	; (8005ae8 <obtenerVelCurva+0x33c>)
 800597c:	ed93 7b00 	vldr	d7, [r3]
 8005980:	ed97 6b00 	vldr	d6, [r7]
 8005984:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005988:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800598c:	eeb0 0b47 	vmov.f64	d0, d7
 8005990:	f00c f972 	bl	8011c78 <pow>
 8005994:	eeb0 6b40 	vmov.f64	d6, d0
 8005998:	4b5a      	ldr	r3, [pc, #360]	; (8005b04 <obtenerVelCurva+0x358>)
 800599a:	ed93 7b00 	vldr	d7, [r3]
 800599e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80059a2:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip2 * pow((t - tiHip2), 3);
 80059a6:	4b50      	ldr	r3, [pc, #320]	; (8005ae8 <obtenerVelCurva+0x33c>)
 80059a8:	ed93 7b00 	vldr	d7, [r3]
 80059ac:	ed97 6b00 	vldr	d6, [r7]
 80059b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059b4:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80059b8:	eeb0 0b47 	vmov.f64	d0, d7
 80059bc:	f00c f95c 	bl	8011c78 <pow>
 80059c0:	eeb0 6b40 	vmov.f64	d6, d0
 80059c4:	4b50      	ldr	r3, [pc, #320]	; (8005b08 <obtenerVelCurva+0x35c>)
 80059c6:	ed93 7b00 	vldr	d7, [r3]
 80059ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 80059ce:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 80059d2:	4b42      	ldr	r3, [pc, #264]	; (8005adc <obtenerVelCurva+0x330>)
 80059d4:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 80059d8:	4b4a      	ldr	r3, [pc, #296]	; (8005b04 <obtenerVelCurva+0x358>)
 80059da:	ed93 7b00 	vldr	d7, [r3]
 80059de:	ee37 6b07 	vadd.f64	d6, d7, d7
 80059e2:	4b41      	ldr	r3, [pc, #260]	; (8005ae8 <obtenerVelCurva+0x33c>)
 80059e4:	ed93 7b00 	vldr	d7, [r3]
 80059e8:	ed97 5b00 	vldr	d5, [r7]
 80059ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80059f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80059f4:	4b41      	ldr	r3, [pc, #260]	; (8005afc <obtenerVelCurva+0x350>)
 80059f6:	ed93 7b00 	vldr	d7, [r3]
 80059fa:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip2 * pow((t - tiHip2), 2);
 80059fe:	4b42      	ldr	r3, [pc, #264]	; (8005b08 <obtenerVelCurva+0x35c>)
 8005a00:	ed93 7b00 	vldr	d7, [r3]
 8005a04:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005a08:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005a0c:	4b36      	ldr	r3, [pc, #216]	; (8005ae8 <obtenerVelCurva+0x33c>)
 8005a0e:	ed93 7b00 	vldr	d7, [r3]
 8005a12:	ed97 6b00 	vldr	d6, [r7]
 8005a16:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a1a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a1e:	eeb0 0b47 	vmov.f64	d0, d7
 8005a22:	f00c f929 	bl	8011c78 <pow>
 8005a26:	eeb0 7b40 	vmov.f64	d7, d0
 8005a2a:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005a2e:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 8005a32:	4b2b      	ldr	r3, [pc, #172]	; (8005ae0 <obtenerVelCurva+0x334>)
 8005a34:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip2 + 6 * a3Hip2 * (t - tiHip2);
 8005a38:	4b32      	ldr	r3, [pc, #200]	; (8005b04 <obtenerVelCurva+0x358>)
 8005a3a:	ed93 7b00 	vldr	d7, [r3]
 8005a3e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005a42:	4b31      	ldr	r3, [pc, #196]	; (8005b08 <obtenerVelCurva+0x35c>)
 8005a44:	ed93 7b00 	vldr	d7, [r3]
 8005a48:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005a4c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005a50:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <obtenerVelCurva+0x33c>)
 8005a52:	ed93 7b00 	vldr	d7, [r3]
 8005a56:	ed97 4b00 	vldr	d4, [r7]
 8005a5a:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005a5e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a66:	4b1f      	ldr	r3, [pc, #124]	; (8005ae4 <obtenerVelCurva+0x338>)
 8005a68:	ed83 7b00 	vstr	d7, [r3]
}
 8005a6c:	e225      	b.n	8005eba <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip3)) {                              // Recta
 8005a6e:	4b27      	ldr	r3, [pc, #156]	; (8005b0c <obtenerVelCurva+0x360>)
 8005a70:	ed93 7b00 	vldr	d7, [r3]
 8005a74:	ed97 6b00 	vldr	d6, [r7]
 8005a78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a80:	d84a      	bhi.n	8005b18 <obtenerVelCurva+0x36c>
		X = Vm * (t - tfHip2) + XfHip2;
 8005a82:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <obtenerVelCurva+0x34c>)
 8005a84:	ed93 7b00 	vldr	d7, [r3]
 8005a88:	ed97 6b00 	vldr	d6, [r7]
 8005a8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a90:	4b1f      	ldr	r3, [pc, #124]	; (8005b10 <obtenerVelCurva+0x364>)
 8005a92:	ed93 7b00 	vldr	d7, [r3]
 8005a96:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a9a:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <obtenerVelCurva+0x368>)
 8005a9c:	ed93 7b00 	vldr	d7, [r3]
 8005aa0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <obtenerVelCurva+0x330>)
 8005aa6:	ed83 7b00 	vstr	d7, [r3]
		DX = Vm;
 8005aaa:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <obtenerVelCurva+0x364>)
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	490b      	ldr	r1, [pc, #44]	; (8005ae0 <obtenerVelCurva+0x334>)
 8005ab2:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005ab6:	490b      	ldr	r1, [pc, #44]	; (8005ae4 <obtenerVelCurva+0x338>)
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005ac4:	e1f9      	b.n	8005eba <obtenerVelCurva+0x70e>
 8005ac6:	bf00      	nop
 8005ac8:	24000b58 	.word	0x24000b58
 8005acc:	24000aa8 	.word	0x24000aa8
 8005ad0:	24000aa0 	.word	0x24000aa0
 8005ad4:	24000ab0 	.word	0x24000ab0
 8005ad8:	24000ab8 	.word	0x24000ab8
 8005adc:	240004c0 	.word	0x240004c0
 8005ae0:	240004c8 	.word	0x240004c8
 8005ae4:	240004d0 	.word	0x240004d0
 8005ae8:	24000b60 	.word	0x24000b60
 8005aec:	24000a90 	.word	0x24000a90
 8005af0:	24000b48 	.word	0x24000b48
 8005af4:	24000b20 	.word	0x24000b20
 8005af8:	24000b68 	.word	0x24000b68
 8005afc:	24000ac8 	.word	0x24000ac8
 8005b00:	24000ac0 	.word	0x24000ac0
 8005b04:	24000ad0 	.word	0x24000ad0
 8005b08:	24000ad8 	.word	0x24000ad8
 8005b0c:	24000b70 	.word	0x24000b70
 8005b10:	24000b40 	.word	0x24000b40
 8005b14:	24000b28 	.word	0x24000b28
	} else if (t <= (tfHip3)) {                            // Hiperbola 3
 8005b18:	4bcb      	ldr	r3, [pc, #812]	; (8005e48 <obtenerVelCurva+0x69c>)
 8005b1a:	ed93 7b00 	vldr	d7, [r3]
 8005b1e:	ed97 6b00 	vldr	d6, [r7]
 8005b22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2a:	f200 808b 	bhi.w	8005c44 <obtenerVelCurva+0x498>
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8005b2e:	4bc7      	ldr	r3, [pc, #796]	; (8005e4c <obtenerVelCurva+0x6a0>)
 8005b30:	ed93 7b00 	vldr	d7, [r3]
 8005b34:	ed97 6b00 	vldr	d6, [r7]
 8005b38:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b3c:	4bc4      	ldr	r3, [pc, #784]	; (8005e50 <obtenerVelCurva+0x6a4>)
 8005b3e:	ed93 7b00 	vldr	d7, [r3]
 8005b42:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005b46:	4bc3      	ldr	r3, [pc, #780]	; (8005e54 <obtenerVelCurva+0x6a8>)
 8005b48:	ed93 7b00 	vldr	d7, [r3]
 8005b4c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005b50:	4bbe      	ldr	r3, [pc, #760]	; (8005e4c <obtenerVelCurva+0x6a0>)
 8005b52:	ed93 7b00 	vldr	d7, [r3]
 8005b56:	ed97 6b00 	vldr	d6, [r7]
 8005b5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b5e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b62:	eeb0 0b47 	vmov.f64	d0, d7
 8005b66:	f00c f887 	bl	8011c78 <pow>
 8005b6a:	eeb0 6b40 	vmov.f64	d6, d0
 8005b6e:	4bba      	ldr	r3, [pc, #744]	; (8005e58 <obtenerVelCurva+0x6ac>)
 8005b70:	ed93 7b00 	vldr	d7, [r3]
 8005b74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005b78:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip3 * pow((t - tiHip3), 3);
 8005b7c:	4bb3      	ldr	r3, [pc, #716]	; (8005e4c <obtenerVelCurva+0x6a0>)
 8005b7e:	ed93 7b00 	vldr	d7, [r3]
 8005b82:	ed97 6b00 	vldr	d6, [r7]
 8005b86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b8a:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005b8e:	eeb0 0b47 	vmov.f64	d0, d7
 8005b92:	f00c f871 	bl	8011c78 <pow>
 8005b96:	eeb0 6b40 	vmov.f64	d6, d0
 8005b9a:	4bb0      	ldr	r3, [pc, #704]	; (8005e5c <obtenerVelCurva+0x6b0>)
 8005b9c:	ed93 7b00 	vldr	d7, [r3]
 8005ba0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005ba4:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8005ba8:	4bad      	ldr	r3, [pc, #692]	; (8005e60 <obtenerVelCurva+0x6b4>)
 8005baa:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8005bae:	4baa      	ldr	r3, [pc, #680]	; (8005e58 <obtenerVelCurva+0x6ac>)
 8005bb0:	ed93 7b00 	vldr	d7, [r3]
 8005bb4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005bb8:	4ba4      	ldr	r3, [pc, #656]	; (8005e4c <obtenerVelCurva+0x6a0>)
 8005bba:	ed93 7b00 	vldr	d7, [r3]
 8005bbe:	ed97 5b00 	vldr	d5, [r7]
 8005bc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005bc6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005bca:	4ba1      	ldr	r3, [pc, #644]	; (8005e50 <obtenerVelCurva+0x6a4>)
 8005bcc:	ed93 7b00 	vldr	d7, [r3]
 8005bd0:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip3 * pow((t - tiHip3), 2);
 8005bd4:	4ba1      	ldr	r3, [pc, #644]	; (8005e5c <obtenerVelCurva+0x6b0>)
 8005bd6:	ed93 7b00 	vldr	d7, [r3]
 8005bda:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005bde:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005be2:	4b9a      	ldr	r3, [pc, #616]	; (8005e4c <obtenerVelCurva+0x6a0>)
 8005be4:	ed93 7b00 	vldr	d7, [r3]
 8005be8:	ed97 6b00 	vldr	d6, [r7]
 8005bec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005bf0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005bf4:	eeb0 0b47 	vmov.f64	d0, d7
 8005bf8:	f00c f83e 	bl	8011c78 <pow>
 8005bfc:	eeb0 7b40 	vmov.f64	d7, d0
 8005c00:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005c04:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8005c08:	4b96      	ldr	r3, [pc, #600]	; (8005e64 <obtenerVelCurva+0x6b8>)
 8005c0a:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip3 + 6 * a3Hip3 * (t - tiHip3);
 8005c0e:	4b92      	ldr	r3, [pc, #584]	; (8005e58 <obtenerVelCurva+0x6ac>)
 8005c10:	ed93 7b00 	vldr	d7, [r3]
 8005c14:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005c18:	4b90      	ldr	r3, [pc, #576]	; (8005e5c <obtenerVelCurva+0x6b0>)
 8005c1a:	ed93 7b00 	vldr	d7, [r3]
 8005c1e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005c22:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005c26:	4b89      	ldr	r3, [pc, #548]	; (8005e4c <obtenerVelCurva+0x6a0>)
 8005c28:	ed93 7b00 	vldr	d7, [r3]
 8005c2c:	ed97 4b00 	vldr	d4, [r7]
 8005c30:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005c34:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005c38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c3c:	4b8a      	ldr	r3, [pc, #552]	; (8005e68 <obtenerVelCurva+0x6bc>)
 8005c3e:	ed83 7b00 	vstr	d7, [r3]
}
 8005c42:	e13a      	b.n	8005eba <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip4)) {                            // Parabola 2
 8005c44:	4b89      	ldr	r3, [pc, #548]	; (8005e6c <obtenerVelCurva+0x6c0>)
 8005c46:	ed93 7b00 	vldr	d7, [r3]
 8005c4a:	ed97 6b00 	vldr	d6, [r7]
 8005c4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c56:	d848      	bhi.n	8005cea <obtenerVelCurva+0x53e>
		X = (Af / 2) * pow((t - tfHip3), 2) + VfHip3 * (t - tfHip3) + XfHip3;
 8005c58:	4b85      	ldr	r3, [pc, #532]	; (8005e70 <obtenerVelCurva+0x6c4>)
 8005c5a:	ed93 7b00 	vldr	d7, [r3]
 8005c5e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005c62:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8005c66:	4b78      	ldr	r3, [pc, #480]	; (8005e48 <obtenerVelCurva+0x69c>)
 8005c68:	ed93 7b00 	vldr	d7, [r3]
 8005c6c:	ed97 6b00 	vldr	d6, [r7]
 8005c70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c74:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c78:	eeb0 0b47 	vmov.f64	d0, d7
 8005c7c:	f00b fffc 	bl	8011c78 <pow>
 8005c80:	eeb0 7b40 	vmov.f64	d7, d0
 8005c84:	ee28 6b07 	vmul.f64	d6, d8, d7
 8005c88:	4b6f      	ldr	r3, [pc, #444]	; (8005e48 <obtenerVelCurva+0x69c>)
 8005c8a:	ed93 7b00 	vldr	d7, [r3]
 8005c8e:	ed97 5b00 	vldr	d5, [r7]
 8005c92:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005c96:	4b77      	ldr	r3, [pc, #476]	; (8005e74 <obtenerVelCurva+0x6c8>)
 8005c98:	ed93 7b00 	vldr	d7, [r3]
 8005c9c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005ca0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005ca4:	4b74      	ldr	r3, [pc, #464]	; (8005e78 <obtenerVelCurva+0x6cc>)
 8005ca6:	ed93 7b00 	vldr	d7, [r3]
 8005caa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005cae:	4b6c      	ldr	r3, [pc, #432]	; (8005e60 <obtenerVelCurva+0x6b4>)
 8005cb0:	ed83 7b00 	vstr	d7, [r3]
		DX = Af * (t - tfHip3) + VfHip3;
 8005cb4:	4b64      	ldr	r3, [pc, #400]	; (8005e48 <obtenerVelCurva+0x69c>)
 8005cb6:	ed93 7b00 	vldr	d7, [r3]
 8005cba:	ed97 6b00 	vldr	d6, [r7]
 8005cbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005cc2:	4b6b      	ldr	r3, [pc, #428]	; (8005e70 <obtenerVelCurva+0x6c4>)
 8005cc4:	ed93 7b00 	vldr	d7, [r3]
 8005cc8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005ccc:	4b69      	ldr	r3, [pc, #420]	; (8005e74 <obtenerVelCurva+0x6c8>)
 8005cce:	ed93 7b00 	vldr	d7, [r3]
 8005cd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005cd6:	4b63      	ldr	r3, [pc, #396]	; (8005e64 <obtenerVelCurva+0x6b8>)
 8005cd8:	ed83 7b00 	vstr	d7, [r3]
		DDX = Af;
 8005cdc:	4b64      	ldr	r3, [pc, #400]	; (8005e70 <obtenerVelCurva+0x6c4>)
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	4961      	ldr	r1, [pc, #388]	; (8005e68 <obtenerVelCurva+0x6bc>)
 8005ce4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005ce8:	e0e7      	b.n	8005eba <obtenerVelCurva+0x70e>
	} else if (t <= TiempoTotX) {                               // Hiperbola 4
 8005cea:	4b64      	ldr	r3, [pc, #400]	; (8005e7c <obtenerVelCurva+0x6d0>)
 8005cec:	ed93 7b00 	vldr	d7, [r3]
 8005cf0:	ed97 6b00 	vldr	d6, [r7]
 8005cf4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfc:	f200 808b 	bhi.w	8005e16 <obtenerVelCurva+0x66a>
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8005d00:	4b5a      	ldr	r3, [pc, #360]	; (8005e6c <obtenerVelCurva+0x6c0>)
 8005d02:	ed93 7b00 	vldr	d7, [r3]
 8005d06:	ed97 6b00 	vldr	d6, [r7]
 8005d0a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005d0e:	4b5c      	ldr	r3, [pc, #368]	; (8005e80 <obtenerVelCurva+0x6d4>)
 8005d10:	ed93 7b00 	vldr	d7, [r3]
 8005d14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d18:	4b5a      	ldr	r3, [pc, #360]	; (8005e84 <obtenerVelCurva+0x6d8>)
 8005d1a:	ed93 7b00 	vldr	d7, [r3]
 8005d1e:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005d22:	4b52      	ldr	r3, [pc, #328]	; (8005e6c <obtenerVelCurva+0x6c0>)
 8005d24:	ed93 7b00 	vldr	d7, [r3]
 8005d28:	ed97 6b00 	vldr	d6, [r7]
 8005d2c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d30:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005d34:	eeb0 0b47 	vmov.f64	d0, d7
 8005d38:	f00b ff9e 	bl	8011c78 <pow>
 8005d3c:	eeb0 6b40 	vmov.f64	d6, d0
 8005d40:	4b51      	ldr	r3, [pc, #324]	; (8005e88 <obtenerVelCurva+0x6dc>)
 8005d42:	ed93 7b00 	vldr	d7, [r3]
 8005d46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d4a:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip4 * pow((t - tiHip4), 3);
 8005d4e:	4b47      	ldr	r3, [pc, #284]	; (8005e6c <obtenerVelCurva+0x6c0>)
 8005d50:	ed93 7b00 	vldr	d7, [r3]
 8005d54:	ed97 6b00 	vldr	d6, [r7]
 8005d58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d5c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005d60:	eeb0 0b47 	vmov.f64	d0, d7
 8005d64:	f00b ff88 	bl	8011c78 <pow>
 8005d68:	eeb0 6b40 	vmov.f64	d6, d0
 8005d6c:	4b47      	ldr	r3, [pc, #284]	; (8005e8c <obtenerVelCurva+0x6e0>)
 8005d6e:	ed93 7b00 	vldr	d7, [r3]
 8005d72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d76:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8005d7a:	4b39      	ldr	r3, [pc, #228]	; (8005e60 <obtenerVelCurva+0x6b4>)
 8005d7c:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8005d80:	4b41      	ldr	r3, [pc, #260]	; (8005e88 <obtenerVelCurva+0x6dc>)
 8005d82:	ed93 7b00 	vldr	d7, [r3]
 8005d86:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005d8a:	4b38      	ldr	r3, [pc, #224]	; (8005e6c <obtenerVelCurva+0x6c0>)
 8005d8c:	ed93 7b00 	vldr	d7, [r3]
 8005d90:	ed97 5b00 	vldr	d5, [r7]
 8005d94:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005d98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d9c:	4b38      	ldr	r3, [pc, #224]	; (8005e80 <obtenerVelCurva+0x6d4>)
 8005d9e:	ed93 7b00 	vldr	d7, [r3]
 8005da2:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip4 * pow((t - tiHip4), 2);
 8005da6:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <obtenerVelCurva+0x6e0>)
 8005da8:	ed93 7b00 	vldr	d7, [r3]
 8005dac:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005db0:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005db4:	4b2d      	ldr	r3, [pc, #180]	; (8005e6c <obtenerVelCurva+0x6c0>)
 8005db6:	ed93 7b00 	vldr	d7, [r3]
 8005dba:	ed97 6b00 	vldr	d6, [r7]
 8005dbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005dc2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005dc6:	eeb0 0b47 	vmov.f64	d0, d7
 8005dca:	f00b ff55 	bl	8011c78 <pow>
 8005dce:	eeb0 7b40 	vmov.f64	d7, d0
 8005dd2:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005dd6:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8005dda:	4b22      	ldr	r3, [pc, #136]	; (8005e64 <obtenerVelCurva+0x6b8>)
 8005ddc:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip4 + 6.0 * a3Hip4 * (t - tiHip4);
 8005de0:	4b29      	ldr	r3, [pc, #164]	; (8005e88 <obtenerVelCurva+0x6dc>)
 8005de2:	ed93 7b00 	vldr	d7, [r3]
 8005de6:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005dea:	4b28      	ldr	r3, [pc, #160]	; (8005e8c <obtenerVelCurva+0x6e0>)
 8005dec:	ed93 7b00 	vldr	d7, [r3]
 8005df0:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005df4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005df8:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <obtenerVelCurva+0x6c0>)
 8005dfa:	ed93 7b00 	vldr	d7, [r3]
 8005dfe:	ed97 4b00 	vldr	d4, [r7]
 8005e02:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005e06:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005e0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e0e:	4b16      	ldr	r3, [pc, #88]	; (8005e68 <obtenerVelCurva+0x6bc>)
 8005e10:	ed83 7b00 	vstr	d7, [r3]
}
 8005e14:	e051      	b.n	8005eba <obtenerVelCurva+0x70e>
	} else if (t > TiempoTotX) {                               // Tiempo extra
 8005e16:	4b19      	ldr	r3, [pc, #100]	; (8005e7c <obtenerVelCurva+0x6d0>)
 8005e18:	ed93 7b00 	vldr	d7, [r3]
 8005e1c:	ed97 6b00 	vldr	d6, [r7]
 8005e20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e28:	dd32      	ble.n	8005e90 <obtenerVelCurva+0x6e4>
		DX = 0;
 8005e2a:	490e      	ldr	r1, [pc, #56]	; (8005e64 <obtenerVelCurva+0x6b8>)
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005e38:	490b      	ldr	r1, [pc, #44]	; (8005e68 <obtenerVelCurva+0x6bc>)
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005e46:	e038      	b.n	8005eba <obtenerVelCurva+0x70e>
 8005e48:	24000b78 	.word	0x24000b78
 8005e4c:	24000b70 	.word	0x24000b70
 8005e50:	24000ae8 	.word	0x24000ae8
 8005e54:	24000ae0 	.word	0x24000ae0
 8005e58:	24000af0 	.word	0x24000af0
 8005e5c:	24000af8 	.word	0x24000af8
 8005e60:	240004c0 	.word	0x240004c0
 8005e64:	240004c8 	.word	0x240004c8
 8005e68:	240004d0 	.word	0x240004d0
 8005e6c:	24000b80 	.word	0x24000b80
 8005e70:	24000a98 	.word	0x24000a98
 8005e74:	24000b50 	.word	0x24000b50
 8005e78:	24000b30 	.word	0x24000b30
 8005e7c:	24000b88 	.word	0x24000b88
 8005e80:	24000b08 	.word	0x24000b08
 8005e84:	24000b00 	.word	0x24000b00
 8005e88:	24000b10 	.word	0x24000b10
 8005e8c:	24000b18 	.word	0x24000b18
		X = 0;
 8005e90:	490d      	ldr	r1, [pc, #52]	; (8005ec8 <obtenerVelCurva+0x71c>)
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	e9c1 2300 	strd	r2, r3, [r1]
		DX = 0;
 8005e9e:	490b      	ldr	r1, [pc, #44]	; (8005ecc <obtenerVelCurva+0x720>)
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005eac:	4908      	ldr	r1, [pc, #32]	; (8005ed0 <obtenerVelCurva+0x724>)
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	ecbd 8b04 	vpop	{d8-d9}
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	240004c0 	.word	0x240004c0
 8005ecc:	240004c8 	.word	0x240004c8
 8005ed0:	240004d0 	.word	0x240004d0
 8005ed4:	00000000 	.word	0x00000000

08005ed8 <jacobianoInverso>:



void jacobianoInverso(double Vxaux, double Vyaux, double Vzaux, double Pxaux, double Pyaux, double Pzaux) {
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b0ad      	sub	sp, #180	; 0xb4
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
 8005ee2:	ed87 1b1a 	vstr	d1, [r7, #104]	; 0x68
 8005ee6:	ed87 2b18 	vstr	d2, [r7, #96]	; 0x60
 8005eea:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
 8005eee:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 8005ef2:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
	 * 	 Funcion que devuelve la velocidad angular de cada motor
	 *	 Entrada: Velocidad en (x,y,z) y Posicion en (x,y,z)
	 *	 Salida:  Velocidad angular en rad/s
	 	 -----------------------------------------------------------------------*/

	double Vaux[3] = { Vxaux, Vyaux, Vzaux };
 8005ef6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005efa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8005efe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005f02:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8005f06:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005f0a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	E1[0] = Pxaux + 0;
 8005f0e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005f12:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8006220 <jacobianoInverso+0x348>
 8005f16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f1a:	4bc9      	ldr	r3, [pc, #804]	; (8006240 <jacobianoInverso+0x368>)
 8005f1c:	ed83 7b00 	vstr	d7, [r3]
	E1[1] = Pyaux - 0.07;
 8005f20:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005f24:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8006228 <jacobianoInverso+0x350>
 8005f28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f2c:	4bc4      	ldr	r3, [pc, #784]	; (8006240 <jacobianoInverso+0x368>)
 8005f2e:	ed83 7b02 	vstr	d7, [r3, #8]
	E1[2] = Pzaux;
 8005f32:	49c3      	ldr	r1, [pc, #780]	; (8006240 <jacobianoInverso+0x368>)
 8005f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f38:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E2[0] = Pxaux + 0.060621778264911;
 8005f3c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005f40:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8006230 <jacobianoInverso+0x358>
 8005f44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f48:	4bbe      	ldr	r3, [pc, #760]	; (8006244 <jacobianoInverso+0x36c>)
 8005f4a:	ed83 7b00 	vstr	d7, [r3]
	E2[1] = Pyaux + 0.035;
 8005f4e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005f52:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8006238 <jacobianoInverso+0x360>
 8005f56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f5a:	4bba      	ldr	r3, [pc, #744]	; (8006244 <jacobianoInverso+0x36c>)
 8005f5c:	ed83 7b02 	vstr	d7, [r3, #8]
	E2[2] = Pzaux;
 8005f60:	49b8      	ldr	r1, [pc, #736]	; (8006244 <jacobianoInverso+0x36c>)
 8005f62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f66:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E3[0] = Pxaux - 0.060621778264911;
 8005f6a:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005f6e:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8006230 <jacobianoInverso+0x358>
 8005f72:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f76:	4bb4      	ldr	r3, [pc, #720]	; (8006248 <jacobianoInverso+0x370>)
 8005f78:	ed83 7b00 	vstr	d7, [r3]
	E3[1] = Pyaux + 0.035;
 8005f7c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005f80:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8006238 <jacobianoInverso+0x360>
 8005f84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f88:	4baf      	ldr	r3, [pc, #700]	; (8006248 <jacobianoInverso+0x370>)
 8005f8a:	ed83 7b02 	vstr	d7, [r3, #8]
	E3[2] = Pzaux;
 8005f8e:	49ae      	ldr	r1, [pc, #696]	; (8006248 <jacobianoInverso+0x370>)
 8005f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f94:	e9c1 2304 	strd	r2, r3, [r1, #16]

	l1[0][0] = XJ1_1 - F1[0];//l11=[(XJ1(1)-F1(1,1));(YJ1(1)-F1(1,2));(ZJ1(1)-F1(1,3))];
 8005f98:	4bac      	ldr	r3, [pc, #688]	; (800624c <jacobianoInverso+0x374>)
 8005f9a:	ed93 6b00 	vldr	d6, [r3]
 8005f9e:	4bac      	ldr	r3, [pc, #688]	; (8006250 <jacobianoInverso+0x378>)
 8005fa0:	ed93 7b00 	vldr	d7, [r3]
 8005fa4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fa8:	4baa      	ldr	r3, [pc, #680]	; (8006254 <jacobianoInverso+0x37c>)
 8005faa:	ed83 7b00 	vstr	d7, [r3]
	l1[0][1] = YJ1_1 - F1[1];
 8005fae:	4baa      	ldr	r3, [pc, #680]	; (8006258 <jacobianoInverso+0x380>)
 8005fb0:	ed93 6b00 	vldr	d6, [r3]
 8005fb4:	4ba6      	ldr	r3, [pc, #664]	; (8006250 <jacobianoInverso+0x378>)
 8005fb6:	ed93 7b02 	vldr	d7, [r3, #8]
 8005fba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fbe:	4ba5      	ldr	r3, [pc, #660]	; (8006254 <jacobianoInverso+0x37c>)
 8005fc0:	ed83 7b02 	vstr	d7, [r3, #8]
	l1[0][2] = ZJ1_1 - F1[2];
 8005fc4:	4ba5      	ldr	r3, [pc, #660]	; (800625c <jacobianoInverso+0x384>)
 8005fc6:	ed93 6b00 	vldr	d6, [r3]
 8005fca:	4ba1      	ldr	r3, [pc, #644]	; (8006250 <jacobianoInverso+0x378>)
 8005fcc:	ed93 7b04 	vldr	d7, [r3, #16]
 8005fd0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fd4:	4b9f      	ldr	r3, [pc, #636]	; (8006254 <jacobianoInverso+0x37c>)
 8005fd6:	ed83 7b04 	vstr	d7, [r3, #16]
	l1[1][0] = XJ2_1 - F2[0];//l12=[(XJ2(1)-F2(1,1));(YJ2(1)-F2(1,2));(ZJ2(1)-F2(1,3))];
 8005fda:	4ba1      	ldr	r3, [pc, #644]	; (8006260 <jacobianoInverso+0x388>)
 8005fdc:	ed93 6b00 	vldr	d6, [r3]
 8005fe0:	4ba0      	ldr	r3, [pc, #640]	; (8006264 <jacobianoInverso+0x38c>)
 8005fe2:	ed93 7b00 	vldr	d7, [r3]
 8005fe6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fea:	4b9a      	ldr	r3, [pc, #616]	; (8006254 <jacobianoInverso+0x37c>)
 8005fec:	ed83 7b06 	vstr	d7, [r3, #24]
	l1[1][1] = YJ2_1 - F2[1];
 8005ff0:	4b9d      	ldr	r3, [pc, #628]	; (8006268 <jacobianoInverso+0x390>)
 8005ff2:	ed93 6b00 	vldr	d6, [r3]
 8005ff6:	4b9b      	ldr	r3, [pc, #620]	; (8006264 <jacobianoInverso+0x38c>)
 8005ff8:	ed93 7b02 	vldr	d7, [r3, #8]
 8005ffc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006000:	4b94      	ldr	r3, [pc, #592]	; (8006254 <jacobianoInverso+0x37c>)
 8006002:	ed83 7b08 	vstr	d7, [r3, #32]
	l1[1][2] = ZJ2_1 - F2[2];
 8006006:	4b99      	ldr	r3, [pc, #612]	; (800626c <jacobianoInverso+0x394>)
 8006008:	ed93 6b00 	vldr	d6, [r3]
 800600c:	4b95      	ldr	r3, [pc, #596]	; (8006264 <jacobianoInverso+0x38c>)
 800600e:	ed93 7b04 	vldr	d7, [r3, #16]
 8006012:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006016:	4b8f      	ldr	r3, [pc, #572]	; (8006254 <jacobianoInverso+0x37c>)
 8006018:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l1[2][0] = XJ3_1 - F3[0];//l13=[(XJ3(1)-F3(1,1));(YJ3(1)-F3(1,2));(ZJ3(1)-F3(1,3))];
 800601c:	4b94      	ldr	r3, [pc, #592]	; (8006270 <jacobianoInverso+0x398>)
 800601e:	ed93 6b00 	vldr	d6, [r3]
 8006022:	4b94      	ldr	r3, [pc, #592]	; (8006274 <jacobianoInverso+0x39c>)
 8006024:	ed93 7b00 	vldr	d7, [r3]
 8006028:	ee36 7b47 	vsub.f64	d7, d6, d7
 800602c:	4b89      	ldr	r3, [pc, #548]	; (8006254 <jacobianoInverso+0x37c>)
 800602e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l1[2][1] = YJ3_1 - F3[1];
 8006032:	4b91      	ldr	r3, [pc, #580]	; (8006278 <jacobianoInverso+0x3a0>)
 8006034:	ed93 6b00 	vldr	d6, [r3]
 8006038:	4b8e      	ldr	r3, [pc, #568]	; (8006274 <jacobianoInverso+0x39c>)
 800603a:	ed93 7b02 	vldr	d7, [r3, #8]
 800603e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006042:	4b84      	ldr	r3, [pc, #528]	; (8006254 <jacobianoInverso+0x37c>)
 8006044:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l1[2][2] = ZJ3_1 - F3[2];
 8006048:	4b8c      	ldr	r3, [pc, #560]	; (800627c <jacobianoInverso+0x3a4>)
 800604a:	ed93 6b00 	vldr	d6, [r3]
 800604e:	4b89      	ldr	r3, [pc, #548]	; (8006274 <jacobianoInverso+0x39c>)
 8006050:	ed93 7b04 	vldr	d7, [r3, #16]
 8006054:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006058:	4b7e      	ldr	r3, [pc, #504]	; (8006254 <jacobianoInverso+0x37c>)
 800605a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	l2[0][0] = E1[0] - XJ1_1;//l21=[(E1(1,1)-XJ1(1));(E1(1,2)-YJ1(1));(E1(1,3)-ZJ1(1))];
 800605e:	4b78      	ldr	r3, [pc, #480]	; (8006240 <jacobianoInverso+0x368>)
 8006060:	ed93 6b00 	vldr	d6, [r3]
 8006064:	4b79      	ldr	r3, [pc, #484]	; (800624c <jacobianoInverso+0x374>)
 8006066:	ed93 7b00 	vldr	d7, [r3]
 800606a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800606e:	4b84      	ldr	r3, [pc, #528]	; (8006280 <jacobianoInverso+0x3a8>)
 8006070:	ed83 7b00 	vstr	d7, [r3]
	l2[1][0] = E1[1] - YJ1_1;
 8006074:	4b72      	ldr	r3, [pc, #456]	; (8006240 <jacobianoInverso+0x368>)
 8006076:	ed93 6b02 	vldr	d6, [r3, #8]
 800607a:	4b77      	ldr	r3, [pc, #476]	; (8006258 <jacobianoInverso+0x380>)
 800607c:	ed93 7b00 	vldr	d7, [r3]
 8006080:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006084:	4b7e      	ldr	r3, [pc, #504]	; (8006280 <jacobianoInverso+0x3a8>)
 8006086:	ed83 7b06 	vstr	d7, [r3, #24]
	l2[2][0] = E1[2] - ZJ1_1;
 800608a:	4b6d      	ldr	r3, [pc, #436]	; (8006240 <jacobianoInverso+0x368>)
 800608c:	ed93 6b04 	vldr	d6, [r3, #16]
 8006090:	4b72      	ldr	r3, [pc, #456]	; (800625c <jacobianoInverso+0x384>)
 8006092:	ed93 7b00 	vldr	d7, [r3]
 8006096:	ee36 7b47 	vsub.f64	d7, d6, d7
 800609a:	4b79      	ldr	r3, [pc, #484]	; (8006280 <jacobianoInverso+0x3a8>)
 800609c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l2[0][1] = E2[0] - XJ2_1;//l22=[(E2(1,1)-XJ2(1));(E2(1,2)-YJ2(1));(E2(1,3)-ZJ2(1))];
 80060a0:	4b68      	ldr	r3, [pc, #416]	; (8006244 <jacobianoInverso+0x36c>)
 80060a2:	ed93 6b00 	vldr	d6, [r3]
 80060a6:	4b6e      	ldr	r3, [pc, #440]	; (8006260 <jacobianoInverso+0x388>)
 80060a8:	ed93 7b00 	vldr	d7, [r3]
 80060ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060b0:	4b73      	ldr	r3, [pc, #460]	; (8006280 <jacobianoInverso+0x3a8>)
 80060b2:	ed83 7b02 	vstr	d7, [r3, #8]
	l2[1][1] = E2[1] - YJ2_1;
 80060b6:	4b63      	ldr	r3, [pc, #396]	; (8006244 <jacobianoInverso+0x36c>)
 80060b8:	ed93 6b02 	vldr	d6, [r3, #8]
 80060bc:	4b6a      	ldr	r3, [pc, #424]	; (8006268 <jacobianoInverso+0x390>)
 80060be:	ed93 7b00 	vldr	d7, [r3]
 80060c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060c6:	4b6e      	ldr	r3, [pc, #440]	; (8006280 <jacobianoInverso+0x3a8>)
 80060c8:	ed83 7b08 	vstr	d7, [r3, #32]
	l2[2][1] = E2[2] - ZJ2_1;
 80060cc:	4b5d      	ldr	r3, [pc, #372]	; (8006244 <jacobianoInverso+0x36c>)
 80060ce:	ed93 6b04 	vldr	d6, [r3, #16]
 80060d2:	4b66      	ldr	r3, [pc, #408]	; (800626c <jacobianoInverso+0x394>)
 80060d4:	ed93 7b00 	vldr	d7, [r3]
 80060d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060dc:	4b68      	ldr	r3, [pc, #416]	; (8006280 <jacobianoInverso+0x3a8>)
 80060de:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l2[0][2] = E3[0] - XJ3_1;//l23=[(E3(1,1)-XJ3(1));(E3(1,2)-YJ3(1));(E3(1,3)-ZJ3(1))];
 80060e2:	4b59      	ldr	r3, [pc, #356]	; (8006248 <jacobianoInverso+0x370>)
 80060e4:	ed93 6b00 	vldr	d6, [r3]
 80060e8:	4b61      	ldr	r3, [pc, #388]	; (8006270 <jacobianoInverso+0x398>)
 80060ea:	ed93 7b00 	vldr	d7, [r3]
 80060ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060f2:	4b63      	ldr	r3, [pc, #396]	; (8006280 <jacobianoInverso+0x3a8>)
 80060f4:	ed83 7b04 	vstr	d7, [r3, #16]
	l2[1][2] = E3[1] - YJ3_1;
 80060f8:	4b53      	ldr	r3, [pc, #332]	; (8006248 <jacobianoInverso+0x370>)
 80060fa:	ed93 6b02 	vldr	d6, [r3, #8]
 80060fe:	4b5e      	ldr	r3, [pc, #376]	; (8006278 <jacobianoInverso+0x3a0>)
 8006100:	ed93 7b00 	vldr	d7, [r3]
 8006104:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006108:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <jacobianoInverso+0x3a8>)
 800610a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l2[2][2] = E3[2] - ZJ3_1;
 800610e:	4b4e      	ldr	r3, [pc, #312]	; (8006248 <jacobianoInverso+0x370>)
 8006110:	ed93 6b04 	vldr	d6, [r3, #16]
 8006114:	4b59      	ldr	r3, [pc, #356]	; (800627c <jacobianoInverso+0x3a4>)
 8006116:	ed93 7b00 	vldr	d7, [r3]
 800611a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800611e:	4b58      	ldr	r3, [pc, #352]	; (8006280 <jacobianoInverso+0x3a8>)
 8006120:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	Jcd = transpuesta(l2);				//Jacobiano de la cinematica directa
 8006124:	4c57      	ldr	r4, [pc, #348]	; (8006284 <jacobianoInverso+0x3ac>)
 8006126:	463b      	mov	r3, r7
 8006128:	4955      	ldr	r1, [pc, #340]	; (8006280 <jacobianoInverso+0x3a8>)
 800612a:	4618      	mov	r0, r3
 800612c:	f7fd fcaa 	bl	8003a84 <transpuesta>
 8006130:	4620      	mov	r0, r4
 8006132:	463b      	mov	r3, r7
 8006134:	2248      	movs	r2, #72	; 0x48
 8006136:	4619      	mov	r1, r3
 8006138:	f008 fefc 	bl	800ef34 <memcpy>

	cross_P1[0] = SA1[1] * l1[0][2] - SA1[2] * l1[0][1];//Producto Cruz entre vectores
 800613c:	4b52      	ldr	r3, [pc, #328]	; (8006288 <jacobianoInverso+0x3b0>)
 800613e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006142:	4b44      	ldr	r3, [pc, #272]	; (8006254 <jacobianoInverso+0x37c>)
 8006144:	ed93 7b04 	vldr	d7, [r3, #16]
 8006148:	ee26 6b07 	vmul.f64	d6, d6, d7
 800614c:	4b4e      	ldr	r3, [pc, #312]	; (8006288 <jacobianoInverso+0x3b0>)
 800614e:	ed93 5b04 	vldr	d5, [r3, #16]
 8006152:	4b40      	ldr	r3, [pc, #256]	; (8006254 <jacobianoInverso+0x37c>)
 8006154:	ed93 7b02 	vldr	d7, [r3, #8]
 8006158:	ee25 7b07 	vmul.f64	d7, d5, d7
 800615c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006160:	4b4a      	ldr	r3, [pc, #296]	; (800628c <jacobianoInverso+0x3b4>)
 8006162:	ed83 7b00 	vstr	d7, [r3]
	cross_P1[1] = SA1[2] * l1[0][0] - SA1[0] * l1[0][2];
 8006166:	4b48      	ldr	r3, [pc, #288]	; (8006288 <jacobianoInverso+0x3b0>)
 8006168:	ed93 6b04 	vldr	d6, [r3, #16]
 800616c:	4b39      	ldr	r3, [pc, #228]	; (8006254 <jacobianoInverso+0x37c>)
 800616e:	ed93 7b00 	vldr	d7, [r3]
 8006172:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006176:	4b44      	ldr	r3, [pc, #272]	; (8006288 <jacobianoInverso+0x3b0>)
 8006178:	ed93 5b00 	vldr	d5, [r3]
 800617c:	4b35      	ldr	r3, [pc, #212]	; (8006254 <jacobianoInverso+0x37c>)
 800617e:	ed93 7b04 	vldr	d7, [r3, #16]
 8006182:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006186:	ee36 7b47 	vsub.f64	d7, d6, d7
 800618a:	4b40      	ldr	r3, [pc, #256]	; (800628c <jacobianoInverso+0x3b4>)
 800618c:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P1[2] = SA1[0] * l1[0][1] - SA1[1] * l1[0][0];
 8006190:	4b3d      	ldr	r3, [pc, #244]	; (8006288 <jacobianoInverso+0x3b0>)
 8006192:	ed93 6b00 	vldr	d6, [r3]
 8006196:	4b2f      	ldr	r3, [pc, #188]	; (8006254 <jacobianoInverso+0x37c>)
 8006198:	ed93 7b02 	vldr	d7, [r3, #8]
 800619c:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061a0:	4b39      	ldr	r3, [pc, #228]	; (8006288 <jacobianoInverso+0x3b0>)
 80061a2:	ed93 5b02 	vldr	d5, [r3, #8]
 80061a6:	4b2b      	ldr	r3, [pc, #172]	; (8006254 <jacobianoInverso+0x37c>)
 80061a8:	ed93 7b00 	vldr	d7, [r3]
 80061ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 80061b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80061b4:	4b35      	ldr	r3, [pc, #212]	; (800628c <jacobianoInverso+0x3b4>)
 80061b6:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P2[0] = SA2[1] * l1[1][2] - SA2[2] * l1[1][1];//vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]
 80061ba:	4b35      	ldr	r3, [pc, #212]	; (8006290 <jacobianoInverso+0x3b8>)
 80061bc:	ed93 6b02 	vldr	d6, [r3, #8]
 80061c0:	4b24      	ldr	r3, [pc, #144]	; (8006254 <jacobianoInverso+0x37c>)
 80061c2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80061c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061ca:	4b31      	ldr	r3, [pc, #196]	; (8006290 <jacobianoInverso+0x3b8>)
 80061cc:	ed93 5b04 	vldr	d5, [r3, #16]
 80061d0:	4b20      	ldr	r3, [pc, #128]	; (8006254 <jacobianoInverso+0x37c>)
 80061d2:	ed93 7b08 	vldr	d7, [r3, #32]
 80061d6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80061da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80061de:	4b2d      	ldr	r3, [pc, #180]	; (8006294 <jacobianoInverso+0x3bc>)
 80061e0:	ed83 7b00 	vstr	d7, [r3]
	cross_P2[1] = SA2[2] * l1[1][0] - SA2[0] * l1[1][2];//vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]
 80061e4:	4b2a      	ldr	r3, [pc, #168]	; (8006290 <jacobianoInverso+0x3b8>)
 80061e6:	ed93 6b04 	vldr	d6, [r3, #16]
 80061ea:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <jacobianoInverso+0x37c>)
 80061ec:	ed93 7b06 	vldr	d7, [r3, #24]
 80061f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061f4:	4b26      	ldr	r3, [pc, #152]	; (8006290 <jacobianoInverso+0x3b8>)
 80061f6:	ed93 5b00 	vldr	d5, [r3]
 80061fa:	4b16      	ldr	r3, [pc, #88]	; (8006254 <jacobianoInverso+0x37c>)
 80061fc:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006200:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006204:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006208:	4b22      	ldr	r3, [pc, #136]	; (8006294 <jacobianoInverso+0x3bc>)
 800620a:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P2[2] = SA2[0] * l1[1][1] - SA2[1] * l1[1][0];//vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]
 800620e:	4b20      	ldr	r3, [pc, #128]	; (8006290 <jacobianoInverso+0x3b8>)
 8006210:	ed93 6b00 	vldr	d6, [r3]
 8006214:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <jacobianoInverso+0x37c>)
 8006216:	ed93 7b08 	vldr	d7, [r3, #32]
 800621a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800621e:	e03b      	b.n	8006298 <jacobianoInverso+0x3c0>
	...
 8006228:	1eb851ec 	.word	0x1eb851ec
 800622c:	3fb1eb85 	.word	0x3fb1eb85
 8006230:	562574c0 	.word	0x562574c0
 8006234:	3faf09d1 	.word	0x3faf09d1
 8006238:	1eb851ec 	.word	0x1eb851ec
 800623c:	3fa1eb85 	.word	0x3fa1eb85
 8006240:	24000838 	.word	0x24000838
 8006244:	24000850 	.word	0x24000850
 8006248:	24000868 	.word	0x24000868
 800624c:	240002c0 	.word	0x240002c0
 8006250:	24000018 	.word	0x24000018
 8006254:	24000880 	.word	0x24000880
 8006258:	240002d0 	.word	0x240002d0
 800625c:	240002e0 	.word	0x240002e0
 8006260:	24000308 	.word	0x24000308
 8006264:	24000030 	.word	0x24000030
 8006268:	24000318 	.word	0x24000318
 800626c:	24000328 	.word	0x24000328
 8006270:	24000350 	.word	0x24000350
 8006274:	24000048 	.word	0x24000048
 8006278:	24000360 	.word	0x24000360
 800627c:	24000370 	.word	0x24000370
 8006280:	240008c8 	.word	0x240008c8
 8006284:	24000910 	.word	0x24000910
 8006288:	24000060 	.word	0x24000060
 800628c:	24000a30 	.word	0x24000a30
 8006290:	24000078 	.word	0x24000078
 8006294:	24000a48 	.word	0x24000a48
 8006298:	4b92      	ldr	r3, [pc, #584]	; (80064e4 <jacobianoInverso+0x60c>)
 800629a:	ed93 5b02 	vldr	d5, [r3, #8]
 800629e:	4b92      	ldr	r3, [pc, #584]	; (80064e8 <jacobianoInverso+0x610>)
 80062a0:	ed93 7b06 	vldr	d7, [r3, #24]
 80062a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80062a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80062ac:	4b8f      	ldr	r3, [pc, #572]	; (80064ec <jacobianoInverso+0x614>)
 80062ae:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P3[0] = SA3[1] * l1[2][2] - SA3[2] * l1[2][1];
 80062b2:	4b8f      	ldr	r3, [pc, #572]	; (80064f0 <jacobianoInverso+0x618>)
 80062b4:	ed93 6b02 	vldr	d6, [r3, #8]
 80062b8:	4b8b      	ldr	r3, [pc, #556]	; (80064e8 <jacobianoInverso+0x610>)
 80062ba:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80062be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80062c2:	4b8b      	ldr	r3, [pc, #556]	; (80064f0 <jacobianoInverso+0x618>)
 80062c4:	ed93 5b04 	vldr	d5, [r3, #16]
 80062c8:	4b87      	ldr	r3, [pc, #540]	; (80064e8 <jacobianoInverso+0x610>)
 80062ca:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80062ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80062d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80062d6:	4b87      	ldr	r3, [pc, #540]	; (80064f4 <jacobianoInverso+0x61c>)
 80062d8:	ed83 7b00 	vstr	d7, [r3]
	cross_P3[1] = SA3[2] * l1[2][0] - SA3[0] * l1[2][2];
 80062dc:	4b84      	ldr	r3, [pc, #528]	; (80064f0 <jacobianoInverso+0x618>)
 80062de:	ed93 6b04 	vldr	d6, [r3, #16]
 80062e2:	4b81      	ldr	r3, [pc, #516]	; (80064e8 <jacobianoInverso+0x610>)
 80062e4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80062e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80062ec:	4b80      	ldr	r3, [pc, #512]	; (80064f0 <jacobianoInverso+0x618>)
 80062ee:	ed93 5b00 	vldr	d5, [r3]
 80062f2:	4b7d      	ldr	r3, [pc, #500]	; (80064e8 <jacobianoInverso+0x610>)
 80062f4:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80062f8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80062fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006300:	4b7c      	ldr	r3, [pc, #496]	; (80064f4 <jacobianoInverso+0x61c>)
 8006302:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P3[2] = SA3[0] * l1[2][1] - SA3[1] * l1[2][0];
 8006306:	4b7a      	ldr	r3, [pc, #488]	; (80064f0 <jacobianoInverso+0x618>)
 8006308:	ed93 6b00 	vldr	d6, [r3]
 800630c:	4b76      	ldr	r3, [pc, #472]	; (80064e8 <jacobianoInverso+0x610>)
 800630e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8006312:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006316:	4b76      	ldr	r3, [pc, #472]	; (80064f0 <jacobianoInverso+0x618>)
 8006318:	ed93 5b02 	vldr	d5, [r3, #8]
 800631c:	4b72      	ldr	r3, [pc, #456]	; (80064e8 <jacobianoInverso+0x610>)
 800631e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006322:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006326:	ee36 7b47 	vsub.f64	d7, d6, d7
 800632a:	4b72      	ldr	r3, [pc, #456]	; (80064f4 <jacobianoInverso+0x61c>)
 800632c:	ed83 7b04 	vstr	d7, [r3, #16]

	dot[0] = productDot(cross_P1, Jcd.m[0]);			//Producto Punto
 8006330:	4971      	ldr	r1, [pc, #452]	; (80064f8 <jacobianoInverso+0x620>)
 8006332:	4872      	ldr	r0, [pc, #456]	; (80064fc <jacobianoInverso+0x624>)
 8006334:	f7fd fbe2 	bl	8003afc <productDot>
 8006338:	eeb0 7b40 	vmov.f64	d7, d0
 800633c:	4b70      	ldr	r3, [pc, #448]	; (8006500 <jacobianoInverso+0x628>)
 800633e:	ed83 7b00 	vstr	d7, [r3]
	dot[1] = productDot(cross_P2, Jcd.m[1]);
 8006342:	4970      	ldr	r1, [pc, #448]	; (8006504 <jacobianoInverso+0x62c>)
 8006344:	4869      	ldr	r0, [pc, #420]	; (80064ec <jacobianoInverso+0x614>)
 8006346:	f7fd fbd9 	bl	8003afc <productDot>
 800634a:	eeb0 7b40 	vmov.f64	d7, d0
 800634e:	4b6c      	ldr	r3, [pc, #432]	; (8006500 <jacobianoInverso+0x628>)
 8006350:	ed83 7b02 	vstr	d7, [r3, #8]
	dot[2] = productDot(cross_P3, Jcd.m[2]);
 8006354:	496c      	ldr	r1, [pc, #432]	; (8006508 <jacobianoInverso+0x630>)
 8006356:	4867      	ldr	r0, [pc, #412]	; (80064f4 <jacobianoInverso+0x61c>)
 8006358:	f7fd fbd0 	bl	8003afc <productDot>
 800635c:	eeb0 7b40 	vmov.f64	d7, d0
 8006360:	4b67      	ldr	r3, [pc, #412]	; (8006500 <jacobianoInverso+0x628>)
 8006362:	ed83 7b04 	vstr	d7, [r3, #16]

	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8006366:	2300      	movs	r3, #0
 8006368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800636c:	e03d      	b.n	80063ea <jacobianoInverso+0x512>
		for (int j = 0; j < 3; ++j) {
 800636e:	2300      	movs	r3, #0
 8006370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006374:	e030      	b.n	80063d8 <jacobianoInverso+0x500>
			if (i == j) {
 8006376:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800637a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800637e:	429a      	cmp	r2, r3
 8006380:	d114      	bne.n	80063ac <jacobianoInverso+0x4d4>
				Jci[i][j] = dot[i];
 8006382:	4a5f      	ldr	r2, [pc, #380]	; (8006500 <jacobianoInverso+0x628>)
 8006384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	4413      	add	r3, r2
 800638c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006390:	4c5e      	ldr	r4, [pc, #376]	; (800650c <jacobianoInverso+0x634>)
 8006392:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006396:	4613      	mov	r3, r2
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	4413      	add	r3, r2
 800639c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063a0:	4413      	add	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	4423      	add	r3, r4
 80063a6:	e9c3 0100 	strd	r0, r1, [r3]
 80063aa:	e010      	b.n	80063ce <jacobianoInverso+0x4f6>
			} else {
				Jci[i][j] = 0;
 80063ac:	4957      	ldr	r1, [pc, #348]	; (800650c <jacobianoInverso+0x634>)
 80063ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063b2:	4613      	mov	r3, r2
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	4413      	add	r3, r2
 80063b8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063bc:	4413      	add	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	4419      	add	r1, r3
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; ++j) {
 80063ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063d2:	3301      	adds	r3, #1
 80063d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063dc:	2b02      	cmp	r3, #2
 80063de:	ddca      	ble.n	8006376 <jacobianoInverso+0x49e>
	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 80063e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063e4:	3301      	adds	r3, #1
 80063e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	ddbd      	ble.n	800636e <jacobianoInverso+0x496>
			}
		}
	}

	Jci_inv = inversa(Jci);
 80063f2:	4c47      	ldr	r4, [pc, #284]	; (8006510 <jacobianoInverso+0x638>)
 80063f4:	463b      	mov	r3, r7
 80063f6:	4945      	ldr	r1, [pc, #276]	; (800650c <jacobianoInverso+0x634>)
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fd fcaf 	bl	8003d5c <inversa>
 80063fe:	4620      	mov	r0, r4
 8006400:	463b      	mov	r3, r7
 8006402:	2248      	movs	r2, #72	; 0x48
 8006404:	4619      	mov	r1, r3
 8006406:	f008 fd95 	bl	800ef34 <memcpy>
	Jinv = productMatriz(Jcd.m,Jci_inv.m);	//Jacobiano Inverso
 800640a:	4c42      	ldr	r4, [pc, #264]	; (8006514 <jacobianoInverso+0x63c>)
 800640c:	463b      	mov	r3, r7
 800640e:	4a40      	ldr	r2, [pc, #256]	; (8006510 <jacobianoInverso+0x638>)
 8006410:	4939      	ldr	r1, [pc, #228]	; (80064f8 <jacobianoInverso+0x620>)
 8006412:	4618      	mov	r0, r3
 8006414:	f7fd fd10 	bl	8003e38 <productMatriz>
 8006418:	4620      	mov	r0, r4
 800641a:	463b      	mov	r3, r7
 800641c:	2248      	movs	r2, #72	; 0x48
 800641e:	4619      	mov	r1, r3
 8006420:	f008 fd88 	bl	800ef34 <memcpy>

	for (int i = 0; i < 3; ++i) {
 8006424:	2300      	movs	r3, #0
 8006426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800642a:	e041      	b.n	80064b0 <jacobianoInverso+0x5d8>
		double sum = 0;
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 8006438:	2300      	movs	r3, #0
 800643a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800643e:	e025      	b.n	800648c <jacobianoInverso+0x5b4>
			sum += sum + Jinv.m[i][j] * Vaux[j];
 8006440:	4934      	ldr	r1, [pc, #208]	; (8006514 <jacobianoInverso+0x63c>)
 8006442:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006446:	4613      	mov	r3, r2
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	4413      	add	r3, r2
 800644c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006450:	4413      	add	r3, r2
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	440b      	add	r3, r1
 8006456:	ed93 6b00 	vldr	d6, [r3]
 800645a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	33b0      	adds	r3, #176	; 0xb0
 8006462:	443b      	add	r3, r7
 8006464:	3b38      	subs	r3, #56	; 0x38
 8006466:	ed93 7b00 	vldr	d7, [r3]
 800646a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800646e:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8006472:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006476:	ed97 6b26 	vldr	d6, [r7, #152]	; 0x98
 800647a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800647e:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 8006482:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006486:	3301      	adds	r3, #1
 8006488:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800648c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006490:	2b02      	cmp	r3, #2
 8006492:	ddd5      	ble.n	8006440 <jacobianoInverso+0x568>
		}
		omega[i] = sum;
 8006494:	4a20      	ldr	r2, [pc, #128]	; (8006518 <jacobianoInverso+0x640>)
 8006496:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	18d1      	adds	r1, r2, r3
 800649e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80064a2:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; ++i) {
 80064a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80064aa:	3301      	adds	r3, #1
 80064ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	ddb9      	ble.n	800642c <jacobianoInverso+0x554>
	}
	omega1 = omega[0];
 80064b8:	4b17      	ldr	r3, [pc, #92]	; (8006518 <jacobianoInverso+0x640>)
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	4917      	ldr	r1, [pc, #92]	; (800651c <jacobianoInverso+0x644>)
 80064c0:	e9c1 2300 	strd	r2, r3, [r1]
	omega2 = omega[1];
 80064c4:	4b14      	ldr	r3, [pc, #80]	; (8006518 <jacobianoInverso+0x640>)
 80064c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80064ca:	4915      	ldr	r1, [pc, #84]	; (8006520 <jacobianoInverso+0x648>)
 80064cc:	e9c1 2300 	strd	r2, r3, [r1]
	omega3 = omega[2];
 80064d0:	4b11      	ldr	r3, [pc, #68]	; (8006518 <jacobianoInverso+0x640>)
 80064d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80064d6:	4913      	ldr	r1, [pc, #76]	; (8006524 <jacobianoInverso+0x64c>)
 80064d8:	e9c1 2300 	strd	r2, r3, [r1]

}
 80064dc:	bf00      	nop
 80064de:	37b4      	adds	r7, #180	; 0xb4
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd90      	pop	{r4, r7, pc}
 80064e4:	24000078 	.word	0x24000078
 80064e8:	24000880 	.word	0x24000880
 80064ec:	24000a48 	.word	0x24000a48
 80064f0:	24000090 	.word	0x24000090
 80064f4:	24000a60 	.word	0x24000a60
 80064f8:	24000910 	.word	0x24000910
 80064fc:	24000a30 	.word	0x24000a30
 8006500:	24000a78 	.word	0x24000a78
 8006504:	24000928 	.word	0x24000928
 8006508:	24000940 	.word	0x24000940
 800650c:	24000958 	.word	0x24000958
 8006510:	240009a0 	.word	0x240009a0
 8006514:	240009e8 	.word	0x240009e8
 8006518:	24000470 	.word	0x24000470
 800651c:	240004e8 	.word	0x240004e8
 8006520:	240004f0 	.word	0x240004f0
 8006524:	240004f8 	.word	0x240004f8

08006528 <SetPerfilTimers>:

void SetPerfilTimers(double omeg1, double omeg2, double omeg3) {	// velAng en rpm
 8006528:	b480      	push	{r7}
 800652a:	b089      	sub	sp, #36	; 0x24
 800652c:	af00      	add	r7, sp, #0
 800652e:	ed87 0b04 	vstr	d0, [r7, #16]
 8006532:	ed87 1b02 	vstr	d1, [r7, #8]
 8006536:	ed87 2b00 	vstr	d2, [r7]
	 *   Funcion que configura el PWM del timer 12,13 14, para que el motor vaya a la
	 *   velocidad deseada.
	 *   Entrada: velocidad Angular de cada eslabon, en rad/s.
	 ----------------------------------------------------------------------- */

		rpm1 = (omeg1*((60.00)/(2.00*pi)));
 800653a:	ed97 7b04 	vldr	d7, [r7, #16]
 800653e:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8006770 <SetPerfilTimers+0x248>
 8006542:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006546:	4b92      	ldr	r3, [pc, #584]	; (8006790 <SetPerfilTimers+0x268>)
 8006548:	ed83 7b00 	vstr	d7, [r3]
		rpm2 = (omeg2*((60.00)/(2.00*pi)));
 800654c:	ed97 7b02 	vldr	d7, [r7, #8]
 8006550:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8006770 <SetPerfilTimers+0x248>
 8006554:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006558:	4b8e      	ldr	r3, [pc, #568]	; (8006794 <SetPerfilTimers+0x26c>)
 800655a:	ed83 7b00 	vstr	d7, [r3]
		rpm3 = (omeg3*((60.00)/(2.00*pi)));
 800655e:	ed97 7b00 	vldr	d7, [r7]
 8006562:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8006770 <SetPerfilTimers+0x248>
 8006566:	ee27 7b06 	vmul.f64	d7, d7, d6
 800656a:	4b8b      	ldr	r3, [pc, #556]	; (8006798 <SetPerfilTimers+0x270>)
 800656c:	ed83 7b00 	vstr	d7, [r3]
		if(rpm1<=0.1){
 8006570:	4b87      	ldr	r3, [pc, #540]	; (8006790 <SetPerfilTimers+0x268>)
 8006572:	ed93 7b00 	vldr	d7, [r3]
 8006576:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8006778 <SetPerfilTimers+0x250>
 800657a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800657e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006582:	d805      	bhi.n	8006590 <SetPerfilTimers+0x68>
			rpm1=0.1;
 8006584:	4982      	ldr	r1, [pc, #520]	; (8006790 <SetPerfilTimers+0x268>)
 8006586:	a37c      	add	r3, pc, #496	; (adr r3, 8006778 <SetPerfilTimers+0x250>)
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm2<=0.1){
 8006590:	4b80      	ldr	r3, [pc, #512]	; (8006794 <SetPerfilTimers+0x26c>)
 8006592:	ed93 7b00 	vldr	d7, [r3]
 8006596:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8006778 <SetPerfilTimers+0x250>
 800659a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800659e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a2:	d805      	bhi.n	80065b0 <SetPerfilTimers+0x88>
			rpm2=0.1;
 80065a4:	497b      	ldr	r1, [pc, #492]	; (8006794 <SetPerfilTimers+0x26c>)
 80065a6:	a374      	add	r3, pc, #464	; (adr r3, 8006778 <SetPerfilTimers+0x250>)
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm3<=0.1){
 80065b0:	4b79      	ldr	r3, [pc, #484]	; (8006798 <SetPerfilTimers+0x270>)
 80065b2:	ed93 7b00 	vldr	d7, [r3]
 80065b6:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8006778 <SetPerfilTimers+0x250>
 80065ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80065be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c2:	d805      	bhi.n	80065d0 <SetPerfilTimers+0xa8>
			rpm3=0.1;
 80065c4:	4974      	ldr	r1, [pc, #464]	; (8006798 <SetPerfilTimers+0x270>)
 80065c6:	a36c      	add	r3, pc, #432	; (adr r3, 8006778 <SetPerfilTimers+0x250>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	e9c1 2300 	strd	r2, r3, [r1]
		}


		periodoM[0] = (((FCL * 60.00) / ((double)rpm1 * ((double)(TIM12->PSC) + 1.00) * 9600.00)) - 1.00);	//Fpwm = 64M / ((ARR+1)*(PSC+1)
 80065d0:	4b72      	ldr	r3, [pc, #456]	; (800679c <SetPerfilTimers+0x274>)
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	ee07 3a90 	vmov	s15, r3
 80065d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065e0:	ee37 6b06 	vadd.f64	d6, d7, d6
 80065e4:	4b6a      	ldr	r3, [pc, #424]	; (8006790 <SetPerfilTimers+0x268>)
 80065e6:	ed93 7b00 	vldr	d7, [r3]
 80065ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80065ee:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8006780 <SetPerfilTimers+0x258>
 80065f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065f6:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8006788 <SetPerfilTimers+0x260>
 80065fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80065fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006602:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006606:	4b66      	ldr	r3, [pc, #408]	; (80067a0 <SetPerfilTimers+0x278>)
 8006608:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1] = (((FCL * 60.00) / ((double)rpm2 * ((double)(TIM13->PSC) + 1.00) * 9600.00)) - 1.00);
 800660c:	4b65      	ldr	r3, [pc, #404]	; (80067a4 <SetPerfilTimers+0x27c>)
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	ee07 3a90 	vmov	s15, r3
 8006614:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006618:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800661c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006620:	4b5c      	ldr	r3, [pc, #368]	; (8006794 <SetPerfilTimers+0x26c>)
 8006622:	ed93 7b00 	vldr	d7, [r3]
 8006626:	ee26 7b07 	vmul.f64	d7, d6, d7
 800662a:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8006780 <SetPerfilTimers+0x258>
 800662e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006632:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8006788 <SetPerfilTimers+0x260>
 8006636:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800663a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800663e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006642:	4b57      	ldr	r3, [pc, #348]	; (80067a0 <SetPerfilTimers+0x278>)
 8006644:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2] = (((FCL * 60.00) / ((double)rpm3 * ((double)(TIM14->PSC) + 1.00) * 9600.00)) - 1.00);
 8006648:	4b57      	ldr	r3, [pc, #348]	; (80067a8 <SetPerfilTimers+0x280>)
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006654:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006658:	ee37 6b06 	vadd.f64	d6, d7, d6
 800665c:	4b4e      	ldr	r3, [pc, #312]	; (8006798 <SetPerfilTimers+0x270>)
 800665e:	ed93 7b00 	vldr	d7, [r3]
 8006662:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006666:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8006780 <SetPerfilTimers+0x258>
 800666a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800666e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8006788 <SetPerfilTimers+0x260>
 8006672:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006676:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800667a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800667e:	4b48      	ldr	r3, [pc, #288]	; (80067a0 <SetPerfilTimers+0x278>)
 8006680:	ed83 7b04 	vstr	d7, [r3, #16]


		// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo --------------
		for (int i = 0; i < 3; ++i) {
 8006684:	2300      	movs	r3, #0
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	e0ad      	b.n	80067e6 <SetPerfilTimers+0x2be>
			ErrorPeriodo[i] = periodoM[i] - (double) ((int32_t) periodoM[i]);
 800668a:	4a45      	ldr	r2, [pc, #276]	; (80067a0 <SetPerfilTimers+0x278>)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	4413      	add	r3, r2
 8006692:	ed93 6b00 	vldr	d6, [r3]
 8006696:	4a42      	ldr	r2, [pc, #264]	; (80067a0 <SetPerfilTimers+0x278>)
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	4413      	add	r3, r2
 800669e:	ed93 7b00 	vldr	d7, [r3]
 80066a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80066a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80066ae:	4a3f      	ldr	r2, [pc, #252]	; (80067ac <SetPerfilTimers+0x284>)
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	4413      	add	r3, r2
 80066b6:	ed83 7b00 	vstr	d7, [r3]
			ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] + ErrorPeriodo[i];
 80066ba:	4a3d      	ldr	r2, [pc, #244]	; (80067b0 <SetPerfilTimers+0x288>)
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	4413      	add	r3, r2
 80066c2:	ed93 6b00 	vldr	d6, [r3]
 80066c6:	4a39      	ldr	r2, [pc, #228]	; (80067ac <SetPerfilTimers+0x284>)
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	4413      	add	r3, r2
 80066ce:	ed93 7b00 	vldr	d7, [r3]
 80066d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80066d6:	4a36      	ldr	r2, [pc, #216]	; (80067b0 <SetPerfilTimers+0x288>)
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	4413      	add	r3, r2
 80066de:	ed83 7b00 	vstr	d7, [r3]
			if (ErrorAcumuladoPeriodo[i] > 1) {
 80066e2:	4a33      	ldr	r2, [pc, #204]	; (80067b0 <SetPerfilTimers+0x288>)
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	4413      	add	r3, r2
 80066ea:	ed93 7b00 	vldr	d7, [r3]
 80066ee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80066f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fa:	dd1f      	ble.n	800673c <SetPerfilTimers+0x214>
				periodoM[i] = periodoM[i] + 1;
 80066fc:	4a28      	ldr	r2, [pc, #160]	; (80067a0 <SetPerfilTimers+0x278>)
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	4413      	add	r3, r2
 8006704:	ed93 7b00 	vldr	d7, [r3]
 8006708:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800670c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006710:	4a23      	ldr	r2, [pc, #140]	; (80067a0 <SetPerfilTimers+0x278>)
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	4413      	add	r3, r2
 8006718:	ed83 7b00 	vstr	d7, [r3]
				ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] - 1;
 800671c:	4a24      	ldr	r2, [pc, #144]	; (80067b0 <SetPerfilTimers+0x288>)
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	4413      	add	r3, r2
 8006724:	ed93 7b00 	vldr	d7, [r3]
 8006728:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800672c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006730:	4a1f      	ldr	r2, [pc, #124]	; (80067b0 <SetPerfilTimers+0x288>)
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4413      	add	r3, r2
 8006738:	ed83 7b00 	vstr	d7, [r3]
			}
			if (periodoM[i] < 2) {
 800673c:	4a18      	ldr	r2, [pc, #96]	; (80067a0 <SetPerfilTimers+0x278>)
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	4413      	add	r3, r2
 8006744:	ed93 7b00 	vldr	d7, [r3]
 8006748:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800674c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006754:	d52e      	bpl.n	80067b4 <SetPerfilTimers+0x28c>
				periodoM[i] = 0; // velocidad lineal de 10.000mm/s !!!
 8006756:	4a12      	ldr	r2, [pc, #72]	; (80067a0 <SetPerfilTimers+0x278>)
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	18d1      	adds	r1, r2, r3
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	e9c1 2300 	strd	r2, r3, [r1]
 800676a:	e039      	b.n	80067e0 <SetPerfilTimers+0x2b8>
 800676c:	f3af 8000 	nop.w
 8006770:	66ed2a99 	.word	0x66ed2a99
 8006774:	4023193d 	.word	0x4023193d
 8006778:	9999999a 	.word	0x9999999a
 800677c:	3fb99999 	.word	0x3fb99999
 8006780:	00000000 	.word	0x00000000
 8006784:	40c2c000 	.word	0x40c2c000
 8006788:	00000000 	.word	0x00000000
 800678c:	41ec9c38 	.word	0x41ec9c38
 8006790:	24000528 	.word	0x24000528
 8006794:	24000530 	.word	0x24000530
 8006798:	24000538 	.word	0x24000538
 800679c:	40001800 	.word	0x40001800
 80067a0:	24000500 	.word	0x24000500
 80067a4:	40001c00 	.word	0x40001c00
 80067a8:	40002000 	.word	0x40002000
 80067ac:	24000540 	.word	0x24000540
 80067b0:	24000558 	.word	0x24000558
			}

			else if (periodoM[i] > pow(2, 16)) { 		// desborde de timer 32 bits
 80067b4:	4a98      	ldr	r2, [pc, #608]	; (8006a18 <SetPerfilTimers+0x4f0>)
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	4413      	add	r3, r2
 80067bc:	ed93 7b00 	vldr	d7, [r3]
 80067c0:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8006a00 <SetPerfilTimers+0x4d8>
 80067c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80067c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067cc:	dd08      	ble.n	80067e0 <SetPerfilTimers+0x2b8>
				periodoM[i] = pow(2, 16);
 80067ce:	4a92      	ldr	r2, [pc, #584]	; (8006a18 <SetPerfilTimers+0x4f0>)
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	18d1      	adds	r1, r2, r3
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	4b90      	ldr	r3, [pc, #576]	; (8006a1c <SetPerfilTimers+0x4f4>)
 80067dc:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	3301      	adds	r3, #1
 80067e4:	61fb      	str	r3, [r7, #28]
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	f77f af4e 	ble.w	800668a <SetPerfilTimers+0x162>
			}
		}

			periodoM[0]=(uint32_t)(((FCL * 60.0) / (rpm1 * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 80067ee:	4b8c      	ldr	r3, [pc, #560]	; (8006a20 <SetPerfilTimers+0x4f8>)
 80067f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80067fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80067fe:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006802:	4b88      	ldr	r3, [pc, #544]	; (8006a24 <SetPerfilTimers+0x4fc>)
 8006804:	ed93 7b00 	vldr	d7, [r3]
 8006808:	ee26 7b07 	vmul.f64	d7, d6, d7
 800680c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8006a08 <SetPerfilTimers+0x4e0>
 8006810:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006814:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 8006a10 <SetPerfilTimers+0x4e8>
 8006818:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800681c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006820:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006824:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006828:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800682c:	4b7a      	ldr	r3, [pc, #488]	; (8006a18 <SetPerfilTimers+0x4f0>)
 800682e:	ed83 7b00 	vstr	d7, [r3]
			periodoM[1]=(uint32_t)(((FCL * 60.0) / (rpm2 * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8006832:	4b7d      	ldr	r3, [pc, #500]	; (8006a28 <SetPerfilTimers+0x500>)
 8006834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800683e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006842:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006846:	4b79      	ldr	r3, [pc, #484]	; (8006a2c <SetPerfilTimers+0x504>)
 8006848:	ed93 7b00 	vldr	d7, [r3]
 800684c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006850:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8006a08 <SetPerfilTimers+0x4e0>
 8006854:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006858:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 8006a10 <SetPerfilTimers+0x4e8>
 800685c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006860:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006864:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006868:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800686c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006870:	4b69      	ldr	r3, [pc, #420]	; (8006a18 <SetPerfilTimers+0x4f0>)
 8006872:	ed83 7b02 	vstr	d7, [r3, #8]
			periodoM[2]=(uint32_t)(((FCL * 60.0) / (rpm3 * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 8006876:	4b6e      	ldr	r3, [pc, #440]	; (8006a30 <SetPerfilTimers+0x508>)
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006882:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006886:	ee37 6b06 	vadd.f64	d6, d7, d6
 800688a:	4b6a      	ldr	r3, [pc, #424]	; (8006a34 <SetPerfilTimers+0x50c>)
 800688c:	ed93 7b00 	vldr	d7, [r3]
 8006890:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006894:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8006a08 <SetPerfilTimers+0x4e0>
 8006898:	ee27 6b06 	vmul.f64	d6, d7, d6
 800689c:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8006a10 <SetPerfilTimers+0x4e8>
 80068a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80068a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80068ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80068b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80068b4:	4b58      	ldr	r3, [pc, #352]	; (8006a18 <SetPerfilTimers+0x4f0>)
 80068b6:	ed83 7b04 	vstr	d7, [r3, #16]


			if (TIM12->CNT > periodoM[0]) {
 80068ba:	4b59      	ldr	r3, [pc, #356]	; (8006a20 <SetPerfilTimers+0x4f8>)
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80068c6:	4b54      	ldr	r3, [pc, #336]	; (8006a18 <SetPerfilTimers+0x4f0>)
 80068c8:	ed93 7b00 	vldr	d7, [r3]
 80068cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80068d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d4:	dd0c      	ble.n	80068f0 <SetPerfilTimers+0x3c8>
						TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80068d6:	4b50      	ldr	r3, [pc, #320]	; (8006a18 <SetPerfilTimers+0x4f0>)
 80068d8:	ed93 7b00 	vldr	d7, [r3]
 80068dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80068e4:	4b4e      	ldr	r3, [pc, #312]	; (8006a20 <SetPerfilTimers+0x4f8>)
 80068e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80068ea:	ee17 2a90 	vmov	r2, s15
 80068ee:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM13->CNT > periodoM[1]) {
 80068f0:	4b4d      	ldr	r3, [pc, #308]	; (8006a28 <SetPerfilTimers+0x500>)
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	ee07 3a90 	vmov	s15, r3
 80068f8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80068fc:	4b46      	ldr	r3, [pc, #280]	; (8006a18 <SetPerfilTimers+0x4f0>)
 80068fe:	ed93 7b02 	vldr	d7, [r3, #8]
 8006902:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800690a:	dd0c      	ble.n	8006926 <SetPerfilTimers+0x3fe>
						TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 800690c:	4b42      	ldr	r3, [pc, #264]	; (8006a18 <SetPerfilTimers+0x4f0>)
 800690e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006912:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006916:	ee37 7b46 	vsub.f64	d7, d7, d6
 800691a:	4b43      	ldr	r3, [pc, #268]	; (8006a28 <SetPerfilTimers+0x500>)
 800691c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006920:	ee17 2a90 	vmov	r2, s15
 8006924:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM14->CNT > periodoM[2]) {
 8006926:	4b42      	ldr	r3, [pc, #264]	; (8006a30 <SetPerfilTimers+0x508>)
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006932:	4b39      	ldr	r3, [pc, #228]	; (8006a18 <SetPerfilTimers+0x4f0>)
 8006934:	ed93 7b04 	vldr	d7, [r3, #16]
 8006938:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800693c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006940:	dd0c      	ble.n	800695c <SetPerfilTimers+0x434>
						TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8006942:	4b35      	ldr	r3, [pc, #212]	; (8006a18 <SetPerfilTimers+0x4f0>)
 8006944:	ed93 7b04 	vldr	d7, [r3, #16]
 8006948:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800694c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006950:	4b37      	ldr	r3, [pc, #220]	; (8006a30 <SetPerfilTimers+0x508>)
 8006952:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006956:	ee17 2a90 	vmov	r2, s15
 800695a:	625a      	str	r2, [r3, #36]	; 0x24
			}

			TIM12->ARR =periodoM[0];
 800695c:	4b2e      	ldr	r3, [pc, #184]	; (8006a18 <SetPerfilTimers+0x4f0>)
 800695e:	ed93 7b00 	vldr	d7, [r3]
 8006962:	4b2f      	ldr	r3, [pc, #188]	; (8006a20 <SetPerfilTimers+0x4f8>)
 8006964:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006968:	ee17 2a90 	vmov	r2, s15
 800696c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 800696e:	4b2c      	ldr	r3, [pc, #176]	; (8006a20 <SetPerfilTimers+0x4f8>)
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800697a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800697e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006982:	4b27      	ldr	r3, [pc, #156]	; (8006a20 <SetPerfilTimers+0x4f8>)
 8006984:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006988:	ee17 2a90 	vmov	r2, s15
 800698c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->ARR =periodoM[1];
 800698e:	4b22      	ldr	r3, [pc, #136]	; (8006a18 <SetPerfilTimers+0x4f0>)
 8006990:	ed93 7b02 	vldr	d7, [r3, #8]
 8006994:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <SetPerfilTimers+0x500>)
 8006996:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800699a:	ee17 2a90 	vmov	r2, s15
 800699e:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 80069a0:	4b21      	ldr	r3, [pc, #132]	; (8006a28 <SetPerfilTimers+0x500>)
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	ee07 3a90 	vmov	s15, r3
 80069a8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80069ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80069b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069b4:	4b1c      	ldr	r3, [pc, #112]	; (8006a28 <SetPerfilTimers+0x500>)
 80069b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80069ba:	ee17 2a90 	vmov	r2, s15
 80069be:	635a      	str	r2, [r3, #52]	; 0x34
			TIM14->ARR =periodoM[2];
 80069c0:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <SetPerfilTimers+0x4f0>)
 80069c2:	ed93 7b04 	vldr	d7, [r3, #16]
 80069c6:	4b1a      	ldr	r3, [pc, #104]	; (8006a30 <SetPerfilTimers+0x508>)
 80069c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80069cc:	ee17 2a90 	vmov	r2, s15
 80069d0:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80069d2:	4b17      	ldr	r3, [pc, #92]	; (8006a30 <SetPerfilTimers+0x508>)
 80069d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80069de:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80069e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069e6:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <SetPerfilTimers+0x508>)
 80069e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80069ec:	ee17 2a90 	vmov	r2, s15
 80069f0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->CNT = Periodo[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		if (TIM14->CNT > Periodo[2]) {
			TIM14->CNT = Periodo[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}*/
}
 80069f2:	bf00      	nop
 80069f4:	3724      	adds	r7, #36	; 0x24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	00000000 	.word	0x00000000
 8006a04:	40f00000 	.word	0x40f00000
 8006a08:	00000000 	.word	0x00000000
 8006a0c:	40c2c000 	.word	0x40c2c000
 8006a10:	00000000 	.word	0x00000000
 8006a14:	41ec9c38 	.word	0x41ec9c38
 8006a18:	24000500 	.word	0x24000500
 8006a1c:	40f00000 	.word	0x40f00000
 8006a20:	40001800 	.word	0x40001800
 8006a24:	24000528 	.word	0x24000528
 8006a28:	40001c00 	.word	0x40001c00
 8006a2c:	24000530 	.word	0x24000530
 8006a30:	40002000 	.word	0x40002000
 8006a34:	24000538 	.word	0x24000538

08006a38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006a3c:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a3e:	4a23      	ldr	r2, [pc, #140]	; (8006acc <MX_USART1_UART_Init+0x94>)
 8006a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006a42:	4b21      	ldr	r3, [pc, #132]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006a4a:	4b1f      	ldr	r3, [pc, #124]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006a50:	4b1d      	ldr	r3, [pc, #116]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006a56:	4b1c      	ldr	r3, [pc, #112]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006a5c:	4b1a      	ldr	r3, [pc, #104]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a5e:	220c      	movs	r2, #12
 8006a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a62:	4b19      	ldr	r3, [pc, #100]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a68:	4b17      	ldr	r3, [pc, #92]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006a6e:	4b16      	ldr	r3, [pc, #88]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006a74:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006a7a:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a80:	4811      	ldr	r0, [pc, #68]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a82:	f005 fecf 	bl	800c824 <HAL_UART_Init>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006a8c:	f7fc fdc0 	bl	8003610 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a90:	2100      	movs	r1, #0
 8006a92:	480d      	ldr	r0, [pc, #52]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006a94:	f008 f959 	bl	800ed4a <HAL_UARTEx_SetTxFifoThreshold>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006a9e:	f7fc fdb7 	bl	8003610 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4808      	ldr	r0, [pc, #32]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006aa6:	f008 f98e 	bl	800edc6 <HAL_UARTEx_SetRxFifoThreshold>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006ab0:	f7fc fdae 	bl	8003610 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006ab4:	4804      	ldr	r0, [pc, #16]	; (8006ac8 <MX_USART1_UART_Init+0x90>)
 8006ab6:	f008 f90f 	bl	800ecd8 <HAL_UARTEx_DisableFifoMode>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006ac0:	f7fc fda6 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006ac4:	bf00      	nop
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	24000bd0 	.word	0x24000bd0
 8006acc:	40011000 	.word	0x40011000

08006ad0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006ad4:	4b22      	ldr	r3, [pc, #136]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006ad6:	4a23      	ldr	r2, [pc, #140]	; (8006b64 <MX_USART2_UART_Init+0x94>)
 8006ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006ada:	4b21      	ldr	r3, [pc, #132]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006adc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006ae2:	4b1f      	ldr	r3, [pc, #124]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ae8:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006aee:	4b1c      	ldr	r3, [pc, #112]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006af4:	4b1a      	ldr	r3, [pc, #104]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006af6:	220c      	movs	r2, #12
 8006af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006afa:	4b19      	ldr	r3, [pc, #100]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b00:	4b17      	ldr	r3, [pc, #92]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b06:	4b16      	ldr	r3, [pc, #88]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b0c:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b12:	4b13      	ldr	r3, [pc, #76]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b18:	4811      	ldr	r0, [pc, #68]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006b1a:	f005 fe83 	bl	800c824 <HAL_UART_Init>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006b24:	f7fc fd74 	bl	8003610 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b28:	2100      	movs	r1, #0
 8006b2a:	480d      	ldr	r0, [pc, #52]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006b2c:	f008 f90d 	bl	800ed4a <HAL_UARTEx_SetTxFifoThreshold>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006b36:	f7fc fd6b 	bl	8003610 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4808      	ldr	r0, [pc, #32]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006b3e:	f008 f942 	bl	800edc6 <HAL_UARTEx_SetRxFifoThreshold>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006b48:	f7fc fd62 	bl	8003610 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006b4c:	4804      	ldr	r0, [pc, #16]	; (8006b60 <MX_USART2_UART_Init+0x90>)
 8006b4e:	f008 f8c3 	bl	800ecd8 <HAL_UARTEx_DisableFifoMode>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006b58:	f7fc fd5a 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006b5c:	bf00      	nop
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	24000c60 	.word	0x24000c60
 8006b64:	40004400 	.word	0x40004400

08006b68 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006b6c:	4b22      	ldr	r3, [pc, #136]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006b6e:	4a23      	ldr	r2, [pc, #140]	; (8006bfc <MX_USART3_UART_Init+0x94>)
 8006b70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006b72:	4b21      	ldr	r3, [pc, #132]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006b74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006b78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006b7a:	4b1f      	ldr	r3, [pc, #124]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006b80:	4b1d      	ldr	r3, [pc, #116]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006b86:	4b1c      	ldr	r3, [pc, #112]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006b8e:	220c      	movs	r2, #12
 8006b90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b92:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b98:	4b17      	ldr	r3, [pc, #92]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b9e:	4b16      	ldr	r3, [pc, #88]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006ba4:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006baa:	4b13      	ldr	r3, [pc, #76]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006bb0:	4811      	ldr	r0, [pc, #68]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006bb2:	f005 fe37 	bl	800c824 <HAL_UART_Init>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006bbc:	f7fc fd28 	bl	8003610 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	480d      	ldr	r0, [pc, #52]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006bc4:	f008 f8c1 	bl	800ed4a <HAL_UARTEx_SetTxFifoThreshold>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006bce:	f7fc fd1f 	bl	8003610 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4808      	ldr	r0, [pc, #32]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006bd6:	f008 f8f6 	bl	800edc6 <HAL_UARTEx_SetRxFifoThreshold>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006be0:	f7fc fd16 	bl	8003610 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006be4:	4804      	ldr	r0, [pc, #16]	; (8006bf8 <MX_USART3_UART_Init+0x90>)
 8006be6:	f008 f877 	bl	800ecd8 <HAL_UARTEx_DisableFifoMode>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006bf0:	f7fc fd0e 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006bf4:	bf00      	nop
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	24000cf0 	.word	0x24000cf0
 8006bfc:	40004800 	.word	0x40004800

08006c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b0be      	sub	sp, #248	; 0xf8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c1c:	22bc      	movs	r2, #188	; 0xbc
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f008 f995 	bl	800ef50 <memset>
  if(uartHandle->Instance==USART1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a84      	ldr	r2, [pc, #528]	; (8006e3c <HAL_UART_MspInit+0x23c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d168      	bne.n	8006d02 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006c30:	2301      	movs	r3, #1
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006c34:	2300      	movs	r3, #0
 8006c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f002 fa8c 	bl	800915c <HAL_RCCEx_PeriphCLKConfig>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006c4a:	f7fc fce1 	bl	8003610 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c4e:	4b7c      	ldr	r3, [pc, #496]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c54:	4a7a      	ldr	r2, [pc, #488]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006c56:	f043 0310 	orr.w	r3, r3, #16
 8006c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c5e:	4b78      	ldr	r3, [pc, #480]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c64:	f003 0310 	and.w	r3, r3, #16
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c6c:	4b74      	ldr	r3, [pc, #464]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c72:	4a73      	ldr	r2, [pc, #460]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006c74:	f043 0302 	orr.w	r3, r3, #2
 8006c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c7c:	4b70      	ldr	r3, [pc, #448]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	623b      	str	r3, [r7, #32]
 8006c88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c8a:	4b6d      	ldr	r3, [pc, #436]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c90:	4a6b      	ldr	r2, [pc, #428]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c9a:	4b69      	ldr	r3, [pc, #420]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006cc2:	2304      	movs	r3, #4
 8006cc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8006cc8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006ccc:	4619      	mov	r1, r3
 8006cce:	485d      	ldr	r0, [pc, #372]	; (8006e44 <HAL_UART_MspInit+0x244>)
 8006cd0:	f001 f854 	bl	8007d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8006cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006cee:	2307      	movs	r3, #7
 8006cf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8006cf4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4853      	ldr	r0, [pc, #332]	; (8006e48 <HAL_UART_MspInit+0x248>)
 8006cfc:	f001 f83e 	bl	8007d7c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006d00:	e097      	b.n	8006e32 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a51      	ldr	r2, [pc, #324]	; (8006e4c <HAL_UART_MspInit+0x24c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d142      	bne.n	8006d92 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006d10:	2300      	movs	r3, #0
 8006d12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f002 fa1e 	bl	800915c <HAL_RCCEx_PeriphCLKConfig>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8006d26:	f7fc fc73 	bl	8003610 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006d2a:	4b45      	ldr	r3, [pc, #276]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d30:	4a43      	ldr	r2, [pc, #268]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006d3a:	4b41      	ldr	r3, [pc, #260]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d44:	61bb      	str	r3, [r7, #24]
 8006d46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d48:	4b3d      	ldr	r3, [pc, #244]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d4e:	4a3c      	ldr	r2, [pc, #240]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006d50:	f043 0301 	orr.w	r3, r3, #1
 8006d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d58:	4b39      	ldr	r3, [pc, #228]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006d66:	230c      	movs	r3, #12
 8006d68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d7e:	2307      	movs	r3, #7
 8006d80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006d88:	4619      	mov	r1, r3
 8006d8a:	482f      	ldr	r0, [pc, #188]	; (8006e48 <HAL_UART_MspInit+0x248>)
 8006d8c:	f000 fff6 	bl	8007d7c <HAL_GPIO_Init>
}
 8006d90:	e04f      	b.n	8006e32 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2e      	ldr	r2, [pc, #184]	; (8006e50 <HAL_UART_MspInit+0x250>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d14a      	bne.n	8006e32 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006da0:	2300      	movs	r3, #0
 8006da2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006daa:	4618      	mov	r0, r3
 8006dac:	f002 f9d6 	bl	800915c <HAL_RCCEx_PeriphCLKConfig>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8006db6:	f7fc fc2b 	bl	8003610 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006dba:	4b21      	ldr	r3, [pc, #132]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dc0:	4a1f      	ldr	r2, [pc, #124]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006dca:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006dd8:	4b19      	ldr	r3, [pc, #100]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dde:	4a18      	ldr	r2, [pc, #96]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006de0:	f043 0308 	orr.w	r3, r3, #8
 8006de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006de8:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <HAL_UART_MspInit+0x240>)
 8006dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8006df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e04:	2300      	movs	r3, #0
 8006e06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e10:	2307      	movs	r3, #7
 8006e12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	480d      	ldr	r0, [pc, #52]	; (8006e54 <HAL_UART_MspInit+0x254>)
 8006e1e:	f000 ffad 	bl	8007d7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8006e22:	2201      	movs	r2, #1
 8006e24:	2101      	movs	r1, #1
 8006e26:	2027      	movs	r0, #39	; 0x27
 8006e28:	f000 fa01 	bl	800722e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006e2c:	2027      	movs	r0, #39	; 0x27
 8006e2e:	f000 fa18 	bl	8007262 <HAL_NVIC_EnableIRQ>
}
 8006e32:	bf00      	nop
 8006e34:	37f8      	adds	r7, #248	; 0xf8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40011000 	.word	0x40011000
 8006e40:	58024400 	.word	0x58024400
 8006e44:	58020400 	.word	0x58020400
 8006e48:	58020000 	.word	0x58020000
 8006e4c:	40004400 	.word	0x40004400
 8006e50:	40004800 	.word	0x40004800
 8006e54:	58020c00 	.word	0x58020c00

08006e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006e5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006e5e:	e003      	b.n	8006e68 <LoopCopyDataInit>

08006e60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006e60:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006e62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006e64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006e66:	3104      	adds	r1, #4

08006e68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006e68:	480b      	ldr	r0, [pc, #44]	; (8006e98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006e6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006e6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006e70:	d3f6      	bcc.n	8006e60 <CopyDataInit>
  ldr  r2, =_sbss
 8006e72:	4a0b      	ldr	r2, [pc, #44]	; (8006ea0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006e74:	e002      	b.n	8006e7c <LoopFillZerobss>

08006e76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006e76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006e78:	f842 3b04 	str.w	r3, [r2], #4

08006e7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006e7c:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006e7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006e80:	d3f9      	bcc.n	8006e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006e82:	f7fd f9b7 	bl	80041f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e86:	f008 f831 	bl	800eeec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e8a:	f7fb ff69 	bl	8002d60 <main>
  bx  lr    
 8006e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006e90:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006e94:	08014368 	.word	0x08014368
  ldr  r0, =_sdata
 8006e98:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006e9c:	24000284 	.word	0x24000284
  ldr  r2, =_sbss
 8006ea0:	24000288 	.word	0x24000288
  ldr  r3, = _ebss
 8006ea4:	24000d94 	.word	0x24000d94

08006ea8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ea8:	e7fe      	b.n	8006ea8 <ADC3_IRQHandler>
	...

08006eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006eb2:	2003      	movs	r0, #3
 8006eb4:	f000 f9b0 	bl	8007218 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006eb8:	f001 ff7a 	bl	8008db0 <HAL_RCC_GetSysClockFreq>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	4b15      	ldr	r3, [pc, #84]	; (8006f14 <HAL_Init+0x68>)
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	0a1b      	lsrs	r3, r3, #8
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	4913      	ldr	r1, [pc, #76]	; (8006f18 <HAL_Init+0x6c>)
 8006eca:	5ccb      	ldrb	r3, [r1, r3]
 8006ecc:	f003 031f 	and.w	r3, r3, #31
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ed6:	4b0f      	ldr	r3, [pc, #60]	; (8006f14 <HAL_Init+0x68>)
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	4a0e      	ldr	r2, [pc, #56]	; (8006f18 <HAL_Init+0x6c>)
 8006ee0:	5cd3      	ldrb	r3, [r2, r3]
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eec:	4a0b      	ldr	r2, [pc, #44]	; (8006f1c <HAL_Init+0x70>)
 8006eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ef0:	4a0b      	ldr	r2, [pc, #44]	; (8006f20 <HAL_Init+0x74>)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	f000 f814 	bl	8006f24 <HAL_InitTick>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e002      	b.n	8006f0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006f06:	f7fc fffb 	bl	8003f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	58024400 	.word	0x58024400
 8006f18:	08012638 	.word	0x08012638
 8006f1c:	24000014 	.word	0x24000014
 8006f20:	24000010 	.word	0x24000010

08006f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006f2c:	4b15      	ldr	r3, [pc, #84]	; (8006f84 <HAL_InitTick+0x60>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e021      	b.n	8006f7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006f38:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <HAL_InitTick+0x64>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4b11      	ldr	r3, [pc, #68]	; (8006f84 <HAL_InitTick+0x60>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	4619      	mov	r1, r3
 8006f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 f9a3 	bl	800729a <HAL_SYSTICK_Config>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e00e      	b.n	8006f7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b0f      	cmp	r3, #15
 8006f62:	d80a      	bhi.n	8006f7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f64:	2200      	movs	r2, #0
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6c:	f000 f95f 	bl	800722e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f70:	4a06      	ldr	r2, [pc, #24]	; (8006f8c <HAL_InitTick+0x68>)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e000      	b.n	8006f7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	240000ac 	.word	0x240000ac
 8006f88:	24000010 	.word	0x24000010
 8006f8c:	240000a8 	.word	0x240000a8

08006f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006f94:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <HAL_IncTick+0x20>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <HAL_IncTick+0x24>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	4a04      	ldr	r2, [pc, #16]	; (8006fb4 <HAL_IncTick+0x24>)
 8006fa2:	6013      	str	r3, [r2, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	240000ac 	.word	0x240000ac
 8006fb4:	24000d80 	.word	0x24000d80

08006fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0
  return uwTick;
 8006fbc:	4b03      	ldr	r3, [pc, #12]	; (8006fcc <HAL_GetTick+0x14>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	24000d80 	.word	0x24000d80

08006fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fd8:	f7ff ffee 	bl	8006fb8 <HAL_GetTick>
 8006fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d005      	beq.n	8006ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fea:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <HAL_Delay+0x44>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006ff6:	bf00      	nop
 8006ff8:	f7ff ffde 	bl	8006fb8 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	429a      	cmp	r2, r3
 8007006:	d8f7      	bhi.n	8006ff8 <HAL_Delay+0x28>
  {
  }
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	240000ac 	.word	0x240000ac

08007018 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800701c:	4b03      	ldr	r3, [pc, #12]	; (800702c <HAL_GetREVID+0x14>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	0c1b      	lsrs	r3, r3, #16
}
 8007022:	4618      	mov	r0, r3
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	5c001000 	.word	0x5c001000

08007030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <__NVIC_SetPriorityGrouping+0x40>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800704c:	4013      	ands	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007058:	4b06      	ldr	r3, [pc, #24]	; (8007074 <__NVIC_SetPriorityGrouping+0x44>)
 800705a:	4313      	orrs	r3, r2
 800705c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800705e:	4a04      	ldr	r2, [pc, #16]	; (8007070 <__NVIC_SetPriorityGrouping+0x40>)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	60d3      	str	r3, [r2, #12]
}
 8007064:	bf00      	nop
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	e000ed00 	.word	0xe000ed00
 8007074:	05fa0000 	.word	0x05fa0000

08007078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800707c:	4b04      	ldr	r3, [pc, #16]	; (8007090 <__NVIC_GetPriorityGrouping+0x18>)
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	0a1b      	lsrs	r3, r3, #8
 8007082:	f003 0307 	and.w	r3, r3, #7
}
 8007086:	4618      	mov	r0, r3
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	e000ed00 	.word	0xe000ed00

08007094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800709e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	db0b      	blt.n	80070be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070a6:	88fb      	ldrh	r3, [r7, #6]
 80070a8:	f003 021f 	and.w	r2, r3, #31
 80070ac:	4907      	ldr	r1, [pc, #28]	; (80070cc <__NVIC_EnableIRQ+0x38>)
 80070ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2001      	movs	r0, #1
 80070b6:	fa00 f202 	lsl.w	r2, r0, r2
 80070ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	e000e100 	.word	0xe000e100

080070d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	db12      	blt.n	8007108 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	f003 021f 	and.w	r2, r3, #31
 80070e8:	490a      	ldr	r1, [pc, #40]	; (8007114 <__NVIC_DisableIRQ+0x44>)
 80070ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	2001      	movs	r0, #1
 80070f2:	fa00 f202 	lsl.w	r2, r0, r2
 80070f6:	3320      	adds	r3, #32
 80070f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80070fc:	f3bf 8f4f 	dsb	sy
}
 8007100:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007102:	f3bf 8f6f 	isb	sy
}
 8007106:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	e000e100 	.word	0xe000e100

08007118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	6039      	str	r1, [r7, #0]
 8007122:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007128:	2b00      	cmp	r3, #0
 800712a:	db0a      	blt.n	8007142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	b2da      	uxtb	r2, r3
 8007130:	490c      	ldr	r1, [pc, #48]	; (8007164 <__NVIC_SetPriority+0x4c>)
 8007132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007136:	0112      	lsls	r2, r2, #4
 8007138:	b2d2      	uxtb	r2, r2
 800713a:	440b      	add	r3, r1
 800713c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007140:	e00a      	b.n	8007158 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	b2da      	uxtb	r2, r3
 8007146:	4908      	ldr	r1, [pc, #32]	; (8007168 <__NVIC_SetPriority+0x50>)
 8007148:	88fb      	ldrh	r3, [r7, #6]
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	3b04      	subs	r3, #4
 8007150:	0112      	lsls	r2, r2, #4
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	440b      	add	r3, r1
 8007156:	761a      	strb	r2, [r3, #24]
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	e000e100 	.word	0xe000e100
 8007168:	e000ed00 	.word	0xe000ed00

0800716c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800716c:	b480      	push	{r7}
 800716e:	b089      	sub	sp, #36	; 0x24
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f1c3 0307 	rsb	r3, r3, #7
 8007186:	2b04      	cmp	r3, #4
 8007188:	bf28      	it	cs
 800718a:	2304      	movcs	r3, #4
 800718c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	3304      	adds	r3, #4
 8007192:	2b06      	cmp	r3, #6
 8007194:	d902      	bls.n	800719c <NVIC_EncodePriority+0x30>
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	3b03      	subs	r3, #3
 800719a:	e000      	b.n	800719e <NVIC_EncodePriority+0x32>
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071a0:	f04f 32ff 	mov.w	r2, #4294967295
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	fa02 f303 	lsl.w	r3, r2, r3
 80071aa:	43da      	mvns	r2, r3
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	401a      	ands	r2, r3
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071b4:	f04f 31ff 	mov.w	r1, #4294967295
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	fa01 f303 	lsl.w	r3, r1, r3
 80071be:	43d9      	mvns	r1, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071c4:	4313      	orrs	r3, r2
         );
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3724      	adds	r7, #36	; 0x24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3b01      	subs	r3, #1
 80071e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071e4:	d301      	bcc.n	80071ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071e6:	2301      	movs	r3, #1
 80071e8:	e00f      	b.n	800720a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071ea:	4a0a      	ldr	r2, [pc, #40]	; (8007214 <SysTick_Config+0x40>)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071f2:	210f      	movs	r1, #15
 80071f4:	f04f 30ff 	mov.w	r0, #4294967295
 80071f8:	f7ff ff8e 	bl	8007118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <SysTick_Config+0x40>)
 80071fe:	2200      	movs	r2, #0
 8007200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007202:	4b04      	ldr	r3, [pc, #16]	; (8007214 <SysTick_Config+0x40>)
 8007204:	2207      	movs	r2, #7
 8007206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	e000e010 	.word	0xe000e010

08007218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff ff05 	bl	8007030 <__NVIC_SetPriorityGrouping>
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b086      	sub	sp, #24
 8007232:	af00      	add	r7, sp, #0
 8007234:	4603      	mov	r3, r0
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	607a      	str	r2, [r7, #4]
 800723a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800723c:	f7ff ff1c 	bl	8007078 <__NVIC_GetPriorityGrouping>
 8007240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68b9      	ldr	r1, [r7, #8]
 8007246:	6978      	ldr	r0, [r7, #20]
 8007248:	f7ff ff90 	bl	800716c <NVIC_EncodePriority>
 800724c:	4602      	mov	r2, r0
 800724e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007252:	4611      	mov	r1, r2
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff ff5f 	bl	8007118 <__NVIC_SetPriority>
}
 800725a:	bf00      	nop
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	4603      	mov	r3, r0
 800726a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800726c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff ff0f 	bl	8007094 <__NVIC_EnableIRQ>
}
 8007276:	bf00      	nop
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	4603      	mov	r3, r0
 8007286:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff ff1f 	bl	80070d0 <__NVIC_DisableIRQ>
}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff ff96 	bl	80071d4 <SysTick_Config>
 80072a8:	4603      	mov	r3, r0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80072bc:	f7ff fe7c 	bl	8006fb8 <HAL_GetTick>
 80072c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e2dc      	b.n	8007886 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d008      	beq.n	80072ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2280      	movs	r2, #128	; 0x80
 80072dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e2cd      	b.n	8007886 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a76      	ldr	r2, [pc, #472]	; (80074c8 <HAL_DMA_Abort+0x214>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d04a      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a74      	ldr	r2, [pc, #464]	; (80074cc <HAL_DMA_Abort+0x218>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d045      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a73      	ldr	r2, [pc, #460]	; (80074d0 <HAL_DMA_Abort+0x21c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d040      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a71      	ldr	r2, [pc, #452]	; (80074d4 <HAL_DMA_Abort+0x220>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d03b      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a70      	ldr	r2, [pc, #448]	; (80074d8 <HAL_DMA_Abort+0x224>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d036      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a6e      	ldr	r2, [pc, #440]	; (80074dc <HAL_DMA_Abort+0x228>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d031      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a6d      	ldr	r2, [pc, #436]	; (80074e0 <HAL_DMA_Abort+0x22c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d02c      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a6b      	ldr	r2, [pc, #428]	; (80074e4 <HAL_DMA_Abort+0x230>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d027      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a6a      	ldr	r2, [pc, #424]	; (80074e8 <HAL_DMA_Abort+0x234>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d022      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a68      	ldr	r2, [pc, #416]	; (80074ec <HAL_DMA_Abort+0x238>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01d      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a67      	ldr	r2, [pc, #412]	; (80074f0 <HAL_DMA_Abort+0x23c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d018      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a65      	ldr	r2, [pc, #404]	; (80074f4 <HAL_DMA_Abort+0x240>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a64      	ldr	r2, [pc, #400]	; (80074f8 <HAL_DMA_Abort+0x244>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00e      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a62      	ldr	r2, [pc, #392]	; (80074fc <HAL_DMA_Abort+0x248>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d009      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a61      	ldr	r2, [pc, #388]	; (8007500 <HAL_DMA_Abort+0x24c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_DMA_Abort+0xd6>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a5f      	ldr	r2, [pc, #380]	; (8007504 <HAL_DMA_Abort+0x250>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d101      	bne.n	800738e <HAL_DMA_Abort+0xda>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <HAL_DMA_Abort+0xdc>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d013      	beq.n	80073bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 021e 	bic.w	r2, r2, #30
 80073a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695a      	ldr	r2, [r3, #20]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	e00a      	b.n	80073d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 020e 	bic.w	r2, r2, #14
 80073ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a3c      	ldr	r2, [pc, #240]	; (80074c8 <HAL_DMA_Abort+0x214>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d072      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a3a      	ldr	r2, [pc, #232]	; (80074cc <HAL_DMA_Abort+0x218>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d06d      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a39      	ldr	r2, [pc, #228]	; (80074d0 <HAL_DMA_Abort+0x21c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d068      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a37      	ldr	r2, [pc, #220]	; (80074d4 <HAL_DMA_Abort+0x220>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d063      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a36      	ldr	r2, [pc, #216]	; (80074d8 <HAL_DMA_Abort+0x224>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d05e      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a34      	ldr	r2, [pc, #208]	; (80074dc <HAL_DMA_Abort+0x228>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d059      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a33      	ldr	r2, [pc, #204]	; (80074e0 <HAL_DMA_Abort+0x22c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d054      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a31      	ldr	r2, [pc, #196]	; (80074e4 <HAL_DMA_Abort+0x230>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d04f      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a30      	ldr	r2, [pc, #192]	; (80074e8 <HAL_DMA_Abort+0x234>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d04a      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a2e      	ldr	r2, [pc, #184]	; (80074ec <HAL_DMA_Abort+0x238>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d045      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a2d      	ldr	r2, [pc, #180]	; (80074f0 <HAL_DMA_Abort+0x23c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d040      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a2b      	ldr	r2, [pc, #172]	; (80074f4 <HAL_DMA_Abort+0x240>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d03b      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a2a      	ldr	r2, [pc, #168]	; (80074f8 <HAL_DMA_Abort+0x244>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d036      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a28      	ldr	r2, [pc, #160]	; (80074fc <HAL_DMA_Abort+0x248>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d031      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a27      	ldr	r2, [pc, #156]	; (8007500 <HAL_DMA_Abort+0x24c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d02c      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a25      	ldr	r2, [pc, #148]	; (8007504 <HAL_DMA_Abort+0x250>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d027      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a24      	ldr	r2, [pc, #144]	; (8007508 <HAL_DMA_Abort+0x254>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d022      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a22      	ldr	r2, [pc, #136]	; (800750c <HAL_DMA_Abort+0x258>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d01d      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a21      	ldr	r2, [pc, #132]	; (8007510 <HAL_DMA_Abort+0x25c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d018      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <HAL_DMA_Abort+0x260>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1e      	ldr	r2, [pc, #120]	; (8007518 <HAL_DMA_Abort+0x264>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00e      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1c      	ldr	r2, [pc, #112]	; (800751c <HAL_DMA_Abort+0x268>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d009      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1b      	ldr	r2, [pc, #108]	; (8007520 <HAL_DMA_Abort+0x26c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <HAL_DMA_Abort+0x20e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a19      	ldr	r2, [pc, #100]	; (8007524 <HAL_DMA_Abort+0x270>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d132      	bne.n	8007528 <HAL_DMA_Abort+0x274>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e031      	b.n	800752a <HAL_DMA_Abort+0x276>
 80074c6:	bf00      	nop
 80074c8:	40020010 	.word	0x40020010
 80074cc:	40020028 	.word	0x40020028
 80074d0:	40020040 	.word	0x40020040
 80074d4:	40020058 	.word	0x40020058
 80074d8:	40020070 	.word	0x40020070
 80074dc:	40020088 	.word	0x40020088
 80074e0:	400200a0 	.word	0x400200a0
 80074e4:	400200b8 	.word	0x400200b8
 80074e8:	40020410 	.word	0x40020410
 80074ec:	40020428 	.word	0x40020428
 80074f0:	40020440 	.word	0x40020440
 80074f4:	40020458 	.word	0x40020458
 80074f8:	40020470 	.word	0x40020470
 80074fc:	40020488 	.word	0x40020488
 8007500:	400204a0 	.word	0x400204a0
 8007504:	400204b8 	.word	0x400204b8
 8007508:	58025408 	.word	0x58025408
 800750c:	5802541c 	.word	0x5802541c
 8007510:	58025430 	.word	0x58025430
 8007514:	58025444 	.word	0x58025444
 8007518:	58025458 	.word	0x58025458
 800751c:	5802546c 	.word	0x5802546c
 8007520:	58025480 	.word	0x58025480
 8007524:	58025494 	.word	0x58025494
 8007528:	2300      	movs	r3, #0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d007      	beq.n	800753e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800753c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a6d      	ldr	r2, [pc, #436]	; (80076f8 <HAL_DMA_Abort+0x444>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d04a      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a6b      	ldr	r2, [pc, #428]	; (80076fc <HAL_DMA_Abort+0x448>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d045      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a6a      	ldr	r2, [pc, #424]	; (8007700 <HAL_DMA_Abort+0x44c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d040      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a68      	ldr	r2, [pc, #416]	; (8007704 <HAL_DMA_Abort+0x450>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d03b      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a67      	ldr	r2, [pc, #412]	; (8007708 <HAL_DMA_Abort+0x454>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d036      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a65      	ldr	r2, [pc, #404]	; (800770c <HAL_DMA_Abort+0x458>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d031      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a64      	ldr	r2, [pc, #400]	; (8007710 <HAL_DMA_Abort+0x45c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d02c      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a62      	ldr	r2, [pc, #392]	; (8007714 <HAL_DMA_Abort+0x460>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d027      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a61      	ldr	r2, [pc, #388]	; (8007718 <HAL_DMA_Abort+0x464>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d022      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a5f      	ldr	r2, [pc, #380]	; (800771c <HAL_DMA_Abort+0x468>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d01d      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a5e      	ldr	r2, [pc, #376]	; (8007720 <HAL_DMA_Abort+0x46c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d018      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a5c      	ldr	r2, [pc, #368]	; (8007724 <HAL_DMA_Abort+0x470>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a5b      	ldr	r2, [pc, #364]	; (8007728 <HAL_DMA_Abort+0x474>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a59      	ldr	r2, [pc, #356]	; (800772c <HAL_DMA_Abort+0x478>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a58      	ldr	r2, [pc, #352]	; (8007730 <HAL_DMA_Abort+0x47c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <HAL_DMA_Abort+0x32a>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a56      	ldr	r2, [pc, #344]	; (8007734 <HAL_DMA_Abort+0x480>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d108      	bne.n	80075f0 <HAL_DMA_Abort+0x33c>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0201 	bic.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e007      	b.n	8007600 <HAL_DMA_Abort+0x34c>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0201 	bic.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007600:	e013      	b.n	800762a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007602:	f7ff fcd9 	bl	8006fb8 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	2b05      	cmp	r3, #5
 800760e:	d90c      	bls.n	800762a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2203      	movs	r2, #3
 800761a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e12d      	b.n	8007886 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e5      	bne.n	8007602 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a2f      	ldr	r2, [pc, #188]	; (80076f8 <HAL_DMA_Abort+0x444>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d04a      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a2d      	ldr	r2, [pc, #180]	; (80076fc <HAL_DMA_Abort+0x448>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d045      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a2c      	ldr	r2, [pc, #176]	; (8007700 <HAL_DMA_Abort+0x44c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d040      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a2a      	ldr	r2, [pc, #168]	; (8007704 <HAL_DMA_Abort+0x450>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d03b      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a29      	ldr	r2, [pc, #164]	; (8007708 <HAL_DMA_Abort+0x454>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d036      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a27      	ldr	r2, [pc, #156]	; (800770c <HAL_DMA_Abort+0x458>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d031      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a26      	ldr	r2, [pc, #152]	; (8007710 <HAL_DMA_Abort+0x45c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d02c      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a24      	ldr	r2, [pc, #144]	; (8007714 <HAL_DMA_Abort+0x460>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d027      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a23      	ldr	r2, [pc, #140]	; (8007718 <HAL_DMA_Abort+0x464>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d022      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a21      	ldr	r2, [pc, #132]	; (800771c <HAL_DMA_Abort+0x468>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d01d      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a20      	ldr	r2, [pc, #128]	; (8007720 <HAL_DMA_Abort+0x46c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d018      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1e      	ldr	r2, [pc, #120]	; (8007724 <HAL_DMA_Abort+0x470>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d013      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a1d      	ldr	r2, [pc, #116]	; (8007728 <HAL_DMA_Abort+0x474>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00e      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a1b      	ldr	r2, [pc, #108]	; (800772c <HAL_DMA_Abort+0x478>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d009      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1a      	ldr	r2, [pc, #104]	; (8007730 <HAL_DMA_Abort+0x47c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d004      	beq.n	80076d6 <HAL_DMA_Abort+0x422>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a18      	ldr	r2, [pc, #96]	; (8007734 <HAL_DMA_Abort+0x480>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d101      	bne.n	80076da <HAL_DMA_Abort+0x426>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <HAL_DMA_Abort+0x428>
 80076da:	2300      	movs	r3, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d02b      	beq.n	8007738 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	223f      	movs	r2, #63	; 0x3f
 80076f0:	409a      	lsls	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	609a      	str	r2, [r3, #8]
 80076f6:	e02a      	b.n	800774e <HAL_DMA_Abort+0x49a>
 80076f8:	40020010 	.word	0x40020010
 80076fc:	40020028 	.word	0x40020028
 8007700:	40020040 	.word	0x40020040
 8007704:	40020058 	.word	0x40020058
 8007708:	40020070 	.word	0x40020070
 800770c:	40020088 	.word	0x40020088
 8007710:	400200a0 	.word	0x400200a0
 8007714:	400200b8 	.word	0x400200b8
 8007718:	40020410 	.word	0x40020410
 800771c:	40020428 	.word	0x40020428
 8007720:	40020440 	.word	0x40020440
 8007724:	40020458 	.word	0x40020458
 8007728:	40020470 	.word	0x40020470
 800772c:	40020488 	.word	0x40020488
 8007730:	400204a0 	.word	0x400204a0
 8007734:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007742:	f003 031f 	and.w	r3, r3, #31
 8007746:	2201      	movs	r2, #1
 8007748:	409a      	lsls	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a4f      	ldr	r2, [pc, #316]	; (8007890 <HAL_DMA_Abort+0x5dc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d072      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a4d      	ldr	r2, [pc, #308]	; (8007894 <HAL_DMA_Abort+0x5e0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d06d      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a4c      	ldr	r2, [pc, #304]	; (8007898 <HAL_DMA_Abort+0x5e4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d068      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a4a      	ldr	r2, [pc, #296]	; (800789c <HAL_DMA_Abort+0x5e8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d063      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a49      	ldr	r2, [pc, #292]	; (80078a0 <HAL_DMA_Abort+0x5ec>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d05e      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a47      	ldr	r2, [pc, #284]	; (80078a4 <HAL_DMA_Abort+0x5f0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d059      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a46      	ldr	r2, [pc, #280]	; (80078a8 <HAL_DMA_Abort+0x5f4>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d054      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a44      	ldr	r2, [pc, #272]	; (80078ac <HAL_DMA_Abort+0x5f8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d04f      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a43      	ldr	r2, [pc, #268]	; (80078b0 <HAL_DMA_Abort+0x5fc>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d04a      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a41      	ldr	r2, [pc, #260]	; (80078b4 <HAL_DMA_Abort+0x600>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d045      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a40      	ldr	r2, [pc, #256]	; (80078b8 <HAL_DMA_Abort+0x604>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d040      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a3e      	ldr	r2, [pc, #248]	; (80078bc <HAL_DMA_Abort+0x608>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d03b      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a3d      	ldr	r2, [pc, #244]	; (80078c0 <HAL_DMA_Abort+0x60c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d036      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a3b      	ldr	r2, [pc, #236]	; (80078c4 <HAL_DMA_Abort+0x610>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d031      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a3a      	ldr	r2, [pc, #232]	; (80078c8 <HAL_DMA_Abort+0x614>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d02c      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a38      	ldr	r2, [pc, #224]	; (80078cc <HAL_DMA_Abort+0x618>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d027      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a37      	ldr	r2, [pc, #220]	; (80078d0 <HAL_DMA_Abort+0x61c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d022      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a35      	ldr	r2, [pc, #212]	; (80078d4 <HAL_DMA_Abort+0x620>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d01d      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a34      	ldr	r2, [pc, #208]	; (80078d8 <HAL_DMA_Abort+0x624>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d018      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a32      	ldr	r2, [pc, #200]	; (80078dc <HAL_DMA_Abort+0x628>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d013      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a31      	ldr	r2, [pc, #196]	; (80078e0 <HAL_DMA_Abort+0x62c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00e      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a2f      	ldr	r2, [pc, #188]	; (80078e4 <HAL_DMA_Abort+0x630>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d009      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a2e      	ldr	r2, [pc, #184]	; (80078e8 <HAL_DMA_Abort+0x634>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d004      	beq.n	800783e <HAL_DMA_Abort+0x58a>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a2c      	ldr	r2, [pc, #176]	; (80078ec <HAL_DMA_Abort+0x638>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d101      	bne.n	8007842 <HAL_DMA_Abort+0x58e>
 800783e:	2301      	movs	r3, #1
 8007840:	e000      	b.n	8007844 <HAL_DMA_Abort+0x590>
 8007842:	2300      	movs	r3, #0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d015      	beq.n	8007874 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007850:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00c      	beq.n	8007874 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007868:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007872:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	40020010 	.word	0x40020010
 8007894:	40020028 	.word	0x40020028
 8007898:	40020040 	.word	0x40020040
 800789c:	40020058 	.word	0x40020058
 80078a0:	40020070 	.word	0x40020070
 80078a4:	40020088 	.word	0x40020088
 80078a8:	400200a0 	.word	0x400200a0
 80078ac:	400200b8 	.word	0x400200b8
 80078b0:	40020410 	.word	0x40020410
 80078b4:	40020428 	.word	0x40020428
 80078b8:	40020440 	.word	0x40020440
 80078bc:	40020458 	.word	0x40020458
 80078c0:	40020470 	.word	0x40020470
 80078c4:	40020488 	.word	0x40020488
 80078c8:	400204a0 	.word	0x400204a0
 80078cc:	400204b8 	.word	0x400204b8
 80078d0:	58025408 	.word	0x58025408
 80078d4:	5802541c 	.word	0x5802541c
 80078d8:	58025430 	.word	0x58025430
 80078dc:	58025444 	.word	0x58025444
 80078e0:	58025458 	.word	0x58025458
 80078e4:	5802546c 	.word	0x5802546c
 80078e8:	58025480 	.word	0x58025480
 80078ec:	58025494 	.word	0x58025494

080078f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e237      	b.n	8007d72 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d004      	beq.n	8007918 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2280      	movs	r2, #128	; 0x80
 8007912:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e22c      	b.n	8007d72 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a5c      	ldr	r2, [pc, #368]	; (8007a90 <HAL_DMA_Abort_IT+0x1a0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d04a      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a5b      	ldr	r2, [pc, #364]	; (8007a94 <HAL_DMA_Abort_IT+0x1a4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d045      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a59      	ldr	r2, [pc, #356]	; (8007a98 <HAL_DMA_Abort_IT+0x1a8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d040      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a58      	ldr	r2, [pc, #352]	; (8007a9c <HAL_DMA_Abort_IT+0x1ac>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d03b      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a56      	ldr	r2, [pc, #344]	; (8007aa0 <HAL_DMA_Abort_IT+0x1b0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d036      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a55      	ldr	r2, [pc, #340]	; (8007aa4 <HAL_DMA_Abort_IT+0x1b4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d031      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a53      	ldr	r2, [pc, #332]	; (8007aa8 <HAL_DMA_Abort_IT+0x1b8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d02c      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a52      	ldr	r2, [pc, #328]	; (8007aac <HAL_DMA_Abort_IT+0x1bc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d027      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a50      	ldr	r2, [pc, #320]	; (8007ab0 <HAL_DMA_Abort_IT+0x1c0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d022      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a4f      	ldr	r2, [pc, #316]	; (8007ab4 <HAL_DMA_Abort_IT+0x1c4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d01d      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a4d      	ldr	r2, [pc, #308]	; (8007ab8 <HAL_DMA_Abort_IT+0x1c8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d018      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a4c      	ldr	r2, [pc, #304]	; (8007abc <HAL_DMA_Abort_IT+0x1cc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d013      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a4a      	ldr	r2, [pc, #296]	; (8007ac0 <HAL_DMA_Abort_IT+0x1d0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00e      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a49      	ldr	r2, [pc, #292]	; (8007ac4 <HAL_DMA_Abort_IT+0x1d4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d009      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a47      	ldr	r2, [pc, #284]	; (8007ac8 <HAL_DMA_Abort_IT+0x1d8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <HAL_DMA_Abort_IT+0xc8>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a46      	ldr	r2, [pc, #280]	; (8007acc <HAL_DMA_Abort_IT+0x1dc>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d101      	bne.n	80079bc <HAL_DMA_Abort_IT+0xcc>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e000      	b.n	80079be <HAL_DMA_Abort_IT+0xce>
 80079bc:	2300      	movs	r3, #0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 8086 	beq.w	8007ad0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2204      	movs	r2, #4
 80079c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a2f      	ldr	r2, [pc, #188]	; (8007a90 <HAL_DMA_Abort_IT+0x1a0>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d04a      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a2e      	ldr	r2, [pc, #184]	; (8007a94 <HAL_DMA_Abort_IT+0x1a4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d045      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a2c      	ldr	r2, [pc, #176]	; (8007a98 <HAL_DMA_Abort_IT+0x1a8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d040      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a2b      	ldr	r2, [pc, #172]	; (8007a9c <HAL_DMA_Abort_IT+0x1ac>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d03b      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a29      	ldr	r2, [pc, #164]	; (8007aa0 <HAL_DMA_Abort_IT+0x1b0>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d036      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a28      	ldr	r2, [pc, #160]	; (8007aa4 <HAL_DMA_Abort_IT+0x1b4>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d031      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a26      	ldr	r2, [pc, #152]	; (8007aa8 <HAL_DMA_Abort_IT+0x1b8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d02c      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a25      	ldr	r2, [pc, #148]	; (8007aac <HAL_DMA_Abort_IT+0x1bc>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d027      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a23      	ldr	r2, [pc, #140]	; (8007ab0 <HAL_DMA_Abort_IT+0x1c0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d022      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a22      	ldr	r2, [pc, #136]	; (8007ab4 <HAL_DMA_Abort_IT+0x1c4>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d01d      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a20      	ldr	r2, [pc, #128]	; (8007ab8 <HAL_DMA_Abort_IT+0x1c8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d018      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1f      	ldr	r2, [pc, #124]	; (8007abc <HAL_DMA_Abort_IT+0x1cc>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1d      	ldr	r2, [pc, #116]	; (8007ac0 <HAL_DMA_Abort_IT+0x1d0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00e      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1c      	ldr	r2, [pc, #112]	; (8007ac4 <HAL_DMA_Abort_IT+0x1d4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d009      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a1a      	ldr	r2, [pc, #104]	; (8007ac8 <HAL_DMA_Abort_IT+0x1d8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d004      	beq.n	8007a6c <HAL_DMA_Abort_IT+0x17c>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a19      	ldr	r2, [pc, #100]	; (8007acc <HAL_DMA_Abort_IT+0x1dc>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d108      	bne.n	8007a7e <HAL_DMA_Abort_IT+0x18e>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0201 	bic.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	e178      	b.n	8007d70 <HAL_DMA_Abort_IT+0x480>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0201 	bic.w	r2, r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e16f      	b.n	8007d70 <HAL_DMA_Abort_IT+0x480>
 8007a90:	40020010 	.word	0x40020010
 8007a94:	40020028 	.word	0x40020028
 8007a98:	40020040 	.word	0x40020040
 8007a9c:	40020058 	.word	0x40020058
 8007aa0:	40020070 	.word	0x40020070
 8007aa4:	40020088 	.word	0x40020088
 8007aa8:	400200a0 	.word	0x400200a0
 8007aac:	400200b8 	.word	0x400200b8
 8007ab0:	40020410 	.word	0x40020410
 8007ab4:	40020428 	.word	0x40020428
 8007ab8:	40020440 	.word	0x40020440
 8007abc:	40020458 	.word	0x40020458
 8007ac0:	40020470 	.word	0x40020470
 8007ac4:	40020488 	.word	0x40020488
 8007ac8:	400204a0 	.word	0x400204a0
 8007acc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 020e 	bic.w	r2, r2, #14
 8007ade:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a6c      	ldr	r2, [pc, #432]	; (8007c98 <HAL_DMA_Abort_IT+0x3a8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d04a      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a6b      	ldr	r2, [pc, #428]	; (8007c9c <HAL_DMA_Abort_IT+0x3ac>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d045      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a69      	ldr	r2, [pc, #420]	; (8007ca0 <HAL_DMA_Abort_IT+0x3b0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d040      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a68      	ldr	r2, [pc, #416]	; (8007ca4 <HAL_DMA_Abort_IT+0x3b4>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d03b      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a66      	ldr	r2, [pc, #408]	; (8007ca8 <HAL_DMA_Abort_IT+0x3b8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d036      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a65      	ldr	r2, [pc, #404]	; (8007cac <HAL_DMA_Abort_IT+0x3bc>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d031      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a63      	ldr	r2, [pc, #396]	; (8007cb0 <HAL_DMA_Abort_IT+0x3c0>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d02c      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a62      	ldr	r2, [pc, #392]	; (8007cb4 <HAL_DMA_Abort_IT+0x3c4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d027      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a60      	ldr	r2, [pc, #384]	; (8007cb8 <HAL_DMA_Abort_IT+0x3c8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d022      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a5f      	ldr	r2, [pc, #380]	; (8007cbc <HAL_DMA_Abort_IT+0x3cc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d01d      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a5d      	ldr	r2, [pc, #372]	; (8007cc0 <HAL_DMA_Abort_IT+0x3d0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d018      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a5c      	ldr	r2, [pc, #368]	; (8007cc4 <HAL_DMA_Abort_IT+0x3d4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d013      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a5a      	ldr	r2, [pc, #360]	; (8007cc8 <HAL_DMA_Abort_IT+0x3d8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00e      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a59      	ldr	r2, [pc, #356]	; (8007ccc <HAL_DMA_Abort_IT+0x3dc>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d009      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a57      	ldr	r2, [pc, #348]	; (8007cd0 <HAL_DMA_Abort_IT+0x3e0>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d004      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x290>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a56      	ldr	r2, [pc, #344]	; (8007cd4 <HAL_DMA_Abort_IT+0x3e4>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d108      	bne.n	8007b92 <HAL_DMA_Abort_IT+0x2a2>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	e007      	b.n	8007ba2 <HAL_DMA_Abort_IT+0x2b2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0201 	bic.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a3c      	ldr	r2, [pc, #240]	; (8007c98 <HAL_DMA_Abort_IT+0x3a8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d072      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a3a      	ldr	r2, [pc, #232]	; (8007c9c <HAL_DMA_Abort_IT+0x3ac>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d06d      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a39      	ldr	r2, [pc, #228]	; (8007ca0 <HAL_DMA_Abort_IT+0x3b0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d068      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a37      	ldr	r2, [pc, #220]	; (8007ca4 <HAL_DMA_Abort_IT+0x3b4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d063      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a36      	ldr	r2, [pc, #216]	; (8007ca8 <HAL_DMA_Abort_IT+0x3b8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d05e      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a34      	ldr	r2, [pc, #208]	; (8007cac <HAL_DMA_Abort_IT+0x3bc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d059      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a33      	ldr	r2, [pc, #204]	; (8007cb0 <HAL_DMA_Abort_IT+0x3c0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d054      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a31      	ldr	r2, [pc, #196]	; (8007cb4 <HAL_DMA_Abort_IT+0x3c4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d04f      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a30      	ldr	r2, [pc, #192]	; (8007cb8 <HAL_DMA_Abort_IT+0x3c8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d04a      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a2e      	ldr	r2, [pc, #184]	; (8007cbc <HAL_DMA_Abort_IT+0x3cc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d045      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a2d      	ldr	r2, [pc, #180]	; (8007cc0 <HAL_DMA_Abort_IT+0x3d0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d040      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a2b      	ldr	r2, [pc, #172]	; (8007cc4 <HAL_DMA_Abort_IT+0x3d4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d03b      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a2a      	ldr	r2, [pc, #168]	; (8007cc8 <HAL_DMA_Abort_IT+0x3d8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d036      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a28      	ldr	r2, [pc, #160]	; (8007ccc <HAL_DMA_Abort_IT+0x3dc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d031      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a27      	ldr	r2, [pc, #156]	; (8007cd0 <HAL_DMA_Abort_IT+0x3e0>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d02c      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a25      	ldr	r2, [pc, #148]	; (8007cd4 <HAL_DMA_Abort_IT+0x3e4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d027      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a24      	ldr	r2, [pc, #144]	; (8007cd8 <HAL_DMA_Abort_IT+0x3e8>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d022      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a22      	ldr	r2, [pc, #136]	; (8007cdc <HAL_DMA_Abort_IT+0x3ec>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d01d      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a21      	ldr	r2, [pc, #132]	; (8007ce0 <HAL_DMA_Abort_IT+0x3f0>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d018      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a1f      	ldr	r2, [pc, #124]	; (8007ce4 <HAL_DMA_Abort_IT+0x3f4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d013      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ce8 <HAL_DMA_Abort_IT+0x3f8>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00e      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a1c      	ldr	r2, [pc, #112]	; (8007cec <HAL_DMA_Abort_IT+0x3fc>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d009      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a1b      	ldr	r2, [pc, #108]	; (8007cf0 <HAL_DMA_Abort_IT+0x400>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d004      	beq.n	8007c92 <HAL_DMA_Abort_IT+0x3a2>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a19      	ldr	r2, [pc, #100]	; (8007cf4 <HAL_DMA_Abort_IT+0x404>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d132      	bne.n	8007cf8 <HAL_DMA_Abort_IT+0x408>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e031      	b.n	8007cfa <HAL_DMA_Abort_IT+0x40a>
 8007c96:	bf00      	nop
 8007c98:	40020010 	.word	0x40020010
 8007c9c:	40020028 	.word	0x40020028
 8007ca0:	40020040 	.word	0x40020040
 8007ca4:	40020058 	.word	0x40020058
 8007ca8:	40020070 	.word	0x40020070
 8007cac:	40020088 	.word	0x40020088
 8007cb0:	400200a0 	.word	0x400200a0
 8007cb4:	400200b8 	.word	0x400200b8
 8007cb8:	40020410 	.word	0x40020410
 8007cbc:	40020428 	.word	0x40020428
 8007cc0:	40020440 	.word	0x40020440
 8007cc4:	40020458 	.word	0x40020458
 8007cc8:	40020470 	.word	0x40020470
 8007ccc:	40020488 	.word	0x40020488
 8007cd0:	400204a0 	.word	0x400204a0
 8007cd4:	400204b8 	.word	0x400204b8
 8007cd8:	58025408 	.word	0x58025408
 8007cdc:	5802541c 	.word	0x5802541c
 8007ce0:	58025430 	.word	0x58025430
 8007ce4:	58025444 	.word	0x58025444
 8007ce8:	58025458 	.word	0x58025458
 8007cec:	5802546c 	.word	0x5802546c
 8007cf0:	58025480 	.word	0x58025480
 8007cf4:	58025494 	.word	0x58025494
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d028      	beq.n	8007d50 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	409a      	lsls	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00c      	beq.n	8007d50 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop

08007d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b089      	sub	sp, #36	; 0x24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d8a:	4b89      	ldr	r3, [pc, #548]	; (8007fb0 <HAL_GPIO_Init+0x234>)
 8007d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d8e:	e194      	b.n	80080ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	2101      	movs	r1, #1
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 8186 	beq.w	80080b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f003 0303 	and.w	r3, r3, #3
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d005      	beq.n	8007dc0 <HAL_GPIO_Init+0x44>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f003 0303 	and.w	r3, r3, #3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d130      	bne.n	8007e22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	2203      	movs	r2, #3
 8007dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	fa02 f303 	lsl.w	r3, r2, r3
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007df6:	2201      	movs	r2, #1
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	43db      	mvns	r3, r3
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	4013      	ands	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	091b      	lsrs	r3, r3, #4
 8007e0c:	f003 0201 	and.w	r2, r3, #1
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	fa02 f303 	lsl.w	r3, r2, r3
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d017      	beq.n	8007e5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	2203      	movs	r2, #3
 8007e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3e:	43db      	mvns	r3, r3
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	4013      	ands	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	005b      	lsls	r3, r3, #1
 8007e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d123      	bne.n	8007eb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	08da      	lsrs	r2, r3, #3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3208      	adds	r2, #8
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	220f      	movs	r2, #15
 8007e82:	fa02 f303 	lsl.w	r3, r2, r3
 8007e86:	43db      	mvns	r3, r3
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	08da      	lsrs	r2, r3, #3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3208      	adds	r2, #8
 8007eac:	69b9      	ldr	r1, [r7, #24]
 8007eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f003 0203 	and.w	r2, r3, #3
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80e0 	beq.w	80080b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ef4:	4b2f      	ldr	r3, [pc, #188]	; (8007fb4 <HAL_GPIO_Init+0x238>)
 8007ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007efa:	4a2e      	ldr	r2, [pc, #184]	; (8007fb4 <HAL_GPIO_Init+0x238>)
 8007efc:	f043 0302 	orr.w	r3, r3, #2
 8007f00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f04:	4b2b      	ldr	r3, [pc, #172]	; (8007fb4 <HAL_GPIO_Init+0x238>)
 8007f06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f12:	4a29      	ldr	r2, [pc, #164]	; (8007fb8 <HAL_GPIO_Init+0x23c>)
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	089b      	lsrs	r3, r3, #2
 8007f18:	3302      	adds	r3, #2
 8007f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	220f      	movs	r2, #15
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4013      	ands	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a20      	ldr	r2, [pc, #128]	; (8007fbc <HAL_GPIO_Init+0x240>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d052      	beq.n	8007fe4 <HAL_GPIO_Init+0x268>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <HAL_GPIO_Init+0x244>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d031      	beq.n	8007faa <HAL_GPIO_Init+0x22e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1e      	ldr	r2, [pc, #120]	; (8007fc4 <HAL_GPIO_Init+0x248>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d02b      	beq.n	8007fa6 <HAL_GPIO_Init+0x22a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1d      	ldr	r2, [pc, #116]	; (8007fc8 <HAL_GPIO_Init+0x24c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d025      	beq.n	8007fa2 <HAL_GPIO_Init+0x226>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a1c      	ldr	r2, [pc, #112]	; (8007fcc <HAL_GPIO_Init+0x250>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d01f      	beq.n	8007f9e <HAL_GPIO_Init+0x222>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a1b      	ldr	r2, [pc, #108]	; (8007fd0 <HAL_GPIO_Init+0x254>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d019      	beq.n	8007f9a <HAL_GPIO_Init+0x21e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a1a      	ldr	r2, [pc, #104]	; (8007fd4 <HAL_GPIO_Init+0x258>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d013      	beq.n	8007f96 <HAL_GPIO_Init+0x21a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a19      	ldr	r2, [pc, #100]	; (8007fd8 <HAL_GPIO_Init+0x25c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00d      	beq.n	8007f92 <HAL_GPIO_Init+0x216>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a18      	ldr	r2, [pc, #96]	; (8007fdc <HAL_GPIO_Init+0x260>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d007      	beq.n	8007f8e <HAL_GPIO_Init+0x212>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a17      	ldr	r2, [pc, #92]	; (8007fe0 <HAL_GPIO_Init+0x264>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d101      	bne.n	8007f8a <HAL_GPIO_Init+0x20e>
 8007f86:	2309      	movs	r3, #9
 8007f88:	e02d      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f8a:	230a      	movs	r3, #10
 8007f8c:	e02b      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f8e:	2308      	movs	r3, #8
 8007f90:	e029      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f92:	2307      	movs	r3, #7
 8007f94:	e027      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f96:	2306      	movs	r3, #6
 8007f98:	e025      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f9a:	2305      	movs	r3, #5
 8007f9c:	e023      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007f9e:	2304      	movs	r3, #4
 8007fa0:	e021      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e01f      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e01d      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e01b      	b.n	8007fe6 <HAL_GPIO_Init+0x26a>
 8007fae:	bf00      	nop
 8007fb0:	58000080 	.word	0x58000080
 8007fb4:	58024400 	.word	0x58024400
 8007fb8:	58000400 	.word	0x58000400
 8007fbc:	58020000 	.word	0x58020000
 8007fc0:	58020400 	.word	0x58020400
 8007fc4:	58020800 	.word	0x58020800
 8007fc8:	58020c00 	.word	0x58020c00
 8007fcc:	58021000 	.word	0x58021000
 8007fd0:	58021400 	.word	0x58021400
 8007fd4:	58021800 	.word	0x58021800
 8007fd8:	58021c00 	.word	0x58021c00
 8007fdc:	58022000 	.word	0x58022000
 8007fe0:	58022400 	.word	0x58022400
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	f002 0203 	and.w	r2, r2, #3
 8007fec:	0092      	lsls	r2, r2, #2
 8007fee:	4093      	lsls	r3, r2
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ff6:	4938      	ldr	r1, [pc, #224]	; (80080d8 <HAL_GPIO_Init+0x35c>)
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	089b      	lsrs	r3, r3, #2
 8007ffc:	3302      	adds	r3, #2
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	43db      	mvns	r3, r3
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	4013      	ands	r3, r2
 8008014:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	4313      	orrs	r3, r2
 8008028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800802a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	43db      	mvns	r3, r3
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	4013      	ands	r3, r2
 8008042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	43db      	mvns	r3, r3
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	4013      	ands	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	4313      	orrs	r3, r2
 8008082:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	43db      	mvns	r3, r3
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	4013      	ands	r3, r2
 8008098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	3301      	adds	r3, #1
 80080b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	fa22 f303 	lsr.w	r3, r2, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f47f ae63 	bne.w	8007d90 <HAL_GPIO_Init+0x14>
  }
}
 80080ca:	bf00      	nop
 80080cc:	bf00      	nop
 80080ce:	3724      	adds	r7, #36	; 0x24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	58000400 	.word	0x58000400

080080dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	887b      	ldrh	r3, [r7, #2]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
 80080f8:	e001      	b.n	80080fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	807b      	strh	r3, [r7, #2]
 8008118:	4613      	mov	r3, r2
 800811a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800811c:	787b      	ldrb	r3, [r7, #1]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008122:	887a      	ldrh	r2, [r7, #2]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008128:	e003      	b.n	8008132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800812a:	887b      	ldrh	r3, [r7, #2]
 800812c:	041a      	lsls	r2, r3, #16
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	619a      	str	r2, [r3, #24]
}
 8008132:	bf00      	nop
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b082      	sub	sp, #8
 8008142:	af00      	add	r7, sp, #0
 8008144:	4603      	mov	r3, r0
 8008146:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800814c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	4013      	ands	r3, r2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d008      	beq.n	800816a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800815c:	88fb      	ldrh	r3, [r7, #6]
 800815e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	4618      	mov	r0, r3
 8008166:	f7fa ffed 	bl	8003144 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800816a:	bf00      	nop
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
	...

08008174 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800817c:	4b19      	ldr	r3, [pc, #100]	; (80081e4 <HAL_PWREx_ConfigSupply+0x70>)
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b04      	cmp	r3, #4
 8008186:	d00a      	beq.n	800819e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008188:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <HAL_PWREx_ConfigSupply+0x70>)
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0307 	and.w	r3, r3, #7
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	429a      	cmp	r2, r3
 8008194:	d001      	beq.n	800819a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e01f      	b.n	80081da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	e01d      	b.n	80081da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800819e:	4b11      	ldr	r3, [pc, #68]	; (80081e4 <HAL_PWREx_ConfigSupply+0x70>)
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f023 0207 	bic.w	r2, r3, #7
 80081a6:	490f      	ldr	r1, [pc, #60]	; (80081e4 <HAL_PWREx_ConfigSupply+0x70>)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80081ae:	f7fe ff03 	bl	8006fb8 <HAL_GetTick>
 80081b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081b4:	e009      	b.n	80081ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80081b6:	f7fe feff 	bl	8006fb8 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081c4:	d901      	bls.n	80081ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e007      	b.n	80081da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081ca:	4b06      	ldr	r3, [pc, #24]	; (80081e4 <HAL_PWREx_ConfigSupply+0x70>)
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d6:	d1ee      	bne.n	80081b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	58024800 	.word	0x58024800

080081e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08c      	sub	sp, #48	; 0x30
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d102      	bne.n	80081fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	f000 bc1d 	b.w	8008a36 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8087 	beq.w	8008318 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800820a:	4b99      	ldr	r3, [pc, #612]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008212:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008214:	4b96      	ldr	r3, [pc, #600]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008218:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821c:	2b10      	cmp	r3, #16
 800821e:	d007      	beq.n	8008230 <HAL_RCC_OscConfig+0x48>
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	2b18      	cmp	r3, #24
 8008224:	d110      	bne.n	8008248 <HAL_RCC_OscConfig+0x60>
 8008226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008228:	f003 0303 	and.w	r3, r3, #3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d10b      	bne.n	8008248 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008230:	4b8f      	ldr	r3, [pc, #572]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d06c      	beq.n	8008316 <HAL_RCC_OscConfig+0x12e>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d168      	bne.n	8008316 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e3f6      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008250:	d106      	bne.n	8008260 <HAL_RCC_OscConfig+0x78>
 8008252:	4b87      	ldr	r3, [pc, #540]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a86      	ldr	r2, [pc, #536]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	e02e      	b.n	80082be <HAL_RCC_OscConfig+0xd6>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10c      	bne.n	8008282 <HAL_RCC_OscConfig+0x9a>
 8008268:	4b81      	ldr	r3, [pc, #516]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a80      	ldr	r2, [pc, #512]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 800826e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	4b7e      	ldr	r3, [pc, #504]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a7d      	ldr	r2, [pc, #500]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 800827a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	e01d      	b.n	80082be <HAL_RCC_OscConfig+0xd6>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800828a:	d10c      	bne.n	80082a6 <HAL_RCC_OscConfig+0xbe>
 800828c:	4b78      	ldr	r3, [pc, #480]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a77      	ldr	r2, [pc, #476]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	4b75      	ldr	r3, [pc, #468]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a74      	ldr	r2, [pc, #464]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 800829e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	e00b      	b.n	80082be <HAL_RCC_OscConfig+0xd6>
 80082a6:	4b72      	ldr	r3, [pc, #456]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a71      	ldr	r2, [pc, #452]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80082ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	4b6f      	ldr	r3, [pc, #444]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a6e      	ldr	r2, [pc, #440]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80082b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d013      	beq.n	80082ee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c6:	f7fe fe77 	bl	8006fb8 <HAL_GetTick>
 80082ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082cc:	e008      	b.n	80082e0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082ce:	f7fe fe73 	bl	8006fb8 <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	2b64      	cmp	r3, #100	; 0x64
 80082da:	d901      	bls.n	80082e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e3aa      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082e0:	4b63      	ldr	r3, [pc, #396]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0f0      	beq.n	80082ce <HAL_RCC_OscConfig+0xe6>
 80082ec:	e014      	b.n	8008318 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ee:	f7fe fe63 	bl	8006fb8 <HAL_GetTick>
 80082f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082f4:	e008      	b.n	8008308 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082f6:	f7fe fe5f 	bl	8006fb8 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b64      	cmp	r3, #100	; 0x64
 8008302:	d901      	bls.n	8008308 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e396      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008308:	4b59      	ldr	r3, [pc, #356]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1f0      	bne.n	80082f6 <HAL_RCC_OscConfig+0x10e>
 8008314:	e000      	b.n	8008318 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008316:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 80cb 	beq.w	80084bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008326:	4b52      	ldr	r3, [pc, #328]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800832e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008330:	4b4f      	ldr	r3, [pc, #316]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d007      	beq.n	800834c <HAL_RCC_OscConfig+0x164>
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	2b18      	cmp	r3, #24
 8008340:	d156      	bne.n	80083f0 <HAL_RCC_OscConfig+0x208>
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	f003 0303 	and.w	r3, r3, #3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d151      	bne.n	80083f0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800834c:	4b48      	ldr	r3, [pc, #288]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <HAL_RCC_OscConfig+0x17c>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e368      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008364:	4b42      	ldr	r3, [pc, #264]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f023 0219 	bic.w	r2, r3, #25
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	493f      	ldr	r1, [pc, #252]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008372:	4313      	orrs	r3, r2
 8008374:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008376:	f7fe fe1f 	bl	8006fb8 <HAL_GetTick>
 800837a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800837c:	e008      	b.n	8008390 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800837e:	f7fe fe1b 	bl	8006fb8 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e352      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008390:	4b37      	ldr	r3, [pc, #220]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0f0      	beq.n	800837e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800839c:	f7fe fe3c 	bl	8007018 <HAL_GetREVID>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d817      	bhi.n	80083da <HAL_RCC_OscConfig+0x1f2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	2b40      	cmp	r3, #64	; 0x40
 80083b0:	d108      	bne.n	80083c4 <HAL_RCC_OscConfig+0x1dc>
 80083b2:	4b2f      	ldr	r3, [pc, #188]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80083ba:	4a2d      	ldr	r2, [pc, #180]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80083bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083c2:	e07b      	b.n	80084bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083c4:	4b2a      	ldr	r3, [pc, #168]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	031b      	lsls	r3, r3, #12
 80083d2:	4927      	ldr	r1, [pc, #156]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083d8:	e070      	b.n	80084bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083da:	4b25      	ldr	r3, [pc, #148]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	061b      	lsls	r3, r3, #24
 80083e8:	4921      	ldr	r1, [pc, #132]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083ee:	e065      	b.n	80084bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d048      	beq.n	800848a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083f8:	4b1d      	ldr	r3, [pc, #116]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f023 0219 	bic.w	r2, r3, #25
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	491a      	ldr	r1, [pc, #104]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008406:	4313      	orrs	r3, r2
 8008408:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840a:	f7fe fdd5 	bl	8006fb8 <HAL_GetTick>
 800840e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008410:	e008      	b.n	8008424 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008412:	f7fe fdd1 	bl	8006fb8 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d901      	bls.n	8008424 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e308      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008424:	4b12      	ldr	r3, [pc, #72]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0f0      	beq.n	8008412 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008430:	f7fe fdf2 	bl	8007018 <HAL_GetREVID>
 8008434:	4603      	mov	r3, r0
 8008436:	f241 0203 	movw	r2, #4099	; 0x1003
 800843a:	4293      	cmp	r3, r2
 800843c:	d81a      	bhi.n	8008474 <HAL_RCC_OscConfig+0x28c>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	d108      	bne.n	8008458 <HAL_RCC_OscConfig+0x270>
 8008446:	4b0a      	ldr	r3, [pc, #40]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800844e:	4a08      	ldr	r2, [pc, #32]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008454:	6053      	str	r3, [r2, #4]
 8008456:	e031      	b.n	80084bc <HAL_RCC_OscConfig+0x2d4>
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	031b      	lsls	r3, r3, #12
 8008466:	4902      	ldr	r1, [pc, #8]	; (8008470 <HAL_RCC_OscConfig+0x288>)
 8008468:	4313      	orrs	r3, r2
 800846a:	604b      	str	r3, [r1, #4]
 800846c:	e026      	b.n	80084bc <HAL_RCC_OscConfig+0x2d4>
 800846e:	bf00      	nop
 8008470:	58024400 	.word	0x58024400
 8008474:	4b9a      	ldr	r3, [pc, #616]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	061b      	lsls	r3, r3, #24
 8008482:	4997      	ldr	r1, [pc, #604]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008484:	4313      	orrs	r3, r2
 8008486:	604b      	str	r3, [r1, #4]
 8008488:	e018      	b.n	80084bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800848a:	4b95      	ldr	r3, [pc, #596]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a94      	ldr	r2, [pc, #592]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008490:	f023 0301 	bic.w	r3, r3, #1
 8008494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008496:	f7fe fd8f 	bl	8006fb8 <HAL_GetTick>
 800849a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800849c:	e008      	b.n	80084b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800849e:	f7fe fd8b 	bl	8006fb8 <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d901      	bls.n	80084b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e2c2      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084b0:	4b8b      	ldr	r3, [pc, #556]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f0      	bne.n	800849e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 80a9 	beq.w	800861c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084ca:	4b85      	ldr	r3, [pc, #532]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084d4:	4b82      	ldr	r3, [pc, #520]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d007      	beq.n	80084f0 <HAL_RCC_OscConfig+0x308>
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	2b18      	cmp	r3, #24
 80084e4:	d13a      	bne.n	800855c <HAL_RCC_OscConfig+0x374>
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f003 0303 	and.w	r3, r3, #3
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d135      	bne.n	800855c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084f0:	4b7b      	ldr	r3, [pc, #492]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d005      	beq.n	8008508 <HAL_RCC_OscConfig+0x320>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	2b80      	cmp	r3, #128	; 0x80
 8008502:	d001      	beq.n	8008508 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e296      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008508:	f7fe fd86 	bl	8007018 <HAL_GetREVID>
 800850c:	4603      	mov	r3, r0
 800850e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008512:	4293      	cmp	r3, r2
 8008514:	d817      	bhi.n	8008546 <HAL_RCC_OscConfig+0x35e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	2b20      	cmp	r3, #32
 800851c:	d108      	bne.n	8008530 <HAL_RCC_OscConfig+0x348>
 800851e:	4b70      	ldr	r3, [pc, #448]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008526:	4a6e      	ldr	r2, [pc, #440]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800852c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800852e:	e075      	b.n	800861c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008530:	4b6b      	ldr	r3, [pc, #428]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	069b      	lsls	r3, r3, #26
 800853e:	4968      	ldr	r1, [pc, #416]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008540:	4313      	orrs	r3, r2
 8008542:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008544:	e06a      	b.n	800861c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008546:	4b66      	ldr	r3, [pc, #408]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	061b      	lsls	r3, r3, #24
 8008554:	4962      	ldr	r1, [pc, #392]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008556:	4313      	orrs	r3, r2
 8008558:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800855a:	e05f      	b.n	800861c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d042      	beq.n	80085ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008564:	4b5e      	ldr	r3, [pc, #376]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a5d      	ldr	r2, [pc, #372]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 800856a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008570:	f7fe fd22 	bl	8006fb8 <HAL_GetTick>
 8008574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008576:	e008      	b.n	800858a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008578:	f7fe fd1e 	bl	8006fb8 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	2b02      	cmp	r3, #2
 8008584:	d901      	bls.n	800858a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e255      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800858a:	4b55      	ldr	r3, [pc, #340]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0f0      	beq.n	8008578 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008596:	f7fe fd3f 	bl	8007018 <HAL_GetREVID>
 800859a:	4603      	mov	r3, r0
 800859c:	f241 0203 	movw	r2, #4099	; 0x1003
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d817      	bhi.n	80085d4 <HAL_RCC_OscConfig+0x3ec>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	d108      	bne.n	80085be <HAL_RCC_OscConfig+0x3d6>
 80085ac:	4b4c      	ldr	r3, [pc, #304]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80085b4:	4a4a      	ldr	r2, [pc, #296]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80085b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085ba:	6053      	str	r3, [r2, #4]
 80085bc:	e02e      	b.n	800861c <HAL_RCC_OscConfig+0x434>
 80085be:	4b48      	ldr	r3, [pc, #288]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	069b      	lsls	r3, r3, #26
 80085cc:	4944      	ldr	r1, [pc, #272]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	604b      	str	r3, [r1, #4]
 80085d2:	e023      	b.n	800861c <HAL_RCC_OscConfig+0x434>
 80085d4:	4b42      	ldr	r3, [pc, #264]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a1b      	ldr	r3, [r3, #32]
 80085e0:	061b      	lsls	r3, r3, #24
 80085e2:	493f      	ldr	r1, [pc, #252]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	60cb      	str	r3, [r1, #12]
 80085e8:	e018      	b.n	800861c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80085ea:	4b3d      	ldr	r3, [pc, #244]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a3c      	ldr	r2, [pc, #240]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80085f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f6:	f7fe fcdf 	bl	8006fb8 <HAL_GetTick>
 80085fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085fc:	e008      	b.n	8008610 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80085fe:	f7fe fcdb 	bl	8006fb8 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d901      	bls.n	8008610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e212      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008610:	4b33      	ldr	r3, [pc, #204]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1f0      	bne.n	80085fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b00      	cmp	r3, #0
 8008626:	d036      	beq.n	8008696 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d019      	beq.n	8008664 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008630:	4b2b      	ldr	r3, [pc, #172]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008634:	4a2a      	ldr	r2, [pc, #168]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008636:	f043 0301 	orr.w	r3, r3, #1
 800863a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800863c:	f7fe fcbc 	bl	8006fb8 <HAL_GetTick>
 8008640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008642:	e008      	b.n	8008656 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008644:	f7fe fcb8 	bl	8006fb8 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b02      	cmp	r3, #2
 8008650:	d901      	bls.n	8008656 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e1ef      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008656:	4b22      	ldr	r3, [pc, #136]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0f0      	beq.n	8008644 <HAL_RCC_OscConfig+0x45c>
 8008662:	e018      	b.n	8008696 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008664:	4b1e      	ldr	r3, [pc, #120]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 8008666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008668:	4a1d      	ldr	r2, [pc, #116]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 800866a:	f023 0301 	bic.w	r3, r3, #1
 800866e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008670:	f7fe fca2 	bl	8006fb8 <HAL_GetTick>
 8008674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008676:	e008      	b.n	800868a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008678:	f7fe fc9e 	bl	8006fb8 <HAL_GetTick>
 800867c:	4602      	mov	r2, r0
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	2b02      	cmp	r3, #2
 8008684:	d901      	bls.n	800868a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e1d5      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800868a:	4b15      	ldr	r3, [pc, #84]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 800868c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1f0      	bne.n	8008678 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d039      	beq.n	8008716 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d01c      	beq.n	80086e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086aa:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a0c      	ldr	r2, [pc, #48]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80086b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80086b6:	f7fe fc7f 	bl	8006fb8 <HAL_GetTick>
 80086ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086bc:	e008      	b.n	80086d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80086be:	f7fe fc7b 	bl	8006fb8 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e1b2      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086d0:	4b03      	ldr	r3, [pc, #12]	; (80086e0 <HAL_RCC_OscConfig+0x4f8>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0f0      	beq.n	80086be <HAL_RCC_OscConfig+0x4d6>
 80086dc:	e01b      	b.n	8008716 <HAL_RCC_OscConfig+0x52e>
 80086de:	bf00      	nop
 80086e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086e4:	4b9b      	ldr	r3, [pc, #620]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a9a      	ldr	r2, [pc, #616]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80086ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80086f0:	f7fe fc62 	bl	8006fb8 <HAL_GetTick>
 80086f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086f6:	e008      	b.n	800870a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80086f8:	f7fe fc5e 	bl	8006fb8 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e195      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800870a:	4b92      	ldr	r3, [pc, #584]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1f0      	bne.n	80086f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0304 	and.w	r3, r3, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 8081 	beq.w	8008826 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008724:	4b8c      	ldr	r3, [pc, #560]	; (8008958 <HAL_RCC_OscConfig+0x770>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a8b      	ldr	r2, [pc, #556]	; (8008958 <HAL_RCC_OscConfig+0x770>)
 800872a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800872e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008730:	f7fe fc42 	bl	8006fb8 <HAL_GetTick>
 8008734:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008736:	e008      	b.n	800874a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008738:	f7fe fc3e 	bl	8006fb8 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	2b64      	cmp	r3, #100	; 0x64
 8008744:	d901      	bls.n	800874a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	e175      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800874a:	4b83      	ldr	r3, [pc, #524]	; (8008958 <HAL_RCC_OscConfig+0x770>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0f0      	beq.n	8008738 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d106      	bne.n	800876c <HAL_RCC_OscConfig+0x584>
 800875e:	4b7d      	ldr	r3, [pc, #500]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008762:	4a7c      	ldr	r2, [pc, #496]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008764:	f043 0301 	orr.w	r3, r3, #1
 8008768:	6713      	str	r3, [r2, #112]	; 0x70
 800876a:	e02d      	b.n	80087c8 <HAL_RCC_OscConfig+0x5e0>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10c      	bne.n	800878e <HAL_RCC_OscConfig+0x5a6>
 8008774:	4b77      	ldr	r3, [pc, #476]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008778:	4a76      	ldr	r2, [pc, #472]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 800877a:	f023 0301 	bic.w	r3, r3, #1
 800877e:	6713      	str	r3, [r2, #112]	; 0x70
 8008780:	4b74      	ldr	r3, [pc, #464]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008784:	4a73      	ldr	r2, [pc, #460]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008786:	f023 0304 	bic.w	r3, r3, #4
 800878a:	6713      	str	r3, [r2, #112]	; 0x70
 800878c:	e01c      	b.n	80087c8 <HAL_RCC_OscConfig+0x5e0>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	2b05      	cmp	r3, #5
 8008794:	d10c      	bne.n	80087b0 <HAL_RCC_OscConfig+0x5c8>
 8008796:	4b6f      	ldr	r3, [pc, #444]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879a:	4a6e      	ldr	r2, [pc, #440]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 800879c:	f043 0304 	orr.w	r3, r3, #4
 80087a0:	6713      	str	r3, [r2, #112]	; 0x70
 80087a2:	4b6c      	ldr	r3, [pc, #432]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80087a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a6:	4a6b      	ldr	r2, [pc, #428]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80087a8:	f043 0301 	orr.w	r3, r3, #1
 80087ac:	6713      	str	r3, [r2, #112]	; 0x70
 80087ae:	e00b      	b.n	80087c8 <HAL_RCC_OscConfig+0x5e0>
 80087b0:	4b68      	ldr	r3, [pc, #416]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80087b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b4:	4a67      	ldr	r2, [pc, #412]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80087b6:	f023 0301 	bic.w	r3, r3, #1
 80087ba:	6713      	str	r3, [r2, #112]	; 0x70
 80087bc:	4b65      	ldr	r3, [pc, #404]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80087be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c0:	4a64      	ldr	r2, [pc, #400]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80087c2:	f023 0304 	bic.w	r3, r3, #4
 80087c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d015      	beq.n	80087fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d0:	f7fe fbf2 	bl	8006fb8 <HAL_GetTick>
 80087d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087d6:	e00a      	b.n	80087ee <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087d8:	f7fe fbee 	bl	8006fb8 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e123      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087ee:	4b59      	ldr	r3, [pc, #356]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0ee      	beq.n	80087d8 <HAL_RCC_OscConfig+0x5f0>
 80087fa:	e014      	b.n	8008826 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087fc:	f7fe fbdc 	bl	8006fb8 <HAL_GetTick>
 8008800:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008802:	e00a      	b.n	800881a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008804:	f7fe fbd8 	bl	8006fb8 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008812:	4293      	cmp	r3, r2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e10d      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800881a:	4b4e      	ldr	r3, [pc, #312]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 800881c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1ee      	bne.n	8008804 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 8102 	beq.w	8008a34 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008830:	4b48      	ldr	r3, [pc, #288]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008838:	2b18      	cmp	r3, #24
 800883a:	f000 80bd 	beq.w	80089b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008842:	2b02      	cmp	r3, #2
 8008844:	f040 809e 	bne.w	8008984 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008848:	4b42      	ldr	r3, [pc, #264]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a41      	ldr	r2, [pc, #260]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 800884e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008854:	f7fe fbb0 	bl	8006fb8 <HAL_GetTick>
 8008858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800885c:	f7fe fbac 	bl	8006fb8 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e0e3      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800886e:	4b39      	ldr	r3, [pc, #228]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1f0      	bne.n	800885c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800887a:	4b36      	ldr	r3, [pc, #216]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 800887c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800887e:	4b37      	ldr	r3, [pc, #220]	; (800895c <HAL_RCC_OscConfig+0x774>)
 8008880:	4013      	ands	r3, r2
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800888a:	0112      	lsls	r2, r2, #4
 800888c:	430a      	orrs	r2, r1
 800888e:	4931      	ldr	r1, [pc, #196]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008890:	4313      	orrs	r3, r2
 8008892:	628b      	str	r3, [r1, #40]	; 0x28
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008898:	3b01      	subs	r3, #1
 800889a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a2:	3b01      	subs	r3, #1
 80088a4:	025b      	lsls	r3, r3, #9
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	431a      	orrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ae:	3b01      	subs	r3, #1
 80088b0:	041b      	lsls	r3, r3, #16
 80088b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088bc:	3b01      	subs	r3, #1
 80088be:	061b      	lsls	r3, r3, #24
 80088c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088c4:	4923      	ldr	r1, [pc, #140]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80088ca:	4b22      	ldr	r3, [pc, #136]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	4a21      	ldr	r2, [pc, #132]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80088d0:	f023 0301 	bic.w	r3, r3, #1
 80088d4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80088d6:	4b1f      	ldr	r3, [pc, #124]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80088d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088da:	4b21      	ldr	r3, [pc, #132]	; (8008960 <HAL_RCC_OscConfig+0x778>)
 80088dc:	4013      	ands	r3, r2
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80088e2:	00d2      	lsls	r2, r2, #3
 80088e4:	491b      	ldr	r1, [pc, #108]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80088ea:	4b1a      	ldr	r3, [pc, #104]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	f023 020c 	bic.w	r2, r3, #12
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	4917      	ldr	r1, [pc, #92]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80088fc:	4b15      	ldr	r3, [pc, #84]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	f023 0202 	bic.w	r2, r3, #2
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008908:	4912      	ldr	r1, [pc, #72]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 800890a:	4313      	orrs	r3, r2
 800890c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800890e:	4b11      	ldr	r3, [pc, #68]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	4a10      	ldr	r2, [pc, #64]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008918:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800891a:	4b0e      	ldr	r3, [pc, #56]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 800891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891e:	4a0d      	ldr	r2, [pc, #52]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008926:	4b0b      	ldr	r3, [pc, #44]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892a:	4a0a      	ldr	r2, [pc, #40]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 800892c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008930:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008932:	4b08      	ldr	r3, [pc, #32]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008936:	4a07      	ldr	r2, [pc, #28]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008938:	f043 0301 	orr.w	r3, r3, #1
 800893c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800893e:	4b05      	ldr	r3, [pc, #20]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a04      	ldr	r2, [pc, #16]	; (8008954 <HAL_RCC_OscConfig+0x76c>)
 8008944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800894a:	f7fe fb35 	bl	8006fb8 <HAL_GetTick>
 800894e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008950:	e011      	b.n	8008976 <HAL_RCC_OscConfig+0x78e>
 8008952:	bf00      	nop
 8008954:	58024400 	.word	0x58024400
 8008958:	58024800 	.word	0x58024800
 800895c:	fffffc0c 	.word	0xfffffc0c
 8008960:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008964:	f7fe fb28 	bl	8006fb8 <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	2b02      	cmp	r3, #2
 8008970:	d901      	bls.n	8008976 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e05f      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008976:	4b32      	ldr	r3, [pc, #200]	; (8008a40 <HAL_RCC_OscConfig+0x858>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0f0      	beq.n	8008964 <HAL_RCC_OscConfig+0x77c>
 8008982:	e057      	b.n	8008a34 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008984:	4b2e      	ldr	r3, [pc, #184]	; (8008a40 <HAL_RCC_OscConfig+0x858>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a2d      	ldr	r2, [pc, #180]	; (8008a40 <HAL_RCC_OscConfig+0x858>)
 800898a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800898e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008990:	f7fe fb12 	bl	8006fb8 <HAL_GetTick>
 8008994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008996:	e008      	b.n	80089aa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008998:	f7fe fb0e 	bl	8006fb8 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e045      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089aa:	4b25      	ldr	r3, [pc, #148]	; (8008a40 <HAL_RCC_OscConfig+0x858>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1f0      	bne.n	8008998 <HAL_RCC_OscConfig+0x7b0>
 80089b6:	e03d      	b.n	8008a34 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80089b8:	4b21      	ldr	r3, [pc, #132]	; (8008a40 <HAL_RCC_OscConfig+0x858>)
 80089ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80089be:	4b20      	ldr	r3, [pc, #128]	; (8008a40 <HAL_RCC_OscConfig+0x858>)
 80089c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d031      	beq.n	8008a30 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f003 0203 	and.w	r2, r3, #3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d12a      	bne.n	8008a30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	091b      	lsrs	r3, r3, #4
 80089de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d122      	bne.n	8008a30 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d11a      	bne.n	8008a30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	0a5b      	lsrs	r3, r3, #9
 80089fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d111      	bne.n	8008a30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	0c1b      	lsrs	r3, r3, #16
 8008a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d108      	bne.n	8008a30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	0e1b      	lsrs	r3, r3, #24
 8008a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d001      	beq.n	8008a34 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e000      	b.n	8008a36 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3730      	adds	r7, #48	; 0x30
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	58024400 	.word	0x58024400

08008a44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e19c      	b.n	8008d92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a58:	4b8a      	ldr	r3, [pc, #552]	; (8008c84 <HAL_RCC_ClockConfig+0x240>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d910      	bls.n	8008a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a66:	4b87      	ldr	r3, [pc, #540]	; (8008c84 <HAL_RCC_ClockConfig+0x240>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f023 020f 	bic.w	r2, r3, #15
 8008a6e:	4985      	ldr	r1, [pc, #532]	; (8008c84 <HAL_RCC_ClockConfig+0x240>)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a76:	4b83      	ldr	r3, [pc, #524]	; (8008c84 <HAL_RCC_ClockConfig+0x240>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 030f 	and.w	r3, r3, #15
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d001      	beq.n	8008a88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e184      	b.n	8008d92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d010      	beq.n	8008ab6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	691a      	ldr	r2, [r3, #16]
 8008a98:	4b7b      	ldr	r3, [pc, #492]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d908      	bls.n	8008ab6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008aa4:	4b78      	ldr	r3, [pc, #480]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	4975      	ldr	r1, [pc, #468]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d010      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695a      	ldr	r2, [r3, #20]
 8008ac6:	4b70      	ldr	r3, [pc, #448]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d908      	bls.n	8008ae4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ad2:	4b6d      	ldr	r3, [pc, #436]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	496a      	ldr	r1, [pc, #424]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0310 	and.w	r3, r3, #16
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d010      	beq.n	8008b12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	699a      	ldr	r2, [r3, #24]
 8008af4:	4b64      	ldr	r3, [pc, #400]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d908      	bls.n	8008b12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b00:	4b61      	ldr	r3, [pc, #388]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	495e      	ldr	r1, [pc, #376]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0320 	and.w	r3, r3, #32
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d010      	beq.n	8008b40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	69da      	ldr	r2, [r3, #28]
 8008b22:	4b59      	ldr	r3, [pc, #356]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d908      	bls.n	8008b40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b2e:	4b56      	ldr	r3, [pc, #344]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	4953      	ldr	r1, [pc, #332]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d010      	beq.n	8008b6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68da      	ldr	r2, [r3, #12]
 8008b50:	4b4d      	ldr	r3, [pc, #308]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	f003 030f 	and.w	r3, r3, #15
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d908      	bls.n	8008b6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b5c:	4b4a      	ldr	r3, [pc, #296]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	f023 020f 	bic.w	r2, r3, #15
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	4947      	ldr	r1, [pc, #284]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d055      	beq.n	8008c26 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b7a:	4b43      	ldr	r3, [pc, #268]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	4940      	ldr	r1, [pc, #256]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d107      	bne.n	8008ba4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b94:	4b3c      	ldr	r3, [pc, #240]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d121      	bne.n	8008be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e0f6      	b.n	8008d92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d107      	bne.n	8008bbc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bac:	4b36      	ldr	r3, [pc, #216]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d115      	bne.n	8008be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e0ea      	b.n	8008d92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d107      	bne.n	8008bd4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bc4:	4b30      	ldr	r3, [pc, #192]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d109      	bne.n	8008be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e0de      	b.n	8008d92 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bd4:	4b2c      	ldr	r3, [pc, #176]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e0d6      	b.n	8008d92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008be4:	4b28      	ldr	r3, [pc, #160]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	f023 0207 	bic.w	r2, r3, #7
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4925      	ldr	r1, [pc, #148]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bf6:	f7fe f9df 	bl	8006fb8 <HAL_GetTick>
 8008bfa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bfc:	e00a      	b.n	8008c14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bfe:	f7fe f9db 	bl	8006fb8 <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d901      	bls.n	8008c14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e0be      	b.n	8008d92 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c14:	4b1c      	ldr	r3, [pc, #112]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	00db      	lsls	r3, r3, #3
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d1eb      	bne.n	8008bfe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 0302 	and.w	r3, r3, #2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d010      	beq.n	8008c54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68da      	ldr	r2, [r3, #12]
 8008c36:	4b14      	ldr	r3, [pc, #80]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d208      	bcs.n	8008c54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c42:	4b11      	ldr	r3, [pc, #68]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f023 020f 	bic.w	r2, r3, #15
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	490e      	ldr	r1, [pc, #56]	; (8008c88 <HAL_RCC_ClockConfig+0x244>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c54:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <HAL_RCC_ClockConfig+0x240>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 030f 	and.w	r3, r3, #15
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d214      	bcs.n	8008c8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c62:	4b08      	ldr	r3, [pc, #32]	; (8008c84 <HAL_RCC_ClockConfig+0x240>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f023 020f 	bic.w	r2, r3, #15
 8008c6a:	4906      	ldr	r1, [pc, #24]	; (8008c84 <HAL_RCC_ClockConfig+0x240>)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c72:	4b04      	ldr	r3, [pc, #16]	; (8008c84 <HAL_RCC_ClockConfig+0x240>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 030f 	and.w	r3, r3, #15
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d005      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e086      	b.n	8008d92 <HAL_RCC_ClockConfig+0x34e>
 8008c84:	52002000 	.word	0x52002000
 8008c88:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d010      	beq.n	8008cba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	691a      	ldr	r2, [r3, #16]
 8008c9c:	4b3f      	ldr	r3, [pc, #252]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d208      	bcs.n	8008cba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ca8:	4b3c      	ldr	r3, [pc, #240]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	4939      	ldr	r1, [pc, #228]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0308 	and.w	r3, r3, #8
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d010      	beq.n	8008ce8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	695a      	ldr	r2, [r3, #20]
 8008cca:	4b34      	ldr	r3, [pc, #208]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d208      	bcs.n	8008ce8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cd6:	4b31      	ldr	r3, [pc, #196]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	492e      	ldr	r1, [pc, #184]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0310 	and.w	r3, r3, #16
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d010      	beq.n	8008d16 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699a      	ldr	r2, [r3, #24]
 8008cf8:	4b28      	ldr	r3, [pc, #160]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d208      	bcs.n	8008d16 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d04:	4b25      	ldr	r3, [pc, #148]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	4922      	ldr	r1, [pc, #136]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0320 	and.w	r3, r3, #32
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d010      	beq.n	8008d44 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69da      	ldr	r2, [r3, #28]
 8008d26:	4b1d      	ldr	r3, [pc, #116]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d208      	bcs.n	8008d44 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d32:	4b1a      	ldr	r3, [pc, #104]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	4917      	ldr	r1, [pc, #92]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d44:	f000 f834 	bl	8008db0 <HAL_RCC_GetSysClockFreq>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	4b14      	ldr	r3, [pc, #80]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	0a1b      	lsrs	r3, r3, #8
 8008d50:	f003 030f 	and.w	r3, r3, #15
 8008d54:	4912      	ldr	r1, [pc, #72]	; (8008da0 <HAL_RCC_ClockConfig+0x35c>)
 8008d56:	5ccb      	ldrb	r3, [r1, r3]
 8008d58:	f003 031f 	and.w	r3, r3, #31
 8008d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d62:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <HAL_RCC_ClockConfig+0x358>)
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	f003 030f 	and.w	r3, r3, #15
 8008d6a:	4a0d      	ldr	r2, [pc, #52]	; (8008da0 <HAL_RCC_ClockConfig+0x35c>)
 8008d6c:	5cd3      	ldrb	r3, [r2, r3]
 8008d6e:	f003 031f 	and.w	r3, r3, #31
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	fa22 f303 	lsr.w	r3, r2, r3
 8008d78:	4a0a      	ldr	r2, [pc, #40]	; (8008da4 <HAL_RCC_ClockConfig+0x360>)
 8008d7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d7c:	4a0a      	ldr	r2, [pc, #40]	; (8008da8 <HAL_RCC_ClockConfig+0x364>)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008d82:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <HAL_RCC_ClockConfig+0x368>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe f8cc 	bl	8006f24 <HAL_InitTick>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	08012638 	.word	0x08012638
 8008da4:	24000014 	.word	0x24000014
 8008da8:	24000010 	.word	0x24000010
 8008dac:	240000a8 	.word	0x240000a8

08008db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b089      	sub	sp, #36	; 0x24
 8008db4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008db6:	4bb3      	ldr	r3, [pc, #716]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dbe:	2b18      	cmp	r3, #24
 8008dc0:	f200 8155 	bhi.w	800906e <HAL_RCC_GetSysClockFreq+0x2be>
 8008dc4:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <HAL_RCC_GetSysClockFreq+0x1c>)
 8008dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dca:	bf00      	nop
 8008dcc:	08008e31 	.word	0x08008e31
 8008dd0:	0800906f 	.word	0x0800906f
 8008dd4:	0800906f 	.word	0x0800906f
 8008dd8:	0800906f 	.word	0x0800906f
 8008ddc:	0800906f 	.word	0x0800906f
 8008de0:	0800906f 	.word	0x0800906f
 8008de4:	0800906f 	.word	0x0800906f
 8008de8:	0800906f 	.word	0x0800906f
 8008dec:	08008e57 	.word	0x08008e57
 8008df0:	0800906f 	.word	0x0800906f
 8008df4:	0800906f 	.word	0x0800906f
 8008df8:	0800906f 	.word	0x0800906f
 8008dfc:	0800906f 	.word	0x0800906f
 8008e00:	0800906f 	.word	0x0800906f
 8008e04:	0800906f 	.word	0x0800906f
 8008e08:	0800906f 	.word	0x0800906f
 8008e0c:	08008e5d 	.word	0x08008e5d
 8008e10:	0800906f 	.word	0x0800906f
 8008e14:	0800906f 	.word	0x0800906f
 8008e18:	0800906f 	.word	0x0800906f
 8008e1c:	0800906f 	.word	0x0800906f
 8008e20:	0800906f 	.word	0x0800906f
 8008e24:	0800906f 	.word	0x0800906f
 8008e28:	0800906f 	.word	0x0800906f
 8008e2c:	08008e63 	.word	0x08008e63
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e30:	4b94      	ldr	r3, [pc, #592]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0320 	and.w	r3, r3, #32
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d009      	beq.n	8008e50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e3c:	4b91      	ldr	r3, [pc, #580]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	08db      	lsrs	r3, r3, #3
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	4a90      	ldr	r2, [pc, #576]	; (8009088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e48:	fa22 f303 	lsr.w	r3, r2, r3
 8008e4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008e4e:	e111      	b.n	8009074 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e50:	4b8d      	ldr	r3, [pc, #564]	; (8009088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e52:	61bb      	str	r3, [r7, #24]
    break;
 8008e54:	e10e      	b.n	8009074 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008e56:	4b8d      	ldr	r3, [pc, #564]	; (800908c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e58:	61bb      	str	r3, [r7, #24]
    break;
 8008e5a:	e10b      	b.n	8009074 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008e5c:	4b8c      	ldr	r3, [pc, #560]	; (8009090 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008e5e:	61bb      	str	r3, [r7, #24]
    break;
 8008e60:	e108      	b.n	8009074 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e62:	4b88      	ldr	r3, [pc, #544]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008e6c:	4b85      	ldr	r3, [pc, #532]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e70:	091b      	lsrs	r3, r3, #4
 8008e72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e76:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e78:	4b82      	ldr	r3, [pc, #520]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008e82:	4b80      	ldr	r3, [pc, #512]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e86:	08db      	lsrs	r3, r3, #3
 8008e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	fb02 f303 	mul.w	r3, r2, r3
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 80e1 	beq.w	8009068 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	f000 8083 	beq.w	8008fb4 <HAL_RCC_GetSysClockFreq+0x204>
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	f200 80a1 	bhi.w	8008ff8 <HAL_RCC_GetSysClockFreq+0x248>
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x114>
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d056      	beq.n	8008f70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008ec2:	e099      	b.n	8008ff8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ec4:	4b6f      	ldr	r3, [pc, #444]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0320 	and.w	r3, r3, #32
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d02d      	beq.n	8008f2c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ed0:	4b6c      	ldr	r3, [pc, #432]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	08db      	lsrs	r3, r3, #3
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	4a6b      	ldr	r2, [pc, #428]	; (8009088 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008edc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	ee07 3a90 	vmov	s15, r3
 8008ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008efa:	4b62      	ldr	r3, [pc, #392]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f02:	ee07 3a90 	vmov	s15, r3
 8008f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008f2a:	e087      	b.n	800903c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009098 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f3e:	4b51      	ldr	r3, [pc, #324]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f46:	ee07 3a90 	vmov	s15, r3
 8008f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f52:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f6e:	e065      	b.n	800903c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	ee07 3a90 	vmov	s15, r3
 8008f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800909c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f82:	4b40      	ldr	r3, [pc, #256]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fb2:	e043      	b.n	800903c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fbe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80090a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc6:	4b2f      	ldr	r3, [pc, #188]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ff6:	e021      	b.n	800903c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009002:	eddf 6a26 	vldr	s13, [pc, #152]	; 800909c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900a:	4b1e      	ldr	r3, [pc, #120]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800900c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901a:	ed97 6a02 	vldr	s12, [r7, #8]
 800901e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009094 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800902e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800903a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800903c:	4b11      	ldr	r3, [pc, #68]	; (8009084 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009040:	0a5b      	lsrs	r3, r3, #9
 8009042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009046:	3301      	adds	r3, #1
 8009048:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	ee07 3a90 	vmov	s15, r3
 8009050:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009054:	edd7 6a07 	vldr	s13, [r7, #28]
 8009058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800905c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009060:	ee17 3a90 	vmov	r3, s15
 8009064:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009066:	e005      	b.n	8009074 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	61bb      	str	r3, [r7, #24]
    break;
 800906c:	e002      	b.n	8009074 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800906e:	4b07      	ldr	r3, [pc, #28]	; (800908c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009070:	61bb      	str	r3, [r7, #24]
    break;
 8009072:	bf00      	nop
  }

  return sysclockfreq;
 8009074:	69bb      	ldr	r3, [r7, #24]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3724      	adds	r7, #36	; 0x24
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	58024400 	.word	0x58024400
 8009088:	03d09000 	.word	0x03d09000
 800908c:	003d0900 	.word	0x003d0900
 8009090:	017d7840 	.word	0x017d7840
 8009094:	46000000 	.word	0x46000000
 8009098:	4c742400 	.word	0x4c742400
 800909c:	4a742400 	.word	0x4a742400
 80090a0:	4bbebc20 	.word	0x4bbebc20

080090a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80090aa:	f7ff fe81 	bl	8008db0 <HAL_RCC_GetSysClockFreq>
 80090ae:	4602      	mov	r2, r0
 80090b0:	4b10      	ldr	r3, [pc, #64]	; (80090f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	0a1b      	lsrs	r3, r3, #8
 80090b6:	f003 030f 	and.w	r3, r3, #15
 80090ba:	490f      	ldr	r1, [pc, #60]	; (80090f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80090bc:	5ccb      	ldrb	r3, [r1, r3]
 80090be:	f003 031f 	and.w	r3, r3, #31
 80090c2:	fa22 f303 	lsr.w	r3, r2, r3
 80090c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	f003 030f 	and.w	r3, r3, #15
 80090d0:	4a09      	ldr	r2, [pc, #36]	; (80090f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80090d2:	5cd3      	ldrb	r3, [r2, r3]
 80090d4:	f003 031f 	and.w	r3, r3, #31
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	fa22 f303 	lsr.w	r3, r2, r3
 80090de:	4a07      	ldr	r2, [pc, #28]	; (80090fc <HAL_RCC_GetHCLKFreq+0x58>)
 80090e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090e2:	4a07      	ldr	r2, [pc, #28]	; (8009100 <HAL_RCC_GetHCLKFreq+0x5c>)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <HAL_RCC_GetHCLKFreq+0x58>)
 80090ea:	681b      	ldr	r3, [r3, #0]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	58024400 	.word	0x58024400
 80090f8:	08012638 	.word	0x08012638
 80090fc:	24000014 	.word	0x24000014
 8009100:	24000010 	.word	0x24000010

08009104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009108:	f7ff ffcc 	bl	80090a4 <HAL_RCC_GetHCLKFreq>
 800910c:	4602      	mov	r2, r0
 800910e:	4b06      	ldr	r3, [pc, #24]	; (8009128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	091b      	lsrs	r3, r3, #4
 8009114:	f003 0307 	and.w	r3, r3, #7
 8009118:	4904      	ldr	r1, [pc, #16]	; (800912c <HAL_RCC_GetPCLK1Freq+0x28>)
 800911a:	5ccb      	ldrb	r3, [r1, r3]
 800911c:	f003 031f 	and.w	r3, r3, #31
 8009120:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009124:	4618      	mov	r0, r3
 8009126:	bd80      	pop	{r7, pc}
 8009128:	58024400 	.word	0x58024400
 800912c:	08012638 	.word	0x08012638

08009130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009134:	f7ff ffb6 	bl	80090a4 <HAL_RCC_GetHCLKFreq>
 8009138:	4602      	mov	r2, r0
 800913a:	4b06      	ldr	r3, [pc, #24]	; (8009154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	0a1b      	lsrs	r3, r3, #8
 8009140:	f003 0307 	and.w	r3, r3, #7
 8009144:	4904      	ldr	r1, [pc, #16]	; (8009158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009146:	5ccb      	ldrb	r3, [r1, r3]
 8009148:	f003 031f 	and.w	r3, r3, #31
 800914c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009150:	4618      	mov	r0, r3
 8009152:	bd80      	pop	{r7, pc}
 8009154:	58024400 	.word	0x58024400
 8009158:	08012638 	.word	0x08012638

0800915c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009164:	2300      	movs	r3, #0
 8009166:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009168:	2300      	movs	r3, #0
 800916a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d03f      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800917c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009180:	d02a      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009182:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009186:	d824      	bhi.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800918c:	d018      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800918e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009192:	d81e      	bhi.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009194:	2b00      	cmp	r3, #0
 8009196:	d003      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800919c:	d007      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800919e:	e018      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091a0:	4ba3      	ldr	r3, [pc, #652]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a4:	4aa2      	ldr	r2, [pc, #648]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091ac:	e015      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3304      	adds	r3, #4
 80091b2:	2102      	movs	r1, #2
 80091b4:	4618      	mov	r0, r3
 80091b6:	f001 f9d5 	bl	800a564 <RCCEx_PLL2_Config>
 80091ba:	4603      	mov	r3, r0
 80091bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091be:	e00c      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3324      	adds	r3, #36	; 0x24
 80091c4:	2102      	movs	r1, #2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f001 fa7e 	bl	800a6c8 <RCCEx_PLL3_Config>
 80091cc:	4603      	mov	r3, r0
 80091ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091d0:	e003      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	75fb      	strb	r3, [r7, #23]
      break;
 80091d6:	e000      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80091d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d109      	bne.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80091e0:	4b93      	ldr	r3, [pc, #588]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091ec:	4990      	ldr	r1, [pc, #576]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	650b      	str	r3, [r1, #80]	; 0x50
 80091f2:	e001      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f4:	7dfb      	ldrb	r3, [r7, #23]
 80091f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009200:	2b00      	cmp	r3, #0
 8009202:	d03d      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009208:	2b04      	cmp	r3, #4
 800920a:	d826      	bhi.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800920c:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	08009229 	.word	0x08009229
 8009218:	08009237 	.word	0x08009237
 800921c:	08009249 	.word	0x08009249
 8009220:	08009261 	.word	0x08009261
 8009224:	08009261 	.word	0x08009261
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009228:	4b81      	ldr	r3, [pc, #516]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	4a80      	ldr	r2, [pc, #512]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800922e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009234:	e015      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3304      	adds	r3, #4
 800923a:	2100      	movs	r1, #0
 800923c:	4618      	mov	r0, r3
 800923e:	f001 f991 	bl	800a564 <RCCEx_PLL2_Config>
 8009242:	4603      	mov	r3, r0
 8009244:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009246:	e00c      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3324      	adds	r3, #36	; 0x24
 800924c:	2100      	movs	r1, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f001 fa3a 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009254:	4603      	mov	r3, r0
 8009256:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009258:	e003      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	75fb      	strb	r3, [r7, #23]
      break;
 800925e:	e000      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d109      	bne.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009268:	4b71      	ldr	r3, [pc, #452]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800926a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926c:	f023 0207 	bic.w	r2, r3, #7
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009274:	496e      	ldr	r1, [pc, #440]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009276:	4313      	orrs	r3, r2
 8009278:	650b      	str	r3, [r1, #80]	; 0x50
 800927a:	e001      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009288:	2b00      	cmp	r3, #0
 800928a:	d042      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009294:	d02b      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800929a:	d825      	bhi.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800929c:	2bc0      	cmp	r3, #192	; 0xc0
 800929e:	d028      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80092a0:	2bc0      	cmp	r3, #192	; 0xc0
 80092a2:	d821      	bhi.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80092a4:	2b80      	cmp	r3, #128	; 0x80
 80092a6:	d016      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80092a8:	2b80      	cmp	r3, #128	; 0x80
 80092aa:	d81d      	bhi.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80092b0:	2b40      	cmp	r3, #64	; 0x40
 80092b2:	d007      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80092b4:	e018      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092b6:	4b5e      	ldr	r3, [pc, #376]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ba:	4a5d      	ldr	r2, [pc, #372]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092c2:	e017      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3304      	adds	r3, #4
 80092c8:	2100      	movs	r1, #0
 80092ca:	4618      	mov	r0, r3
 80092cc:	f001 f94a 	bl	800a564 <RCCEx_PLL2_Config>
 80092d0:	4603      	mov	r3, r0
 80092d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092d4:	e00e      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3324      	adds	r3, #36	; 0x24
 80092da:	2100      	movs	r1, #0
 80092dc:	4618      	mov	r0, r3
 80092de:	f001 f9f3 	bl	800a6c8 <RCCEx_PLL3_Config>
 80092e2:	4603      	mov	r3, r0
 80092e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092e6:	e005      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	75fb      	strb	r3, [r7, #23]
      break;
 80092ec:	e002      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80092ee:	bf00      	nop
 80092f0:	e000      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80092f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d109      	bne.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80092fa:	4b4d      	ldr	r3, [pc, #308]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092fe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009306:	494a      	ldr	r1, [pc, #296]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009308:	4313      	orrs	r3, r2
 800930a:	650b      	str	r3, [r1, #80]	; 0x50
 800930c:	e001      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800930e:	7dfb      	ldrb	r3, [r7, #23]
 8009310:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800931a:	2b00      	cmp	r3, #0
 800931c:	d049      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009324:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009328:	d030      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800932a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800932e:	d82a      	bhi.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009330:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009334:	d02c      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009336:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800933a:	d824      	bhi.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800933c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009340:	d018      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009346:	d81e      	bhi.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009348:	2b00      	cmp	r3, #0
 800934a:	d003      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800934c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009350:	d007      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009352:	e018      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009354:	4b36      	ldr	r3, [pc, #216]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009358:	4a35      	ldr	r2, [pc, #212]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800935a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800935e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009360:	e017      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	3304      	adds	r3, #4
 8009366:	2100      	movs	r1, #0
 8009368:	4618      	mov	r0, r3
 800936a:	f001 f8fb 	bl	800a564 <RCCEx_PLL2_Config>
 800936e:	4603      	mov	r3, r0
 8009370:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009372:	e00e      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3324      	adds	r3, #36	; 0x24
 8009378:	2100      	movs	r1, #0
 800937a:	4618      	mov	r0, r3
 800937c:	f001 f9a4 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009380:	4603      	mov	r3, r0
 8009382:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009384:	e005      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	75fb      	strb	r3, [r7, #23]
      break;
 800938a:	e002      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800938c:	bf00      	nop
 800938e:	e000      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10a      	bne.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009398:	4b25      	ldr	r3, [pc, #148]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800939a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800939c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80093a6:	4922      	ldr	r1, [pc, #136]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	658b      	str	r3, [r1, #88]	; 0x58
 80093ac:	e001      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d04b      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80093c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093c8:	d030      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80093ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093ce:	d82a      	bhi.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093d4:	d02e      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80093d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093da:	d824      	bhi.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093e0:	d018      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80093e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093e6:	d81e      	bhi.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d003      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80093ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093f0:	d007      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80093f2:	e018      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093f4:	4b0e      	ldr	r3, [pc, #56]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	4a0d      	ldr	r2, [pc, #52]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009400:	e019      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3304      	adds	r3, #4
 8009406:	2100      	movs	r1, #0
 8009408:	4618      	mov	r0, r3
 800940a:	f001 f8ab 	bl	800a564 <RCCEx_PLL2_Config>
 800940e:	4603      	mov	r3, r0
 8009410:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009412:	e010      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3324      	adds	r3, #36	; 0x24
 8009418:	2100      	movs	r1, #0
 800941a:	4618      	mov	r0, r3
 800941c:	f001 f954 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009420:	4603      	mov	r3, r0
 8009422:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009424:	e007      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	75fb      	strb	r3, [r7, #23]
      break;
 800942a:	e004      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800942c:	bf00      	nop
 800942e:	e002      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009430:	58024400 	.word	0x58024400
      break;
 8009434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800943c:	4b99      	ldr	r3, [pc, #612]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800943e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009440:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800944a:	4996      	ldr	r1, [pc, #600]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800944c:	4313      	orrs	r3, r2
 800944e:	658b      	str	r3, [r1, #88]	; 0x58
 8009450:	e001      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d032      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009466:	2b30      	cmp	r3, #48	; 0x30
 8009468:	d01c      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800946a:	2b30      	cmp	r3, #48	; 0x30
 800946c:	d817      	bhi.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800946e:	2b20      	cmp	r3, #32
 8009470:	d00c      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009472:	2b20      	cmp	r3, #32
 8009474:	d813      	bhi.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009476:	2b00      	cmp	r3, #0
 8009478:	d016      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800947a:	2b10      	cmp	r3, #16
 800947c:	d10f      	bne.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800947e:	4b89      	ldr	r3, [pc, #548]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009482:	4a88      	ldr	r2, [pc, #544]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009488:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800948a:	e00e      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	3304      	adds	r3, #4
 8009490:	2102      	movs	r1, #2
 8009492:	4618      	mov	r0, r3
 8009494:	f001 f866 	bl	800a564 <RCCEx_PLL2_Config>
 8009498:	4603      	mov	r3, r0
 800949a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800949c:	e005      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	75fb      	strb	r3, [r7, #23]
      break;
 80094a2:	e002      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80094a4:	bf00      	nop
 80094a6:	e000      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80094a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d109      	bne.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80094b0:	4b7c      	ldr	r3, [pc, #496]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094bc:	4979      	ldr	r1, [pc, #484]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80094c2:	e001      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
 80094c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d047      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094dc:	d030      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80094de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094e2:	d82a      	bhi.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80094e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094e8:	d02c      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80094ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094ee:	d824      	bhi.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80094f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f4:	d018      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80094f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094fa:	d81e      	bhi.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009504:	d007      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009506:	e018      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009508:	4b66      	ldr	r3, [pc, #408]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	4a65      	ldr	r2, [pc, #404]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800950e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009514:	e017      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3304      	adds	r3, #4
 800951a:	2100      	movs	r1, #0
 800951c:	4618      	mov	r0, r3
 800951e:	f001 f821 	bl	800a564 <RCCEx_PLL2_Config>
 8009522:	4603      	mov	r3, r0
 8009524:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009526:	e00e      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3324      	adds	r3, #36	; 0x24
 800952c:	2100      	movs	r1, #0
 800952e:	4618      	mov	r0, r3
 8009530:	f001 f8ca 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009534:	4603      	mov	r3, r0
 8009536:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009538:	e005      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	75fb      	strb	r3, [r7, #23]
      break;
 800953e:	e002      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009540:	bf00      	nop
 8009542:	e000      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d109      	bne.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800954c:	4b55      	ldr	r3, [pc, #340]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800954e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009550:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009558:	4952      	ldr	r1, [pc, #328]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800955a:	4313      	orrs	r3, r2
 800955c:	650b      	str	r3, [r1, #80]	; 0x50
 800955e:	e001      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009560:	7dfb      	ldrb	r3, [r7, #23]
 8009562:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d049      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009578:	d02e      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800957a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800957e:	d828      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009584:	d02a      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009586:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800958a:	d822      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800958c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009590:	d026      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009592:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009596:	d81c      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800959c:	d010      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800959e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095a2:	d816      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01d      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80095a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ac:	d111      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	3304      	adds	r3, #4
 80095b2:	2101      	movs	r1, #1
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 ffd5 	bl	800a564 <RCCEx_PLL2_Config>
 80095ba:	4603      	mov	r3, r0
 80095bc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80095be:	e012      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3324      	adds	r3, #36	; 0x24
 80095c4:	2101      	movs	r1, #1
 80095c6:	4618      	mov	r0, r3
 80095c8:	f001 f87e 	bl	800a6c8 <RCCEx_PLL3_Config>
 80095cc:	4603      	mov	r3, r0
 80095ce:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80095d0:	e009      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	75fb      	strb	r3, [r7, #23]
      break;
 80095d6:	e006      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095d8:	bf00      	nop
 80095da:	e004      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095dc:	bf00      	nop
 80095de:	e002      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095e0:	bf00      	nop
 80095e2:	e000      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d109      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80095ec:	4b2d      	ldr	r3, [pc, #180]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095f8:	492a      	ldr	r1, [pc, #168]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	650b      	str	r3, [r1, #80]	; 0x50
 80095fe:	e001      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d04d      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800961a:	d02e      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800961c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009620:	d828      	bhi.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009626:	d02a      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800962c:	d822      	bhi.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800962e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009632:	d026      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009634:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009638:	d81c      	bhi.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800963a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800963e:	d010      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009644:	d816      	bhi.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d01d      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800964a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800964e:	d111      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3304      	adds	r3, #4
 8009654:	2101      	movs	r1, #1
 8009656:	4618      	mov	r0, r3
 8009658:	f000 ff84 	bl	800a564 <RCCEx_PLL2_Config>
 800965c:	4603      	mov	r3, r0
 800965e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009660:	e012      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	3324      	adds	r3, #36	; 0x24
 8009666:	2101      	movs	r1, #1
 8009668:	4618      	mov	r0, r3
 800966a:	f001 f82d 	bl	800a6c8 <RCCEx_PLL3_Config>
 800966e:	4603      	mov	r3, r0
 8009670:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009672:	e009      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	75fb      	strb	r3, [r7, #23]
      break;
 8009678:	e006      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800967a:	bf00      	nop
 800967c:	e004      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800967e:	bf00      	nop
 8009680:	e002      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009682:	bf00      	nop
 8009684:	e000      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009688:	7dfb      	ldrb	r3, [r7, #23]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10c      	bne.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800968e:	4b05      	ldr	r3, [pc, #20]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009692:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800969c:	4901      	ldr	r1, [pc, #4]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	658b      	str	r3, [r1, #88]	; 0x58
 80096a2:	e003      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x550>
 80096a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
 80096aa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d02f      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096c0:	d00e      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80096c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096c6:	d814      	bhi.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d015      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80096cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096d0:	d10f      	bne.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d2:	4baf      	ldr	r3, [pc, #700]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d6:	4aae      	ldr	r2, [pc, #696]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80096de:	e00c      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3304      	adds	r3, #4
 80096e4:	2101      	movs	r1, #1
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 ff3c 	bl	800a564 <RCCEx_PLL2_Config>
 80096ec:	4603      	mov	r3, r0
 80096ee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80096f0:	e003      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	75fb      	strb	r3, [r7, #23]
      break;
 80096f6:	e000      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80096f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d109      	bne.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009700:	4ba3      	ldr	r3, [pc, #652]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009704:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800970c:	49a0      	ldr	r1, [pc, #640]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800970e:	4313      	orrs	r3, r2
 8009710:	650b      	str	r3, [r1, #80]	; 0x50
 8009712:	e001      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009714:	7dfb      	ldrb	r3, [r7, #23]
 8009716:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d032      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009728:	2b03      	cmp	r3, #3
 800972a:	d81b      	bhi.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800972c:	a201      	add	r2, pc, #4	; (adr r2, 8009734 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800972e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009732:	bf00      	nop
 8009734:	0800976b 	.word	0x0800976b
 8009738:	08009745 	.word	0x08009745
 800973c:	08009753 	.word	0x08009753
 8009740:	0800976b 	.word	0x0800976b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009744:	4b92      	ldr	r3, [pc, #584]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	4a91      	ldr	r2, [pc, #580]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800974a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800974e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009750:	e00c      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	3304      	adds	r3, #4
 8009756:	2102      	movs	r1, #2
 8009758:	4618      	mov	r0, r3
 800975a:	f000 ff03 	bl	800a564 <RCCEx_PLL2_Config>
 800975e:	4603      	mov	r3, r0
 8009760:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009762:	e003      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	75fb      	strb	r3, [r7, #23]
      break;
 8009768:	e000      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800976a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d109      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009772:	4b87      	ldr	r3, [pc, #540]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009776:	f023 0203 	bic.w	r2, r3, #3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800977e:	4984      	ldr	r1, [pc, #528]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009780:	4313      	orrs	r3, r2
 8009782:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009784:	e001      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009786:	7dfb      	ldrb	r3, [r7, #23]
 8009788:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 8086 	beq.w	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009798:	4b7e      	ldr	r3, [pc, #504]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a7d      	ldr	r2, [pc, #500]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800979e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097a4:	f7fd fc08 	bl	8006fb8 <HAL_GetTick>
 80097a8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097aa:	e009      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097ac:	f7fd fc04 	bl	8006fb8 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	2b64      	cmp	r3, #100	; 0x64
 80097b8:	d902      	bls.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	75fb      	strb	r3, [r7, #23]
        break;
 80097be:	e005      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097c0:	4b74      	ldr	r3, [pc, #464]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0ef      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d166      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80097d2:	4b6f      	ldr	r3, [pc, #444]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097dc:	4053      	eors	r3, r2
 80097de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d013      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097e6:	4b6a      	ldr	r3, [pc, #424]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097f0:	4b67      	ldr	r3, [pc, #412]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f4:	4a66      	ldr	r2, [pc, #408]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097fa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097fc:	4b64      	ldr	r3, [pc, #400]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009800:	4a63      	ldr	r2, [pc, #396]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009806:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009808:	4a61      	ldr	r2, [pc, #388]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009818:	d115      	bne.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800981a:	f7fd fbcd 	bl	8006fb8 <HAL_GetTick>
 800981e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009820:	e00b      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009822:	f7fd fbc9 	bl	8006fb8 <HAL_GetTick>
 8009826:	4602      	mov	r2, r0
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009830:	4293      	cmp	r3, r2
 8009832:	d902      	bls.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009834:	2303      	movs	r3, #3
 8009836:	75fb      	strb	r3, [r7, #23]
            break;
 8009838:	e005      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800983a:	4b55      	ldr	r3, [pc, #340]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800983c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983e:	f003 0302 	and.w	r3, r3, #2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0ed      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d126      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800985a:	d10d      	bne.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800985c:	4b4c      	ldr	r3, [pc, #304]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800986a:	0919      	lsrs	r1, r3, #4
 800986c:	4b4a      	ldr	r3, [pc, #296]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800986e:	400b      	ands	r3, r1
 8009870:	4947      	ldr	r1, [pc, #284]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009872:	4313      	orrs	r3, r2
 8009874:	610b      	str	r3, [r1, #16]
 8009876:	e005      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009878:	4b45      	ldr	r3, [pc, #276]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	4a44      	ldr	r2, [pc, #272]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800987e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009882:	6113      	str	r3, [r2, #16]
 8009884:	4b42      	ldr	r3, [pc, #264]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800988e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009892:	493f      	ldr	r1, [pc, #252]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009894:	4313      	orrs	r3, r2
 8009896:	670b      	str	r3, [r1, #112]	; 0x70
 8009898:	e004      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	75bb      	strb	r3, [r7, #22]
 800989e:	e001      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 8085 	beq.w	80099bc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098b6:	2b28      	cmp	r3, #40	; 0x28
 80098b8:	d866      	bhi.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80098ba:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	0800999d 	.word	0x0800999d
 80098c4:	08009989 	.word	0x08009989
 80098c8:	08009989 	.word	0x08009989
 80098cc:	08009989 	.word	0x08009989
 80098d0:	08009989 	.word	0x08009989
 80098d4:	08009989 	.word	0x08009989
 80098d8:	08009989 	.word	0x08009989
 80098dc:	08009989 	.word	0x08009989
 80098e0:	08009965 	.word	0x08009965
 80098e4:	08009989 	.word	0x08009989
 80098e8:	08009989 	.word	0x08009989
 80098ec:	08009989 	.word	0x08009989
 80098f0:	08009989 	.word	0x08009989
 80098f4:	08009989 	.word	0x08009989
 80098f8:	08009989 	.word	0x08009989
 80098fc:	08009989 	.word	0x08009989
 8009900:	08009977 	.word	0x08009977
 8009904:	08009989 	.word	0x08009989
 8009908:	08009989 	.word	0x08009989
 800990c:	08009989 	.word	0x08009989
 8009910:	08009989 	.word	0x08009989
 8009914:	08009989 	.word	0x08009989
 8009918:	08009989 	.word	0x08009989
 800991c:	08009989 	.word	0x08009989
 8009920:	0800999d 	.word	0x0800999d
 8009924:	08009989 	.word	0x08009989
 8009928:	08009989 	.word	0x08009989
 800992c:	08009989 	.word	0x08009989
 8009930:	08009989 	.word	0x08009989
 8009934:	08009989 	.word	0x08009989
 8009938:	08009989 	.word	0x08009989
 800993c:	08009989 	.word	0x08009989
 8009940:	0800999d 	.word	0x0800999d
 8009944:	08009989 	.word	0x08009989
 8009948:	08009989 	.word	0x08009989
 800994c:	08009989 	.word	0x08009989
 8009950:	08009989 	.word	0x08009989
 8009954:	08009989 	.word	0x08009989
 8009958:	08009989 	.word	0x08009989
 800995c:	08009989 	.word	0x08009989
 8009960:	0800999d 	.word	0x0800999d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3304      	adds	r3, #4
 8009968:	2101      	movs	r1, #1
 800996a:	4618      	mov	r0, r3
 800996c:	f000 fdfa 	bl	800a564 <RCCEx_PLL2_Config>
 8009970:	4603      	mov	r3, r0
 8009972:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009974:	e013      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	3324      	adds	r3, #36	; 0x24
 800997a:	2101      	movs	r1, #1
 800997c:	4618      	mov	r0, r3
 800997e:	f000 fea3 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009982:	4603      	mov	r3, r0
 8009984:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009986:	e00a      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	75fb      	strb	r3, [r7, #23]
      break;
 800998c:	e007      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800998e:	bf00      	nop
 8009990:	58024400 	.word	0x58024400
 8009994:	58024800 	.word	0x58024800
 8009998:	00ffffcf 	.word	0x00ffffcf
      break;
 800999c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d109      	bne.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80099a4:	4b96      	ldr	r3, [pc, #600]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80099a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099b0:	4993      	ldr	r1, [pc, #588]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	654b      	str	r3, [r1, #84]	; 0x54
 80099b6:	e001      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
 80099ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d038      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099cc:	2b05      	cmp	r3, #5
 80099ce:	d821      	bhi.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80099d0:	a201      	add	r2, pc, #4	; (adr r2, 80099d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	08009a1b 	.word	0x08009a1b
 80099dc:	080099f1 	.word	0x080099f1
 80099e0:	08009a03 	.word	0x08009a03
 80099e4:	08009a1b 	.word	0x08009a1b
 80099e8:	08009a1b 	.word	0x08009a1b
 80099ec:	08009a1b 	.word	0x08009a1b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3304      	adds	r3, #4
 80099f4:	2101      	movs	r1, #1
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fdb4 	bl	800a564 <RCCEx_PLL2_Config>
 80099fc:	4603      	mov	r3, r0
 80099fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a00:	e00c      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	3324      	adds	r3, #36	; 0x24
 8009a06:	2101      	movs	r1, #1
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fe5d 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a12:	e003      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	75fb      	strb	r3, [r7, #23]
      break;
 8009a18:	e000      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009a1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d109      	bne.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a22:	4b77      	ldr	r3, [pc, #476]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a26:	f023 0207 	bic.w	r2, r3, #7
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a2e:	4974      	ldr	r1, [pc, #464]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	654b      	str	r3, [r1, #84]	; 0x54
 8009a34:	e001      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a36:	7dfb      	ldrb	r3, [r7, #23]
 8009a38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 0304 	and.w	r3, r3, #4
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d03a      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a4c:	2b05      	cmp	r3, #5
 8009a4e:	d821      	bhi.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009a50:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009a9b 	.word	0x08009a9b
 8009a5c:	08009a71 	.word	0x08009a71
 8009a60:	08009a83 	.word	0x08009a83
 8009a64:	08009a9b 	.word	0x08009a9b
 8009a68:	08009a9b 	.word	0x08009a9b
 8009a6c:	08009a9b 	.word	0x08009a9b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3304      	adds	r3, #4
 8009a74:	2101      	movs	r1, #1
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fd74 	bl	800a564 <RCCEx_PLL2_Config>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009a80:	e00c      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	3324      	adds	r3, #36	; 0x24
 8009a86:	2101      	movs	r1, #1
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fe1d 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009a92:	e003      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	75fb      	strb	r3, [r7, #23]
      break;
 8009a98:	e000      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10a      	bne.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009aa2:	4b57      	ldr	r3, [pc, #348]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa6:	f023 0207 	bic.w	r2, r3, #7
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ab0:	4953      	ldr	r1, [pc, #332]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	658b      	str	r3, [r1, #88]	; 0x58
 8009ab6:	e001      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ab8:	7dfb      	ldrb	r3, [r7, #23]
 8009aba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0320 	and.w	r3, r3, #32
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d04b      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ad2:	d02e      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ad8:	d828      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ade:	d02a      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae4:	d822      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ae6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009aea:	d026      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009aec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009af0:	d81c      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009af6:	d010      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009afc:	d816      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d01d      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b06:	d111      	bne.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fd28 	bl	800a564 <RCCEx_PLL2_Config>
 8009b14:	4603      	mov	r3, r0
 8009b16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b18:	e012      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3324      	adds	r3, #36	; 0x24
 8009b1e:	2102      	movs	r1, #2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 fdd1 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009b26:	4603      	mov	r3, r0
 8009b28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b2a:	e009      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b30:	e006      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b32:	bf00      	nop
 8009b34:	e004      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b36:	bf00      	nop
 8009b38:	e002      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b3a:	bf00      	nop
 8009b3c:	e000      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b46:	4b2e      	ldr	r3, [pc, #184]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b54:	492a      	ldr	r1, [pc, #168]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	654b      	str	r3, [r1, #84]	; 0x54
 8009b5a:	e001      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d04d      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b76:	d02e      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009b78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b7c:	d828      	bhi.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b82:	d02a      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b88:	d822      	bhi.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b8e:	d026      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009b90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b94:	d81c      	bhi.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b9a:	d010      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ba0:	d816      	bhi.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d01d      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009baa:	d111      	bne.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3304      	adds	r3, #4
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 fcd6 	bl	800a564 <RCCEx_PLL2_Config>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009bbc:	e012      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3324      	adds	r3, #36	; 0x24
 8009bc2:	2102      	movs	r1, #2
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 fd7f 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009bce:	e009      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8009bd4:	e006      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009bd6:	bf00      	nop
 8009bd8:	e004      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009bda:	bf00      	nop
 8009bdc:	e002      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009bde:	bf00      	nop
 8009be0:	e000      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10c      	bne.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009bea:	4b05      	ldr	r3, [pc, #20]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009bf8:	4901      	ldr	r1, [pc, #4]	; (8009c00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	658b      	str	r3, [r1, #88]	; 0x58
 8009bfe:	e003      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009c00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
 8009c06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d04b      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c1a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c1e:	d02e      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009c20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c24:	d828      	bhi.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c2a:	d02a      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c30:	d822      	bhi.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c32:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c36:	d026      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009c38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c3c:	d81c      	bhi.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c42:	d010      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c48:	d816      	bhi.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d01d      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c52:	d111      	bne.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3304      	adds	r3, #4
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f000 fc82 	bl	800a564 <RCCEx_PLL2_Config>
 8009c60:	4603      	mov	r3, r0
 8009c62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009c64:	e012      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3324      	adds	r3, #36	; 0x24
 8009c6a:	2102      	movs	r1, #2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 fd2b 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009c72:	4603      	mov	r3, r0
 8009c74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009c76:	e009      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c7c:	e006      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c7e:	bf00      	nop
 8009c80:	e004      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c82:	bf00      	nop
 8009c84:	e002      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c86:	bf00      	nop
 8009c88:	e000      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c92:	4b9d      	ldr	r3, [pc, #628]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ca0:	4999      	ldr	r1, [pc, #612]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	658b      	str	r3, [r1, #88]	; 0x58
 8009ca6:	e001      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d01a      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc2:	d10a      	bne.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3324      	adds	r3, #36	; 0x24
 8009cc8:	2102      	movs	r1, #2
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 fcfc 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009cda:	4b8b      	ldr	r3, [pc, #556]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ce8:	4987      	ldr	r1, [pc, #540]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0310 	and.w	r3, r3, #16
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d01a      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d04:	d10a      	bne.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	3324      	adds	r3, #36	; 0x24
 8009d0a:	2102      	movs	r1, #2
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 fcdb 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d1c:	4b7a      	ldr	r3, [pc, #488]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d2a:	4977      	ldr	r1, [pc, #476]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d034      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d46:	d01d      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d4c:	d817      	bhi.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d56:	d009      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009d58:	e011      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	2100      	movs	r1, #0
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fbff 	bl	800a564 <RCCEx_PLL2_Config>
 8009d66:	4603      	mov	r3, r0
 8009d68:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009d6a:	e00c      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3324      	adds	r3, #36	; 0x24
 8009d70:	2102      	movs	r1, #2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 fca8 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009d7c:	e003      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	75fb      	strb	r3, [r7, #23]
      break;
 8009d82:	e000      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d8c:	4b5e      	ldr	r3, [pc, #376]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d9a:	495b      	ldr	r1, [pc, #364]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	658b      	str	r3, [r1, #88]	; 0x58
 8009da0:	e001      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
 8009da4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d033      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009db8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009dbc:	d01c      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009dbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009dc2:	d816      	bhi.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dc8:	d003      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dce:	d007      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009dd0:	e00f      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd2:	4b4d      	ldr	r3, [pc, #308]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd6:	4a4c      	ldr	r2, [pc, #304]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009dde:	e00c      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3324      	adds	r3, #36	; 0x24
 8009de4:	2101      	movs	r1, #1
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 fc6e 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009dec:	4603      	mov	r3, r0
 8009dee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009df0:	e003      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	75fb      	strb	r3, [r7, #23]
      break;
 8009df6:	e000      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10a      	bne.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e00:	4b41      	ldr	r3, [pc, #260]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e0e:	493e      	ldr	r1, [pc, #248]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	654b      	str	r3, [r1, #84]	; 0x54
 8009e14:	e001      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d029      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e32:	d007      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009e34:	e00f      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e36:	4b34      	ldr	r3, [pc, #208]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	4a33      	ldr	r2, [pc, #204]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e42:	e00b      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3304      	adds	r3, #4
 8009e48:	2102      	movs	r1, #2
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 fb8a 	bl	800a564 <RCCEx_PLL2_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e54:	e002      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	75fb      	strb	r3, [r7, #23]
      break;
 8009e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d109      	bne.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e62:	4b29      	ldr	r3, [pc, #164]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e6e:	4926      	ldr	r1, [pc, #152]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e70:	4313      	orrs	r3, r2
 8009e72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e74:	e001      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00a      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	3324      	adds	r3, #36	; 0x24
 8009e8a:	2102      	movs	r1, #2
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 fc1b 	bl	800a6c8 <RCCEx_PLL3_Config>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d033      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009eb0:	d017      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009eb6:	d811      	bhi.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ebc:	d013      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ec2:	d80b      	bhi.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d010      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ecc:	d106      	bne.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ece:	4b0e      	ldr	r3, [pc, #56]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed2:	4a0d      	ldr	r2, [pc, #52]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009eda:	e007      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee0:	e004      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009ee2:	bf00      	nop
 8009ee4:	e002      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009ee6:	bf00      	nop
 8009ee8:	e000      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10c      	bne.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ef2:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009efe:	4902      	ldr	r1, [pc, #8]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009f00:	4313      	orrs	r3, r2
 8009f02:	654b      	str	r3, [r1, #84]	; 0x54
 8009f04:	e004      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009f06:	bf00      	nop
 8009f08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
 8009f0e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d008      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f1c:	4b31      	ldr	r3, [pc, #196]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f28:	492e      	ldr	r1, [pc, #184]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d009      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f3a:	4b2a      	ldr	r3, [pc, #168]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f48:	4926      	ldr	r1, [pc, #152]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d008      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f5a:	4b22      	ldr	r3, [pc, #136]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f66:	491f      	ldr	r1, [pc, #124]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00d      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f78:	4b1a      	ldr	r3, [pc, #104]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	4a19      	ldr	r2, [pc, #100]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f82:	6113      	str	r3, [r2, #16]
 8009f84:	4b17      	ldr	r3, [pc, #92]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f86:	691a      	ldr	r2, [r3, #16]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009f8e:	4915      	ldr	r1, [pc, #84]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	da08      	bge.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009f9c:	4b11      	ldr	r3, [pc, #68]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa8:	490e      	ldr	r1, [pc, #56]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d009      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009fba:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fc8:	4906      	ldr	r1, [pc, #24]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009fce:	7dbb      	ldrb	r3, [r7, #22]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	e000      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	58024400 	.word	0x58024400

08009fe8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009fec:	f7ff f85a 	bl	80090a4 <HAL_RCC_GetHCLKFreq>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	4b06      	ldr	r3, [pc, #24]	; (800a00c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	091b      	lsrs	r3, r3, #4
 8009ff8:	f003 0307 	and.w	r3, r3, #7
 8009ffc:	4904      	ldr	r1, [pc, #16]	; (800a010 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009ffe:	5ccb      	ldrb	r3, [r1, r3]
 800a000:	f003 031f 	and.w	r3, r3, #31
 800a004:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a008:	4618      	mov	r0, r3
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	58024400 	.word	0x58024400
 800a010:	08012638 	.word	0x08012638

0800a014 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a014:	b480      	push	{r7}
 800a016:	b089      	sub	sp, #36	; 0x24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a01c:	4ba1      	ldr	r3, [pc, #644]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a020:	f003 0303 	and.w	r3, r3, #3
 800a024:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a026:	4b9f      	ldr	r3, [pc, #636]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02a:	0b1b      	lsrs	r3, r3, #12
 800a02c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a030:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a032:	4b9c      	ldr	r3, [pc, #624]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a036:	091b      	lsrs	r3, r3, #4
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a03e:	4b99      	ldr	r3, [pc, #612]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a042:	08db      	lsrs	r3, r3, #3
 800a044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	fb02 f303 	mul.w	r3, r2, r3
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a056:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 8111 	beq.w	800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	2b02      	cmp	r3, #2
 800a066:	f000 8083 	beq.w	800a170 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	f200 80a1 	bhi.w	800a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d056      	beq.n	800a12c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a07e:	e099      	b.n	800a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a080:	4b88      	ldr	r3, [pc, #544]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0320 	and.w	r3, r3, #32
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d02d      	beq.n	800a0e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a08c:	4b85      	ldr	r3, [pc, #532]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	08db      	lsrs	r3, r3, #3
 800a092:	f003 0303 	and.w	r3, r3, #3
 800a096:	4a84      	ldr	r2, [pc, #528]	; (800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a098:	fa22 f303 	lsr.w	r3, r2, r3
 800a09c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	ee07 3a90 	vmov	s15, r3
 800a0a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	ee07 3a90 	vmov	s15, r3
 800a0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b6:	4b7b      	ldr	r3, [pc, #492]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0be:	ee07 3a90 	vmov	s15, r3
 800a0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a0e6:	e087      	b.n	800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fa:	4b6a      	ldr	r3, [pc, #424]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a102:	ee07 3a90 	vmov	s15, r3
 800a106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a10e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a126:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a12a:	e065      	b.n	800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	ee07 3a90 	vmov	s15, r3
 800a132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a136:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a13e:	4b59      	ldr	r3, [pc, #356]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a152:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a16e:	e043      	b.n	800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a182:	4b48      	ldr	r3, [pc, #288]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a192:	ed97 6a03 	vldr	s12, [r7, #12]
 800a196:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1b2:	e021      	b.n	800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1c6:	4b37      	ldr	r3, [pc, #220]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1da:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a1f8:	4b2a      	ldr	r3, [pc, #168]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fc:	0a5b      	lsrs	r3, r3, #9
 800a1fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a202:	ee07 3a90 	vmov	s15, r3
 800a206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a20e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a212:	edd7 6a07 	vldr	s13, [r7, #28]
 800a216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a21a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a21e:	ee17 2a90 	vmov	r2, s15
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a226:	4b1f      	ldr	r3, [pc, #124]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22a:	0c1b      	lsrs	r3, r3, #16
 800a22c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a230:	ee07 3a90 	vmov	s15, r3
 800a234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a23c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a240:	edd7 6a07 	vldr	s13, [r7, #28]
 800a244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a24c:	ee17 2a90 	vmov	r2, s15
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a254:	4b13      	ldr	r3, [pc, #76]	; (800a2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a258:	0e1b      	lsrs	r3, r3, #24
 800a25a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a25e:	ee07 3a90 	vmov	s15, r3
 800a262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a26a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a26e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a27a:	ee17 2a90 	vmov	r2, s15
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a282:	e008      	b.n	800a296 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	609a      	str	r2, [r3, #8]
}
 800a296:	bf00      	nop
 800a298:	3724      	adds	r7, #36	; 0x24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	58024400 	.word	0x58024400
 800a2a8:	03d09000 	.word	0x03d09000
 800a2ac:	46000000 	.word	0x46000000
 800a2b0:	4c742400 	.word	0x4c742400
 800a2b4:	4a742400 	.word	0x4a742400
 800a2b8:	4bbebc20 	.word	0x4bbebc20

0800a2bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b089      	sub	sp, #36	; 0x24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2c4:	4ba1      	ldr	r3, [pc, #644]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c8:	f003 0303 	and.w	r3, r3, #3
 800a2cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a2ce:	4b9f      	ldr	r3, [pc, #636]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d2:	0d1b      	lsrs	r3, r3, #20
 800a2d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a2da:	4b9c      	ldr	r3, [pc, #624]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2de:	0a1b      	lsrs	r3, r3, #8
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a2e6:	4b99      	ldr	r3, [pc, #612]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ea:	08db      	lsrs	r3, r3, #3
 800a2ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	fb02 f303 	mul.w	r3, r2, r3
 800a2f6:	ee07 3a90 	vmov	s15, r3
 800a2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 8111 	beq.w	800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	f000 8083 	beq.w	800a418 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	2b02      	cmp	r3, #2
 800a316:	f200 80a1 	bhi.w	800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d056      	beq.n	800a3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a326:	e099      	b.n	800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a328:	4b88      	ldr	r3, [pc, #544]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0320 	and.w	r3, r3, #32
 800a330:	2b00      	cmp	r3, #0
 800a332:	d02d      	beq.n	800a390 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a334:	4b85      	ldr	r3, [pc, #532]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	08db      	lsrs	r3, r3, #3
 800a33a:	f003 0303 	and.w	r3, r3, #3
 800a33e:	4a84      	ldr	r2, [pc, #528]	; (800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a340:	fa22 f303 	lsr.w	r3, r2, r3
 800a344:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	ee07 3a90 	vmov	s15, r3
 800a34c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	ee07 3a90 	vmov	s15, r3
 800a356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a35e:	4b7b      	ldr	r3, [pc, #492]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a366:	ee07 3a90 	vmov	s15, r3
 800a36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a36e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a372:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a37e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a38a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a38e:	e087      	b.n	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	ee07 3a90 	vmov	s15, r3
 800a396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a39a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a558 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a39e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3a2:	4b6a      	ldr	r3, [pc, #424]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3aa:	ee07 3a90 	vmov	s15, r3
 800a3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3d2:	e065      	b.n	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	ee07 3a90 	vmov	s15, r3
 800a3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3e6:	4b59      	ldr	r3, [pc, #356]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ee:	ee07 3a90 	vmov	s15, r3
 800a3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a412:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a416:	e043      	b.n	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	ee07 3a90 	vmov	s15, r3
 800a41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a422:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a42a:	4b48      	ldr	r3, [pc, #288]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a432:	ee07 3a90 	vmov	s15, r3
 800a436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a43a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a43e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a44a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a45a:	e021      	b.n	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	ee07 3a90 	vmov	s15, r3
 800a462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a466:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a46a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a46e:	4b37      	ldr	r3, [pc, #220]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a47e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a482:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a554 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a48a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a48e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a49e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a4a0:	4b2a      	ldr	r3, [pc, #168]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a4:	0a5b      	lsrs	r3, r3, #9
 800a4a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4aa:	ee07 3a90 	vmov	s15, r3
 800a4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4c6:	ee17 2a90 	vmov	r2, s15
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a4ce:	4b1f      	ldr	r3, [pc, #124]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d2:	0c1b      	lsrs	r3, r3, #16
 800a4d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4d8:	ee07 3a90 	vmov	s15, r3
 800a4dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4f4:	ee17 2a90 	vmov	r2, s15
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a4fc:	4b13      	ldr	r3, [pc, #76]	; (800a54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a500:	0e1b      	lsrs	r3, r3, #24
 800a502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a506:	ee07 3a90 	vmov	s15, r3
 800a50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a512:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a516:	edd7 6a07 	vldr	s13, [r7, #28]
 800a51a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a51e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a522:	ee17 2a90 	vmov	r2, s15
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a52a:	e008      	b.n	800a53e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	609a      	str	r2, [r3, #8]
}
 800a53e:	bf00      	nop
 800a540:	3724      	adds	r7, #36	; 0x24
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	58024400 	.word	0x58024400
 800a550:	03d09000 	.word	0x03d09000
 800a554:	46000000 	.word	0x46000000
 800a558:	4c742400 	.word	0x4c742400
 800a55c:	4a742400 	.word	0x4a742400
 800a560:	4bbebc20 	.word	0x4bbebc20

0800a564 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a572:	4b53      	ldr	r3, [pc, #332]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a576:	f003 0303 	and.w	r3, r3, #3
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d101      	bne.n	800a582 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e099      	b.n	800a6b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a582:	4b4f      	ldr	r3, [pc, #316]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a4e      	ldr	r2, [pc, #312]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a588:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a58c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a58e:	f7fc fd13 	bl	8006fb8 <HAL_GetTick>
 800a592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a594:	e008      	b.n	800a5a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a596:	f7fc fd0f 	bl	8006fb8 <HAL_GetTick>
 800a59a:	4602      	mov	r2, r0
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d901      	bls.n	800a5a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e086      	b.n	800a6b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a5a8:	4b45      	ldr	r3, [pc, #276]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1f0      	bne.n	800a596 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a5b4:	4b42      	ldr	r3, [pc, #264]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	031b      	lsls	r3, r3, #12
 800a5c2:	493f      	ldr	r1, [pc, #252]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	628b      	str	r3, [r1, #40]	; 0x28
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	025b      	lsls	r3, r3, #9
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	431a      	orrs	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	041b      	lsls	r3, r3, #16
 800a5e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	061b      	lsls	r3, r3, #24
 800a5f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5f8:	4931      	ldr	r1, [pc, #196]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a5fe:	4b30      	ldr	r3, [pc, #192]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a602:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	492d      	ldr	r1, [pc, #180]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a610:	4b2b      	ldr	r3, [pc, #172]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	f023 0220 	bic.w	r2, r3, #32
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	4928      	ldr	r1, [pc, #160]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a61e:	4313      	orrs	r3, r2
 800a620:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a622:	4b27      	ldr	r3, [pc, #156]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	4a26      	ldr	r2, [pc, #152]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a628:	f023 0310 	bic.w	r3, r3, #16
 800a62c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a62e:	4b24      	ldr	r3, [pc, #144]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a632:	4b24      	ldr	r3, [pc, #144]	; (800a6c4 <RCCEx_PLL2_Config+0x160>)
 800a634:	4013      	ands	r3, r2
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	69d2      	ldr	r2, [r2, #28]
 800a63a:	00d2      	lsls	r2, r2, #3
 800a63c:	4920      	ldr	r1, [pc, #128]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a63e:	4313      	orrs	r3, r2
 800a640:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a642:	4b1f      	ldr	r3, [pc, #124]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a646:	4a1e      	ldr	r2, [pc, #120]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a648:	f043 0310 	orr.w	r3, r3, #16
 800a64c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d106      	bne.n	800a662 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a654:	4b1a      	ldr	r3, [pc, #104]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a658:	4a19      	ldr	r2, [pc, #100]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a65a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a65e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a660:	e00f      	b.n	800a682 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d106      	bne.n	800a676 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a668:	4b15      	ldr	r3, [pc, #84]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66c:	4a14      	ldr	r2, [pc, #80]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a66e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a672:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a674:	e005      	b.n	800a682 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a676:	4b12      	ldr	r3, [pc, #72]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67a:	4a11      	ldr	r2, [pc, #68]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a67c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a680:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a682:	4b0f      	ldr	r3, [pc, #60]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a0e      	ldr	r2, [pc, #56]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a68c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a68e:	f7fc fc93 	bl	8006fb8 <HAL_GetTick>
 800a692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a694:	e008      	b.n	800a6a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a696:	f7fc fc8f 	bl	8006fb8 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d901      	bls.n	800a6a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e006      	b.n	800a6b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6a8:	4b05      	ldr	r3, [pc, #20]	; (800a6c0 <RCCEx_PLL2_Config+0x15c>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d0f0      	beq.n	800a696 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	58024400 	.word	0x58024400
 800a6c4:	ffff0007 	.word	0xffff0007

0800a6c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6d6:	4b53      	ldr	r3, [pc, #332]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6da:	f003 0303 	and.w	r3, r3, #3
 800a6de:	2b03      	cmp	r3, #3
 800a6e0:	d101      	bne.n	800a6e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e099      	b.n	800a81a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a6e6:	4b4f      	ldr	r3, [pc, #316]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a4e      	ldr	r2, [pc, #312]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a6ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6f2:	f7fc fc61 	bl	8006fb8 <HAL_GetTick>
 800a6f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6f8:	e008      	b.n	800a70c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a6fa:	f7fc fc5d 	bl	8006fb8 <HAL_GetTick>
 800a6fe:	4602      	mov	r2, r0
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	2b02      	cmp	r3, #2
 800a706:	d901      	bls.n	800a70c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	e086      	b.n	800a81a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a70c:	4b45      	ldr	r3, [pc, #276]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1f0      	bne.n	800a6fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a718:	4b42      	ldr	r3, [pc, #264]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	051b      	lsls	r3, r3, #20
 800a726:	493f      	ldr	r1, [pc, #252]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	628b      	str	r3, [r1, #40]	; 0x28
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	3b01      	subs	r3, #1
 800a732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	025b      	lsls	r3, r3, #9
 800a73e:	b29b      	uxth	r3, r3
 800a740:	431a      	orrs	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	3b01      	subs	r3, #1
 800a748:	041b      	lsls	r3, r3, #16
 800a74a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a74e:	431a      	orrs	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	3b01      	subs	r3, #1
 800a756:	061b      	lsls	r3, r3, #24
 800a758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a75c:	4931      	ldr	r1, [pc, #196]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a762:	4b30      	ldr	r3, [pc, #192]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a766:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	492d      	ldr	r1, [pc, #180]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a770:	4313      	orrs	r3, r2
 800a772:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a774:	4b2b      	ldr	r3, [pc, #172]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a778:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	4928      	ldr	r1, [pc, #160]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a782:	4313      	orrs	r3, r2
 800a784:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a786:	4b27      	ldr	r3, [pc, #156]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78a:	4a26      	ldr	r2, [pc, #152]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a78c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a792:	4b24      	ldr	r3, [pc, #144]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a796:	4b24      	ldr	r3, [pc, #144]	; (800a828 <RCCEx_PLL3_Config+0x160>)
 800a798:	4013      	ands	r3, r2
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	69d2      	ldr	r2, [r2, #28]
 800a79e:	00d2      	lsls	r2, r2, #3
 800a7a0:	4920      	ldr	r1, [pc, #128]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a7a6:	4b1f      	ldr	r3, [pc, #124]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	4a1e      	ldr	r2, [pc, #120]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a7ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d106      	bne.n	800a7c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a7b8:	4b1a      	ldr	r3, [pc, #104]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	4a19      	ldr	r2, [pc, #100]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a7be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a7c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7c4:	e00f      	b.n	800a7e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d106      	bne.n	800a7da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a7cc:	4b15      	ldr	r3, [pc, #84]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d0:	4a14      	ldr	r2, [pc, #80]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a7d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7d8:	e005      	b.n	800a7e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a7da:	4b12      	ldr	r3, [pc, #72]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7de:	4a11      	ldr	r2, [pc, #68]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a7e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a7e6:	4b0f      	ldr	r3, [pc, #60]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a0e      	ldr	r2, [pc, #56]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a7ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7f2:	f7fc fbe1 	bl	8006fb8 <HAL_GetTick>
 800a7f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7f8:	e008      	b.n	800a80c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a7fa:	f7fc fbdd 	bl	8006fb8 <HAL_GetTick>
 800a7fe:	4602      	mov	r2, r0
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	2b02      	cmp	r3, #2
 800a806:	d901      	bls.n	800a80c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a808:	2303      	movs	r3, #3
 800a80a:	e006      	b.n	800a81a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a80c:	4b05      	ldr	r3, [pc, #20]	; (800a824 <RCCEx_PLL3_Config+0x15c>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d0f0      	beq.n	800a7fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a818:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	58024400 	.word	0x58024400
 800a828:	ffff0007 	.word	0xffff0007

0800a82c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e049      	b.n	800a8d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d106      	bne.n	800a858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7fa f82a 	bl	80048ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2202      	movs	r2, #2
 800a85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3304      	adds	r3, #4
 800a868:	4619      	mov	r1, r3
 800a86a:	4610      	mov	r0, r2
 800a86c:	f001 f9d0 	bl	800bc10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d001      	beq.n	800a8f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e04c      	b.n	800a98e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a26      	ldr	r2, [pc, #152]	; (800a99c <HAL_TIM_Base_Start+0xc0>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d022      	beq.n	800a94c <HAL_TIM_Base_Start+0x70>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a90e:	d01d      	beq.n	800a94c <HAL_TIM_Base_Start+0x70>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a22      	ldr	r2, [pc, #136]	; (800a9a0 <HAL_TIM_Base_Start+0xc4>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d018      	beq.n	800a94c <HAL_TIM_Base_Start+0x70>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a21      	ldr	r2, [pc, #132]	; (800a9a4 <HAL_TIM_Base_Start+0xc8>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d013      	beq.n	800a94c <HAL_TIM_Base_Start+0x70>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a1f      	ldr	r2, [pc, #124]	; (800a9a8 <HAL_TIM_Base_Start+0xcc>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d00e      	beq.n	800a94c <HAL_TIM_Base_Start+0x70>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a1e      	ldr	r2, [pc, #120]	; (800a9ac <HAL_TIM_Base_Start+0xd0>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d009      	beq.n	800a94c <HAL_TIM_Base_Start+0x70>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a1c      	ldr	r2, [pc, #112]	; (800a9b0 <HAL_TIM_Base_Start+0xd4>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d004      	beq.n	800a94c <HAL_TIM_Base_Start+0x70>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a1b      	ldr	r2, [pc, #108]	; (800a9b4 <HAL_TIM_Base_Start+0xd8>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d115      	bne.n	800a978 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689a      	ldr	r2, [r3, #8]
 800a952:	4b19      	ldr	r3, [pc, #100]	; (800a9b8 <HAL_TIM_Base_Start+0xdc>)
 800a954:	4013      	ands	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2b06      	cmp	r3, #6
 800a95c:	d015      	beq.n	800a98a <HAL_TIM_Base_Start+0xae>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a964:	d011      	beq.n	800a98a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f042 0201 	orr.w	r2, r2, #1
 800a974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a976:	e008      	b.n	800a98a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f042 0201 	orr.w	r2, r2, #1
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	e000      	b.n	800a98c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a98a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	40010000 	.word	0x40010000
 800a9a0:	40000400 	.word	0x40000400
 800a9a4:	40000800 	.word	0x40000800
 800a9a8:	40000c00 	.word	0x40000c00
 800a9ac:	40010400 	.word	0x40010400
 800a9b0:	40001800 	.word	0x40001800
 800a9b4:	40014000 	.word	0x40014000
 800a9b8:	00010007 	.word	0x00010007

0800a9bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6a1a      	ldr	r2, [r3, #32]
 800a9ca:	f241 1311 	movw	r3, #4369	; 0x1111
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10f      	bne.n	800a9f4 <HAL_TIM_Base_Stop+0x38>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6a1a      	ldr	r2, [r3, #32]
 800a9da:	f240 4344 	movw	r3, #1092	; 0x444
 800a9de:	4013      	ands	r3, r2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d107      	bne.n	800a9f4 <HAL_TIM_Base_Stop+0x38>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f022 0201 	bic.w	r2, r2, #1
 800a9f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
	...

0800aa0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d001      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	e054      	b.n	800aace <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2202      	movs	r2, #2
 800aa28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68da      	ldr	r2, [r3, #12]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f042 0201 	orr.w	r2, r2, #1
 800aa3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a26      	ldr	r2, [pc, #152]	; (800aadc <HAL_TIM_Base_Start_IT+0xd0>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d022      	beq.n	800aa8c <HAL_TIM_Base_Start_IT+0x80>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa4e:	d01d      	beq.n	800aa8c <HAL_TIM_Base_Start_IT+0x80>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a22      	ldr	r2, [pc, #136]	; (800aae0 <HAL_TIM_Base_Start_IT+0xd4>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d018      	beq.n	800aa8c <HAL_TIM_Base_Start_IT+0x80>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a21      	ldr	r2, [pc, #132]	; (800aae4 <HAL_TIM_Base_Start_IT+0xd8>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d013      	beq.n	800aa8c <HAL_TIM_Base_Start_IT+0x80>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a1f      	ldr	r2, [pc, #124]	; (800aae8 <HAL_TIM_Base_Start_IT+0xdc>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d00e      	beq.n	800aa8c <HAL_TIM_Base_Start_IT+0x80>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a1e      	ldr	r2, [pc, #120]	; (800aaec <HAL_TIM_Base_Start_IT+0xe0>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d009      	beq.n	800aa8c <HAL_TIM_Base_Start_IT+0x80>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a1c      	ldr	r2, [pc, #112]	; (800aaf0 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d004      	beq.n	800aa8c <HAL_TIM_Base_Start_IT+0x80>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a1b      	ldr	r2, [pc, #108]	; (800aaf4 <HAL_TIM_Base_Start_IT+0xe8>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d115      	bne.n	800aab8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	689a      	ldr	r2, [r3, #8]
 800aa92:	4b19      	ldr	r3, [pc, #100]	; (800aaf8 <HAL_TIM_Base_Start_IT+0xec>)
 800aa94:	4013      	ands	r3, r2
 800aa96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b06      	cmp	r3, #6
 800aa9c:	d015      	beq.n	800aaca <HAL_TIM_Base_Start_IT+0xbe>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaa4:	d011      	beq.n	800aaca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f042 0201 	orr.w	r2, r2, #1
 800aab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aab6:	e008      	b.n	800aaca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f042 0201 	orr.w	r2, r2, #1
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	e000      	b.n	800aacc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	40010000 	.word	0x40010000
 800aae0:	40000400 	.word	0x40000400
 800aae4:	40000800 	.word	0x40000800
 800aae8:	40000c00 	.word	0x40000c00
 800aaec:	40010400 	.word	0x40010400
 800aaf0:	40001800 	.word	0x40001800
 800aaf4:	40014000 	.word	0x40014000
 800aaf8:	00010007 	.word	0x00010007

0800aafc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f022 0201 	bic.w	r2, r2, #1
 800ab12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	6a1a      	ldr	r2, [r3, #32]
 800ab1a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab1e:	4013      	ands	r3, r2
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10f      	bne.n	800ab44 <HAL_TIM_Base_Stop_IT+0x48>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6a1a      	ldr	r2, [r3, #32]
 800ab2a:	f240 4344 	movw	r3, #1092	; 0x444
 800ab2e:	4013      	ands	r3, r2
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d107      	bne.n	800ab44 <HAL_TIM_Base_Stop_IT+0x48>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f022 0201 	bic.w	r2, r2, #1
 800ab42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e049      	b.n	800ac00 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d106      	bne.n	800ab86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f841 	bl	800ac08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2202      	movs	r2, #2
 800ab8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	3304      	adds	r3, #4
 800ab96:	4619      	mov	r1, r3
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f001 f839 	bl	800bc10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2201      	movs	r2, #1
 800abe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2201      	movs	r2, #1
 800abea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d109      	bne.n	800ac40 <HAL_TIM_PWM_Start+0x24>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	bf14      	ite	ne
 800ac38:	2301      	movne	r3, #1
 800ac3a:	2300      	moveq	r3, #0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	e03c      	b.n	800acba <HAL_TIM_PWM_Start+0x9e>
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	d109      	bne.n	800ac5a <HAL_TIM_PWM_Start+0x3e>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	bf14      	ite	ne
 800ac52:	2301      	movne	r3, #1
 800ac54:	2300      	moveq	r3, #0
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	e02f      	b.n	800acba <HAL_TIM_PWM_Start+0x9e>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	d109      	bne.n	800ac74 <HAL_TIM_PWM_Start+0x58>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	bf14      	ite	ne
 800ac6c:	2301      	movne	r3, #1
 800ac6e:	2300      	moveq	r3, #0
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	e022      	b.n	800acba <HAL_TIM_PWM_Start+0x9e>
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b0c      	cmp	r3, #12
 800ac78:	d109      	bne.n	800ac8e <HAL_TIM_PWM_Start+0x72>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	bf14      	ite	ne
 800ac86:	2301      	movne	r3, #1
 800ac88:	2300      	moveq	r3, #0
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	e015      	b.n	800acba <HAL_TIM_PWM_Start+0x9e>
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	2b10      	cmp	r3, #16
 800ac92:	d109      	bne.n	800aca8 <HAL_TIM_PWM_Start+0x8c>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	bf14      	ite	ne
 800aca0:	2301      	movne	r3, #1
 800aca2:	2300      	moveq	r3, #0
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	e008      	b.n	800acba <HAL_TIM_PWM_Start+0x9e>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	bf14      	ite	ne
 800acb4:	2301      	movne	r3, #1
 800acb6:	2300      	moveq	r3, #0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	e0a1      	b.n	800ae06 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d104      	bne.n	800acd2 <HAL_TIM_PWM_Start+0xb6>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2202      	movs	r2, #2
 800accc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acd0:	e023      	b.n	800ad1a <HAL_TIM_PWM_Start+0xfe>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	d104      	bne.n	800ace2 <HAL_TIM_PWM_Start+0xc6>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2202      	movs	r2, #2
 800acdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ace0:	e01b      	b.n	800ad1a <HAL_TIM_PWM_Start+0xfe>
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b08      	cmp	r3, #8
 800ace6:	d104      	bne.n	800acf2 <HAL_TIM_PWM_Start+0xd6>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2202      	movs	r2, #2
 800acec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acf0:	e013      	b.n	800ad1a <HAL_TIM_PWM_Start+0xfe>
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b0c      	cmp	r3, #12
 800acf6:	d104      	bne.n	800ad02 <HAL_TIM_PWM_Start+0xe6>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2202      	movs	r2, #2
 800acfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad00:	e00b      	b.n	800ad1a <HAL_TIM_PWM_Start+0xfe>
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	2b10      	cmp	r3, #16
 800ad06:	d104      	bne.n	800ad12 <HAL_TIM_PWM_Start+0xf6>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad10:	e003      	b.n	800ad1a <HAL_TIM_PWM_Start+0xfe>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2202      	movs	r2, #2
 800ad16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f001 fcac 	bl	800c680 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a38      	ldr	r2, [pc, #224]	; (800ae10 <HAL_TIM_PWM_Start+0x1f4>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d013      	beq.n	800ad5a <HAL_TIM_PWM_Start+0x13e>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a37      	ldr	r2, [pc, #220]	; (800ae14 <HAL_TIM_PWM_Start+0x1f8>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d00e      	beq.n	800ad5a <HAL_TIM_PWM_Start+0x13e>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a35      	ldr	r2, [pc, #212]	; (800ae18 <HAL_TIM_PWM_Start+0x1fc>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d009      	beq.n	800ad5a <HAL_TIM_PWM_Start+0x13e>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a34      	ldr	r2, [pc, #208]	; (800ae1c <HAL_TIM_PWM_Start+0x200>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d004      	beq.n	800ad5a <HAL_TIM_PWM_Start+0x13e>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a32      	ldr	r2, [pc, #200]	; (800ae20 <HAL_TIM_PWM_Start+0x204>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d101      	bne.n	800ad5e <HAL_TIM_PWM_Start+0x142>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e000      	b.n	800ad60 <HAL_TIM_PWM_Start+0x144>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d007      	beq.n	800ad74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a25      	ldr	r2, [pc, #148]	; (800ae10 <HAL_TIM_PWM_Start+0x1f4>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d022      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1a8>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad86:	d01d      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1a8>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a25      	ldr	r2, [pc, #148]	; (800ae24 <HAL_TIM_PWM_Start+0x208>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d018      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1a8>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a24      	ldr	r2, [pc, #144]	; (800ae28 <HAL_TIM_PWM_Start+0x20c>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d013      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1a8>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a22      	ldr	r2, [pc, #136]	; (800ae2c <HAL_TIM_PWM_Start+0x210>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d00e      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1a8>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a1a      	ldr	r2, [pc, #104]	; (800ae14 <HAL_TIM_PWM_Start+0x1f8>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d009      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1a8>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a1e      	ldr	r2, [pc, #120]	; (800ae30 <HAL_TIM_PWM_Start+0x214>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d004      	beq.n	800adc4 <HAL_TIM_PWM_Start+0x1a8>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a16      	ldr	r2, [pc, #88]	; (800ae18 <HAL_TIM_PWM_Start+0x1fc>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d115      	bne.n	800adf0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689a      	ldr	r2, [r3, #8]
 800adca:	4b1a      	ldr	r3, [pc, #104]	; (800ae34 <HAL_TIM_PWM_Start+0x218>)
 800adcc:	4013      	ands	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b06      	cmp	r3, #6
 800add4:	d015      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x1e6>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800addc:	d011      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f042 0201 	orr.w	r2, r2, #1
 800adec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adee:	e008      	b.n	800ae02 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f042 0201 	orr.w	r2, r2, #1
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	e000      	b.n	800ae04 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	40010000 	.word	0x40010000
 800ae14:	40010400 	.word	0x40010400
 800ae18:	40014000 	.word	0x40014000
 800ae1c:	40014400 	.word	0x40014400
 800ae20:	40014800 	.word	0x40014800
 800ae24:	40000400 	.word	0x40000400
 800ae28:	40000800 	.word	0x40000800
 800ae2c:	40000c00 	.word	0x40000c00
 800ae30:	40001800 	.word	0x40001800
 800ae34:	00010007 	.word	0x00010007

0800ae38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2200      	movs	r2, #0
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f001 fc18 	bl	800c680 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a3e      	ldr	r2, [pc, #248]	; (800af50 <HAL_TIM_PWM_Stop+0x118>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d013      	beq.n	800ae82 <HAL_TIM_PWM_Stop+0x4a>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a3d      	ldr	r2, [pc, #244]	; (800af54 <HAL_TIM_PWM_Stop+0x11c>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d00e      	beq.n	800ae82 <HAL_TIM_PWM_Stop+0x4a>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a3b      	ldr	r2, [pc, #236]	; (800af58 <HAL_TIM_PWM_Stop+0x120>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d009      	beq.n	800ae82 <HAL_TIM_PWM_Stop+0x4a>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a3a      	ldr	r2, [pc, #232]	; (800af5c <HAL_TIM_PWM_Stop+0x124>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d004      	beq.n	800ae82 <HAL_TIM_PWM_Stop+0x4a>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a38      	ldr	r2, [pc, #224]	; (800af60 <HAL_TIM_PWM_Stop+0x128>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d101      	bne.n	800ae86 <HAL_TIM_PWM_Stop+0x4e>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <HAL_TIM_PWM_Stop+0x50>
 800ae86:	2300      	movs	r3, #0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d017      	beq.n	800aebc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6a1a      	ldr	r2, [r3, #32]
 800ae92:	f241 1311 	movw	r3, #4369	; 0x1111
 800ae96:	4013      	ands	r3, r2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10f      	bne.n	800aebc <HAL_TIM_PWM_Stop+0x84>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6a1a      	ldr	r2, [r3, #32]
 800aea2:	f240 4344 	movw	r3, #1092	; 0x444
 800aea6:	4013      	ands	r3, r2
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d107      	bne.n	800aebc <HAL_TIM_PWM_Stop+0x84>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aeba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6a1a      	ldr	r2, [r3, #32]
 800aec2:	f241 1311 	movw	r3, #4369	; 0x1111
 800aec6:	4013      	ands	r3, r2
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10f      	bne.n	800aeec <HAL_TIM_PWM_Stop+0xb4>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6a1a      	ldr	r2, [r3, #32]
 800aed2:	f240 4344 	movw	r3, #1092	; 0x444
 800aed6:	4013      	ands	r3, r2
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d107      	bne.n	800aeec <HAL_TIM_PWM_Stop+0xb4>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f022 0201 	bic.w	r2, r2, #1
 800aeea:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d104      	bne.n	800aefc <HAL_TIM_PWM_Stop+0xc4>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aefa:	e023      	b.n	800af44 <HAL_TIM_PWM_Stop+0x10c>
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d104      	bne.n	800af0c <HAL_TIM_PWM_Stop+0xd4>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af0a:	e01b      	b.n	800af44 <HAL_TIM_PWM_Stop+0x10c>
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b08      	cmp	r3, #8
 800af10:	d104      	bne.n	800af1c <HAL_TIM_PWM_Stop+0xe4>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af1a:	e013      	b.n	800af44 <HAL_TIM_PWM_Stop+0x10c>
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2b0c      	cmp	r3, #12
 800af20:	d104      	bne.n	800af2c <HAL_TIM_PWM_Stop+0xf4>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af2a:	e00b      	b.n	800af44 <HAL_TIM_PWM_Stop+0x10c>
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	2b10      	cmp	r3, #16
 800af30:	d104      	bne.n	800af3c <HAL_TIM_PWM_Stop+0x104>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af3a:	e003      	b.n	800af44 <HAL_TIM_PWM_Stop+0x10c>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	40010000 	.word	0x40010000
 800af54:	40010400 	.word	0x40010400
 800af58:	40014000 	.word	0x40014000
 800af5c:	40014400 	.word	0x40014400
 800af60:	40014800 	.word	0x40014800

0800af64 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e049      	b.n	800b00a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f841 	bl	800b012 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2202      	movs	r2, #2
 800af94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	3304      	adds	r3, #4
 800afa0:	4619      	mov	r1, r3
 800afa2:	4610      	mov	r0, r2
 800afa4:	f000 fe34 	bl	800bc10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b012:	b480      	push	{r7}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b01a:	bf00      	nop
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
	...

0800b028 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d104      	bne.n	800b046 <HAL_TIM_IC_Start_IT+0x1e>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b042:	b2db      	uxtb	r3, r3
 800b044:	e023      	b.n	800b08e <HAL_TIM_IC_Start_IT+0x66>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b04      	cmp	r3, #4
 800b04a:	d104      	bne.n	800b056 <HAL_TIM_IC_Start_IT+0x2e>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b052:	b2db      	uxtb	r3, r3
 800b054:	e01b      	b.n	800b08e <HAL_TIM_IC_Start_IT+0x66>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b08      	cmp	r3, #8
 800b05a:	d104      	bne.n	800b066 <HAL_TIM_IC_Start_IT+0x3e>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b062:	b2db      	uxtb	r3, r3
 800b064:	e013      	b.n	800b08e <HAL_TIM_IC_Start_IT+0x66>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b0c      	cmp	r3, #12
 800b06a:	d104      	bne.n	800b076 <HAL_TIM_IC_Start_IT+0x4e>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b072:	b2db      	uxtb	r3, r3
 800b074:	e00b      	b.n	800b08e <HAL_TIM_IC_Start_IT+0x66>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b10      	cmp	r3, #16
 800b07a:	d104      	bne.n	800b086 <HAL_TIM_IC_Start_IT+0x5e>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b082:	b2db      	uxtb	r3, r3
 800b084:	e003      	b.n	800b08e <HAL_TIM_IC_Start_IT+0x66>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d104      	bne.n	800b0a0 <HAL_TIM_IC_Start_IT+0x78>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	e013      	b.n	800b0c8 <HAL_TIM_IC_Start_IT+0xa0>
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d104      	bne.n	800b0b0 <HAL_TIM_IC_Start_IT+0x88>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	e00b      	b.n	800b0c8 <HAL_TIM_IC_Start_IT+0xa0>
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b08      	cmp	r3, #8
 800b0b4:	d104      	bne.n	800b0c0 <HAL_TIM_IC_Start_IT+0x98>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	e003      	b.n	800b0c8 <HAL_TIM_IC_Start_IT+0xa0>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d102      	bne.n	800b0d6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b0d0:	7b7b      	ldrb	r3, [r7, #13]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d001      	beq.n	800b0da <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e0e2      	b.n	800b2a0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d104      	bne.n	800b0ea <HAL_TIM_IC_Start_IT+0xc2>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0e8:	e023      	b.n	800b132 <HAL_TIM_IC_Start_IT+0x10a>
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2b04      	cmp	r3, #4
 800b0ee:	d104      	bne.n	800b0fa <HAL_TIM_IC_Start_IT+0xd2>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0f8:	e01b      	b.n	800b132 <HAL_TIM_IC_Start_IT+0x10a>
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b08      	cmp	r3, #8
 800b0fe:	d104      	bne.n	800b10a <HAL_TIM_IC_Start_IT+0xe2>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2202      	movs	r2, #2
 800b104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b108:	e013      	b.n	800b132 <HAL_TIM_IC_Start_IT+0x10a>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b0c      	cmp	r3, #12
 800b10e:	d104      	bne.n	800b11a <HAL_TIM_IC_Start_IT+0xf2>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2202      	movs	r2, #2
 800b114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b118:	e00b      	b.n	800b132 <HAL_TIM_IC_Start_IT+0x10a>
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b10      	cmp	r3, #16
 800b11e:	d104      	bne.n	800b12a <HAL_TIM_IC_Start_IT+0x102>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b128:	e003      	b.n	800b132 <HAL_TIM_IC_Start_IT+0x10a>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2202      	movs	r2, #2
 800b12e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d104      	bne.n	800b142 <HAL_TIM_IC_Start_IT+0x11a>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b140:	e013      	b.n	800b16a <HAL_TIM_IC_Start_IT+0x142>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b04      	cmp	r3, #4
 800b146:	d104      	bne.n	800b152 <HAL_TIM_IC_Start_IT+0x12a>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b150:	e00b      	b.n	800b16a <HAL_TIM_IC_Start_IT+0x142>
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b08      	cmp	r3, #8
 800b156:	d104      	bne.n	800b162 <HAL_TIM_IC_Start_IT+0x13a>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b160:	e003      	b.n	800b16a <HAL_TIM_IC_Start_IT+0x142>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2202      	movs	r2, #2
 800b166:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	2b0c      	cmp	r3, #12
 800b16e:	d841      	bhi.n	800b1f4 <HAL_TIM_IC_Start_IT+0x1cc>
 800b170:	a201      	add	r2, pc, #4	; (adr r2, 800b178 <HAL_TIM_IC_Start_IT+0x150>)
 800b172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b176:	bf00      	nop
 800b178:	0800b1ad 	.word	0x0800b1ad
 800b17c:	0800b1f5 	.word	0x0800b1f5
 800b180:	0800b1f5 	.word	0x0800b1f5
 800b184:	0800b1f5 	.word	0x0800b1f5
 800b188:	0800b1bf 	.word	0x0800b1bf
 800b18c:	0800b1f5 	.word	0x0800b1f5
 800b190:	0800b1f5 	.word	0x0800b1f5
 800b194:	0800b1f5 	.word	0x0800b1f5
 800b198:	0800b1d1 	.word	0x0800b1d1
 800b19c:	0800b1f5 	.word	0x0800b1f5
 800b1a0:	0800b1f5 	.word	0x0800b1f5
 800b1a4:	0800b1f5 	.word	0x0800b1f5
 800b1a8:	0800b1e3 	.word	0x0800b1e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68da      	ldr	r2, [r3, #12]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f042 0202 	orr.w	r2, r2, #2
 800b1ba:	60da      	str	r2, [r3, #12]
      break;
 800b1bc:	e01d      	b.n	800b1fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68da      	ldr	r2, [r3, #12]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f042 0204 	orr.w	r2, r2, #4
 800b1cc:	60da      	str	r2, [r3, #12]
      break;
 800b1ce:	e014      	b.n	800b1fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68da      	ldr	r2, [r3, #12]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0208 	orr.w	r2, r2, #8
 800b1de:	60da      	str	r2, [r3, #12]
      break;
 800b1e0:	e00b      	b.n	800b1fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68da      	ldr	r2, [r3, #12]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f042 0210 	orr.w	r2, r2, #16
 800b1f0:	60da      	str	r2, [r3, #12]
      break;
 800b1f2:	e002      	b.n	800b1fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1f8:	bf00      	nop
  }

  if (status == HAL_OK)
 800b1fa:	7bfb      	ldrb	r3, [r7, #15]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d14e      	bne.n	800b29e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2201      	movs	r2, #1
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	4618      	mov	r0, r3
 800b20a:	f001 fa39 	bl	800c680 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a25      	ldr	r2, [pc, #148]	; (800b2a8 <HAL_TIM_IC_Start_IT+0x280>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d022      	beq.n	800b25e <HAL_TIM_IC_Start_IT+0x236>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b220:	d01d      	beq.n	800b25e <HAL_TIM_IC_Start_IT+0x236>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a21      	ldr	r2, [pc, #132]	; (800b2ac <HAL_TIM_IC_Start_IT+0x284>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d018      	beq.n	800b25e <HAL_TIM_IC_Start_IT+0x236>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a1f      	ldr	r2, [pc, #124]	; (800b2b0 <HAL_TIM_IC_Start_IT+0x288>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d013      	beq.n	800b25e <HAL_TIM_IC_Start_IT+0x236>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a1e      	ldr	r2, [pc, #120]	; (800b2b4 <HAL_TIM_IC_Start_IT+0x28c>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d00e      	beq.n	800b25e <HAL_TIM_IC_Start_IT+0x236>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a1c      	ldr	r2, [pc, #112]	; (800b2b8 <HAL_TIM_IC_Start_IT+0x290>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d009      	beq.n	800b25e <HAL_TIM_IC_Start_IT+0x236>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a1b      	ldr	r2, [pc, #108]	; (800b2bc <HAL_TIM_IC_Start_IT+0x294>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d004      	beq.n	800b25e <HAL_TIM_IC_Start_IT+0x236>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a19      	ldr	r2, [pc, #100]	; (800b2c0 <HAL_TIM_IC_Start_IT+0x298>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d115      	bne.n	800b28a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	689a      	ldr	r2, [r3, #8]
 800b264:	4b17      	ldr	r3, [pc, #92]	; (800b2c4 <HAL_TIM_IC_Start_IT+0x29c>)
 800b266:	4013      	ands	r3, r2
 800b268:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2b06      	cmp	r3, #6
 800b26e:	d015      	beq.n	800b29c <HAL_TIM_IC_Start_IT+0x274>
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b276:	d011      	beq.n	800b29c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f042 0201 	orr.w	r2, r2, #1
 800b286:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b288:	e008      	b.n	800b29c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f042 0201 	orr.w	r2, r2, #1
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	e000      	b.n	800b29e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b29c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	40010000 	.word	0x40010000
 800b2ac:	40000400 	.word	0x40000400
 800b2b0:	40000800 	.word	0x40000800
 800b2b4:	40000c00 	.word	0x40000c00
 800b2b8:	40010400 	.word	0x40010400
 800b2bc:	40001800 	.word	0x40001800
 800b2c0:	40014000 	.word	0x40014000
 800b2c4:	00010007 	.word	0x00010007

0800b2c8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	2b0c      	cmp	r3, #12
 800b2da:	d841      	bhi.n	800b360 <HAL_TIM_IC_Stop_IT+0x98>
 800b2dc:	a201      	add	r2, pc, #4	; (adr r2, 800b2e4 <HAL_TIM_IC_Stop_IT+0x1c>)
 800b2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e2:	bf00      	nop
 800b2e4:	0800b319 	.word	0x0800b319
 800b2e8:	0800b361 	.word	0x0800b361
 800b2ec:	0800b361 	.word	0x0800b361
 800b2f0:	0800b361 	.word	0x0800b361
 800b2f4:	0800b32b 	.word	0x0800b32b
 800b2f8:	0800b361 	.word	0x0800b361
 800b2fc:	0800b361 	.word	0x0800b361
 800b300:	0800b361 	.word	0x0800b361
 800b304:	0800b33d 	.word	0x0800b33d
 800b308:	0800b361 	.word	0x0800b361
 800b30c:	0800b361 	.word	0x0800b361
 800b310:	0800b361 	.word	0x0800b361
 800b314:	0800b34f 	.word	0x0800b34f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68da      	ldr	r2, [r3, #12]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f022 0202 	bic.w	r2, r2, #2
 800b326:	60da      	str	r2, [r3, #12]
      break;
 800b328:	e01d      	b.n	800b366 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68da      	ldr	r2, [r3, #12]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f022 0204 	bic.w	r2, r2, #4
 800b338:	60da      	str	r2, [r3, #12]
      break;
 800b33a:	e014      	b.n	800b366 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	68da      	ldr	r2, [r3, #12]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f022 0208 	bic.w	r2, r2, #8
 800b34a:	60da      	str	r2, [r3, #12]
      break;
 800b34c:	e00b      	b.n	800b366 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68da      	ldr	r2, [r3, #12]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f022 0210 	bic.w	r2, r2, #16
 800b35c:	60da      	str	r2, [r3, #12]
      break;
 800b35e:	e002      	b.n	800b366 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	73fb      	strb	r3, [r7, #15]
      break;
 800b364:	bf00      	nop
  }

  if (status == HAL_OK)
 800b366:	7bfb      	ldrb	r3, [r7, #15]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d166      	bne.n	800b43a <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2200      	movs	r2, #0
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	4618      	mov	r0, r3
 800b376:	f001 f983 	bl	800c680 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	6a1a      	ldr	r2, [r3, #32]
 800b380:	f241 1311 	movw	r3, #4369	; 0x1111
 800b384:	4013      	ands	r3, r2
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10f      	bne.n	800b3aa <HAL_TIM_IC_Stop_IT+0xe2>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	6a1a      	ldr	r2, [r3, #32]
 800b390:	f240 4344 	movw	r3, #1092	; 0x444
 800b394:	4013      	ands	r3, r2
 800b396:	2b00      	cmp	r3, #0
 800b398:	d107      	bne.n	800b3aa <HAL_TIM_IC_Stop_IT+0xe2>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f022 0201 	bic.w	r2, r2, #1
 800b3a8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d104      	bne.n	800b3ba <HAL_TIM_IC_Stop_IT+0xf2>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3b8:	e023      	b.n	800b402 <HAL_TIM_IC_Stop_IT+0x13a>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b04      	cmp	r3, #4
 800b3be:	d104      	bne.n	800b3ca <HAL_TIM_IC_Stop_IT+0x102>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3c8:	e01b      	b.n	800b402 <HAL_TIM_IC_Stop_IT+0x13a>
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b08      	cmp	r3, #8
 800b3ce:	d104      	bne.n	800b3da <HAL_TIM_IC_Stop_IT+0x112>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3d8:	e013      	b.n	800b402 <HAL_TIM_IC_Stop_IT+0x13a>
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b0c      	cmp	r3, #12
 800b3de:	d104      	bne.n	800b3ea <HAL_TIM_IC_Stop_IT+0x122>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3e8:	e00b      	b.n	800b402 <HAL_TIM_IC_Stop_IT+0x13a>
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b10      	cmp	r3, #16
 800b3ee:	d104      	bne.n	800b3fa <HAL_TIM_IC_Stop_IT+0x132>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3f8:	e003      	b.n	800b402 <HAL_TIM_IC_Stop_IT+0x13a>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d104      	bne.n	800b412 <HAL_TIM_IC_Stop_IT+0x14a>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b410:	e013      	b.n	800b43a <HAL_TIM_IC_Stop_IT+0x172>
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2b04      	cmp	r3, #4
 800b416:	d104      	bne.n	800b422 <HAL_TIM_IC_Stop_IT+0x15a>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b420:	e00b      	b.n	800b43a <HAL_TIM_IC_Stop_IT+0x172>
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b08      	cmp	r3, #8
 800b426:	d104      	bne.n	800b432 <HAL_TIM_IC_Stop_IT+0x16a>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b430:	e003      	b.n	800b43a <HAL_TIM_IC_Stop_IT+0x172>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	2b02      	cmp	r3, #2
 800b458:	d122      	bne.n	800b4a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	f003 0302 	and.w	r3, r3, #2
 800b464:	2b02      	cmp	r3, #2
 800b466:	d11b      	bne.n	800b4a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f06f 0202 	mvn.w	r2, #2
 800b470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	699b      	ldr	r3, [r3, #24]
 800b47e:	f003 0303 	and.w	r3, r3, #3
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7f7 fef2 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 800b48c:	e005      	b.n	800b49a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fba0 	bl	800bbd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fba7 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	f003 0304 	and.w	r3, r3, #4
 800b4aa:	2b04      	cmp	r3, #4
 800b4ac:	d122      	bne.n	800b4f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	f003 0304 	and.w	r3, r3, #4
 800b4b8:	2b04      	cmp	r3, #4
 800b4ba:	d11b      	bne.n	800b4f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f06f 0204 	mvn.w	r2, #4
 800b4c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2202      	movs	r2, #2
 800b4ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7f7 fec8 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 800b4e0:	e005      	b.n	800b4ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fb76 	bl	800bbd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fb7d 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	f003 0308 	and.w	r3, r3, #8
 800b4fe:	2b08      	cmp	r3, #8
 800b500:	d122      	bne.n	800b548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	f003 0308 	and.w	r3, r3, #8
 800b50c:	2b08      	cmp	r3, #8
 800b50e:	d11b      	bne.n	800b548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f06f 0208 	mvn.w	r2, #8
 800b518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2204      	movs	r2, #4
 800b51e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	f003 0303 	and.w	r3, r3, #3
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7f7 fe9e 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 800b534:	e005      	b.n	800b542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fb4c 	bl	800bbd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 fb53 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	f003 0310 	and.w	r3, r3, #16
 800b552:	2b10      	cmp	r3, #16
 800b554:	d122      	bne.n	800b59c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	f003 0310 	and.w	r3, r3, #16
 800b560:	2b10      	cmp	r3, #16
 800b562:	d11b      	bne.n	800b59c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f06f 0210 	mvn.w	r2, #16
 800b56c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2208      	movs	r2, #8
 800b572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	69db      	ldr	r3, [r3, #28]
 800b57a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d003      	beq.n	800b58a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7f7 fe74 	bl	8003270 <HAL_TIM_IC_CaptureCallback>
 800b588:	e005      	b.n	800b596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fb22 	bl	800bbd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fb29 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	f003 0301 	and.w	r3, r3, #1
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d10e      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	f003 0301 	and.w	r3, r3, #1
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d107      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f06f 0201 	mvn.w	r2, #1
 800b5c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7f7 fed0 	bl	8003368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5d2:	2b80      	cmp	r3, #128	; 0x80
 800b5d4:	d10e      	bne.n	800b5f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5e0:	2b80      	cmp	r3, #128	; 0x80
 800b5e2:	d107      	bne.n	800b5f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f001 f904 	bl	800c7fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b602:	d10e      	bne.n	800b622 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b60e:	2b80      	cmp	r3, #128	; 0x80
 800b610:	d107      	bne.n	800b622 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b61a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f001 f8f7 	bl	800c810 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b62c:	2b40      	cmp	r3, #64	; 0x40
 800b62e:	d10e      	bne.n	800b64e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b63a:	2b40      	cmp	r3, #64	; 0x40
 800b63c:	d107      	bne.n	800b64e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 fad7 	bl	800bbfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	f003 0320 	and.w	r3, r3, #32
 800b658:	2b20      	cmp	r3, #32
 800b65a:	d10e      	bne.n	800b67a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	f003 0320 	and.w	r3, r3, #32
 800b666:	2b20      	cmp	r3, #32
 800b668:	d107      	bne.n	800b67a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f06f 0220 	mvn.w	r2, #32
 800b672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f001 f8b7 	bl	800c7e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b67a:	bf00      	nop
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b086      	sub	sp, #24
 800b686:	af00      	add	r7, sp, #0
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b68e:	2300      	movs	r3, #0
 800b690:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d101      	bne.n	800b6a0 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b69c:	2302      	movs	r3, #2
 800b69e:	e088      	b.n	800b7b2 <HAL_TIM_IC_ConfigChannel+0x130>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d11b      	bne.n	800b6e6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	6819      	ldr	r1, [r3, #0]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	685a      	ldr	r2, [r3, #4]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	f000 fe17 	bl	800c2f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	699a      	ldr	r2, [r3, #24]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f022 020c 	bic.w	r2, r2, #12
 800b6d0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6999      	ldr	r1, [r3, #24]
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	689a      	ldr	r2, [r3, #8]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	619a      	str	r2, [r3, #24]
 800b6e4:	e060      	b.n	800b7a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b04      	cmp	r3, #4
 800b6ea:	d11c      	bne.n	800b726 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6818      	ldr	r0, [r3, #0]
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	6819      	ldr	r1, [r3, #0]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	f000 fe9b 	bl	800c436 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	699a      	ldr	r2, [r3, #24]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b70e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6999      	ldr	r1, [r3, #24]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	021a      	lsls	r2, r3, #8
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	430a      	orrs	r2, r1
 800b722:	619a      	str	r2, [r3, #24]
 800b724:	e040      	b.n	800b7a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2b08      	cmp	r3, #8
 800b72a:	d11b      	bne.n	800b764 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6818      	ldr	r0, [r3, #0]
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	6819      	ldr	r1, [r3, #0]
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	685a      	ldr	r2, [r3, #4]
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	f000 fee8 	bl	800c510 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	69da      	ldr	r2, [r3, #28]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f022 020c 	bic.w	r2, r2, #12
 800b74e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	69d9      	ldr	r1, [r3, #28]
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	689a      	ldr	r2, [r3, #8]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	430a      	orrs	r2, r1
 800b760:	61da      	str	r2, [r3, #28]
 800b762:	e021      	b.n	800b7a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b0c      	cmp	r3, #12
 800b768:	d11c      	bne.n	800b7a4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	6819      	ldr	r1, [r3, #0]
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	685a      	ldr	r2, [r3, #4]
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	f000 ff05 	bl	800c588 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	69da      	ldr	r2, [r3, #28]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b78c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	69d9      	ldr	r1, [r3, #28]
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	021a      	lsls	r2, r3, #8
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	61da      	str	r2, [r3, #28]
 800b7a2:	e001      	b.n	800b7a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3718      	adds	r7, #24
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
	...

0800b7bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d101      	bne.n	800b7da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	e0ff      	b.n	800b9da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b14      	cmp	r3, #20
 800b7e6:	f200 80f0 	bhi.w	800b9ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b7ea:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f0:	0800b845 	.word	0x0800b845
 800b7f4:	0800b9cb 	.word	0x0800b9cb
 800b7f8:	0800b9cb 	.word	0x0800b9cb
 800b7fc:	0800b9cb 	.word	0x0800b9cb
 800b800:	0800b885 	.word	0x0800b885
 800b804:	0800b9cb 	.word	0x0800b9cb
 800b808:	0800b9cb 	.word	0x0800b9cb
 800b80c:	0800b9cb 	.word	0x0800b9cb
 800b810:	0800b8c7 	.word	0x0800b8c7
 800b814:	0800b9cb 	.word	0x0800b9cb
 800b818:	0800b9cb 	.word	0x0800b9cb
 800b81c:	0800b9cb 	.word	0x0800b9cb
 800b820:	0800b907 	.word	0x0800b907
 800b824:	0800b9cb 	.word	0x0800b9cb
 800b828:	0800b9cb 	.word	0x0800b9cb
 800b82c:	0800b9cb 	.word	0x0800b9cb
 800b830:	0800b949 	.word	0x0800b949
 800b834:	0800b9cb 	.word	0x0800b9cb
 800b838:	0800b9cb 	.word	0x0800b9cb
 800b83c:	0800b9cb 	.word	0x0800b9cb
 800b840:	0800b989 	.word	0x0800b989
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68b9      	ldr	r1, [r7, #8]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 fa7a 	bl	800bd44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	699a      	ldr	r2, [r3, #24]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f042 0208 	orr.w	r2, r2, #8
 800b85e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	699a      	ldr	r2, [r3, #24]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f022 0204 	bic.w	r2, r2, #4
 800b86e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6999      	ldr	r1, [r3, #24]
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	691a      	ldr	r2, [r3, #16]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	430a      	orrs	r2, r1
 800b880:	619a      	str	r2, [r3, #24]
      break;
 800b882:	e0a5      	b.n	800b9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68b9      	ldr	r1, [r7, #8]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 faea 	bl	800be64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	699a      	ldr	r2, [r3, #24]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b89e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	699a      	ldr	r2, [r3, #24]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	6999      	ldr	r1, [r3, #24]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	021a      	lsls	r2, r3, #8
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	430a      	orrs	r2, r1
 800b8c2:	619a      	str	r2, [r3, #24]
      break;
 800b8c4:	e084      	b.n	800b9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68b9      	ldr	r1, [r7, #8]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 fb53 	bl	800bf78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	69da      	ldr	r2, [r3, #28]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f042 0208 	orr.w	r2, r2, #8
 800b8e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	69da      	ldr	r2, [r3, #28]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f022 0204 	bic.w	r2, r2, #4
 800b8f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	69d9      	ldr	r1, [r3, #28]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	691a      	ldr	r2, [r3, #16]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	61da      	str	r2, [r3, #28]
      break;
 800b904:	e064      	b.n	800b9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68b9      	ldr	r1, [r7, #8]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 fbbb 	bl	800c088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	69da      	ldr	r2, [r3, #28]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	69da      	ldr	r2, [r3, #28]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	69d9      	ldr	r1, [r3, #28]
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	021a      	lsls	r2, r3, #8
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	430a      	orrs	r2, r1
 800b944:	61da      	str	r2, [r3, #28]
      break;
 800b946:	e043      	b.n	800b9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	68b9      	ldr	r1, [r7, #8]
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 fc04 	bl	800c15c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f042 0208 	orr.w	r2, r2, #8
 800b962:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f022 0204 	bic.w	r2, r2, #4
 800b972:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	691a      	ldr	r2, [r3, #16]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	430a      	orrs	r2, r1
 800b984:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b986:	e023      	b.n	800b9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68b9      	ldr	r1, [r7, #8]
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 fc48 	bl	800c224 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	021a      	lsls	r2, r3, #8
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	430a      	orrs	r2, r1
 800b9c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b9c8:	e002      	b.n	800b9d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	75fb      	strb	r3, [r7, #23]
      break;
 800b9ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop

0800b9e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d101      	bne.n	800ba00 <HAL_TIM_ConfigClockSource+0x1c>
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	e0dc      	b.n	800bbba <HAL_TIM_ConfigClockSource+0x1d6>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	4b6a      	ldr	r3, [pc, #424]	; (800bbc4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a64      	ldr	r2, [pc, #400]	; (800bbc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	f000 80a9 	beq.w	800bb8e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba3c:	4a62      	ldr	r2, [pc, #392]	; (800bbc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	f200 80ae 	bhi.w	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba44:	4a61      	ldr	r2, [pc, #388]	; (800bbcc <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	f000 80a1 	beq.w	800bb8e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba4c:	4a5f      	ldr	r2, [pc, #380]	; (800bbcc <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	f200 80a6 	bhi.w	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba54:	4a5e      	ldr	r2, [pc, #376]	; (800bbd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	f000 8099 	beq.w	800bb8e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba5c:	4a5c      	ldr	r2, [pc, #368]	; (800bbd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	f200 809e 	bhi.w	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba68:	f000 8091 	beq.w	800bb8e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba70:	f200 8096 	bhi.w	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba78:	f000 8089 	beq.w	800bb8e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba80:	f200 808e 	bhi.w	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba88:	d03e      	beq.n	800bb08 <HAL_TIM_ConfigClockSource+0x124>
 800ba8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba8e:	f200 8087 	bhi.w	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba96:	f000 8086 	beq.w	800bba6 <HAL_TIM_ConfigClockSource+0x1c2>
 800ba9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba9e:	d87f      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800baa0:	2b70      	cmp	r3, #112	; 0x70
 800baa2:	d01a      	beq.n	800bada <HAL_TIM_ConfigClockSource+0xf6>
 800baa4:	2b70      	cmp	r3, #112	; 0x70
 800baa6:	d87b      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800baa8:	2b60      	cmp	r3, #96	; 0x60
 800baaa:	d050      	beq.n	800bb4e <HAL_TIM_ConfigClockSource+0x16a>
 800baac:	2b60      	cmp	r3, #96	; 0x60
 800baae:	d877      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bab0:	2b50      	cmp	r3, #80	; 0x50
 800bab2:	d03c      	beq.n	800bb2e <HAL_TIM_ConfigClockSource+0x14a>
 800bab4:	2b50      	cmp	r3, #80	; 0x50
 800bab6:	d873      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bab8:	2b40      	cmp	r3, #64	; 0x40
 800baba:	d058      	beq.n	800bb6e <HAL_TIM_ConfigClockSource+0x18a>
 800babc:	2b40      	cmp	r3, #64	; 0x40
 800babe:	d86f      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bac0:	2b30      	cmp	r3, #48	; 0x30
 800bac2:	d064      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x1aa>
 800bac4:	2b30      	cmp	r3, #48	; 0x30
 800bac6:	d86b      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bac8:	2b20      	cmp	r3, #32
 800baca:	d060      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x1aa>
 800bacc:	2b20      	cmp	r3, #32
 800bace:	d867      	bhi.n	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d05c      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x1aa>
 800bad4:	2b10      	cmp	r3, #16
 800bad6:	d05a      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x1aa>
 800bad8:	e062      	b.n	800bba0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6818      	ldr	r0, [r3, #0]
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	6899      	ldr	r1, [r3, #8]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	685a      	ldr	r2, [r3, #4]
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	f000 fda9 	bl	800c640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bafc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	609a      	str	r2, [r3, #8]
      break;
 800bb06:	e04f      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6818      	ldr	r0, [r3, #0]
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	6899      	ldr	r1, [r3, #8]
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	685a      	ldr	r2, [r3, #4]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	f000 fd92 	bl	800c640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	689a      	ldr	r2, [r3, #8]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb2a:	609a      	str	r2, [r3, #8]
      break;
 800bb2c:	e03c      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6818      	ldr	r0, [r3, #0]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	6859      	ldr	r1, [r3, #4]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	f000 fc4c 	bl	800c3d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2150      	movs	r1, #80	; 0x50
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 fd5c 	bl	800c604 <TIM_ITRx_SetConfig>
      break;
 800bb4c:	e02c      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6818      	ldr	r0, [r3, #0]
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	6859      	ldr	r1, [r3, #4]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f000 fca8 	bl	800c4b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2160      	movs	r1, #96	; 0x60
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 fd4c 	bl	800c604 <TIM_ITRx_SetConfig>
      break;
 800bb6c:	e01c      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6818      	ldr	r0, [r3, #0]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	6859      	ldr	r1, [r3, #4]
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f000 fc2c 	bl	800c3d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2140      	movs	r1, #64	; 0x40
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 fd3c 	bl	800c604 <TIM_ITRx_SetConfig>
      break;
 800bb8c:	e00c      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4619      	mov	r1, r3
 800bb98:	4610      	mov	r0, r2
 800bb9a:	f000 fd33 	bl	800c604 <TIM_ITRx_SetConfig>
      break;
 800bb9e:	e003      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	73fb      	strb	r3, [r7, #15]
      break;
 800bba4:	e000      	b.n	800bba8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	ffceff88 	.word	0xffceff88
 800bbc8:	00100040 	.word	0x00100040
 800bbcc:	00100030 	.word	0x00100030
 800bbd0:	00100020 	.word	0x00100020

0800bbd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a40      	ldr	r2, [pc, #256]	; (800bd24 <TIM_Base_SetConfig+0x114>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d013      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc2e:	d00f      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a3d      	ldr	r2, [pc, #244]	; (800bd28 <TIM_Base_SetConfig+0x118>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d00b      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a3c      	ldr	r2, [pc, #240]	; (800bd2c <TIM_Base_SetConfig+0x11c>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d007      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a3b      	ldr	r2, [pc, #236]	; (800bd30 <TIM_Base_SetConfig+0x120>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d003      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a3a      	ldr	r2, [pc, #232]	; (800bd34 <TIM_Base_SetConfig+0x124>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d108      	bne.n	800bc62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a2f      	ldr	r2, [pc, #188]	; (800bd24 <TIM_Base_SetConfig+0x114>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d01f      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc70:	d01b      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a2c      	ldr	r2, [pc, #176]	; (800bd28 <TIM_Base_SetConfig+0x118>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d017      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a2b      	ldr	r2, [pc, #172]	; (800bd2c <TIM_Base_SetConfig+0x11c>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d013      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a2a      	ldr	r2, [pc, #168]	; (800bd30 <TIM_Base_SetConfig+0x120>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d00f      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a29      	ldr	r2, [pc, #164]	; (800bd34 <TIM_Base_SetConfig+0x124>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d00b      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a28      	ldr	r2, [pc, #160]	; (800bd38 <TIM_Base_SetConfig+0x128>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d007      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a27      	ldr	r2, [pc, #156]	; (800bd3c <TIM_Base_SetConfig+0x12c>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d003      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a26      	ldr	r2, [pc, #152]	; (800bd40 <TIM_Base_SetConfig+0x130>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d108      	bne.n	800bcbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	695b      	ldr	r3, [r3, #20]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	689a      	ldr	r2, [r3, #8]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a10      	ldr	r2, [pc, #64]	; (800bd24 <TIM_Base_SetConfig+0x114>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d00f      	beq.n	800bd08 <TIM_Base_SetConfig+0xf8>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a12      	ldr	r2, [pc, #72]	; (800bd34 <TIM_Base_SetConfig+0x124>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d00b      	beq.n	800bd08 <TIM_Base_SetConfig+0xf8>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a11      	ldr	r2, [pc, #68]	; (800bd38 <TIM_Base_SetConfig+0x128>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d007      	beq.n	800bd08 <TIM_Base_SetConfig+0xf8>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a10      	ldr	r2, [pc, #64]	; (800bd3c <TIM_Base_SetConfig+0x12c>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d003      	beq.n	800bd08 <TIM_Base_SetConfig+0xf8>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a0f      	ldr	r2, [pc, #60]	; (800bd40 <TIM_Base_SetConfig+0x130>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d103      	bne.n	800bd10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	691a      	ldr	r2, [r3, #16]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	615a      	str	r2, [r3, #20]
}
 800bd16:	bf00      	nop
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	40010000 	.word	0x40010000
 800bd28:	40000400 	.word	0x40000400
 800bd2c:	40000800 	.word	0x40000800
 800bd30:	40000c00 	.word	0x40000c00
 800bd34:	40010400 	.word	0x40010400
 800bd38:	40014000 	.word	0x40014000
 800bd3c:	40014400 	.word	0x40014400
 800bd40:	40014800 	.word	0x40014800

0800bd44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b087      	sub	sp, #28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	f023 0201 	bic.w	r2, r3, #1
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	4b37      	ldr	r3, [pc, #220]	; (800be4c <TIM_OC1_SetConfig+0x108>)
 800bd70:	4013      	ands	r3, r2
 800bd72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f023 0303 	bic.w	r3, r3, #3
 800bd7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f023 0302 	bic.w	r3, r3, #2
 800bd8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	697a      	ldr	r2, [r7, #20]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a2d      	ldr	r2, [pc, #180]	; (800be50 <TIM_OC1_SetConfig+0x10c>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d00f      	beq.n	800bdc0 <TIM_OC1_SetConfig+0x7c>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a2c      	ldr	r2, [pc, #176]	; (800be54 <TIM_OC1_SetConfig+0x110>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d00b      	beq.n	800bdc0 <TIM_OC1_SetConfig+0x7c>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4a2b      	ldr	r2, [pc, #172]	; (800be58 <TIM_OC1_SetConfig+0x114>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d007      	beq.n	800bdc0 <TIM_OC1_SetConfig+0x7c>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4a2a      	ldr	r2, [pc, #168]	; (800be5c <TIM_OC1_SetConfig+0x118>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d003      	beq.n	800bdc0 <TIM_OC1_SetConfig+0x7c>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4a29      	ldr	r2, [pc, #164]	; (800be60 <TIM_OC1_SetConfig+0x11c>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d10c      	bne.n	800bdda <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	f023 0308 	bic.w	r3, r3, #8
 800bdc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	697a      	ldr	r2, [r7, #20]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	f023 0304 	bic.w	r3, r3, #4
 800bdd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a1c      	ldr	r2, [pc, #112]	; (800be50 <TIM_OC1_SetConfig+0x10c>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d00f      	beq.n	800be02 <TIM_OC1_SetConfig+0xbe>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a1b      	ldr	r2, [pc, #108]	; (800be54 <TIM_OC1_SetConfig+0x110>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d00b      	beq.n	800be02 <TIM_OC1_SetConfig+0xbe>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a1a      	ldr	r2, [pc, #104]	; (800be58 <TIM_OC1_SetConfig+0x114>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d007      	beq.n	800be02 <TIM_OC1_SetConfig+0xbe>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4a19      	ldr	r2, [pc, #100]	; (800be5c <TIM_OC1_SetConfig+0x118>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d003      	beq.n	800be02 <TIM_OC1_SetConfig+0xbe>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a18      	ldr	r2, [pc, #96]	; (800be60 <TIM_OC1_SetConfig+0x11c>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d111      	bne.n	800be26 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	4313      	orrs	r3, r2
 800be1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	693a      	ldr	r2, [r7, #16]
 800be22:	4313      	orrs	r3, r2
 800be24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	621a      	str	r2, [r3, #32]
}
 800be40:	bf00      	nop
 800be42:	371c      	adds	r7, #28
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	fffeff8f 	.word	0xfffeff8f
 800be50:	40010000 	.word	0x40010000
 800be54:	40010400 	.word	0x40010400
 800be58:	40014000 	.word	0x40014000
 800be5c:	40014400 	.word	0x40014400
 800be60:	40014800 	.word	0x40014800

0800be64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be64:	b480      	push	{r7}
 800be66:	b087      	sub	sp, #28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	f023 0210 	bic.w	r2, r3, #16
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	699b      	ldr	r3, [r3, #24]
 800be8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	4b34      	ldr	r3, [pc, #208]	; (800bf60 <TIM_OC2_SetConfig+0xfc>)
 800be90:	4013      	ands	r3, r2
 800be92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	021b      	lsls	r3, r3, #8
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	4313      	orrs	r3, r2
 800bea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	f023 0320 	bic.w	r3, r3, #32
 800beae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	011b      	lsls	r3, r3, #4
 800beb6:	697a      	ldr	r2, [r7, #20]
 800beb8:	4313      	orrs	r3, r2
 800beba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a29      	ldr	r2, [pc, #164]	; (800bf64 <TIM_OC2_SetConfig+0x100>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d003      	beq.n	800becc <TIM_OC2_SetConfig+0x68>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a28      	ldr	r2, [pc, #160]	; (800bf68 <TIM_OC2_SetConfig+0x104>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d10d      	bne.n	800bee8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	011b      	lsls	r3, r3, #4
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	4313      	orrs	r3, r2
 800bede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bee6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a1e      	ldr	r2, [pc, #120]	; (800bf64 <TIM_OC2_SetConfig+0x100>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d00f      	beq.n	800bf10 <TIM_OC2_SetConfig+0xac>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a1d      	ldr	r2, [pc, #116]	; (800bf68 <TIM_OC2_SetConfig+0x104>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d00b      	beq.n	800bf10 <TIM_OC2_SetConfig+0xac>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a1c      	ldr	r2, [pc, #112]	; (800bf6c <TIM_OC2_SetConfig+0x108>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d007      	beq.n	800bf10 <TIM_OC2_SetConfig+0xac>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a1b      	ldr	r2, [pc, #108]	; (800bf70 <TIM_OC2_SetConfig+0x10c>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d003      	beq.n	800bf10 <TIM_OC2_SetConfig+0xac>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a1a      	ldr	r2, [pc, #104]	; (800bf74 <TIM_OC2_SetConfig+0x110>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d113      	bne.n	800bf38 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	695b      	ldr	r3, [r3, #20]
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	4313      	orrs	r3, r2
 800bf36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	693a      	ldr	r2, [r7, #16]
 800bf3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	685a      	ldr	r2, [r3, #4]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	697a      	ldr	r2, [r7, #20]
 800bf50:	621a      	str	r2, [r3, #32]
}
 800bf52:	bf00      	nop
 800bf54:	371c      	adds	r7, #28
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	feff8fff 	.word	0xfeff8fff
 800bf64:	40010000 	.word	0x40010000
 800bf68:	40010400 	.word	0x40010400
 800bf6c:	40014000 	.word	0x40014000
 800bf70:	40014400 	.word	0x40014400
 800bf74:	40014800 	.word	0x40014800

0800bf78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b087      	sub	sp, #28
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	69db      	ldr	r3, [r3, #28]
 800bf9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	4b33      	ldr	r3, [pc, #204]	; (800c070 <TIM_OC3_SetConfig+0xf8>)
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f023 0303 	bic.w	r3, r3, #3
 800bfae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	021b      	lsls	r3, r3, #8
 800bfc8:	697a      	ldr	r2, [r7, #20]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a28      	ldr	r2, [pc, #160]	; (800c074 <TIM_OC3_SetConfig+0xfc>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d003      	beq.n	800bfde <TIM_OC3_SetConfig+0x66>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a27      	ldr	r2, [pc, #156]	; (800c078 <TIM_OC3_SetConfig+0x100>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d10d      	bne.n	800bffa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	021b      	lsls	r3, r3, #8
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a1d      	ldr	r2, [pc, #116]	; (800c074 <TIM_OC3_SetConfig+0xfc>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d00f      	beq.n	800c022 <TIM_OC3_SetConfig+0xaa>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4a1c      	ldr	r2, [pc, #112]	; (800c078 <TIM_OC3_SetConfig+0x100>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d00b      	beq.n	800c022 <TIM_OC3_SetConfig+0xaa>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a1b      	ldr	r2, [pc, #108]	; (800c07c <TIM_OC3_SetConfig+0x104>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d007      	beq.n	800c022 <TIM_OC3_SetConfig+0xaa>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4a1a      	ldr	r2, [pc, #104]	; (800c080 <TIM_OC3_SetConfig+0x108>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d003      	beq.n	800c022 <TIM_OC3_SetConfig+0xaa>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a19      	ldr	r2, [pc, #100]	; (800c084 <TIM_OC3_SetConfig+0x10c>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d113      	bne.n	800c04a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	695b      	ldr	r3, [r3, #20]
 800c036:	011b      	lsls	r3, r3, #4
 800c038:	693a      	ldr	r2, [r7, #16]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	011b      	lsls	r3, r3, #4
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	4313      	orrs	r3, r2
 800c048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	693a      	ldr	r2, [r7, #16]
 800c04e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	697a      	ldr	r2, [r7, #20]
 800c062:	621a      	str	r2, [r3, #32]
}
 800c064:	bf00      	nop
 800c066:	371c      	adds	r7, #28
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr
 800c070:	fffeff8f 	.word	0xfffeff8f
 800c074:	40010000 	.word	0x40010000
 800c078:	40010400 	.word	0x40010400
 800c07c:	40014000 	.word	0x40014000
 800c080:	40014400 	.word	0x40014400
 800c084:	40014800 	.word	0x40014800

0800c088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c088:	b480      	push	{r7}
 800c08a:	b087      	sub	sp, #28
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	69db      	ldr	r3, [r3, #28]
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4b24      	ldr	r3, [pc, #144]	; (800c144 <TIM_OC4_SetConfig+0xbc>)
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	021b      	lsls	r3, r3, #8
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	031b      	lsls	r3, r3, #12
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a19      	ldr	r2, [pc, #100]	; (800c148 <TIM_OC4_SetConfig+0xc0>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d00f      	beq.n	800c108 <TIM_OC4_SetConfig+0x80>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a18      	ldr	r2, [pc, #96]	; (800c14c <TIM_OC4_SetConfig+0xc4>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d00b      	beq.n	800c108 <TIM_OC4_SetConfig+0x80>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a17      	ldr	r2, [pc, #92]	; (800c150 <TIM_OC4_SetConfig+0xc8>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d007      	beq.n	800c108 <TIM_OC4_SetConfig+0x80>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a16      	ldr	r2, [pc, #88]	; (800c154 <TIM_OC4_SetConfig+0xcc>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d003      	beq.n	800c108 <TIM_OC4_SetConfig+0x80>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a15      	ldr	r2, [pc, #84]	; (800c158 <TIM_OC4_SetConfig+0xd0>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d109      	bne.n	800c11c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c10e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	019b      	lsls	r3, r3, #6
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	4313      	orrs	r3, r2
 800c11a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	697a      	ldr	r2, [r7, #20]
 800c120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	621a      	str	r2, [r3, #32]
}
 800c136:	bf00      	nop
 800c138:	371c      	adds	r7, #28
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	feff8fff 	.word	0xfeff8fff
 800c148:	40010000 	.word	0x40010000
 800c14c:	40010400 	.word	0x40010400
 800c150:	40014000 	.word	0x40014000
 800c154:	40014400 	.word	0x40014400
 800c158:	40014800 	.word	0x40014800

0800c15c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	4b21      	ldr	r3, [pc, #132]	; (800c20c <TIM_OC5_SetConfig+0xb0>)
 800c188:	4013      	ands	r3, r2
 800c18a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	4313      	orrs	r3, r2
 800c194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c19c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	041b      	lsls	r3, r3, #16
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a18      	ldr	r2, [pc, #96]	; (800c210 <TIM_OC5_SetConfig+0xb4>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d00f      	beq.n	800c1d2 <TIM_OC5_SetConfig+0x76>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a17      	ldr	r2, [pc, #92]	; (800c214 <TIM_OC5_SetConfig+0xb8>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d00b      	beq.n	800c1d2 <TIM_OC5_SetConfig+0x76>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a16      	ldr	r2, [pc, #88]	; (800c218 <TIM_OC5_SetConfig+0xbc>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d007      	beq.n	800c1d2 <TIM_OC5_SetConfig+0x76>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a15      	ldr	r2, [pc, #84]	; (800c21c <TIM_OC5_SetConfig+0xc0>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d003      	beq.n	800c1d2 <TIM_OC5_SetConfig+0x76>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a14      	ldr	r2, [pc, #80]	; (800c220 <TIM_OC5_SetConfig+0xc4>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d109      	bne.n	800c1e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	695b      	ldr	r3, [r3, #20]
 800c1de:	021b      	lsls	r3, r3, #8
 800c1e0:	697a      	ldr	r2, [r7, #20]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	697a      	ldr	r2, [r7, #20]
 800c1ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	621a      	str	r2, [r3, #32]
}
 800c200:	bf00      	nop
 800c202:	371c      	adds	r7, #28
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	fffeff8f 	.word	0xfffeff8f
 800c210:	40010000 	.word	0x40010000
 800c214:	40010400 	.word	0x40010400
 800c218:	40014000 	.word	0x40014000
 800c21c:	40014400 	.word	0x40014400
 800c220:	40014800 	.word	0x40014800

0800c224 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c224:	b480      	push	{r7}
 800c226:	b087      	sub	sp, #28
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	4b22      	ldr	r3, [pc, #136]	; (800c2d8 <TIM_OC6_SetConfig+0xb4>)
 800c250:	4013      	ands	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	021b      	lsls	r3, r3, #8
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	051b      	lsls	r3, r3, #20
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	4313      	orrs	r3, r2
 800c272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a19      	ldr	r2, [pc, #100]	; (800c2dc <TIM_OC6_SetConfig+0xb8>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d00f      	beq.n	800c29c <TIM_OC6_SetConfig+0x78>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a18      	ldr	r2, [pc, #96]	; (800c2e0 <TIM_OC6_SetConfig+0xbc>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d00b      	beq.n	800c29c <TIM_OC6_SetConfig+0x78>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a17      	ldr	r2, [pc, #92]	; (800c2e4 <TIM_OC6_SetConfig+0xc0>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d007      	beq.n	800c29c <TIM_OC6_SetConfig+0x78>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a16      	ldr	r2, [pc, #88]	; (800c2e8 <TIM_OC6_SetConfig+0xc4>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d003      	beq.n	800c29c <TIM_OC6_SetConfig+0x78>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a15      	ldr	r2, [pc, #84]	; (800c2ec <TIM_OC6_SetConfig+0xc8>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d109      	bne.n	800c2b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	695b      	ldr	r3, [r3, #20]
 800c2a8:	029b      	lsls	r3, r3, #10
 800c2aa:	697a      	ldr	r2, [r7, #20]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	697a      	ldr	r2, [r7, #20]
 800c2b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	693a      	ldr	r2, [r7, #16]
 800c2c8:	621a      	str	r2, [r3, #32]
}
 800c2ca:	bf00      	nop
 800c2cc:	371c      	adds	r7, #28
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	feff8fff 	.word	0xfeff8fff
 800c2dc:	40010000 	.word	0x40010000
 800c2e0:	40010400 	.word	0x40010400
 800c2e4:	40014000 	.word	0x40014000
 800c2e8:	40014400 	.word	0x40014400
 800c2ec:	40014800 	.word	0x40014800

0800c2f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b087      	sub	sp, #28
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
 800c2fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6a1b      	ldr	r3, [r3, #32]
 800c302:	f023 0201 	bic.w	r2, r3, #1
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	699b      	ldr	r3, [r3, #24]
 800c30e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6a1b      	ldr	r3, [r3, #32]
 800c314:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	4a28      	ldr	r2, [pc, #160]	; (800c3bc <TIM_TI1_SetConfig+0xcc>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d01b      	beq.n	800c356 <TIM_TI1_SetConfig+0x66>
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c324:	d017      	beq.n	800c356 <TIM_TI1_SetConfig+0x66>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	4a25      	ldr	r2, [pc, #148]	; (800c3c0 <TIM_TI1_SetConfig+0xd0>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d013      	beq.n	800c356 <TIM_TI1_SetConfig+0x66>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	4a24      	ldr	r2, [pc, #144]	; (800c3c4 <TIM_TI1_SetConfig+0xd4>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d00f      	beq.n	800c356 <TIM_TI1_SetConfig+0x66>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	4a23      	ldr	r2, [pc, #140]	; (800c3c8 <TIM_TI1_SetConfig+0xd8>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d00b      	beq.n	800c356 <TIM_TI1_SetConfig+0x66>
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	4a22      	ldr	r2, [pc, #136]	; (800c3cc <TIM_TI1_SetConfig+0xdc>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d007      	beq.n	800c356 <TIM_TI1_SetConfig+0x66>
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	4a21      	ldr	r2, [pc, #132]	; (800c3d0 <TIM_TI1_SetConfig+0xe0>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d003      	beq.n	800c356 <TIM_TI1_SetConfig+0x66>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	4a20      	ldr	r2, [pc, #128]	; (800c3d4 <TIM_TI1_SetConfig+0xe4>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d101      	bne.n	800c35a <TIM_TI1_SetConfig+0x6a>
 800c356:	2301      	movs	r3, #1
 800c358:	e000      	b.n	800c35c <TIM_TI1_SetConfig+0x6c>
 800c35a:	2300      	movs	r3, #0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d008      	beq.n	800c372 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	f023 0303 	bic.w	r3, r3, #3
 800c366:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c368:	697a      	ldr	r2, [r7, #20]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	617b      	str	r3, [r7, #20]
 800c370:	e003      	b.n	800c37a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f043 0301 	orr.w	r3, r3, #1
 800c378:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	011b      	lsls	r3, r3, #4
 800c386:	b2db      	uxtb	r3, r3
 800c388:	697a      	ldr	r2, [r7, #20]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	f023 030a 	bic.w	r3, r3, #10
 800c394:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	f003 030a 	and.w	r3, r3, #10
 800c39c:	693a      	ldr	r2, [r7, #16]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	693a      	ldr	r2, [r7, #16]
 800c3ac:	621a      	str	r2, [r3, #32]
}
 800c3ae:	bf00      	nop
 800c3b0:	371c      	adds	r7, #28
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	40010000 	.word	0x40010000
 800c3c0:	40000400 	.word	0x40000400
 800c3c4:	40000800 	.word	0x40000800
 800c3c8:	40000c00 	.word	0x40000c00
 800c3cc:	40010400 	.word	0x40010400
 800c3d0:	40001800 	.word	0x40001800
 800c3d4:	40014000 	.word	0x40014000

0800c3d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b087      	sub	sp, #28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	6a1b      	ldr	r3, [r3, #32]
 800c3e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6a1b      	ldr	r3, [r3, #32]
 800c3ee:	f023 0201 	bic.w	r2, r3, #1
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	699b      	ldr	r3, [r3, #24]
 800c3fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	011b      	lsls	r3, r3, #4
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f023 030a 	bic.w	r3, r3, #10
 800c414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c416:	697a      	ldr	r2, [r7, #20]
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	621a      	str	r2, [r3, #32]
}
 800c42a:	bf00      	nop
 800c42c:	371c      	adds	r7, #28
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr

0800c436 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c436:	b480      	push	{r7}
 800c438:	b087      	sub	sp, #28
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	60b9      	str	r1, [r7, #8]
 800c440:	607a      	str	r2, [r7, #4]
 800c442:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6a1b      	ldr	r3, [r3, #32]
 800c448:	f023 0210 	bic.w	r2, r3, #16
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c462:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	021b      	lsls	r3, r3, #8
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	031b      	lsls	r3, r3, #12
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	4313      	orrs	r3, r2
 800c480:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c488:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	011b      	lsls	r3, r3, #4
 800c48e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c492:	693a      	ldr	r2, [r7, #16]
 800c494:	4313      	orrs	r3, r2
 800c496:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	697a      	ldr	r2, [r7, #20]
 800c49c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	693a      	ldr	r2, [r7, #16]
 800c4a2:	621a      	str	r2, [r3, #32]
}
 800c4a4:	bf00      	nop
 800c4a6:	371c      	adds	r7, #28
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b087      	sub	sp, #28
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6a1b      	ldr	r3, [r3, #32]
 800c4c0:	f023 0210 	bic.w	r2, r3, #16
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	699b      	ldr	r3, [r3, #24]
 800c4cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	031b      	lsls	r3, r3, #12
 800c4e0:	697a      	ldr	r2, [r7, #20]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c4ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	011b      	lsls	r3, r3, #4
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	697a      	ldr	r2, [r7, #20]
 800c4fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	621a      	str	r2, [r3, #32]
}
 800c504:	bf00      	nop
 800c506:	371c      	adds	r7, #28
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c510:	b480      	push	{r7}
 800c512:	b087      	sub	sp, #28
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
 800c51c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	69db      	ldr	r3, [r3, #28]
 800c52e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6a1b      	ldr	r3, [r3, #32]
 800c534:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	f023 0303 	bic.w	r3, r3, #3
 800c53c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4313      	orrs	r3, r2
 800c544:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c54c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	011b      	lsls	r3, r3, #4
 800c552:	b2db      	uxtb	r3, r3
 800c554:	697a      	ldr	r2, [r7, #20]
 800c556:	4313      	orrs	r3, r2
 800c558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c560:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	021b      	lsls	r3, r3, #8
 800c566:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	693a      	ldr	r2, [r7, #16]
 800c57a:	621a      	str	r2, [r3, #32]
}
 800c57c:	bf00      	nop
 800c57e:	371c      	adds	r7, #28
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	69db      	ldr	r3, [r3, #28]
 800c5a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6a1b      	ldr	r3, [r3, #32]
 800c5ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	021b      	lsls	r3, r3, #8
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c5c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	031b      	lsls	r3, r3, #12
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c5da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	031b      	lsls	r3, r3, #12
 800c5e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	697a      	ldr	r2, [r7, #20]
 800c5ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	693a      	ldr	r2, [r7, #16]
 800c5f4:	621a      	str	r2, [r3, #32]
}
 800c5f6:	bf00      	nop
 800c5f8:	371c      	adds	r7, #28
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
	...

0800c604 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	4b09      	ldr	r3, [pc, #36]	; (800c63c <TIM_ITRx_SetConfig+0x38>)
 800c618:	4013      	ands	r3, r2
 800c61a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	4313      	orrs	r3, r2
 800c622:	f043 0307 	orr.w	r3, r3, #7
 800c626:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	609a      	str	r2, [r3, #8]
}
 800c62e:	bf00      	nop
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	ffcfff8f 	.word	0xffcfff8f

0800c640 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c640:	b480      	push	{r7}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c65a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	021a      	lsls	r2, r3, #8
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	431a      	orrs	r2, r3
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	4313      	orrs	r3, r2
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	697a      	ldr	r2, [r7, #20]
 800c672:	609a      	str	r2, [r3, #8]
}
 800c674:	bf00      	nop
 800c676:	371c      	adds	r7, #28
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c680:	b480      	push	{r7}
 800c682:	b087      	sub	sp, #28
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	f003 031f 	and.w	r3, r3, #31
 800c692:	2201      	movs	r2, #1
 800c694:	fa02 f303 	lsl.w	r3, r2, r3
 800c698:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6a1a      	ldr	r2, [r3, #32]
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	43db      	mvns	r3, r3
 800c6a2:	401a      	ands	r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6a1a      	ldr	r2, [r3, #32]
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	f003 031f 	and.w	r3, r3, #31
 800c6b2:	6879      	ldr	r1, [r7, #4]
 800c6b4:	fa01 f303 	lsl.w	r3, r1, r3
 800c6b8:	431a      	orrs	r2, r3
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	621a      	str	r2, [r3, #32]
}
 800c6be:	bf00      	nop
 800c6c0:	371c      	adds	r7, #28
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
	...

0800c6cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b085      	sub	sp, #20
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d101      	bne.n	800c6e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	e06d      	b.n	800c7c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2202      	movs	r2, #2
 800c6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a30      	ldr	r2, [pc, #192]	; (800c7cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d004      	beq.n	800c718 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a2f      	ldr	r2, [pc, #188]	; (800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d108      	bne.n	800c72a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c71e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	4313      	orrs	r3, r2
 800c728:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c730:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	4313      	orrs	r3, r2
 800c73a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a20      	ldr	r2, [pc, #128]	; (800c7cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d022      	beq.n	800c794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c756:	d01d      	beq.n	800c794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a1d      	ldr	r2, [pc, #116]	; (800c7d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d018      	beq.n	800c794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a1c      	ldr	r2, [pc, #112]	; (800c7d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d013      	beq.n	800c794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a1a      	ldr	r2, [pc, #104]	; (800c7dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d00e      	beq.n	800c794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a15      	ldr	r2, [pc, #84]	; (800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d009      	beq.n	800c794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a16      	ldr	r2, [pc, #88]	; (800c7e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d004      	beq.n	800c794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a15      	ldr	r2, [pc, #84]	; (800c7e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d10c      	bne.n	800c7ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c79a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3714      	adds	r7, #20
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr
 800c7cc:	40010000 	.word	0x40010000
 800c7d0:	40010400 	.word	0x40010400
 800c7d4:	40000400 	.word	0x40000400
 800c7d8:	40000800 	.word	0x40000800
 800c7dc:	40000c00 	.word	0x40000c00
 800c7e0:	40001800 	.word	0x40001800
 800c7e4:	40014000 	.word	0x40014000

0800c7e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c818:	bf00      	nop
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d101      	bne.n	800c836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c832:	2301      	movs	r3, #1
 800c834:	e042      	b.n	800c8bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d106      	bne.n	800c84e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7fa f9d9 	bl	8006c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2224      	movs	r2, #36	; 0x24
 800c852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f022 0201 	bic.w	r2, r2, #1
 800c864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 fccc 	bl	800d204 <UART_SetConfig>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d101      	bne.n	800c876 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e022      	b.n	800c8bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f001 fa28 	bl	800dcd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	685a      	ldr	r2, [r3, #4]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	689a      	ldr	r2, [r3, #8]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f042 0201 	orr.w	r2, r2, #1
 800c8b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f001 faaf 	bl	800de18 <UART_CheckIdleState>
 800c8ba:	4603      	mov	r3, r0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b08a      	sub	sp, #40	; 0x28
 800c8c8:	af02      	add	r7, sp, #8
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	603b      	str	r3, [r7, #0]
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8da:	2b20      	cmp	r3, #32
 800c8dc:	f040 8083 	bne.w	800c9e6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d002      	beq.n	800c8ec <HAL_UART_Transmit+0x28>
 800c8e6:	88fb      	ldrh	r3, [r7, #6]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e07b      	b.n	800c9e8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d101      	bne.n	800c8fe <HAL_UART_Transmit+0x3a>
 800c8fa:	2302      	movs	r3, #2
 800c8fc:	e074      	b.n	800c9e8 <HAL_UART_Transmit+0x124>
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2201      	movs	r2, #1
 800c902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2200      	movs	r2, #0
 800c90a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2221      	movs	r2, #33	; 0x21
 800c912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c916:	f7fa fb4f 	bl	8006fb8 <HAL_GetTick>
 800c91a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	88fa      	ldrh	r2, [r7, #6]
 800c920:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	88fa      	ldrh	r2, [r7, #6]
 800c928:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c934:	d108      	bne.n	800c948 <HAL_UART_Transmit+0x84>
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	691b      	ldr	r3, [r3, #16]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d104      	bne.n	800c948 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c93e:	2300      	movs	r3, #0
 800c940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	61bb      	str	r3, [r7, #24]
 800c946:	e003      	b.n	800c950 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c94c:	2300      	movs	r3, #0
 800c94e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c958:	e02c      	b.n	800c9b4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2200      	movs	r2, #0
 800c962:	2180      	movs	r1, #128	; 0x80
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f001 faa2 	bl	800deae <UART_WaitOnFlagUntilTimeout>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d001      	beq.n	800c974 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c970:	2303      	movs	r3, #3
 800c972:	e039      	b.n	800c9e8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10b      	bne.n	800c992 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	461a      	mov	r2, r3
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c988:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	3302      	adds	r3, #2
 800c98e:	61bb      	str	r3, [r7, #24]
 800c990:	e007      	b.n	800c9a2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	781a      	ldrb	r2, [r3, #0]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1cc      	bne.n	800c95a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	2140      	movs	r1, #64	; 0x40
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f001 fa6f 	bl	800deae <UART_WaitOnFlagUntilTimeout>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d001      	beq.n	800c9da <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	e006      	b.n	800c9e8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2220      	movs	r2, #32
 800c9de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	e000      	b.n	800c9e8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c9e6:	2302      	movs	r3, #2
  }
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3720      	adds	r7, #32
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b08a      	sub	sp, #40	; 0x28
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca04:	2b20      	cmp	r3, #32
 800ca06:	d142      	bne.n	800ca8e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d002      	beq.n	800ca14 <HAL_UART_Receive_IT+0x24>
 800ca0e:	88fb      	ldrh	r3, [r7, #6]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d101      	bne.n	800ca18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e03b      	b.n	800ca90 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d101      	bne.n	800ca26 <HAL_UART_Receive_IT+0x36>
 800ca22:	2302      	movs	r3, #2
 800ca24:	e034      	b.n	800ca90 <HAL_UART_Receive_IT+0xa0>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2201      	movs	r2, #1
 800ca2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2200      	movs	r2, #0
 800ca32:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a17      	ldr	r2, [pc, #92]	; (800ca98 <HAL_UART_Receive_IT+0xa8>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d01f      	beq.n	800ca7e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d018      	beq.n	800ca7e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	e853 3f00 	ldrex	r3, [r3]
 800ca58:	613b      	str	r3, [r7, #16]
   return(result);
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca60:	627b      	str	r3, [r7, #36]	; 0x24
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6a:	623b      	str	r3, [r7, #32]
 800ca6c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6e:	69f9      	ldr	r1, [r7, #28]
 800ca70:	6a3a      	ldr	r2, [r7, #32]
 800ca72:	e841 2300 	strex	r3, r2, [r1]
 800ca76:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1e6      	bne.n	800ca4c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ca7e:	88fb      	ldrh	r3, [r7, #6]
 800ca80:	461a      	mov	r2, r3
 800ca82:	68b9      	ldr	r1, [r7, #8]
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f001 fadb 	bl	800e040 <UART_Start_Receive_IT>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	e000      	b.n	800ca90 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ca8e:	2302      	movs	r3, #2
  }
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3728      	adds	r7, #40	; 0x28
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	58000c00 	.word	0x58000c00

0800ca9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b0ba      	sub	sp, #232	; 0xe8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cac2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cac6:	f640 030f 	movw	r3, #2063	; 0x80f
 800caca:	4013      	ands	r3, r2
 800cacc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d11b      	bne.n	800cb10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cadc:	f003 0320 	and.w	r3, r3, #32
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d015      	beq.n	800cb10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cae8:	f003 0320 	and.w	r3, r3, #32
 800caec:	2b00      	cmp	r3, #0
 800caee:	d105      	bne.n	800cafc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800caf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800caf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d009      	beq.n	800cb10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f000 835a 	beq.w	800d1ba <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	4798      	blx	r3
      }
      return;
 800cb0e:	e354      	b.n	800d1ba <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cb10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f000 811f 	beq.w	800cd58 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cb1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cb1e:	4b8b      	ldr	r3, [pc, #556]	; (800cd4c <HAL_UART_IRQHandler+0x2b0>)
 800cb20:	4013      	ands	r3, r2
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d106      	bne.n	800cb34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cb2a:	4b89      	ldr	r3, [pc, #548]	; (800cd50 <HAL_UART_IRQHandler+0x2b4>)
 800cb2c:	4013      	ands	r3, r2
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f000 8112 	beq.w	800cd58 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d011      	beq.n	800cb64 <HAL_UART_IRQHandler+0xc8>
 800cb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00b      	beq.n	800cb64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2201      	movs	r2, #1
 800cb52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb5a:	f043 0201 	orr.w	r2, r3, #1
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb68:	f003 0302 	and.w	r3, r3, #2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d011      	beq.n	800cb94 <HAL_UART_IRQHandler+0xf8>
 800cb70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb74:	f003 0301 	and.w	r3, r3, #1
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00b      	beq.n	800cb94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2202      	movs	r2, #2
 800cb82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb8a:	f043 0204 	orr.w	r2, r3, #4
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb98:	f003 0304 	and.w	r3, r3, #4
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d011      	beq.n	800cbc4 <HAL_UART_IRQHandler+0x128>
 800cba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cba4:	f003 0301 	and.w	r3, r3, #1
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00b      	beq.n	800cbc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2204      	movs	r2, #4
 800cbb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbba:	f043 0202 	orr.w	r2, r3, #2
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cbc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbc8:	f003 0308 	and.w	r3, r3, #8
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d017      	beq.n	800cc00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cbd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbd4:	f003 0320 	and.w	r3, r3, #32
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d105      	bne.n	800cbe8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cbdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cbe0:	4b5a      	ldr	r3, [pc, #360]	; (800cd4c <HAL_UART_IRQHandler+0x2b0>)
 800cbe2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00b      	beq.n	800cc00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2208      	movs	r2, #8
 800cbee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbf6:	f043 0208 	orr.w	r2, r3, #8
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cc00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d012      	beq.n	800cc32 <HAL_UART_IRQHandler+0x196>
 800cc0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00c      	beq.n	800cc32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc28:	f043 0220 	orr.w	r2, r3, #32
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	f000 82c0 	beq.w	800d1be <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc42:	f003 0320 	and.w	r3, r3, #32
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d013      	beq.n	800cc72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc4e:	f003 0320 	and.w	r3, r3, #32
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d105      	bne.n	800cc62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d007      	beq.n	800cc72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d003      	beq.n	800cc72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc86:	2b40      	cmp	r3, #64	; 0x40
 800cc88:	d005      	beq.n	800cc96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cc8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d04f      	beq.n	800cd36 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f001 fafc 	bl	800e294 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cca6:	2b40      	cmp	r3, #64	; 0x40
 800cca8:	d141      	bne.n	800cd2e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	3308      	adds	r3, #8
 800ccb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ccb8:	e853 3f00 	ldrex	r3, [r3]
 800ccbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ccc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ccc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	3308      	adds	r3, #8
 800ccd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ccd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ccda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cce6:	e841 2300 	strex	r3, r2, [r1]
 800ccea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ccee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1d9      	bne.n	800ccaa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d013      	beq.n	800cd26 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd02:	4a14      	ldr	r2, [pc, #80]	; (800cd54 <HAL_UART_IRQHandler+0x2b8>)
 800cd04:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fa fdf0 	bl	80078f0 <HAL_DMA_Abort_IT>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d017      	beq.n	800cd46 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cd20:	4610      	mov	r0, r2
 800cd22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd24:	e00f      	b.n	800cd46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fa56 	bl	800d1d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd2c:	e00b      	b.n	800cd46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fa52 	bl	800d1d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd34:	e007      	b.n	800cd46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fa4e 	bl	800d1d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cd44:	e23b      	b.n	800d1be <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd46:	bf00      	nop
    return;
 800cd48:	e239      	b.n	800d1be <HAL_UART_IRQHandler+0x722>
 800cd4a:	bf00      	nop
 800cd4c:	10000001 	.word	0x10000001
 800cd50:	04000120 	.word	0x04000120
 800cd54:	0800e361 	.word	0x0800e361

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	f040 81ce 	bne.w	800d0fe <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cd62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd66:	f003 0310 	and.w	r3, r3, #16
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f000 81c7 	beq.w	800d0fe <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cd70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd74:	f003 0310 	and.w	r3, r3, #16
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f000 81c0 	beq.w	800d0fe <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2210      	movs	r2, #16
 800cd84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd90:	2b40      	cmp	r3, #64	; 0x40
 800cd92:	f040 813b 	bne.w	800d00c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a8b      	ldr	r2, [pc, #556]	; (800cfcc <HAL_UART_IRQHandler+0x530>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d059      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a89      	ldr	r2, [pc, #548]	; (800cfd0 <HAL_UART_IRQHandler+0x534>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d053      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a87      	ldr	r2, [pc, #540]	; (800cfd4 <HAL_UART_IRQHandler+0x538>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d04d      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a85      	ldr	r2, [pc, #532]	; (800cfd8 <HAL_UART_IRQHandler+0x53c>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d047      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a83      	ldr	r2, [pc, #524]	; (800cfdc <HAL_UART_IRQHandler+0x540>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d041      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a81      	ldr	r2, [pc, #516]	; (800cfe0 <HAL_UART_IRQHandler+0x544>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d03b      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a7f      	ldr	r2, [pc, #508]	; (800cfe4 <HAL_UART_IRQHandler+0x548>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d035      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a7d      	ldr	r2, [pc, #500]	; (800cfe8 <HAL_UART_IRQHandler+0x54c>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d02f      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a7b      	ldr	r2, [pc, #492]	; (800cfec <HAL_UART_IRQHandler+0x550>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d029      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a79      	ldr	r2, [pc, #484]	; (800cff0 <HAL_UART_IRQHandler+0x554>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d023      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a77      	ldr	r2, [pc, #476]	; (800cff4 <HAL_UART_IRQHandler+0x558>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d01d      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a75      	ldr	r2, [pc, #468]	; (800cff8 <HAL_UART_IRQHandler+0x55c>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d017      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a73      	ldr	r2, [pc, #460]	; (800cffc <HAL_UART_IRQHandler+0x560>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d011      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a71      	ldr	r2, [pc, #452]	; (800d000 <HAL_UART_IRQHandler+0x564>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d00b      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a6f      	ldr	r2, [pc, #444]	; (800d004 <HAL_UART_IRQHandler+0x568>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d005      	beq.n	800ce56 <HAL_UART_IRQHandler+0x3ba>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a6d      	ldr	r2, [pc, #436]	; (800d008 <HAL_UART_IRQHandler+0x56c>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d105      	bne.n	800ce62 <HAL_UART_IRQHandler+0x3c6>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	e004      	b.n	800ce6c <HAL_UART_IRQHandler+0x3d0>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ce70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f000 81a4 	beq.w	800d1c2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ce84:	429a      	cmp	r2, r3
 800ce86:	f080 819c 	bcs.w	800d1c2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ce90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce98:	69db      	ldr	r3, [r3, #28]
 800ce9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce9e:	f000 8086 	beq.w	800cfae <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ceae:	e853 3f00 	ldrex	r3, [r3]
 800ceb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ceb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ceba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cebe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	461a      	mov	r2, r3
 800cec8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ced0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ced8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cedc:	e841 2300 	strex	r3, r2, [r1]
 800cee0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d1da      	bne.n	800cea2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	3308      	adds	r3, #8
 800cef2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cef6:	e853 3f00 	ldrex	r3, [r3]
 800cefa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cefc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cefe:	f023 0301 	bic.w	r3, r3, #1
 800cf02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	3308      	adds	r3, #8
 800cf0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cf10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cf14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf16:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cf18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cf1c:	e841 2300 	strex	r3, r2, [r1]
 800cf20:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cf22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1e1      	bne.n	800ceec <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	3308      	adds	r3, #8
 800cf2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf32:	e853 3f00 	ldrex	r3, [r3]
 800cf36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cf38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	3308      	adds	r3, #8
 800cf48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cf4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cf4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cf52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf54:	e841 2300 	strex	r3, r2, [r1]
 800cf58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cf5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1e3      	bne.n	800cf28 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2220      	movs	r2, #32
 800cf64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf76:	e853 3f00 	ldrex	r3, [r3]
 800cf7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cf7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf7e:	f023 0310 	bic.w	r3, r3, #16
 800cf82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cf90:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf98:	e841 2300 	strex	r3, r2, [r1]
 800cf9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cf9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1e4      	bne.n	800cf6e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fa f983 	bl	80072b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 f912 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cfc8:	e0fb      	b.n	800d1c2 <HAL_UART_IRQHandler+0x726>
 800cfca:	bf00      	nop
 800cfcc:	40020010 	.word	0x40020010
 800cfd0:	40020028 	.word	0x40020028
 800cfd4:	40020040 	.word	0x40020040
 800cfd8:	40020058 	.word	0x40020058
 800cfdc:	40020070 	.word	0x40020070
 800cfe0:	40020088 	.word	0x40020088
 800cfe4:	400200a0 	.word	0x400200a0
 800cfe8:	400200b8 	.word	0x400200b8
 800cfec:	40020410 	.word	0x40020410
 800cff0:	40020428 	.word	0x40020428
 800cff4:	40020440 	.word	0x40020440
 800cff8:	40020458 	.word	0x40020458
 800cffc:	40020470 	.word	0x40020470
 800d000:	40020488 	.word	0x40020488
 800d004:	400204a0 	.word	0x400204a0
 800d008:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d018:	b29b      	uxth	r3, r3
 800d01a:	1ad3      	subs	r3, r2, r3
 800d01c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d026:	b29b      	uxth	r3, r3
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 80cc 	beq.w	800d1c6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d02e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d032:	2b00      	cmp	r3, #0
 800d034:	f000 80c7 	beq.w	800d1c6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d040:	e853 3f00 	ldrex	r3, [r3]
 800d044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d04c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	461a      	mov	r2, r3
 800d056:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d05a:	647b      	str	r3, [r7, #68]	; 0x44
 800d05c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d05e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d062:	e841 2300 	strex	r3, r2, [r1]
 800d066:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d1e4      	bne.n	800d038 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3308      	adds	r3, #8
 800d074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	e853 3f00 	ldrex	r3, [r3]
 800d07c:	623b      	str	r3, [r7, #32]
   return(result);
 800d07e:	6a3a      	ldr	r2, [r7, #32]
 800d080:	4b54      	ldr	r3, [pc, #336]	; (800d1d4 <HAL_UART_IRQHandler+0x738>)
 800d082:	4013      	ands	r3, r2
 800d084:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	3308      	adds	r3, #8
 800d08e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d092:	633a      	str	r2, [r7, #48]	; 0x30
 800d094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d09a:	e841 2300 	strex	r3, r2, [r1]
 800d09e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1e3      	bne.n	800d06e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2220      	movs	r2, #32
 800d0aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	e853 3f00 	ldrex	r3, [r3]
 800d0c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f023 0310 	bic.w	r3, r3, #16
 800d0ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d0dc:	61fb      	str	r3, [r7, #28]
 800d0de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e0:	69b9      	ldr	r1, [r7, #24]
 800d0e2:	69fa      	ldr	r2, [r7, #28]
 800d0e4:	e841 2300 	strex	r3, r2, [r1]
 800d0e8:	617b      	str	r3, [r7, #20]
   return(result);
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1e4      	bne.n	800d0ba <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d0f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f878 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0fc:	e063      	b.n	800d1c6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00e      	beq.n	800d128 <HAL_UART_IRQHandler+0x68c>
 800d10a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d10e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d008      	beq.n	800d128 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d11e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f001 fdbb 	bl	800ec9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d126:	e051      	b.n	800d1cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d12c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d130:	2b00      	cmp	r3, #0
 800d132:	d014      	beq.n	800d15e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d105      	bne.n	800d14c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d008      	beq.n	800d15e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d150:	2b00      	cmp	r3, #0
 800d152:	d03a      	beq.n	800d1ca <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	4798      	blx	r3
    }
    return;
 800d15c:	e035      	b.n	800d1ca <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d166:	2b00      	cmp	r3, #0
 800d168:	d009      	beq.n	800d17e <HAL_UART_IRQHandler+0x6e2>
 800d16a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d172:	2b00      	cmp	r3, #0
 800d174:	d003      	beq.n	800d17e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f001 f908 	bl	800e38c <UART_EndTransmit_IT>
    return;
 800d17c:	e026      	b.n	800d1cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d186:	2b00      	cmp	r3, #0
 800d188:	d009      	beq.n	800d19e <HAL_UART_IRQHandler+0x702>
 800d18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d18e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d192:	2b00      	cmp	r3, #0
 800d194:	d003      	beq.n	800d19e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f001 fd94 	bl	800ecc4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d19c:	e016      	b.n	800d1cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d010      	beq.n	800d1cc <HAL_UART_IRQHandler+0x730>
 800d1aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	da0c      	bge.n	800d1cc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 fd7c 	bl	800ecb0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1b8:	e008      	b.n	800d1cc <HAL_UART_IRQHandler+0x730>
      return;
 800d1ba:	bf00      	nop
 800d1bc:	e006      	b.n	800d1cc <HAL_UART_IRQHandler+0x730>
    return;
 800d1be:	bf00      	nop
 800d1c0:	e004      	b.n	800d1cc <HAL_UART_IRQHandler+0x730>
      return;
 800d1c2:	bf00      	nop
 800d1c4:	e002      	b.n	800d1cc <HAL_UART_IRQHandler+0x730>
      return;
 800d1c6:	bf00      	nop
 800d1c8:	e000      	b.n	800d1cc <HAL_UART_IRQHandler+0x730>
    return;
 800d1ca:	bf00      	nop
  }
}
 800d1cc:	37e8      	adds	r7, #232	; 0xe8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	effffffe 	.word	0xeffffffe

0800d1d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1f8:	bf00      	nop
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d208:	b092      	sub	sp, #72	; 0x48
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d20e:	2300      	movs	r3, #0
 800d210:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	689a      	ldr	r2, [r3, #8]
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	691b      	ldr	r3, [r3, #16]
 800d21c:	431a      	orrs	r2, r3
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	695b      	ldr	r3, [r3, #20]
 800d222:	431a      	orrs	r2, r3
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	69db      	ldr	r3, [r3, #28]
 800d228:	4313      	orrs	r3, r2
 800d22a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4bbe      	ldr	r3, [pc, #760]	; (800d52c <UART_SetConfig+0x328>)
 800d234:	4013      	ands	r3, r2
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	6812      	ldr	r2, [r2, #0]
 800d23a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d23c:	430b      	orrs	r3, r1
 800d23e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	68da      	ldr	r2, [r3, #12]
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	430a      	orrs	r2, r1
 800d254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	699b      	ldr	r3, [r3, #24]
 800d25a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4ab3      	ldr	r2, [pc, #716]	; (800d530 <UART_SetConfig+0x32c>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d004      	beq.n	800d270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	6a1b      	ldr	r3, [r3, #32]
 800d26a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d26c:	4313      	orrs	r3, r2
 800d26e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	689a      	ldr	r2, [r3, #8]
 800d276:	4baf      	ldr	r3, [pc, #700]	; (800d534 <UART_SetConfig+0x330>)
 800d278:	4013      	ands	r3, r2
 800d27a:	697a      	ldr	r2, [r7, #20]
 800d27c:	6812      	ldr	r2, [r2, #0]
 800d27e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d280:	430b      	orrs	r3, r1
 800d282:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28a:	f023 010f 	bic.w	r1, r3, #15
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	430a      	orrs	r2, r1
 800d298:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4aa6      	ldr	r2, [pc, #664]	; (800d538 <UART_SetConfig+0x334>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d177      	bne.n	800d394 <UART_SetConfig+0x190>
 800d2a4:	4ba5      	ldr	r3, [pc, #660]	; (800d53c <UART_SetConfig+0x338>)
 800d2a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d2ac:	2b28      	cmp	r3, #40	; 0x28
 800d2ae:	d86d      	bhi.n	800d38c <UART_SetConfig+0x188>
 800d2b0:	a201      	add	r2, pc, #4	; (adr r2, 800d2b8 <UART_SetConfig+0xb4>)
 800d2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b6:	bf00      	nop
 800d2b8:	0800d35d 	.word	0x0800d35d
 800d2bc:	0800d38d 	.word	0x0800d38d
 800d2c0:	0800d38d 	.word	0x0800d38d
 800d2c4:	0800d38d 	.word	0x0800d38d
 800d2c8:	0800d38d 	.word	0x0800d38d
 800d2cc:	0800d38d 	.word	0x0800d38d
 800d2d0:	0800d38d 	.word	0x0800d38d
 800d2d4:	0800d38d 	.word	0x0800d38d
 800d2d8:	0800d365 	.word	0x0800d365
 800d2dc:	0800d38d 	.word	0x0800d38d
 800d2e0:	0800d38d 	.word	0x0800d38d
 800d2e4:	0800d38d 	.word	0x0800d38d
 800d2e8:	0800d38d 	.word	0x0800d38d
 800d2ec:	0800d38d 	.word	0x0800d38d
 800d2f0:	0800d38d 	.word	0x0800d38d
 800d2f4:	0800d38d 	.word	0x0800d38d
 800d2f8:	0800d36d 	.word	0x0800d36d
 800d2fc:	0800d38d 	.word	0x0800d38d
 800d300:	0800d38d 	.word	0x0800d38d
 800d304:	0800d38d 	.word	0x0800d38d
 800d308:	0800d38d 	.word	0x0800d38d
 800d30c:	0800d38d 	.word	0x0800d38d
 800d310:	0800d38d 	.word	0x0800d38d
 800d314:	0800d38d 	.word	0x0800d38d
 800d318:	0800d375 	.word	0x0800d375
 800d31c:	0800d38d 	.word	0x0800d38d
 800d320:	0800d38d 	.word	0x0800d38d
 800d324:	0800d38d 	.word	0x0800d38d
 800d328:	0800d38d 	.word	0x0800d38d
 800d32c:	0800d38d 	.word	0x0800d38d
 800d330:	0800d38d 	.word	0x0800d38d
 800d334:	0800d38d 	.word	0x0800d38d
 800d338:	0800d37d 	.word	0x0800d37d
 800d33c:	0800d38d 	.word	0x0800d38d
 800d340:	0800d38d 	.word	0x0800d38d
 800d344:	0800d38d 	.word	0x0800d38d
 800d348:	0800d38d 	.word	0x0800d38d
 800d34c:	0800d38d 	.word	0x0800d38d
 800d350:	0800d38d 	.word	0x0800d38d
 800d354:	0800d38d 	.word	0x0800d38d
 800d358:	0800d385 	.word	0x0800d385
 800d35c:	2301      	movs	r3, #1
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d362:	e222      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d364:	2304      	movs	r3, #4
 800d366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d36a:	e21e      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d36c:	2308      	movs	r3, #8
 800d36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d372:	e21a      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d374:	2310      	movs	r3, #16
 800d376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d37a:	e216      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d37c:	2320      	movs	r3, #32
 800d37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d382:	e212      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d384:	2340      	movs	r3, #64	; 0x40
 800d386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d38a:	e20e      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d38c:	2380      	movs	r3, #128	; 0x80
 800d38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d392:	e20a      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a69      	ldr	r2, [pc, #420]	; (800d540 <UART_SetConfig+0x33c>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d130      	bne.n	800d400 <UART_SetConfig+0x1fc>
 800d39e:	4b67      	ldr	r3, [pc, #412]	; (800d53c <UART_SetConfig+0x338>)
 800d3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3a2:	f003 0307 	and.w	r3, r3, #7
 800d3a6:	2b05      	cmp	r3, #5
 800d3a8:	d826      	bhi.n	800d3f8 <UART_SetConfig+0x1f4>
 800d3aa:	a201      	add	r2, pc, #4	; (adr r2, 800d3b0 <UART_SetConfig+0x1ac>)
 800d3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b0:	0800d3c9 	.word	0x0800d3c9
 800d3b4:	0800d3d1 	.word	0x0800d3d1
 800d3b8:	0800d3d9 	.word	0x0800d3d9
 800d3bc:	0800d3e1 	.word	0x0800d3e1
 800d3c0:	0800d3e9 	.word	0x0800d3e9
 800d3c4:	0800d3f1 	.word	0x0800d3f1
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ce:	e1ec      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d3d0:	2304      	movs	r3, #4
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3d6:	e1e8      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d3d8:	2308      	movs	r3, #8
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3de:	e1e4      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d3e0:	2310      	movs	r3, #16
 800d3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e6:	e1e0      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d3e8:	2320      	movs	r3, #32
 800d3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ee:	e1dc      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d3f0:	2340      	movs	r3, #64	; 0x40
 800d3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f6:	e1d8      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d3f8:	2380      	movs	r3, #128	; 0x80
 800d3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fe:	e1d4      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a4f      	ldr	r2, [pc, #316]	; (800d544 <UART_SetConfig+0x340>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d130      	bne.n	800d46c <UART_SetConfig+0x268>
 800d40a:	4b4c      	ldr	r3, [pc, #304]	; (800d53c <UART_SetConfig+0x338>)
 800d40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d40e:	f003 0307 	and.w	r3, r3, #7
 800d412:	2b05      	cmp	r3, #5
 800d414:	d826      	bhi.n	800d464 <UART_SetConfig+0x260>
 800d416:	a201      	add	r2, pc, #4	; (adr r2, 800d41c <UART_SetConfig+0x218>)
 800d418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41c:	0800d435 	.word	0x0800d435
 800d420:	0800d43d 	.word	0x0800d43d
 800d424:	0800d445 	.word	0x0800d445
 800d428:	0800d44d 	.word	0x0800d44d
 800d42c:	0800d455 	.word	0x0800d455
 800d430:	0800d45d 	.word	0x0800d45d
 800d434:	2300      	movs	r3, #0
 800d436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43a:	e1b6      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d43c:	2304      	movs	r3, #4
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d442:	e1b2      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d444:	2308      	movs	r3, #8
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44a:	e1ae      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d44c:	2310      	movs	r3, #16
 800d44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d452:	e1aa      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d454:	2320      	movs	r3, #32
 800d456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45a:	e1a6      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d45c:	2340      	movs	r3, #64	; 0x40
 800d45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d462:	e1a2      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d464:	2380      	movs	r3, #128	; 0x80
 800d466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46a:	e19e      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a35      	ldr	r2, [pc, #212]	; (800d548 <UART_SetConfig+0x344>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d130      	bne.n	800d4d8 <UART_SetConfig+0x2d4>
 800d476:	4b31      	ldr	r3, [pc, #196]	; (800d53c <UART_SetConfig+0x338>)
 800d478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d47a:	f003 0307 	and.w	r3, r3, #7
 800d47e:	2b05      	cmp	r3, #5
 800d480:	d826      	bhi.n	800d4d0 <UART_SetConfig+0x2cc>
 800d482:	a201      	add	r2, pc, #4	; (adr r2, 800d488 <UART_SetConfig+0x284>)
 800d484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d488:	0800d4a1 	.word	0x0800d4a1
 800d48c:	0800d4a9 	.word	0x0800d4a9
 800d490:	0800d4b1 	.word	0x0800d4b1
 800d494:	0800d4b9 	.word	0x0800d4b9
 800d498:	0800d4c1 	.word	0x0800d4c1
 800d49c:	0800d4c9 	.word	0x0800d4c9
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a6:	e180      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d4a8:	2304      	movs	r3, #4
 800d4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ae:	e17c      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d4b0:	2308      	movs	r3, #8
 800d4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b6:	e178      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d4b8:	2310      	movs	r3, #16
 800d4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4be:	e174      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d4c0:	2320      	movs	r3, #32
 800d4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c6:	e170      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d4c8:	2340      	movs	r3, #64	; 0x40
 800d4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ce:	e16c      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d4d0:	2380      	movs	r3, #128	; 0x80
 800d4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d6:	e168      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a1b      	ldr	r2, [pc, #108]	; (800d54c <UART_SetConfig+0x348>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d142      	bne.n	800d568 <UART_SetConfig+0x364>
 800d4e2:	4b16      	ldr	r3, [pc, #88]	; (800d53c <UART_SetConfig+0x338>)
 800d4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4e6:	f003 0307 	and.w	r3, r3, #7
 800d4ea:	2b05      	cmp	r3, #5
 800d4ec:	d838      	bhi.n	800d560 <UART_SetConfig+0x35c>
 800d4ee:	a201      	add	r2, pc, #4	; (adr r2, 800d4f4 <UART_SetConfig+0x2f0>)
 800d4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f4:	0800d50d 	.word	0x0800d50d
 800d4f8:	0800d515 	.word	0x0800d515
 800d4fc:	0800d51d 	.word	0x0800d51d
 800d500:	0800d525 	.word	0x0800d525
 800d504:	0800d551 	.word	0x0800d551
 800d508:	0800d559 	.word	0x0800d559
 800d50c:	2300      	movs	r3, #0
 800d50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d512:	e14a      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d514:	2304      	movs	r3, #4
 800d516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51a:	e146      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d51c:	2308      	movs	r3, #8
 800d51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d522:	e142      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d524:	2310      	movs	r3, #16
 800d526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52a:	e13e      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d52c:	cfff69f3 	.word	0xcfff69f3
 800d530:	58000c00 	.word	0x58000c00
 800d534:	11fff4ff 	.word	0x11fff4ff
 800d538:	40011000 	.word	0x40011000
 800d53c:	58024400 	.word	0x58024400
 800d540:	40004400 	.word	0x40004400
 800d544:	40004800 	.word	0x40004800
 800d548:	40004c00 	.word	0x40004c00
 800d54c:	40005000 	.word	0x40005000
 800d550:	2320      	movs	r3, #32
 800d552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d556:	e128      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d558:	2340      	movs	r3, #64	; 0x40
 800d55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d55e:	e124      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d560:	2380      	movs	r3, #128	; 0x80
 800d562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d566:	e120      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4acb      	ldr	r2, [pc, #812]	; (800d89c <UART_SetConfig+0x698>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d176      	bne.n	800d660 <UART_SetConfig+0x45c>
 800d572:	4bcb      	ldr	r3, [pc, #812]	; (800d8a0 <UART_SetConfig+0x69c>)
 800d574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d57a:	2b28      	cmp	r3, #40	; 0x28
 800d57c:	d86c      	bhi.n	800d658 <UART_SetConfig+0x454>
 800d57e:	a201      	add	r2, pc, #4	; (adr r2, 800d584 <UART_SetConfig+0x380>)
 800d580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d584:	0800d629 	.word	0x0800d629
 800d588:	0800d659 	.word	0x0800d659
 800d58c:	0800d659 	.word	0x0800d659
 800d590:	0800d659 	.word	0x0800d659
 800d594:	0800d659 	.word	0x0800d659
 800d598:	0800d659 	.word	0x0800d659
 800d59c:	0800d659 	.word	0x0800d659
 800d5a0:	0800d659 	.word	0x0800d659
 800d5a4:	0800d631 	.word	0x0800d631
 800d5a8:	0800d659 	.word	0x0800d659
 800d5ac:	0800d659 	.word	0x0800d659
 800d5b0:	0800d659 	.word	0x0800d659
 800d5b4:	0800d659 	.word	0x0800d659
 800d5b8:	0800d659 	.word	0x0800d659
 800d5bc:	0800d659 	.word	0x0800d659
 800d5c0:	0800d659 	.word	0x0800d659
 800d5c4:	0800d639 	.word	0x0800d639
 800d5c8:	0800d659 	.word	0x0800d659
 800d5cc:	0800d659 	.word	0x0800d659
 800d5d0:	0800d659 	.word	0x0800d659
 800d5d4:	0800d659 	.word	0x0800d659
 800d5d8:	0800d659 	.word	0x0800d659
 800d5dc:	0800d659 	.word	0x0800d659
 800d5e0:	0800d659 	.word	0x0800d659
 800d5e4:	0800d641 	.word	0x0800d641
 800d5e8:	0800d659 	.word	0x0800d659
 800d5ec:	0800d659 	.word	0x0800d659
 800d5f0:	0800d659 	.word	0x0800d659
 800d5f4:	0800d659 	.word	0x0800d659
 800d5f8:	0800d659 	.word	0x0800d659
 800d5fc:	0800d659 	.word	0x0800d659
 800d600:	0800d659 	.word	0x0800d659
 800d604:	0800d649 	.word	0x0800d649
 800d608:	0800d659 	.word	0x0800d659
 800d60c:	0800d659 	.word	0x0800d659
 800d610:	0800d659 	.word	0x0800d659
 800d614:	0800d659 	.word	0x0800d659
 800d618:	0800d659 	.word	0x0800d659
 800d61c:	0800d659 	.word	0x0800d659
 800d620:	0800d659 	.word	0x0800d659
 800d624:	0800d651 	.word	0x0800d651
 800d628:	2301      	movs	r3, #1
 800d62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d62e:	e0bc      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d630:	2304      	movs	r3, #4
 800d632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d636:	e0b8      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d638:	2308      	movs	r3, #8
 800d63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d63e:	e0b4      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d640:	2310      	movs	r3, #16
 800d642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d646:	e0b0      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d648:	2320      	movs	r3, #32
 800d64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d64e:	e0ac      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d650:	2340      	movs	r3, #64	; 0x40
 800d652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d656:	e0a8      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d658:	2380      	movs	r3, #128	; 0x80
 800d65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65e:	e0a4      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a8f      	ldr	r2, [pc, #572]	; (800d8a4 <UART_SetConfig+0x6a0>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d130      	bne.n	800d6cc <UART_SetConfig+0x4c8>
 800d66a:	4b8d      	ldr	r3, [pc, #564]	; (800d8a0 <UART_SetConfig+0x69c>)
 800d66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d66e:	f003 0307 	and.w	r3, r3, #7
 800d672:	2b05      	cmp	r3, #5
 800d674:	d826      	bhi.n	800d6c4 <UART_SetConfig+0x4c0>
 800d676:	a201      	add	r2, pc, #4	; (adr r2, 800d67c <UART_SetConfig+0x478>)
 800d678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d67c:	0800d695 	.word	0x0800d695
 800d680:	0800d69d 	.word	0x0800d69d
 800d684:	0800d6a5 	.word	0x0800d6a5
 800d688:	0800d6ad 	.word	0x0800d6ad
 800d68c:	0800d6b5 	.word	0x0800d6b5
 800d690:	0800d6bd 	.word	0x0800d6bd
 800d694:	2300      	movs	r3, #0
 800d696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d69a:	e086      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d69c:	2304      	movs	r3, #4
 800d69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a2:	e082      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d6a4:	2308      	movs	r3, #8
 800d6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6aa:	e07e      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d6ac:	2310      	movs	r3, #16
 800d6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b2:	e07a      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d6b4:	2320      	movs	r3, #32
 800d6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ba:	e076      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d6bc:	2340      	movs	r3, #64	; 0x40
 800d6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c2:	e072      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d6c4:	2380      	movs	r3, #128	; 0x80
 800d6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ca:	e06e      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a75      	ldr	r2, [pc, #468]	; (800d8a8 <UART_SetConfig+0x6a4>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d130      	bne.n	800d738 <UART_SetConfig+0x534>
 800d6d6:	4b72      	ldr	r3, [pc, #456]	; (800d8a0 <UART_SetConfig+0x69c>)
 800d6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6da:	f003 0307 	and.w	r3, r3, #7
 800d6de:	2b05      	cmp	r3, #5
 800d6e0:	d826      	bhi.n	800d730 <UART_SetConfig+0x52c>
 800d6e2:	a201      	add	r2, pc, #4	; (adr r2, 800d6e8 <UART_SetConfig+0x4e4>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d701 	.word	0x0800d701
 800d6ec:	0800d709 	.word	0x0800d709
 800d6f0:	0800d711 	.word	0x0800d711
 800d6f4:	0800d719 	.word	0x0800d719
 800d6f8:	0800d721 	.word	0x0800d721
 800d6fc:	0800d729 	.word	0x0800d729
 800d700:	2300      	movs	r3, #0
 800d702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d706:	e050      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d708:	2304      	movs	r3, #4
 800d70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d70e:	e04c      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d710:	2308      	movs	r3, #8
 800d712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d716:	e048      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d718:	2310      	movs	r3, #16
 800d71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71e:	e044      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d720:	2320      	movs	r3, #32
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d726:	e040      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d728:	2340      	movs	r3, #64	; 0x40
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72e:	e03c      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d730:	2380      	movs	r3, #128	; 0x80
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d736:	e038      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a5b      	ldr	r2, [pc, #364]	; (800d8ac <UART_SetConfig+0x6a8>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d130      	bne.n	800d7a4 <UART_SetConfig+0x5a0>
 800d742:	4b57      	ldr	r3, [pc, #348]	; (800d8a0 <UART_SetConfig+0x69c>)
 800d744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d746:	f003 0307 	and.w	r3, r3, #7
 800d74a:	2b05      	cmp	r3, #5
 800d74c:	d826      	bhi.n	800d79c <UART_SetConfig+0x598>
 800d74e:	a201      	add	r2, pc, #4	; (adr r2, 800d754 <UART_SetConfig+0x550>)
 800d750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d754:	0800d76d 	.word	0x0800d76d
 800d758:	0800d775 	.word	0x0800d775
 800d75c:	0800d77d 	.word	0x0800d77d
 800d760:	0800d785 	.word	0x0800d785
 800d764:	0800d78d 	.word	0x0800d78d
 800d768:	0800d795 	.word	0x0800d795
 800d76c:	2302      	movs	r3, #2
 800d76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d772:	e01a      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d774:	2304      	movs	r3, #4
 800d776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77a:	e016      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d77c:	2308      	movs	r3, #8
 800d77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d782:	e012      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d784:	2310      	movs	r3, #16
 800d786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78a:	e00e      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d78c:	2320      	movs	r3, #32
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d792:	e00a      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d794:	2340      	movs	r3, #64	; 0x40
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79a:	e006      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d79c:	2380      	movs	r3, #128	; 0x80
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a2:	e002      	b.n	800d7aa <UART_SetConfig+0x5a6>
 800d7a4:	2380      	movs	r3, #128	; 0x80
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a3f      	ldr	r2, [pc, #252]	; (800d8ac <UART_SetConfig+0x6a8>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	f040 80f8 	bne.w	800d9a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d7b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d7ba:	2b20      	cmp	r3, #32
 800d7bc:	dc46      	bgt.n	800d84c <UART_SetConfig+0x648>
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	f2c0 8082 	blt.w	800d8c8 <UART_SetConfig+0x6c4>
 800d7c4:	3b02      	subs	r3, #2
 800d7c6:	2b1e      	cmp	r3, #30
 800d7c8:	d87e      	bhi.n	800d8c8 <UART_SetConfig+0x6c4>
 800d7ca:	a201      	add	r2, pc, #4	; (adr r2, 800d7d0 <UART_SetConfig+0x5cc>)
 800d7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d0:	0800d853 	.word	0x0800d853
 800d7d4:	0800d8c9 	.word	0x0800d8c9
 800d7d8:	0800d85b 	.word	0x0800d85b
 800d7dc:	0800d8c9 	.word	0x0800d8c9
 800d7e0:	0800d8c9 	.word	0x0800d8c9
 800d7e4:	0800d8c9 	.word	0x0800d8c9
 800d7e8:	0800d86b 	.word	0x0800d86b
 800d7ec:	0800d8c9 	.word	0x0800d8c9
 800d7f0:	0800d8c9 	.word	0x0800d8c9
 800d7f4:	0800d8c9 	.word	0x0800d8c9
 800d7f8:	0800d8c9 	.word	0x0800d8c9
 800d7fc:	0800d8c9 	.word	0x0800d8c9
 800d800:	0800d8c9 	.word	0x0800d8c9
 800d804:	0800d8c9 	.word	0x0800d8c9
 800d808:	0800d87b 	.word	0x0800d87b
 800d80c:	0800d8c9 	.word	0x0800d8c9
 800d810:	0800d8c9 	.word	0x0800d8c9
 800d814:	0800d8c9 	.word	0x0800d8c9
 800d818:	0800d8c9 	.word	0x0800d8c9
 800d81c:	0800d8c9 	.word	0x0800d8c9
 800d820:	0800d8c9 	.word	0x0800d8c9
 800d824:	0800d8c9 	.word	0x0800d8c9
 800d828:	0800d8c9 	.word	0x0800d8c9
 800d82c:	0800d8c9 	.word	0x0800d8c9
 800d830:	0800d8c9 	.word	0x0800d8c9
 800d834:	0800d8c9 	.word	0x0800d8c9
 800d838:	0800d8c9 	.word	0x0800d8c9
 800d83c:	0800d8c9 	.word	0x0800d8c9
 800d840:	0800d8c9 	.word	0x0800d8c9
 800d844:	0800d8c9 	.word	0x0800d8c9
 800d848:	0800d8bb 	.word	0x0800d8bb
 800d84c:	2b40      	cmp	r3, #64	; 0x40
 800d84e:	d037      	beq.n	800d8c0 <UART_SetConfig+0x6bc>
 800d850:	e03a      	b.n	800d8c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d852:	f7fc fbc9 	bl	8009fe8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d856:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d858:	e03c      	b.n	800d8d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d85a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fc fbd8 	bl	800a014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d868:	e034      	b.n	800d8d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d86a:	f107 0318 	add.w	r3, r7, #24
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fc fd24 	bl	800a2bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d878:	e02c      	b.n	800d8d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d87a:	4b09      	ldr	r3, [pc, #36]	; (800d8a0 <UART_SetConfig+0x69c>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f003 0320 	and.w	r3, r3, #32
 800d882:	2b00      	cmp	r3, #0
 800d884:	d016      	beq.n	800d8b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d886:	4b06      	ldr	r3, [pc, #24]	; (800d8a0 <UART_SetConfig+0x69c>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	08db      	lsrs	r3, r3, #3
 800d88c:	f003 0303 	and.w	r3, r3, #3
 800d890:	4a07      	ldr	r2, [pc, #28]	; (800d8b0 <UART_SetConfig+0x6ac>)
 800d892:	fa22 f303 	lsr.w	r3, r2, r3
 800d896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d898:	e01c      	b.n	800d8d4 <UART_SetConfig+0x6d0>
 800d89a:	bf00      	nop
 800d89c:	40011400 	.word	0x40011400
 800d8a0:	58024400 	.word	0x58024400
 800d8a4:	40007800 	.word	0x40007800
 800d8a8:	40007c00 	.word	0x40007c00
 800d8ac:	58000c00 	.word	0x58000c00
 800d8b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d8b4:	4b9d      	ldr	r3, [pc, #628]	; (800db2c <UART_SetConfig+0x928>)
 800d8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8b8:	e00c      	b.n	800d8d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d8ba:	4b9d      	ldr	r3, [pc, #628]	; (800db30 <UART_SetConfig+0x92c>)
 800d8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8be:	e009      	b.n	800d8d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d8c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8c6:	e005      	b.n	800d8d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d8d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f000 81de 	beq.w	800dc98 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e0:	4a94      	ldr	r2, [pc, #592]	; (800db34 <UART_SetConfig+0x930>)
 800d8e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8ee:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	685a      	ldr	r2, [r3, #4]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	005b      	lsls	r3, r3, #1
 800d8f8:	4413      	add	r3, r2
 800d8fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d305      	bcc.n	800d90c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d908:	429a      	cmp	r2, r3
 800d90a:	d903      	bls.n	800d914 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d90c:	2301      	movs	r3, #1
 800d90e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d912:	e1c1      	b.n	800dc98 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d916:	2200      	movs	r2, #0
 800d918:	60bb      	str	r3, [r7, #8]
 800d91a:	60fa      	str	r2, [r7, #12]
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d920:	4a84      	ldr	r2, [pc, #528]	; (800db34 <UART_SetConfig+0x930>)
 800d922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d926:	b29b      	uxth	r3, r3
 800d928:	2200      	movs	r2, #0
 800d92a:	603b      	str	r3, [r7, #0]
 800d92c:	607a      	str	r2, [r7, #4]
 800d92e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d936:	f7f2 fee7 	bl	8000708 <__aeabi_uldivmod>
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
 800d93e:	4610      	mov	r0, r2
 800d940:	4619      	mov	r1, r3
 800d942:	f04f 0200 	mov.w	r2, #0
 800d946:	f04f 0300 	mov.w	r3, #0
 800d94a:	020b      	lsls	r3, r1, #8
 800d94c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d950:	0202      	lsls	r2, r0, #8
 800d952:	6979      	ldr	r1, [r7, #20]
 800d954:	6849      	ldr	r1, [r1, #4]
 800d956:	0849      	lsrs	r1, r1, #1
 800d958:	2000      	movs	r0, #0
 800d95a:	460c      	mov	r4, r1
 800d95c:	4605      	mov	r5, r0
 800d95e:	eb12 0804 	adds.w	r8, r2, r4
 800d962:	eb43 0905 	adc.w	r9, r3, r5
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	469a      	mov	sl, r3
 800d96e:	4693      	mov	fp, r2
 800d970:	4652      	mov	r2, sl
 800d972:	465b      	mov	r3, fp
 800d974:	4640      	mov	r0, r8
 800d976:	4649      	mov	r1, r9
 800d978:	f7f2 fec6 	bl	8000708 <__aeabi_uldivmod>
 800d97c:	4602      	mov	r2, r0
 800d97e:	460b      	mov	r3, r1
 800d980:	4613      	mov	r3, r2
 800d982:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d98a:	d308      	bcc.n	800d99e <UART_SetConfig+0x79a>
 800d98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d992:	d204      	bcs.n	800d99e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d99a:	60da      	str	r2, [r3, #12]
 800d99c:	e17c      	b.n	800dc98 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d9a4:	e178      	b.n	800dc98 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	69db      	ldr	r3, [r3, #28]
 800d9aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9ae:	f040 80c5 	bne.w	800db3c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d9b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d9b6:	2b20      	cmp	r3, #32
 800d9b8:	dc48      	bgt.n	800da4c <UART_SetConfig+0x848>
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	db7b      	blt.n	800dab6 <UART_SetConfig+0x8b2>
 800d9be:	2b20      	cmp	r3, #32
 800d9c0:	d879      	bhi.n	800dab6 <UART_SetConfig+0x8b2>
 800d9c2:	a201      	add	r2, pc, #4	; (adr r2, 800d9c8 <UART_SetConfig+0x7c4>)
 800d9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c8:	0800da53 	.word	0x0800da53
 800d9cc:	0800da5b 	.word	0x0800da5b
 800d9d0:	0800dab7 	.word	0x0800dab7
 800d9d4:	0800dab7 	.word	0x0800dab7
 800d9d8:	0800da63 	.word	0x0800da63
 800d9dc:	0800dab7 	.word	0x0800dab7
 800d9e0:	0800dab7 	.word	0x0800dab7
 800d9e4:	0800dab7 	.word	0x0800dab7
 800d9e8:	0800da73 	.word	0x0800da73
 800d9ec:	0800dab7 	.word	0x0800dab7
 800d9f0:	0800dab7 	.word	0x0800dab7
 800d9f4:	0800dab7 	.word	0x0800dab7
 800d9f8:	0800dab7 	.word	0x0800dab7
 800d9fc:	0800dab7 	.word	0x0800dab7
 800da00:	0800dab7 	.word	0x0800dab7
 800da04:	0800dab7 	.word	0x0800dab7
 800da08:	0800da83 	.word	0x0800da83
 800da0c:	0800dab7 	.word	0x0800dab7
 800da10:	0800dab7 	.word	0x0800dab7
 800da14:	0800dab7 	.word	0x0800dab7
 800da18:	0800dab7 	.word	0x0800dab7
 800da1c:	0800dab7 	.word	0x0800dab7
 800da20:	0800dab7 	.word	0x0800dab7
 800da24:	0800dab7 	.word	0x0800dab7
 800da28:	0800dab7 	.word	0x0800dab7
 800da2c:	0800dab7 	.word	0x0800dab7
 800da30:	0800dab7 	.word	0x0800dab7
 800da34:	0800dab7 	.word	0x0800dab7
 800da38:	0800dab7 	.word	0x0800dab7
 800da3c:	0800dab7 	.word	0x0800dab7
 800da40:	0800dab7 	.word	0x0800dab7
 800da44:	0800dab7 	.word	0x0800dab7
 800da48:	0800daa9 	.word	0x0800daa9
 800da4c:	2b40      	cmp	r3, #64	; 0x40
 800da4e:	d02e      	beq.n	800daae <UART_SetConfig+0x8aa>
 800da50:	e031      	b.n	800dab6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da52:	f7fb fb57 	bl	8009104 <HAL_RCC_GetPCLK1Freq>
 800da56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da58:	e033      	b.n	800dac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da5a:	f7fb fb69 	bl	8009130 <HAL_RCC_GetPCLK2Freq>
 800da5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da60:	e02f      	b.n	800dac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da66:	4618      	mov	r0, r3
 800da68:	f7fc fad4 	bl	800a014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da70:	e027      	b.n	800dac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da72:	f107 0318 	add.w	r3, r7, #24
 800da76:	4618      	mov	r0, r3
 800da78:	f7fc fc20 	bl	800a2bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da80:	e01f      	b.n	800dac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da82:	4b2d      	ldr	r3, [pc, #180]	; (800db38 <UART_SetConfig+0x934>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f003 0320 	and.w	r3, r3, #32
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d009      	beq.n	800daa2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da8e:	4b2a      	ldr	r3, [pc, #168]	; (800db38 <UART_SetConfig+0x934>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	08db      	lsrs	r3, r3, #3
 800da94:	f003 0303 	and.w	r3, r3, #3
 800da98:	4a24      	ldr	r2, [pc, #144]	; (800db2c <UART_SetConfig+0x928>)
 800da9a:	fa22 f303 	lsr.w	r3, r2, r3
 800da9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800daa0:	e00f      	b.n	800dac2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800daa2:	4b22      	ldr	r3, [pc, #136]	; (800db2c <UART_SetConfig+0x928>)
 800daa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800daa6:	e00c      	b.n	800dac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800daa8:	4b21      	ldr	r3, [pc, #132]	; (800db30 <UART_SetConfig+0x92c>)
 800daaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800daac:	e009      	b.n	800dac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800daae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dab4:	e005      	b.n	800dac2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dab6:	2300      	movs	r3, #0
 800dab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800daba:	2301      	movs	r3, #1
 800dabc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f000 80e7 	beq.w	800dc98 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dace:	4a19      	ldr	r2, [pc, #100]	; (800db34 <UART_SetConfig+0x930>)
 800dad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dad4:	461a      	mov	r2, r3
 800dad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dadc:	005a      	lsls	r2, r3, #1
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	085b      	lsrs	r3, r3, #1
 800dae4:	441a      	add	r2, r3
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	fbb2 f3f3 	udiv	r3, r2, r3
 800daee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800daf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf2:	2b0f      	cmp	r3, #15
 800daf4:	d916      	bls.n	800db24 <UART_SetConfig+0x920>
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dafc:	d212      	bcs.n	800db24 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db00:	b29b      	uxth	r3, r3
 800db02:	f023 030f 	bic.w	r3, r3, #15
 800db06:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0a:	085b      	lsrs	r3, r3, #1
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	f003 0307 	and.w	r3, r3, #7
 800db12:	b29a      	uxth	r2, r3
 800db14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800db16:	4313      	orrs	r3, r2
 800db18:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800db20:	60da      	str	r2, [r3, #12]
 800db22:	e0b9      	b.n	800dc98 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800db2a:	e0b5      	b.n	800dc98 <UART_SetConfig+0xa94>
 800db2c:	03d09000 	.word	0x03d09000
 800db30:	003d0900 	.word	0x003d0900
 800db34:	08012648 	.word	0x08012648
 800db38:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800db3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800db40:	2b20      	cmp	r3, #32
 800db42:	dc49      	bgt.n	800dbd8 <UART_SetConfig+0x9d4>
 800db44:	2b00      	cmp	r3, #0
 800db46:	db7c      	blt.n	800dc42 <UART_SetConfig+0xa3e>
 800db48:	2b20      	cmp	r3, #32
 800db4a:	d87a      	bhi.n	800dc42 <UART_SetConfig+0xa3e>
 800db4c:	a201      	add	r2, pc, #4	; (adr r2, 800db54 <UART_SetConfig+0x950>)
 800db4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db52:	bf00      	nop
 800db54:	0800dbdf 	.word	0x0800dbdf
 800db58:	0800dbe7 	.word	0x0800dbe7
 800db5c:	0800dc43 	.word	0x0800dc43
 800db60:	0800dc43 	.word	0x0800dc43
 800db64:	0800dbef 	.word	0x0800dbef
 800db68:	0800dc43 	.word	0x0800dc43
 800db6c:	0800dc43 	.word	0x0800dc43
 800db70:	0800dc43 	.word	0x0800dc43
 800db74:	0800dbff 	.word	0x0800dbff
 800db78:	0800dc43 	.word	0x0800dc43
 800db7c:	0800dc43 	.word	0x0800dc43
 800db80:	0800dc43 	.word	0x0800dc43
 800db84:	0800dc43 	.word	0x0800dc43
 800db88:	0800dc43 	.word	0x0800dc43
 800db8c:	0800dc43 	.word	0x0800dc43
 800db90:	0800dc43 	.word	0x0800dc43
 800db94:	0800dc0f 	.word	0x0800dc0f
 800db98:	0800dc43 	.word	0x0800dc43
 800db9c:	0800dc43 	.word	0x0800dc43
 800dba0:	0800dc43 	.word	0x0800dc43
 800dba4:	0800dc43 	.word	0x0800dc43
 800dba8:	0800dc43 	.word	0x0800dc43
 800dbac:	0800dc43 	.word	0x0800dc43
 800dbb0:	0800dc43 	.word	0x0800dc43
 800dbb4:	0800dc43 	.word	0x0800dc43
 800dbb8:	0800dc43 	.word	0x0800dc43
 800dbbc:	0800dc43 	.word	0x0800dc43
 800dbc0:	0800dc43 	.word	0x0800dc43
 800dbc4:	0800dc43 	.word	0x0800dc43
 800dbc8:	0800dc43 	.word	0x0800dc43
 800dbcc:	0800dc43 	.word	0x0800dc43
 800dbd0:	0800dc43 	.word	0x0800dc43
 800dbd4:	0800dc35 	.word	0x0800dc35
 800dbd8:	2b40      	cmp	r3, #64	; 0x40
 800dbda:	d02e      	beq.n	800dc3a <UART_SetConfig+0xa36>
 800dbdc:	e031      	b.n	800dc42 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dbde:	f7fb fa91 	bl	8009104 <HAL_RCC_GetPCLK1Freq>
 800dbe2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dbe4:	e033      	b.n	800dc4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dbe6:	f7fb faa3 	bl	8009130 <HAL_RCC_GetPCLK2Freq>
 800dbea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dbec:	e02f      	b.n	800dc4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fc fa0e 	bl	800a014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbfc:	e027      	b.n	800dc4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbfe:	f107 0318 	add.w	r3, r7, #24
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fc fb5a 	bl	800a2bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc0c:	e01f      	b.n	800dc4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc0e:	4b2d      	ldr	r3, [pc, #180]	; (800dcc4 <UART_SetConfig+0xac0>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f003 0320 	and.w	r3, r3, #32
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d009      	beq.n	800dc2e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc1a:	4b2a      	ldr	r3, [pc, #168]	; (800dcc4 <UART_SetConfig+0xac0>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	08db      	lsrs	r3, r3, #3
 800dc20:	f003 0303 	and.w	r3, r3, #3
 800dc24:	4a28      	ldr	r2, [pc, #160]	; (800dcc8 <UART_SetConfig+0xac4>)
 800dc26:	fa22 f303 	lsr.w	r3, r2, r3
 800dc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc2c:	e00f      	b.n	800dc4e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dc2e:	4b26      	ldr	r3, [pc, #152]	; (800dcc8 <UART_SetConfig+0xac4>)
 800dc30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc32:	e00c      	b.n	800dc4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc34:	4b25      	ldr	r3, [pc, #148]	; (800dccc <UART_SetConfig+0xac8>)
 800dc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc38:	e009      	b.n	800dc4e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc40:	e005      	b.n	800dc4e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dc42:	2300      	movs	r3, #0
 800dc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dc46:	2301      	movs	r3, #1
 800dc48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dc4c:	bf00      	nop
    }

    if (pclk != 0U)
 800dc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d021      	beq.n	800dc98 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc58:	4a1d      	ldr	r2, [pc, #116]	; (800dcd0 <UART_SetConfig+0xacc>)
 800dc5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc62:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	085b      	lsrs	r3, r3, #1
 800dc6c:	441a      	add	r2, r3
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	2b0f      	cmp	r3, #15
 800dc7c:	d909      	bls.n	800dc92 <UART_SetConfig+0xa8e>
 800dc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc84:	d205      	bcs.n	800dc92 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	60da      	str	r2, [r3, #12]
 800dc90:	e002      	b.n	800dc98 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dc92:	2301      	movs	r3, #1
 800dc94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	2201      	movs	r2, #1
 800dca4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dcb4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3748      	adds	r7, #72	; 0x48
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dcc2:	bf00      	nop
 800dcc4:	58024400 	.word	0x58024400
 800dcc8:	03d09000 	.word	0x03d09000
 800dccc:	003d0900 	.word	0x003d0900
 800dcd0:	08012648 	.word	0x08012648

0800dcd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00a      	beq.n	800dcfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	430a      	orrs	r2, r1
 800dcfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd02:	f003 0302 	and.w	r3, r3, #2
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00a      	beq.n	800dd20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	430a      	orrs	r2, r1
 800dd1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd24:	f003 0304 	and.w	r3, r3, #4
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00a      	beq.n	800dd42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	430a      	orrs	r2, r1
 800dd40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd46:	f003 0308 	and.w	r3, r3, #8
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00a      	beq.n	800dd64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	430a      	orrs	r2, r1
 800dd62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd68:	f003 0310 	and.w	r3, r3, #16
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00a      	beq.n	800dd86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	430a      	orrs	r2, r1
 800dd84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd8a:	f003 0320 	and.w	r3, r3, #32
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00a      	beq.n	800dda8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	430a      	orrs	r2, r1
 800dda6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d01a      	beq.n	800ddea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	430a      	orrs	r2, r1
 800ddc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddd2:	d10a      	bne.n	800ddea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	430a      	orrs	r2, r1
 800dde8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d00a      	beq.n	800de0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	430a      	orrs	r2, r1
 800de0a:	605a      	str	r2, [r3, #4]
  }
}
 800de0c:	bf00      	nop
 800de0e:	370c      	adds	r7, #12
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af02      	add	r7, sp, #8
 800de1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800de28:	f7f9 f8c6 	bl	8006fb8 <HAL_GetTick>
 800de2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 0308 	and.w	r3, r3, #8
 800de38:	2b08      	cmp	r3, #8
 800de3a:	d10e      	bne.n	800de5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2200      	movs	r2, #0
 800de46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f82f 	bl	800deae <UART_WaitOnFlagUntilTimeout>
 800de50:	4603      	mov	r3, r0
 800de52:	2b00      	cmp	r3, #0
 800de54:	d001      	beq.n	800de5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de56:	2303      	movs	r3, #3
 800de58:	e025      	b.n	800dea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f003 0304 	and.w	r3, r3, #4
 800de64:	2b04      	cmp	r3, #4
 800de66:	d10e      	bne.n	800de86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2200      	movs	r2, #0
 800de72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 f819 	bl	800deae <UART_WaitOnFlagUntilTimeout>
 800de7c:	4603      	mov	r3, r0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d001      	beq.n	800de86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de82:	2303      	movs	r3, #3
 800de84:	e00f      	b.n	800dea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2220      	movs	r2, #32
 800de8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2220      	movs	r2, #32
 800de92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2200      	movs	r2, #0
 800de9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b09c      	sub	sp, #112	; 0x70
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	60f8      	str	r0, [r7, #12]
 800deb6:	60b9      	str	r1, [r7, #8]
 800deb8:	603b      	str	r3, [r7, #0]
 800deba:	4613      	mov	r3, r2
 800debc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800debe:	e0a9      	b.n	800e014 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec6:	f000 80a5 	beq.w	800e014 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800deca:	f7f9 f875 	bl	8006fb8 <HAL_GetTick>
 800dece:	4602      	mov	r2, r0
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	1ad3      	subs	r3, r2, r3
 800ded4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d302      	bcc.n	800dee0 <UART_WaitOnFlagUntilTimeout+0x32>
 800deda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d140      	bne.n	800df62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dee8:	e853 3f00 	ldrex	r3, [r3]
 800deec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800deee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800def0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800def4:	667b      	str	r3, [r7, #100]	; 0x64
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	461a      	mov	r2, r3
 800defc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800defe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df06:	e841 2300 	strex	r3, r2, [r1]
 800df0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800df0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1e6      	bne.n	800dee0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3308      	adds	r3, #8
 800df18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df1c:	e853 3f00 	ldrex	r3, [r3]
 800df20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	f023 0301 	bic.w	r3, r3, #1
 800df28:	663b      	str	r3, [r7, #96]	; 0x60
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	3308      	adds	r3, #8
 800df30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df32:	64ba      	str	r2, [r7, #72]	; 0x48
 800df34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df3a:	e841 2300 	strex	r3, r2, [r1]
 800df3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800df40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1e5      	bne.n	800df12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2220      	movs	r2, #32
 800df4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2220      	movs	r2, #32
 800df52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2200      	movs	r2, #0
 800df5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800df5e:	2303      	movs	r3, #3
 800df60:	e069      	b.n	800e036 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f003 0304 	and.w	r3, r3, #4
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d051      	beq.n	800e014 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	69db      	ldr	r3, [r3, #28]
 800df76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df7e:	d149      	bne.n	800e014 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df92:	e853 3f00 	ldrex	r3, [r3]
 800df96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800df9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfa8:	637b      	str	r3, [r7, #52]	; 0x34
 800dfaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfb0:	e841 2300 	strex	r3, r2, [r1]
 800dfb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1e6      	bne.n	800df8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	3308      	adds	r3, #8
 800dfc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	e853 3f00 	ldrex	r3, [r3]
 800dfca:	613b      	str	r3, [r7, #16]
   return(result);
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	f023 0301 	bic.w	r3, r3, #1
 800dfd2:	66bb      	str	r3, [r7, #104]	; 0x68
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	3308      	adds	r3, #8
 800dfda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dfdc:	623a      	str	r2, [r7, #32]
 800dfde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe0:	69f9      	ldr	r1, [r7, #28]
 800dfe2:	6a3a      	ldr	r2, [r7, #32]
 800dfe4:	e841 2300 	strex	r3, r2, [r1]
 800dfe8:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1e5      	bne.n	800dfbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2220      	movs	r2, #32
 800dff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2220      	movs	r2, #32
 800dffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2220      	movs	r2, #32
 800e004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2200      	movs	r2, #0
 800e00c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e010:	2303      	movs	r3, #3
 800e012:	e010      	b.n	800e036 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	69da      	ldr	r2, [r3, #28]
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	4013      	ands	r3, r2
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	429a      	cmp	r2, r3
 800e022:	bf0c      	ite	eq
 800e024:	2301      	moveq	r3, #1
 800e026:	2300      	movne	r3, #0
 800e028:	b2db      	uxtb	r3, r3
 800e02a:	461a      	mov	r2, r3
 800e02c:	79fb      	ldrb	r3, [r7, #7]
 800e02e:	429a      	cmp	r2, r3
 800e030:	f43f af46 	beq.w	800dec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3770      	adds	r7, #112	; 0x70
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
	...

0800e040 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e040:	b480      	push	{r7}
 800e042:	b0a3      	sub	sp, #140	; 0x8c
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	4613      	mov	r3, r2
 800e04c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	68ba      	ldr	r2, [r7, #8]
 800e052:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	88fa      	ldrh	r2, [r7, #6]
 800e058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	88fa      	ldrh	r2, [r7, #6]
 800e060:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2200      	movs	r2, #0
 800e068:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e072:	d10e      	bne.n	800e092 <UART_Start_Receive_IT+0x52>
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	691b      	ldr	r3, [r3, #16]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d105      	bne.n	800e088 <UART_Start_Receive_IT+0x48>
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e082:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e086:	e02d      	b.n	800e0e4 <UART_Start_Receive_IT+0xa4>
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	22ff      	movs	r2, #255	; 0xff
 800e08c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e090:	e028      	b.n	800e0e4 <UART_Start_Receive_IT+0xa4>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	689b      	ldr	r3, [r3, #8]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d10d      	bne.n	800e0b6 <UART_Start_Receive_IT+0x76>
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	691b      	ldr	r3, [r3, #16]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d104      	bne.n	800e0ac <UART_Start_Receive_IT+0x6c>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	22ff      	movs	r2, #255	; 0xff
 800e0a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e0aa:	e01b      	b.n	800e0e4 <UART_Start_Receive_IT+0xa4>
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	227f      	movs	r2, #127	; 0x7f
 800e0b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e0b4:	e016      	b.n	800e0e4 <UART_Start_Receive_IT+0xa4>
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e0be:	d10d      	bne.n	800e0dc <UART_Start_Receive_IT+0x9c>
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d104      	bne.n	800e0d2 <UART_Start_Receive_IT+0x92>
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	227f      	movs	r2, #127	; 0x7f
 800e0cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e0d0:	e008      	b.n	800e0e4 <UART_Start_Receive_IT+0xa4>
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	223f      	movs	r2, #63	; 0x3f
 800e0d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e0da:	e003      	b.n	800e0e4 <UART_Start_Receive_IT+0xa4>
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2222      	movs	r2, #34	; 0x22
 800e0f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	3308      	adds	r3, #8
 800e0fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0fe:	e853 3f00 	ldrex	r3, [r3]
 800e102:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e106:	f043 0301 	orr.w	r3, r3, #1
 800e10a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	3308      	adds	r3, #8
 800e114:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e118:	673a      	str	r2, [r7, #112]	; 0x70
 800e11a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e11c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e11e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e120:	e841 2300 	strex	r3, r2, [r1]
 800e124:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1e3      	bne.n	800e0f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e134:	d153      	bne.n	800e1de <UART_Start_Receive_IT+0x19e>
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e13c:	88fa      	ldrh	r2, [r7, #6]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d34d      	bcc.n	800e1de <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	689b      	ldr	r3, [r3, #8]
 800e146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e14a:	d107      	bne.n	800e15c <UART_Start_Receive_IT+0x11c>
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	691b      	ldr	r3, [r3, #16]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d103      	bne.n	800e15c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	4a4b      	ldr	r2, [pc, #300]	; (800e284 <UART_Start_Receive_IT+0x244>)
 800e158:	671a      	str	r2, [r3, #112]	; 0x70
 800e15a:	e002      	b.n	800e162 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	4a4a      	ldr	r2, [pc, #296]	; (800e288 <UART_Start_Receive_IT+0x248>)
 800e160:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d01a      	beq.n	800e1a8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e17a:	e853 3f00 	ldrex	r3, [r3]
 800e17e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	461a      	mov	r2, r3
 800e190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e194:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e196:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e198:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e19a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e19c:	e841 2300 	strex	r3, r2, [r1]
 800e1a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e1a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d1e4      	bne.n	800e172 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	3308      	adds	r3, #8
 800e1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1b2:	e853 3f00 	ldrex	r3, [r3]
 800e1b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3308      	adds	r3, #8
 800e1c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e1c8:	64ba      	str	r2, [r7, #72]	; 0x48
 800e1ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1d0:	e841 2300 	strex	r3, r2, [r1]
 800e1d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d1e5      	bne.n	800e1a8 <UART_Start_Receive_IT+0x168>
 800e1dc:	e04a      	b.n	800e274 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1e6:	d107      	bne.n	800e1f8 <UART_Start_Receive_IT+0x1b8>
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	691b      	ldr	r3, [r3, #16]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d103      	bne.n	800e1f8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	4a26      	ldr	r2, [pc, #152]	; (800e28c <UART_Start_Receive_IT+0x24c>)
 800e1f4:	671a      	str	r2, [r3, #112]	; 0x70
 800e1f6:	e002      	b.n	800e1fe <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	4a25      	ldr	r2, [pc, #148]	; (800e290 <UART_Start_Receive_IT+0x250>)
 800e1fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2200      	movs	r2, #0
 800e202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	691b      	ldr	r3, [r3, #16]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d019      	beq.n	800e242 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e216:	e853 3f00 	ldrex	r3, [r3]
 800e21a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e222:	677b      	str	r3, [r7, #116]	; 0x74
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	461a      	mov	r2, r3
 800e22a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e22c:	637b      	str	r3, [r7, #52]	; 0x34
 800e22e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e234:	e841 2300 	strex	r3, r2, [r1]
 800e238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1e6      	bne.n	800e20e <UART_Start_Receive_IT+0x1ce>
 800e240:	e018      	b.n	800e274 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	e853 3f00 	ldrex	r3, [r3]
 800e24e:	613b      	str	r3, [r7, #16]
   return(result);
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	f043 0320 	orr.w	r3, r3, #32
 800e256:	67bb      	str	r3, [r7, #120]	; 0x78
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	461a      	mov	r2, r3
 800e25e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e260:	623b      	str	r3, [r7, #32]
 800e262:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e264:	69f9      	ldr	r1, [r7, #28]
 800e266:	6a3a      	ldr	r2, [r7, #32]
 800e268:	e841 2300 	strex	r3, r2, [r1]
 800e26c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d1e6      	bne.n	800e242 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	378c      	adds	r7, #140	; 0x8c
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	0800e99d 	.word	0x0800e99d
 800e288:	0800e6a5 	.word	0x0800e6a5
 800e28c:	0800e543 	.word	0x0800e543
 800e290:	0800e3e3 	.word	0x0800e3e3

0800e294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e294:	b480      	push	{r7}
 800e296:	b095      	sub	sp, #84	; 0x54
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2a4:	e853 3f00 	ldrex	r3, [r3]
 800e2a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2ba:	643b      	str	r3, [r7, #64]	; 0x40
 800e2bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e2c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e2c2:	e841 2300 	strex	r3, r2, [r1]
 800e2c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d1e6      	bne.n	800e29c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3308      	adds	r3, #8
 800e2d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d6:	6a3b      	ldr	r3, [r7, #32]
 800e2d8:	e853 3f00 	ldrex	r3, [r3]
 800e2dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2de:	69fa      	ldr	r2, [r7, #28]
 800e2e0:	4b1e      	ldr	r3, [pc, #120]	; (800e35c <UART_EndRxTransfer+0xc8>)
 800e2e2:	4013      	ands	r3, r2
 800e2e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	3308      	adds	r3, #8
 800e2ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e2f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2f6:	e841 2300 	strex	r3, r2, [r1]
 800e2fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1e5      	bne.n	800e2ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e306:	2b01      	cmp	r3, #1
 800e308:	d118      	bne.n	800e33c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	e853 3f00 	ldrex	r3, [r3]
 800e316:	60bb      	str	r3, [r7, #8]
   return(result);
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	f023 0310 	bic.w	r3, r3, #16
 800e31e:	647b      	str	r3, [r7, #68]	; 0x44
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	461a      	mov	r2, r3
 800e326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e328:	61bb      	str	r3, [r7, #24]
 800e32a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e32c:	6979      	ldr	r1, [r7, #20]
 800e32e:	69ba      	ldr	r2, [r7, #24]
 800e330:	e841 2300 	strex	r3, r2, [r1]
 800e334:	613b      	str	r3, [r7, #16]
   return(result);
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d1e6      	bne.n	800e30a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2220      	movs	r2, #32
 800e340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2200      	movs	r2, #0
 800e348:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2200      	movs	r2, #0
 800e34e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e350:	bf00      	nop
 800e352:	3754      	adds	r7, #84	; 0x54
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr
 800e35c:	effffffe 	.word	0xeffffffe

0800e360 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e36c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2200      	movs	r2, #0
 800e372:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2200      	movs	r2, #0
 800e37a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e37e:	68f8      	ldr	r0, [r7, #12]
 800e380:	f7fe ff2a 	bl	800d1d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e384:	bf00      	nop
 800e386:	3710      	adds	r7, #16
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b088      	sub	sp, #32
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	e853 3f00 	ldrex	r3, [r3]
 800e3a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3a8:	61fb      	str	r3, [r7, #28]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	61bb      	str	r3, [r7, #24]
 800e3b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b6:	6979      	ldr	r1, [r7, #20]
 800e3b8:	69ba      	ldr	r2, [r7, #24]
 800e3ba:	e841 2300 	strex	r3, r2, [r1]
 800e3be:	613b      	str	r3, [r7, #16]
   return(result);
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1e6      	bne.n	800e394 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2220      	movs	r2, #32
 800e3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f7f4 ff3f 	bl	8003258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3da:	bf00      	nop
 800e3dc:	3720      	adds	r7, #32
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b096      	sub	sp, #88	; 0x58
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3fa:	2b22      	cmp	r3, #34	; 0x22
 800e3fc:	f040 8095 	bne.w	800e52a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e406:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e40a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e40e:	b2d9      	uxtb	r1, r3
 800e410:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e414:	b2da      	uxtb	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e41a:	400a      	ands	r2, r1
 800e41c:	b2d2      	uxtb	r2, r2
 800e41e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e424:	1c5a      	adds	r2, r3, #1
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e430:	b29b      	uxth	r3, r3
 800e432:	3b01      	subs	r3, #1
 800e434:	b29a      	uxth	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e442:	b29b      	uxth	r3, r3
 800e444:	2b00      	cmp	r3, #0
 800e446:	d178      	bne.n	800e53a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e450:	e853 3f00 	ldrex	r3, [r3]
 800e454:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e45c:	653b      	str	r3, [r7, #80]	; 0x50
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	461a      	mov	r2, r3
 800e464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e466:	647b      	str	r3, [r7, #68]	; 0x44
 800e468:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e46a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e46c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e46e:	e841 2300 	strex	r3, r2, [r1]
 800e472:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e476:	2b00      	cmp	r3, #0
 800e478:	d1e6      	bne.n	800e448 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3308      	adds	r3, #8
 800e480:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e484:	e853 3f00 	ldrex	r3, [r3]
 800e488:	623b      	str	r3, [r7, #32]
   return(result);
 800e48a:	6a3b      	ldr	r3, [r7, #32]
 800e48c:	f023 0301 	bic.w	r3, r3, #1
 800e490:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3308      	adds	r3, #8
 800e498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e49a:	633a      	str	r2, [r7, #48]	; 0x30
 800e49c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e49e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4a2:	e841 2300 	strex	r3, r2, [r1]
 800e4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d1e5      	bne.n	800e47a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2220      	movs	r2, #32
 800e4b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d12e      	bne.n	800e522 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	e853 3f00 	ldrex	r3, [r3]
 800e4d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f023 0310 	bic.w	r3, r3, #16
 800e4de:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4e8:	61fb      	str	r3, [r7, #28]
 800e4ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ec:	69b9      	ldr	r1, [r7, #24]
 800e4ee:	69fa      	ldr	r2, [r7, #28]
 800e4f0:	e841 2300 	strex	r3, r2, [r1]
 800e4f4:	617b      	str	r3, [r7, #20]
   return(result);
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1e6      	bne.n	800e4ca <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	69db      	ldr	r3, [r3, #28]
 800e502:	f003 0310 	and.w	r3, r3, #16
 800e506:	2b10      	cmp	r3, #16
 800e508:	d103      	bne.n	800e512 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2210      	movs	r2, #16
 800e510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e518:	4619      	mov	r1, r3
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f7fe fe66 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e520:	e00b      	b.n	800e53a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f7f4 fe24 	bl	8003170 <HAL_UART_RxCpltCallback>
}
 800e528:	e007      	b.n	800e53a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	699a      	ldr	r2, [r3, #24]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f042 0208 	orr.w	r2, r2, #8
 800e538:	619a      	str	r2, [r3, #24]
}
 800e53a:	bf00      	nop
 800e53c:	3758      	adds	r7, #88	; 0x58
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e542:	b580      	push	{r7, lr}
 800e544:	b096      	sub	sp, #88	; 0x58
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e550:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e55a:	2b22      	cmp	r3, #34	; 0x22
 800e55c:	f040 8095 	bne.w	800e68a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e566:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e56e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e570:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e574:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e578:	4013      	ands	r3, r2
 800e57a:	b29a      	uxth	r2, r3
 800e57c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e57e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e584:	1c9a      	adds	r2, r3, #2
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e590:	b29b      	uxth	r3, r3
 800e592:	3b01      	subs	r3, #1
 800e594:	b29a      	uxth	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d178      	bne.n	800e69a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5b0:	e853 3f00 	ldrex	r3, [r3]
 800e5b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e5bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5c6:	643b      	str	r3, [r7, #64]	; 0x40
 800e5c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5ce:	e841 2300 	strex	r3, r2, [r1]
 800e5d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1e6      	bne.n	800e5a8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	3308      	adds	r3, #8
 800e5e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e2:	6a3b      	ldr	r3, [r7, #32]
 800e5e4:	e853 3f00 	ldrex	r3, [r3]
 800e5e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	f023 0301 	bic.w	r3, r3, #1
 800e5f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	3308      	adds	r3, #8
 800e5f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e5fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e602:	e841 2300 	strex	r3, r2, [r1]
 800e606:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1e5      	bne.n	800e5da <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2220      	movs	r2, #32
 800e612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2200      	movs	r2, #0
 800e61a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e620:	2b01      	cmp	r3, #1
 800e622:	d12e      	bne.n	800e682 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	e853 3f00 	ldrex	r3, [r3]
 800e636:	60bb      	str	r3, [r7, #8]
   return(result);
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	f023 0310 	bic.w	r3, r3, #16
 800e63e:	647b      	str	r3, [r7, #68]	; 0x44
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	461a      	mov	r2, r3
 800e646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e648:	61bb      	str	r3, [r7, #24]
 800e64a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64c:	6979      	ldr	r1, [r7, #20]
 800e64e:	69ba      	ldr	r2, [r7, #24]
 800e650:	e841 2300 	strex	r3, r2, [r1]
 800e654:	613b      	str	r3, [r7, #16]
   return(result);
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d1e6      	bne.n	800e62a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	69db      	ldr	r3, [r3, #28]
 800e662:	f003 0310 	and.w	r3, r3, #16
 800e666:	2b10      	cmp	r3, #16
 800e668:	d103      	bne.n	800e672 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2210      	movs	r2, #16
 800e670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e678:	4619      	mov	r1, r3
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f7fe fdb6 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e680:	e00b      	b.n	800e69a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7f4 fd74 	bl	8003170 <HAL_UART_RxCpltCallback>
}
 800e688:	e007      	b.n	800e69a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	699a      	ldr	r2, [r3, #24]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f042 0208 	orr.w	r2, r2, #8
 800e698:	619a      	str	r2, [r3, #24]
}
 800e69a:	bf00      	nop
 800e69c:	3758      	adds	r7, #88	; 0x58
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
	...

0800e6a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b0a6      	sub	sp, #152	; 0x98
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6b2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	69db      	ldr	r3, [r3, #28]
 800e6bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6da:	2b22      	cmp	r3, #34	; 0x22
 800e6dc:	f040 814d 	bne.w	800e97a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e6e6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6ea:	e0f4      	b.n	800e8d6 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e6f6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e6fa:	b2d9      	uxtb	r1, r3
 800e6fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e700:	b2da      	uxtb	r2, r3
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e706:	400a      	ands	r2, r1
 800e708:	b2d2      	uxtb	r2, r2
 800e70a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e710:	1c5a      	adds	r2, r3, #1
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	3b01      	subs	r3, #1
 800e720:	b29a      	uxth	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	69db      	ldr	r3, [r3, #28]
 800e72e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e732:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e736:	f003 0307 	and.w	r3, r3, #7
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d053      	beq.n	800e7e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e73e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e742:	f003 0301 	and.w	r3, r3, #1
 800e746:	2b00      	cmp	r3, #0
 800e748:	d011      	beq.n	800e76e <UART_RxISR_8BIT_FIFOEN+0xca>
 800e74a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e74e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00b      	beq.n	800e76e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2201      	movs	r2, #1
 800e75c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e764:	f043 0201 	orr.w	r2, r3, #1
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e76e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e772:	f003 0302 	and.w	r3, r3, #2
 800e776:	2b00      	cmp	r3, #0
 800e778:	d011      	beq.n	800e79e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e77a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e77e:	f003 0301 	and.w	r3, r3, #1
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00b      	beq.n	800e79e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2202      	movs	r2, #2
 800e78c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e794:	f043 0204 	orr.w	r2, r3, #4
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e79e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e7a2:	f003 0304 	and.w	r3, r3, #4
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d011      	beq.n	800e7ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e7aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e7ae:	f003 0301 	and.w	r3, r3, #1
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d00b      	beq.n	800e7ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2204      	movs	r2, #4
 800e7bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7c4:	f043 0202 	orr.w	r2, r3, #2
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d006      	beq.n	800e7e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7fe fcfd 	bl	800d1d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d171      	bne.n	800e8d6 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7fa:	e853 3f00 	ldrex	r3, [r3]
 800e7fe:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	461a      	mov	r2, r3
 800e810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e814:	66bb      	str	r3, [r7, #104]	; 0x68
 800e816:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e818:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e81a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e81c:	e841 2300 	strex	r3, r2, [r1]
 800e820:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1e4      	bne.n	800e7f2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	3308      	adds	r3, #8
 800e82e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e832:	e853 3f00 	ldrex	r3, [r3]
 800e836:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e83a:	4b56      	ldr	r3, [pc, #344]	; (800e994 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800e83c:	4013      	ands	r3, r2
 800e83e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	3308      	adds	r3, #8
 800e846:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e848:	657a      	str	r2, [r7, #84]	; 0x54
 800e84a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e84c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e84e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e850:	e841 2300 	strex	r3, r2, [r1]
 800e854:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d1e5      	bne.n	800e828 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2220      	movs	r2, #32
 800e860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d12e      	bne.n	800e8d0 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e880:	e853 3f00 	ldrex	r3, [r3]
 800e884:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e888:	f023 0310 	bic.w	r3, r3, #16
 800e88c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e896:	643b      	str	r3, [r7, #64]	; 0x40
 800e898:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e89c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e89e:	e841 2300 	strex	r3, r2, [r1]
 800e8a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1e6      	bne.n	800e878 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	69db      	ldr	r3, [r3, #28]
 800e8b0:	f003 0310 	and.w	r3, r3, #16
 800e8b4:	2b10      	cmp	r3, #16
 800e8b6:	d103      	bne.n	800e8c0 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2210      	movs	r2, #16
 800e8be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7fe fc8f 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
 800e8ce:	e002      	b.n	800e8d6 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f7f4 fc4d 	bl	8003170 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e8d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d006      	beq.n	800e8ec <UART_RxISR_8BIT_FIFOEN+0x248>
 800e8de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e8e2:	f003 0320 	and.w	r3, r3, #32
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f47f af00 	bne.w	800e6ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e8f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e8f6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d045      	beq.n	800e98a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e904:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e908:	429a      	cmp	r2, r3
 800e90a:	d23e      	bcs.n	800e98a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	3308      	adds	r3, #8
 800e912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e914:	6a3b      	ldr	r3, [r7, #32]
 800e916:	e853 3f00 	ldrex	r3, [r3]
 800e91a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e922:	673b      	str	r3, [r7, #112]	; 0x70
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	3308      	adds	r3, #8
 800e92a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e92c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e92e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e934:	e841 2300 	strex	r3, r2, [r1]
 800e938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d1e5      	bne.n	800e90c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4a15      	ldr	r2, [pc, #84]	; (800e998 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e944:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	e853 3f00 	ldrex	r3, [r3]
 800e952:	60bb      	str	r3, [r7, #8]
   return(result);
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	f043 0320 	orr.w	r3, r3, #32
 800e95a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	461a      	mov	r2, r3
 800e962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e964:	61bb      	str	r3, [r7, #24]
 800e966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e968:	6979      	ldr	r1, [r7, #20]
 800e96a:	69ba      	ldr	r2, [r7, #24]
 800e96c:	e841 2300 	strex	r3, r2, [r1]
 800e970:	613b      	str	r3, [r7, #16]
   return(result);
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1e6      	bne.n	800e946 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e978:	e007      	b.n	800e98a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	699a      	ldr	r2, [r3, #24]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f042 0208 	orr.w	r2, r2, #8
 800e988:	619a      	str	r2, [r3, #24]
}
 800e98a:	bf00      	nop
 800e98c:	3798      	adds	r7, #152	; 0x98
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	effffffe 	.word	0xeffffffe
 800e998:	0800e3e3 	.word	0x0800e3e3

0800e99c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b0a8      	sub	sp, #160	; 0xa0
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e9aa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	69db      	ldr	r3, [r3, #28]
 800e9b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9d2:	2b22      	cmp	r3, #34	; 0x22
 800e9d4:	f040 8151 	bne.w	800ec7a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e9de:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e9e2:	e0f8      	b.n	800ebd6 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e9f6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e9fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e9fe:	4013      	ands	r3, r2
 800ea00:	b29a      	uxth	r2, r3
 800ea02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ea06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea0c:	1c9a      	adds	r2, r3, #2
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	69db      	ldr	r3, [r3, #28]
 800ea2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ea2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea32:	f003 0307 	and.w	r3, r3, #7
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d053      	beq.n	800eae2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ea3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea3e:	f003 0301 	and.w	r3, r3, #1
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d011      	beq.n	800ea6a <UART_RxISR_16BIT_FIFOEN+0xce>
 800ea46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00b      	beq.n	800ea6a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	2201      	movs	r2, #1
 800ea58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea60:	f043 0201 	orr.w	r2, r3, #1
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea6e:	f003 0302 	and.w	r3, r3, #2
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d011      	beq.n	800ea9a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ea76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ea7a:	f003 0301 	and.w	r3, r3, #1
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d00b      	beq.n	800ea9a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2202      	movs	r2, #2
 800ea88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea90:	f043 0204 	orr.w	r2, r3, #4
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea9e:	f003 0304 	and.w	r3, r3, #4
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d011      	beq.n	800eaca <UART_RxISR_16BIT_FIFOEN+0x12e>
 800eaa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800eaaa:	f003 0301 	and.w	r3, r3, #1
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00b      	beq.n	800eaca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	2204      	movs	r2, #4
 800eab8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eac0:	f043 0202 	orr.w	r2, r3, #2
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d006      	beq.n	800eae2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f7fe fb7f 	bl	800d1d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2200      	movs	r2, #0
 800eade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d173      	bne.n	800ebd6 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eaf6:	e853 3f00 	ldrex	r3, [r3]
 800eafa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eafc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eafe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eb10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eb12:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eb16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eb18:	e841 2300 	strex	r3, r2, [r1]
 800eb1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eb1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d1e4      	bne.n	800eaee <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	3308      	adds	r3, #8
 800eb2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb2e:	e853 3f00 	ldrex	r3, [r3]
 800eb32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eb34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb36:	4b57      	ldr	r3, [pc, #348]	; (800ec94 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800eb38:	4013      	ands	r3, r2
 800eb3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	3308      	adds	r3, #8
 800eb44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eb48:	65ba      	str	r2, [r7, #88]	; 0x58
 800eb4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eb4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb50:	e841 2300 	strex	r3, r2, [r1]
 800eb54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eb56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1e3      	bne.n	800eb24 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2220      	movs	r2, #32
 800eb60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d12e      	bne.n	800ebd0 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb80:	e853 3f00 	ldrex	r3, [r3]
 800eb84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb88:	f023 0310 	bic.w	r3, r3, #16
 800eb8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	461a      	mov	r2, r3
 800eb94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb96:	647b      	str	r3, [r7, #68]	; 0x44
 800eb98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb9e:	e841 2300 	strex	r3, r2, [r1]
 800eba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1e6      	bne.n	800eb78 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	69db      	ldr	r3, [r3, #28]
 800ebb0:	f003 0310 	and.w	r3, r3, #16
 800ebb4:	2b10      	cmp	r3, #16
 800ebb6:	d103      	bne.n	800ebc0 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2210      	movs	r2, #16
 800ebbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f7fe fb0f 	bl	800d1ec <HAL_UARTEx_RxEventCallback>
 800ebce:	e002      	b.n	800ebd6 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f7f4 facd 	bl	8003170 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ebd6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d006      	beq.n	800ebec <UART_RxISR_16BIT_FIFOEN+0x250>
 800ebde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ebe2:	f003 0320 	and.w	r3, r3, #32
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f47f aefc 	bne.w	800e9e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebf2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ebf6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d045      	beq.n	800ec8a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ec04:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d23e      	bcs.n	800ec8a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	3308      	adds	r3, #8
 800ec12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec16:	e853 3f00 	ldrex	r3, [r3]
 800ec1a:	623b      	str	r3, [r7, #32]
   return(result);
 800ec1c:	6a3b      	ldr	r3, [r7, #32]
 800ec1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ec22:	677b      	str	r3, [r7, #116]	; 0x74
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	3308      	adds	r3, #8
 800ec2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ec2c:	633a      	str	r2, [r7, #48]	; 0x30
 800ec2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec34:	e841 2300 	strex	r3, r2, [r1]
 800ec38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d1e5      	bne.n	800ec0c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	4a15      	ldr	r2, [pc, #84]	; (800ec98 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ec44:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	e853 3f00 	ldrex	r3, [r3]
 800ec52:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f043 0320 	orr.w	r3, r3, #32
 800ec5a:	673b      	str	r3, [r7, #112]	; 0x70
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	461a      	mov	r2, r3
 800ec62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ec64:	61fb      	str	r3, [r7, #28]
 800ec66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec68:	69b9      	ldr	r1, [r7, #24]
 800ec6a:	69fa      	ldr	r2, [r7, #28]
 800ec6c:	e841 2300 	strex	r3, r2, [r1]
 800ec70:	617b      	str	r3, [r7, #20]
   return(result);
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1e6      	bne.n	800ec46 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ec78:	e007      	b.n	800ec8a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	699a      	ldr	r2, [r3, #24]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f042 0208 	orr.w	r2, r2, #8
 800ec88:	619a      	str	r2, [r3, #24]
}
 800ec8a:	bf00      	nop
 800ec8c:	37a0      	adds	r7, #160	; 0xa0
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	effffffe 	.word	0xeffffffe
 800ec98:	0800e543 	.word	0x0800e543

0800ec9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eca4:	bf00      	nop
 800eca6:	370c      	adds	r7, #12
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eccc:	bf00      	nop
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d101      	bne.n	800ecee <HAL_UARTEx_DisableFifoMode+0x16>
 800ecea:	2302      	movs	r3, #2
 800ecec:	e027      	b.n	800ed3e <HAL_UARTEx_DisableFifoMode+0x66>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2224      	movs	r2, #36	; 0x24
 800ecfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f022 0201 	bic.w	r2, r2, #1
 800ed14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ed1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2200      	movs	r2, #0
 800ed22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2220      	movs	r2, #32
 800ed30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2200      	movs	r2, #0
 800ed38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed3c:	2300      	movs	r3, #0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3714      	adds	r7, #20
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr

0800ed4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed4a:	b580      	push	{r7, lr}
 800ed4c:	b084      	sub	sp, #16
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	6078      	str	r0, [r7, #4]
 800ed52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d101      	bne.n	800ed62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ed5e:	2302      	movs	r3, #2
 800ed60:	e02d      	b.n	800edbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2201      	movs	r2, #1
 800ed66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2224      	movs	r2, #36	; 0x24
 800ed6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f022 0201 	bic.w	r2, r2, #1
 800ed88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	683a      	ldr	r2, [r7, #0]
 800ed9a:	430a      	orrs	r2, r1
 800ed9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 f850 	bl	800ee44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2220      	movs	r2, #32
 800edb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b084      	sub	sp, #16
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d101      	bne.n	800edde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800edda:	2302      	movs	r3, #2
 800eddc:	e02d      	b.n	800ee3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2201      	movs	r2, #1
 800ede2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2224      	movs	r2, #36	; 0x24
 800edea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f022 0201 	bic.w	r2, r2, #1
 800ee04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	683a      	ldr	r2, [r7, #0]
 800ee16:	430a      	orrs	r2, r1
 800ee18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 f812 	bl	800ee44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2220      	movs	r2, #32
 800ee2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee38:	2300      	movs	r3, #0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
	...

0800ee44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b085      	sub	sp, #20
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d108      	bne.n	800ee66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2201      	movs	r2, #1
 800ee58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2201      	movs	r2, #1
 800ee60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ee64:	e031      	b.n	800eeca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ee66:	2310      	movs	r3, #16
 800ee68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ee6a:	2310      	movs	r3, #16
 800ee6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	0e5b      	lsrs	r3, r3, #25
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	f003 0307 	and.w	r3, r3, #7
 800ee7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	689b      	ldr	r3, [r3, #8]
 800ee84:	0f5b      	lsrs	r3, r3, #29
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	f003 0307 	and.w	r3, r3, #7
 800ee8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee8e:	7bbb      	ldrb	r3, [r7, #14]
 800ee90:	7b3a      	ldrb	r2, [r7, #12]
 800ee92:	4911      	ldr	r1, [pc, #68]	; (800eed8 <UARTEx_SetNbDataToProcess+0x94>)
 800ee94:	5c8a      	ldrb	r2, [r1, r2]
 800ee96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee9a:	7b3a      	ldrb	r2, [r7, #12]
 800ee9c:	490f      	ldr	r1, [pc, #60]	; (800eedc <UARTEx_SetNbDataToProcess+0x98>)
 800ee9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eea0:	fb93 f3f2 	sdiv	r3, r3, r2
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eeac:	7bfb      	ldrb	r3, [r7, #15]
 800eeae:	7b7a      	ldrb	r2, [r7, #13]
 800eeb0:	4909      	ldr	r1, [pc, #36]	; (800eed8 <UARTEx_SetNbDataToProcess+0x94>)
 800eeb2:	5c8a      	ldrb	r2, [r1, r2]
 800eeb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eeb8:	7b7a      	ldrb	r2, [r7, #13]
 800eeba:	4908      	ldr	r1, [pc, #32]	; (800eedc <UARTEx_SetNbDataToProcess+0x98>)
 800eebc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eebe:	fb93 f3f2 	sdiv	r3, r3, r2
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800eeca:	bf00      	nop
 800eecc:	3714      	adds	r7, #20
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	08012660 	.word	0x08012660
 800eedc:	08012668 	.word	0x08012668

0800eee0 <__errno>:
 800eee0:	4b01      	ldr	r3, [pc, #4]	; (800eee8 <__errno+0x8>)
 800eee2:	6818      	ldr	r0, [r3, #0]
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	240000b0 	.word	0x240000b0

0800eeec <__libc_init_array>:
 800eeec:	b570      	push	{r4, r5, r6, lr}
 800eeee:	4d0d      	ldr	r5, [pc, #52]	; (800ef24 <__libc_init_array+0x38>)
 800eef0:	4c0d      	ldr	r4, [pc, #52]	; (800ef28 <__libc_init_array+0x3c>)
 800eef2:	1b64      	subs	r4, r4, r5
 800eef4:	10a4      	asrs	r4, r4, #2
 800eef6:	2600      	movs	r6, #0
 800eef8:	42a6      	cmp	r6, r4
 800eefa:	d109      	bne.n	800ef10 <__libc_init_array+0x24>
 800eefc:	4d0b      	ldr	r5, [pc, #44]	; (800ef2c <__libc_init_array+0x40>)
 800eefe:	4c0c      	ldr	r4, [pc, #48]	; (800ef30 <__libc_init_array+0x44>)
 800ef00:	f003 fae8 	bl	80124d4 <_init>
 800ef04:	1b64      	subs	r4, r4, r5
 800ef06:	10a4      	asrs	r4, r4, #2
 800ef08:	2600      	movs	r6, #0
 800ef0a:	42a6      	cmp	r6, r4
 800ef0c:	d105      	bne.n	800ef1a <__libc_init_array+0x2e>
 800ef0e:	bd70      	pop	{r4, r5, r6, pc}
 800ef10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef14:	4798      	blx	r3
 800ef16:	3601      	adds	r6, #1
 800ef18:	e7ee      	b.n	800eef8 <__libc_init_array+0xc>
 800ef1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef1e:	4798      	blx	r3
 800ef20:	3601      	adds	r6, #1
 800ef22:	e7f2      	b.n	800ef0a <__libc_init_array+0x1e>
 800ef24:	08014360 	.word	0x08014360
 800ef28:	08014360 	.word	0x08014360
 800ef2c:	08014360 	.word	0x08014360
 800ef30:	08014364 	.word	0x08014364

0800ef34 <memcpy>:
 800ef34:	440a      	add	r2, r1
 800ef36:	4291      	cmp	r1, r2
 800ef38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef3c:	d100      	bne.n	800ef40 <memcpy+0xc>
 800ef3e:	4770      	bx	lr
 800ef40:	b510      	push	{r4, lr}
 800ef42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef4a:	4291      	cmp	r1, r2
 800ef4c:	d1f9      	bne.n	800ef42 <memcpy+0xe>
 800ef4e:	bd10      	pop	{r4, pc}

0800ef50 <memset>:
 800ef50:	4402      	add	r2, r0
 800ef52:	4603      	mov	r3, r0
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d100      	bne.n	800ef5a <memset+0xa>
 800ef58:	4770      	bx	lr
 800ef5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ef5e:	e7f9      	b.n	800ef54 <memset+0x4>

0800ef60 <sulp>:
 800ef60:	b570      	push	{r4, r5, r6, lr}
 800ef62:	4604      	mov	r4, r0
 800ef64:	460d      	mov	r5, r1
 800ef66:	4616      	mov	r6, r2
 800ef68:	ec45 4b10 	vmov	d0, r4, r5
 800ef6c:	f001 fcca 	bl	8010904 <__ulp>
 800ef70:	b17e      	cbz	r6, 800ef92 <sulp+0x32>
 800ef72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ef76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	dd09      	ble.n	800ef92 <sulp+0x32>
 800ef7e:	051b      	lsls	r3, r3, #20
 800ef80:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ef84:	2000      	movs	r0, #0
 800ef86:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ef8a:	ec41 0b17 	vmov	d7, r0, r1
 800ef8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ef92:	bd70      	pop	{r4, r5, r6, pc}
 800ef94:	0000      	movs	r0, r0
	...

0800ef98 <_strtod_l>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	ed2d 8b0e 	vpush	{d8-d14}
 800efa0:	b097      	sub	sp, #92	; 0x5c
 800efa2:	461f      	mov	r7, r3
 800efa4:	2300      	movs	r3, #0
 800efa6:	9312      	str	r3, [sp, #72]	; 0x48
 800efa8:	4ba1      	ldr	r3, [pc, #644]	; (800f230 <_strtod_l+0x298>)
 800efaa:	920d      	str	r2, [sp, #52]	; 0x34
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	9307      	str	r3, [sp, #28]
 800efb0:	4604      	mov	r4, r0
 800efb2:	4618      	mov	r0, r3
 800efb4:	468b      	mov	fp, r1
 800efb6:	f7f1 f993 	bl	80002e0 <strlen>
 800efba:	f04f 0800 	mov.w	r8, #0
 800efbe:	4605      	mov	r5, r0
 800efc0:	f04f 0900 	mov.w	r9, #0
 800efc4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800efc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efca:	7813      	ldrb	r3, [r2, #0]
 800efcc:	2b2b      	cmp	r3, #43	; 0x2b
 800efce:	d04d      	beq.n	800f06c <_strtod_l+0xd4>
 800efd0:	d83a      	bhi.n	800f048 <_strtod_l+0xb0>
 800efd2:	2b0d      	cmp	r3, #13
 800efd4:	d833      	bhi.n	800f03e <_strtod_l+0xa6>
 800efd6:	2b08      	cmp	r3, #8
 800efd8:	d833      	bhi.n	800f042 <_strtod_l+0xaa>
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d03d      	beq.n	800f05a <_strtod_l+0xc2>
 800efde:	2300      	movs	r3, #0
 800efe0:	9308      	str	r3, [sp, #32]
 800efe2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800efe4:	7833      	ldrb	r3, [r6, #0]
 800efe6:	2b30      	cmp	r3, #48	; 0x30
 800efe8:	f040 80b0 	bne.w	800f14c <_strtod_l+0x1b4>
 800efec:	7873      	ldrb	r3, [r6, #1]
 800efee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eff2:	2b58      	cmp	r3, #88	; 0x58
 800eff4:	d167      	bne.n	800f0c6 <_strtod_l+0x12e>
 800eff6:	9b08      	ldr	r3, [sp, #32]
 800eff8:	9301      	str	r3, [sp, #4]
 800effa:	ab12      	add	r3, sp, #72	; 0x48
 800effc:	9702      	str	r7, [sp, #8]
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	4a8c      	ldr	r2, [pc, #560]	; (800f234 <_strtod_l+0x29c>)
 800f002:	ab13      	add	r3, sp, #76	; 0x4c
 800f004:	a911      	add	r1, sp, #68	; 0x44
 800f006:	4620      	mov	r0, r4
 800f008:	f000 fdf0 	bl	800fbec <__gethex>
 800f00c:	f010 0507 	ands.w	r5, r0, #7
 800f010:	4607      	mov	r7, r0
 800f012:	d005      	beq.n	800f020 <_strtod_l+0x88>
 800f014:	2d06      	cmp	r5, #6
 800f016:	d12b      	bne.n	800f070 <_strtod_l+0xd8>
 800f018:	3601      	adds	r6, #1
 800f01a:	2300      	movs	r3, #0
 800f01c:	9611      	str	r6, [sp, #68]	; 0x44
 800f01e:	9308      	str	r3, [sp, #32]
 800f020:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f022:	2b00      	cmp	r3, #0
 800f024:	f040 854e 	bne.w	800fac4 <_strtod_l+0xb2c>
 800f028:	9b08      	ldr	r3, [sp, #32]
 800f02a:	b1e3      	cbz	r3, 800f066 <_strtod_l+0xce>
 800f02c:	ec49 8b17 	vmov	d7, r8, r9
 800f030:	eeb1 0b47 	vneg.f64	d0, d7
 800f034:	b017      	add	sp, #92	; 0x5c
 800f036:	ecbd 8b0e 	vpop	{d8-d14}
 800f03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f03e:	2b20      	cmp	r3, #32
 800f040:	d1cd      	bne.n	800efde <_strtod_l+0x46>
 800f042:	3201      	adds	r2, #1
 800f044:	9211      	str	r2, [sp, #68]	; 0x44
 800f046:	e7bf      	b.n	800efc8 <_strtod_l+0x30>
 800f048:	2b2d      	cmp	r3, #45	; 0x2d
 800f04a:	d1c8      	bne.n	800efde <_strtod_l+0x46>
 800f04c:	2301      	movs	r3, #1
 800f04e:	9308      	str	r3, [sp, #32]
 800f050:	1c53      	adds	r3, r2, #1
 800f052:	9311      	str	r3, [sp, #68]	; 0x44
 800f054:	7853      	ldrb	r3, [r2, #1]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1c3      	bne.n	800efe2 <_strtod_l+0x4a>
 800f05a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f05c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f060:	2b00      	cmp	r3, #0
 800f062:	f040 852d 	bne.w	800fac0 <_strtod_l+0xb28>
 800f066:	ec49 8b10 	vmov	d0, r8, r9
 800f06a:	e7e3      	b.n	800f034 <_strtod_l+0x9c>
 800f06c:	2300      	movs	r3, #0
 800f06e:	e7ee      	b.n	800f04e <_strtod_l+0xb6>
 800f070:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f072:	b13a      	cbz	r2, 800f084 <_strtod_l+0xec>
 800f074:	2135      	movs	r1, #53	; 0x35
 800f076:	a814      	add	r0, sp, #80	; 0x50
 800f078:	f001 fd4c 	bl	8010b14 <__copybits>
 800f07c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f07e:	4620      	mov	r0, r4
 800f080:	f001 f90e 	bl	80102a0 <_Bfree>
 800f084:	3d01      	subs	r5, #1
 800f086:	2d04      	cmp	r5, #4
 800f088:	d806      	bhi.n	800f098 <_strtod_l+0x100>
 800f08a:	e8df f005 	tbb	[pc, r5]
 800f08e:	030a      	.short	0x030a
 800f090:	1714      	.short	0x1714
 800f092:	0a          	.byte	0x0a
 800f093:	00          	.byte	0x00
 800f094:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800f098:	073f      	lsls	r7, r7, #28
 800f09a:	d5c1      	bpl.n	800f020 <_strtod_l+0x88>
 800f09c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f0a0:	e7be      	b.n	800f020 <_strtod_l+0x88>
 800f0a2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800f0a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f0a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f0ac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f0b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f0b4:	e7f0      	b.n	800f098 <_strtod_l+0x100>
 800f0b6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800f238 <_strtod_l+0x2a0>
 800f0ba:	e7ed      	b.n	800f098 <_strtod_l+0x100>
 800f0bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f0c0:	f04f 38ff 	mov.w	r8, #4294967295
 800f0c4:	e7e8      	b.n	800f098 <_strtod_l+0x100>
 800f0c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0c8:	1c5a      	adds	r2, r3, #1
 800f0ca:	9211      	str	r2, [sp, #68]	; 0x44
 800f0cc:	785b      	ldrb	r3, [r3, #1]
 800f0ce:	2b30      	cmp	r3, #48	; 0x30
 800f0d0:	d0f9      	beq.n	800f0c6 <_strtod_l+0x12e>
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d0a4      	beq.n	800f020 <_strtod_l+0x88>
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	f04f 0a00 	mov.w	sl, #0
 800f0dc:	9304      	str	r3, [sp, #16]
 800f0de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0e0:	930a      	str	r3, [sp, #40]	; 0x28
 800f0e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f0e6:	f8cd a018 	str.w	sl, [sp, #24]
 800f0ea:	220a      	movs	r2, #10
 800f0ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f0ee:	7807      	ldrb	r7, [r0, #0]
 800f0f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f0f4:	b2d9      	uxtb	r1, r3
 800f0f6:	2909      	cmp	r1, #9
 800f0f8:	d92a      	bls.n	800f150 <_strtod_l+0x1b8>
 800f0fa:	9907      	ldr	r1, [sp, #28]
 800f0fc:	462a      	mov	r2, r5
 800f0fe:	f001 fe0f 	bl	8010d20 <strncmp>
 800f102:	2800      	cmp	r0, #0
 800f104:	d033      	beq.n	800f16e <_strtod_l+0x1d6>
 800f106:	2000      	movs	r0, #0
 800f108:	9b06      	ldr	r3, [sp, #24]
 800f10a:	463a      	mov	r2, r7
 800f10c:	4601      	mov	r1, r0
 800f10e:	4607      	mov	r7, r0
 800f110:	2a65      	cmp	r2, #101	; 0x65
 800f112:	d001      	beq.n	800f118 <_strtod_l+0x180>
 800f114:	2a45      	cmp	r2, #69	; 0x45
 800f116:	d117      	bne.n	800f148 <_strtod_l+0x1b0>
 800f118:	b91b      	cbnz	r3, 800f122 <_strtod_l+0x18a>
 800f11a:	9b04      	ldr	r3, [sp, #16]
 800f11c:	4303      	orrs	r3, r0
 800f11e:	d09c      	beq.n	800f05a <_strtod_l+0xc2>
 800f120:	2300      	movs	r3, #0
 800f122:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f126:	f10b 0201 	add.w	r2, fp, #1
 800f12a:	9211      	str	r2, [sp, #68]	; 0x44
 800f12c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f130:	2a2b      	cmp	r2, #43	; 0x2b
 800f132:	d071      	beq.n	800f218 <_strtod_l+0x280>
 800f134:	2a2d      	cmp	r2, #45	; 0x2d
 800f136:	d077      	beq.n	800f228 <_strtod_l+0x290>
 800f138:	f04f 0e00 	mov.w	lr, #0
 800f13c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f140:	2d09      	cmp	r5, #9
 800f142:	d97f      	bls.n	800f244 <_strtod_l+0x2ac>
 800f144:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f148:	2500      	movs	r5, #0
 800f14a:	e09b      	b.n	800f284 <_strtod_l+0x2ec>
 800f14c:	2300      	movs	r3, #0
 800f14e:	e7c3      	b.n	800f0d8 <_strtod_l+0x140>
 800f150:	9906      	ldr	r1, [sp, #24]
 800f152:	2908      	cmp	r1, #8
 800f154:	bfdd      	ittte	le
 800f156:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f158:	fb02 3301 	mlale	r3, r2, r1, r3
 800f15c:	9309      	strle	r3, [sp, #36]	; 0x24
 800f15e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f162:	9b06      	ldr	r3, [sp, #24]
 800f164:	3001      	adds	r0, #1
 800f166:	3301      	adds	r3, #1
 800f168:	9306      	str	r3, [sp, #24]
 800f16a:	9011      	str	r0, [sp, #68]	; 0x44
 800f16c:	e7be      	b.n	800f0ec <_strtod_l+0x154>
 800f16e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f170:	195a      	adds	r2, r3, r5
 800f172:	9211      	str	r2, [sp, #68]	; 0x44
 800f174:	5d5a      	ldrb	r2, [r3, r5]
 800f176:	9b06      	ldr	r3, [sp, #24]
 800f178:	b3a3      	cbz	r3, 800f1e4 <_strtod_l+0x24c>
 800f17a:	4607      	mov	r7, r0
 800f17c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f180:	2909      	cmp	r1, #9
 800f182:	d912      	bls.n	800f1aa <_strtod_l+0x212>
 800f184:	2101      	movs	r1, #1
 800f186:	e7c3      	b.n	800f110 <_strtod_l+0x178>
 800f188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f18a:	1c5a      	adds	r2, r3, #1
 800f18c:	9211      	str	r2, [sp, #68]	; 0x44
 800f18e:	785a      	ldrb	r2, [r3, #1]
 800f190:	3001      	adds	r0, #1
 800f192:	2a30      	cmp	r2, #48	; 0x30
 800f194:	d0f8      	beq.n	800f188 <_strtod_l+0x1f0>
 800f196:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f19a:	2b08      	cmp	r3, #8
 800f19c:	f200 8497 	bhi.w	800face <_strtod_l+0xb36>
 800f1a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f1a2:	930a      	str	r3, [sp, #40]	; 0x28
 800f1a4:	4607      	mov	r7, r0
 800f1a6:	2000      	movs	r0, #0
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	3a30      	subs	r2, #48	; 0x30
 800f1ac:	f100 0101 	add.w	r1, r0, #1
 800f1b0:	d012      	beq.n	800f1d8 <_strtod_l+0x240>
 800f1b2:	440f      	add	r7, r1
 800f1b4:	eb00 0c03 	add.w	ip, r0, r3
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	250a      	movs	r5, #10
 800f1bc:	4561      	cmp	r1, ip
 800f1be:	d113      	bne.n	800f1e8 <_strtod_l+0x250>
 800f1c0:	1819      	adds	r1, r3, r0
 800f1c2:	2908      	cmp	r1, #8
 800f1c4:	f103 0301 	add.w	r3, r3, #1
 800f1c8:	4403      	add	r3, r0
 800f1ca:	dc1c      	bgt.n	800f206 <_strtod_l+0x26e>
 800f1cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1ce:	210a      	movs	r1, #10
 800f1d0:	fb01 2200 	mla	r2, r1, r0, r2
 800f1d4:	9209      	str	r2, [sp, #36]	; 0x24
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1da:	1c50      	adds	r0, r2, #1
 800f1dc:	9011      	str	r0, [sp, #68]	; 0x44
 800f1de:	7852      	ldrb	r2, [r2, #1]
 800f1e0:	4608      	mov	r0, r1
 800f1e2:	e7cb      	b.n	800f17c <_strtod_l+0x1e4>
 800f1e4:	9806      	ldr	r0, [sp, #24]
 800f1e6:	e7d4      	b.n	800f192 <_strtod_l+0x1fa>
 800f1e8:	2908      	cmp	r1, #8
 800f1ea:	dc04      	bgt.n	800f1f6 <_strtod_l+0x25e>
 800f1ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f1ee:	436e      	muls	r6, r5
 800f1f0:	9609      	str	r6, [sp, #36]	; 0x24
 800f1f2:	3101      	adds	r1, #1
 800f1f4:	e7e2      	b.n	800f1bc <_strtod_l+0x224>
 800f1f6:	f101 0e01 	add.w	lr, r1, #1
 800f1fa:	f1be 0f10 	cmp.w	lr, #16
 800f1fe:	bfd8      	it	le
 800f200:	fb05 fa0a 	mulle.w	sl, r5, sl
 800f204:	e7f5      	b.n	800f1f2 <_strtod_l+0x25a>
 800f206:	2b10      	cmp	r3, #16
 800f208:	bfdc      	itt	le
 800f20a:	210a      	movle	r1, #10
 800f20c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800f210:	e7e1      	b.n	800f1d6 <_strtod_l+0x23e>
 800f212:	2700      	movs	r7, #0
 800f214:	2101      	movs	r1, #1
 800f216:	e780      	b.n	800f11a <_strtod_l+0x182>
 800f218:	f04f 0e00 	mov.w	lr, #0
 800f21c:	f10b 0202 	add.w	r2, fp, #2
 800f220:	9211      	str	r2, [sp, #68]	; 0x44
 800f222:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f226:	e789      	b.n	800f13c <_strtod_l+0x1a4>
 800f228:	f04f 0e01 	mov.w	lr, #1
 800f22c:	e7f6      	b.n	800f21c <_strtod_l+0x284>
 800f22e:	bf00      	nop
 800f230:	08012748 	.word	0x08012748
 800f234:	08012680 	.word	0x08012680
 800f238:	7ff00000 	.word	0x7ff00000
 800f23c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f23e:	1c55      	adds	r5, r2, #1
 800f240:	9511      	str	r5, [sp, #68]	; 0x44
 800f242:	7852      	ldrb	r2, [r2, #1]
 800f244:	2a30      	cmp	r2, #48	; 0x30
 800f246:	d0f9      	beq.n	800f23c <_strtod_l+0x2a4>
 800f248:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800f24c:	2d08      	cmp	r5, #8
 800f24e:	f63f af7b 	bhi.w	800f148 <_strtod_l+0x1b0>
 800f252:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f256:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f258:	9207      	str	r2, [sp, #28]
 800f25a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f25c:	1c55      	adds	r5, r2, #1
 800f25e:	9511      	str	r5, [sp, #68]	; 0x44
 800f260:	7852      	ldrb	r2, [r2, #1]
 800f262:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f266:	2e09      	cmp	r6, #9
 800f268:	d937      	bls.n	800f2da <_strtod_l+0x342>
 800f26a:	9e07      	ldr	r6, [sp, #28]
 800f26c:	1bad      	subs	r5, r5, r6
 800f26e:	2d08      	cmp	r5, #8
 800f270:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f274:	dc02      	bgt.n	800f27c <_strtod_l+0x2e4>
 800f276:	4565      	cmp	r5, ip
 800f278:	bfa8      	it	ge
 800f27a:	4665      	movge	r5, ip
 800f27c:	f1be 0f00 	cmp.w	lr, #0
 800f280:	d000      	beq.n	800f284 <_strtod_l+0x2ec>
 800f282:	426d      	negs	r5, r5
 800f284:	2b00      	cmp	r3, #0
 800f286:	d14d      	bne.n	800f324 <_strtod_l+0x38c>
 800f288:	9b04      	ldr	r3, [sp, #16]
 800f28a:	4303      	orrs	r3, r0
 800f28c:	f47f aec8 	bne.w	800f020 <_strtod_l+0x88>
 800f290:	2900      	cmp	r1, #0
 800f292:	f47f aee2 	bne.w	800f05a <_strtod_l+0xc2>
 800f296:	2a69      	cmp	r2, #105	; 0x69
 800f298:	d027      	beq.n	800f2ea <_strtod_l+0x352>
 800f29a:	dc24      	bgt.n	800f2e6 <_strtod_l+0x34e>
 800f29c:	2a49      	cmp	r2, #73	; 0x49
 800f29e:	d024      	beq.n	800f2ea <_strtod_l+0x352>
 800f2a0:	2a4e      	cmp	r2, #78	; 0x4e
 800f2a2:	f47f aeda 	bne.w	800f05a <_strtod_l+0xc2>
 800f2a6:	4996      	ldr	r1, [pc, #600]	; (800f500 <_strtod_l+0x568>)
 800f2a8:	a811      	add	r0, sp, #68	; 0x44
 800f2aa:	f000 fef7 	bl	801009c <__match>
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	f43f aed3 	beq.w	800f05a <_strtod_l+0xc2>
 800f2b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	2b28      	cmp	r3, #40	; 0x28
 800f2ba:	d12d      	bne.n	800f318 <_strtod_l+0x380>
 800f2bc:	4991      	ldr	r1, [pc, #580]	; (800f504 <_strtod_l+0x56c>)
 800f2be:	aa14      	add	r2, sp, #80	; 0x50
 800f2c0:	a811      	add	r0, sp, #68	; 0x44
 800f2c2:	f000 feff 	bl	80100c4 <__hexnan>
 800f2c6:	2805      	cmp	r0, #5
 800f2c8:	d126      	bne.n	800f318 <_strtod_l+0x380>
 800f2ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2cc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f2d0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f2d4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f2d8:	e6a2      	b.n	800f020 <_strtod_l+0x88>
 800f2da:	250a      	movs	r5, #10
 800f2dc:	fb05 250c 	mla	r5, r5, ip, r2
 800f2e0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f2e4:	e7b9      	b.n	800f25a <_strtod_l+0x2c2>
 800f2e6:	2a6e      	cmp	r2, #110	; 0x6e
 800f2e8:	e7db      	b.n	800f2a2 <_strtod_l+0x30a>
 800f2ea:	4987      	ldr	r1, [pc, #540]	; (800f508 <_strtod_l+0x570>)
 800f2ec:	a811      	add	r0, sp, #68	; 0x44
 800f2ee:	f000 fed5 	bl	801009c <__match>
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	f43f aeb1 	beq.w	800f05a <_strtod_l+0xc2>
 800f2f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2fa:	4984      	ldr	r1, [pc, #528]	; (800f50c <_strtod_l+0x574>)
 800f2fc:	3b01      	subs	r3, #1
 800f2fe:	a811      	add	r0, sp, #68	; 0x44
 800f300:	9311      	str	r3, [sp, #68]	; 0x44
 800f302:	f000 fecb 	bl	801009c <__match>
 800f306:	b910      	cbnz	r0, 800f30e <_strtod_l+0x376>
 800f308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f30a:	3301      	adds	r3, #1
 800f30c:	9311      	str	r3, [sp, #68]	; 0x44
 800f30e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f520 <_strtod_l+0x588>
 800f312:	f04f 0800 	mov.w	r8, #0
 800f316:	e683      	b.n	800f020 <_strtod_l+0x88>
 800f318:	487d      	ldr	r0, [pc, #500]	; (800f510 <_strtod_l+0x578>)
 800f31a:	f001 fce9 	bl	8010cf0 <nan>
 800f31e:	ec59 8b10 	vmov	r8, r9, d0
 800f322:	e67d      	b.n	800f020 <_strtod_l+0x88>
 800f324:	1bea      	subs	r2, r5, r7
 800f326:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f32a:	9207      	str	r2, [sp, #28]
 800f32c:	9a06      	ldr	r2, [sp, #24]
 800f32e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f332:	2a00      	cmp	r2, #0
 800f334:	bf08      	it	eq
 800f336:	461a      	moveq	r2, r3
 800f338:	2b10      	cmp	r3, #16
 800f33a:	9206      	str	r2, [sp, #24]
 800f33c:	461a      	mov	r2, r3
 800f33e:	bfa8      	it	ge
 800f340:	2210      	movge	r2, #16
 800f342:	2b09      	cmp	r3, #9
 800f344:	ec59 8b17 	vmov	r8, r9, d7
 800f348:	dd0c      	ble.n	800f364 <_strtod_l+0x3cc>
 800f34a:	4972      	ldr	r1, [pc, #456]	; (800f514 <_strtod_l+0x57c>)
 800f34c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f350:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f354:	ee06 aa90 	vmov	s13, sl
 800f358:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f35c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f360:	ec59 8b16 	vmov	r8, r9, d6
 800f364:	2b0f      	cmp	r3, #15
 800f366:	dc36      	bgt.n	800f3d6 <_strtod_l+0x43e>
 800f368:	9907      	ldr	r1, [sp, #28]
 800f36a:	2900      	cmp	r1, #0
 800f36c:	f43f ae58 	beq.w	800f020 <_strtod_l+0x88>
 800f370:	dd23      	ble.n	800f3ba <_strtod_l+0x422>
 800f372:	2916      	cmp	r1, #22
 800f374:	dc0b      	bgt.n	800f38e <_strtod_l+0x3f6>
 800f376:	4b67      	ldr	r3, [pc, #412]	; (800f514 <_strtod_l+0x57c>)
 800f378:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f37c:	ed93 7b00 	vldr	d7, [r3]
 800f380:	ec49 8b16 	vmov	d6, r8, r9
 800f384:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f388:	ec59 8b17 	vmov	r8, r9, d7
 800f38c:	e648      	b.n	800f020 <_strtod_l+0x88>
 800f38e:	9807      	ldr	r0, [sp, #28]
 800f390:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f394:	4281      	cmp	r1, r0
 800f396:	db1e      	blt.n	800f3d6 <_strtod_l+0x43e>
 800f398:	4a5e      	ldr	r2, [pc, #376]	; (800f514 <_strtod_l+0x57c>)
 800f39a:	f1c3 030f 	rsb	r3, r3, #15
 800f39e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f3a2:	ed91 7b00 	vldr	d7, [r1]
 800f3a6:	ec49 8b16 	vmov	d6, r8, r9
 800f3aa:	1ac3      	subs	r3, r0, r3
 800f3ac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f3b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f3b4:	ed92 6b00 	vldr	d6, [r2]
 800f3b8:	e7e4      	b.n	800f384 <_strtod_l+0x3ec>
 800f3ba:	9907      	ldr	r1, [sp, #28]
 800f3bc:	3116      	adds	r1, #22
 800f3be:	db0a      	blt.n	800f3d6 <_strtod_l+0x43e>
 800f3c0:	4b54      	ldr	r3, [pc, #336]	; (800f514 <_strtod_l+0x57c>)
 800f3c2:	1b7d      	subs	r5, r7, r5
 800f3c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f3c8:	ed95 7b00 	vldr	d7, [r5]
 800f3cc:	ec49 8b16 	vmov	d6, r8, r9
 800f3d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f3d4:	e7d8      	b.n	800f388 <_strtod_l+0x3f0>
 800f3d6:	9907      	ldr	r1, [sp, #28]
 800f3d8:	1a9a      	subs	r2, r3, r2
 800f3da:	440a      	add	r2, r1
 800f3dc:	2a00      	cmp	r2, #0
 800f3de:	dd6f      	ble.n	800f4c0 <_strtod_l+0x528>
 800f3e0:	f012 000f 	ands.w	r0, r2, #15
 800f3e4:	d00a      	beq.n	800f3fc <_strtod_l+0x464>
 800f3e6:	494b      	ldr	r1, [pc, #300]	; (800f514 <_strtod_l+0x57c>)
 800f3e8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f3ec:	ed91 7b00 	vldr	d7, [r1]
 800f3f0:	ec49 8b16 	vmov	d6, r8, r9
 800f3f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f3f8:	ec59 8b17 	vmov	r8, r9, d7
 800f3fc:	f032 020f 	bics.w	r2, r2, #15
 800f400:	d04f      	beq.n	800f4a2 <_strtod_l+0x50a>
 800f402:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f406:	dd22      	ble.n	800f44e <_strtod_l+0x4b6>
 800f408:	2500      	movs	r5, #0
 800f40a:	462e      	mov	r6, r5
 800f40c:	9506      	str	r5, [sp, #24]
 800f40e:	462f      	mov	r7, r5
 800f410:	2322      	movs	r3, #34	; 0x22
 800f412:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f520 <_strtod_l+0x588>
 800f416:	6023      	str	r3, [r4, #0]
 800f418:	f04f 0800 	mov.w	r8, #0
 800f41c:	9b06      	ldr	r3, [sp, #24]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	f43f adfe 	beq.w	800f020 <_strtod_l+0x88>
 800f424:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f426:	4620      	mov	r0, r4
 800f428:	f000 ff3a 	bl	80102a0 <_Bfree>
 800f42c:	4639      	mov	r1, r7
 800f42e:	4620      	mov	r0, r4
 800f430:	f000 ff36 	bl	80102a0 <_Bfree>
 800f434:	4631      	mov	r1, r6
 800f436:	4620      	mov	r0, r4
 800f438:	f000 ff32 	bl	80102a0 <_Bfree>
 800f43c:	9906      	ldr	r1, [sp, #24]
 800f43e:	4620      	mov	r0, r4
 800f440:	f000 ff2e 	bl	80102a0 <_Bfree>
 800f444:	4629      	mov	r1, r5
 800f446:	4620      	mov	r0, r4
 800f448:	f000 ff2a 	bl	80102a0 <_Bfree>
 800f44c:	e5e8      	b.n	800f020 <_strtod_l+0x88>
 800f44e:	2000      	movs	r0, #0
 800f450:	ec49 8b17 	vmov	d7, r8, r9
 800f454:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f518 <_strtod_l+0x580>
 800f458:	1112      	asrs	r2, r2, #4
 800f45a:	4601      	mov	r1, r0
 800f45c:	2a01      	cmp	r2, #1
 800f45e:	dc23      	bgt.n	800f4a8 <_strtod_l+0x510>
 800f460:	b108      	cbz	r0, 800f466 <_strtod_l+0x4ce>
 800f462:	ec59 8b17 	vmov	r8, r9, d7
 800f466:	4a2c      	ldr	r2, [pc, #176]	; (800f518 <_strtod_l+0x580>)
 800f468:	482c      	ldr	r0, [pc, #176]	; (800f51c <_strtod_l+0x584>)
 800f46a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f46e:	ed92 7b00 	vldr	d7, [r2]
 800f472:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f476:	ec49 8b16 	vmov	d6, r8, r9
 800f47a:	4a29      	ldr	r2, [pc, #164]	; (800f520 <_strtod_l+0x588>)
 800f47c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f480:	ee17 1a90 	vmov	r1, s15
 800f484:	400a      	ands	r2, r1
 800f486:	4282      	cmp	r2, r0
 800f488:	ec59 8b17 	vmov	r8, r9, d7
 800f48c:	d8bc      	bhi.n	800f408 <_strtod_l+0x470>
 800f48e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f492:	4282      	cmp	r2, r0
 800f494:	bf86      	itte	hi
 800f496:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f524 <_strtod_l+0x58c>
 800f49a:	f04f 38ff 	movhi.w	r8, #4294967295
 800f49e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	9204      	str	r2, [sp, #16]
 800f4a6:	e078      	b.n	800f59a <_strtod_l+0x602>
 800f4a8:	07d6      	lsls	r6, r2, #31
 800f4aa:	d504      	bpl.n	800f4b6 <_strtod_l+0x51e>
 800f4ac:	ed9c 6b00 	vldr	d6, [ip]
 800f4b0:	2001      	movs	r0, #1
 800f4b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f4b6:	3101      	adds	r1, #1
 800f4b8:	1052      	asrs	r2, r2, #1
 800f4ba:	f10c 0c08 	add.w	ip, ip, #8
 800f4be:	e7cd      	b.n	800f45c <_strtod_l+0x4c4>
 800f4c0:	d0ef      	beq.n	800f4a2 <_strtod_l+0x50a>
 800f4c2:	4252      	negs	r2, r2
 800f4c4:	f012 000f 	ands.w	r0, r2, #15
 800f4c8:	d00a      	beq.n	800f4e0 <_strtod_l+0x548>
 800f4ca:	4912      	ldr	r1, [pc, #72]	; (800f514 <_strtod_l+0x57c>)
 800f4cc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f4d0:	ed91 7b00 	vldr	d7, [r1]
 800f4d4:	ec49 8b16 	vmov	d6, r8, r9
 800f4d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f4dc:	ec59 8b17 	vmov	r8, r9, d7
 800f4e0:	1112      	asrs	r2, r2, #4
 800f4e2:	d0de      	beq.n	800f4a2 <_strtod_l+0x50a>
 800f4e4:	2a1f      	cmp	r2, #31
 800f4e6:	dd1f      	ble.n	800f528 <_strtod_l+0x590>
 800f4e8:	2500      	movs	r5, #0
 800f4ea:	462e      	mov	r6, r5
 800f4ec:	9506      	str	r5, [sp, #24]
 800f4ee:	462f      	mov	r7, r5
 800f4f0:	2322      	movs	r3, #34	; 0x22
 800f4f2:	f04f 0800 	mov.w	r8, #0
 800f4f6:	f04f 0900 	mov.w	r9, #0
 800f4fa:	6023      	str	r3, [r4, #0]
 800f4fc:	e78e      	b.n	800f41c <_strtod_l+0x484>
 800f4fe:	bf00      	nop
 800f500:	0801267d 	.word	0x0801267d
 800f504:	08012694 	.word	0x08012694
 800f508:	08012674 	.word	0x08012674
 800f50c:	08012677 	.word	0x08012677
 800f510:	08012907 	.word	0x08012907
 800f514:	080127f8 	.word	0x080127f8
 800f518:	080127d0 	.word	0x080127d0
 800f51c:	7ca00000 	.word	0x7ca00000
 800f520:	7ff00000 	.word	0x7ff00000
 800f524:	7fefffff 	.word	0x7fefffff
 800f528:	f012 0110 	ands.w	r1, r2, #16
 800f52c:	bf18      	it	ne
 800f52e:	216a      	movne	r1, #106	; 0x6a
 800f530:	9104      	str	r1, [sp, #16]
 800f532:	ec49 8b17 	vmov	d7, r8, r9
 800f536:	49be      	ldr	r1, [pc, #760]	; (800f830 <_strtod_l+0x898>)
 800f538:	2000      	movs	r0, #0
 800f53a:	07d6      	lsls	r6, r2, #31
 800f53c:	d504      	bpl.n	800f548 <_strtod_l+0x5b0>
 800f53e:	ed91 6b00 	vldr	d6, [r1]
 800f542:	2001      	movs	r0, #1
 800f544:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f548:	1052      	asrs	r2, r2, #1
 800f54a:	f101 0108 	add.w	r1, r1, #8
 800f54e:	d1f4      	bne.n	800f53a <_strtod_l+0x5a2>
 800f550:	b108      	cbz	r0, 800f556 <_strtod_l+0x5be>
 800f552:	ec59 8b17 	vmov	r8, r9, d7
 800f556:	9a04      	ldr	r2, [sp, #16]
 800f558:	b1c2      	cbz	r2, 800f58c <_strtod_l+0x5f4>
 800f55a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f55e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f562:	2a00      	cmp	r2, #0
 800f564:	4648      	mov	r0, r9
 800f566:	dd11      	ble.n	800f58c <_strtod_l+0x5f4>
 800f568:	2a1f      	cmp	r2, #31
 800f56a:	f340 812e 	ble.w	800f7ca <_strtod_l+0x832>
 800f56e:	2a34      	cmp	r2, #52	; 0x34
 800f570:	bfde      	ittt	le
 800f572:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f576:	f04f 32ff 	movle.w	r2, #4294967295
 800f57a:	fa02 f101 	lslle.w	r1, r2, r1
 800f57e:	f04f 0800 	mov.w	r8, #0
 800f582:	bfcc      	ite	gt
 800f584:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f588:	ea01 0900 	andle.w	r9, r1, r0
 800f58c:	ec49 8b17 	vmov	d7, r8, r9
 800f590:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f598:	d0a6      	beq.n	800f4e8 <_strtod_l+0x550>
 800f59a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f59c:	9200      	str	r2, [sp, #0]
 800f59e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f5a0:	9a06      	ldr	r2, [sp, #24]
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	f000 fee4 	bl	8010370 <__s2b>
 800f5a8:	9006      	str	r0, [sp, #24]
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	f43f af2c 	beq.w	800f408 <_strtod_l+0x470>
 800f5b0:	9b07      	ldr	r3, [sp, #28]
 800f5b2:	1b7d      	subs	r5, r7, r5
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	bfb4      	ite	lt
 800f5b8:	462b      	movlt	r3, r5
 800f5ba:	2300      	movge	r3, #0
 800f5bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f5be:	9b07      	ldr	r3, [sp, #28]
 800f5c0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800f810 <_strtod_l+0x878>
 800f5c4:	ed9f ab94 	vldr	d10, [pc, #592]	; 800f818 <_strtod_l+0x880>
 800f5c8:	ed9f bb95 	vldr	d11, [pc, #596]	; 800f820 <_strtod_l+0x888>
 800f5cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f5d0:	2500      	movs	r5, #0
 800f5d2:	930c      	str	r3, [sp, #48]	; 0x30
 800f5d4:	462e      	mov	r6, r5
 800f5d6:	9b06      	ldr	r3, [sp, #24]
 800f5d8:	4620      	mov	r0, r4
 800f5da:	6859      	ldr	r1, [r3, #4]
 800f5dc:	f000 fe20 	bl	8010220 <_Balloc>
 800f5e0:	4607      	mov	r7, r0
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	f43f af14 	beq.w	800f410 <_strtod_l+0x478>
 800f5e8:	9b06      	ldr	r3, [sp, #24]
 800f5ea:	691a      	ldr	r2, [r3, #16]
 800f5ec:	3202      	adds	r2, #2
 800f5ee:	f103 010c 	add.w	r1, r3, #12
 800f5f2:	0092      	lsls	r2, r2, #2
 800f5f4:	300c      	adds	r0, #12
 800f5f6:	f7ff fc9d 	bl	800ef34 <memcpy>
 800f5fa:	ec49 8b10 	vmov	d0, r8, r9
 800f5fe:	aa14      	add	r2, sp, #80	; 0x50
 800f600:	a913      	add	r1, sp, #76	; 0x4c
 800f602:	4620      	mov	r0, r4
 800f604:	f001 f9fa 	bl	80109fc <__d2b>
 800f608:	ec49 8b18 	vmov	d8, r8, r9
 800f60c:	9012      	str	r0, [sp, #72]	; 0x48
 800f60e:	2800      	cmp	r0, #0
 800f610:	f43f aefe 	beq.w	800f410 <_strtod_l+0x478>
 800f614:	2101      	movs	r1, #1
 800f616:	4620      	mov	r0, r4
 800f618:	f000 ff44 	bl	80104a4 <__i2b>
 800f61c:	4606      	mov	r6, r0
 800f61e:	2800      	cmp	r0, #0
 800f620:	f43f aef6 	beq.w	800f410 <_strtod_l+0x478>
 800f624:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f626:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f628:	2b00      	cmp	r3, #0
 800f62a:	bfab      	itete	ge
 800f62c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f62e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f630:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f634:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f638:	bfac      	ite	ge
 800f63a:	eb03 0b02 	addge.w	fp, r3, r2
 800f63e:	eba2 0a03 	sublt.w	sl, r2, r3
 800f642:	9a04      	ldr	r2, [sp, #16]
 800f644:	1a9b      	subs	r3, r3, r2
 800f646:	440b      	add	r3, r1
 800f648:	4a7a      	ldr	r2, [pc, #488]	; (800f834 <_strtod_l+0x89c>)
 800f64a:	3b01      	subs	r3, #1
 800f64c:	4293      	cmp	r3, r2
 800f64e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f652:	f280 80cd 	bge.w	800f7f0 <_strtod_l+0x858>
 800f656:	1ad2      	subs	r2, r2, r3
 800f658:	2a1f      	cmp	r2, #31
 800f65a:	eba1 0102 	sub.w	r1, r1, r2
 800f65e:	f04f 0001 	mov.w	r0, #1
 800f662:	f300 80b9 	bgt.w	800f7d8 <_strtod_l+0x840>
 800f666:	fa00 f302 	lsl.w	r3, r0, r2
 800f66a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f66c:	2300      	movs	r3, #0
 800f66e:	930a      	str	r3, [sp, #40]	; 0x28
 800f670:	eb0b 0301 	add.w	r3, fp, r1
 800f674:	9a04      	ldr	r2, [sp, #16]
 800f676:	459b      	cmp	fp, r3
 800f678:	448a      	add	sl, r1
 800f67a:	4492      	add	sl, r2
 800f67c:	465a      	mov	r2, fp
 800f67e:	bfa8      	it	ge
 800f680:	461a      	movge	r2, r3
 800f682:	4552      	cmp	r2, sl
 800f684:	bfa8      	it	ge
 800f686:	4652      	movge	r2, sl
 800f688:	2a00      	cmp	r2, #0
 800f68a:	bfc2      	ittt	gt
 800f68c:	1a9b      	subgt	r3, r3, r2
 800f68e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f692:	ebab 0b02 	subgt.w	fp, fp, r2
 800f696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f698:	2a00      	cmp	r2, #0
 800f69a:	dd18      	ble.n	800f6ce <_strtod_l+0x736>
 800f69c:	4631      	mov	r1, r6
 800f69e:	4620      	mov	r0, r4
 800f6a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6a2:	f000 ffbf 	bl	8010624 <__pow5mult>
 800f6a6:	4606      	mov	r6, r0
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	f43f aeb1 	beq.w	800f410 <_strtod_l+0x478>
 800f6ae:	4601      	mov	r1, r0
 800f6b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f000 ff0c 	bl	80104d0 <__multiply>
 800f6b8:	900e      	str	r0, [sp, #56]	; 0x38
 800f6ba:	2800      	cmp	r0, #0
 800f6bc:	f43f aea8 	beq.w	800f410 <_strtod_l+0x478>
 800f6c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	f000 fdec 	bl	80102a0 <_Bfree>
 800f6c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6cc:	9212      	str	r2, [sp, #72]	; 0x48
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f300 8093 	bgt.w	800f7fa <_strtod_l+0x862>
 800f6d4:	9b07      	ldr	r3, [sp, #28]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	dd08      	ble.n	800f6ec <_strtod_l+0x754>
 800f6da:	4639      	mov	r1, r7
 800f6dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f000 ffa0 	bl	8010624 <__pow5mult>
 800f6e4:	4607      	mov	r7, r0
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	f43f ae92 	beq.w	800f410 <_strtod_l+0x478>
 800f6ec:	f1ba 0f00 	cmp.w	sl, #0
 800f6f0:	dd08      	ble.n	800f704 <_strtod_l+0x76c>
 800f6f2:	4639      	mov	r1, r7
 800f6f4:	4652      	mov	r2, sl
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 ffee 	bl	80106d8 <__lshift>
 800f6fc:	4607      	mov	r7, r0
 800f6fe:	2800      	cmp	r0, #0
 800f700:	f43f ae86 	beq.w	800f410 <_strtod_l+0x478>
 800f704:	f1bb 0f00 	cmp.w	fp, #0
 800f708:	dd08      	ble.n	800f71c <_strtod_l+0x784>
 800f70a:	4631      	mov	r1, r6
 800f70c:	465a      	mov	r2, fp
 800f70e:	4620      	mov	r0, r4
 800f710:	f000 ffe2 	bl	80106d8 <__lshift>
 800f714:	4606      	mov	r6, r0
 800f716:	2800      	cmp	r0, #0
 800f718:	f43f ae7a 	beq.w	800f410 <_strtod_l+0x478>
 800f71c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f71e:	463a      	mov	r2, r7
 800f720:	4620      	mov	r0, r4
 800f722:	f001 f865 	bl	80107f0 <__mdiff>
 800f726:	4605      	mov	r5, r0
 800f728:	2800      	cmp	r0, #0
 800f72a:	f43f ae71 	beq.w	800f410 <_strtod_l+0x478>
 800f72e:	2300      	movs	r3, #0
 800f730:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f734:	60c3      	str	r3, [r0, #12]
 800f736:	4631      	mov	r1, r6
 800f738:	f001 f83e 	bl	80107b8 <__mcmp>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	da7d      	bge.n	800f83c <_strtod_l+0x8a4>
 800f740:	ea5a 0308 	orrs.w	r3, sl, r8
 800f744:	f040 80a3 	bne.w	800f88e <_strtod_l+0x8f6>
 800f748:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	f040 809e 	bne.w	800f88e <_strtod_l+0x8f6>
 800f752:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f756:	0d1b      	lsrs	r3, r3, #20
 800f758:	051b      	lsls	r3, r3, #20
 800f75a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f75e:	f240 8096 	bls.w	800f88e <_strtod_l+0x8f6>
 800f762:	696b      	ldr	r3, [r5, #20]
 800f764:	b91b      	cbnz	r3, 800f76e <_strtod_l+0x7d6>
 800f766:	692b      	ldr	r3, [r5, #16]
 800f768:	2b01      	cmp	r3, #1
 800f76a:	f340 8090 	ble.w	800f88e <_strtod_l+0x8f6>
 800f76e:	4629      	mov	r1, r5
 800f770:	2201      	movs	r2, #1
 800f772:	4620      	mov	r0, r4
 800f774:	f000 ffb0 	bl	80106d8 <__lshift>
 800f778:	4631      	mov	r1, r6
 800f77a:	4605      	mov	r5, r0
 800f77c:	f001 f81c 	bl	80107b8 <__mcmp>
 800f780:	2800      	cmp	r0, #0
 800f782:	f340 8084 	ble.w	800f88e <_strtod_l+0x8f6>
 800f786:	9904      	ldr	r1, [sp, #16]
 800f788:	4a2b      	ldr	r2, [pc, #172]	; (800f838 <_strtod_l+0x8a0>)
 800f78a:	464b      	mov	r3, r9
 800f78c:	2900      	cmp	r1, #0
 800f78e:	f000 809d 	beq.w	800f8cc <_strtod_l+0x934>
 800f792:	ea02 0109 	and.w	r1, r2, r9
 800f796:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f79a:	f300 8097 	bgt.w	800f8cc <_strtod_l+0x934>
 800f79e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f7a2:	f77f aea5 	ble.w	800f4f0 <_strtod_l+0x558>
 800f7a6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f828 <_strtod_l+0x890>
 800f7aa:	ec49 8b16 	vmov	d6, r8, r9
 800f7ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f7b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f7b6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	bf08      	it	eq
 800f7be:	2322      	moveq	r3, #34	; 0x22
 800f7c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f7c4:	bf08      	it	eq
 800f7c6:	6023      	streq	r3, [r4, #0]
 800f7c8:	e62c      	b.n	800f424 <_strtod_l+0x48c>
 800f7ca:	f04f 31ff 	mov.w	r1, #4294967295
 800f7ce:	fa01 f202 	lsl.w	r2, r1, r2
 800f7d2:	ea02 0808 	and.w	r8, r2, r8
 800f7d6:	e6d9      	b.n	800f58c <_strtod_l+0x5f4>
 800f7d8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800f7dc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f7e0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800f7e4:	33e2      	adds	r3, #226	; 0xe2
 800f7e6:	fa00 f303 	lsl.w	r3, r0, r3
 800f7ea:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800f7ee:	e73f      	b.n	800f670 <_strtod_l+0x6d8>
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f7f8:	e73a      	b.n	800f670 <_strtod_l+0x6d8>
 800f7fa:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	4620      	mov	r0, r4
 800f800:	f000 ff6a 	bl	80106d8 <__lshift>
 800f804:	9012      	str	r0, [sp, #72]	; 0x48
 800f806:	2800      	cmp	r0, #0
 800f808:	f47f af64 	bne.w	800f6d4 <_strtod_l+0x73c>
 800f80c:	e600      	b.n	800f410 <_strtod_l+0x478>
 800f80e:	bf00      	nop
 800f810:	94a03595 	.word	0x94a03595
 800f814:	3fcfffff 	.word	0x3fcfffff
 800f818:	94a03595 	.word	0x94a03595
 800f81c:	3fdfffff 	.word	0x3fdfffff
 800f820:	35afe535 	.word	0x35afe535
 800f824:	3fe00000 	.word	0x3fe00000
 800f828:	00000000 	.word	0x00000000
 800f82c:	39500000 	.word	0x39500000
 800f830:	080126a8 	.word	0x080126a8
 800f834:	fffffc02 	.word	0xfffffc02
 800f838:	7ff00000 	.word	0x7ff00000
 800f83c:	46cb      	mov	fp, r9
 800f83e:	d15f      	bne.n	800f900 <_strtod_l+0x968>
 800f840:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f844:	f1ba 0f00 	cmp.w	sl, #0
 800f848:	d02a      	beq.n	800f8a0 <_strtod_l+0x908>
 800f84a:	4aa7      	ldr	r2, [pc, #668]	; (800fae8 <_strtod_l+0xb50>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d12b      	bne.n	800f8a8 <_strtod_l+0x910>
 800f850:	9b04      	ldr	r3, [sp, #16]
 800f852:	4642      	mov	r2, r8
 800f854:	b1fb      	cbz	r3, 800f896 <_strtod_l+0x8fe>
 800f856:	4ba5      	ldr	r3, [pc, #660]	; (800faec <_strtod_l+0xb54>)
 800f858:	ea09 0303 	and.w	r3, r9, r3
 800f85c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f860:	f04f 31ff 	mov.w	r1, #4294967295
 800f864:	d81a      	bhi.n	800f89c <_strtod_l+0x904>
 800f866:	0d1b      	lsrs	r3, r3, #20
 800f868:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f86c:	fa01 f303 	lsl.w	r3, r1, r3
 800f870:	429a      	cmp	r2, r3
 800f872:	d119      	bne.n	800f8a8 <_strtod_l+0x910>
 800f874:	4b9e      	ldr	r3, [pc, #632]	; (800faf0 <_strtod_l+0xb58>)
 800f876:	459b      	cmp	fp, r3
 800f878:	d102      	bne.n	800f880 <_strtod_l+0x8e8>
 800f87a:	3201      	adds	r2, #1
 800f87c:	f43f adc8 	beq.w	800f410 <_strtod_l+0x478>
 800f880:	4b9a      	ldr	r3, [pc, #616]	; (800faec <_strtod_l+0xb54>)
 800f882:	ea0b 0303 	and.w	r3, fp, r3
 800f886:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f88a:	f04f 0800 	mov.w	r8, #0
 800f88e:	9b04      	ldr	r3, [sp, #16]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d188      	bne.n	800f7a6 <_strtod_l+0x80e>
 800f894:	e5c6      	b.n	800f424 <_strtod_l+0x48c>
 800f896:	f04f 33ff 	mov.w	r3, #4294967295
 800f89a:	e7e9      	b.n	800f870 <_strtod_l+0x8d8>
 800f89c:	460b      	mov	r3, r1
 800f89e:	e7e7      	b.n	800f870 <_strtod_l+0x8d8>
 800f8a0:	ea53 0308 	orrs.w	r3, r3, r8
 800f8a4:	f43f af6f 	beq.w	800f786 <_strtod_l+0x7ee>
 800f8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8aa:	b1cb      	cbz	r3, 800f8e0 <_strtod_l+0x948>
 800f8ac:	ea13 0f0b 	tst.w	r3, fp
 800f8b0:	d0ed      	beq.n	800f88e <_strtod_l+0x8f6>
 800f8b2:	9a04      	ldr	r2, [sp, #16]
 800f8b4:	4640      	mov	r0, r8
 800f8b6:	4649      	mov	r1, r9
 800f8b8:	f1ba 0f00 	cmp.w	sl, #0
 800f8bc:	d014      	beq.n	800f8e8 <_strtod_l+0x950>
 800f8be:	f7ff fb4f 	bl	800ef60 <sulp>
 800f8c2:	ee38 7b00 	vadd.f64	d7, d8, d0
 800f8c6:	ec59 8b17 	vmov	r8, r9, d7
 800f8ca:	e7e0      	b.n	800f88e <_strtod_l+0x8f6>
 800f8cc:	4013      	ands	r3, r2
 800f8ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f8d2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f8d6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f8da:	f04f 38ff 	mov.w	r8, #4294967295
 800f8de:	e7d6      	b.n	800f88e <_strtod_l+0x8f6>
 800f8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8e2:	ea13 0f08 	tst.w	r3, r8
 800f8e6:	e7e3      	b.n	800f8b0 <_strtod_l+0x918>
 800f8e8:	f7ff fb3a 	bl	800ef60 <sulp>
 800f8ec:	ee38 0b40 	vsub.f64	d0, d8, d0
 800f8f0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f8:	ec59 8b10 	vmov	r8, r9, d0
 800f8fc:	d1c7      	bne.n	800f88e <_strtod_l+0x8f6>
 800f8fe:	e5f7      	b.n	800f4f0 <_strtod_l+0x558>
 800f900:	4631      	mov	r1, r6
 800f902:	4628      	mov	r0, r5
 800f904:	f001 f8d6 	bl	8010ab4 <__ratio>
 800f908:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f90c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f914:	d865      	bhi.n	800f9e2 <_strtod_l+0xa4a>
 800f916:	f1ba 0f00 	cmp.w	sl, #0
 800f91a:	d042      	beq.n	800f9a2 <_strtod_l+0xa0a>
 800f91c:	4b75      	ldr	r3, [pc, #468]	; (800faf4 <_strtod_l+0xb5c>)
 800f91e:	2200      	movs	r2, #0
 800f920:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800f924:	4871      	ldr	r0, [pc, #452]	; (800faec <_strtod_l+0xb54>)
 800f926:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800fb00 <_strtod_l+0xb68>
 800f92a:	ea0b 0100 	and.w	r1, fp, r0
 800f92e:	4561      	cmp	r1, ip
 800f930:	f040 808e 	bne.w	800fa50 <_strtod_l+0xab8>
 800f934:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800f938:	ec49 8b10 	vmov	d0, r8, r9
 800f93c:	ec43 2b1c 	vmov	d12, r2, r3
 800f940:	910a      	str	r1, [sp, #40]	; 0x28
 800f942:	f000 ffdf 	bl	8010904 <__ulp>
 800f946:	ec49 8b1e 	vmov	d14, r8, r9
 800f94a:	4868      	ldr	r0, [pc, #416]	; (800faec <_strtod_l+0xb54>)
 800f94c:	eeac eb00 	vfma.f64	d14, d12, d0
 800f950:	ee1e 3a90 	vmov	r3, s29
 800f954:	4a68      	ldr	r2, [pc, #416]	; (800faf8 <_strtod_l+0xb60>)
 800f956:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f958:	4018      	ands	r0, r3
 800f95a:	4290      	cmp	r0, r2
 800f95c:	ec59 8b1e 	vmov	r8, r9, d14
 800f960:	d94e      	bls.n	800fa00 <_strtod_l+0xa68>
 800f962:	ee18 3a90 	vmov	r3, s17
 800f966:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d104      	bne.n	800f978 <_strtod_l+0x9e0>
 800f96e:	ee18 3a10 	vmov	r3, s16
 800f972:	3301      	adds	r3, #1
 800f974:	f43f ad4c 	beq.w	800f410 <_strtod_l+0x478>
 800f978:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800faf0 <_strtod_l+0xb58>
 800f97c:	f04f 38ff 	mov.w	r8, #4294967295
 800f980:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f982:	4620      	mov	r0, r4
 800f984:	f000 fc8c 	bl	80102a0 <_Bfree>
 800f988:	4639      	mov	r1, r7
 800f98a:	4620      	mov	r0, r4
 800f98c:	f000 fc88 	bl	80102a0 <_Bfree>
 800f990:	4631      	mov	r1, r6
 800f992:	4620      	mov	r0, r4
 800f994:	f000 fc84 	bl	80102a0 <_Bfree>
 800f998:	4629      	mov	r1, r5
 800f99a:	4620      	mov	r0, r4
 800f99c:	f000 fc80 	bl	80102a0 <_Bfree>
 800f9a0:	e619      	b.n	800f5d6 <_strtod_l+0x63e>
 800f9a2:	f1b8 0f00 	cmp.w	r8, #0
 800f9a6:	d112      	bne.n	800f9ce <_strtod_l+0xa36>
 800f9a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f9ac:	b9b3      	cbnz	r3, 800f9dc <_strtod_l+0xa44>
 800f9ae:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f9b2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ba:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f9be:	bf58      	it	pl
 800f9c0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800f9c4:	eeb1 7b4d 	vneg.f64	d7, d13
 800f9c8:	ec53 2b17 	vmov	r2, r3, d7
 800f9cc:	e7aa      	b.n	800f924 <_strtod_l+0x98c>
 800f9ce:	f1b8 0f01 	cmp.w	r8, #1
 800f9d2:	d103      	bne.n	800f9dc <_strtod_l+0xa44>
 800f9d4:	f1b9 0f00 	cmp.w	r9, #0
 800f9d8:	f43f ad8a 	beq.w	800f4f0 <_strtod_l+0x558>
 800f9dc:	4b47      	ldr	r3, [pc, #284]	; (800fafc <_strtod_l+0xb64>)
 800f9de:	2200      	movs	r2, #0
 800f9e0:	e79e      	b.n	800f920 <_strtod_l+0x988>
 800f9e2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f9e6:	ee20 db0d 	vmul.f64	d13, d0, d13
 800f9ea:	f1ba 0f00 	cmp.w	sl, #0
 800f9ee:	d104      	bne.n	800f9fa <_strtod_l+0xa62>
 800f9f0:	eeb1 7b4d 	vneg.f64	d7, d13
 800f9f4:	ec53 2b17 	vmov	r2, r3, d7
 800f9f8:	e794      	b.n	800f924 <_strtod_l+0x98c>
 800f9fa:	eeb0 7b4d 	vmov.f64	d7, d13
 800f9fe:	e7f9      	b.n	800f9f4 <_strtod_l+0xa5c>
 800fa00:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fa04:	9b04      	ldr	r3, [sp, #16]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d1ba      	bne.n	800f980 <_strtod_l+0x9e8>
 800fa0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa0e:	0d1b      	lsrs	r3, r3, #20
 800fa10:	051b      	lsls	r3, r3, #20
 800fa12:	4299      	cmp	r1, r3
 800fa14:	d1b4      	bne.n	800f980 <_strtod_l+0x9e8>
 800fa16:	ec51 0b1d 	vmov	r0, r1, d13
 800fa1a:	f7f0 fe8d 	bl	8000738 <__aeabi_d2lz>
 800fa1e:	f7f0 fe45 	bl	80006ac <__aeabi_l2d>
 800fa22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa26:	ec41 0b17 	vmov	d7, r0, r1
 800fa2a:	ea43 0308 	orr.w	r3, r3, r8
 800fa2e:	ea53 030a 	orrs.w	r3, r3, sl
 800fa32:	ee3d db47 	vsub.f64	d13, d13, d7
 800fa36:	d03c      	beq.n	800fab2 <_strtod_l+0xb1a>
 800fa38:	eeb4 dbca 	vcmpe.f64	d13, d10
 800fa3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa40:	f53f acf0 	bmi.w	800f424 <_strtod_l+0x48c>
 800fa44:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800fa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4c:	dd98      	ble.n	800f980 <_strtod_l+0x9e8>
 800fa4e:	e4e9      	b.n	800f424 <_strtod_l+0x48c>
 800fa50:	9804      	ldr	r0, [sp, #16]
 800fa52:	b1f0      	cbz	r0, 800fa92 <_strtod_l+0xafa>
 800fa54:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800fa58:	d81b      	bhi.n	800fa92 <_strtod_l+0xafa>
 800fa5a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fae0 <_strtod_l+0xb48>
 800fa5e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800fa62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa66:	d811      	bhi.n	800fa8c <_strtod_l+0xaf4>
 800fa68:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800fa6c:	ee1d 3a10 	vmov	r3, s26
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	bf38      	it	cc
 800fa74:	2301      	movcc	r3, #1
 800fa76:	ee0d 3a10 	vmov	s26, r3
 800fa7a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800fa7e:	f1ba 0f00 	cmp.w	sl, #0
 800fa82:	d113      	bne.n	800faac <_strtod_l+0xb14>
 800fa84:	eeb1 7b4d 	vneg.f64	d7, d13
 800fa88:	ec53 2b17 	vmov	r2, r3, d7
 800fa8c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800fa90:	1a43      	subs	r3, r0, r1
 800fa92:	eeb0 0b48 	vmov.f64	d0, d8
 800fa96:	ec43 2b1c 	vmov	d12, r2, r3
 800fa9a:	910a      	str	r1, [sp, #40]	; 0x28
 800fa9c:	f000 ff32 	bl	8010904 <__ulp>
 800faa0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800faa2:	eeac 8b00 	vfma.f64	d8, d12, d0
 800faa6:	ec59 8b18 	vmov	r8, r9, d8
 800faaa:	e7ab      	b.n	800fa04 <_strtod_l+0xa6c>
 800faac:	eeb0 7b4d 	vmov.f64	d7, d13
 800fab0:	e7ea      	b.n	800fa88 <_strtod_l+0xaf0>
 800fab2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800fab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faba:	f57f af61 	bpl.w	800f980 <_strtod_l+0x9e8>
 800fabe:	e4b1      	b.n	800f424 <_strtod_l+0x48c>
 800fac0:	2300      	movs	r3, #0
 800fac2:	9308      	str	r3, [sp, #32]
 800fac4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fac8:	6013      	str	r3, [r2, #0]
 800faca:	f7ff baad 	b.w	800f028 <_strtod_l+0x90>
 800face:	2a65      	cmp	r2, #101	; 0x65
 800fad0:	f43f ab9f 	beq.w	800f212 <_strtod_l+0x27a>
 800fad4:	2a45      	cmp	r2, #69	; 0x45
 800fad6:	f43f ab9c 	beq.w	800f212 <_strtod_l+0x27a>
 800fada:	2101      	movs	r1, #1
 800fadc:	f7ff bbd4 	b.w	800f288 <_strtod_l+0x2f0>
 800fae0:	ffc00000 	.word	0xffc00000
 800fae4:	41dfffff 	.word	0x41dfffff
 800fae8:	000fffff 	.word	0x000fffff
 800faec:	7ff00000 	.word	0x7ff00000
 800faf0:	7fefffff 	.word	0x7fefffff
 800faf4:	3ff00000 	.word	0x3ff00000
 800faf8:	7c9fffff 	.word	0x7c9fffff
 800fafc:	bff00000 	.word	0xbff00000
 800fb00:	7fe00000 	.word	0x7fe00000

0800fb04 <strtod>:
 800fb04:	460a      	mov	r2, r1
 800fb06:	4601      	mov	r1, r0
 800fb08:	4802      	ldr	r0, [pc, #8]	; (800fb14 <strtod+0x10>)
 800fb0a:	4b03      	ldr	r3, [pc, #12]	; (800fb18 <strtod+0x14>)
 800fb0c:	6800      	ldr	r0, [r0, #0]
 800fb0e:	f7ff ba43 	b.w	800ef98 <_strtod_l>
 800fb12:	bf00      	nop
 800fb14:	240000b0 	.word	0x240000b0
 800fb18:	24000118 	.word	0x24000118

0800fb1c <rshift>:
 800fb1c:	6903      	ldr	r3, [r0, #16]
 800fb1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fb22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fb2a:	f100 0414 	add.w	r4, r0, #20
 800fb2e:	dd45      	ble.n	800fbbc <rshift+0xa0>
 800fb30:	f011 011f 	ands.w	r1, r1, #31
 800fb34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fb38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fb3c:	d10c      	bne.n	800fb58 <rshift+0x3c>
 800fb3e:	f100 0710 	add.w	r7, r0, #16
 800fb42:	4629      	mov	r1, r5
 800fb44:	42b1      	cmp	r1, r6
 800fb46:	d334      	bcc.n	800fbb2 <rshift+0x96>
 800fb48:	1a9b      	subs	r3, r3, r2
 800fb4a:	009b      	lsls	r3, r3, #2
 800fb4c:	1eea      	subs	r2, r5, #3
 800fb4e:	4296      	cmp	r6, r2
 800fb50:	bf38      	it	cc
 800fb52:	2300      	movcc	r3, #0
 800fb54:	4423      	add	r3, r4
 800fb56:	e015      	b.n	800fb84 <rshift+0x68>
 800fb58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fb5c:	f1c1 0820 	rsb	r8, r1, #32
 800fb60:	40cf      	lsrs	r7, r1
 800fb62:	f105 0e04 	add.w	lr, r5, #4
 800fb66:	46a1      	mov	r9, r4
 800fb68:	4576      	cmp	r6, lr
 800fb6a:	46f4      	mov	ip, lr
 800fb6c:	d815      	bhi.n	800fb9a <rshift+0x7e>
 800fb6e:	1a9a      	subs	r2, r3, r2
 800fb70:	0092      	lsls	r2, r2, #2
 800fb72:	3a04      	subs	r2, #4
 800fb74:	3501      	adds	r5, #1
 800fb76:	42ae      	cmp	r6, r5
 800fb78:	bf38      	it	cc
 800fb7a:	2200      	movcc	r2, #0
 800fb7c:	18a3      	adds	r3, r4, r2
 800fb7e:	50a7      	str	r7, [r4, r2]
 800fb80:	b107      	cbz	r7, 800fb84 <rshift+0x68>
 800fb82:	3304      	adds	r3, #4
 800fb84:	1b1a      	subs	r2, r3, r4
 800fb86:	42a3      	cmp	r3, r4
 800fb88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb8c:	bf08      	it	eq
 800fb8e:	2300      	moveq	r3, #0
 800fb90:	6102      	str	r2, [r0, #16]
 800fb92:	bf08      	it	eq
 800fb94:	6143      	streq	r3, [r0, #20]
 800fb96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb9a:	f8dc c000 	ldr.w	ip, [ip]
 800fb9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800fba2:	ea4c 0707 	orr.w	r7, ip, r7
 800fba6:	f849 7b04 	str.w	r7, [r9], #4
 800fbaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fbae:	40cf      	lsrs	r7, r1
 800fbb0:	e7da      	b.n	800fb68 <rshift+0x4c>
 800fbb2:	f851 cb04 	ldr.w	ip, [r1], #4
 800fbb6:	f847 cf04 	str.w	ip, [r7, #4]!
 800fbba:	e7c3      	b.n	800fb44 <rshift+0x28>
 800fbbc:	4623      	mov	r3, r4
 800fbbe:	e7e1      	b.n	800fb84 <rshift+0x68>

0800fbc0 <__hexdig_fun>:
 800fbc0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fbc4:	2b09      	cmp	r3, #9
 800fbc6:	d802      	bhi.n	800fbce <__hexdig_fun+0xe>
 800fbc8:	3820      	subs	r0, #32
 800fbca:	b2c0      	uxtb	r0, r0
 800fbcc:	4770      	bx	lr
 800fbce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fbd2:	2b05      	cmp	r3, #5
 800fbd4:	d801      	bhi.n	800fbda <__hexdig_fun+0x1a>
 800fbd6:	3847      	subs	r0, #71	; 0x47
 800fbd8:	e7f7      	b.n	800fbca <__hexdig_fun+0xa>
 800fbda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fbde:	2b05      	cmp	r3, #5
 800fbe0:	d801      	bhi.n	800fbe6 <__hexdig_fun+0x26>
 800fbe2:	3827      	subs	r0, #39	; 0x27
 800fbe4:	e7f1      	b.n	800fbca <__hexdig_fun+0xa>
 800fbe6:	2000      	movs	r0, #0
 800fbe8:	4770      	bx	lr
	...

0800fbec <__gethex>:
 800fbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf0:	ed2d 8b02 	vpush	{d8}
 800fbf4:	b089      	sub	sp, #36	; 0x24
 800fbf6:	ee08 0a10 	vmov	s16, r0
 800fbfa:	9304      	str	r3, [sp, #16]
 800fbfc:	4bb4      	ldr	r3, [pc, #720]	; (800fed0 <__gethex+0x2e4>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	9301      	str	r3, [sp, #4]
 800fc02:	4618      	mov	r0, r3
 800fc04:	468b      	mov	fp, r1
 800fc06:	4690      	mov	r8, r2
 800fc08:	f7f0 fb6a 	bl	80002e0 <strlen>
 800fc0c:	9b01      	ldr	r3, [sp, #4]
 800fc0e:	f8db 2000 	ldr.w	r2, [fp]
 800fc12:	4403      	add	r3, r0
 800fc14:	4682      	mov	sl, r0
 800fc16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fc1a:	9305      	str	r3, [sp, #20]
 800fc1c:	1c93      	adds	r3, r2, #2
 800fc1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fc22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fc26:	32fe      	adds	r2, #254	; 0xfe
 800fc28:	18d1      	adds	r1, r2, r3
 800fc2a:	461f      	mov	r7, r3
 800fc2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fc30:	9100      	str	r1, [sp, #0]
 800fc32:	2830      	cmp	r0, #48	; 0x30
 800fc34:	d0f8      	beq.n	800fc28 <__gethex+0x3c>
 800fc36:	f7ff ffc3 	bl	800fbc0 <__hexdig_fun>
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	d13a      	bne.n	800fcb6 <__gethex+0xca>
 800fc40:	9901      	ldr	r1, [sp, #4]
 800fc42:	4652      	mov	r2, sl
 800fc44:	4638      	mov	r0, r7
 800fc46:	f001 f86b 	bl	8010d20 <strncmp>
 800fc4a:	4605      	mov	r5, r0
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d168      	bne.n	800fd22 <__gethex+0x136>
 800fc50:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fc54:	eb07 060a 	add.w	r6, r7, sl
 800fc58:	f7ff ffb2 	bl	800fbc0 <__hexdig_fun>
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	d062      	beq.n	800fd26 <__gethex+0x13a>
 800fc60:	4633      	mov	r3, r6
 800fc62:	7818      	ldrb	r0, [r3, #0]
 800fc64:	2830      	cmp	r0, #48	; 0x30
 800fc66:	461f      	mov	r7, r3
 800fc68:	f103 0301 	add.w	r3, r3, #1
 800fc6c:	d0f9      	beq.n	800fc62 <__gethex+0x76>
 800fc6e:	f7ff ffa7 	bl	800fbc0 <__hexdig_fun>
 800fc72:	2301      	movs	r3, #1
 800fc74:	fab0 f480 	clz	r4, r0
 800fc78:	0964      	lsrs	r4, r4, #5
 800fc7a:	4635      	mov	r5, r6
 800fc7c:	9300      	str	r3, [sp, #0]
 800fc7e:	463a      	mov	r2, r7
 800fc80:	4616      	mov	r6, r2
 800fc82:	3201      	adds	r2, #1
 800fc84:	7830      	ldrb	r0, [r6, #0]
 800fc86:	f7ff ff9b 	bl	800fbc0 <__hexdig_fun>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	d1f8      	bne.n	800fc80 <__gethex+0x94>
 800fc8e:	9901      	ldr	r1, [sp, #4]
 800fc90:	4652      	mov	r2, sl
 800fc92:	4630      	mov	r0, r6
 800fc94:	f001 f844 	bl	8010d20 <strncmp>
 800fc98:	b980      	cbnz	r0, 800fcbc <__gethex+0xd0>
 800fc9a:	b94d      	cbnz	r5, 800fcb0 <__gethex+0xc4>
 800fc9c:	eb06 050a 	add.w	r5, r6, sl
 800fca0:	462a      	mov	r2, r5
 800fca2:	4616      	mov	r6, r2
 800fca4:	3201      	adds	r2, #1
 800fca6:	7830      	ldrb	r0, [r6, #0]
 800fca8:	f7ff ff8a 	bl	800fbc0 <__hexdig_fun>
 800fcac:	2800      	cmp	r0, #0
 800fcae:	d1f8      	bne.n	800fca2 <__gethex+0xb6>
 800fcb0:	1bad      	subs	r5, r5, r6
 800fcb2:	00ad      	lsls	r5, r5, #2
 800fcb4:	e004      	b.n	800fcc0 <__gethex+0xd4>
 800fcb6:	2400      	movs	r4, #0
 800fcb8:	4625      	mov	r5, r4
 800fcba:	e7e0      	b.n	800fc7e <__gethex+0x92>
 800fcbc:	2d00      	cmp	r5, #0
 800fcbe:	d1f7      	bne.n	800fcb0 <__gethex+0xc4>
 800fcc0:	7833      	ldrb	r3, [r6, #0]
 800fcc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fcc6:	2b50      	cmp	r3, #80	; 0x50
 800fcc8:	d13b      	bne.n	800fd42 <__gethex+0x156>
 800fcca:	7873      	ldrb	r3, [r6, #1]
 800fccc:	2b2b      	cmp	r3, #43	; 0x2b
 800fcce:	d02c      	beq.n	800fd2a <__gethex+0x13e>
 800fcd0:	2b2d      	cmp	r3, #45	; 0x2d
 800fcd2:	d02e      	beq.n	800fd32 <__gethex+0x146>
 800fcd4:	1c71      	adds	r1, r6, #1
 800fcd6:	f04f 0900 	mov.w	r9, #0
 800fcda:	7808      	ldrb	r0, [r1, #0]
 800fcdc:	f7ff ff70 	bl	800fbc0 <__hexdig_fun>
 800fce0:	1e43      	subs	r3, r0, #1
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	2b18      	cmp	r3, #24
 800fce6:	d82c      	bhi.n	800fd42 <__gethex+0x156>
 800fce8:	f1a0 0210 	sub.w	r2, r0, #16
 800fcec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fcf0:	f7ff ff66 	bl	800fbc0 <__hexdig_fun>
 800fcf4:	1e43      	subs	r3, r0, #1
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	2b18      	cmp	r3, #24
 800fcfa:	d91d      	bls.n	800fd38 <__gethex+0x14c>
 800fcfc:	f1b9 0f00 	cmp.w	r9, #0
 800fd00:	d000      	beq.n	800fd04 <__gethex+0x118>
 800fd02:	4252      	negs	r2, r2
 800fd04:	4415      	add	r5, r2
 800fd06:	f8cb 1000 	str.w	r1, [fp]
 800fd0a:	b1e4      	cbz	r4, 800fd46 <__gethex+0x15a>
 800fd0c:	9b00      	ldr	r3, [sp, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	bf14      	ite	ne
 800fd12:	2700      	movne	r7, #0
 800fd14:	2706      	moveq	r7, #6
 800fd16:	4638      	mov	r0, r7
 800fd18:	b009      	add	sp, #36	; 0x24
 800fd1a:	ecbd 8b02 	vpop	{d8}
 800fd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd22:	463e      	mov	r6, r7
 800fd24:	4625      	mov	r5, r4
 800fd26:	2401      	movs	r4, #1
 800fd28:	e7ca      	b.n	800fcc0 <__gethex+0xd4>
 800fd2a:	f04f 0900 	mov.w	r9, #0
 800fd2e:	1cb1      	adds	r1, r6, #2
 800fd30:	e7d3      	b.n	800fcda <__gethex+0xee>
 800fd32:	f04f 0901 	mov.w	r9, #1
 800fd36:	e7fa      	b.n	800fd2e <__gethex+0x142>
 800fd38:	230a      	movs	r3, #10
 800fd3a:	fb03 0202 	mla	r2, r3, r2, r0
 800fd3e:	3a10      	subs	r2, #16
 800fd40:	e7d4      	b.n	800fcec <__gethex+0x100>
 800fd42:	4631      	mov	r1, r6
 800fd44:	e7df      	b.n	800fd06 <__gethex+0x11a>
 800fd46:	1bf3      	subs	r3, r6, r7
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	4621      	mov	r1, r4
 800fd4c:	2b07      	cmp	r3, #7
 800fd4e:	dc0b      	bgt.n	800fd68 <__gethex+0x17c>
 800fd50:	ee18 0a10 	vmov	r0, s16
 800fd54:	f000 fa64 	bl	8010220 <_Balloc>
 800fd58:	4604      	mov	r4, r0
 800fd5a:	b940      	cbnz	r0, 800fd6e <__gethex+0x182>
 800fd5c:	4b5d      	ldr	r3, [pc, #372]	; (800fed4 <__gethex+0x2e8>)
 800fd5e:	4602      	mov	r2, r0
 800fd60:	21de      	movs	r1, #222	; 0xde
 800fd62:	485d      	ldr	r0, [pc, #372]	; (800fed8 <__gethex+0x2ec>)
 800fd64:	f000 fffe 	bl	8010d64 <__assert_func>
 800fd68:	3101      	adds	r1, #1
 800fd6a:	105b      	asrs	r3, r3, #1
 800fd6c:	e7ee      	b.n	800fd4c <__gethex+0x160>
 800fd6e:	f100 0914 	add.w	r9, r0, #20
 800fd72:	f04f 0b00 	mov.w	fp, #0
 800fd76:	f1ca 0301 	rsb	r3, sl, #1
 800fd7a:	f8cd 9008 	str.w	r9, [sp, #8]
 800fd7e:	f8cd b000 	str.w	fp, [sp]
 800fd82:	9306      	str	r3, [sp, #24]
 800fd84:	42b7      	cmp	r7, r6
 800fd86:	d340      	bcc.n	800fe0a <__gethex+0x21e>
 800fd88:	9802      	ldr	r0, [sp, #8]
 800fd8a:	9b00      	ldr	r3, [sp, #0]
 800fd8c:	f840 3b04 	str.w	r3, [r0], #4
 800fd90:	eba0 0009 	sub.w	r0, r0, r9
 800fd94:	1080      	asrs	r0, r0, #2
 800fd96:	0146      	lsls	r6, r0, #5
 800fd98:	6120      	str	r0, [r4, #16]
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f000 fb32 	bl	8010404 <__hi0bits>
 800fda0:	1a30      	subs	r0, r6, r0
 800fda2:	f8d8 6000 	ldr.w	r6, [r8]
 800fda6:	42b0      	cmp	r0, r6
 800fda8:	dd63      	ble.n	800fe72 <__gethex+0x286>
 800fdaa:	1b87      	subs	r7, r0, r6
 800fdac:	4639      	mov	r1, r7
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f000 fed3 	bl	8010b5a <__any_on>
 800fdb4:	4682      	mov	sl, r0
 800fdb6:	b1a8      	cbz	r0, 800fde4 <__gethex+0x1f8>
 800fdb8:	1e7b      	subs	r3, r7, #1
 800fdba:	1159      	asrs	r1, r3, #5
 800fdbc:	f003 021f 	and.w	r2, r3, #31
 800fdc0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fdc4:	f04f 0a01 	mov.w	sl, #1
 800fdc8:	fa0a f202 	lsl.w	r2, sl, r2
 800fdcc:	420a      	tst	r2, r1
 800fdce:	d009      	beq.n	800fde4 <__gethex+0x1f8>
 800fdd0:	4553      	cmp	r3, sl
 800fdd2:	dd05      	ble.n	800fde0 <__gethex+0x1f4>
 800fdd4:	1eb9      	subs	r1, r7, #2
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f000 febf 	bl	8010b5a <__any_on>
 800fddc:	2800      	cmp	r0, #0
 800fdde:	d145      	bne.n	800fe6c <__gethex+0x280>
 800fde0:	f04f 0a02 	mov.w	sl, #2
 800fde4:	4639      	mov	r1, r7
 800fde6:	4620      	mov	r0, r4
 800fde8:	f7ff fe98 	bl	800fb1c <rshift>
 800fdec:	443d      	add	r5, r7
 800fdee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdf2:	42ab      	cmp	r3, r5
 800fdf4:	da4c      	bge.n	800fe90 <__gethex+0x2a4>
 800fdf6:	ee18 0a10 	vmov	r0, s16
 800fdfa:	4621      	mov	r1, r4
 800fdfc:	f000 fa50 	bl	80102a0 <_Bfree>
 800fe00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fe02:	2300      	movs	r3, #0
 800fe04:	6013      	str	r3, [r2, #0]
 800fe06:	27a3      	movs	r7, #163	; 0xa3
 800fe08:	e785      	b.n	800fd16 <__gethex+0x12a>
 800fe0a:	1e73      	subs	r3, r6, #1
 800fe0c:	9a05      	ldr	r2, [sp, #20]
 800fe0e:	9303      	str	r3, [sp, #12]
 800fe10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d019      	beq.n	800fe4c <__gethex+0x260>
 800fe18:	f1bb 0f20 	cmp.w	fp, #32
 800fe1c:	d107      	bne.n	800fe2e <__gethex+0x242>
 800fe1e:	9b02      	ldr	r3, [sp, #8]
 800fe20:	9a00      	ldr	r2, [sp, #0]
 800fe22:	f843 2b04 	str.w	r2, [r3], #4
 800fe26:	9302      	str	r3, [sp, #8]
 800fe28:	2300      	movs	r3, #0
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	469b      	mov	fp, r3
 800fe2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fe32:	f7ff fec5 	bl	800fbc0 <__hexdig_fun>
 800fe36:	9b00      	ldr	r3, [sp, #0]
 800fe38:	f000 000f 	and.w	r0, r0, #15
 800fe3c:	fa00 f00b 	lsl.w	r0, r0, fp
 800fe40:	4303      	orrs	r3, r0
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	f10b 0b04 	add.w	fp, fp, #4
 800fe48:	9b03      	ldr	r3, [sp, #12]
 800fe4a:	e00d      	b.n	800fe68 <__gethex+0x27c>
 800fe4c:	9b03      	ldr	r3, [sp, #12]
 800fe4e:	9a06      	ldr	r2, [sp, #24]
 800fe50:	4413      	add	r3, r2
 800fe52:	42bb      	cmp	r3, r7
 800fe54:	d3e0      	bcc.n	800fe18 <__gethex+0x22c>
 800fe56:	4618      	mov	r0, r3
 800fe58:	9901      	ldr	r1, [sp, #4]
 800fe5a:	9307      	str	r3, [sp, #28]
 800fe5c:	4652      	mov	r2, sl
 800fe5e:	f000 ff5f 	bl	8010d20 <strncmp>
 800fe62:	9b07      	ldr	r3, [sp, #28]
 800fe64:	2800      	cmp	r0, #0
 800fe66:	d1d7      	bne.n	800fe18 <__gethex+0x22c>
 800fe68:	461e      	mov	r6, r3
 800fe6a:	e78b      	b.n	800fd84 <__gethex+0x198>
 800fe6c:	f04f 0a03 	mov.w	sl, #3
 800fe70:	e7b8      	b.n	800fde4 <__gethex+0x1f8>
 800fe72:	da0a      	bge.n	800fe8a <__gethex+0x29e>
 800fe74:	1a37      	subs	r7, r6, r0
 800fe76:	4621      	mov	r1, r4
 800fe78:	ee18 0a10 	vmov	r0, s16
 800fe7c:	463a      	mov	r2, r7
 800fe7e:	f000 fc2b 	bl	80106d8 <__lshift>
 800fe82:	1bed      	subs	r5, r5, r7
 800fe84:	4604      	mov	r4, r0
 800fe86:	f100 0914 	add.w	r9, r0, #20
 800fe8a:	f04f 0a00 	mov.w	sl, #0
 800fe8e:	e7ae      	b.n	800fdee <__gethex+0x202>
 800fe90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fe94:	42a8      	cmp	r0, r5
 800fe96:	dd72      	ble.n	800ff7e <__gethex+0x392>
 800fe98:	1b45      	subs	r5, r0, r5
 800fe9a:	42ae      	cmp	r6, r5
 800fe9c:	dc36      	bgt.n	800ff0c <__gethex+0x320>
 800fe9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fea2:	2b02      	cmp	r3, #2
 800fea4:	d02a      	beq.n	800fefc <__gethex+0x310>
 800fea6:	2b03      	cmp	r3, #3
 800fea8:	d02c      	beq.n	800ff04 <__gethex+0x318>
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d11c      	bne.n	800fee8 <__gethex+0x2fc>
 800feae:	42ae      	cmp	r6, r5
 800feb0:	d11a      	bne.n	800fee8 <__gethex+0x2fc>
 800feb2:	2e01      	cmp	r6, #1
 800feb4:	d112      	bne.n	800fedc <__gethex+0x2f0>
 800feb6:	9a04      	ldr	r2, [sp, #16]
 800feb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800febc:	6013      	str	r3, [r2, #0]
 800febe:	2301      	movs	r3, #1
 800fec0:	6123      	str	r3, [r4, #16]
 800fec2:	f8c9 3000 	str.w	r3, [r9]
 800fec6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fec8:	2762      	movs	r7, #98	; 0x62
 800feca:	601c      	str	r4, [r3, #0]
 800fecc:	e723      	b.n	800fd16 <__gethex+0x12a>
 800fece:	bf00      	nop
 800fed0:	08012748 	.word	0x08012748
 800fed4:	080126d0 	.word	0x080126d0
 800fed8:	080126e1 	.word	0x080126e1
 800fedc:	1e71      	subs	r1, r6, #1
 800fede:	4620      	mov	r0, r4
 800fee0:	f000 fe3b 	bl	8010b5a <__any_on>
 800fee4:	2800      	cmp	r0, #0
 800fee6:	d1e6      	bne.n	800feb6 <__gethex+0x2ca>
 800fee8:	ee18 0a10 	vmov	r0, s16
 800feec:	4621      	mov	r1, r4
 800feee:	f000 f9d7 	bl	80102a0 <_Bfree>
 800fef2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fef4:	2300      	movs	r3, #0
 800fef6:	6013      	str	r3, [r2, #0]
 800fef8:	2750      	movs	r7, #80	; 0x50
 800fefa:	e70c      	b.n	800fd16 <__gethex+0x12a>
 800fefc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d1f2      	bne.n	800fee8 <__gethex+0x2fc>
 800ff02:	e7d8      	b.n	800feb6 <__gethex+0x2ca>
 800ff04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d1d5      	bne.n	800feb6 <__gethex+0x2ca>
 800ff0a:	e7ed      	b.n	800fee8 <__gethex+0x2fc>
 800ff0c:	1e6f      	subs	r7, r5, #1
 800ff0e:	f1ba 0f00 	cmp.w	sl, #0
 800ff12:	d131      	bne.n	800ff78 <__gethex+0x38c>
 800ff14:	b127      	cbz	r7, 800ff20 <__gethex+0x334>
 800ff16:	4639      	mov	r1, r7
 800ff18:	4620      	mov	r0, r4
 800ff1a:	f000 fe1e 	bl	8010b5a <__any_on>
 800ff1e:	4682      	mov	sl, r0
 800ff20:	117b      	asrs	r3, r7, #5
 800ff22:	2101      	movs	r1, #1
 800ff24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ff28:	f007 071f 	and.w	r7, r7, #31
 800ff2c:	fa01 f707 	lsl.w	r7, r1, r7
 800ff30:	421f      	tst	r7, r3
 800ff32:	4629      	mov	r1, r5
 800ff34:	4620      	mov	r0, r4
 800ff36:	bf18      	it	ne
 800ff38:	f04a 0a02 	orrne.w	sl, sl, #2
 800ff3c:	1b76      	subs	r6, r6, r5
 800ff3e:	f7ff fded 	bl	800fb1c <rshift>
 800ff42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ff46:	2702      	movs	r7, #2
 800ff48:	f1ba 0f00 	cmp.w	sl, #0
 800ff4c:	d048      	beq.n	800ffe0 <__gethex+0x3f4>
 800ff4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff52:	2b02      	cmp	r3, #2
 800ff54:	d015      	beq.n	800ff82 <__gethex+0x396>
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d017      	beq.n	800ff8a <__gethex+0x39e>
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d109      	bne.n	800ff72 <__gethex+0x386>
 800ff5e:	f01a 0f02 	tst.w	sl, #2
 800ff62:	d006      	beq.n	800ff72 <__gethex+0x386>
 800ff64:	f8d9 0000 	ldr.w	r0, [r9]
 800ff68:	ea4a 0a00 	orr.w	sl, sl, r0
 800ff6c:	f01a 0f01 	tst.w	sl, #1
 800ff70:	d10e      	bne.n	800ff90 <__gethex+0x3a4>
 800ff72:	f047 0710 	orr.w	r7, r7, #16
 800ff76:	e033      	b.n	800ffe0 <__gethex+0x3f4>
 800ff78:	f04f 0a01 	mov.w	sl, #1
 800ff7c:	e7d0      	b.n	800ff20 <__gethex+0x334>
 800ff7e:	2701      	movs	r7, #1
 800ff80:	e7e2      	b.n	800ff48 <__gethex+0x35c>
 800ff82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff84:	f1c3 0301 	rsb	r3, r3, #1
 800ff88:	9315      	str	r3, [sp, #84]	; 0x54
 800ff8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d0f0      	beq.n	800ff72 <__gethex+0x386>
 800ff90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ff94:	f104 0314 	add.w	r3, r4, #20
 800ff98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ff9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ffa0:	f04f 0c00 	mov.w	ip, #0
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffaa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ffae:	d01c      	beq.n	800ffea <__gethex+0x3fe>
 800ffb0:	3201      	adds	r2, #1
 800ffb2:	6002      	str	r2, [r0, #0]
 800ffb4:	2f02      	cmp	r7, #2
 800ffb6:	f104 0314 	add.w	r3, r4, #20
 800ffba:	d13f      	bne.n	801003c <__gethex+0x450>
 800ffbc:	f8d8 2000 	ldr.w	r2, [r8]
 800ffc0:	3a01      	subs	r2, #1
 800ffc2:	42b2      	cmp	r2, r6
 800ffc4:	d10a      	bne.n	800ffdc <__gethex+0x3f0>
 800ffc6:	1171      	asrs	r1, r6, #5
 800ffc8:	2201      	movs	r2, #1
 800ffca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ffce:	f006 061f 	and.w	r6, r6, #31
 800ffd2:	fa02 f606 	lsl.w	r6, r2, r6
 800ffd6:	421e      	tst	r6, r3
 800ffd8:	bf18      	it	ne
 800ffda:	4617      	movne	r7, r2
 800ffdc:	f047 0720 	orr.w	r7, r7, #32
 800ffe0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ffe2:	601c      	str	r4, [r3, #0]
 800ffe4:	9b04      	ldr	r3, [sp, #16]
 800ffe6:	601d      	str	r5, [r3, #0]
 800ffe8:	e695      	b.n	800fd16 <__gethex+0x12a>
 800ffea:	4299      	cmp	r1, r3
 800ffec:	f843 cc04 	str.w	ip, [r3, #-4]
 800fff0:	d8d8      	bhi.n	800ffa4 <__gethex+0x3b8>
 800fff2:	68a3      	ldr	r3, [r4, #8]
 800fff4:	459b      	cmp	fp, r3
 800fff6:	db19      	blt.n	801002c <__gethex+0x440>
 800fff8:	6861      	ldr	r1, [r4, #4]
 800fffa:	ee18 0a10 	vmov	r0, s16
 800fffe:	3101      	adds	r1, #1
 8010000:	f000 f90e 	bl	8010220 <_Balloc>
 8010004:	4681      	mov	r9, r0
 8010006:	b918      	cbnz	r0, 8010010 <__gethex+0x424>
 8010008:	4b1a      	ldr	r3, [pc, #104]	; (8010074 <__gethex+0x488>)
 801000a:	4602      	mov	r2, r0
 801000c:	2184      	movs	r1, #132	; 0x84
 801000e:	e6a8      	b.n	800fd62 <__gethex+0x176>
 8010010:	6922      	ldr	r2, [r4, #16]
 8010012:	3202      	adds	r2, #2
 8010014:	f104 010c 	add.w	r1, r4, #12
 8010018:	0092      	lsls	r2, r2, #2
 801001a:	300c      	adds	r0, #12
 801001c:	f7fe ff8a 	bl	800ef34 <memcpy>
 8010020:	4621      	mov	r1, r4
 8010022:	ee18 0a10 	vmov	r0, s16
 8010026:	f000 f93b 	bl	80102a0 <_Bfree>
 801002a:	464c      	mov	r4, r9
 801002c:	6923      	ldr	r3, [r4, #16]
 801002e:	1c5a      	adds	r2, r3, #1
 8010030:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010034:	6122      	str	r2, [r4, #16]
 8010036:	2201      	movs	r2, #1
 8010038:	615a      	str	r2, [r3, #20]
 801003a:	e7bb      	b.n	800ffb4 <__gethex+0x3c8>
 801003c:	6922      	ldr	r2, [r4, #16]
 801003e:	455a      	cmp	r2, fp
 8010040:	dd0b      	ble.n	801005a <__gethex+0x46e>
 8010042:	2101      	movs	r1, #1
 8010044:	4620      	mov	r0, r4
 8010046:	f7ff fd69 	bl	800fb1c <rshift>
 801004a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801004e:	3501      	adds	r5, #1
 8010050:	42ab      	cmp	r3, r5
 8010052:	f6ff aed0 	blt.w	800fdf6 <__gethex+0x20a>
 8010056:	2701      	movs	r7, #1
 8010058:	e7c0      	b.n	800ffdc <__gethex+0x3f0>
 801005a:	f016 061f 	ands.w	r6, r6, #31
 801005e:	d0fa      	beq.n	8010056 <__gethex+0x46a>
 8010060:	4453      	add	r3, sl
 8010062:	f1c6 0620 	rsb	r6, r6, #32
 8010066:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801006a:	f000 f9cb 	bl	8010404 <__hi0bits>
 801006e:	42b0      	cmp	r0, r6
 8010070:	dbe7      	blt.n	8010042 <__gethex+0x456>
 8010072:	e7f0      	b.n	8010056 <__gethex+0x46a>
 8010074:	080126d0 	.word	0x080126d0

08010078 <L_shift>:
 8010078:	f1c2 0208 	rsb	r2, r2, #8
 801007c:	0092      	lsls	r2, r2, #2
 801007e:	b570      	push	{r4, r5, r6, lr}
 8010080:	f1c2 0620 	rsb	r6, r2, #32
 8010084:	6843      	ldr	r3, [r0, #4]
 8010086:	6804      	ldr	r4, [r0, #0]
 8010088:	fa03 f506 	lsl.w	r5, r3, r6
 801008c:	432c      	orrs	r4, r5
 801008e:	40d3      	lsrs	r3, r2
 8010090:	6004      	str	r4, [r0, #0]
 8010092:	f840 3f04 	str.w	r3, [r0, #4]!
 8010096:	4288      	cmp	r0, r1
 8010098:	d3f4      	bcc.n	8010084 <L_shift+0xc>
 801009a:	bd70      	pop	{r4, r5, r6, pc}

0801009c <__match>:
 801009c:	b530      	push	{r4, r5, lr}
 801009e:	6803      	ldr	r3, [r0, #0]
 80100a0:	3301      	adds	r3, #1
 80100a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100a6:	b914      	cbnz	r4, 80100ae <__match+0x12>
 80100a8:	6003      	str	r3, [r0, #0]
 80100aa:	2001      	movs	r0, #1
 80100ac:	bd30      	pop	{r4, r5, pc}
 80100ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80100b6:	2d19      	cmp	r5, #25
 80100b8:	bf98      	it	ls
 80100ba:	3220      	addls	r2, #32
 80100bc:	42a2      	cmp	r2, r4
 80100be:	d0f0      	beq.n	80100a2 <__match+0x6>
 80100c0:	2000      	movs	r0, #0
 80100c2:	e7f3      	b.n	80100ac <__match+0x10>

080100c4 <__hexnan>:
 80100c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c8:	680b      	ldr	r3, [r1, #0]
 80100ca:	115e      	asrs	r6, r3, #5
 80100cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80100d0:	f013 031f 	ands.w	r3, r3, #31
 80100d4:	b087      	sub	sp, #28
 80100d6:	bf18      	it	ne
 80100d8:	3604      	addne	r6, #4
 80100da:	2500      	movs	r5, #0
 80100dc:	1f37      	subs	r7, r6, #4
 80100de:	4690      	mov	r8, r2
 80100e0:	6802      	ldr	r2, [r0, #0]
 80100e2:	9301      	str	r3, [sp, #4]
 80100e4:	4682      	mov	sl, r0
 80100e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80100ea:	46b9      	mov	r9, r7
 80100ec:	463c      	mov	r4, r7
 80100ee:	9502      	str	r5, [sp, #8]
 80100f0:	46ab      	mov	fp, r5
 80100f2:	7851      	ldrb	r1, [r2, #1]
 80100f4:	1c53      	adds	r3, r2, #1
 80100f6:	9303      	str	r3, [sp, #12]
 80100f8:	b341      	cbz	r1, 801014c <__hexnan+0x88>
 80100fa:	4608      	mov	r0, r1
 80100fc:	9205      	str	r2, [sp, #20]
 80100fe:	9104      	str	r1, [sp, #16]
 8010100:	f7ff fd5e 	bl	800fbc0 <__hexdig_fun>
 8010104:	2800      	cmp	r0, #0
 8010106:	d14f      	bne.n	80101a8 <__hexnan+0xe4>
 8010108:	9904      	ldr	r1, [sp, #16]
 801010a:	9a05      	ldr	r2, [sp, #20]
 801010c:	2920      	cmp	r1, #32
 801010e:	d818      	bhi.n	8010142 <__hexnan+0x7e>
 8010110:	9b02      	ldr	r3, [sp, #8]
 8010112:	459b      	cmp	fp, r3
 8010114:	dd13      	ble.n	801013e <__hexnan+0x7a>
 8010116:	454c      	cmp	r4, r9
 8010118:	d206      	bcs.n	8010128 <__hexnan+0x64>
 801011a:	2d07      	cmp	r5, #7
 801011c:	dc04      	bgt.n	8010128 <__hexnan+0x64>
 801011e:	462a      	mov	r2, r5
 8010120:	4649      	mov	r1, r9
 8010122:	4620      	mov	r0, r4
 8010124:	f7ff ffa8 	bl	8010078 <L_shift>
 8010128:	4544      	cmp	r4, r8
 801012a:	d950      	bls.n	80101ce <__hexnan+0x10a>
 801012c:	2300      	movs	r3, #0
 801012e:	f1a4 0904 	sub.w	r9, r4, #4
 8010132:	f844 3c04 	str.w	r3, [r4, #-4]
 8010136:	f8cd b008 	str.w	fp, [sp, #8]
 801013a:	464c      	mov	r4, r9
 801013c:	461d      	mov	r5, r3
 801013e:	9a03      	ldr	r2, [sp, #12]
 8010140:	e7d7      	b.n	80100f2 <__hexnan+0x2e>
 8010142:	2929      	cmp	r1, #41	; 0x29
 8010144:	d156      	bne.n	80101f4 <__hexnan+0x130>
 8010146:	3202      	adds	r2, #2
 8010148:	f8ca 2000 	str.w	r2, [sl]
 801014c:	f1bb 0f00 	cmp.w	fp, #0
 8010150:	d050      	beq.n	80101f4 <__hexnan+0x130>
 8010152:	454c      	cmp	r4, r9
 8010154:	d206      	bcs.n	8010164 <__hexnan+0xa0>
 8010156:	2d07      	cmp	r5, #7
 8010158:	dc04      	bgt.n	8010164 <__hexnan+0xa0>
 801015a:	462a      	mov	r2, r5
 801015c:	4649      	mov	r1, r9
 801015e:	4620      	mov	r0, r4
 8010160:	f7ff ff8a 	bl	8010078 <L_shift>
 8010164:	4544      	cmp	r4, r8
 8010166:	d934      	bls.n	80101d2 <__hexnan+0x10e>
 8010168:	f1a8 0204 	sub.w	r2, r8, #4
 801016c:	4623      	mov	r3, r4
 801016e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010172:	f842 1f04 	str.w	r1, [r2, #4]!
 8010176:	429f      	cmp	r7, r3
 8010178:	d2f9      	bcs.n	801016e <__hexnan+0xaa>
 801017a:	1b3b      	subs	r3, r7, r4
 801017c:	f023 0303 	bic.w	r3, r3, #3
 8010180:	3304      	adds	r3, #4
 8010182:	3401      	adds	r4, #1
 8010184:	3e03      	subs	r6, #3
 8010186:	42b4      	cmp	r4, r6
 8010188:	bf88      	it	hi
 801018a:	2304      	movhi	r3, #4
 801018c:	4443      	add	r3, r8
 801018e:	2200      	movs	r2, #0
 8010190:	f843 2b04 	str.w	r2, [r3], #4
 8010194:	429f      	cmp	r7, r3
 8010196:	d2fb      	bcs.n	8010190 <__hexnan+0xcc>
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	b91b      	cbnz	r3, 80101a4 <__hexnan+0xe0>
 801019c:	4547      	cmp	r7, r8
 801019e:	d127      	bne.n	80101f0 <__hexnan+0x12c>
 80101a0:	2301      	movs	r3, #1
 80101a2:	603b      	str	r3, [r7, #0]
 80101a4:	2005      	movs	r0, #5
 80101a6:	e026      	b.n	80101f6 <__hexnan+0x132>
 80101a8:	3501      	adds	r5, #1
 80101aa:	2d08      	cmp	r5, #8
 80101ac:	f10b 0b01 	add.w	fp, fp, #1
 80101b0:	dd06      	ble.n	80101c0 <__hexnan+0xfc>
 80101b2:	4544      	cmp	r4, r8
 80101b4:	d9c3      	bls.n	801013e <__hexnan+0x7a>
 80101b6:	2300      	movs	r3, #0
 80101b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80101bc:	2501      	movs	r5, #1
 80101be:	3c04      	subs	r4, #4
 80101c0:	6822      	ldr	r2, [r4, #0]
 80101c2:	f000 000f 	and.w	r0, r0, #15
 80101c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80101ca:	6022      	str	r2, [r4, #0]
 80101cc:	e7b7      	b.n	801013e <__hexnan+0x7a>
 80101ce:	2508      	movs	r5, #8
 80101d0:	e7b5      	b.n	801013e <__hexnan+0x7a>
 80101d2:	9b01      	ldr	r3, [sp, #4]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d0df      	beq.n	8010198 <__hexnan+0xd4>
 80101d8:	f04f 32ff 	mov.w	r2, #4294967295
 80101dc:	f1c3 0320 	rsb	r3, r3, #32
 80101e0:	fa22 f303 	lsr.w	r3, r2, r3
 80101e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80101e8:	401a      	ands	r2, r3
 80101ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80101ee:	e7d3      	b.n	8010198 <__hexnan+0xd4>
 80101f0:	3f04      	subs	r7, #4
 80101f2:	e7d1      	b.n	8010198 <__hexnan+0xd4>
 80101f4:	2004      	movs	r0, #4
 80101f6:	b007      	add	sp, #28
 80101f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101fc <__ascii_mbtowc>:
 80101fc:	b082      	sub	sp, #8
 80101fe:	b901      	cbnz	r1, 8010202 <__ascii_mbtowc+0x6>
 8010200:	a901      	add	r1, sp, #4
 8010202:	b142      	cbz	r2, 8010216 <__ascii_mbtowc+0x1a>
 8010204:	b14b      	cbz	r3, 801021a <__ascii_mbtowc+0x1e>
 8010206:	7813      	ldrb	r3, [r2, #0]
 8010208:	600b      	str	r3, [r1, #0]
 801020a:	7812      	ldrb	r2, [r2, #0]
 801020c:	1e10      	subs	r0, r2, #0
 801020e:	bf18      	it	ne
 8010210:	2001      	movne	r0, #1
 8010212:	b002      	add	sp, #8
 8010214:	4770      	bx	lr
 8010216:	4610      	mov	r0, r2
 8010218:	e7fb      	b.n	8010212 <__ascii_mbtowc+0x16>
 801021a:	f06f 0001 	mvn.w	r0, #1
 801021e:	e7f8      	b.n	8010212 <__ascii_mbtowc+0x16>

08010220 <_Balloc>:
 8010220:	b570      	push	{r4, r5, r6, lr}
 8010222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010224:	4604      	mov	r4, r0
 8010226:	460d      	mov	r5, r1
 8010228:	b976      	cbnz	r6, 8010248 <_Balloc+0x28>
 801022a:	2010      	movs	r0, #16
 801022c:	f000 fdca 	bl	8010dc4 <malloc>
 8010230:	4602      	mov	r2, r0
 8010232:	6260      	str	r0, [r4, #36]	; 0x24
 8010234:	b920      	cbnz	r0, 8010240 <_Balloc+0x20>
 8010236:	4b18      	ldr	r3, [pc, #96]	; (8010298 <_Balloc+0x78>)
 8010238:	4818      	ldr	r0, [pc, #96]	; (801029c <_Balloc+0x7c>)
 801023a:	2166      	movs	r1, #102	; 0x66
 801023c:	f000 fd92 	bl	8010d64 <__assert_func>
 8010240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010244:	6006      	str	r6, [r0, #0]
 8010246:	60c6      	str	r6, [r0, #12]
 8010248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801024a:	68f3      	ldr	r3, [r6, #12]
 801024c:	b183      	cbz	r3, 8010270 <_Balloc+0x50>
 801024e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010250:	68db      	ldr	r3, [r3, #12]
 8010252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010256:	b9b8      	cbnz	r0, 8010288 <_Balloc+0x68>
 8010258:	2101      	movs	r1, #1
 801025a:	fa01 f605 	lsl.w	r6, r1, r5
 801025e:	1d72      	adds	r2, r6, #5
 8010260:	0092      	lsls	r2, r2, #2
 8010262:	4620      	mov	r0, r4
 8010264:	f000 fc9a 	bl	8010b9c <_calloc_r>
 8010268:	b160      	cbz	r0, 8010284 <_Balloc+0x64>
 801026a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801026e:	e00e      	b.n	801028e <_Balloc+0x6e>
 8010270:	2221      	movs	r2, #33	; 0x21
 8010272:	2104      	movs	r1, #4
 8010274:	4620      	mov	r0, r4
 8010276:	f000 fc91 	bl	8010b9c <_calloc_r>
 801027a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801027c:	60f0      	str	r0, [r6, #12]
 801027e:	68db      	ldr	r3, [r3, #12]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d1e4      	bne.n	801024e <_Balloc+0x2e>
 8010284:	2000      	movs	r0, #0
 8010286:	bd70      	pop	{r4, r5, r6, pc}
 8010288:	6802      	ldr	r2, [r0, #0]
 801028a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801028e:	2300      	movs	r3, #0
 8010290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010294:	e7f7      	b.n	8010286 <_Balloc+0x66>
 8010296:	bf00      	nop
 8010298:	0801275c 	.word	0x0801275c
 801029c:	08012773 	.word	0x08012773

080102a0 <_Bfree>:
 80102a0:	b570      	push	{r4, r5, r6, lr}
 80102a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80102a4:	4605      	mov	r5, r0
 80102a6:	460c      	mov	r4, r1
 80102a8:	b976      	cbnz	r6, 80102c8 <_Bfree+0x28>
 80102aa:	2010      	movs	r0, #16
 80102ac:	f000 fd8a 	bl	8010dc4 <malloc>
 80102b0:	4602      	mov	r2, r0
 80102b2:	6268      	str	r0, [r5, #36]	; 0x24
 80102b4:	b920      	cbnz	r0, 80102c0 <_Bfree+0x20>
 80102b6:	4b09      	ldr	r3, [pc, #36]	; (80102dc <_Bfree+0x3c>)
 80102b8:	4809      	ldr	r0, [pc, #36]	; (80102e0 <_Bfree+0x40>)
 80102ba:	218a      	movs	r1, #138	; 0x8a
 80102bc:	f000 fd52 	bl	8010d64 <__assert_func>
 80102c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102c4:	6006      	str	r6, [r0, #0]
 80102c6:	60c6      	str	r6, [r0, #12]
 80102c8:	b13c      	cbz	r4, 80102da <_Bfree+0x3a>
 80102ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80102cc:	6862      	ldr	r2, [r4, #4]
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80102d4:	6021      	str	r1, [r4, #0]
 80102d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80102da:	bd70      	pop	{r4, r5, r6, pc}
 80102dc:	0801275c 	.word	0x0801275c
 80102e0:	08012773 	.word	0x08012773

080102e4 <__multadd>:
 80102e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e8:	690d      	ldr	r5, [r1, #16]
 80102ea:	4607      	mov	r7, r0
 80102ec:	460c      	mov	r4, r1
 80102ee:	461e      	mov	r6, r3
 80102f0:	f101 0c14 	add.w	ip, r1, #20
 80102f4:	2000      	movs	r0, #0
 80102f6:	f8dc 3000 	ldr.w	r3, [ip]
 80102fa:	b299      	uxth	r1, r3
 80102fc:	fb02 6101 	mla	r1, r2, r1, r6
 8010300:	0c1e      	lsrs	r6, r3, #16
 8010302:	0c0b      	lsrs	r3, r1, #16
 8010304:	fb02 3306 	mla	r3, r2, r6, r3
 8010308:	b289      	uxth	r1, r1
 801030a:	3001      	adds	r0, #1
 801030c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010310:	4285      	cmp	r5, r0
 8010312:	f84c 1b04 	str.w	r1, [ip], #4
 8010316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801031a:	dcec      	bgt.n	80102f6 <__multadd+0x12>
 801031c:	b30e      	cbz	r6, 8010362 <__multadd+0x7e>
 801031e:	68a3      	ldr	r3, [r4, #8]
 8010320:	42ab      	cmp	r3, r5
 8010322:	dc19      	bgt.n	8010358 <__multadd+0x74>
 8010324:	6861      	ldr	r1, [r4, #4]
 8010326:	4638      	mov	r0, r7
 8010328:	3101      	adds	r1, #1
 801032a:	f7ff ff79 	bl	8010220 <_Balloc>
 801032e:	4680      	mov	r8, r0
 8010330:	b928      	cbnz	r0, 801033e <__multadd+0x5a>
 8010332:	4602      	mov	r2, r0
 8010334:	4b0c      	ldr	r3, [pc, #48]	; (8010368 <__multadd+0x84>)
 8010336:	480d      	ldr	r0, [pc, #52]	; (801036c <__multadd+0x88>)
 8010338:	21b5      	movs	r1, #181	; 0xb5
 801033a:	f000 fd13 	bl	8010d64 <__assert_func>
 801033e:	6922      	ldr	r2, [r4, #16]
 8010340:	3202      	adds	r2, #2
 8010342:	f104 010c 	add.w	r1, r4, #12
 8010346:	0092      	lsls	r2, r2, #2
 8010348:	300c      	adds	r0, #12
 801034a:	f7fe fdf3 	bl	800ef34 <memcpy>
 801034e:	4621      	mov	r1, r4
 8010350:	4638      	mov	r0, r7
 8010352:	f7ff ffa5 	bl	80102a0 <_Bfree>
 8010356:	4644      	mov	r4, r8
 8010358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801035c:	3501      	adds	r5, #1
 801035e:	615e      	str	r6, [r3, #20]
 8010360:	6125      	str	r5, [r4, #16]
 8010362:	4620      	mov	r0, r4
 8010364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010368:	080126d0 	.word	0x080126d0
 801036c:	08012773 	.word	0x08012773

08010370 <__s2b>:
 8010370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010374:	460c      	mov	r4, r1
 8010376:	4615      	mov	r5, r2
 8010378:	461f      	mov	r7, r3
 801037a:	2209      	movs	r2, #9
 801037c:	3308      	adds	r3, #8
 801037e:	4606      	mov	r6, r0
 8010380:	fb93 f3f2 	sdiv	r3, r3, r2
 8010384:	2100      	movs	r1, #0
 8010386:	2201      	movs	r2, #1
 8010388:	429a      	cmp	r2, r3
 801038a:	db09      	blt.n	80103a0 <__s2b+0x30>
 801038c:	4630      	mov	r0, r6
 801038e:	f7ff ff47 	bl	8010220 <_Balloc>
 8010392:	b940      	cbnz	r0, 80103a6 <__s2b+0x36>
 8010394:	4602      	mov	r2, r0
 8010396:	4b19      	ldr	r3, [pc, #100]	; (80103fc <__s2b+0x8c>)
 8010398:	4819      	ldr	r0, [pc, #100]	; (8010400 <__s2b+0x90>)
 801039a:	21ce      	movs	r1, #206	; 0xce
 801039c:	f000 fce2 	bl	8010d64 <__assert_func>
 80103a0:	0052      	lsls	r2, r2, #1
 80103a2:	3101      	adds	r1, #1
 80103a4:	e7f0      	b.n	8010388 <__s2b+0x18>
 80103a6:	9b08      	ldr	r3, [sp, #32]
 80103a8:	6143      	str	r3, [r0, #20]
 80103aa:	2d09      	cmp	r5, #9
 80103ac:	f04f 0301 	mov.w	r3, #1
 80103b0:	6103      	str	r3, [r0, #16]
 80103b2:	dd16      	ble.n	80103e2 <__s2b+0x72>
 80103b4:	f104 0909 	add.w	r9, r4, #9
 80103b8:	46c8      	mov	r8, r9
 80103ba:	442c      	add	r4, r5
 80103bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80103c0:	4601      	mov	r1, r0
 80103c2:	3b30      	subs	r3, #48	; 0x30
 80103c4:	220a      	movs	r2, #10
 80103c6:	4630      	mov	r0, r6
 80103c8:	f7ff ff8c 	bl	80102e4 <__multadd>
 80103cc:	45a0      	cmp	r8, r4
 80103ce:	d1f5      	bne.n	80103bc <__s2b+0x4c>
 80103d0:	f1a5 0408 	sub.w	r4, r5, #8
 80103d4:	444c      	add	r4, r9
 80103d6:	1b2d      	subs	r5, r5, r4
 80103d8:	1963      	adds	r3, r4, r5
 80103da:	42bb      	cmp	r3, r7
 80103dc:	db04      	blt.n	80103e8 <__s2b+0x78>
 80103de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103e2:	340a      	adds	r4, #10
 80103e4:	2509      	movs	r5, #9
 80103e6:	e7f6      	b.n	80103d6 <__s2b+0x66>
 80103e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80103ec:	4601      	mov	r1, r0
 80103ee:	3b30      	subs	r3, #48	; 0x30
 80103f0:	220a      	movs	r2, #10
 80103f2:	4630      	mov	r0, r6
 80103f4:	f7ff ff76 	bl	80102e4 <__multadd>
 80103f8:	e7ee      	b.n	80103d8 <__s2b+0x68>
 80103fa:	bf00      	nop
 80103fc:	080126d0 	.word	0x080126d0
 8010400:	08012773 	.word	0x08012773

08010404 <__hi0bits>:
 8010404:	0c03      	lsrs	r3, r0, #16
 8010406:	041b      	lsls	r3, r3, #16
 8010408:	b9d3      	cbnz	r3, 8010440 <__hi0bits+0x3c>
 801040a:	0400      	lsls	r0, r0, #16
 801040c:	2310      	movs	r3, #16
 801040e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010412:	bf04      	itt	eq
 8010414:	0200      	lsleq	r0, r0, #8
 8010416:	3308      	addeq	r3, #8
 8010418:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801041c:	bf04      	itt	eq
 801041e:	0100      	lsleq	r0, r0, #4
 8010420:	3304      	addeq	r3, #4
 8010422:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010426:	bf04      	itt	eq
 8010428:	0080      	lsleq	r0, r0, #2
 801042a:	3302      	addeq	r3, #2
 801042c:	2800      	cmp	r0, #0
 801042e:	db05      	blt.n	801043c <__hi0bits+0x38>
 8010430:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010434:	f103 0301 	add.w	r3, r3, #1
 8010438:	bf08      	it	eq
 801043a:	2320      	moveq	r3, #32
 801043c:	4618      	mov	r0, r3
 801043e:	4770      	bx	lr
 8010440:	2300      	movs	r3, #0
 8010442:	e7e4      	b.n	801040e <__hi0bits+0xa>

08010444 <__lo0bits>:
 8010444:	6803      	ldr	r3, [r0, #0]
 8010446:	f013 0207 	ands.w	r2, r3, #7
 801044a:	4601      	mov	r1, r0
 801044c:	d00b      	beq.n	8010466 <__lo0bits+0x22>
 801044e:	07da      	lsls	r2, r3, #31
 8010450:	d423      	bmi.n	801049a <__lo0bits+0x56>
 8010452:	0798      	lsls	r0, r3, #30
 8010454:	bf49      	itett	mi
 8010456:	085b      	lsrmi	r3, r3, #1
 8010458:	089b      	lsrpl	r3, r3, #2
 801045a:	2001      	movmi	r0, #1
 801045c:	600b      	strmi	r3, [r1, #0]
 801045e:	bf5c      	itt	pl
 8010460:	600b      	strpl	r3, [r1, #0]
 8010462:	2002      	movpl	r0, #2
 8010464:	4770      	bx	lr
 8010466:	b298      	uxth	r0, r3
 8010468:	b9a8      	cbnz	r0, 8010496 <__lo0bits+0x52>
 801046a:	0c1b      	lsrs	r3, r3, #16
 801046c:	2010      	movs	r0, #16
 801046e:	b2da      	uxtb	r2, r3
 8010470:	b90a      	cbnz	r2, 8010476 <__lo0bits+0x32>
 8010472:	3008      	adds	r0, #8
 8010474:	0a1b      	lsrs	r3, r3, #8
 8010476:	071a      	lsls	r2, r3, #28
 8010478:	bf04      	itt	eq
 801047a:	091b      	lsreq	r3, r3, #4
 801047c:	3004      	addeq	r0, #4
 801047e:	079a      	lsls	r2, r3, #30
 8010480:	bf04      	itt	eq
 8010482:	089b      	lsreq	r3, r3, #2
 8010484:	3002      	addeq	r0, #2
 8010486:	07da      	lsls	r2, r3, #31
 8010488:	d403      	bmi.n	8010492 <__lo0bits+0x4e>
 801048a:	085b      	lsrs	r3, r3, #1
 801048c:	f100 0001 	add.w	r0, r0, #1
 8010490:	d005      	beq.n	801049e <__lo0bits+0x5a>
 8010492:	600b      	str	r3, [r1, #0]
 8010494:	4770      	bx	lr
 8010496:	4610      	mov	r0, r2
 8010498:	e7e9      	b.n	801046e <__lo0bits+0x2a>
 801049a:	2000      	movs	r0, #0
 801049c:	4770      	bx	lr
 801049e:	2020      	movs	r0, #32
 80104a0:	4770      	bx	lr
	...

080104a4 <__i2b>:
 80104a4:	b510      	push	{r4, lr}
 80104a6:	460c      	mov	r4, r1
 80104a8:	2101      	movs	r1, #1
 80104aa:	f7ff feb9 	bl	8010220 <_Balloc>
 80104ae:	4602      	mov	r2, r0
 80104b0:	b928      	cbnz	r0, 80104be <__i2b+0x1a>
 80104b2:	4b05      	ldr	r3, [pc, #20]	; (80104c8 <__i2b+0x24>)
 80104b4:	4805      	ldr	r0, [pc, #20]	; (80104cc <__i2b+0x28>)
 80104b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80104ba:	f000 fc53 	bl	8010d64 <__assert_func>
 80104be:	2301      	movs	r3, #1
 80104c0:	6144      	str	r4, [r0, #20]
 80104c2:	6103      	str	r3, [r0, #16]
 80104c4:	bd10      	pop	{r4, pc}
 80104c6:	bf00      	nop
 80104c8:	080126d0 	.word	0x080126d0
 80104cc:	08012773 	.word	0x08012773

080104d0 <__multiply>:
 80104d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d4:	4691      	mov	r9, r2
 80104d6:	690a      	ldr	r2, [r1, #16]
 80104d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104dc:	429a      	cmp	r2, r3
 80104de:	bfb8      	it	lt
 80104e0:	460b      	movlt	r3, r1
 80104e2:	460c      	mov	r4, r1
 80104e4:	bfbc      	itt	lt
 80104e6:	464c      	movlt	r4, r9
 80104e8:	4699      	movlt	r9, r3
 80104ea:	6927      	ldr	r7, [r4, #16]
 80104ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80104f0:	68a3      	ldr	r3, [r4, #8]
 80104f2:	6861      	ldr	r1, [r4, #4]
 80104f4:	eb07 060a 	add.w	r6, r7, sl
 80104f8:	42b3      	cmp	r3, r6
 80104fa:	b085      	sub	sp, #20
 80104fc:	bfb8      	it	lt
 80104fe:	3101      	addlt	r1, #1
 8010500:	f7ff fe8e 	bl	8010220 <_Balloc>
 8010504:	b930      	cbnz	r0, 8010514 <__multiply+0x44>
 8010506:	4602      	mov	r2, r0
 8010508:	4b44      	ldr	r3, [pc, #272]	; (801061c <__multiply+0x14c>)
 801050a:	4845      	ldr	r0, [pc, #276]	; (8010620 <__multiply+0x150>)
 801050c:	f240 115d 	movw	r1, #349	; 0x15d
 8010510:	f000 fc28 	bl	8010d64 <__assert_func>
 8010514:	f100 0514 	add.w	r5, r0, #20
 8010518:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801051c:	462b      	mov	r3, r5
 801051e:	2200      	movs	r2, #0
 8010520:	4543      	cmp	r3, r8
 8010522:	d321      	bcc.n	8010568 <__multiply+0x98>
 8010524:	f104 0314 	add.w	r3, r4, #20
 8010528:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801052c:	f109 0314 	add.w	r3, r9, #20
 8010530:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010534:	9202      	str	r2, [sp, #8]
 8010536:	1b3a      	subs	r2, r7, r4
 8010538:	3a15      	subs	r2, #21
 801053a:	f022 0203 	bic.w	r2, r2, #3
 801053e:	3204      	adds	r2, #4
 8010540:	f104 0115 	add.w	r1, r4, #21
 8010544:	428f      	cmp	r7, r1
 8010546:	bf38      	it	cc
 8010548:	2204      	movcc	r2, #4
 801054a:	9201      	str	r2, [sp, #4]
 801054c:	9a02      	ldr	r2, [sp, #8]
 801054e:	9303      	str	r3, [sp, #12]
 8010550:	429a      	cmp	r2, r3
 8010552:	d80c      	bhi.n	801056e <__multiply+0x9e>
 8010554:	2e00      	cmp	r6, #0
 8010556:	dd03      	ble.n	8010560 <__multiply+0x90>
 8010558:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801055c:	2b00      	cmp	r3, #0
 801055e:	d05a      	beq.n	8010616 <__multiply+0x146>
 8010560:	6106      	str	r6, [r0, #16]
 8010562:	b005      	add	sp, #20
 8010564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010568:	f843 2b04 	str.w	r2, [r3], #4
 801056c:	e7d8      	b.n	8010520 <__multiply+0x50>
 801056e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010572:	f1ba 0f00 	cmp.w	sl, #0
 8010576:	d024      	beq.n	80105c2 <__multiply+0xf2>
 8010578:	f104 0e14 	add.w	lr, r4, #20
 801057c:	46a9      	mov	r9, r5
 801057e:	f04f 0c00 	mov.w	ip, #0
 8010582:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010586:	f8d9 1000 	ldr.w	r1, [r9]
 801058a:	fa1f fb82 	uxth.w	fp, r2
 801058e:	b289      	uxth	r1, r1
 8010590:	fb0a 110b 	mla	r1, sl, fp, r1
 8010594:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010598:	f8d9 2000 	ldr.w	r2, [r9]
 801059c:	4461      	add	r1, ip
 801059e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80105a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80105a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80105aa:	b289      	uxth	r1, r1
 80105ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80105b0:	4577      	cmp	r7, lr
 80105b2:	f849 1b04 	str.w	r1, [r9], #4
 80105b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80105ba:	d8e2      	bhi.n	8010582 <__multiply+0xb2>
 80105bc:	9a01      	ldr	r2, [sp, #4]
 80105be:	f845 c002 	str.w	ip, [r5, r2]
 80105c2:	9a03      	ldr	r2, [sp, #12]
 80105c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80105c8:	3304      	adds	r3, #4
 80105ca:	f1b9 0f00 	cmp.w	r9, #0
 80105ce:	d020      	beq.n	8010612 <__multiply+0x142>
 80105d0:	6829      	ldr	r1, [r5, #0]
 80105d2:	f104 0c14 	add.w	ip, r4, #20
 80105d6:	46ae      	mov	lr, r5
 80105d8:	f04f 0a00 	mov.w	sl, #0
 80105dc:	f8bc b000 	ldrh.w	fp, [ip]
 80105e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80105e4:	fb09 220b 	mla	r2, r9, fp, r2
 80105e8:	4492      	add	sl, r2
 80105ea:	b289      	uxth	r1, r1
 80105ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80105f0:	f84e 1b04 	str.w	r1, [lr], #4
 80105f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80105f8:	f8be 1000 	ldrh.w	r1, [lr]
 80105fc:	0c12      	lsrs	r2, r2, #16
 80105fe:	fb09 1102 	mla	r1, r9, r2, r1
 8010602:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010606:	4567      	cmp	r7, ip
 8010608:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801060c:	d8e6      	bhi.n	80105dc <__multiply+0x10c>
 801060e:	9a01      	ldr	r2, [sp, #4]
 8010610:	50a9      	str	r1, [r5, r2]
 8010612:	3504      	adds	r5, #4
 8010614:	e79a      	b.n	801054c <__multiply+0x7c>
 8010616:	3e01      	subs	r6, #1
 8010618:	e79c      	b.n	8010554 <__multiply+0x84>
 801061a:	bf00      	nop
 801061c:	080126d0 	.word	0x080126d0
 8010620:	08012773 	.word	0x08012773

08010624 <__pow5mult>:
 8010624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010628:	4615      	mov	r5, r2
 801062a:	f012 0203 	ands.w	r2, r2, #3
 801062e:	4606      	mov	r6, r0
 8010630:	460f      	mov	r7, r1
 8010632:	d007      	beq.n	8010644 <__pow5mult+0x20>
 8010634:	4c25      	ldr	r4, [pc, #148]	; (80106cc <__pow5mult+0xa8>)
 8010636:	3a01      	subs	r2, #1
 8010638:	2300      	movs	r3, #0
 801063a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801063e:	f7ff fe51 	bl	80102e4 <__multadd>
 8010642:	4607      	mov	r7, r0
 8010644:	10ad      	asrs	r5, r5, #2
 8010646:	d03d      	beq.n	80106c4 <__pow5mult+0xa0>
 8010648:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801064a:	b97c      	cbnz	r4, 801066c <__pow5mult+0x48>
 801064c:	2010      	movs	r0, #16
 801064e:	f000 fbb9 	bl	8010dc4 <malloc>
 8010652:	4602      	mov	r2, r0
 8010654:	6270      	str	r0, [r6, #36]	; 0x24
 8010656:	b928      	cbnz	r0, 8010664 <__pow5mult+0x40>
 8010658:	4b1d      	ldr	r3, [pc, #116]	; (80106d0 <__pow5mult+0xac>)
 801065a:	481e      	ldr	r0, [pc, #120]	; (80106d4 <__pow5mult+0xb0>)
 801065c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010660:	f000 fb80 	bl	8010d64 <__assert_func>
 8010664:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010668:	6004      	str	r4, [r0, #0]
 801066a:	60c4      	str	r4, [r0, #12]
 801066c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010670:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010674:	b94c      	cbnz	r4, 801068a <__pow5mult+0x66>
 8010676:	f240 2171 	movw	r1, #625	; 0x271
 801067a:	4630      	mov	r0, r6
 801067c:	f7ff ff12 	bl	80104a4 <__i2b>
 8010680:	2300      	movs	r3, #0
 8010682:	f8c8 0008 	str.w	r0, [r8, #8]
 8010686:	4604      	mov	r4, r0
 8010688:	6003      	str	r3, [r0, #0]
 801068a:	f04f 0900 	mov.w	r9, #0
 801068e:	07eb      	lsls	r3, r5, #31
 8010690:	d50a      	bpl.n	80106a8 <__pow5mult+0x84>
 8010692:	4639      	mov	r1, r7
 8010694:	4622      	mov	r2, r4
 8010696:	4630      	mov	r0, r6
 8010698:	f7ff ff1a 	bl	80104d0 <__multiply>
 801069c:	4639      	mov	r1, r7
 801069e:	4680      	mov	r8, r0
 80106a0:	4630      	mov	r0, r6
 80106a2:	f7ff fdfd 	bl	80102a0 <_Bfree>
 80106a6:	4647      	mov	r7, r8
 80106a8:	106d      	asrs	r5, r5, #1
 80106aa:	d00b      	beq.n	80106c4 <__pow5mult+0xa0>
 80106ac:	6820      	ldr	r0, [r4, #0]
 80106ae:	b938      	cbnz	r0, 80106c0 <__pow5mult+0x9c>
 80106b0:	4622      	mov	r2, r4
 80106b2:	4621      	mov	r1, r4
 80106b4:	4630      	mov	r0, r6
 80106b6:	f7ff ff0b 	bl	80104d0 <__multiply>
 80106ba:	6020      	str	r0, [r4, #0]
 80106bc:	f8c0 9000 	str.w	r9, [r0]
 80106c0:	4604      	mov	r4, r0
 80106c2:	e7e4      	b.n	801068e <__pow5mult+0x6a>
 80106c4:	4638      	mov	r0, r7
 80106c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106ca:	bf00      	nop
 80106cc:	080128c0 	.word	0x080128c0
 80106d0:	0801275c 	.word	0x0801275c
 80106d4:	08012773 	.word	0x08012773

080106d8 <__lshift>:
 80106d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106dc:	460c      	mov	r4, r1
 80106de:	6849      	ldr	r1, [r1, #4]
 80106e0:	6923      	ldr	r3, [r4, #16]
 80106e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80106e6:	68a3      	ldr	r3, [r4, #8]
 80106e8:	4607      	mov	r7, r0
 80106ea:	4691      	mov	r9, r2
 80106ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80106f0:	f108 0601 	add.w	r6, r8, #1
 80106f4:	42b3      	cmp	r3, r6
 80106f6:	db0b      	blt.n	8010710 <__lshift+0x38>
 80106f8:	4638      	mov	r0, r7
 80106fa:	f7ff fd91 	bl	8010220 <_Balloc>
 80106fe:	4605      	mov	r5, r0
 8010700:	b948      	cbnz	r0, 8010716 <__lshift+0x3e>
 8010702:	4602      	mov	r2, r0
 8010704:	4b2a      	ldr	r3, [pc, #168]	; (80107b0 <__lshift+0xd8>)
 8010706:	482b      	ldr	r0, [pc, #172]	; (80107b4 <__lshift+0xdc>)
 8010708:	f240 11d9 	movw	r1, #473	; 0x1d9
 801070c:	f000 fb2a 	bl	8010d64 <__assert_func>
 8010710:	3101      	adds	r1, #1
 8010712:	005b      	lsls	r3, r3, #1
 8010714:	e7ee      	b.n	80106f4 <__lshift+0x1c>
 8010716:	2300      	movs	r3, #0
 8010718:	f100 0114 	add.w	r1, r0, #20
 801071c:	f100 0210 	add.w	r2, r0, #16
 8010720:	4618      	mov	r0, r3
 8010722:	4553      	cmp	r3, sl
 8010724:	db37      	blt.n	8010796 <__lshift+0xbe>
 8010726:	6920      	ldr	r0, [r4, #16]
 8010728:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801072c:	f104 0314 	add.w	r3, r4, #20
 8010730:	f019 091f 	ands.w	r9, r9, #31
 8010734:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010738:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801073c:	d02f      	beq.n	801079e <__lshift+0xc6>
 801073e:	f1c9 0e20 	rsb	lr, r9, #32
 8010742:	468a      	mov	sl, r1
 8010744:	f04f 0c00 	mov.w	ip, #0
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	fa02 f209 	lsl.w	r2, r2, r9
 801074e:	ea42 020c 	orr.w	r2, r2, ip
 8010752:	f84a 2b04 	str.w	r2, [sl], #4
 8010756:	f853 2b04 	ldr.w	r2, [r3], #4
 801075a:	4298      	cmp	r0, r3
 801075c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010760:	d8f2      	bhi.n	8010748 <__lshift+0x70>
 8010762:	1b03      	subs	r3, r0, r4
 8010764:	3b15      	subs	r3, #21
 8010766:	f023 0303 	bic.w	r3, r3, #3
 801076a:	3304      	adds	r3, #4
 801076c:	f104 0215 	add.w	r2, r4, #21
 8010770:	4290      	cmp	r0, r2
 8010772:	bf38      	it	cc
 8010774:	2304      	movcc	r3, #4
 8010776:	f841 c003 	str.w	ip, [r1, r3]
 801077a:	f1bc 0f00 	cmp.w	ip, #0
 801077e:	d001      	beq.n	8010784 <__lshift+0xac>
 8010780:	f108 0602 	add.w	r6, r8, #2
 8010784:	3e01      	subs	r6, #1
 8010786:	4638      	mov	r0, r7
 8010788:	612e      	str	r6, [r5, #16]
 801078a:	4621      	mov	r1, r4
 801078c:	f7ff fd88 	bl	80102a0 <_Bfree>
 8010790:	4628      	mov	r0, r5
 8010792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010796:	f842 0f04 	str.w	r0, [r2, #4]!
 801079a:	3301      	adds	r3, #1
 801079c:	e7c1      	b.n	8010722 <__lshift+0x4a>
 801079e:	3904      	subs	r1, #4
 80107a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80107a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80107a8:	4298      	cmp	r0, r3
 80107aa:	d8f9      	bhi.n	80107a0 <__lshift+0xc8>
 80107ac:	e7ea      	b.n	8010784 <__lshift+0xac>
 80107ae:	bf00      	nop
 80107b0:	080126d0 	.word	0x080126d0
 80107b4:	08012773 	.word	0x08012773

080107b8 <__mcmp>:
 80107b8:	b530      	push	{r4, r5, lr}
 80107ba:	6902      	ldr	r2, [r0, #16]
 80107bc:	690c      	ldr	r4, [r1, #16]
 80107be:	1b12      	subs	r2, r2, r4
 80107c0:	d10e      	bne.n	80107e0 <__mcmp+0x28>
 80107c2:	f100 0314 	add.w	r3, r0, #20
 80107c6:	3114      	adds	r1, #20
 80107c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80107cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80107d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80107d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80107d8:	42a5      	cmp	r5, r4
 80107da:	d003      	beq.n	80107e4 <__mcmp+0x2c>
 80107dc:	d305      	bcc.n	80107ea <__mcmp+0x32>
 80107de:	2201      	movs	r2, #1
 80107e0:	4610      	mov	r0, r2
 80107e2:	bd30      	pop	{r4, r5, pc}
 80107e4:	4283      	cmp	r3, r0
 80107e6:	d3f3      	bcc.n	80107d0 <__mcmp+0x18>
 80107e8:	e7fa      	b.n	80107e0 <__mcmp+0x28>
 80107ea:	f04f 32ff 	mov.w	r2, #4294967295
 80107ee:	e7f7      	b.n	80107e0 <__mcmp+0x28>

080107f0 <__mdiff>:
 80107f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f4:	460c      	mov	r4, r1
 80107f6:	4606      	mov	r6, r0
 80107f8:	4611      	mov	r1, r2
 80107fa:	4620      	mov	r0, r4
 80107fc:	4690      	mov	r8, r2
 80107fe:	f7ff ffdb 	bl	80107b8 <__mcmp>
 8010802:	1e05      	subs	r5, r0, #0
 8010804:	d110      	bne.n	8010828 <__mdiff+0x38>
 8010806:	4629      	mov	r1, r5
 8010808:	4630      	mov	r0, r6
 801080a:	f7ff fd09 	bl	8010220 <_Balloc>
 801080e:	b930      	cbnz	r0, 801081e <__mdiff+0x2e>
 8010810:	4b3a      	ldr	r3, [pc, #232]	; (80108fc <__mdiff+0x10c>)
 8010812:	4602      	mov	r2, r0
 8010814:	f240 2132 	movw	r1, #562	; 0x232
 8010818:	4839      	ldr	r0, [pc, #228]	; (8010900 <__mdiff+0x110>)
 801081a:	f000 faa3 	bl	8010d64 <__assert_func>
 801081e:	2301      	movs	r3, #1
 8010820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010828:	bfa4      	itt	ge
 801082a:	4643      	movge	r3, r8
 801082c:	46a0      	movge	r8, r4
 801082e:	4630      	mov	r0, r6
 8010830:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010834:	bfa6      	itte	ge
 8010836:	461c      	movge	r4, r3
 8010838:	2500      	movge	r5, #0
 801083a:	2501      	movlt	r5, #1
 801083c:	f7ff fcf0 	bl	8010220 <_Balloc>
 8010840:	b920      	cbnz	r0, 801084c <__mdiff+0x5c>
 8010842:	4b2e      	ldr	r3, [pc, #184]	; (80108fc <__mdiff+0x10c>)
 8010844:	4602      	mov	r2, r0
 8010846:	f44f 7110 	mov.w	r1, #576	; 0x240
 801084a:	e7e5      	b.n	8010818 <__mdiff+0x28>
 801084c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010850:	6926      	ldr	r6, [r4, #16]
 8010852:	60c5      	str	r5, [r0, #12]
 8010854:	f104 0914 	add.w	r9, r4, #20
 8010858:	f108 0514 	add.w	r5, r8, #20
 801085c:	f100 0e14 	add.w	lr, r0, #20
 8010860:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010864:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010868:	f108 0210 	add.w	r2, r8, #16
 801086c:	46f2      	mov	sl, lr
 801086e:	2100      	movs	r1, #0
 8010870:	f859 3b04 	ldr.w	r3, [r9], #4
 8010874:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010878:	fa1f f883 	uxth.w	r8, r3
 801087c:	fa11 f18b 	uxtah	r1, r1, fp
 8010880:	0c1b      	lsrs	r3, r3, #16
 8010882:	eba1 0808 	sub.w	r8, r1, r8
 8010886:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801088a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801088e:	fa1f f888 	uxth.w	r8, r8
 8010892:	1419      	asrs	r1, r3, #16
 8010894:	454e      	cmp	r6, r9
 8010896:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801089a:	f84a 3b04 	str.w	r3, [sl], #4
 801089e:	d8e7      	bhi.n	8010870 <__mdiff+0x80>
 80108a0:	1b33      	subs	r3, r6, r4
 80108a2:	3b15      	subs	r3, #21
 80108a4:	f023 0303 	bic.w	r3, r3, #3
 80108a8:	3304      	adds	r3, #4
 80108aa:	3415      	adds	r4, #21
 80108ac:	42a6      	cmp	r6, r4
 80108ae:	bf38      	it	cc
 80108b0:	2304      	movcc	r3, #4
 80108b2:	441d      	add	r5, r3
 80108b4:	4473      	add	r3, lr
 80108b6:	469e      	mov	lr, r3
 80108b8:	462e      	mov	r6, r5
 80108ba:	4566      	cmp	r6, ip
 80108bc:	d30e      	bcc.n	80108dc <__mdiff+0xec>
 80108be:	f10c 0203 	add.w	r2, ip, #3
 80108c2:	1b52      	subs	r2, r2, r5
 80108c4:	f022 0203 	bic.w	r2, r2, #3
 80108c8:	3d03      	subs	r5, #3
 80108ca:	45ac      	cmp	ip, r5
 80108cc:	bf38      	it	cc
 80108ce:	2200      	movcc	r2, #0
 80108d0:	441a      	add	r2, r3
 80108d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80108d6:	b17b      	cbz	r3, 80108f8 <__mdiff+0x108>
 80108d8:	6107      	str	r7, [r0, #16]
 80108da:	e7a3      	b.n	8010824 <__mdiff+0x34>
 80108dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80108e0:	fa11 f288 	uxtah	r2, r1, r8
 80108e4:	1414      	asrs	r4, r2, #16
 80108e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80108ea:	b292      	uxth	r2, r2
 80108ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80108f0:	f84e 2b04 	str.w	r2, [lr], #4
 80108f4:	1421      	asrs	r1, r4, #16
 80108f6:	e7e0      	b.n	80108ba <__mdiff+0xca>
 80108f8:	3f01      	subs	r7, #1
 80108fa:	e7ea      	b.n	80108d2 <__mdiff+0xe2>
 80108fc:	080126d0 	.word	0x080126d0
 8010900:	08012773 	.word	0x08012773

08010904 <__ulp>:
 8010904:	b082      	sub	sp, #8
 8010906:	ed8d 0b00 	vstr	d0, [sp]
 801090a:	9b01      	ldr	r3, [sp, #4]
 801090c:	4912      	ldr	r1, [pc, #72]	; (8010958 <__ulp+0x54>)
 801090e:	4019      	ands	r1, r3
 8010910:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010914:	2900      	cmp	r1, #0
 8010916:	dd05      	ble.n	8010924 <__ulp+0x20>
 8010918:	2200      	movs	r2, #0
 801091a:	460b      	mov	r3, r1
 801091c:	ec43 2b10 	vmov	d0, r2, r3
 8010920:	b002      	add	sp, #8
 8010922:	4770      	bx	lr
 8010924:	4249      	negs	r1, r1
 8010926:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801092a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801092e:	f04f 0200 	mov.w	r2, #0
 8010932:	f04f 0300 	mov.w	r3, #0
 8010936:	da04      	bge.n	8010942 <__ulp+0x3e>
 8010938:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801093c:	fa41 f300 	asr.w	r3, r1, r0
 8010940:	e7ec      	b.n	801091c <__ulp+0x18>
 8010942:	f1a0 0114 	sub.w	r1, r0, #20
 8010946:	291e      	cmp	r1, #30
 8010948:	bfda      	itte	le
 801094a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801094e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010952:	2101      	movgt	r1, #1
 8010954:	460a      	mov	r2, r1
 8010956:	e7e1      	b.n	801091c <__ulp+0x18>
 8010958:	7ff00000 	.word	0x7ff00000

0801095c <__b2d>:
 801095c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801095e:	6905      	ldr	r5, [r0, #16]
 8010960:	f100 0714 	add.w	r7, r0, #20
 8010964:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010968:	1f2e      	subs	r6, r5, #4
 801096a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801096e:	4620      	mov	r0, r4
 8010970:	f7ff fd48 	bl	8010404 <__hi0bits>
 8010974:	f1c0 0320 	rsb	r3, r0, #32
 8010978:	280a      	cmp	r0, #10
 801097a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80109f8 <__b2d+0x9c>
 801097e:	600b      	str	r3, [r1, #0]
 8010980:	dc14      	bgt.n	80109ac <__b2d+0x50>
 8010982:	f1c0 0e0b 	rsb	lr, r0, #11
 8010986:	fa24 f10e 	lsr.w	r1, r4, lr
 801098a:	42b7      	cmp	r7, r6
 801098c:	ea41 030c 	orr.w	r3, r1, ip
 8010990:	bf34      	ite	cc
 8010992:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010996:	2100      	movcs	r1, #0
 8010998:	3015      	adds	r0, #21
 801099a:	fa04 f000 	lsl.w	r0, r4, r0
 801099e:	fa21 f10e 	lsr.w	r1, r1, lr
 80109a2:	ea40 0201 	orr.w	r2, r0, r1
 80109a6:	ec43 2b10 	vmov	d0, r2, r3
 80109aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109ac:	42b7      	cmp	r7, r6
 80109ae:	bf3a      	itte	cc
 80109b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80109b4:	f1a5 0608 	subcc.w	r6, r5, #8
 80109b8:	2100      	movcs	r1, #0
 80109ba:	380b      	subs	r0, #11
 80109bc:	d017      	beq.n	80109ee <__b2d+0x92>
 80109be:	f1c0 0c20 	rsb	ip, r0, #32
 80109c2:	fa04 f500 	lsl.w	r5, r4, r0
 80109c6:	42be      	cmp	r6, r7
 80109c8:	fa21 f40c 	lsr.w	r4, r1, ip
 80109cc:	ea45 0504 	orr.w	r5, r5, r4
 80109d0:	bf8c      	ite	hi
 80109d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80109d6:	2400      	movls	r4, #0
 80109d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80109dc:	fa01 f000 	lsl.w	r0, r1, r0
 80109e0:	fa24 f40c 	lsr.w	r4, r4, ip
 80109e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80109e8:	ea40 0204 	orr.w	r2, r0, r4
 80109ec:	e7db      	b.n	80109a6 <__b2d+0x4a>
 80109ee:	ea44 030c 	orr.w	r3, r4, ip
 80109f2:	460a      	mov	r2, r1
 80109f4:	e7d7      	b.n	80109a6 <__b2d+0x4a>
 80109f6:	bf00      	nop
 80109f8:	3ff00000 	.word	0x3ff00000

080109fc <__d2b>:
 80109fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010a00:	4689      	mov	r9, r1
 8010a02:	2101      	movs	r1, #1
 8010a04:	ec57 6b10 	vmov	r6, r7, d0
 8010a08:	4690      	mov	r8, r2
 8010a0a:	f7ff fc09 	bl	8010220 <_Balloc>
 8010a0e:	4604      	mov	r4, r0
 8010a10:	b930      	cbnz	r0, 8010a20 <__d2b+0x24>
 8010a12:	4602      	mov	r2, r0
 8010a14:	4b25      	ldr	r3, [pc, #148]	; (8010aac <__d2b+0xb0>)
 8010a16:	4826      	ldr	r0, [pc, #152]	; (8010ab0 <__d2b+0xb4>)
 8010a18:	f240 310a 	movw	r1, #778	; 0x30a
 8010a1c:	f000 f9a2 	bl	8010d64 <__assert_func>
 8010a20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010a24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010a28:	bb35      	cbnz	r5, 8010a78 <__d2b+0x7c>
 8010a2a:	2e00      	cmp	r6, #0
 8010a2c:	9301      	str	r3, [sp, #4]
 8010a2e:	d028      	beq.n	8010a82 <__d2b+0x86>
 8010a30:	4668      	mov	r0, sp
 8010a32:	9600      	str	r6, [sp, #0]
 8010a34:	f7ff fd06 	bl	8010444 <__lo0bits>
 8010a38:	9900      	ldr	r1, [sp, #0]
 8010a3a:	b300      	cbz	r0, 8010a7e <__d2b+0x82>
 8010a3c:	9a01      	ldr	r2, [sp, #4]
 8010a3e:	f1c0 0320 	rsb	r3, r0, #32
 8010a42:	fa02 f303 	lsl.w	r3, r2, r3
 8010a46:	430b      	orrs	r3, r1
 8010a48:	40c2      	lsrs	r2, r0
 8010a4a:	6163      	str	r3, [r4, #20]
 8010a4c:	9201      	str	r2, [sp, #4]
 8010a4e:	9b01      	ldr	r3, [sp, #4]
 8010a50:	61a3      	str	r3, [r4, #24]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	bf14      	ite	ne
 8010a56:	2202      	movne	r2, #2
 8010a58:	2201      	moveq	r2, #1
 8010a5a:	6122      	str	r2, [r4, #16]
 8010a5c:	b1d5      	cbz	r5, 8010a94 <__d2b+0x98>
 8010a5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010a62:	4405      	add	r5, r0
 8010a64:	f8c9 5000 	str.w	r5, [r9]
 8010a68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010a6c:	f8c8 0000 	str.w	r0, [r8]
 8010a70:	4620      	mov	r0, r4
 8010a72:	b003      	add	sp, #12
 8010a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a7c:	e7d5      	b.n	8010a2a <__d2b+0x2e>
 8010a7e:	6161      	str	r1, [r4, #20]
 8010a80:	e7e5      	b.n	8010a4e <__d2b+0x52>
 8010a82:	a801      	add	r0, sp, #4
 8010a84:	f7ff fcde 	bl	8010444 <__lo0bits>
 8010a88:	9b01      	ldr	r3, [sp, #4]
 8010a8a:	6163      	str	r3, [r4, #20]
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	6122      	str	r2, [r4, #16]
 8010a90:	3020      	adds	r0, #32
 8010a92:	e7e3      	b.n	8010a5c <__d2b+0x60>
 8010a94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a9c:	f8c9 0000 	str.w	r0, [r9]
 8010aa0:	6918      	ldr	r0, [r3, #16]
 8010aa2:	f7ff fcaf 	bl	8010404 <__hi0bits>
 8010aa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010aaa:	e7df      	b.n	8010a6c <__d2b+0x70>
 8010aac:	080126d0 	.word	0x080126d0
 8010ab0:	08012773 	.word	0x08012773

08010ab4 <__ratio>:
 8010ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ab8:	4688      	mov	r8, r1
 8010aba:	4669      	mov	r1, sp
 8010abc:	4681      	mov	r9, r0
 8010abe:	f7ff ff4d 	bl	801095c <__b2d>
 8010ac2:	a901      	add	r1, sp, #4
 8010ac4:	4640      	mov	r0, r8
 8010ac6:	ec55 4b10 	vmov	r4, r5, d0
 8010aca:	ee10 aa10 	vmov	sl, s0
 8010ace:	f7ff ff45 	bl	801095c <__b2d>
 8010ad2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010ad6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010ada:	1a59      	subs	r1, r3, r1
 8010adc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ae0:	1ad3      	subs	r3, r2, r3
 8010ae2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010ae6:	ec57 6b10 	vmov	r6, r7, d0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	bfd6      	itet	le
 8010aee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010af2:	462a      	movgt	r2, r5
 8010af4:	463a      	movle	r2, r7
 8010af6:	46ab      	mov	fp, r5
 8010af8:	bfd6      	itet	le
 8010afa:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010afe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010b02:	ee00 3a90 	vmovle	s1, r3
 8010b06:	ec4b ab17 	vmov	d7, sl, fp
 8010b0a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010b0e:	b003      	add	sp, #12
 8010b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b14 <__copybits>:
 8010b14:	3901      	subs	r1, #1
 8010b16:	b570      	push	{r4, r5, r6, lr}
 8010b18:	1149      	asrs	r1, r1, #5
 8010b1a:	6914      	ldr	r4, [r2, #16]
 8010b1c:	3101      	adds	r1, #1
 8010b1e:	f102 0314 	add.w	r3, r2, #20
 8010b22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010b26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010b2a:	1f05      	subs	r5, r0, #4
 8010b2c:	42a3      	cmp	r3, r4
 8010b2e:	d30c      	bcc.n	8010b4a <__copybits+0x36>
 8010b30:	1aa3      	subs	r3, r4, r2
 8010b32:	3b11      	subs	r3, #17
 8010b34:	f023 0303 	bic.w	r3, r3, #3
 8010b38:	3211      	adds	r2, #17
 8010b3a:	42a2      	cmp	r2, r4
 8010b3c:	bf88      	it	hi
 8010b3e:	2300      	movhi	r3, #0
 8010b40:	4418      	add	r0, r3
 8010b42:	2300      	movs	r3, #0
 8010b44:	4288      	cmp	r0, r1
 8010b46:	d305      	bcc.n	8010b54 <__copybits+0x40>
 8010b48:	bd70      	pop	{r4, r5, r6, pc}
 8010b4a:	f853 6b04 	ldr.w	r6, [r3], #4
 8010b4e:	f845 6f04 	str.w	r6, [r5, #4]!
 8010b52:	e7eb      	b.n	8010b2c <__copybits+0x18>
 8010b54:	f840 3b04 	str.w	r3, [r0], #4
 8010b58:	e7f4      	b.n	8010b44 <__copybits+0x30>

08010b5a <__any_on>:
 8010b5a:	f100 0214 	add.w	r2, r0, #20
 8010b5e:	6900      	ldr	r0, [r0, #16]
 8010b60:	114b      	asrs	r3, r1, #5
 8010b62:	4298      	cmp	r0, r3
 8010b64:	b510      	push	{r4, lr}
 8010b66:	db11      	blt.n	8010b8c <__any_on+0x32>
 8010b68:	dd0a      	ble.n	8010b80 <__any_on+0x26>
 8010b6a:	f011 011f 	ands.w	r1, r1, #31
 8010b6e:	d007      	beq.n	8010b80 <__any_on+0x26>
 8010b70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010b74:	fa24 f001 	lsr.w	r0, r4, r1
 8010b78:	fa00 f101 	lsl.w	r1, r0, r1
 8010b7c:	428c      	cmp	r4, r1
 8010b7e:	d10b      	bne.n	8010b98 <__any_on+0x3e>
 8010b80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b84:	4293      	cmp	r3, r2
 8010b86:	d803      	bhi.n	8010b90 <__any_on+0x36>
 8010b88:	2000      	movs	r0, #0
 8010b8a:	bd10      	pop	{r4, pc}
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	e7f7      	b.n	8010b80 <__any_on+0x26>
 8010b90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010b94:	2900      	cmp	r1, #0
 8010b96:	d0f5      	beq.n	8010b84 <__any_on+0x2a>
 8010b98:	2001      	movs	r0, #1
 8010b9a:	e7f6      	b.n	8010b8a <__any_on+0x30>

08010b9c <_calloc_r>:
 8010b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b9e:	fba1 2402 	umull	r2, r4, r1, r2
 8010ba2:	b94c      	cbnz	r4, 8010bb8 <_calloc_r+0x1c>
 8010ba4:	4611      	mov	r1, r2
 8010ba6:	9201      	str	r2, [sp, #4]
 8010ba8:	f000 f82e 	bl	8010c08 <_malloc_r>
 8010bac:	9a01      	ldr	r2, [sp, #4]
 8010bae:	4605      	mov	r5, r0
 8010bb0:	b930      	cbnz	r0, 8010bc0 <_calloc_r+0x24>
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	b003      	add	sp, #12
 8010bb6:	bd30      	pop	{r4, r5, pc}
 8010bb8:	220c      	movs	r2, #12
 8010bba:	6002      	str	r2, [r0, #0]
 8010bbc:	2500      	movs	r5, #0
 8010bbe:	e7f8      	b.n	8010bb2 <_calloc_r+0x16>
 8010bc0:	4621      	mov	r1, r4
 8010bc2:	f7fe f9c5 	bl	800ef50 <memset>
 8010bc6:	e7f4      	b.n	8010bb2 <_calloc_r+0x16>

08010bc8 <sbrk_aligned>:
 8010bc8:	b570      	push	{r4, r5, r6, lr}
 8010bca:	4e0e      	ldr	r6, [pc, #56]	; (8010c04 <sbrk_aligned+0x3c>)
 8010bcc:	460c      	mov	r4, r1
 8010bce:	6831      	ldr	r1, [r6, #0]
 8010bd0:	4605      	mov	r5, r0
 8010bd2:	b911      	cbnz	r1, 8010bda <sbrk_aligned+0x12>
 8010bd4:	f000 f894 	bl	8010d00 <_sbrk_r>
 8010bd8:	6030      	str	r0, [r6, #0]
 8010bda:	4621      	mov	r1, r4
 8010bdc:	4628      	mov	r0, r5
 8010bde:	f000 f88f 	bl	8010d00 <_sbrk_r>
 8010be2:	1c43      	adds	r3, r0, #1
 8010be4:	d00a      	beq.n	8010bfc <sbrk_aligned+0x34>
 8010be6:	1cc4      	adds	r4, r0, #3
 8010be8:	f024 0403 	bic.w	r4, r4, #3
 8010bec:	42a0      	cmp	r0, r4
 8010bee:	d007      	beq.n	8010c00 <sbrk_aligned+0x38>
 8010bf0:	1a21      	subs	r1, r4, r0
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	f000 f884 	bl	8010d00 <_sbrk_r>
 8010bf8:	3001      	adds	r0, #1
 8010bfa:	d101      	bne.n	8010c00 <sbrk_aligned+0x38>
 8010bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8010c00:	4620      	mov	r0, r4
 8010c02:	bd70      	pop	{r4, r5, r6, pc}
 8010c04:	24000d88 	.word	0x24000d88

08010c08 <_malloc_r>:
 8010c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c0c:	1ccd      	adds	r5, r1, #3
 8010c0e:	f025 0503 	bic.w	r5, r5, #3
 8010c12:	3508      	adds	r5, #8
 8010c14:	2d0c      	cmp	r5, #12
 8010c16:	bf38      	it	cc
 8010c18:	250c      	movcc	r5, #12
 8010c1a:	2d00      	cmp	r5, #0
 8010c1c:	4607      	mov	r7, r0
 8010c1e:	db01      	blt.n	8010c24 <_malloc_r+0x1c>
 8010c20:	42a9      	cmp	r1, r5
 8010c22:	d905      	bls.n	8010c30 <_malloc_r+0x28>
 8010c24:	230c      	movs	r3, #12
 8010c26:	603b      	str	r3, [r7, #0]
 8010c28:	2600      	movs	r6, #0
 8010c2a:	4630      	mov	r0, r6
 8010c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c30:	4e2e      	ldr	r6, [pc, #184]	; (8010cec <_malloc_r+0xe4>)
 8010c32:	f000 f8cf 	bl	8010dd4 <__malloc_lock>
 8010c36:	6833      	ldr	r3, [r6, #0]
 8010c38:	461c      	mov	r4, r3
 8010c3a:	bb34      	cbnz	r4, 8010c8a <_malloc_r+0x82>
 8010c3c:	4629      	mov	r1, r5
 8010c3e:	4638      	mov	r0, r7
 8010c40:	f7ff ffc2 	bl	8010bc8 <sbrk_aligned>
 8010c44:	1c43      	adds	r3, r0, #1
 8010c46:	4604      	mov	r4, r0
 8010c48:	d14d      	bne.n	8010ce6 <_malloc_r+0xde>
 8010c4a:	6834      	ldr	r4, [r6, #0]
 8010c4c:	4626      	mov	r6, r4
 8010c4e:	2e00      	cmp	r6, #0
 8010c50:	d140      	bne.n	8010cd4 <_malloc_r+0xcc>
 8010c52:	6823      	ldr	r3, [r4, #0]
 8010c54:	4631      	mov	r1, r6
 8010c56:	4638      	mov	r0, r7
 8010c58:	eb04 0803 	add.w	r8, r4, r3
 8010c5c:	f000 f850 	bl	8010d00 <_sbrk_r>
 8010c60:	4580      	cmp	r8, r0
 8010c62:	d13a      	bne.n	8010cda <_malloc_r+0xd2>
 8010c64:	6821      	ldr	r1, [r4, #0]
 8010c66:	3503      	adds	r5, #3
 8010c68:	1a6d      	subs	r5, r5, r1
 8010c6a:	f025 0503 	bic.w	r5, r5, #3
 8010c6e:	3508      	adds	r5, #8
 8010c70:	2d0c      	cmp	r5, #12
 8010c72:	bf38      	it	cc
 8010c74:	250c      	movcc	r5, #12
 8010c76:	4629      	mov	r1, r5
 8010c78:	4638      	mov	r0, r7
 8010c7a:	f7ff ffa5 	bl	8010bc8 <sbrk_aligned>
 8010c7e:	3001      	adds	r0, #1
 8010c80:	d02b      	beq.n	8010cda <_malloc_r+0xd2>
 8010c82:	6823      	ldr	r3, [r4, #0]
 8010c84:	442b      	add	r3, r5
 8010c86:	6023      	str	r3, [r4, #0]
 8010c88:	e00e      	b.n	8010ca8 <_malloc_r+0xa0>
 8010c8a:	6822      	ldr	r2, [r4, #0]
 8010c8c:	1b52      	subs	r2, r2, r5
 8010c8e:	d41e      	bmi.n	8010cce <_malloc_r+0xc6>
 8010c90:	2a0b      	cmp	r2, #11
 8010c92:	d916      	bls.n	8010cc2 <_malloc_r+0xba>
 8010c94:	1961      	adds	r1, r4, r5
 8010c96:	42a3      	cmp	r3, r4
 8010c98:	6025      	str	r5, [r4, #0]
 8010c9a:	bf18      	it	ne
 8010c9c:	6059      	strne	r1, [r3, #4]
 8010c9e:	6863      	ldr	r3, [r4, #4]
 8010ca0:	bf08      	it	eq
 8010ca2:	6031      	streq	r1, [r6, #0]
 8010ca4:	5162      	str	r2, [r4, r5]
 8010ca6:	604b      	str	r3, [r1, #4]
 8010ca8:	4638      	mov	r0, r7
 8010caa:	f104 060b 	add.w	r6, r4, #11
 8010cae:	f000 f897 	bl	8010de0 <__malloc_unlock>
 8010cb2:	f026 0607 	bic.w	r6, r6, #7
 8010cb6:	1d23      	adds	r3, r4, #4
 8010cb8:	1af2      	subs	r2, r6, r3
 8010cba:	d0b6      	beq.n	8010c2a <_malloc_r+0x22>
 8010cbc:	1b9b      	subs	r3, r3, r6
 8010cbe:	50a3      	str	r3, [r4, r2]
 8010cc0:	e7b3      	b.n	8010c2a <_malloc_r+0x22>
 8010cc2:	6862      	ldr	r2, [r4, #4]
 8010cc4:	42a3      	cmp	r3, r4
 8010cc6:	bf0c      	ite	eq
 8010cc8:	6032      	streq	r2, [r6, #0]
 8010cca:	605a      	strne	r2, [r3, #4]
 8010ccc:	e7ec      	b.n	8010ca8 <_malloc_r+0xa0>
 8010cce:	4623      	mov	r3, r4
 8010cd0:	6864      	ldr	r4, [r4, #4]
 8010cd2:	e7b2      	b.n	8010c3a <_malloc_r+0x32>
 8010cd4:	4634      	mov	r4, r6
 8010cd6:	6876      	ldr	r6, [r6, #4]
 8010cd8:	e7b9      	b.n	8010c4e <_malloc_r+0x46>
 8010cda:	230c      	movs	r3, #12
 8010cdc:	603b      	str	r3, [r7, #0]
 8010cde:	4638      	mov	r0, r7
 8010ce0:	f000 f87e 	bl	8010de0 <__malloc_unlock>
 8010ce4:	e7a1      	b.n	8010c2a <_malloc_r+0x22>
 8010ce6:	6025      	str	r5, [r4, #0]
 8010ce8:	e7de      	b.n	8010ca8 <_malloc_r+0xa0>
 8010cea:	bf00      	nop
 8010cec:	24000d84 	.word	0x24000d84

08010cf0 <nan>:
 8010cf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010cf8 <nan+0x8>
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop
 8010cf8:	00000000 	.word	0x00000000
 8010cfc:	7ff80000 	.word	0x7ff80000

08010d00 <_sbrk_r>:
 8010d00:	b538      	push	{r3, r4, r5, lr}
 8010d02:	4d06      	ldr	r5, [pc, #24]	; (8010d1c <_sbrk_r+0x1c>)
 8010d04:	2300      	movs	r3, #0
 8010d06:	4604      	mov	r4, r0
 8010d08:	4608      	mov	r0, r1
 8010d0a:	602b      	str	r3, [r5, #0]
 8010d0c:	f7f3 fa46 	bl	800419c <_sbrk>
 8010d10:	1c43      	adds	r3, r0, #1
 8010d12:	d102      	bne.n	8010d1a <_sbrk_r+0x1a>
 8010d14:	682b      	ldr	r3, [r5, #0]
 8010d16:	b103      	cbz	r3, 8010d1a <_sbrk_r+0x1a>
 8010d18:	6023      	str	r3, [r4, #0]
 8010d1a:	bd38      	pop	{r3, r4, r5, pc}
 8010d1c:	24000d8c 	.word	0x24000d8c

08010d20 <strncmp>:
 8010d20:	b510      	push	{r4, lr}
 8010d22:	b17a      	cbz	r2, 8010d44 <strncmp+0x24>
 8010d24:	4603      	mov	r3, r0
 8010d26:	3901      	subs	r1, #1
 8010d28:	1884      	adds	r4, r0, r2
 8010d2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010d32:	4290      	cmp	r0, r2
 8010d34:	d101      	bne.n	8010d3a <strncmp+0x1a>
 8010d36:	42a3      	cmp	r3, r4
 8010d38:	d101      	bne.n	8010d3e <strncmp+0x1e>
 8010d3a:	1a80      	subs	r0, r0, r2
 8010d3c:	bd10      	pop	{r4, pc}
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	d1f3      	bne.n	8010d2a <strncmp+0xa>
 8010d42:	e7fa      	b.n	8010d3a <strncmp+0x1a>
 8010d44:	4610      	mov	r0, r2
 8010d46:	e7f9      	b.n	8010d3c <strncmp+0x1c>

08010d48 <__ascii_wctomb>:
 8010d48:	b149      	cbz	r1, 8010d5e <__ascii_wctomb+0x16>
 8010d4a:	2aff      	cmp	r2, #255	; 0xff
 8010d4c:	bf85      	ittet	hi
 8010d4e:	238a      	movhi	r3, #138	; 0x8a
 8010d50:	6003      	strhi	r3, [r0, #0]
 8010d52:	700a      	strbls	r2, [r1, #0]
 8010d54:	f04f 30ff 	movhi.w	r0, #4294967295
 8010d58:	bf98      	it	ls
 8010d5a:	2001      	movls	r0, #1
 8010d5c:	4770      	bx	lr
 8010d5e:	4608      	mov	r0, r1
 8010d60:	4770      	bx	lr
	...

08010d64 <__assert_func>:
 8010d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d66:	4614      	mov	r4, r2
 8010d68:	461a      	mov	r2, r3
 8010d6a:	4b09      	ldr	r3, [pc, #36]	; (8010d90 <__assert_func+0x2c>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4605      	mov	r5, r0
 8010d70:	68d8      	ldr	r0, [r3, #12]
 8010d72:	b14c      	cbz	r4, 8010d88 <__assert_func+0x24>
 8010d74:	4b07      	ldr	r3, [pc, #28]	; (8010d94 <__assert_func+0x30>)
 8010d76:	9100      	str	r1, [sp, #0]
 8010d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d7c:	4906      	ldr	r1, [pc, #24]	; (8010d98 <__assert_func+0x34>)
 8010d7e:	462b      	mov	r3, r5
 8010d80:	f000 f80e 	bl	8010da0 <fiprintf>
 8010d84:	f000 fc2c 	bl	80115e0 <abort>
 8010d88:	4b04      	ldr	r3, [pc, #16]	; (8010d9c <__assert_func+0x38>)
 8010d8a:	461c      	mov	r4, r3
 8010d8c:	e7f3      	b.n	8010d76 <__assert_func+0x12>
 8010d8e:	bf00      	nop
 8010d90:	240000b0 	.word	0x240000b0
 8010d94:	080128cc 	.word	0x080128cc
 8010d98:	080128d9 	.word	0x080128d9
 8010d9c:	08012907 	.word	0x08012907

08010da0 <fiprintf>:
 8010da0:	b40e      	push	{r1, r2, r3}
 8010da2:	b503      	push	{r0, r1, lr}
 8010da4:	4601      	mov	r1, r0
 8010da6:	ab03      	add	r3, sp, #12
 8010da8:	4805      	ldr	r0, [pc, #20]	; (8010dc0 <fiprintf+0x20>)
 8010daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dae:	6800      	ldr	r0, [r0, #0]
 8010db0:	9301      	str	r3, [sp, #4]
 8010db2:	f000 f891 	bl	8010ed8 <_vfiprintf_r>
 8010db6:	b002      	add	sp, #8
 8010db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dbc:	b003      	add	sp, #12
 8010dbe:	4770      	bx	lr
 8010dc0:	240000b0 	.word	0x240000b0

08010dc4 <malloc>:
 8010dc4:	4b02      	ldr	r3, [pc, #8]	; (8010dd0 <malloc+0xc>)
 8010dc6:	4601      	mov	r1, r0
 8010dc8:	6818      	ldr	r0, [r3, #0]
 8010dca:	f7ff bf1d 	b.w	8010c08 <_malloc_r>
 8010dce:	bf00      	nop
 8010dd0:	240000b0 	.word	0x240000b0

08010dd4 <__malloc_lock>:
 8010dd4:	4801      	ldr	r0, [pc, #4]	; (8010ddc <__malloc_lock+0x8>)
 8010dd6:	f000 bdc3 	b.w	8011960 <__retarget_lock_acquire_recursive>
 8010dda:	bf00      	nop
 8010ddc:	24000d90 	.word	0x24000d90

08010de0 <__malloc_unlock>:
 8010de0:	4801      	ldr	r0, [pc, #4]	; (8010de8 <__malloc_unlock+0x8>)
 8010de2:	f000 bdbe 	b.w	8011962 <__retarget_lock_release_recursive>
 8010de6:	bf00      	nop
 8010de8:	24000d90 	.word	0x24000d90

08010dec <_free_r>:
 8010dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010dee:	2900      	cmp	r1, #0
 8010df0:	d044      	beq.n	8010e7c <_free_r+0x90>
 8010df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010df6:	9001      	str	r0, [sp, #4]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8010dfe:	bfb8      	it	lt
 8010e00:	18e4      	addlt	r4, r4, r3
 8010e02:	f7ff ffe7 	bl	8010dd4 <__malloc_lock>
 8010e06:	4a1e      	ldr	r2, [pc, #120]	; (8010e80 <_free_r+0x94>)
 8010e08:	9801      	ldr	r0, [sp, #4]
 8010e0a:	6813      	ldr	r3, [r2, #0]
 8010e0c:	b933      	cbnz	r3, 8010e1c <_free_r+0x30>
 8010e0e:	6063      	str	r3, [r4, #4]
 8010e10:	6014      	str	r4, [r2, #0]
 8010e12:	b003      	add	sp, #12
 8010e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e18:	f7ff bfe2 	b.w	8010de0 <__malloc_unlock>
 8010e1c:	42a3      	cmp	r3, r4
 8010e1e:	d908      	bls.n	8010e32 <_free_r+0x46>
 8010e20:	6825      	ldr	r5, [r4, #0]
 8010e22:	1961      	adds	r1, r4, r5
 8010e24:	428b      	cmp	r3, r1
 8010e26:	bf01      	itttt	eq
 8010e28:	6819      	ldreq	r1, [r3, #0]
 8010e2a:	685b      	ldreq	r3, [r3, #4]
 8010e2c:	1949      	addeq	r1, r1, r5
 8010e2e:	6021      	streq	r1, [r4, #0]
 8010e30:	e7ed      	b.n	8010e0e <_free_r+0x22>
 8010e32:	461a      	mov	r2, r3
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	b10b      	cbz	r3, 8010e3c <_free_r+0x50>
 8010e38:	42a3      	cmp	r3, r4
 8010e3a:	d9fa      	bls.n	8010e32 <_free_r+0x46>
 8010e3c:	6811      	ldr	r1, [r2, #0]
 8010e3e:	1855      	adds	r5, r2, r1
 8010e40:	42a5      	cmp	r5, r4
 8010e42:	d10b      	bne.n	8010e5c <_free_r+0x70>
 8010e44:	6824      	ldr	r4, [r4, #0]
 8010e46:	4421      	add	r1, r4
 8010e48:	1854      	adds	r4, r2, r1
 8010e4a:	42a3      	cmp	r3, r4
 8010e4c:	6011      	str	r1, [r2, #0]
 8010e4e:	d1e0      	bne.n	8010e12 <_free_r+0x26>
 8010e50:	681c      	ldr	r4, [r3, #0]
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	6053      	str	r3, [r2, #4]
 8010e56:	4421      	add	r1, r4
 8010e58:	6011      	str	r1, [r2, #0]
 8010e5a:	e7da      	b.n	8010e12 <_free_r+0x26>
 8010e5c:	d902      	bls.n	8010e64 <_free_r+0x78>
 8010e5e:	230c      	movs	r3, #12
 8010e60:	6003      	str	r3, [r0, #0]
 8010e62:	e7d6      	b.n	8010e12 <_free_r+0x26>
 8010e64:	6825      	ldr	r5, [r4, #0]
 8010e66:	1961      	adds	r1, r4, r5
 8010e68:	428b      	cmp	r3, r1
 8010e6a:	bf04      	itt	eq
 8010e6c:	6819      	ldreq	r1, [r3, #0]
 8010e6e:	685b      	ldreq	r3, [r3, #4]
 8010e70:	6063      	str	r3, [r4, #4]
 8010e72:	bf04      	itt	eq
 8010e74:	1949      	addeq	r1, r1, r5
 8010e76:	6021      	streq	r1, [r4, #0]
 8010e78:	6054      	str	r4, [r2, #4]
 8010e7a:	e7ca      	b.n	8010e12 <_free_r+0x26>
 8010e7c:	b003      	add	sp, #12
 8010e7e:	bd30      	pop	{r4, r5, pc}
 8010e80:	24000d84 	.word	0x24000d84

08010e84 <__sfputc_r>:
 8010e84:	6893      	ldr	r3, [r2, #8]
 8010e86:	3b01      	subs	r3, #1
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	b410      	push	{r4}
 8010e8c:	6093      	str	r3, [r2, #8]
 8010e8e:	da08      	bge.n	8010ea2 <__sfputc_r+0x1e>
 8010e90:	6994      	ldr	r4, [r2, #24]
 8010e92:	42a3      	cmp	r3, r4
 8010e94:	db01      	blt.n	8010e9a <__sfputc_r+0x16>
 8010e96:	290a      	cmp	r1, #10
 8010e98:	d103      	bne.n	8010ea2 <__sfputc_r+0x1e>
 8010e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e9e:	f000 badf 	b.w	8011460 <__swbuf_r>
 8010ea2:	6813      	ldr	r3, [r2, #0]
 8010ea4:	1c58      	adds	r0, r3, #1
 8010ea6:	6010      	str	r0, [r2, #0]
 8010ea8:	7019      	strb	r1, [r3, #0]
 8010eaa:	4608      	mov	r0, r1
 8010eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010eb0:	4770      	bx	lr

08010eb2 <__sfputs_r>:
 8010eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eb4:	4606      	mov	r6, r0
 8010eb6:	460f      	mov	r7, r1
 8010eb8:	4614      	mov	r4, r2
 8010eba:	18d5      	adds	r5, r2, r3
 8010ebc:	42ac      	cmp	r4, r5
 8010ebe:	d101      	bne.n	8010ec4 <__sfputs_r+0x12>
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	e007      	b.n	8010ed4 <__sfputs_r+0x22>
 8010ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ec8:	463a      	mov	r2, r7
 8010eca:	4630      	mov	r0, r6
 8010ecc:	f7ff ffda 	bl	8010e84 <__sfputc_r>
 8010ed0:	1c43      	adds	r3, r0, #1
 8010ed2:	d1f3      	bne.n	8010ebc <__sfputs_r+0xa>
 8010ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ed8 <_vfiprintf_r>:
 8010ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010edc:	460d      	mov	r5, r1
 8010ede:	b09d      	sub	sp, #116	; 0x74
 8010ee0:	4614      	mov	r4, r2
 8010ee2:	4698      	mov	r8, r3
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	b118      	cbz	r0, 8010ef0 <_vfiprintf_r+0x18>
 8010ee8:	6983      	ldr	r3, [r0, #24]
 8010eea:	b90b      	cbnz	r3, 8010ef0 <_vfiprintf_r+0x18>
 8010eec:	f000 fc9a 	bl	8011824 <__sinit>
 8010ef0:	4b89      	ldr	r3, [pc, #548]	; (8011118 <_vfiprintf_r+0x240>)
 8010ef2:	429d      	cmp	r5, r3
 8010ef4:	d11b      	bne.n	8010f2e <_vfiprintf_r+0x56>
 8010ef6:	6875      	ldr	r5, [r6, #4]
 8010ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010efa:	07d9      	lsls	r1, r3, #31
 8010efc:	d405      	bmi.n	8010f0a <_vfiprintf_r+0x32>
 8010efe:	89ab      	ldrh	r3, [r5, #12]
 8010f00:	059a      	lsls	r2, r3, #22
 8010f02:	d402      	bmi.n	8010f0a <_vfiprintf_r+0x32>
 8010f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f06:	f000 fd2b 	bl	8011960 <__retarget_lock_acquire_recursive>
 8010f0a:	89ab      	ldrh	r3, [r5, #12]
 8010f0c:	071b      	lsls	r3, r3, #28
 8010f0e:	d501      	bpl.n	8010f14 <_vfiprintf_r+0x3c>
 8010f10:	692b      	ldr	r3, [r5, #16]
 8010f12:	b9eb      	cbnz	r3, 8010f50 <_vfiprintf_r+0x78>
 8010f14:	4629      	mov	r1, r5
 8010f16:	4630      	mov	r0, r6
 8010f18:	f000 faf4 	bl	8011504 <__swsetup_r>
 8010f1c:	b1c0      	cbz	r0, 8010f50 <_vfiprintf_r+0x78>
 8010f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f20:	07dc      	lsls	r4, r3, #31
 8010f22:	d50e      	bpl.n	8010f42 <_vfiprintf_r+0x6a>
 8010f24:	f04f 30ff 	mov.w	r0, #4294967295
 8010f28:	b01d      	add	sp, #116	; 0x74
 8010f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f2e:	4b7b      	ldr	r3, [pc, #492]	; (801111c <_vfiprintf_r+0x244>)
 8010f30:	429d      	cmp	r5, r3
 8010f32:	d101      	bne.n	8010f38 <_vfiprintf_r+0x60>
 8010f34:	68b5      	ldr	r5, [r6, #8]
 8010f36:	e7df      	b.n	8010ef8 <_vfiprintf_r+0x20>
 8010f38:	4b79      	ldr	r3, [pc, #484]	; (8011120 <_vfiprintf_r+0x248>)
 8010f3a:	429d      	cmp	r5, r3
 8010f3c:	bf08      	it	eq
 8010f3e:	68f5      	ldreq	r5, [r6, #12]
 8010f40:	e7da      	b.n	8010ef8 <_vfiprintf_r+0x20>
 8010f42:	89ab      	ldrh	r3, [r5, #12]
 8010f44:	0598      	lsls	r0, r3, #22
 8010f46:	d4ed      	bmi.n	8010f24 <_vfiprintf_r+0x4c>
 8010f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f4a:	f000 fd0a 	bl	8011962 <__retarget_lock_release_recursive>
 8010f4e:	e7e9      	b.n	8010f24 <_vfiprintf_r+0x4c>
 8010f50:	2300      	movs	r3, #0
 8010f52:	9309      	str	r3, [sp, #36]	; 0x24
 8010f54:	2320      	movs	r3, #32
 8010f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f5e:	2330      	movs	r3, #48	; 0x30
 8010f60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011124 <_vfiprintf_r+0x24c>
 8010f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f68:	f04f 0901 	mov.w	r9, #1
 8010f6c:	4623      	mov	r3, r4
 8010f6e:	469a      	mov	sl, r3
 8010f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f74:	b10a      	cbz	r2, 8010f7a <_vfiprintf_r+0xa2>
 8010f76:	2a25      	cmp	r2, #37	; 0x25
 8010f78:	d1f9      	bne.n	8010f6e <_vfiprintf_r+0x96>
 8010f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8010f7e:	d00b      	beq.n	8010f98 <_vfiprintf_r+0xc0>
 8010f80:	465b      	mov	r3, fp
 8010f82:	4622      	mov	r2, r4
 8010f84:	4629      	mov	r1, r5
 8010f86:	4630      	mov	r0, r6
 8010f88:	f7ff ff93 	bl	8010eb2 <__sfputs_r>
 8010f8c:	3001      	adds	r0, #1
 8010f8e:	f000 80aa 	beq.w	80110e6 <_vfiprintf_r+0x20e>
 8010f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f94:	445a      	add	r2, fp
 8010f96:	9209      	str	r2, [sp, #36]	; 0x24
 8010f98:	f89a 3000 	ldrb.w	r3, [sl]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f000 80a2 	beq.w	80110e6 <_vfiprintf_r+0x20e>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8010fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fac:	f10a 0a01 	add.w	sl, sl, #1
 8010fb0:	9304      	str	r3, [sp, #16]
 8010fb2:	9307      	str	r3, [sp, #28]
 8010fb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fb8:	931a      	str	r3, [sp, #104]	; 0x68
 8010fba:	4654      	mov	r4, sl
 8010fbc:	2205      	movs	r2, #5
 8010fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc2:	4858      	ldr	r0, [pc, #352]	; (8011124 <_vfiprintf_r+0x24c>)
 8010fc4:	f7ef f994 	bl	80002f0 <memchr>
 8010fc8:	9a04      	ldr	r2, [sp, #16]
 8010fca:	b9d8      	cbnz	r0, 8011004 <_vfiprintf_r+0x12c>
 8010fcc:	06d1      	lsls	r1, r2, #27
 8010fce:	bf44      	itt	mi
 8010fd0:	2320      	movmi	r3, #32
 8010fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fd6:	0713      	lsls	r3, r2, #28
 8010fd8:	bf44      	itt	mi
 8010fda:	232b      	movmi	r3, #43	; 0x2b
 8010fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8010fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8010fe6:	d015      	beq.n	8011014 <_vfiprintf_r+0x13c>
 8010fe8:	9a07      	ldr	r2, [sp, #28]
 8010fea:	4654      	mov	r4, sl
 8010fec:	2000      	movs	r0, #0
 8010fee:	f04f 0c0a 	mov.w	ip, #10
 8010ff2:	4621      	mov	r1, r4
 8010ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ff8:	3b30      	subs	r3, #48	; 0x30
 8010ffa:	2b09      	cmp	r3, #9
 8010ffc:	d94e      	bls.n	801109c <_vfiprintf_r+0x1c4>
 8010ffe:	b1b0      	cbz	r0, 801102e <_vfiprintf_r+0x156>
 8011000:	9207      	str	r2, [sp, #28]
 8011002:	e014      	b.n	801102e <_vfiprintf_r+0x156>
 8011004:	eba0 0308 	sub.w	r3, r0, r8
 8011008:	fa09 f303 	lsl.w	r3, r9, r3
 801100c:	4313      	orrs	r3, r2
 801100e:	9304      	str	r3, [sp, #16]
 8011010:	46a2      	mov	sl, r4
 8011012:	e7d2      	b.n	8010fba <_vfiprintf_r+0xe2>
 8011014:	9b03      	ldr	r3, [sp, #12]
 8011016:	1d19      	adds	r1, r3, #4
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	9103      	str	r1, [sp, #12]
 801101c:	2b00      	cmp	r3, #0
 801101e:	bfbb      	ittet	lt
 8011020:	425b      	neglt	r3, r3
 8011022:	f042 0202 	orrlt.w	r2, r2, #2
 8011026:	9307      	strge	r3, [sp, #28]
 8011028:	9307      	strlt	r3, [sp, #28]
 801102a:	bfb8      	it	lt
 801102c:	9204      	strlt	r2, [sp, #16]
 801102e:	7823      	ldrb	r3, [r4, #0]
 8011030:	2b2e      	cmp	r3, #46	; 0x2e
 8011032:	d10c      	bne.n	801104e <_vfiprintf_r+0x176>
 8011034:	7863      	ldrb	r3, [r4, #1]
 8011036:	2b2a      	cmp	r3, #42	; 0x2a
 8011038:	d135      	bne.n	80110a6 <_vfiprintf_r+0x1ce>
 801103a:	9b03      	ldr	r3, [sp, #12]
 801103c:	1d1a      	adds	r2, r3, #4
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	9203      	str	r2, [sp, #12]
 8011042:	2b00      	cmp	r3, #0
 8011044:	bfb8      	it	lt
 8011046:	f04f 33ff 	movlt.w	r3, #4294967295
 801104a:	3402      	adds	r4, #2
 801104c:	9305      	str	r3, [sp, #20]
 801104e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011134 <_vfiprintf_r+0x25c>
 8011052:	7821      	ldrb	r1, [r4, #0]
 8011054:	2203      	movs	r2, #3
 8011056:	4650      	mov	r0, sl
 8011058:	f7ef f94a 	bl	80002f0 <memchr>
 801105c:	b140      	cbz	r0, 8011070 <_vfiprintf_r+0x198>
 801105e:	2340      	movs	r3, #64	; 0x40
 8011060:	eba0 000a 	sub.w	r0, r0, sl
 8011064:	fa03 f000 	lsl.w	r0, r3, r0
 8011068:	9b04      	ldr	r3, [sp, #16]
 801106a:	4303      	orrs	r3, r0
 801106c:	3401      	adds	r4, #1
 801106e:	9304      	str	r3, [sp, #16]
 8011070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011074:	482c      	ldr	r0, [pc, #176]	; (8011128 <_vfiprintf_r+0x250>)
 8011076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801107a:	2206      	movs	r2, #6
 801107c:	f7ef f938 	bl	80002f0 <memchr>
 8011080:	2800      	cmp	r0, #0
 8011082:	d03f      	beq.n	8011104 <_vfiprintf_r+0x22c>
 8011084:	4b29      	ldr	r3, [pc, #164]	; (801112c <_vfiprintf_r+0x254>)
 8011086:	bb1b      	cbnz	r3, 80110d0 <_vfiprintf_r+0x1f8>
 8011088:	9b03      	ldr	r3, [sp, #12]
 801108a:	3307      	adds	r3, #7
 801108c:	f023 0307 	bic.w	r3, r3, #7
 8011090:	3308      	adds	r3, #8
 8011092:	9303      	str	r3, [sp, #12]
 8011094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011096:	443b      	add	r3, r7
 8011098:	9309      	str	r3, [sp, #36]	; 0x24
 801109a:	e767      	b.n	8010f6c <_vfiprintf_r+0x94>
 801109c:	fb0c 3202 	mla	r2, ip, r2, r3
 80110a0:	460c      	mov	r4, r1
 80110a2:	2001      	movs	r0, #1
 80110a4:	e7a5      	b.n	8010ff2 <_vfiprintf_r+0x11a>
 80110a6:	2300      	movs	r3, #0
 80110a8:	3401      	adds	r4, #1
 80110aa:	9305      	str	r3, [sp, #20]
 80110ac:	4619      	mov	r1, r3
 80110ae:	f04f 0c0a 	mov.w	ip, #10
 80110b2:	4620      	mov	r0, r4
 80110b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110b8:	3a30      	subs	r2, #48	; 0x30
 80110ba:	2a09      	cmp	r2, #9
 80110bc:	d903      	bls.n	80110c6 <_vfiprintf_r+0x1ee>
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d0c5      	beq.n	801104e <_vfiprintf_r+0x176>
 80110c2:	9105      	str	r1, [sp, #20]
 80110c4:	e7c3      	b.n	801104e <_vfiprintf_r+0x176>
 80110c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80110ca:	4604      	mov	r4, r0
 80110cc:	2301      	movs	r3, #1
 80110ce:	e7f0      	b.n	80110b2 <_vfiprintf_r+0x1da>
 80110d0:	ab03      	add	r3, sp, #12
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	462a      	mov	r2, r5
 80110d6:	4b16      	ldr	r3, [pc, #88]	; (8011130 <_vfiprintf_r+0x258>)
 80110d8:	a904      	add	r1, sp, #16
 80110da:	4630      	mov	r0, r6
 80110dc:	f3af 8000 	nop.w
 80110e0:	4607      	mov	r7, r0
 80110e2:	1c78      	adds	r0, r7, #1
 80110e4:	d1d6      	bne.n	8011094 <_vfiprintf_r+0x1bc>
 80110e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110e8:	07d9      	lsls	r1, r3, #31
 80110ea:	d405      	bmi.n	80110f8 <_vfiprintf_r+0x220>
 80110ec:	89ab      	ldrh	r3, [r5, #12]
 80110ee:	059a      	lsls	r2, r3, #22
 80110f0:	d402      	bmi.n	80110f8 <_vfiprintf_r+0x220>
 80110f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110f4:	f000 fc35 	bl	8011962 <__retarget_lock_release_recursive>
 80110f8:	89ab      	ldrh	r3, [r5, #12]
 80110fa:	065b      	lsls	r3, r3, #25
 80110fc:	f53f af12 	bmi.w	8010f24 <_vfiprintf_r+0x4c>
 8011100:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011102:	e711      	b.n	8010f28 <_vfiprintf_r+0x50>
 8011104:	ab03      	add	r3, sp, #12
 8011106:	9300      	str	r3, [sp, #0]
 8011108:	462a      	mov	r2, r5
 801110a:	4b09      	ldr	r3, [pc, #36]	; (8011130 <_vfiprintf_r+0x258>)
 801110c:	a904      	add	r1, sp, #16
 801110e:	4630      	mov	r0, r6
 8011110:	f000 f880 	bl	8011214 <_printf_i>
 8011114:	e7e4      	b.n	80110e0 <_vfiprintf_r+0x208>
 8011116:	bf00      	nop
 8011118:	08012a5c 	.word	0x08012a5c
 801111c:	08012a7c 	.word	0x08012a7c
 8011120:	08012a3c 	.word	0x08012a3c
 8011124:	08012a09 	.word	0x08012a09
 8011128:	08012a13 	.word	0x08012a13
 801112c:	00000000 	.word	0x00000000
 8011130:	08010eb3 	.word	0x08010eb3
 8011134:	08012a0f 	.word	0x08012a0f

08011138 <_printf_common>:
 8011138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801113c:	4616      	mov	r6, r2
 801113e:	4699      	mov	r9, r3
 8011140:	688a      	ldr	r2, [r1, #8]
 8011142:	690b      	ldr	r3, [r1, #16]
 8011144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011148:	4293      	cmp	r3, r2
 801114a:	bfb8      	it	lt
 801114c:	4613      	movlt	r3, r2
 801114e:	6033      	str	r3, [r6, #0]
 8011150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011154:	4607      	mov	r7, r0
 8011156:	460c      	mov	r4, r1
 8011158:	b10a      	cbz	r2, 801115e <_printf_common+0x26>
 801115a:	3301      	adds	r3, #1
 801115c:	6033      	str	r3, [r6, #0]
 801115e:	6823      	ldr	r3, [r4, #0]
 8011160:	0699      	lsls	r1, r3, #26
 8011162:	bf42      	ittt	mi
 8011164:	6833      	ldrmi	r3, [r6, #0]
 8011166:	3302      	addmi	r3, #2
 8011168:	6033      	strmi	r3, [r6, #0]
 801116a:	6825      	ldr	r5, [r4, #0]
 801116c:	f015 0506 	ands.w	r5, r5, #6
 8011170:	d106      	bne.n	8011180 <_printf_common+0x48>
 8011172:	f104 0a19 	add.w	sl, r4, #25
 8011176:	68e3      	ldr	r3, [r4, #12]
 8011178:	6832      	ldr	r2, [r6, #0]
 801117a:	1a9b      	subs	r3, r3, r2
 801117c:	42ab      	cmp	r3, r5
 801117e:	dc26      	bgt.n	80111ce <_printf_common+0x96>
 8011180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011184:	1e13      	subs	r3, r2, #0
 8011186:	6822      	ldr	r2, [r4, #0]
 8011188:	bf18      	it	ne
 801118a:	2301      	movne	r3, #1
 801118c:	0692      	lsls	r2, r2, #26
 801118e:	d42b      	bmi.n	80111e8 <_printf_common+0xb0>
 8011190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011194:	4649      	mov	r1, r9
 8011196:	4638      	mov	r0, r7
 8011198:	47c0      	blx	r8
 801119a:	3001      	adds	r0, #1
 801119c:	d01e      	beq.n	80111dc <_printf_common+0xa4>
 801119e:	6823      	ldr	r3, [r4, #0]
 80111a0:	68e5      	ldr	r5, [r4, #12]
 80111a2:	6832      	ldr	r2, [r6, #0]
 80111a4:	f003 0306 	and.w	r3, r3, #6
 80111a8:	2b04      	cmp	r3, #4
 80111aa:	bf08      	it	eq
 80111ac:	1aad      	subeq	r5, r5, r2
 80111ae:	68a3      	ldr	r3, [r4, #8]
 80111b0:	6922      	ldr	r2, [r4, #16]
 80111b2:	bf0c      	ite	eq
 80111b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80111b8:	2500      	movne	r5, #0
 80111ba:	4293      	cmp	r3, r2
 80111bc:	bfc4      	itt	gt
 80111be:	1a9b      	subgt	r3, r3, r2
 80111c0:	18ed      	addgt	r5, r5, r3
 80111c2:	2600      	movs	r6, #0
 80111c4:	341a      	adds	r4, #26
 80111c6:	42b5      	cmp	r5, r6
 80111c8:	d11a      	bne.n	8011200 <_printf_common+0xc8>
 80111ca:	2000      	movs	r0, #0
 80111cc:	e008      	b.n	80111e0 <_printf_common+0xa8>
 80111ce:	2301      	movs	r3, #1
 80111d0:	4652      	mov	r2, sl
 80111d2:	4649      	mov	r1, r9
 80111d4:	4638      	mov	r0, r7
 80111d6:	47c0      	blx	r8
 80111d8:	3001      	adds	r0, #1
 80111da:	d103      	bne.n	80111e4 <_printf_common+0xac>
 80111dc:	f04f 30ff 	mov.w	r0, #4294967295
 80111e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111e4:	3501      	adds	r5, #1
 80111e6:	e7c6      	b.n	8011176 <_printf_common+0x3e>
 80111e8:	18e1      	adds	r1, r4, r3
 80111ea:	1c5a      	adds	r2, r3, #1
 80111ec:	2030      	movs	r0, #48	; 0x30
 80111ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80111f2:	4422      	add	r2, r4
 80111f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80111f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80111fc:	3302      	adds	r3, #2
 80111fe:	e7c7      	b.n	8011190 <_printf_common+0x58>
 8011200:	2301      	movs	r3, #1
 8011202:	4622      	mov	r2, r4
 8011204:	4649      	mov	r1, r9
 8011206:	4638      	mov	r0, r7
 8011208:	47c0      	blx	r8
 801120a:	3001      	adds	r0, #1
 801120c:	d0e6      	beq.n	80111dc <_printf_common+0xa4>
 801120e:	3601      	adds	r6, #1
 8011210:	e7d9      	b.n	80111c6 <_printf_common+0x8e>
	...

08011214 <_printf_i>:
 8011214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011218:	7e0f      	ldrb	r7, [r1, #24]
 801121a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801121c:	2f78      	cmp	r7, #120	; 0x78
 801121e:	4691      	mov	r9, r2
 8011220:	4680      	mov	r8, r0
 8011222:	460c      	mov	r4, r1
 8011224:	469a      	mov	sl, r3
 8011226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801122a:	d807      	bhi.n	801123c <_printf_i+0x28>
 801122c:	2f62      	cmp	r7, #98	; 0x62
 801122e:	d80a      	bhi.n	8011246 <_printf_i+0x32>
 8011230:	2f00      	cmp	r7, #0
 8011232:	f000 80d8 	beq.w	80113e6 <_printf_i+0x1d2>
 8011236:	2f58      	cmp	r7, #88	; 0x58
 8011238:	f000 80a3 	beq.w	8011382 <_printf_i+0x16e>
 801123c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011244:	e03a      	b.n	80112bc <_printf_i+0xa8>
 8011246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801124a:	2b15      	cmp	r3, #21
 801124c:	d8f6      	bhi.n	801123c <_printf_i+0x28>
 801124e:	a101      	add	r1, pc, #4	; (adr r1, 8011254 <_printf_i+0x40>)
 8011250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011254:	080112ad 	.word	0x080112ad
 8011258:	080112c1 	.word	0x080112c1
 801125c:	0801123d 	.word	0x0801123d
 8011260:	0801123d 	.word	0x0801123d
 8011264:	0801123d 	.word	0x0801123d
 8011268:	0801123d 	.word	0x0801123d
 801126c:	080112c1 	.word	0x080112c1
 8011270:	0801123d 	.word	0x0801123d
 8011274:	0801123d 	.word	0x0801123d
 8011278:	0801123d 	.word	0x0801123d
 801127c:	0801123d 	.word	0x0801123d
 8011280:	080113cd 	.word	0x080113cd
 8011284:	080112f1 	.word	0x080112f1
 8011288:	080113af 	.word	0x080113af
 801128c:	0801123d 	.word	0x0801123d
 8011290:	0801123d 	.word	0x0801123d
 8011294:	080113ef 	.word	0x080113ef
 8011298:	0801123d 	.word	0x0801123d
 801129c:	080112f1 	.word	0x080112f1
 80112a0:	0801123d 	.word	0x0801123d
 80112a4:	0801123d 	.word	0x0801123d
 80112a8:	080113b7 	.word	0x080113b7
 80112ac:	682b      	ldr	r3, [r5, #0]
 80112ae:	1d1a      	adds	r2, r3, #4
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	602a      	str	r2, [r5, #0]
 80112b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80112bc:	2301      	movs	r3, #1
 80112be:	e0a3      	b.n	8011408 <_printf_i+0x1f4>
 80112c0:	6820      	ldr	r0, [r4, #0]
 80112c2:	6829      	ldr	r1, [r5, #0]
 80112c4:	0606      	lsls	r6, r0, #24
 80112c6:	f101 0304 	add.w	r3, r1, #4
 80112ca:	d50a      	bpl.n	80112e2 <_printf_i+0xce>
 80112cc:	680e      	ldr	r6, [r1, #0]
 80112ce:	602b      	str	r3, [r5, #0]
 80112d0:	2e00      	cmp	r6, #0
 80112d2:	da03      	bge.n	80112dc <_printf_i+0xc8>
 80112d4:	232d      	movs	r3, #45	; 0x2d
 80112d6:	4276      	negs	r6, r6
 80112d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112dc:	485e      	ldr	r0, [pc, #376]	; (8011458 <_printf_i+0x244>)
 80112de:	230a      	movs	r3, #10
 80112e0:	e019      	b.n	8011316 <_printf_i+0x102>
 80112e2:	680e      	ldr	r6, [r1, #0]
 80112e4:	602b      	str	r3, [r5, #0]
 80112e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80112ea:	bf18      	it	ne
 80112ec:	b236      	sxthne	r6, r6
 80112ee:	e7ef      	b.n	80112d0 <_printf_i+0xbc>
 80112f0:	682b      	ldr	r3, [r5, #0]
 80112f2:	6820      	ldr	r0, [r4, #0]
 80112f4:	1d19      	adds	r1, r3, #4
 80112f6:	6029      	str	r1, [r5, #0]
 80112f8:	0601      	lsls	r1, r0, #24
 80112fa:	d501      	bpl.n	8011300 <_printf_i+0xec>
 80112fc:	681e      	ldr	r6, [r3, #0]
 80112fe:	e002      	b.n	8011306 <_printf_i+0xf2>
 8011300:	0646      	lsls	r6, r0, #25
 8011302:	d5fb      	bpl.n	80112fc <_printf_i+0xe8>
 8011304:	881e      	ldrh	r6, [r3, #0]
 8011306:	4854      	ldr	r0, [pc, #336]	; (8011458 <_printf_i+0x244>)
 8011308:	2f6f      	cmp	r7, #111	; 0x6f
 801130a:	bf0c      	ite	eq
 801130c:	2308      	moveq	r3, #8
 801130e:	230a      	movne	r3, #10
 8011310:	2100      	movs	r1, #0
 8011312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011316:	6865      	ldr	r5, [r4, #4]
 8011318:	60a5      	str	r5, [r4, #8]
 801131a:	2d00      	cmp	r5, #0
 801131c:	bfa2      	ittt	ge
 801131e:	6821      	ldrge	r1, [r4, #0]
 8011320:	f021 0104 	bicge.w	r1, r1, #4
 8011324:	6021      	strge	r1, [r4, #0]
 8011326:	b90e      	cbnz	r6, 801132c <_printf_i+0x118>
 8011328:	2d00      	cmp	r5, #0
 801132a:	d04d      	beq.n	80113c8 <_printf_i+0x1b4>
 801132c:	4615      	mov	r5, r2
 801132e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011332:	fb03 6711 	mls	r7, r3, r1, r6
 8011336:	5dc7      	ldrb	r7, [r0, r7]
 8011338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801133c:	4637      	mov	r7, r6
 801133e:	42bb      	cmp	r3, r7
 8011340:	460e      	mov	r6, r1
 8011342:	d9f4      	bls.n	801132e <_printf_i+0x11a>
 8011344:	2b08      	cmp	r3, #8
 8011346:	d10b      	bne.n	8011360 <_printf_i+0x14c>
 8011348:	6823      	ldr	r3, [r4, #0]
 801134a:	07de      	lsls	r6, r3, #31
 801134c:	d508      	bpl.n	8011360 <_printf_i+0x14c>
 801134e:	6923      	ldr	r3, [r4, #16]
 8011350:	6861      	ldr	r1, [r4, #4]
 8011352:	4299      	cmp	r1, r3
 8011354:	bfde      	ittt	le
 8011356:	2330      	movle	r3, #48	; 0x30
 8011358:	f805 3c01 	strble.w	r3, [r5, #-1]
 801135c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011360:	1b52      	subs	r2, r2, r5
 8011362:	6122      	str	r2, [r4, #16]
 8011364:	f8cd a000 	str.w	sl, [sp]
 8011368:	464b      	mov	r3, r9
 801136a:	aa03      	add	r2, sp, #12
 801136c:	4621      	mov	r1, r4
 801136e:	4640      	mov	r0, r8
 8011370:	f7ff fee2 	bl	8011138 <_printf_common>
 8011374:	3001      	adds	r0, #1
 8011376:	d14c      	bne.n	8011412 <_printf_i+0x1fe>
 8011378:	f04f 30ff 	mov.w	r0, #4294967295
 801137c:	b004      	add	sp, #16
 801137e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011382:	4835      	ldr	r0, [pc, #212]	; (8011458 <_printf_i+0x244>)
 8011384:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011388:	6829      	ldr	r1, [r5, #0]
 801138a:	6823      	ldr	r3, [r4, #0]
 801138c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011390:	6029      	str	r1, [r5, #0]
 8011392:	061d      	lsls	r5, r3, #24
 8011394:	d514      	bpl.n	80113c0 <_printf_i+0x1ac>
 8011396:	07df      	lsls	r7, r3, #31
 8011398:	bf44      	itt	mi
 801139a:	f043 0320 	orrmi.w	r3, r3, #32
 801139e:	6023      	strmi	r3, [r4, #0]
 80113a0:	b91e      	cbnz	r6, 80113aa <_printf_i+0x196>
 80113a2:	6823      	ldr	r3, [r4, #0]
 80113a4:	f023 0320 	bic.w	r3, r3, #32
 80113a8:	6023      	str	r3, [r4, #0]
 80113aa:	2310      	movs	r3, #16
 80113ac:	e7b0      	b.n	8011310 <_printf_i+0xfc>
 80113ae:	6823      	ldr	r3, [r4, #0]
 80113b0:	f043 0320 	orr.w	r3, r3, #32
 80113b4:	6023      	str	r3, [r4, #0]
 80113b6:	2378      	movs	r3, #120	; 0x78
 80113b8:	4828      	ldr	r0, [pc, #160]	; (801145c <_printf_i+0x248>)
 80113ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80113be:	e7e3      	b.n	8011388 <_printf_i+0x174>
 80113c0:	0659      	lsls	r1, r3, #25
 80113c2:	bf48      	it	mi
 80113c4:	b2b6      	uxthmi	r6, r6
 80113c6:	e7e6      	b.n	8011396 <_printf_i+0x182>
 80113c8:	4615      	mov	r5, r2
 80113ca:	e7bb      	b.n	8011344 <_printf_i+0x130>
 80113cc:	682b      	ldr	r3, [r5, #0]
 80113ce:	6826      	ldr	r6, [r4, #0]
 80113d0:	6961      	ldr	r1, [r4, #20]
 80113d2:	1d18      	adds	r0, r3, #4
 80113d4:	6028      	str	r0, [r5, #0]
 80113d6:	0635      	lsls	r5, r6, #24
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	d501      	bpl.n	80113e0 <_printf_i+0x1cc>
 80113dc:	6019      	str	r1, [r3, #0]
 80113de:	e002      	b.n	80113e6 <_printf_i+0x1d2>
 80113e0:	0670      	lsls	r0, r6, #25
 80113e2:	d5fb      	bpl.n	80113dc <_printf_i+0x1c8>
 80113e4:	8019      	strh	r1, [r3, #0]
 80113e6:	2300      	movs	r3, #0
 80113e8:	6123      	str	r3, [r4, #16]
 80113ea:	4615      	mov	r5, r2
 80113ec:	e7ba      	b.n	8011364 <_printf_i+0x150>
 80113ee:	682b      	ldr	r3, [r5, #0]
 80113f0:	1d1a      	adds	r2, r3, #4
 80113f2:	602a      	str	r2, [r5, #0]
 80113f4:	681d      	ldr	r5, [r3, #0]
 80113f6:	6862      	ldr	r2, [r4, #4]
 80113f8:	2100      	movs	r1, #0
 80113fa:	4628      	mov	r0, r5
 80113fc:	f7ee ff78 	bl	80002f0 <memchr>
 8011400:	b108      	cbz	r0, 8011406 <_printf_i+0x1f2>
 8011402:	1b40      	subs	r0, r0, r5
 8011404:	6060      	str	r0, [r4, #4]
 8011406:	6863      	ldr	r3, [r4, #4]
 8011408:	6123      	str	r3, [r4, #16]
 801140a:	2300      	movs	r3, #0
 801140c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011410:	e7a8      	b.n	8011364 <_printf_i+0x150>
 8011412:	6923      	ldr	r3, [r4, #16]
 8011414:	462a      	mov	r2, r5
 8011416:	4649      	mov	r1, r9
 8011418:	4640      	mov	r0, r8
 801141a:	47d0      	blx	sl
 801141c:	3001      	adds	r0, #1
 801141e:	d0ab      	beq.n	8011378 <_printf_i+0x164>
 8011420:	6823      	ldr	r3, [r4, #0]
 8011422:	079b      	lsls	r3, r3, #30
 8011424:	d413      	bmi.n	801144e <_printf_i+0x23a>
 8011426:	68e0      	ldr	r0, [r4, #12]
 8011428:	9b03      	ldr	r3, [sp, #12]
 801142a:	4298      	cmp	r0, r3
 801142c:	bfb8      	it	lt
 801142e:	4618      	movlt	r0, r3
 8011430:	e7a4      	b.n	801137c <_printf_i+0x168>
 8011432:	2301      	movs	r3, #1
 8011434:	4632      	mov	r2, r6
 8011436:	4649      	mov	r1, r9
 8011438:	4640      	mov	r0, r8
 801143a:	47d0      	blx	sl
 801143c:	3001      	adds	r0, #1
 801143e:	d09b      	beq.n	8011378 <_printf_i+0x164>
 8011440:	3501      	adds	r5, #1
 8011442:	68e3      	ldr	r3, [r4, #12]
 8011444:	9903      	ldr	r1, [sp, #12]
 8011446:	1a5b      	subs	r3, r3, r1
 8011448:	42ab      	cmp	r3, r5
 801144a:	dcf2      	bgt.n	8011432 <_printf_i+0x21e>
 801144c:	e7eb      	b.n	8011426 <_printf_i+0x212>
 801144e:	2500      	movs	r5, #0
 8011450:	f104 0619 	add.w	r6, r4, #25
 8011454:	e7f5      	b.n	8011442 <_printf_i+0x22e>
 8011456:	bf00      	nop
 8011458:	08012a1a 	.word	0x08012a1a
 801145c:	08012a2b 	.word	0x08012a2b

08011460 <__swbuf_r>:
 8011460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011462:	460e      	mov	r6, r1
 8011464:	4614      	mov	r4, r2
 8011466:	4605      	mov	r5, r0
 8011468:	b118      	cbz	r0, 8011472 <__swbuf_r+0x12>
 801146a:	6983      	ldr	r3, [r0, #24]
 801146c:	b90b      	cbnz	r3, 8011472 <__swbuf_r+0x12>
 801146e:	f000 f9d9 	bl	8011824 <__sinit>
 8011472:	4b21      	ldr	r3, [pc, #132]	; (80114f8 <__swbuf_r+0x98>)
 8011474:	429c      	cmp	r4, r3
 8011476:	d12b      	bne.n	80114d0 <__swbuf_r+0x70>
 8011478:	686c      	ldr	r4, [r5, #4]
 801147a:	69a3      	ldr	r3, [r4, #24]
 801147c:	60a3      	str	r3, [r4, #8]
 801147e:	89a3      	ldrh	r3, [r4, #12]
 8011480:	071a      	lsls	r2, r3, #28
 8011482:	d52f      	bpl.n	80114e4 <__swbuf_r+0x84>
 8011484:	6923      	ldr	r3, [r4, #16]
 8011486:	b36b      	cbz	r3, 80114e4 <__swbuf_r+0x84>
 8011488:	6923      	ldr	r3, [r4, #16]
 801148a:	6820      	ldr	r0, [r4, #0]
 801148c:	1ac0      	subs	r0, r0, r3
 801148e:	6963      	ldr	r3, [r4, #20]
 8011490:	b2f6      	uxtb	r6, r6
 8011492:	4283      	cmp	r3, r0
 8011494:	4637      	mov	r7, r6
 8011496:	dc04      	bgt.n	80114a2 <__swbuf_r+0x42>
 8011498:	4621      	mov	r1, r4
 801149a:	4628      	mov	r0, r5
 801149c:	f000 f92e 	bl	80116fc <_fflush_r>
 80114a0:	bb30      	cbnz	r0, 80114f0 <__swbuf_r+0x90>
 80114a2:	68a3      	ldr	r3, [r4, #8]
 80114a4:	3b01      	subs	r3, #1
 80114a6:	60a3      	str	r3, [r4, #8]
 80114a8:	6823      	ldr	r3, [r4, #0]
 80114aa:	1c5a      	adds	r2, r3, #1
 80114ac:	6022      	str	r2, [r4, #0]
 80114ae:	701e      	strb	r6, [r3, #0]
 80114b0:	6963      	ldr	r3, [r4, #20]
 80114b2:	3001      	adds	r0, #1
 80114b4:	4283      	cmp	r3, r0
 80114b6:	d004      	beq.n	80114c2 <__swbuf_r+0x62>
 80114b8:	89a3      	ldrh	r3, [r4, #12]
 80114ba:	07db      	lsls	r3, r3, #31
 80114bc:	d506      	bpl.n	80114cc <__swbuf_r+0x6c>
 80114be:	2e0a      	cmp	r6, #10
 80114c0:	d104      	bne.n	80114cc <__swbuf_r+0x6c>
 80114c2:	4621      	mov	r1, r4
 80114c4:	4628      	mov	r0, r5
 80114c6:	f000 f919 	bl	80116fc <_fflush_r>
 80114ca:	b988      	cbnz	r0, 80114f0 <__swbuf_r+0x90>
 80114cc:	4638      	mov	r0, r7
 80114ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114d0:	4b0a      	ldr	r3, [pc, #40]	; (80114fc <__swbuf_r+0x9c>)
 80114d2:	429c      	cmp	r4, r3
 80114d4:	d101      	bne.n	80114da <__swbuf_r+0x7a>
 80114d6:	68ac      	ldr	r4, [r5, #8]
 80114d8:	e7cf      	b.n	801147a <__swbuf_r+0x1a>
 80114da:	4b09      	ldr	r3, [pc, #36]	; (8011500 <__swbuf_r+0xa0>)
 80114dc:	429c      	cmp	r4, r3
 80114de:	bf08      	it	eq
 80114e0:	68ec      	ldreq	r4, [r5, #12]
 80114e2:	e7ca      	b.n	801147a <__swbuf_r+0x1a>
 80114e4:	4621      	mov	r1, r4
 80114e6:	4628      	mov	r0, r5
 80114e8:	f000 f80c 	bl	8011504 <__swsetup_r>
 80114ec:	2800      	cmp	r0, #0
 80114ee:	d0cb      	beq.n	8011488 <__swbuf_r+0x28>
 80114f0:	f04f 37ff 	mov.w	r7, #4294967295
 80114f4:	e7ea      	b.n	80114cc <__swbuf_r+0x6c>
 80114f6:	bf00      	nop
 80114f8:	08012a5c 	.word	0x08012a5c
 80114fc:	08012a7c 	.word	0x08012a7c
 8011500:	08012a3c 	.word	0x08012a3c

08011504 <__swsetup_r>:
 8011504:	4b32      	ldr	r3, [pc, #200]	; (80115d0 <__swsetup_r+0xcc>)
 8011506:	b570      	push	{r4, r5, r6, lr}
 8011508:	681d      	ldr	r5, [r3, #0]
 801150a:	4606      	mov	r6, r0
 801150c:	460c      	mov	r4, r1
 801150e:	b125      	cbz	r5, 801151a <__swsetup_r+0x16>
 8011510:	69ab      	ldr	r3, [r5, #24]
 8011512:	b913      	cbnz	r3, 801151a <__swsetup_r+0x16>
 8011514:	4628      	mov	r0, r5
 8011516:	f000 f985 	bl	8011824 <__sinit>
 801151a:	4b2e      	ldr	r3, [pc, #184]	; (80115d4 <__swsetup_r+0xd0>)
 801151c:	429c      	cmp	r4, r3
 801151e:	d10f      	bne.n	8011540 <__swsetup_r+0x3c>
 8011520:	686c      	ldr	r4, [r5, #4]
 8011522:	89a3      	ldrh	r3, [r4, #12]
 8011524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011528:	0719      	lsls	r1, r3, #28
 801152a:	d42c      	bmi.n	8011586 <__swsetup_r+0x82>
 801152c:	06dd      	lsls	r5, r3, #27
 801152e:	d411      	bmi.n	8011554 <__swsetup_r+0x50>
 8011530:	2309      	movs	r3, #9
 8011532:	6033      	str	r3, [r6, #0]
 8011534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011538:	81a3      	strh	r3, [r4, #12]
 801153a:	f04f 30ff 	mov.w	r0, #4294967295
 801153e:	e03e      	b.n	80115be <__swsetup_r+0xba>
 8011540:	4b25      	ldr	r3, [pc, #148]	; (80115d8 <__swsetup_r+0xd4>)
 8011542:	429c      	cmp	r4, r3
 8011544:	d101      	bne.n	801154a <__swsetup_r+0x46>
 8011546:	68ac      	ldr	r4, [r5, #8]
 8011548:	e7eb      	b.n	8011522 <__swsetup_r+0x1e>
 801154a:	4b24      	ldr	r3, [pc, #144]	; (80115dc <__swsetup_r+0xd8>)
 801154c:	429c      	cmp	r4, r3
 801154e:	bf08      	it	eq
 8011550:	68ec      	ldreq	r4, [r5, #12]
 8011552:	e7e6      	b.n	8011522 <__swsetup_r+0x1e>
 8011554:	0758      	lsls	r0, r3, #29
 8011556:	d512      	bpl.n	801157e <__swsetup_r+0x7a>
 8011558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801155a:	b141      	cbz	r1, 801156e <__swsetup_r+0x6a>
 801155c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011560:	4299      	cmp	r1, r3
 8011562:	d002      	beq.n	801156a <__swsetup_r+0x66>
 8011564:	4630      	mov	r0, r6
 8011566:	f7ff fc41 	bl	8010dec <_free_r>
 801156a:	2300      	movs	r3, #0
 801156c:	6363      	str	r3, [r4, #52]	; 0x34
 801156e:	89a3      	ldrh	r3, [r4, #12]
 8011570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011574:	81a3      	strh	r3, [r4, #12]
 8011576:	2300      	movs	r3, #0
 8011578:	6063      	str	r3, [r4, #4]
 801157a:	6923      	ldr	r3, [r4, #16]
 801157c:	6023      	str	r3, [r4, #0]
 801157e:	89a3      	ldrh	r3, [r4, #12]
 8011580:	f043 0308 	orr.w	r3, r3, #8
 8011584:	81a3      	strh	r3, [r4, #12]
 8011586:	6923      	ldr	r3, [r4, #16]
 8011588:	b94b      	cbnz	r3, 801159e <__swsetup_r+0x9a>
 801158a:	89a3      	ldrh	r3, [r4, #12]
 801158c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011594:	d003      	beq.n	801159e <__swsetup_r+0x9a>
 8011596:	4621      	mov	r1, r4
 8011598:	4630      	mov	r0, r6
 801159a:	f000 fa09 	bl	80119b0 <__smakebuf_r>
 801159e:	89a0      	ldrh	r0, [r4, #12]
 80115a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115a4:	f010 0301 	ands.w	r3, r0, #1
 80115a8:	d00a      	beq.n	80115c0 <__swsetup_r+0xbc>
 80115aa:	2300      	movs	r3, #0
 80115ac:	60a3      	str	r3, [r4, #8]
 80115ae:	6963      	ldr	r3, [r4, #20]
 80115b0:	425b      	negs	r3, r3
 80115b2:	61a3      	str	r3, [r4, #24]
 80115b4:	6923      	ldr	r3, [r4, #16]
 80115b6:	b943      	cbnz	r3, 80115ca <__swsetup_r+0xc6>
 80115b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80115bc:	d1ba      	bne.n	8011534 <__swsetup_r+0x30>
 80115be:	bd70      	pop	{r4, r5, r6, pc}
 80115c0:	0781      	lsls	r1, r0, #30
 80115c2:	bf58      	it	pl
 80115c4:	6963      	ldrpl	r3, [r4, #20]
 80115c6:	60a3      	str	r3, [r4, #8]
 80115c8:	e7f4      	b.n	80115b4 <__swsetup_r+0xb0>
 80115ca:	2000      	movs	r0, #0
 80115cc:	e7f7      	b.n	80115be <__swsetup_r+0xba>
 80115ce:	bf00      	nop
 80115d0:	240000b0 	.word	0x240000b0
 80115d4:	08012a5c 	.word	0x08012a5c
 80115d8:	08012a7c 	.word	0x08012a7c
 80115dc:	08012a3c 	.word	0x08012a3c

080115e0 <abort>:
 80115e0:	b508      	push	{r3, lr}
 80115e2:	2006      	movs	r0, #6
 80115e4:	f000 fa4c 	bl	8011a80 <raise>
 80115e8:	2001      	movs	r0, #1
 80115ea:	f7f2 fd5f 	bl	80040ac <_exit>
	...

080115f0 <__sflush_r>:
 80115f0:	898a      	ldrh	r2, [r1, #12]
 80115f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115f6:	4605      	mov	r5, r0
 80115f8:	0710      	lsls	r0, r2, #28
 80115fa:	460c      	mov	r4, r1
 80115fc:	d458      	bmi.n	80116b0 <__sflush_r+0xc0>
 80115fe:	684b      	ldr	r3, [r1, #4]
 8011600:	2b00      	cmp	r3, #0
 8011602:	dc05      	bgt.n	8011610 <__sflush_r+0x20>
 8011604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011606:	2b00      	cmp	r3, #0
 8011608:	dc02      	bgt.n	8011610 <__sflush_r+0x20>
 801160a:	2000      	movs	r0, #0
 801160c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011612:	2e00      	cmp	r6, #0
 8011614:	d0f9      	beq.n	801160a <__sflush_r+0x1a>
 8011616:	2300      	movs	r3, #0
 8011618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801161c:	682f      	ldr	r7, [r5, #0]
 801161e:	602b      	str	r3, [r5, #0]
 8011620:	d032      	beq.n	8011688 <__sflush_r+0x98>
 8011622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011624:	89a3      	ldrh	r3, [r4, #12]
 8011626:	075a      	lsls	r2, r3, #29
 8011628:	d505      	bpl.n	8011636 <__sflush_r+0x46>
 801162a:	6863      	ldr	r3, [r4, #4]
 801162c:	1ac0      	subs	r0, r0, r3
 801162e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011630:	b10b      	cbz	r3, 8011636 <__sflush_r+0x46>
 8011632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011634:	1ac0      	subs	r0, r0, r3
 8011636:	2300      	movs	r3, #0
 8011638:	4602      	mov	r2, r0
 801163a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801163c:	6a21      	ldr	r1, [r4, #32]
 801163e:	4628      	mov	r0, r5
 8011640:	47b0      	blx	r6
 8011642:	1c43      	adds	r3, r0, #1
 8011644:	89a3      	ldrh	r3, [r4, #12]
 8011646:	d106      	bne.n	8011656 <__sflush_r+0x66>
 8011648:	6829      	ldr	r1, [r5, #0]
 801164a:	291d      	cmp	r1, #29
 801164c:	d82c      	bhi.n	80116a8 <__sflush_r+0xb8>
 801164e:	4a2a      	ldr	r2, [pc, #168]	; (80116f8 <__sflush_r+0x108>)
 8011650:	40ca      	lsrs	r2, r1
 8011652:	07d6      	lsls	r6, r2, #31
 8011654:	d528      	bpl.n	80116a8 <__sflush_r+0xb8>
 8011656:	2200      	movs	r2, #0
 8011658:	6062      	str	r2, [r4, #4]
 801165a:	04d9      	lsls	r1, r3, #19
 801165c:	6922      	ldr	r2, [r4, #16]
 801165e:	6022      	str	r2, [r4, #0]
 8011660:	d504      	bpl.n	801166c <__sflush_r+0x7c>
 8011662:	1c42      	adds	r2, r0, #1
 8011664:	d101      	bne.n	801166a <__sflush_r+0x7a>
 8011666:	682b      	ldr	r3, [r5, #0]
 8011668:	b903      	cbnz	r3, 801166c <__sflush_r+0x7c>
 801166a:	6560      	str	r0, [r4, #84]	; 0x54
 801166c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801166e:	602f      	str	r7, [r5, #0]
 8011670:	2900      	cmp	r1, #0
 8011672:	d0ca      	beq.n	801160a <__sflush_r+0x1a>
 8011674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011678:	4299      	cmp	r1, r3
 801167a:	d002      	beq.n	8011682 <__sflush_r+0x92>
 801167c:	4628      	mov	r0, r5
 801167e:	f7ff fbb5 	bl	8010dec <_free_r>
 8011682:	2000      	movs	r0, #0
 8011684:	6360      	str	r0, [r4, #52]	; 0x34
 8011686:	e7c1      	b.n	801160c <__sflush_r+0x1c>
 8011688:	6a21      	ldr	r1, [r4, #32]
 801168a:	2301      	movs	r3, #1
 801168c:	4628      	mov	r0, r5
 801168e:	47b0      	blx	r6
 8011690:	1c41      	adds	r1, r0, #1
 8011692:	d1c7      	bne.n	8011624 <__sflush_r+0x34>
 8011694:	682b      	ldr	r3, [r5, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d0c4      	beq.n	8011624 <__sflush_r+0x34>
 801169a:	2b1d      	cmp	r3, #29
 801169c:	d001      	beq.n	80116a2 <__sflush_r+0xb2>
 801169e:	2b16      	cmp	r3, #22
 80116a0:	d101      	bne.n	80116a6 <__sflush_r+0xb6>
 80116a2:	602f      	str	r7, [r5, #0]
 80116a4:	e7b1      	b.n	801160a <__sflush_r+0x1a>
 80116a6:	89a3      	ldrh	r3, [r4, #12]
 80116a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116ac:	81a3      	strh	r3, [r4, #12]
 80116ae:	e7ad      	b.n	801160c <__sflush_r+0x1c>
 80116b0:	690f      	ldr	r7, [r1, #16]
 80116b2:	2f00      	cmp	r7, #0
 80116b4:	d0a9      	beq.n	801160a <__sflush_r+0x1a>
 80116b6:	0793      	lsls	r3, r2, #30
 80116b8:	680e      	ldr	r6, [r1, #0]
 80116ba:	bf08      	it	eq
 80116bc:	694b      	ldreq	r3, [r1, #20]
 80116be:	600f      	str	r7, [r1, #0]
 80116c0:	bf18      	it	ne
 80116c2:	2300      	movne	r3, #0
 80116c4:	eba6 0807 	sub.w	r8, r6, r7
 80116c8:	608b      	str	r3, [r1, #8]
 80116ca:	f1b8 0f00 	cmp.w	r8, #0
 80116ce:	dd9c      	ble.n	801160a <__sflush_r+0x1a>
 80116d0:	6a21      	ldr	r1, [r4, #32]
 80116d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116d4:	4643      	mov	r3, r8
 80116d6:	463a      	mov	r2, r7
 80116d8:	4628      	mov	r0, r5
 80116da:	47b0      	blx	r6
 80116dc:	2800      	cmp	r0, #0
 80116de:	dc06      	bgt.n	80116ee <__sflush_r+0xfe>
 80116e0:	89a3      	ldrh	r3, [r4, #12]
 80116e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116e6:	81a3      	strh	r3, [r4, #12]
 80116e8:	f04f 30ff 	mov.w	r0, #4294967295
 80116ec:	e78e      	b.n	801160c <__sflush_r+0x1c>
 80116ee:	4407      	add	r7, r0
 80116f0:	eba8 0800 	sub.w	r8, r8, r0
 80116f4:	e7e9      	b.n	80116ca <__sflush_r+0xda>
 80116f6:	bf00      	nop
 80116f8:	20400001 	.word	0x20400001

080116fc <_fflush_r>:
 80116fc:	b538      	push	{r3, r4, r5, lr}
 80116fe:	690b      	ldr	r3, [r1, #16]
 8011700:	4605      	mov	r5, r0
 8011702:	460c      	mov	r4, r1
 8011704:	b913      	cbnz	r3, 801170c <_fflush_r+0x10>
 8011706:	2500      	movs	r5, #0
 8011708:	4628      	mov	r0, r5
 801170a:	bd38      	pop	{r3, r4, r5, pc}
 801170c:	b118      	cbz	r0, 8011716 <_fflush_r+0x1a>
 801170e:	6983      	ldr	r3, [r0, #24]
 8011710:	b90b      	cbnz	r3, 8011716 <_fflush_r+0x1a>
 8011712:	f000 f887 	bl	8011824 <__sinit>
 8011716:	4b14      	ldr	r3, [pc, #80]	; (8011768 <_fflush_r+0x6c>)
 8011718:	429c      	cmp	r4, r3
 801171a:	d11b      	bne.n	8011754 <_fflush_r+0x58>
 801171c:	686c      	ldr	r4, [r5, #4]
 801171e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d0ef      	beq.n	8011706 <_fflush_r+0xa>
 8011726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011728:	07d0      	lsls	r0, r2, #31
 801172a:	d404      	bmi.n	8011736 <_fflush_r+0x3a>
 801172c:	0599      	lsls	r1, r3, #22
 801172e:	d402      	bmi.n	8011736 <_fflush_r+0x3a>
 8011730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011732:	f000 f915 	bl	8011960 <__retarget_lock_acquire_recursive>
 8011736:	4628      	mov	r0, r5
 8011738:	4621      	mov	r1, r4
 801173a:	f7ff ff59 	bl	80115f0 <__sflush_r>
 801173e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011740:	07da      	lsls	r2, r3, #31
 8011742:	4605      	mov	r5, r0
 8011744:	d4e0      	bmi.n	8011708 <_fflush_r+0xc>
 8011746:	89a3      	ldrh	r3, [r4, #12]
 8011748:	059b      	lsls	r3, r3, #22
 801174a:	d4dd      	bmi.n	8011708 <_fflush_r+0xc>
 801174c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801174e:	f000 f908 	bl	8011962 <__retarget_lock_release_recursive>
 8011752:	e7d9      	b.n	8011708 <_fflush_r+0xc>
 8011754:	4b05      	ldr	r3, [pc, #20]	; (801176c <_fflush_r+0x70>)
 8011756:	429c      	cmp	r4, r3
 8011758:	d101      	bne.n	801175e <_fflush_r+0x62>
 801175a:	68ac      	ldr	r4, [r5, #8]
 801175c:	e7df      	b.n	801171e <_fflush_r+0x22>
 801175e:	4b04      	ldr	r3, [pc, #16]	; (8011770 <_fflush_r+0x74>)
 8011760:	429c      	cmp	r4, r3
 8011762:	bf08      	it	eq
 8011764:	68ec      	ldreq	r4, [r5, #12]
 8011766:	e7da      	b.n	801171e <_fflush_r+0x22>
 8011768:	08012a5c 	.word	0x08012a5c
 801176c:	08012a7c 	.word	0x08012a7c
 8011770:	08012a3c 	.word	0x08012a3c

08011774 <std>:
 8011774:	2300      	movs	r3, #0
 8011776:	b510      	push	{r4, lr}
 8011778:	4604      	mov	r4, r0
 801177a:	e9c0 3300 	strd	r3, r3, [r0]
 801177e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011782:	6083      	str	r3, [r0, #8]
 8011784:	8181      	strh	r1, [r0, #12]
 8011786:	6643      	str	r3, [r0, #100]	; 0x64
 8011788:	81c2      	strh	r2, [r0, #14]
 801178a:	6183      	str	r3, [r0, #24]
 801178c:	4619      	mov	r1, r3
 801178e:	2208      	movs	r2, #8
 8011790:	305c      	adds	r0, #92	; 0x5c
 8011792:	f7fd fbdd 	bl	800ef50 <memset>
 8011796:	4b05      	ldr	r3, [pc, #20]	; (80117ac <std+0x38>)
 8011798:	6263      	str	r3, [r4, #36]	; 0x24
 801179a:	4b05      	ldr	r3, [pc, #20]	; (80117b0 <std+0x3c>)
 801179c:	62a3      	str	r3, [r4, #40]	; 0x28
 801179e:	4b05      	ldr	r3, [pc, #20]	; (80117b4 <std+0x40>)
 80117a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80117a2:	4b05      	ldr	r3, [pc, #20]	; (80117b8 <std+0x44>)
 80117a4:	6224      	str	r4, [r4, #32]
 80117a6:	6323      	str	r3, [r4, #48]	; 0x30
 80117a8:	bd10      	pop	{r4, pc}
 80117aa:	bf00      	nop
 80117ac:	08011ab9 	.word	0x08011ab9
 80117b0:	08011adb 	.word	0x08011adb
 80117b4:	08011b13 	.word	0x08011b13
 80117b8:	08011b37 	.word	0x08011b37

080117bc <_cleanup_r>:
 80117bc:	4901      	ldr	r1, [pc, #4]	; (80117c4 <_cleanup_r+0x8>)
 80117be:	f000 b8af 	b.w	8011920 <_fwalk_reent>
 80117c2:	bf00      	nop
 80117c4:	080116fd 	.word	0x080116fd

080117c8 <__sfmoreglue>:
 80117c8:	b570      	push	{r4, r5, r6, lr}
 80117ca:	2268      	movs	r2, #104	; 0x68
 80117cc:	1e4d      	subs	r5, r1, #1
 80117ce:	4355      	muls	r5, r2
 80117d0:	460e      	mov	r6, r1
 80117d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80117d6:	f7ff fa17 	bl	8010c08 <_malloc_r>
 80117da:	4604      	mov	r4, r0
 80117dc:	b140      	cbz	r0, 80117f0 <__sfmoreglue+0x28>
 80117de:	2100      	movs	r1, #0
 80117e0:	e9c0 1600 	strd	r1, r6, [r0]
 80117e4:	300c      	adds	r0, #12
 80117e6:	60a0      	str	r0, [r4, #8]
 80117e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80117ec:	f7fd fbb0 	bl	800ef50 <memset>
 80117f0:	4620      	mov	r0, r4
 80117f2:	bd70      	pop	{r4, r5, r6, pc}

080117f4 <__sfp_lock_acquire>:
 80117f4:	4801      	ldr	r0, [pc, #4]	; (80117fc <__sfp_lock_acquire+0x8>)
 80117f6:	f000 b8b3 	b.w	8011960 <__retarget_lock_acquire_recursive>
 80117fa:	bf00      	nop
 80117fc:	24000d91 	.word	0x24000d91

08011800 <__sfp_lock_release>:
 8011800:	4801      	ldr	r0, [pc, #4]	; (8011808 <__sfp_lock_release+0x8>)
 8011802:	f000 b8ae 	b.w	8011962 <__retarget_lock_release_recursive>
 8011806:	bf00      	nop
 8011808:	24000d91 	.word	0x24000d91

0801180c <__sinit_lock_acquire>:
 801180c:	4801      	ldr	r0, [pc, #4]	; (8011814 <__sinit_lock_acquire+0x8>)
 801180e:	f000 b8a7 	b.w	8011960 <__retarget_lock_acquire_recursive>
 8011812:	bf00      	nop
 8011814:	24000d92 	.word	0x24000d92

08011818 <__sinit_lock_release>:
 8011818:	4801      	ldr	r0, [pc, #4]	; (8011820 <__sinit_lock_release+0x8>)
 801181a:	f000 b8a2 	b.w	8011962 <__retarget_lock_release_recursive>
 801181e:	bf00      	nop
 8011820:	24000d92 	.word	0x24000d92

08011824 <__sinit>:
 8011824:	b510      	push	{r4, lr}
 8011826:	4604      	mov	r4, r0
 8011828:	f7ff fff0 	bl	801180c <__sinit_lock_acquire>
 801182c:	69a3      	ldr	r3, [r4, #24]
 801182e:	b11b      	cbz	r3, 8011838 <__sinit+0x14>
 8011830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011834:	f7ff bff0 	b.w	8011818 <__sinit_lock_release>
 8011838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801183c:	6523      	str	r3, [r4, #80]	; 0x50
 801183e:	4b13      	ldr	r3, [pc, #76]	; (801188c <__sinit+0x68>)
 8011840:	4a13      	ldr	r2, [pc, #76]	; (8011890 <__sinit+0x6c>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	62a2      	str	r2, [r4, #40]	; 0x28
 8011846:	42a3      	cmp	r3, r4
 8011848:	bf04      	itt	eq
 801184a:	2301      	moveq	r3, #1
 801184c:	61a3      	streq	r3, [r4, #24]
 801184e:	4620      	mov	r0, r4
 8011850:	f000 f820 	bl	8011894 <__sfp>
 8011854:	6060      	str	r0, [r4, #4]
 8011856:	4620      	mov	r0, r4
 8011858:	f000 f81c 	bl	8011894 <__sfp>
 801185c:	60a0      	str	r0, [r4, #8]
 801185e:	4620      	mov	r0, r4
 8011860:	f000 f818 	bl	8011894 <__sfp>
 8011864:	2200      	movs	r2, #0
 8011866:	60e0      	str	r0, [r4, #12]
 8011868:	2104      	movs	r1, #4
 801186a:	6860      	ldr	r0, [r4, #4]
 801186c:	f7ff ff82 	bl	8011774 <std>
 8011870:	68a0      	ldr	r0, [r4, #8]
 8011872:	2201      	movs	r2, #1
 8011874:	2109      	movs	r1, #9
 8011876:	f7ff ff7d 	bl	8011774 <std>
 801187a:	68e0      	ldr	r0, [r4, #12]
 801187c:	2202      	movs	r2, #2
 801187e:	2112      	movs	r1, #18
 8011880:	f7ff ff78 	bl	8011774 <std>
 8011884:	2301      	movs	r3, #1
 8011886:	61a3      	str	r3, [r4, #24]
 8011888:	e7d2      	b.n	8011830 <__sinit+0xc>
 801188a:	bf00      	nop
 801188c:	08012670 	.word	0x08012670
 8011890:	080117bd 	.word	0x080117bd

08011894 <__sfp>:
 8011894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011896:	4607      	mov	r7, r0
 8011898:	f7ff ffac 	bl	80117f4 <__sfp_lock_acquire>
 801189c:	4b1e      	ldr	r3, [pc, #120]	; (8011918 <__sfp+0x84>)
 801189e:	681e      	ldr	r6, [r3, #0]
 80118a0:	69b3      	ldr	r3, [r6, #24]
 80118a2:	b913      	cbnz	r3, 80118aa <__sfp+0x16>
 80118a4:	4630      	mov	r0, r6
 80118a6:	f7ff ffbd 	bl	8011824 <__sinit>
 80118aa:	3648      	adds	r6, #72	; 0x48
 80118ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80118b0:	3b01      	subs	r3, #1
 80118b2:	d503      	bpl.n	80118bc <__sfp+0x28>
 80118b4:	6833      	ldr	r3, [r6, #0]
 80118b6:	b30b      	cbz	r3, 80118fc <__sfp+0x68>
 80118b8:	6836      	ldr	r6, [r6, #0]
 80118ba:	e7f7      	b.n	80118ac <__sfp+0x18>
 80118bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80118c0:	b9d5      	cbnz	r5, 80118f8 <__sfp+0x64>
 80118c2:	4b16      	ldr	r3, [pc, #88]	; (801191c <__sfp+0x88>)
 80118c4:	60e3      	str	r3, [r4, #12]
 80118c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80118ca:	6665      	str	r5, [r4, #100]	; 0x64
 80118cc:	f000 f847 	bl	801195e <__retarget_lock_init_recursive>
 80118d0:	f7ff ff96 	bl	8011800 <__sfp_lock_release>
 80118d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80118d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80118dc:	6025      	str	r5, [r4, #0]
 80118de:	61a5      	str	r5, [r4, #24]
 80118e0:	2208      	movs	r2, #8
 80118e2:	4629      	mov	r1, r5
 80118e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80118e8:	f7fd fb32 	bl	800ef50 <memset>
 80118ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80118f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80118f4:	4620      	mov	r0, r4
 80118f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118f8:	3468      	adds	r4, #104	; 0x68
 80118fa:	e7d9      	b.n	80118b0 <__sfp+0x1c>
 80118fc:	2104      	movs	r1, #4
 80118fe:	4638      	mov	r0, r7
 8011900:	f7ff ff62 	bl	80117c8 <__sfmoreglue>
 8011904:	4604      	mov	r4, r0
 8011906:	6030      	str	r0, [r6, #0]
 8011908:	2800      	cmp	r0, #0
 801190a:	d1d5      	bne.n	80118b8 <__sfp+0x24>
 801190c:	f7ff ff78 	bl	8011800 <__sfp_lock_release>
 8011910:	230c      	movs	r3, #12
 8011912:	603b      	str	r3, [r7, #0]
 8011914:	e7ee      	b.n	80118f4 <__sfp+0x60>
 8011916:	bf00      	nop
 8011918:	08012670 	.word	0x08012670
 801191c:	ffff0001 	.word	0xffff0001

08011920 <_fwalk_reent>:
 8011920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011924:	4606      	mov	r6, r0
 8011926:	4688      	mov	r8, r1
 8011928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801192c:	2700      	movs	r7, #0
 801192e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011932:	f1b9 0901 	subs.w	r9, r9, #1
 8011936:	d505      	bpl.n	8011944 <_fwalk_reent+0x24>
 8011938:	6824      	ldr	r4, [r4, #0]
 801193a:	2c00      	cmp	r4, #0
 801193c:	d1f7      	bne.n	801192e <_fwalk_reent+0xe>
 801193e:	4638      	mov	r0, r7
 8011940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011944:	89ab      	ldrh	r3, [r5, #12]
 8011946:	2b01      	cmp	r3, #1
 8011948:	d907      	bls.n	801195a <_fwalk_reent+0x3a>
 801194a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801194e:	3301      	adds	r3, #1
 8011950:	d003      	beq.n	801195a <_fwalk_reent+0x3a>
 8011952:	4629      	mov	r1, r5
 8011954:	4630      	mov	r0, r6
 8011956:	47c0      	blx	r8
 8011958:	4307      	orrs	r7, r0
 801195a:	3568      	adds	r5, #104	; 0x68
 801195c:	e7e9      	b.n	8011932 <_fwalk_reent+0x12>

0801195e <__retarget_lock_init_recursive>:
 801195e:	4770      	bx	lr

08011960 <__retarget_lock_acquire_recursive>:
 8011960:	4770      	bx	lr

08011962 <__retarget_lock_release_recursive>:
 8011962:	4770      	bx	lr

08011964 <__swhatbuf_r>:
 8011964:	b570      	push	{r4, r5, r6, lr}
 8011966:	460e      	mov	r6, r1
 8011968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801196c:	2900      	cmp	r1, #0
 801196e:	b096      	sub	sp, #88	; 0x58
 8011970:	4614      	mov	r4, r2
 8011972:	461d      	mov	r5, r3
 8011974:	da08      	bge.n	8011988 <__swhatbuf_r+0x24>
 8011976:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801197a:	2200      	movs	r2, #0
 801197c:	602a      	str	r2, [r5, #0]
 801197e:	061a      	lsls	r2, r3, #24
 8011980:	d410      	bmi.n	80119a4 <__swhatbuf_r+0x40>
 8011982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011986:	e00e      	b.n	80119a6 <__swhatbuf_r+0x42>
 8011988:	466a      	mov	r2, sp
 801198a:	f000 f8fb 	bl	8011b84 <_fstat_r>
 801198e:	2800      	cmp	r0, #0
 8011990:	dbf1      	blt.n	8011976 <__swhatbuf_r+0x12>
 8011992:	9a01      	ldr	r2, [sp, #4]
 8011994:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011998:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801199c:	425a      	negs	r2, r3
 801199e:	415a      	adcs	r2, r3
 80119a0:	602a      	str	r2, [r5, #0]
 80119a2:	e7ee      	b.n	8011982 <__swhatbuf_r+0x1e>
 80119a4:	2340      	movs	r3, #64	; 0x40
 80119a6:	2000      	movs	r0, #0
 80119a8:	6023      	str	r3, [r4, #0]
 80119aa:	b016      	add	sp, #88	; 0x58
 80119ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080119b0 <__smakebuf_r>:
 80119b0:	898b      	ldrh	r3, [r1, #12]
 80119b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119b4:	079d      	lsls	r5, r3, #30
 80119b6:	4606      	mov	r6, r0
 80119b8:	460c      	mov	r4, r1
 80119ba:	d507      	bpl.n	80119cc <__smakebuf_r+0x1c>
 80119bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119c0:	6023      	str	r3, [r4, #0]
 80119c2:	6123      	str	r3, [r4, #16]
 80119c4:	2301      	movs	r3, #1
 80119c6:	6163      	str	r3, [r4, #20]
 80119c8:	b002      	add	sp, #8
 80119ca:	bd70      	pop	{r4, r5, r6, pc}
 80119cc:	ab01      	add	r3, sp, #4
 80119ce:	466a      	mov	r2, sp
 80119d0:	f7ff ffc8 	bl	8011964 <__swhatbuf_r>
 80119d4:	9900      	ldr	r1, [sp, #0]
 80119d6:	4605      	mov	r5, r0
 80119d8:	4630      	mov	r0, r6
 80119da:	f7ff f915 	bl	8010c08 <_malloc_r>
 80119de:	b948      	cbnz	r0, 80119f4 <__smakebuf_r+0x44>
 80119e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119e4:	059a      	lsls	r2, r3, #22
 80119e6:	d4ef      	bmi.n	80119c8 <__smakebuf_r+0x18>
 80119e8:	f023 0303 	bic.w	r3, r3, #3
 80119ec:	f043 0302 	orr.w	r3, r3, #2
 80119f0:	81a3      	strh	r3, [r4, #12]
 80119f2:	e7e3      	b.n	80119bc <__smakebuf_r+0xc>
 80119f4:	4b0d      	ldr	r3, [pc, #52]	; (8011a2c <__smakebuf_r+0x7c>)
 80119f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80119f8:	89a3      	ldrh	r3, [r4, #12]
 80119fa:	6020      	str	r0, [r4, #0]
 80119fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a00:	81a3      	strh	r3, [r4, #12]
 8011a02:	9b00      	ldr	r3, [sp, #0]
 8011a04:	6163      	str	r3, [r4, #20]
 8011a06:	9b01      	ldr	r3, [sp, #4]
 8011a08:	6120      	str	r0, [r4, #16]
 8011a0a:	b15b      	cbz	r3, 8011a24 <__smakebuf_r+0x74>
 8011a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a10:	4630      	mov	r0, r6
 8011a12:	f000 f8c9 	bl	8011ba8 <_isatty_r>
 8011a16:	b128      	cbz	r0, 8011a24 <__smakebuf_r+0x74>
 8011a18:	89a3      	ldrh	r3, [r4, #12]
 8011a1a:	f023 0303 	bic.w	r3, r3, #3
 8011a1e:	f043 0301 	orr.w	r3, r3, #1
 8011a22:	81a3      	strh	r3, [r4, #12]
 8011a24:	89a0      	ldrh	r0, [r4, #12]
 8011a26:	4305      	orrs	r5, r0
 8011a28:	81a5      	strh	r5, [r4, #12]
 8011a2a:	e7cd      	b.n	80119c8 <__smakebuf_r+0x18>
 8011a2c:	080117bd 	.word	0x080117bd

08011a30 <_raise_r>:
 8011a30:	291f      	cmp	r1, #31
 8011a32:	b538      	push	{r3, r4, r5, lr}
 8011a34:	4604      	mov	r4, r0
 8011a36:	460d      	mov	r5, r1
 8011a38:	d904      	bls.n	8011a44 <_raise_r+0x14>
 8011a3a:	2316      	movs	r3, #22
 8011a3c:	6003      	str	r3, [r0, #0]
 8011a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a42:	bd38      	pop	{r3, r4, r5, pc}
 8011a44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a46:	b112      	cbz	r2, 8011a4e <_raise_r+0x1e>
 8011a48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a4c:	b94b      	cbnz	r3, 8011a62 <_raise_r+0x32>
 8011a4e:	4620      	mov	r0, r4
 8011a50:	f000 f830 	bl	8011ab4 <_getpid_r>
 8011a54:	462a      	mov	r2, r5
 8011a56:	4601      	mov	r1, r0
 8011a58:	4620      	mov	r0, r4
 8011a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a5e:	f000 b817 	b.w	8011a90 <_kill_r>
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	d00a      	beq.n	8011a7c <_raise_r+0x4c>
 8011a66:	1c59      	adds	r1, r3, #1
 8011a68:	d103      	bne.n	8011a72 <_raise_r+0x42>
 8011a6a:	2316      	movs	r3, #22
 8011a6c:	6003      	str	r3, [r0, #0]
 8011a6e:	2001      	movs	r0, #1
 8011a70:	e7e7      	b.n	8011a42 <_raise_r+0x12>
 8011a72:	2400      	movs	r4, #0
 8011a74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a78:	4628      	mov	r0, r5
 8011a7a:	4798      	blx	r3
 8011a7c:	2000      	movs	r0, #0
 8011a7e:	e7e0      	b.n	8011a42 <_raise_r+0x12>

08011a80 <raise>:
 8011a80:	4b02      	ldr	r3, [pc, #8]	; (8011a8c <raise+0xc>)
 8011a82:	4601      	mov	r1, r0
 8011a84:	6818      	ldr	r0, [r3, #0]
 8011a86:	f7ff bfd3 	b.w	8011a30 <_raise_r>
 8011a8a:	bf00      	nop
 8011a8c:	240000b0 	.word	0x240000b0

08011a90 <_kill_r>:
 8011a90:	b538      	push	{r3, r4, r5, lr}
 8011a92:	4d07      	ldr	r5, [pc, #28]	; (8011ab0 <_kill_r+0x20>)
 8011a94:	2300      	movs	r3, #0
 8011a96:	4604      	mov	r4, r0
 8011a98:	4608      	mov	r0, r1
 8011a9a:	4611      	mov	r1, r2
 8011a9c:	602b      	str	r3, [r5, #0]
 8011a9e:	f7f2 faf5 	bl	800408c <_kill>
 8011aa2:	1c43      	adds	r3, r0, #1
 8011aa4:	d102      	bne.n	8011aac <_kill_r+0x1c>
 8011aa6:	682b      	ldr	r3, [r5, #0]
 8011aa8:	b103      	cbz	r3, 8011aac <_kill_r+0x1c>
 8011aaa:	6023      	str	r3, [r4, #0]
 8011aac:	bd38      	pop	{r3, r4, r5, pc}
 8011aae:	bf00      	nop
 8011ab0:	24000d8c 	.word	0x24000d8c

08011ab4 <_getpid_r>:
 8011ab4:	f7f2 bae2 	b.w	800407c <_getpid>

08011ab8 <__sread>:
 8011ab8:	b510      	push	{r4, lr}
 8011aba:	460c      	mov	r4, r1
 8011abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ac0:	f000 f894 	bl	8011bec <_read_r>
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	bfab      	itete	ge
 8011ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011aca:	89a3      	ldrhlt	r3, [r4, #12]
 8011acc:	181b      	addge	r3, r3, r0
 8011ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011ad2:	bfac      	ite	ge
 8011ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011ad6:	81a3      	strhlt	r3, [r4, #12]
 8011ad8:	bd10      	pop	{r4, pc}

08011ada <__swrite>:
 8011ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ade:	461f      	mov	r7, r3
 8011ae0:	898b      	ldrh	r3, [r1, #12]
 8011ae2:	05db      	lsls	r3, r3, #23
 8011ae4:	4605      	mov	r5, r0
 8011ae6:	460c      	mov	r4, r1
 8011ae8:	4616      	mov	r6, r2
 8011aea:	d505      	bpl.n	8011af8 <__swrite+0x1e>
 8011aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af0:	2302      	movs	r3, #2
 8011af2:	2200      	movs	r2, #0
 8011af4:	f000 f868 	bl	8011bc8 <_lseek_r>
 8011af8:	89a3      	ldrh	r3, [r4, #12]
 8011afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b02:	81a3      	strh	r3, [r4, #12]
 8011b04:	4632      	mov	r2, r6
 8011b06:	463b      	mov	r3, r7
 8011b08:	4628      	mov	r0, r5
 8011b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b0e:	f000 b817 	b.w	8011b40 <_write_r>

08011b12 <__sseek>:
 8011b12:	b510      	push	{r4, lr}
 8011b14:	460c      	mov	r4, r1
 8011b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b1a:	f000 f855 	bl	8011bc8 <_lseek_r>
 8011b1e:	1c43      	adds	r3, r0, #1
 8011b20:	89a3      	ldrh	r3, [r4, #12]
 8011b22:	bf15      	itete	ne
 8011b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b2e:	81a3      	strheq	r3, [r4, #12]
 8011b30:	bf18      	it	ne
 8011b32:	81a3      	strhne	r3, [r4, #12]
 8011b34:	bd10      	pop	{r4, pc}

08011b36 <__sclose>:
 8011b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b3a:	f000 b813 	b.w	8011b64 <_close_r>
	...

08011b40 <_write_r>:
 8011b40:	b538      	push	{r3, r4, r5, lr}
 8011b42:	4d07      	ldr	r5, [pc, #28]	; (8011b60 <_write_r+0x20>)
 8011b44:	4604      	mov	r4, r0
 8011b46:	4608      	mov	r0, r1
 8011b48:	4611      	mov	r1, r2
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	602a      	str	r2, [r5, #0]
 8011b4e:	461a      	mov	r2, r3
 8011b50:	f7f2 fad3 	bl	80040fa <_write>
 8011b54:	1c43      	adds	r3, r0, #1
 8011b56:	d102      	bne.n	8011b5e <_write_r+0x1e>
 8011b58:	682b      	ldr	r3, [r5, #0]
 8011b5a:	b103      	cbz	r3, 8011b5e <_write_r+0x1e>
 8011b5c:	6023      	str	r3, [r4, #0]
 8011b5e:	bd38      	pop	{r3, r4, r5, pc}
 8011b60:	24000d8c 	.word	0x24000d8c

08011b64 <_close_r>:
 8011b64:	b538      	push	{r3, r4, r5, lr}
 8011b66:	4d06      	ldr	r5, [pc, #24]	; (8011b80 <_close_r+0x1c>)
 8011b68:	2300      	movs	r3, #0
 8011b6a:	4604      	mov	r4, r0
 8011b6c:	4608      	mov	r0, r1
 8011b6e:	602b      	str	r3, [r5, #0]
 8011b70:	f7f2 fadf 	bl	8004132 <_close>
 8011b74:	1c43      	adds	r3, r0, #1
 8011b76:	d102      	bne.n	8011b7e <_close_r+0x1a>
 8011b78:	682b      	ldr	r3, [r5, #0]
 8011b7a:	b103      	cbz	r3, 8011b7e <_close_r+0x1a>
 8011b7c:	6023      	str	r3, [r4, #0]
 8011b7e:	bd38      	pop	{r3, r4, r5, pc}
 8011b80:	24000d8c 	.word	0x24000d8c

08011b84 <_fstat_r>:
 8011b84:	b538      	push	{r3, r4, r5, lr}
 8011b86:	4d07      	ldr	r5, [pc, #28]	; (8011ba4 <_fstat_r+0x20>)
 8011b88:	2300      	movs	r3, #0
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	4608      	mov	r0, r1
 8011b8e:	4611      	mov	r1, r2
 8011b90:	602b      	str	r3, [r5, #0]
 8011b92:	f7f2 fada 	bl	800414a <_fstat>
 8011b96:	1c43      	adds	r3, r0, #1
 8011b98:	d102      	bne.n	8011ba0 <_fstat_r+0x1c>
 8011b9a:	682b      	ldr	r3, [r5, #0]
 8011b9c:	b103      	cbz	r3, 8011ba0 <_fstat_r+0x1c>
 8011b9e:	6023      	str	r3, [r4, #0]
 8011ba0:	bd38      	pop	{r3, r4, r5, pc}
 8011ba2:	bf00      	nop
 8011ba4:	24000d8c 	.word	0x24000d8c

08011ba8 <_isatty_r>:
 8011ba8:	b538      	push	{r3, r4, r5, lr}
 8011baa:	4d06      	ldr	r5, [pc, #24]	; (8011bc4 <_isatty_r+0x1c>)
 8011bac:	2300      	movs	r3, #0
 8011bae:	4604      	mov	r4, r0
 8011bb0:	4608      	mov	r0, r1
 8011bb2:	602b      	str	r3, [r5, #0]
 8011bb4:	f7f2 fad9 	bl	800416a <_isatty>
 8011bb8:	1c43      	adds	r3, r0, #1
 8011bba:	d102      	bne.n	8011bc2 <_isatty_r+0x1a>
 8011bbc:	682b      	ldr	r3, [r5, #0]
 8011bbe:	b103      	cbz	r3, 8011bc2 <_isatty_r+0x1a>
 8011bc0:	6023      	str	r3, [r4, #0]
 8011bc2:	bd38      	pop	{r3, r4, r5, pc}
 8011bc4:	24000d8c 	.word	0x24000d8c

08011bc8 <_lseek_r>:
 8011bc8:	b538      	push	{r3, r4, r5, lr}
 8011bca:	4d07      	ldr	r5, [pc, #28]	; (8011be8 <_lseek_r+0x20>)
 8011bcc:	4604      	mov	r4, r0
 8011bce:	4608      	mov	r0, r1
 8011bd0:	4611      	mov	r1, r2
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	602a      	str	r2, [r5, #0]
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	f7f2 fad2 	bl	8004180 <_lseek>
 8011bdc:	1c43      	adds	r3, r0, #1
 8011bde:	d102      	bne.n	8011be6 <_lseek_r+0x1e>
 8011be0:	682b      	ldr	r3, [r5, #0]
 8011be2:	b103      	cbz	r3, 8011be6 <_lseek_r+0x1e>
 8011be4:	6023      	str	r3, [r4, #0]
 8011be6:	bd38      	pop	{r3, r4, r5, pc}
 8011be8:	24000d8c 	.word	0x24000d8c

08011bec <_read_r>:
 8011bec:	b538      	push	{r3, r4, r5, lr}
 8011bee:	4d07      	ldr	r5, [pc, #28]	; (8011c0c <_read_r+0x20>)
 8011bf0:	4604      	mov	r4, r0
 8011bf2:	4608      	mov	r0, r1
 8011bf4:	4611      	mov	r1, r2
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	602a      	str	r2, [r5, #0]
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	f7f2 fa60 	bl	80040c0 <_read>
 8011c00:	1c43      	adds	r3, r0, #1
 8011c02:	d102      	bne.n	8011c0a <_read_r+0x1e>
 8011c04:	682b      	ldr	r3, [r5, #0]
 8011c06:	b103      	cbz	r3, 8011c0a <_read_r+0x1e>
 8011c08:	6023      	str	r3, [r4, #0]
 8011c0a:	bd38      	pop	{r3, r4, r5, pc}
 8011c0c:	24000d8c 	.word	0x24000d8c

08011c10 <checkint>:
 8011c10:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011c14:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	b570      	push	{r4, r5, r6, lr}
 8011c1c:	dd2a      	ble.n	8011c74 <checkint+0x64>
 8011c1e:	f240 4333 	movw	r3, #1075	; 0x433
 8011c22:	429a      	cmp	r2, r3
 8011c24:	dc24      	bgt.n	8011c70 <checkint+0x60>
 8011c26:	1a9b      	subs	r3, r3, r2
 8011c28:	f1a3 0620 	sub.w	r6, r3, #32
 8011c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c30:	fa02 f403 	lsl.w	r4, r2, r3
 8011c34:	fa02 f606 	lsl.w	r6, r2, r6
 8011c38:	f1c3 0520 	rsb	r5, r3, #32
 8011c3c:	fa22 f505 	lsr.w	r5, r2, r5
 8011c40:	4334      	orrs	r4, r6
 8011c42:	432c      	orrs	r4, r5
 8011c44:	409a      	lsls	r2, r3
 8011c46:	ea20 0202 	bic.w	r2, r0, r2
 8011c4a:	ea21 0404 	bic.w	r4, r1, r4
 8011c4e:	4322      	orrs	r2, r4
 8011c50:	f1a3 0420 	sub.w	r4, r3, #32
 8011c54:	f1c3 0220 	rsb	r2, r3, #32
 8011c58:	d10c      	bne.n	8011c74 <checkint+0x64>
 8011c5a:	40d8      	lsrs	r0, r3
 8011c5c:	fa01 f302 	lsl.w	r3, r1, r2
 8011c60:	4318      	orrs	r0, r3
 8011c62:	40e1      	lsrs	r1, r4
 8011c64:	4308      	orrs	r0, r1
 8011c66:	f000 0001 	and.w	r0, r0, #1
 8011c6a:	f1d0 0002 	rsbs	r0, r0, #2
 8011c6e:	bd70      	pop	{r4, r5, r6, pc}
 8011c70:	2002      	movs	r0, #2
 8011c72:	e7fc      	b.n	8011c6e <checkint+0x5e>
 8011c74:	2000      	movs	r0, #0
 8011c76:	e7fa      	b.n	8011c6e <checkint+0x5e>

08011c78 <pow>:
 8011c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c7c:	ee10 4a90 	vmov	r4, s1
 8011c80:	ed2d 8b0a 	vpush	{d8-d12}
 8011c84:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011c88:	ee11 7a90 	vmov	r7, s3
 8011c8c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8011c90:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8011c94:	429a      	cmp	r2, r3
 8011c96:	ee10 6a10 	vmov	r6, s0
 8011c9a:	ee11 0a10 	vmov	r0, s2
 8011c9e:	b086      	sub	sp, #24
 8011ca0:	46d4      	mov	ip, sl
 8011ca2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8011ca6:	d806      	bhi.n	8011cb6 <pow+0x3e>
 8011ca8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8011cac:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8011cb2:	f240 8156 	bls.w	8011f62 <pow+0x2ea>
 8011cb6:	1802      	adds	r2, r0, r0
 8011cb8:	eb47 0107 	adc.w	r1, r7, r7
 8011cbc:	f06f 0e01 	mvn.w	lr, #1
 8011cc0:	f112 39ff 	adds.w	r9, r2, #4294967295
 8011cc4:	f141 38ff 	adc.w	r8, r1, #4294967295
 8011cc8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8011ccc:	45ce      	cmp	lr, r9
 8011cce:	eb73 0808 	sbcs.w	r8, r3, r8
 8011cd2:	d23f      	bcs.n	8011d54 <pow+0xdc>
 8011cd4:	ea52 0301 	orrs.w	r3, r2, r1
 8011cd8:	f04f 0300 	mov.w	r3, #0
 8011cdc:	d10c      	bne.n	8011cf8 <pow+0x80>
 8011cde:	19b6      	adds	r6, r6, r6
 8011ce0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8011ce4:	4164      	adcs	r4, r4
 8011ce6:	42b3      	cmp	r3, r6
 8011ce8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011cec:	41a3      	sbcs	r3, r4
 8011cee:	f0c0 808c 	bcc.w	8011e0a <pow+0x192>
 8011cf2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011cf6:	e028      	b.n	8011d4a <pow+0xd2>
 8011cf8:	4da3      	ldr	r5, [pc, #652]	; (8011f88 <pow+0x310>)
 8011cfa:	42ac      	cmp	r4, r5
 8011cfc:	bf08      	it	eq
 8011cfe:	429e      	cmpeq	r6, r3
 8011d00:	d107      	bne.n	8011d12 <pow+0x9a>
 8011d02:	1800      	adds	r0, r0, r0
 8011d04:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011d08:	417f      	adcs	r7, r7
 8011d0a:	4283      	cmp	r3, r0
 8011d0c:	4b9f      	ldr	r3, [pc, #636]	; (8011f8c <pow+0x314>)
 8011d0e:	41bb      	sbcs	r3, r7
 8011d10:	e7ed      	b.n	8011cee <pow+0x76>
 8011d12:	19b6      	adds	r6, r6, r6
 8011d14:	489e      	ldr	r0, [pc, #632]	; (8011f90 <pow+0x318>)
 8011d16:	4164      	adcs	r4, r4
 8011d18:	42b3      	cmp	r3, r6
 8011d1a:	eb70 0504 	sbcs.w	r5, r0, r4
 8011d1e:	d374      	bcc.n	8011e0a <pow+0x192>
 8011d20:	4281      	cmp	r1, r0
 8011d22:	bf08      	it	eq
 8011d24:	429a      	cmpeq	r2, r3
 8011d26:	d170      	bne.n	8011e0a <pow+0x192>
 8011d28:	4a9a      	ldr	r2, [pc, #616]	; (8011f94 <pow+0x31c>)
 8011d2a:	4294      	cmp	r4, r2
 8011d2c:	bf08      	it	eq
 8011d2e:	429e      	cmpeq	r6, r3
 8011d30:	d0df      	beq.n	8011cf2 <pow+0x7a>
 8011d32:	4294      	cmp	r4, r2
 8011d34:	ea6f 0707 	mvn.w	r7, r7
 8011d38:	bf34      	ite	cc
 8011d3a:	2400      	movcc	r4, #0
 8011d3c:	2401      	movcs	r4, #1
 8011d3e:	0fff      	lsrs	r7, r7, #31
 8011d40:	42bc      	cmp	r4, r7
 8011d42:	f040 81d9 	bne.w	80120f8 <pow+0x480>
 8011d46:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011d4a:	b006      	add	sp, #24
 8011d4c:	ecbd 8b0a 	vpop	{d8-d12}
 8011d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d54:	eb16 0806 	adds.w	r8, r6, r6
 8011d58:	eb44 0904 	adc.w	r9, r4, r4
 8011d5c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011d60:	f169 0200 	sbc.w	r2, r9, #0
 8011d64:	458e      	cmp	lr, r1
 8011d66:	4193      	sbcs	r3, r2
 8011d68:	d223      	bcs.n	8011db2 <pow+0x13a>
 8011d6a:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011d6e:	2c00      	cmp	r4, #0
 8011d70:	da12      	bge.n	8011d98 <pow+0x120>
 8011d72:	4639      	mov	r1, r7
 8011d74:	f7ff ff4c 	bl	8011c10 <checkint>
 8011d78:	2801      	cmp	r0, #1
 8011d7a:	d10d      	bne.n	8011d98 <pow+0x120>
 8011d7c:	eeb1 0b40 	vneg.f64	d0, d0
 8011d80:	ea58 0309 	orrs.w	r3, r8, r9
 8011d84:	d10a      	bne.n	8011d9c <pow+0x124>
 8011d86:	2f00      	cmp	r7, #0
 8011d88:	dadf      	bge.n	8011d4a <pow+0xd2>
 8011d8a:	b006      	add	sp, #24
 8011d8c:	ecbd 8b0a 	vpop	{d8-d12}
 8011d90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d94:	f000 bb50 	b.w	8012438 <__math_divzero>
 8011d98:	2000      	movs	r0, #0
 8011d9a:	e7f1      	b.n	8011d80 <pow+0x108>
 8011d9c:	2f00      	cmp	r7, #0
 8011d9e:	dad4      	bge.n	8011d4a <pow+0xd2>
 8011da0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011da4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011da8:	ed8d 7b00 	vstr	d7, [sp]
 8011dac:	ed9d 0b00 	vldr	d0, [sp]
 8011db0:	e7cb      	b.n	8011d4a <pow+0xd2>
 8011db2:	2c00      	cmp	r4, #0
 8011db4:	da2c      	bge.n	8011e10 <pow+0x198>
 8011db6:	4639      	mov	r1, r7
 8011db8:	f7ff ff2a 	bl	8011c10 <checkint>
 8011dbc:	b930      	cbnz	r0, 8011dcc <pow+0x154>
 8011dbe:	b006      	add	sp, #24
 8011dc0:	ecbd 8b0a 	vpop	{d8-d12}
 8011dc4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc8:	f000 bb4e 	b.w	8012468 <__math_invalid>
 8011dcc:	2801      	cmp	r0, #1
 8011dce:	bf14      	ite	ne
 8011dd0:	2000      	movne	r0, #0
 8011dd2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011dd6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011dda:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011dde:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011de2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011de6:	2b7f      	cmp	r3, #127	; 0x7f
 8011de8:	d92d      	bls.n	8011e46 <pow+0x1ce>
 8011dea:	4b67      	ldr	r3, [pc, #412]	; (8011f88 <pow+0x310>)
 8011dec:	2000      	movs	r0, #0
 8011dee:	429c      	cmp	r4, r3
 8011df0:	bf08      	it	eq
 8011df2:	4286      	cmpeq	r6, r0
 8011df4:	f43f af7d 	beq.w	8011cf2 <pow+0x7a>
 8011df8:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011dfc:	428a      	cmp	r2, r1
 8011dfe:	d80c      	bhi.n	8011e1a <pow+0x1a2>
 8011e00:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011e04:	42b0      	cmp	r0, r6
 8011e06:	41a3      	sbcs	r3, r4
 8011e08:	d204      	bcs.n	8011e14 <pow+0x19c>
 8011e0a:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011e0e:	e79c      	b.n	8011d4a <pow+0xd2>
 8011e10:	2000      	movs	r0, #0
 8011e12:	e7e4      	b.n	8011dde <pow+0x166>
 8011e14:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011e18:	e797      	b.n	8011d4a <pow+0xd2>
 8011e1a:	2e01      	cmp	r6, #1
 8011e1c:	eb74 0303 	sbcs.w	r3, r4, r3
 8011e20:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011e24:	bf34      	ite	cc
 8011e26:	2301      	movcc	r3, #1
 8011e28:	2300      	movcs	r3, #0
 8011e2a:	4295      	cmp	r5, r2
 8011e2c:	bf8c      	ite	hi
 8011e2e:	2500      	movhi	r5, #0
 8011e30:	2501      	movls	r5, #1
 8011e32:	42ab      	cmp	r3, r5
 8011e34:	f000 809d 	beq.w	8011f72 <pow+0x2fa>
 8011e38:	b006      	add	sp, #24
 8011e3a:	ecbd 8b0a 	vpop	{d8-d12}
 8011e3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e42:	f000 baf1 	b.w	8012428 <__math_oflow>
 8011e46:	f1bc 0f00 	cmp.w	ip, #0
 8011e4a:	d10b      	bne.n	8011e64 <pow+0x1ec>
 8011e4c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011f80 <pow+0x308>
 8011e50:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011e54:	ec53 2b17 	vmov	r2, r3, d7
 8011e58:	ee17 6a10 	vmov	r6, s14
 8011e5c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011e60:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011e64:	4b4c      	ldr	r3, [pc, #304]	; (8011f98 <pow+0x320>)
 8011e66:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011e6a:	4423      	add	r3, r4
 8011e6c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011e70:	1519      	asrs	r1, r3, #20
 8011e72:	0d1b      	lsrs	r3, r3, #20
 8011e74:	051b      	lsls	r3, r3, #20
 8011e76:	eba4 0903 	sub.w	r9, r4, r3
 8011e7a:	4b48      	ldr	r3, [pc, #288]	; (8011f9c <pow+0x324>)
 8011e7c:	ee04 1a10 	vmov	s8, r1
 8011e80:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011e84:	f1b6 0800 	subs.w	r8, r6, #0
 8011e88:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8011e8c:	ec49 8b15 	vmov	d5, r8, r9
 8011e90:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011e94:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011e98:	ed93 7b00 	vldr	d7, [r3]
 8011e9c:	ed93 5b02 	vldr	d5, [r3, #8]
 8011ea0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011ea4:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011ea8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8011eac:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011eb0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8011eb4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011eb8:	ed93 5b04 	vldr	d5, [r3, #16]
 8011ebc:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011ec0:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011ec4:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011ec8:	ed93 4b08 	vldr	d4, [r3, #32]
 8011ecc:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011ed0:	eeb0 9b40 	vmov.f64	d9, d0
 8011ed4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011ed8:	ed93 5b06 	vldr	d5, [r3, #24]
 8011edc:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011ee0:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011ee4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011ee8:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011eec:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011ef0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011ef4:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011ef8:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011efc:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011f00:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011f04:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011f08:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011f0c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011f10:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011f14:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011f18:	eeab ab05 	vfma.f64	d10, d11, d5
 8011f1c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011f20:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011f24:	ee17 3a90 	vmov	r3, s15
 8011f28:	eeb0 5b47 	vmov.f64	d5, d7
 8011f2c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011f30:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011f34:	18b2      	adds	r2, r6, r2
 8011f36:	2a3e      	cmp	r2, #62	; 0x3e
 8011f38:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011f3c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011f40:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011f44:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011f48:	d92b      	bls.n	8011fa2 <pow+0x32a>
 8011f4a:	2a00      	cmp	r2, #0
 8011f4c:	da0b      	bge.n	8011f66 <pow+0x2ee>
 8011f4e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011f52:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011f56:	2800      	cmp	r0, #0
 8011f58:	f43f aef7 	beq.w	8011d4a <pow+0xd2>
 8011f5c:	eeb1 0b40 	vneg.f64	d0, d0
 8011f60:	e6f3      	b.n	8011d4a <pow+0xd2>
 8011f62:	2000      	movs	r0, #0
 8011f64:	e77e      	b.n	8011e64 <pow+0x1ec>
 8011f66:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011f6a:	d919      	bls.n	8011fa0 <pow+0x328>
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	f6bf af63 	bge.w	8011e38 <pow+0x1c0>
 8011f72:	b006      	add	sp, #24
 8011f74:	ecbd 8b0a 	vpop	{d8-d12}
 8011f78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f7c:	f000 ba4c 	b.w	8012418 <__math_uflow>
 8011f80:	00000000 	.word	0x00000000
 8011f84:	43300000 	.word	0x43300000
 8011f88:	3ff00000 	.word	0x3ff00000
 8011f8c:	fff00000 	.word	0xfff00000
 8011f90:	ffe00000 	.word	0xffe00000
 8011f94:	7fe00000 	.word	0x7fe00000
 8011f98:	c0196aab 	.word	0xc0196aab
 8011f9c:	08012aa0 	.word	0x08012aa0
 8011fa0:	2600      	movs	r6, #0
 8011fa2:	495d      	ldr	r1, [pc, #372]	; (8012118 <pow+0x4a0>)
 8011fa4:	ed91 4b02 	vldr	d4, [r1, #8]
 8011fa8:	ed91 3b00 	vldr	d3, [r1]
 8011fac:	eeb0 6b44 	vmov.f64	d6, d4
 8011fb0:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011fb4:	ee16 5a10 	vmov	r5, s12
 8011fb8:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011fbc:	ed91 4b04 	vldr	d4, [r1, #16]
 8011fc0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011fc4:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011fc8:	eeb0 0b47 	vmov.f64	d0, d7
 8011fcc:	ed91 7b06 	vldr	d7, [r1, #24]
 8011fd0:	18dc      	adds	r4, r3, r3
 8011fd2:	f104 030f 	add.w	r3, r4, #15
 8011fd6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011fda:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011fde:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011fe2:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011fe6:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011fea:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011fee:	ed91 5b08 	vldr	d5, [r1, #32]
 8011ff2:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011ff6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011ffa:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011ffe:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8012002:	eea6 7b05 	vfma.f64	d7, d6, d5
 8012006:	ee26 6b06 	vmul.f64	d6, d6, d6
 801200a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801200e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8012012:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8012016:	eea0 5b04 	vfma.f64	d5, d0, d4
 801201a:	1940      	adds	r0, r0, r5
 801201c:	2700      	movs	r7, #0
 801201e:	eb17 020c 	adds.w	r2, r7, ip
 8012022:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8012026:	eea6 7b05 	vfma.f64	d7, d6, d5
 801202a:	2e00      	cmp	r6, #0
 801202c:	d15f      	bne.n	80120ee <pow+0x476>
 801202e:	42bd      	cmp	r5, r7
 8012030:	db13      	blt.n	801205a <pow+0x3e2>
 8012032:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8012036:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801203a:	4610      	mov	r0, r2
 801203c:	ec41 0b10 	vmov	d0, r0, r1
 8012040:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012044:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012100 <pow+0x488>
 8012048:	ee20 0b07 	vmul.f64	d0, d0, d7
 801204c:	b006      	add	sp, #24
 801204e:	ecbd 8b0a 	vpop	{d8-d12}
 8012052:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012056:	f000 ba1f 	b.w	8012498 <__math_check_oflow>
 801205a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801205e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8012062:	4610      	mov	r0, r2
 8012064:	ec41 0b15 	vmov	d5, r0, r1
 8012068:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801206c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8012070:	ee35 7b06 	vadd.f64	d7, d5, d6
 8012074:	eeb0 3bc7 	vabs.f64	d3, d7
 8012078:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801207c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012080:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8012108 <pow+0x490>
 8012084:	d52a      	bpl.n	80120dc <pow+0x464>
 8012086:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801208a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012092:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8012096:	ee35 6b06 	vadd.f64	d6, d5, d6
 801209a:	bf48      	it	mi
 801209c:	eeb0 4b43 	vmovmi.f64	d4, d3
 80120a0:	ee37 3b04 	vadd.f64	d3, d7, d4
 80120a4:	ee34 5b43 	vsub.f64	d5, d4, d3
 80120a8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80120ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80120b0:	ee37 7b03 	vadd.f64	d7, d7, d3
 80120b4:	ee37 7b44 	vsub.f64	d7, d7, d4
 80120b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c0:	d104      	bne.n	80120cc <pow+0x454>
 80120c2:	4632      	mov	r2, r6
 80120c4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80120c8:	ec43 2b17 	vmov	d7, r2, r3
 80120cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80120d0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80120d4:	ee26 6b00 	vmul.f64	d6, d6, d0
 80120d8:	ed8d 6b04 	vstr	d6, [sp, #16]
 80120dc:	ee27 0b00 	vmul.f64	d0, d7, d0
 80120e0:	b006      	add	sp, #24
 80120e2:	ecbd 8b0a 	vpop	{d8-d12}
 80120e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120ea:	f000 b9cc 	b.w	8012486 <__math_check_uflow>
 80120ee:	ec43 2b10 	vmov	d0, r2, r3
 80120f2:	eea7 0b00 	vfma.f64	d0, d7, d0
 80120f6:	e628      	b.n	8011d4a <pow+0xd2>
 80120f8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8012110 <pow+0x498>
 80120fc:	e625      	b.n	8011d4a <pow+0xd2>
 80120fe:	bf00      	nop
 8012100:	00000000 	.word	0x00000000
 8012104:	7f000000 	.word	0x7f000000
 8012108:	00000000 	.word	0x00000000
 801210c:	00100000 	.word	0x00100000
	...
 8012118:	08013ae8 	.word	0x08013ae8

0801211c <asin>:
 801211c:	b508      	push	{r3, lr}
 801211e:	ed2d 8b04 	vpush	{d8-d9}
 8012122:	eeb0 8b40 	vmov.f64	d8, d0
 8012126:	f000 f847 	bl	80121b8 <__ieee754_asin>
 801212a:	eeb4 8b48 	vcmp.f64	d8, d8
 801212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012132:	eeb0 9b40 	vmov.f64	d9, d0
 8012136:	d615      	bvs.n	8012164 <asin+0x48>
 8012138:	eeb0 0b48 	vmov.f64	d0, d8
 801213c:	f000 f9c0 	bl	80124c0 <fabs>
 8012140:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012144:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214c:	dd0a      	ble.n	8012164 <asin+0x48>
 801214e:	f7fc fec7 	bl	800eee0 <__errno>
 8012152:	ecbd 8b04 	vpop	{d8-d9}
 8012156:	2321      	movs	r3, #33	; 0x21
 8012158:	6003      	str	r3, [r0, #0]
 801215a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801215e:	4804      	ldr	r0, [pc, #16]	; (8012170 <asin+0x54>)
 8012160:	f7fe bdc6 	b.w	8010cf0 <nan>
 8012164:	eeb0 0b49 	vmov.f64	d0, d9
 8012168:	ecbd 8b04 	vpop	{d8-d9}
 801216c:	bd08      	pop	{r3, pc}
 801216e:	bf00      	nop
 8012170:	08012907 	.word	0x08012907
 8012174:	00000000 	.word	0x00000000

08012178 <sqrt>:
 8012178:	b508      	push	{r3, lr}
 801217a:	ed2d 8b04 	vpush	{d8-d9}
 801217e:	eeb0 8b40 	vmov.f64	d8, d0
 8012182:	f000 f927 	bl	80123d4 <__ieee754_sqrt>
 8012186:	eeb4 8b48 	vcmp.f64	d8, d8
 801218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218e:	d60c      	bvs.n	80121aa <sqrt+0x32>
 8012190:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80121b0 <sqrt+0x38>
 8012194:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801219c:	d505      	bpl.n	80121aa <sqrt+0x32>
 801219e:	f7fc fe9f 	bl	800eee0 <__errno>
 80121a2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80121a6:	2321      	movs	r3, #33	; 0x21
 80121a8:	6003      	str	r3, [r0, #0]
 80121aa:	ecbd 8b04 	vpop	{d8-d9}
 80121ae:	bd08      	pop	{r3, pc}
	...

080121b8 <__ieee754_asin>:
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	ee10 5a90 	vmov	r5, s1
 80121be:	4b82      	ldr	r3, [pc, #520]	; (80123c8 <__ieee754_asin+0x210>)
 80121c0:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80121c4:	429c      	cmp	r4, r3
 80121c6:	ed2d 8b06 	vpush	{d8-d10}
 80121ca:	dd19      	ble.n	8012200 <__ieee754_asin+0x48>
 80121cc:	ee10 3a10 	vmov	r3, s0
 80121d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80121d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80121d8:	4323      	orrs	r3, r4
 80121da:	d10c      	bne.n	80121f6 <__ieee754_asin+0x3e>
 80121dc:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8012350 <__ieee754_asin+0x198>
 80121e0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8012358 <__ieee754_asin+0x1a0>
 80121e4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80121e8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80121ec:	eeb0 0b47 	vmov.f64	d0, d7
 80121f0:	ecbd 8b06 	vpop	{d8-d10}
 80121f4:	bd38      	pop	{r3, r4, r5, pc}
 80121f6:	ee30 7b40 	vsub.f64	d7, d0, d0
 80121fa:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80121fe:	e7f7      	b.n	80121f0 <__ieee754_asin+0x38>
 8012200:	4b72      	ldr	r3, [pc, #456]	; (80123cc <__ieee754_asin+0x214>)
 8012202:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8012206:	429c      	cmp	r4, r3
 8012208:	dc0b      	bgt.n	8012222 <__ieee754_asin+0x6a>
 801220a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 801220e:	da52      	bge.n	80122b6 <__ieee754_asin+0xfe>
 8012210:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8012360 <__ieee754_asin+0x1a8>
 8012214:	ee30 7b07 	vadd.f64	d7, d0, d7
 8012218:	eeb4 7bc9 	vcmpe.f64	d7, d9
 801221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012220:	dce6      	bgt.n	80121f0 <__ieee754_asin+0x38>
 8012222:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8012226:	f000 f94b 	bl	80124c0 <fabs>
 801222a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012368 <__ieee754_asin+0x1b0>
 801222e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8012232:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012236:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012370 <__ieee754_asin+0x1b8>
 801223a:	eeb0 0b48 	vmov.f64	d0, d8
 801223e:	eea8 6b07 	vfma.f64	d6, d8, d7
 8012242:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012378 <__ieee754_asin+0x1c0>
 8012246:	eea6 7b08 	vfma.f64	d7, d6, d8
 801224a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012380 <__ieee754_asin+0x1c8>
 801224e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8012388 <__ieee754_asin+0x1d0>
 8012252:	eea7 6b08 	vfma.f64	d6, d7, d8
 8012256:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8012390 <__ieee754_asin+0x1d8>
 801225a:	eea6 7b08 	vfma.f64	d7, d6, d8
 801225e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012398 <__ieee754_asin+0x1e0>
 8012262:	eea7 ab08 	vfma.f64	d10, d7, d8
 8012266:	ee2a ab08 	vmul.f64	d10, d10, d8
 801226a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80123a0 <__ieee754_asin+0x1e8>
 801226e:	eea8 7b06 	vfma.f64	d7, d8, d6
 8012272:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80123a8 <__ieee754_asin+0x1f0>
 8012276:	eea7 6b08 	vfma.f64	d6, d7, d8
 801227a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80123b0 <__ieee754_asin+0x1f8>
 801227e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8012282:	eea7 9b08 	vfma.f64	d9, d7, d8
 8012286:	f000 f8a5 	bl	80123d4 <__ieee754_sqrt>
 801228a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 801228e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8012292:	4b4f      	ldr	r3, [pc, #316]	; (80123d0 <__ieee754_asin+0x218>)
 8012294:	429c      	cmp	r4, r3
 8012296:	dd3d      	ble.n	8012314 <__ieee754_asin+0x15c>
 8012298:	eea0 0b05 	vfma.f64	d0, d0, d5
 801229c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80123b8 <__ieee754_asin+0x200>
 80122a0:	eea0 7b04 	vfma.f64	d7, d0, d4
 80122a4:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8012358 <__ieee754_asin+0x1a0>
 80122a8:	ee30 0b47 	vsub.f64	d0, d0, d7
 80122ac:	2d00      	cmp	r5, #0
 80122ae:	bfd8      	it	le
 80122b0:	eeb1 0b40 	vnegle.f64	d0, d0
 80122b4:	e79c      	b.n	80121f0 <__ieee754_asin+0x38>
 80122b6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012368 <__ieee754_asin+0x1b0>
 80122ba:	ee20 7b00 	vmul.f64	d7, d0, d0
 80122be:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012370 <__ieee754_asin+0x1b8>
 80122c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80122c6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012378 <__ieee754_asin+0x1c0>
 80122ca:	eea6 5b07 	vfma.f64	d5, d6, d7
 80122ce:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012380 <__ieee754_asin+0x1c8>
 80122d2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80122d6:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8012390 <__ieee754_asin+0x1d8>
 80122da:	eea6 5b07 	vfma.f64	d5, d6, d7
 80122de:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8012388 <__ieee754_asin+0x1d0>
 80122e2:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8012398 <__ieee754_asin+0x1e0>
 80122e6:	eea5 6b07 	vfma.f64	d6, d5, d7
 80122ea:	ee26 6b07 	vmul.f64	d6, d6, d7
 80122ee:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80123a0 <__ieee754_asin+0x1e8>
 80122f2:	eea7 5b04 	vfma.f64	d5, d7, d4
 80122f6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 80123a8 <__ieee754_asin+0x1f0>
 80122fa:	eea5 4b07 	vfma.f64	d4, d5, d7
 80122fe:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80123b0 <__ieee754_asin+0x1f8>
 8012302:	eea4 5b07 	vfma.f64	d5, d4, d7
 8012306:	eea5 9b07 	vfma.f64	d9, d5, d7
 801230a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801230e:	eea0 0b07 	vfma.f64	d0, d0, d7
 8012312:	e76d      	b.n	80121f0 <__ieee754_asin+0x38>
 8012314:	ec53 2b10 	vmov	r2, r3, d0
 8012318:	2200      	movs	r2, #0
 801231a:	ec43 2b16 	vmov	d6, r2, r3
 801231e:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012322:	eea6 8b46 	vfms.f64	d8, d6, d6
 8012326:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801232a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8012350 <__ieee754_asin+0x198>
 801232e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012332:	eea3 7b44 	vfms.f64	d7, d3, d4
 8012336:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801233a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80123c0 <__ieee754_asin+0x208>
 801233e:	eeb0 0b45 	vmov.f64	d0, d5
 8012342:	eea6 0b44 	vfms.f64	d0, d6, d4
 8012346:	ee37 0b40 	vsub.f64	d0, d7, d0
 801234a:	ee35 0b40 	vsub.f64	d0, d5, d0
 801234e:	e7ad      	b.n	80122ac <__ieee754_asin+0xf4>
 8012350:	33145c07 	.word	0x33145c07
 8012354:	3c91a626 	.word	0x3c91a626
 8012358:	54442d18 	.word	0x54442d18
 801235c:	3ff921fb 	.word	0x3ff921fb
 8012360:	8800759c 	.word	0x8800759c
 8012364:	7e37e43c 	.word	0x7e37e43c
 8012368:	0dfdf709 	.word	0x0dfdf709
 801236c:	3f023de1 	.word	0x3f023de1
 8012370:	7501b288 	.word	0x7501b288
 8012374:	3f49efe0 	.word	0x3f49efe0
 8012378:	b5688f3b 	.word	0xb5688f3b
 801237c:	bfa48228 	.word	0xbfa48228
 8012380:	0e884455 	.word	0x0e884455
 8012384:	3fc9c155 	.word	0x3fc9c155
 8012388:	55555555 	.word	0x55555555
 801238c:	3fc55555 	.word	0x3fc55555
 8012390:	03eb6f7d 	.word	0x03eb6f7d
 8012394:	bfd4d612 	.word	0xbfd4d612
 8012398:	b12e9282 	.word	0xb12e9282
 801239c:	3fb3b8c5 	.word	0x3fb3b8c5
 80123a0:	1b8d0159 	.word	0x1b8d0159
 80123a4:	bfe6066c 	.word	0xbfe6066c
 80123a8:	9c598ac8 	.word	0x9c598ac8
 80123ac:	40002ae5 	.word	0x40002ae5
 80123b0:	1c8a2d4b 	.word	0x1c8a2d4b
 80123b4:	c0033a27 	.word	0xc0033a27
 80123b8:	33145c07 	.word	0x33145c07
 80123bc:	bc91a626 	.word	0xbc91a626
 80123c0:	54442d18 	.word	0x54442d18
 80123c4:	3fe921fb 	.word	0x3fe921fb
 80123c8:	3fefffff 	.word	0x3fefffff
 80123cc:	3fdfffff 	.word	0x3fdfffff
 80123d0:	3fef3332 	.word	0x3fef3332

080123d4 <__ieee754_sqrt>:
 80123d4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80123d8:	4770      	bx	lr

080123da <with_errno>:
 80123da:	b513      	push	{r0, r1, r4, lr}
 80123dc:	4604      	mov	r4, r0
 80123de:	ed8d 0b00 	vstr	d0, [sp]
 80123e2:	f7fc fd7d 	bl	800eee0 <__errno>
 80123e6:	ed9d 0b00 	vldr	d0, [sp]
 80123ea:	6004      	str	r4, [r0, #0]
 80123ec:	b002      	add	sp, #8
 80123ee:	bd10      	pop	{r4, pc}

080123f0 <xflow>:
 80123f0:	b082      	sub	sp, #8
 80123f2:	b158      	cbz	r0, 801240c <xflow+0x1c>
 80123f4:	eeb1 7b40 	vneg.f64	d7, d0
 80123f8:	ed8d 7b00 	vstr	d7, [sp]
 80123fc:	ed9d 7b00 	vldr	d7, [sp]
 8012400:	2022      	movs	r0, #34	; 0x22
 8012402:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012406:	b002      	add	sp, #8
 8012408:	f7ff bfe7 	b.w	80123da <with_errno>
 801240c:	eeb0 7b40 	vmov.f64	d7, d0
 8012410:	e7f2      	b.n	80123f8 <xflow+0x8>
 8012412:	0000      	movs	r0, r0
 8012414:	0000      	movs	r0, r0
	...

08012418 <__math_uflow>:
 8012418:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012420 <__math_uflow+0x8>
 801241c:	f7ff bfe8 	b.w	80123f0 <xflow>
 8012420:	00000000 	.word	0x00000000
 8012424:	10000000 	.word	0x10000000

08012428 <__math_oflow>:
 8012428:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012430 <__math_oflow+0x8>
 801242c:	f7ff bfe0 	b.w	80123f0 <xflow>
 8012430:	00000000 	.word	0x00000000
 8012434:	70000000 	.word	0x70000000

08012438 <__math_divzero>:
 8012438:	b082      	sub	sp, #8
 801243a:	2800      	cmp	r0, #0
 801243c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012440:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8012444:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012448:	ed8d 7b00 	vstr	d7, [sp]
 801244c:	ed9d 0b00 	vldr	d0, [sp]
 8012450:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012460 <__math_divzero+0x28>
 8012454:	2022      	movs	r0, #34	; 0x22
 8012456:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801245a:	b002      	add	sp, #8
 801245c:	f7ff bfbd 	b.w	80123da <with_errno>
	...

08012468 <__math_invalid>:
 8012468:	eeb0 7b40 	vmov.f64	d7, d0
 801246c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012474:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012478:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801247c:	d602      	bvs.n	8012484 <__math_invalid+0x1c>
 801247e:	2021      	movs	r0, #33	; 0x21
 8012480:	f7ff bfab 	b.w	80123da <with_errno>
 8012484:	4770      	bx	lr

08012486 <__math_check_uflow>:
 8012486:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801248e:	d102      	bne.n	8012496 <__math_check_uflow+0x10>
 8012490:	2022      	movs	r0, #34	; 0x22
 8012492:	f7ff bfa2 	b.w	80123da <with_errno>
 8012496:	4770      	bx	lr

08012498 <__math_check_oflow>:
 8012498:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80124b8 <__math_check_oflow+0x20>
 801249c:	eeb0 7bc0 	vabs.f64	d7, d0
 80124a0:	eeb4 7b46 	vcmp.f64	d7, d6
 80124a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124a8:	dd02      	ble.n	80124b0 <__math_check_oflow+0x18>
 80124aa:	2022      	movs	r0, #34	; 0x22
 80124ac:	f7ff bf95 	b.w	80123da <with_errno>
 80124b0:	4770      	bx	lr
 80124b2:	bf00      	nop
 80124b4:	f3af 8000 	nop.w
 80124b8:	ffffffff 	.word	0xffffffff
 80124bc:	7fefffff 	.word	0x7fefffff

080124c0 <fabs>:
 80124c0:	ec51 0b10 	vmov	r0, r1, d0
 80124c4:	ee10 2a10 	vmov	r2, s0
 80124c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80124cc:	ec43 2b10 	vmov	d0, r2, r3
 80124d0:	4770      	bx	lr
	...

080124d4 <_init>:
 80124d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124d6:	bf00      	nop
 80124d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124da:	bc08      	pop	{r3}
 80124dc:	469e      	mov	lr, r3
 80124de:	4770      	bx	lr

080124e0 <_fini>:
 80124e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e2:	bf00      	nop
 80124e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124e6:	bc08      	pop	{r3}
 80124e8:	469e      	mov	lr, r3
 80124ea:	4770      	bx	lr
