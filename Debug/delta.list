
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010dbc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  08011060  08011060  00021060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012da8  08012da8  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  08012da8  08012da8  00022da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012db0  08012db0  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012db0  08012db0  00022db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012db4  08012db4  00022db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  24000000  08012db8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  24000248  08013000  00030248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000998  08013000  00030998  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be93  00000000  00000000  00030276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000341f  00000000  00000000  0004c109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0004f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  000507e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000541e  00000000  00000000  00051930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c918  00000000  00000000  00056d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016582d  00000000  00000000  00073666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d8e93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a4  00000000  00000000  001d8ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011044 	.word	0x08011044

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	08011044 	.word	0x08011044

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b74      	ldr	r3, [pc, #464]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a72      	ldr	r2, [pc, #456]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b70      	ldr	r3, [pc, #448]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b6c      	ldr	r3, [pc, #432]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a6b      	ldr	r2, [pc, #428]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b68      	ldr	r3, [pc, #416]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b65      	ldr	r3, [pc, #404]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a63      	ldr	r2, [pc, #396]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b61      	ldr	r3, [pc, #388]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a5c      	ldr	r2, [pc, #368]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b59      	ldr	r3, [pc, #356]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b56      	ldr	r3, [pc, #344]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a54      	ldr	r2, [pc, #336]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b52      	ldr	r3, [pc, #328]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a4d      	ldr	r2, [pc, #308]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a45      	ldr	r2, [pc, #276]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b6a:	483f      	ldr	r0, [pc, #252]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000b6c:	f006 f8ca 	bl	8006d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2170      	movs	r1, #112	; 0x70
 8000b74:	483d      	ldr	r0, [pc, #244]	; (8000c6c <MX_GPIO_Init+0x1f0>)
 8000b76:	f006 f8c5 	bl	8006d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8000b7a:	233f      	movs	r3, #63	; 0x3f
 8000b7c:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4838      	ldr	r0, [pc, #224]	; (8000c70 <MX_GPIO_Init+0x1f4>)
 8000b90:	f005 fef0 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482f      	ldr	r0, [pc, #188]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000bac:	f005 fee2 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000bb0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4827      	ldr	r0, [pc, #156]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000bca:	f005 fed3 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8000bce:	2370      	movs	r3, #112	; 0x70
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4821      	ldr	r0, [pc, #132]	; (8000c6c <MX_GPIO_Init+0x1f0>)
 8000be6:	f005 fec5 	bl	8006974 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	2006      	movs	r0, #6
 8000bf0:	f005 f919 	bl	8005e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bf4:	2006      	movs	r0, #6
 8000bf6:	f005 f930 	bl	8005e5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f005 f911 	bl	8005e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c04:	2007      	movs	r0, #7
 8000c06:	f005 f928 	bl	8005e5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2008      	movs	r0, #8
 8000c10:	f005 f909 	bl	8005e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c14:	2008      	movs	r0, #8
 8000c16:	f005 f920 	bl	8005e5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	2009      	movs	r0, #9
 8000c20:	f005 f901 	bl	8005e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c24:	2009      	movs	r0, #9
 8000c26:	f005 f918 	bl	8005e5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	200a      	movs	r0, #10
 8000c30:	f005 f8f9 	bl	8005e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c34:	200a      	movs	r0, #10
 8000c36:	f005 f910 	bl	8005e5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	2017      	movs	r0, #23
 8000c40:	f005 f8f1 	bl	8005e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c44:	2017      	movs	r0, #23
 8000c46:	f005 f908 	bl	8005e5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	2028      	movs	r0, #40	; 0x28
 8000c50:	f005 f8e9 	bl	8005e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c54:	2028      	movs	r0, #40	; 0x28
 8000c56:	f005 f900 	bl	8005e5a <HAL_NVIC_EnableIRQ>

}
 8000c5a:	bf00      	nop
 8000c5c:	3730      	adds	r7, #48	; 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	58024400 	.word	0x58024400
 8000c68:	58020800 	.word	0x58020800
 8000c6c:	58020c00 	.word	0x58020c00
 8000c70:	58021000 	.word	0x58021000
 8000c74:	00000000 	.word	0x00000000

08000c78 <homing>:

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

	homAprox = true;
 8000c7c:	4bb0      	ldr	r3, [pc, #704]	; (8000f40 <homing+0x2c8>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000c82:	4bb0      	ldr	r3, [pc, #704]	; (8000f44 <homing+0x2cc>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000c88:	4baf      	ldr	r3, [pc, #700]	; (8000f48 <homing+0x2d0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2020 	strb.w	r2, [r3, #32]
    motor2.hom = false;
 8000c90:	4bae      	ldr	r3, [pc, #696]	; (8000f4c <homing+0x2d4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2020 	strb.w	r2, [r3, #32]
    motor3.hom = false;
 8000c98:	4bad      	ldr	r3, [pc, #692]	; (8000f50 <homing+0x2d8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca6:	48ab      	ldr	r0, [pc, #684]	; (8000f54 <homing+0x2dc>)
 8000ca8:	f006 f82c 	bl	8006d04 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb2:	48a8      	ldr	r0, [pc, #672]	; (8000f54 <homing+0x2dc>)
 8000cb4:	f006 f826 	bl	8006d04 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cbe:	48a5      	ldr	r0, [pc, #660]	; (8000f54 <homing+0x2dc>)
 8000cc0:	f006 f820 	bl	8006d04 <HAL_GPIO_WritePin>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000cc4:	2006      	movs	r0, #6
 8000cc6:	f005 f8d6 	bl	8005e76 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f005 f8d3 	bl	8005e76 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000cd0:	2008      	movs	r0, #8
 8000cd2:	f005 f8d0 	bl	8005e76 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000cd6:	2009      	movs	r0, #9
 8000cd8:	f005 f8cd 	bl	8005e76 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f005 f8ca 	bl	8005e76 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000ce2:	2017      	movs	r0, #23
 8000ce4:	f005 f8c7 	bl	8005e76 <HAL_NVIC_DisableIRQ>

    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8000ce8:	2100      	movs	r1, #0
 8000cea:	489b      	ldr	r0, [pc, #620]	; (8000f58 <homing+0x2e0>)
 8000cec:	f008 fea0 	bl	8009a30 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	489a      	ldr	r0, [pc, #616]	; (8000f5c <homing+0x2e4>)
 8000cf4:	f008 fe9c 	bl	8009a30 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4899      	ldr	r0, [pc, #612]	; (8000f60 <homing+0x2e8>)
 8000cfc:	f008 fe98 	bl	8009a30 <HAL_TIM_PWM_Stop>


	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm)); //Escritura del registro ARR
 8000d00:	4b98      	ldr	r3, [pc, #608]	; (8000f64 <homing+0x2ec>)
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d14:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8000f28 <homing+0x2b0>
 8000d18:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d1c:	4b92      	ldr	r3, [pc, #584]	; (8000f68 <homing+0x2f0>)
 8000d1e:	ed93 7b00 	vldr	d7, [r3]
 8000d22:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8000f30 <homing+0x2b8>
 8000d26:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d2a:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8000f38 <homing+0x2c0>
 8000d2e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d36:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d3e:	4b86      	ldr	r3, [pc, #536]	; (8000f58 <homing+0x2e0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d46:	ee17 2a90 	vmov	r2, s15
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d4c:	4b85      	ldr	r3, [pc, #532]	; (8000f64 <homing+0x2ec>)
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	ee07 3a90 	vmov	s15, r3
 8000d54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d58:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d60:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8000f28 <homing+0x2b0>
 8000d64:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d68:	4b7f      	ldr	r3, [pc, #508]	; (8000f68 <homing+0x2f0>)
 8000d6a:	ed93 7b00 	vldr	d7, [r3]
 8000d6e:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8000f30 <homing+0x2b8>
 8000d72:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d76:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8000f38 <homing+0x2c0>
 8000d7a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d82:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d8e:	ee17 2a90 	vmov	r2, s15
 8000d92:	4b71      	ldr	r3, [pc, #452]	; (8000f58 <homing+0x2e0>)
 8000d94:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm));
 8000d96:	4b73      	ldr	r3, [pc, #460]	; (8000f64 <homing+0x2ec>)
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000da2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000da6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000daa:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8000f28 <homing+0x2b0>
 8000dae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000db2:	4b6d      	ldr	r3, [pc, #436]	; (8000f68 <homing+0x2f0>)
 8000db4:	ed93 7b00 	vldr	d7, [r3]
 8000db8:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000f30 <homing+0x2b8>
 8000dbc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000dc0:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8000f38 <homing+0x2c0>
 8000dc4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dc8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dcc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dd4:	4b61      	ldr	r3, [pc, #388]	; (8000f5c <homing+0x2e4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ddc:	ee17 2a90 	vmov	r2, s15
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de2:	4b60      	ldr	r3, [pc, #384]	; (8000f64 <homing+0x2ec>)
 8000de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000df2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000df6:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000f28 <homing+0x2b0>
 8000dfa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dfe:	4b5a      	ldr	r3, [pc, #360]	; (8000f68 <homing+0x2f0>)
 8000e00:	ed93 7b00 	vldr	d7, [r3]
 8000e04:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000f30 <homing+0x2b8>
 8000e08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e0c:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8000f38 <homing+0x2c0>
 8000e10:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e24:	ee17 2a90 	vmov	r2, s15
 8000e28:	4b4c      	ldr	r3, [pc, #304]	; (8000f5c <homing+0x2e4>)
 8000e2a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm));
 8000e2c:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <homing+0x2ec>)
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	ee07 3a90 	vmov	s15, r3
 8000e34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e40:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000f28 <homing+0x2b0>
 8000e44:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e48:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <homing+0x2f0>)
 8000e4a:	ed93 7b00 	vldr	d7, [r3]
 8000e4e:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8000f30 <homing+0x2b8>
 8000e52:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e56:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8000f38 <homing+0x2c0>
 8000e5a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e62:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <homing+0x2e8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e72:	ee17 2a90 	vmov	r2, s15
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e78:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <homing+0x2ec>)
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e8c:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000f28 <homing+0x2b0>
 8000e90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e94:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <homing+0x2f0>)
 8000e96:	ed93 7b00 	vldr	d7, [r3]
 8000e9a:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000f30 <homing+0x2b8>
 8000e9e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000ea2:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000f38 <homing+0x2c0>
 8000ea6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000eaa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000eae:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000eb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000eb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000eba:	ee17 2a90 	vmov	r2, s15
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <homing+0x2e8>)
 8000ec0:	60da      	str	r2, [r3, #12]



	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <homing+0x2ec>)
 8000ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ece:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ed2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <homing+0x2ec>)
 8000ed8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000edc:	ee17 2a90 	vmov	r2, s15
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <homing+0x2f4>)
 8000ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000eee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ef2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <homing+0x2f4>)
 8000ef8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000efc:	ee17 2a90 	vmov	r2, s15
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <homing+0x2f8>)
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <homing+0x2f8>)
 8000f18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f1c:	ee17 2a90 	vmov	r2, s15
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 8000f22:	e06f      	b.n	8001004 <homing+0x38c>
 8000f24:	f3af 8000 	nop.w
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	418e8480 	.word	0x418e8480
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40bf4000 	.word	0x40bf4000
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	404e0000 	.word	0x404e0000
 8000f40:	24000264 	.word	0x24000264
 8000f44:	24000265 	.word	0x24000265
 8000f48:	24000350 	.word	0x24000350
 8000f4c:	24000390 	.word	0x24000390
 8000f50:	240003d0 	.word	0x240003d0
 8000f54:	58020800 	.word	0x58020800
 8000f58:	24000628 	.word	0x24000628
 8000f5c:	24000674 	.word	0x24000674
 8000f60:	240006c0 	.word	0x240006c0
 8000f64:	40001800 	.word	0x40001800
 8000f68:	24000000 	.word	0x24000000
 8000f6c:	40001c00 	.word	0x40001c00
 8000f70:	40002000 	.word	0x40002000

        Start_PWM_MOTOR_1;
 8000f74:	2100      	movs	r1, #0
 8000f76:	4890      	ldr	r0, [pc, #576]	; (80011b8 <homing+0x540>)
 8000f78:	f008 fc4c 	bl	8009814 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	488f      	ldr	r0, [pc, #572]	; (80011bc <homing+0x544>)
 8000f80:	f008 fc48 	bl	8009814 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 8000f84:	2100      	movs	r1, #0
 8000f86:	488e      	ldr	r0, [pc, #568]	; (80011c0 <homing+0x548>)
 8000f88:	f008 fc44 	bl	8009814 <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	488d      	ldr	r0, [pc, #564]	; (80011c4 <homing+0x54c>)
 8000f90:	f005 fea0 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00d      	beq.n	8000fb6 <homing+0x33e>
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	4889      	ldr	r0, [pc, #548]	; (80011c4 <homing+0x54c>)
 8000f9e:	f005 fe99 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <homing+0x33e>
 8000fa8:	2110      	movs	r1, #16
 8000faa:	4886      	ldr	r0, [pc, #536]	; (80011c4 <homing+0x54c>)
 8000fac:	f005 fe92 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d126      	bne.n	8001004 <homing+0x38c>
            HAL_Delay(30);
 8000fb6:	201e      	movs	r0, #30
 8000fb8:	f004 fe06 	bl	8005bc8 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4881      	ldr	r0, [pc, #516]	; (80011c4 <homing+0x54c>)
 8000fc0:	f005 fe88 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00d      	beq.n	8000fe6 <homing+0x36e>
 8000fca:	2104      	movs	r1, #4
 8000fcc:	487d      	ldr	r0, [pc, #500]	; (80011c4 <homing+0x54c>)
 8000fce:	f005 fe81 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <homing+0x36e>
 8000fd8:	2110      	movs	r1, #16
 8000fda:	487a      	ldr	r0, [pc, #488]	; (80011c4 <homing+0x54c>)
 8000fdc:	f005 fe7a 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10e      	bne.n	8001004 <homing+0x38c>

                Stop_PWM_MOTOR_1;
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4873      	ldr	r0, [pc, #460]	; (80011b8 <homing+0x540>)
 8000fea:	f008 fd21 	bl	8009a30 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4872      	ldr	r0, [pc, #456]	; (80011bc <homing+0x544>)
 8000ff2:	f008 fd1d 	bl	8009a30 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4871      	ldr	r0, [pc, #452]	; (80011c0 <homing+0x548>)
 8000ffa:	f008 fd19 	bl	8009a30 <HAL_TIM_PWM_Stop>

                homAprox = false;
 8000ffe:	4b72      	ldr	r3, [pc, #456]	; (80011c8 <homing+0x550>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 8001004:	4b70      	ldr	r3, [pc, #448]	; (80011c8 <homing+0x550>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1b3      	bne.n	8000f74 <homing+0x2fc>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 800100c:	e14d      	b.n	80012aa <homing+0x632>

        if (ES1s_PRESSED && !motor1.hom) {
 800100e:	2101      	movs	r1, #1
 8001010:	486c      	ldr	r0, [pc, #432]	; (80011c4 <homing+0x54c>)
 8001012:	f005 fe5f 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d159      	bne.n	80010d0 <homing+0x458>
 800101c:	4b6b      	ldr	r3, [pc, #428]	; (80011cc <homing+0x554>)
 800101e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d154      	bne.n	80010d0 <homing+0x458>

            Stop_PWM_MOTOR_2;
 8001026:	2100      	movs	r1, #0
 8001028:	4864      	ldr	r0, [pc, #400]	; (80011bc <homing+0x544>)
 800102a:	f008 fd01 	bl	8009a30 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 800102e:	2100      	movs	r1, #0
 8001030:	4863      	ldr	r0, [pc, #396]	; (80011c0 <homing+0x548>)
 8001032:	f008 fcfd 	bl	8009a30 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 8001036:	201e      	movs	r0, #30
 8001038:	f004 fdc6 	bl	8005bc8 <HAL_Delay>

            while(ES1s_PRESSED){
 800103c:	e010      	b.n	8001060 <homing+0x3e8>

                negative_Dir_MOTOR_1;
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001044:	4862      	ldr	r0, [pc, #392]	; (80011d0 <homing+0x558>)
 8001046:	f005 fe5d 	bl	8006d04 <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 800104a:	2000      	movs	r0, #0
 800104c:	f004 fdbc 	bl	8005bc8 <HAL_Delay>
                Start_PWM_MOTOR_1;
 8001050:	2100      	movs	r1, #0
 8001052:	4859      	ldr	r0, [pc, #356]	; (80011b8 <homing+0x540>)
 8001054:	f008 fbde 	bl	8009814 <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 8001058:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105c:	f004 fdb4 	bl	8005bc8 <HAL_Delay>
            while(ES1s_PRESSED){
 8001060:	2101      	movs	r1, #1
 8001062:	4858      	ldr	r0, [pc, #352]	; (80011c4 <homing+0x54c>)
 8001064:	f005 fe36 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0e7      	beq.n	800103e <homing+0x3c6>

            }

            Stop_PWM_MOTOR_1;
 800106e:	2100      	movs	r1, #0
 8001070:	4851      	ldr	r0, [pc, #324]	; (80011b8 <homing+0x540>)
 8001072:	f008 fcdd 	bl	8009a30 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 8001076:	4b55      	ldr	r3, [pc, #340]	; (80011cc <homing+0x554>)
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2204      	movs	r2, #4
 8001082:	4954      	ldr	r1, [pc, #336]	; (80011d4 <homing+0x55c>)
 8001084:	4854      	ldr	r0, [pc, #336]	; (80011d8 <homing+0x560>)
 8001086:	f00a f9cb 	bl	800b420 <HAL_UART_Transmit>
            HAL_Delay(30);
 800108a:	201e      	movs	r0, #30
 800108c:	f004 fd9c 	bl	8005bc8 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 8001090:	2104      	movs	r1, #4
 8001092:	484c      	ldr	r0, [pc, #304]	; (80011c4 <homing+0x54c>)
 8001094:	f005 fe1e 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d008      	beq.n	80010b0 <homing+0x438>
 800109e:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <homing+0x564>)
 80010a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <homing+0x438>
 80010a8:	2100      	movs	r1, #0
 80010aa:	4844      	ldr	r0, [pc, #272]	; (80011bc <homing+0x544>)
 80010ac:	f008 fbb2 	bl	8009814 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 80010b0:	2110      	movs	r1, #16
 80010b2:	4844      	ldr	r0, [pc, #272]	; (80011c4 <homing+0x54c>)
 80010b4:	f005 fe0e 	bl	8006cd4 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d008      	beq.n	80010d0 <homing+0x458>
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <homing+0x568>)
 80010c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <homing+0x458>
 80010c8:	2100      	movs	r1, #0
 80010ca:	483d      	ldr	r0, [pc, #244]	; (80011c0 <homing+0x548>)
 80010cc:	f008 fba2 	bl	8009814 <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 80010d0:	2104      	movs	r1, #4
 80010d2:	483c      	ldr	r0, [pc, #240]	; (80011c4 <homing+0x54c>)
 80010d4:	f005 fdfe 	bl	8006cd4 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d159      	bne.n	8001192 <homing+0x51a>
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <homing+0x564>)
 80010e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d154      	bne.n	8001192 <homing+0x51a>

            Stop_PWM_MOTOR_1;
 80010e8:	2100      	movs	r1, #0
 80010ea:	4833      	ldr	r0, [pc, #204]	; (80011b8 <homing+0x540>)
 80010ec:	f008 fca0 	bl	8009a30 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80010f0:	2100      	movs	r1, #0
 80010f2:	4833      	ldr	r0, [pc, #204]	; (80011c0 <homing+0x548>)
 80010f4:	f008 fc9c 	bl	8009a30 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 80010f8:	201e      	movs	r0, #30
 80010fa:	f004 fd65 	bl	8005bc8 <HAL_Delay>

            while(ES2s_PRESSED){
 80010fe:	e010      	b.n	8001122 <homing+0x4aa>

                negative_Dir_MOTOR_2;
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001106:	4832      	ldr	r0, [pc, #200]	; (80011d0 <homing+0x558>)
 8001108:	f005 fdfc 	bl	8006d04 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 800110c:	2000      	movs	r0, #0
 800110e:	f004 fd5b 	bl	8005bc8 <HAL_Delay>
                Start_PWM_MOTOR_2;
 8001112:	2100      	movs	r1, #0
 8001114:	4829      	ldr	r0, [pc, #164]	; (80011bc <homing+0x544>)
 8001116:	f008 fb7d 	bl	8009814 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 800111a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800111e:	f004 fd53 	bl	8005bc8 <HAL_Delay>
            while(ES2s_PRESSED){
 8001122:	2104      	movs	r1, #4
 8001124:	4827      	ldr	r0, [pc, #156]	; (80011c4 <homing+0x54c>)
 8001126:	f005 fdd5 	bl	8006cd4 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0e7      	beq.n	8001100 <homing+0x488>

            }

            Stop_PWM_MOTOR_2;
 8001130:	2100      	movs	r1, #0
 8001132:	4822      	ldr	r0, [pc, #136]	; (80011bc <homing+0x544>)
 8001134:	f008 fc7c 	bl	8009a30 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <homing+0x564>)
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	2204      	movs	r2, #4
 8001144:	4927      	ldr	r1, [pc, #156]	; (80011e4 <homing+0x56c>)
 8001146:	4824      	ldr	r0, [pc, #144]	; (80011d8 <homing+0x560>)
 8001148:	f00a f96a 	bl	800b420 <HAL_UART_Transmit>
            HAL_Delay(30);
 800114c:	201e      	movs	r0, #30
 800114e:	f004 fd3b 	bl	8005bc8 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 8001152:	2101      	movs	r1, #1
 8001154:	481b      	ldr	r0, [pc, #108]	; (80011c4 <homing+0x54c>)
 8001156:	f005 fdbd 	bl	8006cd4 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <homing+0x4fa>
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <homing+0x554>)
 8001162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <homing+0x4fa>
 800116a:	2100      	movs	r1, #0
 800116c:	4812      	ldr	r0, [pc, #72]	; (80011b8 <homing+0x540>)
 800116e:	f008 fb51 	bl	8009814 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001172:	2110      	movs	r1, #16
 8001174:	4813      	ldr	r0, [pc, #76]	; (80011c4 <homing+0x54c>)
 8001176:	f005 fdad 	bl	8006cd4 <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <homing+0x51a>
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <homing+0x568>)
 8001182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d103      	bne.n	8001192 <homing+0x51a>
 800118a:	2100      	movs	r1, #0
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <homing+0x548>)
 800118e:	f008 fb41 	bl	8009814 <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 8001192:	2110      	movs	r1, #16
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <homing+0x54c>)
 8001196:	f005 fd9d 	bl	8006cd4 <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d16c      	bne.n	800127a <homing+0x602>

            Stop_PWM_MOTOR_1;
 80011a0:	2100      	movs	r1, #0
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <homing+0x540>)
 80011a4:	f008 fc44 	bl	8009a30 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 80011a8:	2100      	movs	r1, #0
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <homing+0x544>)
 80011ac:	f008 fc40 	bl	8009a30 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 80011b0:	201e      	movs	r0, #30
 80011b2:	f004 fd09 	bl	8005bc8 <HAL_Delay>

            while(ES3s_PRESSED){
 80011b6:	e028      	b.n	800120a <homing+0x592>
 80011b8:	24000628 	.word	0x24000628
 80011bc:	24000674 	.word	0x24000674
 80011c0:	240006c0 	.word	0x240006c0
 80011c4:	58021000 	.word	0x58021000
 80011c8:	24000264 	.word	0x24000264
 80011cc:	24000350 	.word	0x24000350
 80011d0:	58020800 	.word	0x58020800
 80011d4:	08011060 	.word	0x08011060
 80011d8:	240008f4 	.word	0x240008f4
 80011dc:	24000390 	.word	0x24000390
 80011e0:	240003d0 	.word	0x240003d0
 80011e4:	08011064 	.word	0x08011064

                negative_Dir_MOTOR_3;
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	4833      	ldr	r0, [pc, #204]	; (80012bc <homing+0x644>)
 80011f0:	f005 fd88 	bl	8006d04 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f004 fce7 	bl	8005bc8 <HAL_Delay>
                Start_PWM_MOTOR_3;
 80011fa:	2100      	movs	r1, #0
 80011fc:	4830      	ldr	r0, [pc, #192]	; (80012c0 <homing+0x648>)
 80011fe:	f008 fb09 	bl	8009814 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 8001202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001206:	f004 fcdf 	bl	8005bc8 <HAL_Delay>
            while(ES3s_PRESSED){
 800120a:	2110      	movs	r1, #16
 800120c:	482d      	ldr	r0, [pc, #180]	; (80012c4 <homing+0x64c>)
 800120e:	f005 fd61 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0e7      	beq.n	80011e8 <homing+0x570>
            }

            Stop_PWM_MOTOR_3;
 8001218:	2100      	movs	r1, #0
 800121a:	4829      	ldr	r0, [pc, #164]	; (80012c0 <homing+0x648>)
 800121c:	f008 fc08 	bl	8009a30 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <homing+0x650>)
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	2204      	movs	r2, #4
 800122c:	4927      	ldr	r1, [pc, #156]	; (80012cc <homing+0x654>)
 800122e:	4828      	ldr	r0, [pc, #160]	; (80012d0 <homing+0x658>)
 8001230:	f00a f8f6 	bl	800b420 <HAL_UART_Transmit>
			HAL_Delay(30);
 8001234:	201e      	movs	r0, #30
 8001236:	f004 fcc7 	bl	8005bc8 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 800123a:	2101      	movs	r1, #1
 800123c:	4821      	ldr	r0, [pc, #132]	; (80012c4 <homing+0x64c>)
 800123e:	f005 fd49 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <homing+0x5e2>
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <homing+0x65c>)
 800124a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <homing+0x5e2>
 8001252:	2100      	movs	r1, #0
 8001254:	4820      	ldr	r0, [pc, #128]	; (80012d8 <homing+0x660>)
 8001256:	f008 fadd 	bl	8009814 <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 800125a:	2104      	movs	r1, #4
 800125c:	4819      	ldr	r0, [pc, #100]	; (80012c4 <homing+0x64c>)
 800125e:	f005 fd39 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <homing+0x602>
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <homing+0x664>)
 800126a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <homing+0x602>
 8001272:	2100      	movs	r1, #0
 8001274:	481a      	ldr	r0, [pc, #104]	; (80012e0 <homing+0x668>)
 8001276:	f008 facd 	bl	8009814 <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <homing+0x65c>)
 800127c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d012      	beq.n	80012aa <homing+0x632>
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <homing+0x664>)
 8001286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00d      	beq.n	80012aa <homing+0x632>
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <homing+0x650>)
 8001290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d008      	beq.n	80012aa <homing+0x632>
        	homFin=true;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <homing+0x66c>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 800129e:	2364      	movs	r3, #100	; 0x64
 80012a0:	2204      	movs	r2, #4
 80012a2:	4911      	ldr	r1, [pc, #68]	; (80012e8 <homing+0x670>)
 80012a4:	480a      	ldr	r0, [pc, #40]	; (80012d0 <homing+0x658>)
 80012a6:	f00a f8bb 	bl	800b420 <HAL_UART_Transmit>
    while (!homFin){
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <homing+0x66c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f43f aead 	beq.w	800100e <homing+0x396>
        }
       }


    }
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	58020800 	.word	0x58020800
 80012c0:	240006c0 	.word	0x240006c0
 80012c4:	58021000 	.word	0x58021000
 80012c8:	240003d0 	.word	0x240003d0
 80012cc:	08011068 	.word	0x08011068
 80012d0:	240008f4 	.word	0x240008f4
 80012d4:	24000350 	.word	0x24000350
 80012d8:	24000628 	.word	0x24000628
 80012dc:	24000390 	.word	0x24000390
 80012e0:	24000674 	.word	0x24000674
 80012e4:	24000429 	.word	0x24000429
 80012e8:	0801106c 	.word	0x0801106c

080012ec <interpretaComando>:


volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 80012f2:	4b6e      	ldr	r3, [pc, #440]	; (80014ac <interpretaComando+0x1c0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b70      	cmp	r3, #112	; 0x70
 80012f8:	d010      	beq.n	800131c <interpretaComando+0x30>
 80012fa:	2b70      	cmp	r3, #112	; 0x70
 80012fc:	f300 80d1 	bgt.w	80014a2 <interpretaComando+0x1b6>
 8001300:	2b68      	cmp	r3, #104	; 0x68
 8001302:	d007      	beq.n	8001314 <interpretaComando+0x28>
 8001304:	2b68      	cmp	r3, #104	; 0x68
 8001306:	f300 80cc 	bgt.w	80014a2 <interpretaComando+0x1b6>
 800130a:	2b48      	cmp	r3, #72	; 0x48
 800130c:	d002      	beq.n	8001314 <interpretaComando+0x28>
 800130e:	2b50      	cmp	r3, #80	; 0x50
 8001310:	d004      	beq.n	800131c <interpretaComando+0x30>



	}

}
 8001312:	e0c6      	b.n	80014a2 <interpretaComando+0x1b6>
		state = HOME;
 8001314:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <interpretaComando+0x1c4>)
 8001316:	2203      	movs	r2, #3
 8001318:	701a      	strb	r2, [r3, #0]
	break;
 800131a:	e0c2      	b.n	80014a2 <interpretaComando+0x1b6>
		flagErrorEndStop = 0;
 800131c:	4965      	ldr	r1, [pc, #404]	; (80014b4 <interpretaComando+0x1c8>)
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 8001332:	e0ac      	b.n	800148e <interpretaComando+0x1a2>
			if(rx_buffer[i] == 'x'){
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4a5d      	ldr	r2, [pc, #372]	; (80014ac <interpretaComando+0x1c0>)
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	2b78      	cmp	r3, #120	; 0x78
 800133c:	d133      	bne.n	80013a6 <interpretaComando+0xba>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800133e:	e00c      	b.n	800135a <interpretaComando+0x6e>
					auxString[j] = rx_buffer[i+1];
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	4959      	ldr	r1, [pc, #356]	; (80014ac <interpretaComando+0x1c0>)
 8001348:	5c89      	ldrb	r1, [r1, r2]
 800134a:	4a5b      	ldr	r2, [pc, #364]	; (80014b8 <interpretaComando+0x1cc>)
 800134c:	54d1      	strb	r1, [r2, r3]
					j++;
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	3301      	adds	r3, #1
 8001352:	73bb      	strb	r3, [r7, #14]
					i++;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	3301      	adds	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	3301      	adds	r3, #1
 800135e:	4a53      	ldr	r2, [pc, #332]	; (80014ac <interpretaComando+0x1c0>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	2b20      	cmp	r3, #32
 8001364:	d1ec      	bne.n	8001340 <interpretaComando+0x54>
				Pfin.x = strtod(&auxString[0], NULL);
 8001366:	2100      	movs	r1, #0
 8001368:	4853      	ldr	r0, [pc, #332]	; (80014b8 <interpretaComando+0x1cc>)
 800136a:	f00d fa6b 	bl	800e844 <strtod>
 800136e:	eeb0 7b40 	vmov.f64	d7, d0
 8001372:	4b52      	ldr	r3, [pc, #328]	; (80014bc <interpretaComando+0x1d0>)
 8001374:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e007      	b.n	800138e <interpretaComando+0xa2>
					auxString[k] = 0;
 800137e:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <interpretaComando+0x1cc>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4413      	add	r3, r2
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3301      	adds	r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b0a      	cmp	r3, #10
 8001392:	ddf4      	ble.n	800137e <interpretaComando+0x92>
				j=0;
 8001394:	2300      	movs	r3, #0
 8001396:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	2207      	movs	r2, #7
 800139c:	4948      	ldr	r1, [pc, #288]	; (80014c0 <interpretaComando+0x1d4>)
 800139e:	4849      	ldr	r0, [pc, #292]	; (80014c4 <interpretaComando+0x1d8>)
 80013a0:	f00a f83e 	bl	800b420 <HAL_UART_Transmit>
 80013a4:	e070      	b.n	8001488 <interpretaComando+0x19c>
			else if(rx_buffer[i] == 'y'){
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4a40      	ldr	r2, [pc, #256]	; (80014ac <interpretaComando+0x1c0>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	2b79      	cmp	r3, #121	; 0x79
 80013ae:	d133      	bne.n	8001418 <interpretaComando+0x12c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80013b0:	e00c      	b.n	80013cc <interpretaComando+0xe0>
					auxString[j] = rx_buffer[i+1];
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	493c      	ldr	r1, [pc, #240]	; (80014ac <interpretaComando+0x1c0>)
 80013ba:	5c89      	ldrb	r1, [r1, r2]
 80013bc:	4a3e      	ldr	r2, [pc, #248]	; (80014b8 <interpretaComando+0x1cc>)
 80013be:	54d1      	strb	r1, [r2, r3]
					j++;
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	3301      	adds	r3, #1
 80013c4:	73bb      	strb	r3, [r7, #14]
					i++;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	3301      	adds	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a36      	ldr	r2, [pc, #216]	; (80014ac <interpretaComando+0x1c0>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	d1ec      	bne.n	80013b2 <interpretaComando+0xc6>
				Pfin.y = strtod(&auxString[0], NULL);
 80013d8:	2100      	movs	r1, #0
 80013da:	4837      	ldr	r0, [pc, #220]	; (80014b8 <interpretaComando+0x1cc>)
 80013dc:	f00d fa32 	bl	800e844 <strtod>
 80013e0:	eeb0 7b40 	vmov.f64	d7, d0
 80013e4:	4b35      	ldr	r3, [pc, #212]	; (80014bc <interpretaComando+0x1d0>)
 80013e6:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	e007      	b.n	8001400 <interpretaComando+0x114>
					auxString[k] = 0;
 80013f0:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <interpretaComando+0x1cc>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3301      	adds	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b0a      	cmp	r3, #10
 8001404:	ddf4      	ble.n	80013f0 <interpretaComando+0x104>
				j=0;
 8001406:	2300      	movs	r3, #0
 8001408:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 800140a:	2364      	movs	r3, #100	; 0x64
 800140c:	2207      	movs	r2, #7
 800140e:	492e      	ldr	r1, [pc, #184]	; (80014c8 <interpretaComando+0x1dc>)
 8001410:	482c      	ldr	r0, [pc, #176]	; (80014c4 <interpretaComando+0x1d8>)
 8001412:	f00a f805 	bl	800b420 <HAL_UART_Transmit>
 8001416:	e037      	b.n	8001488 <interpretaComando+0x19c>
			else if(rx_buffer[i] == 'z'){
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	4a24      	ldr	r2, [pc, #144]	; (80014ac <interpretaComando+0x1c0>)
 800141c:	5cd3      	ldrb	r3, [r2, r3]
 800141e:	2b7a      	cmp	r3, #122	; 0x7a
 8001420:	d132      	bne.n	8001488 <interpretaComando+0x19c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001422:	e00c      	b.n	800143e <interpretaComando+0x152>
					auxString[j] = rx_buffer[i+1];
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	4920      	ldr	r1, [pc, #128]	; (80014ac <interpretaComando+0x1c0>)
 800142c:	5c89      	ldrb	r1, [r1, r2]
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <interpretaComando+0x1cc>)
 8001430:	54d1      	strb	r1, [r2, r3]
					j++;
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	3301      	adds	r3, #1
 8001436:	73bb      	strb	r3, [r7, #14]
					i++;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	3301      	adds	r3, #1
 8001442:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <interpretaComando+0x1c0>)
 8001444:	5cd3      	ldrb	r3, [r2, r3]
 8001446:	2b20      	cmp	r3, #32
 8001448:	d1ec      	bne.n	8001424 <interpretaComando+0x138>
				Pfin.z = strtod(&auxString[0], NULL);
 800144a:	2100      	movs	r1, #0
 800144c:	481a      	ldr	r0, [pc, #104]	; (80014b8 <interpretaComando+0x1cc>)
 800144e:	f00d f9f9 	bl	800e844 <strtod>
 8001452:	eeb0 7b40 	vmov.f64	d7, d0
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <interpretaComando+0x1d0>)
 8001458:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 800145c:	2300      	movs	r3, #0
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	e007      	b.n	8001472 <interpretaComando+0x186>
					auxString[k] = 0;
 8001462:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <interpretaComando+0x1cc>)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	4413      	add	r3, r2
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b0a      	cmp	r3, #10
 8001476:	ddf4      	ble.n	8001462 <interpretaComando+0x176>
				j=0;
 8001478:	2300      	movs	r3, #0
 800147a:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	2207      	movs	r2, #7
 8001480:	4912      	ldr	r1, [pc, #72]	; (80014cc <interpretaComando+0x1e0>)
 8001482:	4810      	ldr	r0, [pc, #64]	; (80014c4 <interpretaComando+0x1d8>)
 8001484:	f009 ffcc 	bl	800b420 <HAL_UART_Transmit>
			i++;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3301      	adds	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <interpretaComando+0x1c0>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f47f af4d 	bne.w	8001334 <interpretaComando+0x48>
		receptionFlag = true;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <interpretaComando+0x1e4>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
		break;
 80014a0:	bf00      	nop
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	240004c4 	.word	0x240004c4
 80014b0:	24000428 	.word	0x24000428
 80014b4:	240004e8 	.word	0x240004e8
 80014b8:	24000268 	.word	0x24000268
 80014bc:	24000490 	.word	0x24000490
 80014c0:	08011070 	.word	0x08011070
 80014c4:	240008f4 	.word	0x240008f4
 80014c8:	08011078 	.word	0x08011078
 80014cc:	08011080 	.word	0x08011080
 80014d0:	240004e3 	.word	0x240004e3
 80014d4:	00000000 	.word	0x00000000

080014d8 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	ed2d 8b04 	vpush	{d8-d9}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	eeb0 5b40 	vmov.f64	d5, d0
 80014e6:	eeb0 6b41 	vmov.f64	d6, d1
 80014ea:	eeb0 7b42 	vmov.f64	d7, d2
 80014ee:	ed87 5b00 	vstr	d5, [r7]
 80014f2:	ed87 6b02 	vstr	d6, [r7, #8]
 80014f6:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 80014fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80014fe:	ed9f 6bee 	vldr	d6, [pc, #952]	; 80018b8 <inverseKinematic+0x3e0>
 8001502:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001506:	ed9f 6bee 	vldr	d6, [pc, #952]	; 80018c0 <inverseKinematic+0x3e8>
 800150a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800150e:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001512:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001516:	ed97 7b04 	vldr	d7, [r7, #16]
 800151a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800151e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001522:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001526:	eeb0 0b45 	vmov.f64	d0, d5
 800152a:	f00f f95d 	bl	80107e8 <pow>
 800152e:	eeb0 7b40 	vmov.f64	d7, d0
 8001532:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001536:	ee37 7b06 	vadd.f64	d7, d7, d6
 800153a:	4bf9      	ldr	r3, [pc, #996]	; (8001920 <inverseKinematic+0x448>)
 800153c:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8001540:	ed97 7b00 	vldr	d7, [r7]
 8001544:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80018c8 <inverseKinematic+0x3f0>
 8001548:	ee37 7b06 	vadd.f64	d7, d7, d6
 800154c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80018d0 <inverseKinematic+0x3f8>
 8001550:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001554:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80018d8 <inverseKinematic+0x400>
 8001558:	ee36 6b47 	vsub.f64	d6, d6, d7
 800155c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001560:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 80018e0 <inverseKinematic+0x408>
 8001564:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001568:	ee37 7b07 	vadd.f64	d7, d7, d7
 800156c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001570:	ed97 7b04 	vldr	d7, [r7, #16]
 8001574:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001578:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800157c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001580:	eeb0 0b45 	vmov.f64	d0, d5
 8001584:	f00f f930 	bl	80107e8 <pow>
 8001588:	eeb0 7b40 	vmov.f64	d7, d0
 800158c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001590:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001594:	4be3      	ldr	r3, [pc, #908]	; (8001924 <inverseKinematic+0x44c>)
 8001596:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 800159a:	ed97 7b00 	vldr	d7, [r7]
 800159e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80018c8 <inverseKinematic+0x3f0>
 80015a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80015a6:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80018d0 <inverseKinematic+0x3f8>
 80015aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80015b2:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 80018e0 <inverseKinematic+0x408>
 80015b6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80015ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80015be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015c2:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 80018e8 <inverseKinematic+0x410>
 80015c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015ca:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 80018c0 <inverseKinematic+0x3e8>
 80015ce:	ee37 6b06 	vadd.f64	d6, d7, d6
 80015d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80015d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80015da:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80015de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015e2:	eeb0 0b45 	vmov.f64	d0, d5
 80015e6:	f00f f8ff 	bl	80107e8 <pow>
 80015ea:	eeb0 7b40 	vmov.f64	d7, d0
 80015ee:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80015f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015f6:	4bcc      	ldr	r3, [pc, #816]	; (8001928 <inverseKinematic+0x450>)
 80015f8:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 80015fc:	ed97 7b02 	vldr	d7, [r7, #8]
 8001600:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80018b8 <inverseKinematic+0x3e0>
 8001604:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001608:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80018c0 <inverseKinematic+0x3e8>
 800160c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001610:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001614:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001618:	ed97 7b04 	vldr	d7, [r7, #16]
 800161c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001620:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001624:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001628:	ed97 7b02 	vldr	d7, [r7, #8]
 800162c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80018b8 <inverseKinematic+0x3e0>
 8001630:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001634:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001638:	eeb0 0b47 	vmov.f64	d0, d7
 800163c:	f00f f8d4 	bl	80107e8 <pow>
 8001640:	eeb0 7b40 	vmov.f64	d7, d0
 8001644:	ed9f 6baa 	vldr	d6, [pc, #680]	; 80018f0 <inverseKinematic+0x418>
 8001648:	ee37 9b06 	vadd.f64	d9, d7, d6
 800164c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001650:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001654:	eeb0 0b47 	vmov.f64	d0, d7
 8001658:	f00f f8c6 	bl	80107e8 <pow>
 800165c:	eeb0 7b40 	vmov.f64	d7, d0
 8001660:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001664:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80018f8 <inverseKinematic+0x420>
 8001668:	ee37 9b46 	vsub.f64	d9, d7, d6
 800166c:	ed97 7b00 	vldr	d7, [r7]
 8001670:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001674:	eeb0 0b47 	vmov.f64	d0, d7
 8001678:	f00f f8b6 	bl	80107e8 <pow>
 800167c:	eeb0 7b40 	vmov.f64	d7, d0
 8001680:	ee39 5b07 	vadd.f64	d5, d9, d7
 8001684:	ed97 7b04 	vldr	d7, [r7, #16]
 8001688:	ee37 6b07 	vadd.f64	d6, d7, d7
 800168c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001690:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001694:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001900 <inverseKinematic+0x428>
 8001698:	ee37 7b06 	vadd.f64	d7, d7, d6
 800169c:	4ba3      	ldr	r3, [pc, #652]	; (800192c <inverseKinematic+0x454>)
 800169e:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 80016a2:	ed97 7b00 	vldr	d7, [r7]
 80016a6:	ed9f 6b88 	vldr	d6, [pc, #544]	; 80018c8 <inverseKinematic+0x3f0>
 80016aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016ae:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001908 <inverseKinematic+0x430>
 80016b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016b6:	ed97 7b02 	vldr	d7, [r7, #8]
 80016ba:	ed9f 5b89 	vldr	d5, [pc, #548]	; 80018e0 <inverseKinematic+0x408>
 80016be:	ee37 7b05 	vadd.f64	d7, d7, d5
 80016c2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016ca:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80018d8 <inverseKinematic+0x400>
 80016ce:	ee37 5b06 	vadd.f64	d5, d7, d6
 80016d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80016d6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80016da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016de:	ee37 8b07 	vadd.f64	d8, d7, d7
 80016e2:	ed97 7b00 	vldr	d7, [r7]
 80016e6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80018c8 <inverseKinematic+0x3f0>
 80016ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016ee:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80016f2:	eeb0 0b47 	vmov.f64	d0, d7
 80016f6:	f00f f877 	bl	80107e8 <pow>
 80016fa:	eeb0 7b40 	vmov.f64	d7, d0
 80016fe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80018f0 <inverseKinematic+0x418>
 8001702:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001706:	ed97 7b02 	vldr	d7, [r7, #8]
 800170a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 80018e0 <inverseKinematic+0x408>
 800170e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001712:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001716:	eeb0 0b47 	vmov.f64	d0, d7
 800171a:	f00f f865 	bl	80107e8 <pow>
 800171e:	eeb0 7b40 	vmov.f64	d7, d0
 8001722:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001726:	ed97 7b04 	vldr	d7, [r7, #16]
 800172a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800172e:	eeb0 0b47 	vmov.f64	d0, d7
 8001732:	f00f f859 	bl	80107e8 <pow>
 8001736:	eeb0 7b40 	vmov.f64	d7, d0
 800173a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800173e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80018f8 <inverseKinematic+0x420>
 8001742:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001746:	ed97 7b04 	vldr	d7, [r7, #16]
 800174a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800174e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001752:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001756:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80018d8 <inverseKinematic+0x400>
 800175a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800175e:	4b74      	ldr	r3, [pc, #464]	; (8001930 <inverseKinematic+0x458>)
 8001760:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001764:	ed97 7b00 	vldr	d7, [r7]
 8001768:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80018c8 <inverseKinematic+0x3f0>
 800176c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001770:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80018d0 <inverseKinematic+0x3f8>
 8001774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001778:	ed97 7b02 	vldr	d7, [r7, #8]
 800177c:	ed9f 5b58 	vldr	d5, [pc, #352]	; 80018e0 <inverseKinematic+0x408>
 8001780:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001784:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001788:	ee36 7b47 	vsub.f64	d7, d6, d7
 800178c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80018e8 <inverseKinematic+0x410>
 8001790:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001794:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80018c0 <inverseKinematic+0x3e8>
 8001798:	ee37 5b06 	vadd.f64	d5, d7, d6
 800179c:	ed97 7b04 	vldr	d7, [r7, #16]
 80017a0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017a8:	ee37 8b07 	vadd.f64	d8, d7, d7
 80017ac:	ed97 7b00 	vldr	d7, [r7]
 80017b0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80018c8 <inverseKinematic+0x3f0>
 80017b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017bc:	eeb0 0b47 	vmov.f64	d0, d7
 80017c0:	f00f f812 	bl	80107e8 <pow>
 80017c4:	eeb0 9b40 	vmov.f64	d9, d0
 80017c8:	ed97 7b02 	vldr	d7, [r7, #8]
 80017cc:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80018e0 <inverseKinematic+0x408>
 80017d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017d4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017d8:	eeb0 0b47 	vmov.f64	d0, d7
 80017dc:	f00f f804 	bl	80107e8 <pow>
 80017e0:	eeb0 7b40 	vmov.f64	d7, d0
 80017e4:	ee39 9b07 	vadd.f64	d9, d9, d7
 80017e8:	ed97 7b04 	vldr	d7, [r7, #16]
 80017ec:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017f0:	eeb0 0b47 	vmov.f64	d0, d7
 80017f4:	f00e fff8 	bl	80107e8 <pow>
 80017f8:	eeb0 7b40 	vmov.f64	d7, d0
 80017fc:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001800:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80018f8 <inverseKinematic+0x420>
 8001804:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001808:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001910 <inverseKinematic+0x438>
 800180c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001810:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001918 <inverseKinematic+0x440>
 8001814:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001818:	ed97 7b04 	vldr	d7, [r7, #16]
 800181c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001820:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001824:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001828:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80018d8 <inverseKinematic+0x400>
 800182c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001830:	4b40      	ldr	r3, [pc, #256]	; (8001934 <inverseKinematic+0x45c>)
 8001832:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8001836:	ed97 7b02 	vldr	d7, [r7, #8]
 800183a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80018b8 <inverseKinematic+0x3e0>
 800183e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001842:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001846:	eeb0 0b47 	vmov.f64	d0, d7
 800184a:	f00e ffcd 	bl	80107e8 <pow>
 800184e:	eeb0 8b40 	vmov.f64	d8, d0
 8001852:	ed97 7b04 	vldr	d7, [r7, #16]
 8001856:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800185a:	eeb0 0b47 	vmov.f64	d0, d7
 800185e:	f00e ffc3 	bl	80107e8 <pow>
 8001862:	eeb0 7b40 	vmov.f64	d7, d0
 8001866:	ee38 7b07 	vadd.f64	d7, d8, d7
 800186a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80018f8 <inverseKinematic+0x420>
 800186e:	ee37 8b46 	vsub.f64	d8, d7, d6
 8001872:	ed97 7b00 	vldr	d7, [r7]
 8001876:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800187a:	eeb0 0b47 	vmov.f64	d0, d7
 800187e:	f00e ffb3 	bl	80107e8 <pow>
 8001882:	eeb0 7b40 	vmov.f64	d7, d0
 8001886:	ee38 7b07 	vadd.f64	d7, d8, d7
 800188a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001910 <inverseKinematic+0x438>
 800188e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001892:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001918 <inverseKinematic+0x440>
 8001896:	ee37 6b06 	vadd.f64	d6, d7, d6
 800189a:	ed97 7b04 	vldr	d7, [r7, #16]
 800189e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018a2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80018a6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018aa:	eeb0 0b45 	vmov.f64	d0, d5
 80018ae:	f00e ff9b 	bl	80107e8 <pow>
 80018b2:	eeb0 7b40 	vmov.f64	d7, d0
 80018b6:	e03f      	b.n	8001938 <inverseKinematic+0x460>
 80018b8:	1eb851ec 	.word	0x1eb851ec
 80018bc:	3fb1eb85 	.word	0x3fb1eb85
 80018c0:	24dd2f1b 	.word	0x24dd2f1b
 80018c4:	3fc58106 	.word	0x3fc58106
 80018c8:	5625749b 	.word	0x5625749b
 80018cc:	3faf09d1 	.word	0x3faf09d1
 80018d0:	e8584caa 	.word	0xe8584caa
 80018d4:	400bb67a 	.word	0x400bb67a
 80018d8:	24dd2f1d 	.word	0x24dd2f1d
 80018dc:	3fe58106 	.word	0x3fe58106
 80018e0:	1eb851ec 	.word	0x1eb851ec
 80018e4:	3fa1eb85 	.word	0x3fa1eb85
 80018e8:	9ba5e356 	.word	0x9ba5e356
 80018ec:	3fe020c4 	.word	0x3fe020c4
 80018f0:	f705857e 	.word	0xf705857e
 80018f4:	3f881e03 	.word	0x3f881e03
 80018f8:	70a3d70a 	.word	0x70a3d70a
 80018fc:	3fd70a3d 	.word	0x3fd70a3d
 8001900:	24dd2f1b 	.word	0x24dd2f1b
 8001904:	3fd58106 	.word	0x3fd58106
 8001908:	e8584caa 	.word	0xe8584caa
 800190c:	c00bb67a 	.word	0xc00bb67a
 8001910:	93d96639 	.word	0x93d96639
 8001914:	3f9ce6c0 	.word	0x3f9ce6c0
 8001918:	47ae147c 	.word	0x47ae147c
 800191c:	3fa47ae1 	.word	0x3fa47ae1
 8001920:	24000278 	.word	0x24000278
 8001924:	240002c0 	.word	0x240002c0
 8001928:	24000308 	.word	0x24000308
 800192c:	24000280 	.word	0x24000280
 8001930:	240002c8 	.word	0x240002c8
 8001934:	24000310 	.word	0x24000310
 8001938:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001cb8 <inverseKinematic+0x7e0>
 800193c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001940:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001cc0 <inverseKinematic+0x7e8>
 8001944:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001948:	4be7      	ldr	r3, [pc, #924]	; (8001ce8 <inverseKinematic+0x810>)
 800194a:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 800194e:	ed97 7b00 	vldr	d7, [r7]
 8001952:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001cc8 <inverseKinematic+0x7f0>
 8001956:	ee37 7b06 	vadd.f64	d7, d7, d6
 800195a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800195e:	eeb0 0b47 	vmov.f64	d0, d7
 8001962:	f00e ff41 	bl	80107e8 <pow>
 8001966:	eeb0 7b40 	vmov.f64	d7, d0
 800196a:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001cd0 <inverseKinematic+0x7f8>
 800196e:	ee37 8b06 	vadd.f64	d8, d7, d6
 8001972:	ed97 7b02 	vldr	d7, [r7, #8]
 8001976:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001cd8 <inverseKinematic+0x800>
 800197a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800197e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001982:	eeb0 0b47 	vmov.f64	d0, d7
 8001986:	f00e ff2f 	bl	80107e8 <pow>
 800198a:	eeb0 7b40 	vmov.f64	d7, d0
 800198e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001992:	ed97 7b04 	vldr	d7, [r7, #16]
 8001996:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800199a:	eeb0 0b47 	vmov.f64	d0, d7
 800199e:	f00e ff23 	bl	80107e8 <pow>
 80019a2:	eeb0 7b40 	vmov.f64	d7, d0
 80019a6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80019aa:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001ce0 <inverseKinematic+0x808>
 80019ae:	ee37 6b46 	vsub.f64	d6, d7, d6
 80019b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80019b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80019ba:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80019be:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019c2:	eeb0 0b45 	vmov.f64	d0, d5
 80019c6:	f00e ff0f 	bl	80107e8 <pow>
 80019ca:	eeb0 7b40 	vmov.f64	d7, d0
 80019ce:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001cd0 <inverseKinematic+0x7f8>
 80019d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019d6:	4bc5      	ldr	r3, [pc, #788]	; (8001cec <inverseKinematic+0x814>)
 80019d8:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 80019dc:	ed97 7b00 	vldr	d7, [r7]
 80019e0:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001cc8 <inverseKinematic+0x7f0>
 80019e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019ec:	eeb0 0b47 	vmov.f64	d0, d7
 80019f0:	f00e fefa 	bl	80107e8 <pow>
 80019f4:	eeb0 8b40 	vmov.f64	d8, d0
 80019f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80019fc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001cd8 <inverseKinematic+0x800>
 8001a00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a04:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a08:	eeb0 0b47 	vmov.f64	d0, d7
 8001a0c:	f00e feec 	bl	80107e8 <pow>
 8001a10:	eeb0 7b40 	vmov.f64	d7, d0
 8001a14:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001a18:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a1c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a20:	eeb0 0b47 	vmov.f64	d0, d7
 8001a24:	f00e fee0 	bl	80107e8 <pow>
 8001a28:	eeb0 7b40 	vmov.f64	d7, d0
 8001a2c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a30:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001ce0 <inverseKinematic+0x808>
 8001a34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a38:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001cc0 <inverseKinematic+0x7e8>
 8001a3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a40:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001cb8 <inverseKinematic+0x7e0>
 8001a44:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a48:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a4c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a50:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001a54:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a58:	eeb0 0b45 	vmov.f64	d0, d5
 8001a5c:	f00e fec4 	bl	80107e8 <pow>
 8001a60:	eeb0 7b40 	vmov.f64	d7, d0
 8001a64:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001cd0 <inverseKinematic+0x7f8>
 8001a68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a6c:	4ba0      	ldr	r3, [pc, #640]	; (8001cf0 <inverseKinematic+0x818>)
 8001a6e:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001a72:	4ba0      	ldr	r3, [pc, #640]	; (8001cf4 <inverseKinematic+0x81c>)
 8001a74:	ed93 7b00 	vldr	d7, [r3]
 8001a78:	eeb1 8b47 	vneg.f64	d8, d7
 8001a7c:	4b9d      	ldr	r3, [pc, #628]	; (8001cf4 <inverseKinematic+0x81c>)
 8001a7e:	ed93 7b00 	vldr	d7, [r3]
 8001a82:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a86:	eeb0 0b47 	vmov.f64	d0, d7
 8001a8a:	f00e fead 	bl	80107e8 <pow>
 8001a8e:	eeb0 5b40 	vmov.f64	d5, d0
 8001a92:	4b99      	ldr	r3, [pc, #612]	; (8001cf8 <inverseKinematic+0x820>)
 8001a94:	ed93 7b00 	vldr	d7, [r3]
 8001a98:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001a9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001aa0:	4b91      	ldr	r3, [pc, #580]	; (8001ce8 <inverseKinematic+0x810>)
 8001aa2:	ed93 7b00 	vldr	d7, [r3]
 8001aa6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001aaa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001aae:	eeb0 0b47 	vmov.f64	d0, d7
 8001ab2:	f00f f919 	bl	8010ce8 <sqrt>
 8001ab6:	eeb0 7b40 	vmov.f64	d7, d0
 8001aba:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001abe:	4b8e      	ldr	r3, [pc, #568]	; (8001cf8 <inverseKinematic+0x820>)
 8001ac0:	ed93 7b00 	vldr	d7, [r3]
 8001ac4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001ac8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001acc:	4b8b      	ldr	r3, [pc, #556]	; (8001cfc <inverseKinematic+0x824>)
 8001ace:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001ad2:	4b88      	ldr	r3, [pc, #544]	; (8001cf4 <inverseKinematic+0x81c>)
 8001ad4:	ed93 7b00 	vldr	d7, [r3]
 8001ad8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001adc:	eeb0 0b47 	vmov.f64	d0, d7
 8001ae0:	f00e fe82 	bl	80107e8 <pow>
 8001ae4:	eeb0 5b40 	vmov.f64	d5, d0
 8001ae8:	4b83      	ldr	r3, [pc, #524]	; (8001cf8 <inverseKinematic+0x820>)
 8001aea:	ed93 7b00 	vldr	d7, [r3]
 8001aee:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001af2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001af6:	4b7c      	ldr	r3, [pc, #496]	; (8001ce8 <inverseKinematic+0x810>)
 8001af8:	ed93 7b00 	vldr	d7, [r3]
 8001afc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b00:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001b04:	eeb0 0b47 	vmov.f64	d0, d7
 8001b08:	f00f f8ee 	bl	8010ce8 <sqrt>
 8001b0c:	eeb0 6b40 	vmov.f64	d6, d0
 8001b10:	4b78      	ldr	r3, [pc, #480]	; (8001cf4 <inverseKinematic+0x81c>)
 8001b12:	ed93 7b00 	vldr	d7, [r3]
 8001b16:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001b1a:	4b77      	ldr	r3, [pc, #476]	; (8001cf8 <inverseKinematic+0x820>)
 8001b1c:	ed93 7b00 	vldr	d7, [r3]
 8001b20:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001b24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b28:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <inverseKinematic+0x828>)
 8001b2a:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001b2e:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <inverseKinematic+0x82c>)
 8001b30:	ed93 7b00 	vldr	d7, [r3]
 8001b34:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b38:	eeb0 0b47 	vmov.f64	d0, d7
 8001b3c:	f00e fe54 	bl	80107e8 <pow>
 8001b40:	eeb0 5b40 	vmov.f64	d5, d0
 8001b44:	4b70      	ldr	r3, [pc, #448]	; (8001d08 <inverseKinematic+0x830>)
 8001b46:	ed93 7b00 	vldr	d7, [r3]
 8001b4a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001b4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b52:	4b66      	ldr	r3, [pc, #408]	; (8001cec <inverseKinematic+0x814>)
 8001b54:	ed93 7b00 	vldr	d7, [r3]
 8001b58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001b60:	eeb0 0b47 	vmov.f64	d0, d7
 8001b64:	f00f f8c0 	bl	8010ce8 <sqrt>
 8001b68:	eeb0 6b40 	vmov.f64	d6, d0
 8001b6c:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <inverseKinematic+0x82c>)
 8001b6e:	ed93 7b00 	vldr	d7, [r3]
 8001b72:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001b76:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <inverseKinematic+0x830>)
 8001b78:	ed93 7b00 	vldr	d7, [r3]
 8001b7c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001b80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b84:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <inverseKinematic+0x834>)
 8001b86:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001b8a:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <inverseKinematic+0x82c>)
 8001b8c:	ed93 7b00 	vldr	d7, [r3]
 8001b90:	eeb1 8b47 	vneg.f64	d8, d7
 8001b94:	4b5b      	ldr	r3, [pc, #364]	; (8001d04 <inverseKinematic+0x82c>)
 8001b96:	ed93 7b00 	vldr	d7, [r3]
 8001b9a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b9e:	eeb0 0b47 	vmov.f64	d0, d7
 8001ba2:	f00e fe21 	bl	80107e8 <pow>
 8001ba6:	eeb0 5b40 	vmov.f64	d5, d0
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <inverseKinematic+0x830>)
 8001bac:	ed93 7b00 	vldr	d7, [r3]
 8001bb0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001bb4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <inverseKinematic+0x814>)
 8001bba:	ed93 7b00 	vldr	d7, [r3]
 8001bbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001bc6:	eeb0 0b47 	vmov.f64	d0, d7
 8001bca:	f00f f88d 	bl	8010ce8 <sqrt>
 8001bce:	eeb0 7b40 	vmov.f64	d7, d0
 8001bd2:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <inverseKinematic+0x830>)
 8001bd8:	ed93 7b00 	vldr	d7, [r3]
 8001bdc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001be0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001be4:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <inverseKinematic+0x838>)
 8001be6:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <inverseKinematic+0x83c>)
 8001bec:	ed93 7b00 	vldr	d7, [r3]
 8001bf0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bf4:	eeb0 0b47 	vmov.f64	d0, d7
 8001bf8:	f00e fdf6 	bl	80107e8 <pow>
 8001bfc:	eeb0 5b40 	vmov.f64	d5, d0
 8001c00:	4b45      	ldr	r3, [pc, #276]	; (8001d18 <inverseKinematic+0x840>)
 8001c02:	ed93 7b00 	vldr	d7, [r3]
 8001c06:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c0e:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <inverseKinematic+0x818>)
 8001c10:	ed93 7b00 	vldr	d7, [r3]
 8001c14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c20:	f00f f862 	bl	8010ce8 <sqrt>
 8001c24:	eeb0 6b40 	vmov.f64	d6, d0
 8001c28:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <inverseKinematic+0x83c>)
 8001c2a:	ed93 7b00 	vldr	d7, [r3]
 8001c2e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001c32:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <inverseKinematic+0x840>)
 8001c34:	ed93 7b00 	vldr	d7, [r3]
 8001c38:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001c3c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <inverseKinematic+0x844>)
 8001c42:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001c46:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <inverseKinematic+0x83c>)
 8001c48:	ed93 7b00 	vldr	d7, [r3]
 8001c4c:	eeb1 8b47 	vneg.f64	d8, d7
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <inverseKinematic+0x83c>)
 8001c52:	ed93 7b00 	vldr	d7, [r3]
 8001c56:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c5a:	eeb0 0b47 	vmov.f64	d0, d7
 8001c5e:	f00e fdc3 	bl	80107e8 <pow>
 8001c62:	eeb0 5b40 	vmov.f64	d5, d0
 8001c66:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <inverseKinematic+0x840>)
 8001c68:	ed93 7b00 	vldr	d7, [r3]
 8001c6c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <inverseKinematic+0x818>)
 8001c76:	ed93 7b00 	vldr	d7, [r3]
 8001c7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c7e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c82:	eeb0 0b47 	vmov.f64	d0, d7
 8001c86:	f00f f82f 	bl	8010ce8 <sqrt>
 8001c8a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c8e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <inverseKinematic+0x840>)
 8001c94:	ed93 7b00 	vldr	d7, [r3]
 8001c98:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001c9c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <inverseKinematic+0x848>)
 8001ca2:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8001ca6:	491f      	ldr	r1, [pc, #124]	; (8001d24 <inverseKinematic+0x84c>)
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9c1 2300 	strd	r2, r3, [r1]
 8001cb4:	e038      	b.n	8001d28 <inverseKinematic+0x850>
 8001cb6:	bf00      	nop
 8001cb8:	47ae147c 	.word	0x47ae147c
 8001cbc:	3fa47ae1 	.word	0x3fa47ae1
 8001cc0:	93d96639 	.word	0x93d96639
 8001cc4:	3f9ce6c0 	.word	0x3f9ce6c0
 8001cc8:	5625749b 	.word	0x5625749b
 8001ccc:	3faf09d1 	.word	0x3faf09d1
 8001cd0:	f705857e 	.word	0xf705857e
 8001cd4:	3f881e03 	.word	0x3f881e03
 8001cd8:	1eb851ec 	.word	0x1eb851ec
 8001cdc:	3fa1eb85 	.word	0x3fa1eb85
 8001ce0:	70a3d70a 	.word	0x70a3d70a
 8001ce4:	3fd70a3d 	.word	0x3fd70a3d
 8001ce8:	24000288 	.word	0x24000288
 8001cec:	240002d0 	.word	0x240002d0
 8001cf0:	24000318 	.word	0x24000318
 8001cf4:	24000280 	.word	0x24000280
 8001cf8:	24000278 	.word	0x24000278
 8001cfc:	240002a0 	.word	0x240002a0
 8001d00:	240002a8 	.word	0x240002a8
 8001d04:	240002c8 	.word	0x240002c8
 8001d08:	240002c0 	.word	0x240002c0
 8001d0c:	240002e8 	.word	0x240002e8
 8001d10:	240002f0 	.word	0x240002f0
 8001d14:	24000310 	.word	0x24000310
 8001d18:	24000308 	.word	0x24000308
 8001d1c:	24000330 	.word	0x24000330
 8001d20:	24000338 	.word	0x24000338
 8001d24:	24000290 	.word	0x24000290
	XJ1_2 = 0;
 8001d28:	49f1      	ldr	r1, [pc, #964]	; (80020f0 <inverseKinematic+0xc18>)
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8001d36:	4bef      	ldr	r3, [pc, #956]	; (80020f4 <inverseKinematic+0xc1c>)
 8001d38:	ed93 7b00 	vldr	d7, [r3]
 8001d3c:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8002088 <inverseKinematic+0xbb0>
 8001d40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d44:	4bec      	ldr	r3, [pc, #944]	; (80020f8 <inverseKinematic+0xc20>)
 8001d46:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8001d4a:	4bec      	ldr	r3, [pc, #944]	; (80020fc <inverseKinematic+0xc24>)
 8001d4c:	ed93 7b00 	vldr	d7, [r3]
 8001d50:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8002088 <inverseKinematic+0xbb0>
 8001d54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d58:	4be9      	ldr	r3, [pc, #932]	; (8002100 <inverseKinematic+0xc28>)
 8001d5a:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001d5e:	4be9      	ldr	r3, [pc, #932]	; (8002104 <inverseKinematic+0xc2c>)
 8001d60:	ed93 7b00 	vldr	d7, [r3]
 8001d64:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8002090 <inverseKinematic+0xbb8>
 8001d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d6c:	4be6      	ldr	r3, [pc, #920]	; (8002108 <inverseKinematic+0xc30>)
 8001d6e:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8001d72:	4be6      	ldr	r3, [pc, #920]	; (800210c <inverseKinematic+0xc34>)
 8001d74:	ed93 7b00 	vldr	d7, [r3]
 8001d78:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8002090 <inverseKinematic+0xbb8>
 8001d7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d80:	4be3      	ldr	r3, [pc, #908]	; (8002110 <inverseKinematic+0xc38>)
 8001d82:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001d86:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d8a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002098 <inverseKinematic+0xbc0>
 8001d8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d92:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 80020a0 <inverseKinematic+0xbc8>
 8001d96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d9a:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001d9e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001da2:	ed97 7b04 	vldr	d7, [r7, #16]
 8001da6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001daa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001dae:	4bd9      	ldr	r3, [pc, #868]	; (8002114 <inverseKinematic+0xc3c>)
 8001db0:	ed93 7b00 	vldr	d7, [r3]
 8001db4:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001db8:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dbc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8002098 <inverseKinematic+0xbc0>
 8001dc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dc4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001dc8:	eeb0 0b47 	vmov.f64	d0, d7
 8001dcc:	f00e fd0c 	bl	80107e8 <pow>
 8001dd0:	eeb0 9b40 	vmov.f64	d9, d0
 8001dd4:	ed97 7b04 	vldr	d7, [r7, #16]
 8001dd8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ddc:	eeb0 0b47 	vmov.f64	d0, d7
 8001de0:	f00e fd02 	bl	80107e8 <pow>
 8001de4:	eeb0 7b40 	vmov.f64	d7, d0
 8001de8:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001dec:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80020a8 <inverseKinematic+0xbd0>
 8001df0:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001df4:	ed97 7b00 	vldr	d7, [r7]
 8001df8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001dfc:	eeb0 0b47 	vmov.f64	d0, d7
 8001e00:	f00e fcf2 	bl	80107e8 <pow>
 8001e04:	eeb0 7b40 	vmov.f64	d7, d0
 8001e08:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001e0c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80020b0 <inverseKinematic+0xbd8>
 8001e10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e14:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80020b8 <inverseKinematic+0xbe0>
 8001e18:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001e1c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e20:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e28:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001e2c:	4bba      	ldr	r3, [pc, #744]	; (8002118 <inverseKinematic+0xc40>)
 8001e2e:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001e32:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e36:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002098 <inverseKinematic+0xbc0>
 8001e3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e3e:	ed9f 6b98 	vldr	d6, [pc, #608]	; 80020a0 <inverseKinematic+0xbc8>
 8001e42:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e46:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001e4a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001e4e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001e56:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001e5a:	4bb0      	ldr	r3, [pc, #704]	; (800211c <inverseKinematic+0xc44>)
 8001e5c:	ed93 7b00 	vldr	d7, [r3]
 8001e60:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001e64:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e68:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002098 <inverseKinematic+0xbc0>
 8001e6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e70:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e74:	eeb0 0b47 	vmov.f64	d0, d7
 8001e78:	f00e fcb6 	bl	80107e8 <pow>
 8001e7c:	eeb0 9b40 	vmov.f64	d9, d0
 8001e80:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e84:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e88:	eeb0 0b47 	vmov.f64	d0, d7
 8001e8c:	f00e fcac 	bl	80107e8 <pow>
 8001e90:	eeb0 7b40 	vmov.f64	d7, d0
 8001e94:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001e98:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80020a8 <inverseKinematic+0xbd0>
 8001e9c:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001ea0:	ed97 7b00 	vldr	d7, [r7]
 8001ea4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ea8:	eeb0 0b47 	vmov.f64	d0, d7
 8001eac:	f00e fc9c 	bl	80107e8 <pow>
 8001eb0:	eeb0 7b40 	vmov.f64	d7, d0
 8001eb4:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001eb8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80020b0 <inverseKinematic+0xbd8>
 8001ebc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ec0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80020b8 <inverseKinematic+0xbe0>
 8001ec4:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001ec8:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ecc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001ed0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ed4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001ed8:	4b91      	ldr	r3, [pc, #580]	; (8002120 <inverseKinematic+0xc48>)
 8001eda:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001ede:	ed97 7b00 	vldr	d7, [r7]
 8001ee2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80020c0 <inverseKinematic+0xbe8>
 8001ee6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001eea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80020c8 <inverseKinematic+0xbf0>
 8001eee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ef2:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ef6:	ed9f 5b76 	vldr	d5, [pc, #472]	; 80020d0 <inverseKinematic+0xbf8>
 8001efa:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001efe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f06:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80020d8 <inverseKinematic+0xc00>
 8001f0a:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001f0e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f12:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f16:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001f1a:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <inverseKinematic+0xc1c>)
 8001f1c:	ed93 7b00 	vldr	d7, [r3]
 8001f20:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001f24:	ed97 7b00 	vldr	d7, [r7]
 8001f28:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80020c0 <inverseKinematic+0xbe8>
 8001f2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f30:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f34:	eeb0 0b47 	vmov.f64	d0, d7
 8001f38:	f00e fc56 	bl	80107e8 <pow>
 8001f3c:	eeb0 7b40 	vmov.f64	d7, d0
 8001f40:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80020e0 <inverseKinematic+0xc08>
 8001f44:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001f48:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f4c:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80020d0 <inverseKinematic+0xbf8>
 8001f50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f54:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f58:	eeb0 0b47 	vmov.f64	d0, d7
 8001f5c:	f00e fc44 	bl	80107e8 <pow>
 8001f60:	eeb0 7b40 	vmov.f64	d7, d0
 8001f64:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001f68:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f6c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f70:	eeb0 0b47 	vmov.f64	d0, d7
 8001f74:	f00e fc38 	bl	80107e8 <pow>
 8001f78:	eeb0 7b40 	vmov.f64	d7, d0
 8001f7c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001f80:	ed9f 6b49 	vldr	d6, [pc, #292]	; 80020a8 <inverseKinematic+0xbd0>
 8001f84:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001f88:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f8c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001f90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f94:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001f98:	4b62      	ldr	r3, [pc, #392]	; (8002124 <inverseKinematic+0xc4c>)
 8001f9a:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001f9e:	ed97 7b00 	vldr	d7, [r7]
 8001fa2:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80020c0 <inverseKinematic+0xbe8>
 8001fa6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001faa:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80020c8 <inverseKinematic+0xbf0>
 8001fae:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fb2:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fb6:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80020d0 <inverseKinematic+0xbf8>
 8001fba:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001fbe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fc6:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80020d8 <inverseKinematic+0xc00>
 8001fca:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001fce:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fd2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fd6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001fda:	4b48      	ldr	r3, [pc, #288]	; (80020fc <inverseKinematic+0xc24>)
 8001fdc:	ed93 7b00 	vldr	d7, [r3]
 8001fe0:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001fe4:	ed97 7b00 	vldr	d7, [r7]
 8001fe8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80020c0 <inverseKinematic+0xbe8>
 8001fec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ff0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ff4:	eeb0 0b47 	vmov.f64	d0, d7
 8001ff8:	f00e fbf6 	bl	80107e8 <pow>
 8001ffc:	eeb0 7b40 	vmov.f64	d7, d0
 8002000:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80020e0 <inverseKinematic+0xc08>
 8002004:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002008:	ed97 7b02 	vldr	d7, [r7, #8]
 800200c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80020d0 <inverseKinematic+0xbf8>
 8002010:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002014:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002018:	eeb0 0b47 	vmov.f64	d0, d7
 800201c:	f00e fbe4 	bl	80107e8 <pow>
 8002020:	eeb0 7b40 	vmov.f64	d7, d0
 8002024:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002028:	ed97 7b04 	vldr	d7, [r7, #16]
 800202c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002030:	eeb0 0b47 	vmov.f64	d0, d7
 8002034:	f00e fbd8 	bl	80107e8 <pow>
 8002038:	eeb0 7b40 	vmov.f64	d7, d0
 800203c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002040:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80020a8 <inverseKinematic+0xbd0>
 8002044:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002048:	ed97 7b04 	vldr	d7, [r7, #16]
 800204c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002050:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002054:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002058:	4b33      	ldr	r3, [pc, #204]	; (8002128 <inverseKinematic+0xc50>)
 800205a:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800205e:	ed97 7b00 	vldr	d7, [r7]
 8002062:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80020c0 <inverseKinematic+0xbe8>
 8002066:	ee37 7b46 	vsub.f64	d7, d7, d6
 800206a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80020e8 <inverseKinematic+0xc10>
 800206e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002072:	ed97 7b02 	vldr	d7, [r7, #8]
 8002076:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80020d0 <inverseKinematic+0xbf8>
 800207a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800207e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002082:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002086:	e051      	b.n	800212c <inverseKinematic+0xc54>
 8002088:	e8584caa 	.word	0xe8584caa
 800208c:	3ffbb67a 	.word	0x3ffbb67a
 8002090:	e8584caa 	.word	0xe8584caa
 8002094:	bffbb67a 	.word	0xbffbb67a
 8002098:	1eb851ec 	.word	0x1eb851ec
 800209c:	3fb1eb85 	.word	0x3fb1eb85
 80020a0:	24dd2f1b 	.word	0x24dd2f1b
 80020a4:	3fc58106 	.word	0x3fc58106
 80020a8:	70a3d70a 	.word	0x70a3d70a
 80020ac:	3fd70a3d 	.word	0x3fd70a3d
 80020b0:	93d96639 	.word	0x93d96639
 80020b4:	3f9ce6c0 	.word	0x3f9ce6c0
 80020b8:	47ae147c 	.word	0x47ae147c
 80020bc:	3fa47ae1 	.word	0x3fa47ae1
 80020c0:	5625749b 	.word	0x5625749b
 80020c4:	3faf09d1 	.word	0x3faf09d1
 80020c8:	e8584caa 	.word	0xe8584caa
 80020cc:	c00bb67a 	.word	0xc00bb67a
 80020d0:	1eb851ec 	.word	0x1eb851ec
 80020d4:	3fa1eb85 	.word	0x3fa1eb85
 80020d8:	24dd2f1d 	.word	0x24dd2f1d
 80020dc:	3fe58106 	.word	0x3fe58106
 80020e0:	f705857e 	.word	0xf705857e
 80020e4:	3f881e03 	.word	0x3f881e03
 80020e8:	e8584caa 	.word	0xe8584caa
 80020ec:	400bb67a 	.word	0x400bb67a
 80020f0:	24000298 	.word	0x24000298
 80020f4:	240002e8 	.word	0x240002e8
 80020f8:	240002d8 	.word	0x240002d8
 80020fc:	240002f0 	.word	0x240002f0
 8002100:	240002e0 	.word	0x240002e0
 8002104:	24000330 	.word	0x24000330
 8002108:	24000320 	.word	0x24000320
 800210c:	24000338 	.word	0x24000338
 8002110:	24000328 	.word	0x24000328
 8002114:	240002a0 	.word	0x240002a0
 8002118:	240002b0 	.word	0x240002b0
 800211c:	240002a8 	.word	0x240002a8
 8002120:	240002b8 	.word	0x240002b8
 8002124:	240002f8 	.word	0x240002f8
 8002128:	24000300 	.word	0x24000300
 800212c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002370 <inverseKinematic+0xe98>
 8002130:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002134:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002378 <inverseKinematic+0xea0>
 8002138:	ee37 5b06 	vadd.f64	d5, d7, d6
 800213c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002140:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002144:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002148:	4b9f      	ldr	r3, [pc, #636]	; (80023c8 <inverseKinematic+0xef0>)
 800214a:	ed93 7b00 	vldr	d7, [r3]
 800214e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002152:	ed97 7b00 	vldr	d7, [r7]
 8002156:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8002380 <inverseKinematic+0xea8>
 800215a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800215e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002162:	eeb0 0b47 	vmov.f64	d0, d7
 8002166:	f00e fb3f 	bl	80107e8 <pow>
 800216a:	eeb0 9b40 	vmov.f64	d9, d0
 800216e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002172:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002388 <inverseKinematic+0xeb0>
 8002176:	ee37 7b06 	vadd.f64	d7, d7, d6
 800217a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800217e:	eeb0 0b47 	vmov.f64	d0, d7
 8002182:	f00e fb31 	bl	80107e8 <pow>
 8002186:	eeb0 7b40 	vmov.f64	d7, d0
 800218a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800218e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002192:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002196:	eeb0 0b47 	vmov.f64	d0, d7
 800219a:	f00e fb25 	bl	80107e8 <pow>
 800219e:	eeb0 7b40 	vmov.f64	d7, d0
 80021a2:	ee39 7b07 	vadd.f64	d7, d9, d7
 80021a6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002390 <inverseKinematic+0xeb8>
 80021aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021ae:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002398 <inverseKinematic+0xec0>
 80021b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021b6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80023a0 <inverseKinematic+0xec8>
 80021ba:	ee37 5b06 	vadd.f64	d5, d7, d6
 80021be:	ed97 7b04 	vldr	d7, [r7, #16]
 80021c2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80021c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021ca:	ee38 7b07 	vadd.f64	d7, d8, d7
 80021ce:	4b7f      	ldr	r3, [pc, #508]	; (80023cc <inverseKinematic+0xef4>)
 80021d0:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80021d4:	ed97 7b00 	vldr	d7, [r7]
 80021d8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002380 <inverseKinematic+0xea8>
 80021dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021e0:	ed9f 6b71 	vldr	d6, [pc, #452]	; 80023a8 <inverseKinematic+0xed0>
 80021e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021e8:	ed97 7b02 	vldr	d7, [r7, #8]
 80021ec:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002388 <inverseKinematic+0xeb0>
 80021f0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80021f4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021fc:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002370 <inverseKinematic+0xe98>
 8002200:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002204:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002378 <inverseKinematic+0xea0>
 8002208:	ee37 5b06 	vadd.f64	d5, d7, d6
 800220c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002210:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002214:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002218:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <inverseKinematic+0xef8>)
 800221a:	ed93 7b00 	vldr	d7, [r3]
 800221e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002222:	ed97 7b00 	vldr	d7, [r7]
 8002226:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002380 <inverseKinematic+0xea8>
 800222a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800222e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002232:	eeb0 0b47 	vmov.f64	d0, d7
 8002236:	f00e fad7 	bl	80107e8 <pow>
 800223a:	eeb0 9b40 	vmov.f64	d9, d0
 800223e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002242:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002388 <inverseKinematic+0xeb0>
 8002246:	ee37 7b06 	vadd.f64	d7, d7, d6
 800224a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800224e:	eeb0 0b47 	vmov.f64	d0, d7
 8002252:	f00e fac9 	bl	80107e8 <pow>
 8002256:	eeb0 7b40 	vmov.f64	d7, d0
 800225a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800225e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002262:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002266:	eeb0 0b47 	vmov.f64	d0, d7
 800226a:	f00e fabd 	bl	80107e8 <pow>
 800226e:	eeb0 7b40 	vmov.f64	d7, d0
 8002272:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002276:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002390 <inverseKinematic+0xeb8>
 800227a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800227e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002398 <inverseKinematic+0xec0>
 8002282:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002286:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80023a0 <inverseKinematic+0xec8>
 800228a:	ee37 5b06 	vadd.f64	d5, d7, d6
 800228e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002292:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002296:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800229a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <inverseKinematic+0xefc>)
 80022a0:	ed83 7b00 	vstr	d7, [r3]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 80022a4:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <inverseKinematic+0xf00>)
 80022a6:	ed93 7b00 	vldr	d7, [r3]
 80022aa:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80023b0 <inverseKinematic+0xed8>
 80022ae:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80022b2:	eeb0 0b46 	vmov.f64	d0, d6
 80022b6:	f00e fce9 	bl	8010c8c <asin>
 80022ba:	eeb0 7b40 	vmov.f64	d7, d0
 80022be:	eeb1 7b47 	vneg.f64	d7, d7
 80022c2:	4b46      	ldr	r3, [pc, #280]	; (80023dc <inverseKinematic+0xf04>)
 80022c4:	ed83 7b02 	vstr	d7, [r3, #8]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 80022c8:	4b44      	ldr	r3, [pc, #272]	; (80023dc <inverseKinematic+0xf04>)
 80022ca:	ed93 7b02 	vldr	d7, [r3, #8]
 80022ce:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80023b8 <inverseKinematic+0xee0>
 80022d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80022d6:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 80023c0 <inverseKinematic+0xee8>
 80022da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022de:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <inverseKinematic+0xf04>)
 80022e0:	ed83 7b02 	vstr	d7, [r3, #8]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 80022e4:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <inverseKinematic+0xf08>)
 80022e6:	ed93 7b00 	vldr	d7, [r3]
 80022ea:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80023b0 <inverseKinematic+0xed8>
 80022ee:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80022f2:	eeb0 0b46 	vmov.f64	d0, d6
 80022f6:	f00e fcc9 	bl	8010c8c <asin>
 80022fa:	eeb0 7b40 	vmov.f64	d7, d0
 80022fe:	eeb1 7b47 	vneg.f64	d7, d7
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <inverseKinematic+0xf0c>)
 8002304:	ed83 7b02 	vstr	d7, [r3, #8]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <inverseKinematic+0xf0c>)
 800230a:	ed93 7b02 	vldr	d7, [r3, #8]
 800230e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80023b8 <inverseKinematic+0xee0>
 8002312:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002316:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80023c0 <inverseKinematic+0xee8>
 800231a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <inverseKinematic+0xf0c>)
 8002320:	ed83 7b02 	vstr	d7, [r3, #8]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <inverseKinematic+0xef4>)
 8002326:	ed93 7b00 	vldr	d7, [r3]
 800232a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80023b0 <inverseKinematic+0xed8>
 800232e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002332:	eeb0 0b46 	vmov.f64	d0, d6
 8002336:	f00e fca9 	bl	8010c8c <asin>
 800233a:	eeb0 7b40 	vmov.f64	d7, d0
 800233e:	eeb1 7b47 	vneg.f64	d7, d7
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <inverseKinematic+0xf10>)
 8002344:	ed83 7b02 	vstr	d7, [r3, #8]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <inverseKinematic+0xf10>)
 800234a:	ed93 7b02 	vldr	d7, [r3, #8]
 800234e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80023b8 <inverseKinematic+0xee0>
 8002352:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002356:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 80023c0 <inverseKinematic+0xee8>
 800235a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <inverseKinematic+0xf10>)
 8002360:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	ecbd 8b04 	vpop	{d8-d9}
 800236e:	bd80      	pop	{r7, pc}
 8002370:	9ba5e356 	.word	0x9ba5e356
 8002374:	3fe020c4 	.word	0x3fe020c4
 8002378:	24dd2f1b 	.word	0x24dd2f1b
 800237c:	3fc58106 	.word	0x3fc58106
 8002380:	5625749b 	.word	0x5625749b
 8002384:	3faf09d1 	.word	0x3faf09d1
 8002388:	1eb851ec 	.word	0x1eb851ec
 800238c:	3fa1eb85 	.word	0x3fa1eb85
 8002390:	70a3d70a 	.word	0x70a3d70a
 8002394:	3fd70a3d 	.word	0x3fd70a3d
 8002398:	93d96639 	.word	0x93d96639
 800239c:	3f9ce6c0 	.word	0x3f9ce6c0
 80023a0:	47ae147c 	.word	0x47ae147c
 80023a4:	3fa47ae1 	.word	0x3fa47ae1
 80023a8:	e8584caa 	.word	0xe8584caa
 80023ac:	400bb67a 	.word	0x400bb67a
 80023b0:	9999999a 	.word	0x9999999a
 80023b4:	3fc99999 	.word	0x3fc99999
 80023b8:	00000000 	.word	0x00000000
 80023bc:	40668000 	.word	0x40668000
 80023c0:	54442eea 	.word	0x54442eea
 80023c4:	400921fb 	.word	0x400921fb
 80023c8:	24000330 	.word	0x24000330
 80023cc:	24000340 	.word	0x24000340
 80023d0:	24000338 	.word	0x24000338
 80023d4:	24000348 	.word	0x24000348
 80023d8:	240002b0 	.word	0x240002b0
 80023dc:	24000350 	.word	0x24000350
 80023e0:	240002f8 	.word	0x240002f8
 80023e4:	24000390 	.word	0x24000390
 80023e8:	240003d0 	.word	0x240003d0

080023ec <robotInitialization>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void robotInitialization(void){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */


	HAL_TIM_Base_Start(&htim12);
 80023f0:	481d      	ldr	r0, [pc, #116]	; (8002468 <robotInitialization+0x7c>)
 80023f2:	f007 f86f 	bl	80094d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 80023f6:	481d      	ldr	r0, [pc, #116]	; (800246c <robotInitialization+0x80>)
 80023f8:	f007 f86c 	bl	80094d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 80023fc:	481c      	ldr	r0, [pc, #112]	; (8002470 <robotInitialization+0x84>)
 80023fe:	f007 f869 	bl	80094d4 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	2110      	movs	r1, #16
 8002406:	481b      	ldr	r0, [pc, #108]	; (8002474 <robotInitialization+0x88>)
 8002408:	f004 fc7c 	bl	8006d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	2120      	movs	r1, #32
 8002410:	4818      	ldr	r0, [pc, #96]	; (8002474 <robotInitialization+0x88>)
 8002412:	f004 fc77 	bl	8006d04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	2140      	movs	r1, #64	; 0x40
 800241a:	4816      	ldr	r0, [pc, #88]	; (8002474 <robotInitialization+0x88>)
 800241c:	f004 fc72 	bl	8006d04 <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002420:	2032      	movs	r0, #50	; 0x32
 8002422:	f003 fbd1 	bl	8005bc8 <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 8002426:	2200      	movs	r2, #0
 8002428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242c:	4812      	ldr	r0, [pc, #72]	; (8002478 <robotInitialization+0x8c>)
 800242e:	f004 fc69 	bl	8006d04 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002438:	480f      	ldr	r0, [pc, #60]	; (8002478 <robotInitialization+0x8c>)
 800243a:	f004 fc63 	bl	8006d04 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <robotInitialization+0x8c>)
 8002446:	f004 fc5d 	bl	8006d04 <HAL_GPIO_WritePin>
    Stop_PWM_MOTOR_1;
    Stop_PWM_MOTOR_2;
    Stop_PWM_MOTOR_3;

    */
	motor1.stepReached = false;
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <robotInitialization+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	motor2.stepReached = false;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <robotInitialization+0x94>)
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	motor3.stepReached = false;
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <robotInitialization+0x98>)
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	24000628 	.word	0x24000628
 800246c:	24000674 	.word	0x24000674
 8002470:	240006c0 	.word	0x240006c0
 8002474:	58020c00 	.word	0x58020c00
 8002478:	58020800 	.word	0x58020800
 800247c:	24000350 	.word	0x24000350
 8002480:	24000390 	.word	0x24000390
 8002484:	240003d0 	.word	0x240003d0

08002488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800248c:	f003 fb0a 	bl	8005aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002490:	f000 faec 	bl	8002a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002494:	f7fe faf2 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002498:	f000 ff4a 	bl	8003330 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800249c:	f003 f960 	bl	8005760 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 80024a0:	f001 f8e8 	bl	8003674 <MX_TIM12_Init>
  MX_TIM13_Init();
 80024a4:	f001 f948 	bl	8003738 <MX_TIM13_Init>
  MX_TIM14_Init();
 80024a8:	f001 f992 	bl	80037d0 <MX_TIM14_Init>
  MX_TIM5_Init();
 80024ac:	f001 f894 	bl	80035d8 <MX_TIM5_Init>
  MX_TIM15_Init();
 80024b0:	f001 f9da 	bl	8003868 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 80024b4:	f003 f908 	bl	80056c8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80024b8:	f003 f8ba 	bl	8005630 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80024bc:	f001 f81a 	bl	80034f4 <MX_TIM4_Init>
  MX_TIM3_Init();
 80024c0:	f000 ffa6 	bl	8003410 <MX_TIM3_Init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		switch (state){
 80024c4:	4b60      	ldr	r3, [pc, #384]	; (8002648 <main+0x1c0>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	f200 829e 	bhi.w	8002a0a <main+0x582>
 80024ce:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <main+0x4c>)
 80024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d4:	080024e9 	.word	0x080024e9
 80024d8:	08002891 	.word	0x08002891
 80024dc:	080025fd 	.word	0x080025fd
 80024e0:	08002517 	.word	0x08002517
 80024e4:	08002a0b 	.word	0x08002a0b

		case INIT:

			  HAL_UART_Transmit(&huart3, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 80024e8:	2364      	movs	r3, #100	; 0x64
 80024ea:	221c      	movs	r2, #28
 80024ec:	4957      	ldr	r1, [pc, #348]	; (800264c <main+0x1c4>)
 80024ee:	4858      	ldr	r0, [pc, #352]	; (8002650 <main+0x1c8>)
 80024f0:	f008 ff96 	bl	800b420 <HAL_UART_Transmit>
			  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80024f4:	2201      	movs	r2, #1
 80024f6:	4957      	ldr	r1, [pc, #348]	; (8002654 <main+0x1cc>)
 80024f8:	4855      	ldr	r0, [pc, #340]	; (8002650 <main+0x1c8>)
 80024fa:	f009 f827 	bl	800b54c <HAL_UART_Receive_IT>
			  robotInitialization();
 80024fe:	f7ff ff75 	bl	80023ec <robotInitialization>
			  HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8002502:	2364      	movs	r3, #100	; 0x64
 8002504:	2227      	movs	r2, #39	; 0x27
 8002506:	4954      	ldr	r1, [pc, #336]	; (8002658 <main+0x1d0>)
 8002508:	4851      	ldr	r0, [pc, #324]	; (8002650 <main+0x1c8>)
 800250a:	f008 ff89 	bl	800b420 <HAL_UART_Transmit>

			  state = READY;
 800250e:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <main+0x1c0>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]

			break;
 8002514:	e27e      	b.n	8002a14 <main+0x58c>

		case HOME:

			receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8002516:	4b51      	ldr	r3, [pc, #324]	; (800265c <main+0x1d4>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]

			//Ponemos el enable en bajo para habilitar el driver

			HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	2110      	movs	r1, #16
 8002520:	484f      	ldr	r0, [pc, #316]	; (8002660 <main+0x1d8>)
 8002522:	f004 fbef 	bl	8006d04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	2120      	movs	r1, #32
 800252a:	484d      	ldr	r0, [pc, #308]	; (8002660 <main+0x1d8>)
 800252c:	f004 fbea 	bl	8006d04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	484a      	ldr	r0, [pc, #296]	; (8002660 <main+0x1d8>)
 8002536:	f004 fbe5 	bl	8006d04 <HAL_GPIO_WritePin>

			HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 800253a:	2032      	movs	r0, #50	; 0x32
 800253c:	f003 fb44 	bl	8005bc8 <HAL_Delay>

			homing();
 8002540:	f7fe fb9a 	bl	8000c78 <homing>

	        if(homFin){
 8002544:	4b47      	ldr	r3, [pc, #284]	; (8002664 <main+0x1dc>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8260 	beq.w	8002a0e <main+0x586>

	        	homFin = false;
 800254e:	4b45      	ldr	r3, [pc, #276]	; (8002664 <main+0x1dc>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]

	        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8002554:	2006      	movs	r0, #6
 8002556:	f003 fc80 	bl	8005e5a <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 800255a:	2007      	movs	r0, #7
 800255c:	f003 fc7d 	bl	8005e5a <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 8002560:	2008      	movs	r0, #8
 8002562:	f003 fc7a 	bl	8005e5a <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 8002566:	2009      	movs	r0, #9
 8002568:	f003 fc77 	bl	8005e5a <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 800256c:	200a      	movs	r0, #10
 800256e:	f003 fc74 	bl	8005e5a <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 8002572:	2017      	movs	r0, #23
 8002574:	f003 fc71 	bl	8005e5a <HAL_NVIC_EnableIRQ>

				Pini.x=0;
 8002578:	493b      	ldr	r1, [pc, #236]	; (8002668 <main+0x1e0>)
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9c1 2300 	strd	r2, r3, [r1]
				Pini.y=0;
 8002586:	4938      	ldr	r1, [pc, #224]	; (8002668 <main+0x1e0>)
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9c1 2302 	strd	r2, r3, [r1, #8]
				Pini.z =-0.5208; //antes era -0.33
 8002594:	4934      	ldr	r1, [pc, #208]	; (8002668 <main+0x1e0>)
 8002596:	a32a      	add	r3, pc, #168	; (adr r3, 8002640 <main+0x1b8>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	e9c1 2304 	strd	r2, r3, [r1, #16]

				motor1.theta = 0.0;
 80025a0:	4932      	ldr	r1, [pc, #200]	; (800266c <main+0x1e4>)
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
				motor2.theta = 0.0;
 80025ae:	4930      	ldr	r1, [pc, #192]	; (8002670 <main+0x1e8>)
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
				motor3.theta = 0.0;
 80025bc:	492d      	ldr	r1, [pc, #180]	; (8002674 <main+0x1ec>)
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9c1 2302 	strd	r2, r3, [r1, #8]

				motor1.currentAngle = 0.0;
 80025ca:	4928      	ldr	r1, [pc, #160]	; (800266c <main+0x1e4>)
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				motor2.currentAngle = 0.0;
 80025d8:	4925      	ldr	r1, [pc, #148]	; (8002670 <main+0x1e8>)
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				motor3.currentAngle = 0.0;
 80025e6:	4923      	ldr	r1, [pc, #140]	; (8002674 <main+0x1ec>)
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

				state = READY;
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <main+0x1c0>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]

	        }


			break;
 80025fa:	e208      	b.n	8002a0e <main+0x586>

		case WORKING:

			receptionFlag = false;
 80025fc:	4b17      	ldr	r3, [pc, #92]	; (800265c <main+0x1d4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]

			while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8002602:	e0b1      	b.n	8002768 <main+0x2e0>

				if (motor1.stepReached) {
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <main+0x1e4>)
 8002606:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <main+0x198>
					Stop_PWM_MOTOR_1;
 800260e:	2100      	movs	r1, #0
 8002610:	4819      	ldr	r0, [pc, #100]	; (8002678 <main+0x1f0>)
 8002612:	f007 fa0d 	bl	8009a30 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002616:	2100      	movs	r1, #0
 8002618:	4818      	ldr	r0, [pc, #96]	; (800267c <main+0x1f4>)
 800261a:	f007 fb00 	bl	8009c1e <HAL_TIM_IC_Stop>
 800261e:	e040      	b.n	80026a2 <main+0x21a>
				}else if (motor2.stepReached) {
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <main+0x1e8>)
 8002622:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02e      	beq.n	8002688 <main+0x200>
					Stop_PWM_MOTOR_2;
 800262a:	2100      	movs	r1, #0
 800262c:	4814      	ldr	r0, [pc, #80]	; (8002680 <main+0x1f8>)
 800262e:	f007 f9ff 	bl	8009a30 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002632:	2100      	movs	r1, #0
 8002634:	4813      	ldr	r0, [pc, #76]	; (8002684 <main+0x1fc>)
 8002636:	f007 faf2 	bl	8009c1e <HAL_TIM_IC_Stop>
 800263a:	e032      	b.n	80026a2 <main+0x21a>
 800263c:	f3af 8000 	nop.w
 8002640:	c2f837b5 	.word	0xc2f837b5
 8002644:	bfe0aa64 	.word	0xbfe0aa64
 8002648:	24000428 	.word	0x24000428
 800264c:	24000020 	.word	0x24000020
 8002650:	240008f4 	.word	0x240008f4
 8002654:	240004e2 	.word	0x240004e2
 8002658:	2400003c 	.word	0x2400003c
 800265c:	240004e3 	.word	0x240004e3
 8002660:	58020c00 	.word	0x58020c00
 8002664:	24000429 	.word	0x24000429
 8002668:	24000478 	.word	0x24000478
 800266c:	24000350 	.word	0x24000350
 8002670:	24000390 	.word	0x24000390
 8002674:	240003d0 	.word	0x240003d0
 8002678:	24000628 	.word	0x24000628
 800267c:	240004f8 	.word	0x240004f8
 8002680:	24000674 	.word	0x24000674
 8002684:	24000544 	.word	0x24000544
				}else if (motor3.stepReached){
 8002688:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <main+0x3b8>)
 800268a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <main+0x21a>
					Stop_PWM_MOTOR_3;
 8002692:	2100      	movs	r1, #0
 8002694:	486b      	ldr	r0, [pc, #428]	; (8002844 <main+0x3bc>)
 8002696:	f007 f9cb 	bl	8009a30 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 800269a:	2100      	movs	r1, #0
 800269c:	486a      	ldr	r0, [pc, #424]	; (8002848 <main+0x3c0>)
 800269e:	f007 fabe 	bl	8009c1e <HAL_TIM_IC_Stop>
				}

				motor1.omega = get_Straj(time,motor1.currentAngle,motor1.theta,arrayParams1);
 80026a2:	4b6a      	ldr	r3, [pc, #424]	; (800284c <main+0x3c4>)
 80026a4:	ed93 7b00 	vldr	d7, [r3]
 80026a8:	4b69      	ldr	r3, [pc, #420]	; (8002850 <main+0x3c8>)
 80026aa:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80026ae:	4b68      	ldr	r3, [pc, #416]	; (8002850 <main+0x3c8>)
 80026b0:	ed93 5b02 	vldr	d5, [r3, #8]
 80026b4:	4b67      	ldr	r3, [pc, #412]	; (8002854 <main+0x3cc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	eeb0 2b45 	vmov.f64	d2, d5
 80026be:	eeb0 1b46 	vmov.f64	d1, d6
 80026c2:	eeb0 0b47 	vmov.f64	d0, d7
 80026c6:	f001 faf9 	bl	8003cbc <get_Straj>
 80026ca:	eeb0 7b40 	vmov.f64	d7, d0
 80026ce:	4b60      	ldr	r3, [pc, #384]	; (8002850 <main+0x3c8>)
 80026d0:	ed83 7b04 	vstr	d7, [r3, #16]

				motor2.omega = get_Straj(time,motor2.currentAngle,motor2.theta,arrayParams2);
 80026d4:	4b5d      	ldr	r3, [pc, #372]	; (800284c <main+0x3c4>)
 80026d6:	ed93 7b00 	vldr	d7, [r3]
 80026da:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <main+0x3d0>)
 80026dc:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80026e0:	4b5d      	ldr	r3, [pc, #372]	; (8002858 <main+0x3d0>)
 80026e2:	ed93 5b02 	vldr	d5, [r3, #8]
 80026e6:	4b5d      	ldr	r3, [pc, #372]	; (800285c <main+0x3d4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	eeb0 2b45 	vmov.f64	d2, d5
 80026f0:	eeb0 1b46 	vmov.f64	d1, d6
 80026f4:	eeb0 0b47 	vmov.f64	d0, d7
 80026f8:	f001 fae0 	bl	8003cbc <get_Straj>
 80026fc:	eeb0 7b40 	vmov.f64	d7, d0
 8002700:	4b55      	ldr	r3, [pc, #340]	; (8002858 <main+0x3d0>)
 8002702:	ed83 7b04 	vstr	d7, [r3, #16]

				motor3.omega = get_Straj(time,motor3.currentAngle,motor3.theta,arrayParams3);
 8002706:	4b51      	ldr	r3, [pc, #324]	; (800284c <main+0x3c4>)
 8002708:	ed93 7b00 	vldr	d7, [r3]
 800270c:	4b4c      	ldr	r3, [pc, #304]	; (8002840 <main+0x3b8>)
 800270e:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8002712:	4b4b      	ldr	r3, [pc, #300]	; (8002840 <main+0x3b8>)
 8002714:	ed93 5b02 	vldr	d5, [r3, #8]
 8002718:	4b51      	ldr	r3, [pc, #324]	; (8002860 <main+0x3d8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	eeb0 2b45 	vmov.f64	d2, d5
 8002722:	eeb0 1b46 	vmov.f64	d1, d6
 8002726:	eeb0 0b47 	vmov.f64	d0, d7
 800272a:	f001 fac7 	bl	8003cbc <get_Straj>
 800272e:	eeb0 7b40 	vmov.f64	d7, d0
 8002732:	4b43      	ldr	r3, [pc, #268]	; (8002840 <main+0x3b8>)
 8002734:	ed83 7b04 	vstr	d7, [r3, #16]
				dRecta3D[2] = 0 + qd * vDirector[2];

				inverseJacobian(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
				*/

				setProfilTimer();
 8002738:	f002 fe6a 	bl	8005410 <setProfilTimer>


				if(startMotors){
 800273c:	4b49      	ldr	r3, [pc, #292]	; (8002864 <main+0x3dc>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00e      	beq.n	8002762 <main+0x2da>
					startMotors = false;
 8002744:	4b47      	ldr	r3, [pc, #284]	; (8002864 <main+0x3dc>)
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
					Start_PWM_MOTOR_1;	// Activar generacion de pwm
 800274a:	2100      	movs	r1, #0
 800274c:	4846      	ldr	r0, [pc, #280]	; (8002868 <main+0x3e0>)
 800274e:	f007 f861 	bl	8009814 <HAL_TIM_PWM_Start>
					Start_PWM_MOTOR_2;	// Activar generacion de pwm
 8002752:	2100      	movs	r1, #0
 8002754:	4845      	ldr	r0, [pc, #276]	; (800286c <main+0x3e4>)
 8002756:	f007 f85d 	bl	8009814 <HAL_TIM_PWM_Start>
					Start_PWM_MOTOR_3;	// Activar generacion de pwm
 800275a:	2100      	movs	r1, #0
 800275c:	4839      	ldr	r0, [pc, #228]	; (8002844 <main+0x3bc>)
 800275e:	f007 f859 	bl	8009814 <HAL_TIM_PWM_Start>
				}

				stopMotors = true;
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <main+0x3e8>)
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
			while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8002768:	4b39      	ldr	r3, [pc, #228]	; (8002850 <main+0x3c8>)
 800276a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800276e:	2b00      	cmp	r3, #0
 8002770:	f43f af48 	beq.w	8002604 <main+0x17c>
 8002774:	4b38      	ldr	r3, [pc, #224]	; (8002858 <main+0x3d0>)
 8002776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800277a:	2b00      	cmp	r3, #0
 800277c:	f43f af42 	beq.w	8002604 <main+0x17c>
 8002780:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <main+0x3b8>)
 8002782:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002786:	2b00      	cmp	r3, #0
 8002788:	f43f af3c 	beq.w	8002604 <main+0x17c>

			}// End while


			if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 800278c:	4b38      	ldr	r3, [pc, #224]	; (8002870 <main+0x3e8>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d029      	beq.n	80027e8 <main+0x360>

				startMotors = false;
 8002794:	4b33      	ldr	r3, [pc, #204]	; (8002864 <main+0x3dc>)
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]

				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800279a:	2100      	movs	r1, #0
 800279c:	4835      	ldr	r0, [pc, #212]	; (8002874 <main+0x3ec>)
 800279e:	f007 fa3e 	bl	8009c1e <HAL_TIM_IC_Stop>
				HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80027a2:	2100      	movs	r1, #0
 80027a4:	4834      	ldr	r0, [pc, #208]	; (8002878 <main+0x3f0>)
 80027a6:	f007 fa3a 	bl	8009c1e <HAL_TIM_IC_Stop>
				HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80027aa:	2100      	movs	r1, #0
 80027ac:	4826      	ldr	r0, [pc, #152]	; (8002848 <main+0x3c0>)
 80027ae:	f007 fa36 	bl	8009c1e <HAL_TIM_IC_Stop>

				if (motor1.stepReached) Stop_PWM_MOTOR_1;
 80027b2:	4b27      	ldr	r3, [pc, #156]	; (8002850 <main+0x3c8>)
 80027b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <main+0x33c>
 80027bc:	2100      	movs	r1, #0
 80027be:	482a      	ldr	r0, [pc, #168]	; (8002868 <main+0x3e0>)
 80027c0:	f007 f936 	bl	8009a30 <HAL_TIM_PWM_Stop>
				if (motor2.stepReached) Stop_PWM_MOTOR_2;
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <main+0x3d0>)
 80027c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <main+0x34e>
 80027ce:	2100      	movs	r1, #0
 80027d0:	4826      	ldr	r0, [pc, #152]	; (800286c <main+0x3e4>)
 80027d2:	f007 f92d 	bl	8009a30 <HAL_TIM_PWM_Stop>
				if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 80027d6:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <main+0x3b8>)
 80027d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <main+0x360>
 80027e0:	2100      	movs	r1, #0
 80027e2:	4818      	ldr	r0, [pc, #96]	; (8002844 <main+0x3bc>)
 80027e4:	f007 f924 	bl	8009a30 <HAL_TIM_PWM_Stop>
			}

			//Update coordinantes
			Pini.x = Pfin.x;
 80027e8:	4b24      	ldr	r3, [pc, #144]	; (800287c <main+0x3f4>)
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	4924      	ldr	r1, [pc, #144]	; (8002880 <main+0x3f8>)
 80027f0:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y = Pfin.y;
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <main+0x3f4>)
 80027f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027fa:	4921      	ldr	r1, [pc, #132]	; (8002880 <main+0x3f8>)
 80027fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z = Pfin.z;
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <main+0x3f4>)
 8002802:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002806:	491e      	ldr	r1, [pc, #120]	; (8002880 <main+0x3f8>)
 8002808:	e9c1 2304 	strd	r2, r3, [r1, #16]

			//TODO: Ver si esta bien liberar la memoria en este punto
			free(arrayParams1);
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <main+0x3cc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f00b f945 	bl	800daa0 <free>
			free(arrayParams2);
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <main+0x3d4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f00b f940 	bl	800daa0 <free>
			free(arrayParams3);
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <main+0x3d8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f00b f93b 	bl	800daa0 <free>

			HAL_TIM_Base_Stop_IT(&htim15);
 800282a:	4816      	ldr	r0, [pc, #88]	; (8002884 <main+0x3fc>)
 800282c:	f006 ff62 	bl	80096f4 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 8002830:	4815      	ldr	r0, [pc, #84]	; (8002888 <main+0x400>)
 8002832:	f006 febf 	bl	80095b4 <HAL_TIM_Base_Stop>


			state = READY;
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <main+0x404>)
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]

			break;
 800283c:	e0ea      	b.n	8002a14 <main+0x58c>
 800283e:	bf00      	nop
 8002840:	240003d0 	.word	0x240003d0
 8002844:	240006c0 	.word	0x240006c0
 8002848:	24000590 	.word	0x24000590
 800284c:	240004b8 	.word	0x240004b8
 8002850:	24000350 	.word	0x24000350
 8002854:	240004a8 	.word	0x240004a8
 8002858:	24000390 	.word	0x24000390
 800285c:	240004ac 	.word	0x240004ac
 8002860:	240004b0 	.word	0x240004b0
 8002864:	2400042a 	.word	0x2400042a
 8002868:	24000628 	.word	0x24000628
 800286c:	24000674 	.word	0x24000674
 8002870:	2400042b 	.word	0x2400042b
 8002874:	240004f8 	.word	0x240004f8
 8002878:	24000544 	.word	0x24000544
 800287c:	24000490 	.word	0x24000490
 8002880:	24000478 	.word	0x24000478
 8002884:	2400070c 	.word	0x2400070c
 8002888:	240005dc 	.word	0x240005dc
 800288c:	24000428 	.word	0x24000428

		case READY:

			if (receptionFlag){
 8002890:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <main+0x590>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80bc 	beq.w	8002a12 <main+0x58a>

				receptionFlag = false;
 800289a:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <main+0x590>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]

				startMotors = true;
 80028a0:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <main+0x594>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]

				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80028a6:	2100      	movs	r1, #0
 80028a8:	485d      	ldr	r0, [pc, #372]	; (8002a20 <main+0x598>)
 80028aa:	f007 fa29 	bl	8009d00 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80028ae:	2100      	movs	r1, #0
 80028b0:	485c      	ldr	r0, [pc, #368]	; (8002a24 <main+0x59c>)
 80028b2:	f007 fa25 	bl	8009d00 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80028b6:	2100      	movs	r1, #0
 80028b8:	485b      	ldr	r0, [pc, #364]	; (8002a28 <main+0x5a0>)
 80028ba:	f007 fa21 	bl	8009d00 <HAL_TIM_IC_Start_IT>
				vDirector[0] = (Pfin.x - Pini.x) / euclideanDistance;	//Vector director en X
				vDirector[1] = (Pfin.y - Pini.y) / euclideanDistance;	//Vector director en Y
				vDirector[2] = (Pfin.z - Pini.z) / euclideanDistance;	//Vector director en Z
				*/

				inverseKinematic(Pfin);
 80028be:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <main+0x5a4>)
 80028c0:	ed93 5b00 	vldr	d5, [r3]
 80028c4:	ed93 6b02 	vldr	d6, [r3, #8]
 80028c8:	ed93 7b04 	vldr	d7, [r3, #16]
 80028cc:	eeb0 0b45 	vmov.f64	d0, d5
 80028d0:	eeb0 1b46 	vmov.f64	d1, d6
 80028d4:	eeb0 2b47 	vmov.f64	d2, d7
 80028d8:	f7fe fdfe 	bl	80014d8 <inverseKinematic>

				configMotor(&motor1,1);
 80028dc:	2101      	movs	r1, #1
 80028de:	4854      	ldr	r0, [pc, #336]	; (8002a30 <main+0x5a8>)
 80028e0:	f000 fa6a 	bl	8002db8 <configMotor>
				configMotor(&motor2,2);
 80028e4:	2102      	movs	r1, #2
 80028e6:	4853      	ldr	r0, [pc, #332]	; (8002a34 <main+0x5ac>)
 80028e8:	f000 fa66 	bl	8002db8 <configMotor>
				configMotor(&motor3,3);
 80028ec:	2103      	movs	r1, #3
 80028ee:	4852      	ldr	r0, [pc, #328]	; (8002a38 <main+0x5b0>)
 80028f0:	f000 fa62 	bl	8002db8 <configMotor>

				arrayParams1 = update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax);
 80028f4:	4b4e      	ldr	r3, [pc, #312]	; (8002a30 <main+0x5a8>)
 80028f6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80028fa:	4b4d      	ldr	r3, [pc, #308]	; (8002a30 <main+0x5a8>)
 80028fc:	ed93 1b02 	vldr	d1, [r3, #8]
 8002900:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <main+0x5b4>)
 8002902:	ed93 2b00 	vldr	d2, [r3]
 8002906:	4b4e      	ldr	r3, [pc, #312]	; (8002a40 <main+0x5b8>)
 8002908:	ed93 3b00 	vldr	d3, [r3]
 800290c:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <main+0x5bc>)
 800290e:	ed93 4b00 	vldr	d4, [r3]
 8002912:	4b4d      	ldr	r3, [pc, #308]	; (8002a48 <main+0x5c0>)
 8002914:	ed93 5b00 	vldr	d5, [r3]
 8002918:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <main+0x5c4>)
 800291a:	ed93 6b00 	vldr	d6, [r3]
 800291e:	eeb0 0b47 	vmov.f64	d0, d7
 8002922:	f002 f885 	bl	8004a30 <update_ScurveTraj>
 8002926:	4603      	mov	r3, r0
 8002928:	4a49      	ldr	r2, [pc, #292]	; (8002a50 <main+0x5c8>)
 800292a:	6013      	str	r3, [r2, #0]
				arrayParams2 = update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax);
 800292c:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <main+0x5ac>)
 800292e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002932:	4b40      	ldr	r3, [pc, #256]	; (8002a34 <main+0x5ac>)
 8002934:	ed93 1b02 	vldr	d1, [r3, #8]
 8002938:	4b40      	ldr	r3, [pc, #256]	; (8002a3c <main+0x5b4>)
 800293a:	ed93 2b00 	vldr	d2, [r3]
 800293e:	4b40      	ldr	r3, [pc, #256]	; (8002a40 <main+0x5b8>)
 8002940:	ed93 3b00 	vldr	d3, [r3]
 8002944:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <main+0x5bc>)
 8002946:	ed93 4b00 	vldr	d4, [r3]
 800294a:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <main+0x5c0>)
 800294c:	ed93 5b00 	vldr	d5, [r3]
 8002950:	4b3e      	ldr	r3, [pc, #248]	; (8002a4c <main+0x5c4>)
 8002952:	ed93 6b00 	vldr	d6, [r3]
 8002956:	eeb0 0b47 	vmov.f64	d0, d7
 800295a:	f002 f869 	bl	8004a30 <update_ScurveTraj>
 800295e:	4603      	mov	r3, r0
 8002960:	4a3c      	ldr	r2, [pc, #240]	; (8002a54 <main+0x5cc>)
 8002962:	6013      	str	r3, [r2, #0]
				arrayParams3 = update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax);
 8002964:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <main+0x5b0>)
 8002966:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800296a:	4b33      	ldr	r3, [pc, #204]	; (8002a38 <main+0x5b0>)
 800296c:	ed93 1b02 	vldr	d1, [r3, #8]
 8002970:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <main+0x5b4>)
 8002972:	ed93 2b00 	vldr	d2, [r3]
 8002976:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <main+0x5b8>)
 8002978:	ed93 3b00 	vldr	d3, [r3]
 800297c:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <main+0x5bc>)
 800297e:	ed93 4b00 	vldr	d4, [r3]
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <main+0x5c0>)
 8002984:	ed93 5b00 	vldr	d5, [r3]
 8002988:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <main+0x5c4>)
 800298a:	ed93 6b00 	vldr	d6, [r3]
 800298e:	eeb0 0b47 	vmov.f64	d0, d7
 8002992:	f002 f84d 	bl	8004a30 <update_ScurveTraj>
 8002996:	4603      	mov	r3, r0
 8002998:	4a2f      	ldr	r2, [pc, #188]	; (8002a58 <main+0x5d0>)
 800299a:	6013      	str	r3, [r2, #0]

				timeFlag = false;
 800299c:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <main+0x5d4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]

				motor1.pMotor = 0;
 80029a2:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <main+0x5a8>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
				motor2.pMotor = 0;
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <main+0x5ac>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
				motor3.pMotor = 0;
 80029ae:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <main+0x5b0>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

				motor1.stepReached = false;
 80029b4:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <main+0x5a8>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				motor2.stepReached = false;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <main+0x5ac>)
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				motor3.stepReached = false;
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <main+0x5b0>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				motor1.rpm = 0;
 80029cc:	4918      	ldr	r1, [pc, #96]	; (8002a30 <main+0x5a8>)
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
				motor2.rpm = 0;
 80029da:	4916      	ldr	r1, [pc, #88]	; (8002a34 <main+0x5ac>)
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
				motor3.rpm = 0;
 80029e8:	4913      	ldr	r1, [pc, #76]	; (8002a38 <main+0x5b0>)
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9c1 2306 	strd	r2, r3, [r1, #24]

				HAL_TIM_Base_Start(&htim5);
 80029f6:	481a      	ldr	r0, [pc, #104]	; (8002a60 <main+0x5d8>)
 80029f8:	f006 fd6c 	bl	80094d4 <HAL_TIM_Base_Start>
				HAL_TIM_Base_Start_IT(&htim15);
 80029fc:	4819      	ldr	r0, [pc, #100]	; (8002a64 <main+0x5dc>)
 80029fe:	f006 fe01 	bl	8009604 <HAL_TIM_Base_Start_IT>


				state = WORKING;
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <main+0x5e0>)
 8002a04:	2202      	movs	r2, #2
 8002a06:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a08:	e003      	b.n	8002a12 <main+0x58a>
		case FAULT:


			break;

		default:break;
 8002a0a:	bf00      	nop
 8002a0c:	e55a      	b.n	80024c4 <main+0x3c>
			break;
 8002a0e:	bf00      	nop
 8002a10:	e558      	b.n	80024c4 <main+0x3c>
			break;
 8002a12:	bf00      	nop
		switch (state){
 8002a14:	e556      	b.n	80024c4 <main+0x3c>
 8002a16:	bf00      	nop
 8002a18:	240004e3 	.word	0x240004e3
 8002a1c:	2400042a 	.word	0x2400042a
 8002a20:	240004f8 	.word	0x240004f8
 8002a24:	24000544 	.word	0x24000544
 8002a28:	24000590 	.word	0x24000590
 8002a2c:	24000490 	.word	0x24000490
 8002a30:	24000350 	.word	0x24000350
 8002a34:	24000390 	.word	0x24000390
 8002a38:	240003d0 	.word	0x240003d0
 8002a3c:	24000460 	.word	0x24000460
 8002a40:	24000468 	.word	0x24000468
 8002a44:	24000010 	.word	0x24000010
 8002a48:	24000018 	.word	0x24000018
 8002a4c:	24000008 	.word	0x24000008
 8002a50:	240004a8 	.word	0x240004a8
 8002a54:	240004ac 	.word	0x240004ac
 8002a58:	240004b0 	.word	0x240004b0
 8002a5c:	240004f1 	.word	0x240004f1
 8002a60:	240005dc 	.word	0x240005dc
 8002a64:	2400070c 	.word	0x2400070c
 8002a68:	24000428 	.word	0x24000428

08002a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b09c      	sub	sp, #112	; 0x70
 8002a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a76:	224c      	movs	r2, #76	; 0x4c
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f00b f818 	bl	800dab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	2220      	movs	r2, #32
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f00b f812 	bl	800dab0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	f004 f96d 	bl	8006d6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a92:	2300      	movs	r3, #0
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <SystemClock_Config+0xf4>)
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	4a31      	ldr	r2, [pc, #196]	; (8002b60 <SystemClock_Config+0xf4>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002aa2:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <SystemClock_Config+0xf4>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <SystemClock_Config+0xf8>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <SystemClock_Config+0xf8>)
 8002ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <SystemClock_Config+0xf8>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002ac8:	bf00      	nop
 8002aca:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <SystemClock_Config+0xf8>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad6:	d1f8      	bne.n	8002aca <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002adc:	2301      	movs	r3, #1
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ae0:	2340      	movs	r3, #64	; 0x40
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002aec:	2304      	movs	r3, #4
 8002aee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002af0:	2310      	movs	r3, #16
 8002af2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002af4:	2302      	movs	r3, #2
 8002af6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002af8:	2302      	movs	r3, #2
 8002afa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002afc:	2302      	movs	r3, #2
 8002afe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002b00:	230c      	movs	r3, #12
 8002b02:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 f965 	bl	8006de0 <HAL_RCC_OscConfig>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002b1c:	f000 f944 	bl	8002da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b20:	233f      	movs	r3, #63	; 0x3f
 8002b22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b24:	2303      	movs	r3, #3
 8002b26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002b34:	2340      	movs	r3, #64	; 0x40
 8002b36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 fd78 	bl	800763c <HAL_RCC_ClockConfig>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002b52:	f000 f929 	bl	8002da8 <Error_Handler>
  }
}
 8002b56:	bf00      	nop
 8002b58:	3770      	adds	r7, #112	; 0x70
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	58000400 	.word	0x58000400
 8002b64:	58024800 	.word	0x58024800

08002b68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
		 HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);	//Apago el PWM del motor 3
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/


}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <HAL_UART_RxCpltCallback+0xd0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d14d      	bne.n	8002c2e <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8002b92:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_UART_RxCpltCallback+0xd4>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2b3a      	cmp	r3, #58	; 0x3a
 8002b9c:	d006      	beq.n	8002bac <HAL_UART_RxCpltCallback+0x2c>
 8002b9e:	2b3a      	cmp	r3, #58	; 0x3a
 8002ba0:	dc36      	bgt.n	8002c10 <HAL_UART_RxCpltCallback+0x90>
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d009      	beq.n	8002bba <HAL_UART_RxCpltCallback+0x3a>
 8002ba6:	2b0d      	cmp	r3, #13
 8002ba8:	d01e      	beq.n	8002be8 <HAL_UART_RxCpltCallback+0x68>
 8002baa:	e031      	b.n	8002c10 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8002bac:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <HAL_UART_RxCpltCallback+0xdc>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
			break;
 8002bb8:	e040      	b.n	8002c3c <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 8002bba:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d037      	beq.n	8002c32 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8002bc2:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002bcc:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002bce:	e030      	b.n	8002c32 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8002bd0:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <HAL_UART_RxCpltCallback+0xe0>)
 8002bd8:	2100      	movs	r1, #0
 8002bda:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002be6:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b1e      	cmp	r3, #30
 8002bee:	d1ef      	bne.n	8002bd0 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <HAL_UART_RxCpltCallback+0xdc>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d11e      	bne.n	8002c36 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <HAL_UART_RxCpltCallback+0xe0>)
 8002c00:	2100      	movs	r1, #0
 8002c02:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8002c04:	f7fe fb72 	bl	80012ec <interpretaComando>
				cm0 = 0;
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <HAL_UART_RxCpltCallback+0xdc>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]

			}
			break;
 8002c0e:	e012      	b.n	8002c36 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b1d      	cmp	r3, #29
 8002c16:	d810      	bhi.n	8002c3a <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	b2d1      	uxtb	r1, r2
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <HAL_UART_RxCpltCallback+0xd8>)
 8002c22:	7011      	strb	r1, [r2, #0]
 8002c24:	4619      	mov	r1, r3
 8002c26:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <HAL_UART_RxCpltCallback+0xe0>)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	5453      	strb	r3, [r2, r1]
			}
			break;
 8002c2c:	e005      	b.n	8002c3a <HAL_UART_RxCpltCallback+0xba>
		}
	}
 8002c2e:	bf00      	nop
 8002c30:	e004      	b.n	8002c3c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002c32:	bf00      	nop
 8002c34:	e002      	b.n	8002c3c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002c3a:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4905      	ldr	r1, [pc, #20]	; (8002c54 <HAL_UART_RxCpltCallback+0xd4>)
 8002c40:	4808      	ldr	r0, [pc, #32]	; (8002c64 <HAL_UART_RxCpltCallback+0xe4>)
 8002c42:	f008 fc83 	bl	800b54c <HAL_UART_Receive_IT>
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40004800 	.word	0x40004800
 8002c54:	240004e2 	.word	0x240004e2
 8002c58:	240004c0 	.word	0x240004c0
 8002c5c:	240004f0 	.word	0x240004f0
 8002c60:	240004c4 	.word	0x240004c4
 8002c64:	240008f4 	.word	0x240008f4

08002c68 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	__NOP();
 8002c70:	bf00      	nop
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c90:	d110      	bne.n	8002cb4 <HAL_TIM_IC_CaptureCallback+0x34>
		if (motor1.pMotor == motor1.numStep) {
 8002c92:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d104      	bne.n	8002ca8 <HAL_TIM_IC_CaptureCallback+0x28>
			motor1.stepReached = true;
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			}
		}
		else{}
	}
	*/
}
 8002ca6:	e030      	b.n	8002d0a <HAL_TIM_IC_CaptureCallback+0x8a>
			motor1.pMotor++;
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002cb0:	6013      	str	r3, [r2, #0]
}
 8002cb2:	e02a      	b.n	8002d0a <HAL_TIM_IC_CaptureCallback+0x8a>
	}else if (htim->Instance == TIM3){
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d110      	bne.n	8002ce0 <HAL_TIM_IC_CaptureCallback+0x60>
		if (motor2.pMotor == motor2.numStep) {
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d104      	bne.n	8002cd4 <HAL_TIM_IC_CaptureCallback+0x54>
			motor2.stepReached = true;
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002cd2:	e01a      	b.n	8002d0a <HAL_TIM_IC_CaptureCallback+0x8a>
			motor2.pMotor++;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002cdc:	6013      	str	r3, [r2, #0]
}
 8002cde:	e014      	b.n	8002d0a <HAL_TIM_IC_CaptureCallback+0x8a>
	}else if (htim->Instance == TIM4){
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0f      	ldr	r2, [pc, #60]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10f      	bne.n	8002d0a <HAL_TIM_IC_CaptureCallback+0x8a>
		if (motor3.pMotor == motor3.numStep) {
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d104      	bne.n	8002d00 <HAL_TIM_IC_CaptureCallback+0x80>
			motor3.stepReached = true;
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002cfe:	e004      	b.n	8002d0a <HAL_TIM_IC_CaptureCallback+0x8a>
			motor3.pMotor++;
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	4a08      	ldr	r2, [pc, #32]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002d08:	6013      	str	r3, [r2, #0]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	24000350 	.word	0x24000350
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	24000390 	.word	0x24000390
 8002d24:	40000800 	.word	0x40000800
 8002d28:	240003d0 	.word	0x240003d0
 8002d2c:	00000000 	.word	0x00000000

08002d30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer that update velocity'curve
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d11f      	bne.n	8002d80 <HAL_TIM_PeriodElapsedCallback+0x50>

		if (!timeFlag) {
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <HAL_TIM_PeriodElapsedCallback+0x24>
			timeFlag = true;
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
			TIM5->CNT = 0;	//We start counting from here
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / FCL));
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	ee07 3a90 	vmov	s15, r3
 8002d5c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	3301      	adds	r3, #1
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002d6e:	ed9f 4b08 	vldr	d4, [pc, #32]	; 8002d90 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002d72:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002d76:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002d7c:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	f3af 8000 	nop.w
 8002d90:	00000000 	.word	0x00000000
 8002d94:	418e8480 	.word	0x418e8480
 8002d98:	2400070c 	.word	0x2400070c
 8002d9c:	240004f1 	.word	0x240004f1
 8002da0:	40000c00 	.word	0x40000c00
 8002da4:	240004b8 	.word	0x240004b8

08002da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	ed93 6b02 	vldr	d6, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002dd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ddc:	db39      	blt.n	8002e52 <configMotor+0x9a>
		if(ES1i_PRESSED){
 8002dde:	2102      	movs	r1, #2
 8002de0:	4861      	ldr	r0, [pc, #388]	; (8002f68 <configMotor+0x1b0>)
 8002de2:	f003 ff77 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <configMotor+0x42>
			flagErrorEndStop = 1;
 8002dec:	495f      	ldr	r1, [pc, #380]	; (8002f6c <configMotor+0x1b4>)
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	4b5f      	ldr	r3, [pc, #380]	; (8002f70 <configMotor+0x1b8>)
 8002df4:	e9c1 2300 	strd	r2, r3, [r1]
 8002df8:	e064      	b.n	8002ec4 <configMotor+0x10c>
		} else {
			diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	ed93 6b02 	vldr	d6, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002e06:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e0a:	ed87 7b02 	vstr	d7, [r7, #8]
			motor->currentAngle = motor->theta;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d105      	bne.n	8002e2c <configMotor+0x74>
 8002e20:	2201      	movs	r2, #1
 8002e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e26:	4853      	ldr	r0, [pc, #332]	; (8002f74 <configMotor+0x1bc>)
 8002e28:	f003 ff6c 	bl	8006d04 <HAL_GPIO_WritePin>
            if (i==1) negative_Dir_MOTOR_2;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <configMotor+0x86>
 8002e32:	2201      	movs	r2, #1
 8002e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e38:	484e      	ldr	r0, [pc, #312]	; (8002f74 <configMotor+0x1bc>)
 8002e3a:	f003 ff63 	bl	8006d04 <HAL_GPIO_WritePin>
            if (i==2) negative_Dir_MOTOR_3;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d13f      	bne.n	8002ec4 <configMotor+0x10c>
 8002e44:	2201      	movs	r2, #1
 8002e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e4a:	484a      	ldr	r0, [pc, #296]	; (8002f74 <configMotor+0x1bc>)
 8002e4c:	f003 ff5a 	bl	8006d04 <HAL_GPIO_WritePin>
 8002e50:	e038      	b.n	8002ec4 <configMotor+0x10c>
		}
	} else {
		if(ES1s_PRESSED){
 8002e52:	2101      	movs	r1, #1
 8002e54:	4844      	ldr	r0, [pc, #272]	; (8002f68 <configMotor+0x1b0>)
 8002e56:	f003 ff3d 	bl	8006cd4 <HAL_GPIO_ReadPin>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <configMotor+0xb6>
			flagErrorEndStop = 1;
 8002e60:	4942      	ldr	r1, [pc, #264]	; (8002f6c <configMotor+0x1b4>)
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	4b42      	ldr	r3, [pc, #264]	; (8002f70 <configMotor+0x1b8>)
 8002e68:	e9c1 2300 	strd	r2, r3, [r1]
 8002e6c:	e02a      	b.n	8002ec4 <configMotor+0x10c>
		} else {
			diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	ed93 7b02 	vldr	d7, [r3, #8]
 8002e7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e7e:	ed87 7b02 	vstr	d7, [r7, #8]
			motor->currentAngle = motor->theta;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

			if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <configMotor+0xe8>
 8002e94:	2200      	movs	r2, #0
 8002e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e9a:	4836      	ldr	r0, [pc, #216]	; (8002f74 <configMotor+0x1bc>)
 8002e9c:	f003 ff32 	bl	8006d04 <HAL_GPIO_WritePin>
            if (i==1) positive_Dir_MOTOR_2;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d105      	bne.n	8002eb2 <configMotor+0xfa>
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eac:	4831      	ldr	r0, [pc, #196]	; (8002f74 <configMotor+0x1bc>)
 8002eae:	f003 ff29 	bl	8006d04 <HAL_GPIO_WritePin>
            if (i==2) positive_Dir_MOTOR_3;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d105      	bne.n	8002ec4 <configMotor+0x10c>
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ebe:	482d      	ldr	r0, [pc, #180]	; (8002f74 <configMotor+0x1bc>)
 8002ec0:	f003 ff20 	bl	8006d04 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	motor->calcStep = (diffAngles * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 8002ec4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ec8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002f58 <configMotor+0x1a0>
 8002ecc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ed0:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8002f60 <configMotor+0x1a8>
 8002ed4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	motor->numStep = (uint32_t) motor->calcStep;	// cuando pasa la unidad lo sumo al numero de pasos para
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002ee4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ee8:	ee17 2a90 	vmov	r2, s15
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	605a      	str	r2, [r3, #4]
	motor->remanente = motor->remanente + (motor->calcStep - motor->numStep);// que el error no se amplifique.
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002f08:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002f0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	if (motor->remanente >= 1) {
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002f1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002f20:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f28:	da00      	bge.n	8002f2c <configMotor+0x174>
		motor->remanente = motor->remanente - 1;
		motor->numStep = motor->numStep + 1;
	}

}
 8002f2a:	e00e      	b.n	8002f4a <configMotor+0x192>
		motor->remanente = motor->remanente - 1;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002f32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002f36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		motor->numStep = motor->numStep + 1;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	605a      	str	r2, [r3, #4]
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	f3af 8000 	nop.w
 8002f58:	00000000 	.word	0x00000000
 8002f5c:	40bf4000 	.word	0x40bf4000
 8002f60:	00000000 	.word	0x00000000
 8002f64:	40768000 	.word	0x40768000
 8002f68:	58021000 	.word	0x58021000
 8002f6c:	240004e8 	.word	0x240004e8
 8002f70:	3ff00000 	.word	0x3ff00000
 8002f74:	58020800 	.word	0x58020800

08002f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <HAL_MspInit+0x44>)
 8002f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f84:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <HAL_MspInit+0x44>)
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_MspInit+0x44>)
 8002f90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002f9c:	2005      	movs	r0, #5
 8002f9e:	f002 ff37 	bl	8005e10 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	2051      	movs	r0, #81	; 0x51
 8002fa8:	f002 ff3d 	bl	8005e26 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002fac:	2051      	movs	r0, #81	; 0x51
 8002fae:	f002 ff54 	bl	8005e5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	58024400 	.word	0x58024400

08002fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd2:	e7fe      	b.n	8002fd2 <HardFault_Handler+0x4>

08002fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <MemManage_Handler+0x4>

08002fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fde:	e7fe      	b.n	8002fde <BusFault_Handler+0x4>

08002fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <UsageFault_Handler+0x4>

08002fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003014:	f002 fdb8 	bl	8005b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}

0800301c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003020:	2001      	movs	r0, #1
 8003022:	f003 fe88 	bl	8006d36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}

0800302a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 800302e:	2002      	movs	r0, #2
 8003030:	f003 fe81 	bl	8006d36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}

08003038 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 800303c:	2004      	movs	r0, #4
 800303e:	f003 fe7a 	bl	8006d36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}

08003046 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 800304a:	2008      	movs	r0, #8
 800304c:	f003 fe73 	bl	8006d36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}

08003054 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003058:	2010      	movs	r0, #16
 800305a:	f003 fe6c 	bl	8006d36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}

08003062 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003066:	2020      	movs	r0, #32
 8003068:	f003 fe65 	bl	8006d36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}

08003070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <TIM2_IRQHandler+0x10>)
 8003076:	f006 ff93 	bl	8009fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	240004f8 	.word	0x240004f8

08003084 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <TIM3_IRQHandler+0x10>)
 800308a:	f006 ff89 	bl	8009fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	24000544 	.word	0x24000544

08003098 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <TIM4_IRQHandler+0x10>)
 800309e:	f006 ff7f 	bl	8009fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	24000590 	.word	0x24000590

080030ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80030b0:	4802      	ldr	r0, [pc, #8]	; (80030bc <USART3_IRQHandler+0x10>)
 80030b2:	f008 faa1 	bl	800b5f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	240008f4 	.word	0x240008f4

080030c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80030c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030c8:	f003 fe35 	bl	8006d36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030cc:	bf00      	nop
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <TIM15_IRQHandler+0x10>)
 80030e6:	f006 ff5b 	bl	8009fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2400070c 	.word	0x2400070c

080030f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
	return 1;
 80030f8:	2301      	movs	r3, #1
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_kill>:

int _kill(int pid, int sig)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800310e:	f00a fc95 	bl	800da3c <__errno>
 8003112:	4603      	mov	r3, r0
 8003114:	2216      	movs	r2, #22
 8003116:	601a      	str	r2, [r3, #0]
	return -1;
 8003118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <_exit>:

void _exit (int status)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ffe7 	bl	8003104 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003136:	e7fe      	b.n	8003136 <_exit+0x12>

08003138 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e00a      	b.n	8003160 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800314a:	f3af 8000 	nop.w
 800314e:	4601      	mov	r1, r0
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	60ba      	str	r2, [r7, #8]
 8003156:	b2ca      	uxtb	r2, r1
 8003158:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3301      	adds	r3, #1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	dbf0      	blt.n	800314a <_read+0x12>
	}

return len;
 8003168:	687b      	ldr	r3, [r7, #4]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e009      	b.n	8003198 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	60ba      	str	r2, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	3301      	adds	r3, #1
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	dbf1      	blt.n	8003184 <_write+0x12>
	}
	return len;
 80031a0:	687b      	ldr	r3, [r7, #4]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <_close>:

int _close(int file)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
	return -1;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031d2:	605a      	str	r2, [r3, #4]
	return 0;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <_isatty>:

int _isatty(int file)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
	return 1;
 80031ea:	2301      	movs	r3, #1
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
	return 0;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <_sbrk+0x50>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <_sbrk+0x16>
		heap_end = &end;
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <_sbrk+0x50>)
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <_sbrk+0x54>)
 8003228:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <_sbrk+0x50>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <_sbrk+0x50>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4413      	add	r3, r2
 8003238:	466a      	mov	r2, sp
 800323a:	4293      	cmp	r3, r2
 800323c:	d907      	bls.n	800324e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800323e:	f00a fbfd 	bl	800da3c <__errno>
 8003242:	4603      	mov	r3, r0
 8003244:	220c      	movs	r2, #12
 8003246:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003248:	f04f 33ff 	mov.w	r3, #4294967295
 800324c:	e006      	b.n	800325c <_sbrk+0x48>
	}

	heap_end += incr;
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <_sbrk+0x50>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	4a03      	ldr	r2, [pc, #12]	; (8003264 <_sbrk+0x50>)
 8003258:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800325a:	68fb      	ldr	r3, [r7, #12]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	240004f4 	.word	0x240004f4
 8003268:	24000998 	.word	0x24000998

0800326c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003270:	4b29      	ldr	r3, [pc, #164]	; (8003318 <SystemInit+0xac>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	4a28      	ldr	r2, [pc, #160]	; (8003318 <SystemInit+0xac>)
 8003278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800327c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003280:	4b26      	ldr	r3, [pc, #152]	; (800331c <SystemInit+0xb0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a25      	ldr	r2, [pc, #148]	; (800331c <SystemInit+0xb0>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800328c:	4b23      	ldr	r3, [pc, #140]	; (800331c <SystemInit+0xb0>)
 800328e:	2200      	movs	r2, #0
 8003290:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <SystemInit+0xb0>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4921      	ldr	r1, [pc, #132]	; (800331c <SystemInit+0xb0>)
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <SystemInit+0xb4>)
 800329a:	4013      	ands	r3, r2
 800329c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800329e:	4b1f      	ldr	r3, [pc, #124]	; (800331c <SystemInit+0xb0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <SystemInit+0xb0>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <SystemInit+0xb0>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80032b0:	4b1a      	ldr	r3, [pc, #104]	; (800331c <SystemInit+0xb0>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <SystemInit+0xb0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <SystemInit+0xb0>)
 80032be:	2200      	movs	r2, #0
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032c2:	4b16      	ldr	r3, [pc, #88]	; (800331c <SystemInit+0xb0>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <SystemInit+0xb0>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <SystemInit+0xb0>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80032d4:	4b11      	ldr	r3, [pc, #68]	; (800331c <SystemInit+0xb0>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <SystemInit+0xb0>)
 80032dc:	2200      	movs	r2, #0
 80032de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032e0:	4b0e      	ldr	r3, [pc, #56]	; (800331c <SystemInit+0xb0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0d      	ldr	r2, [pc, #52]	; (800331c <SystemInit+0xb0>)
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <SystemInit+0xb0>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80032f2:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <SystemInit+0xb8>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <SystemInit+0xbc>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032fe:	d202      	bcs.n	8003306 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <SystemInit+0xc0>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <SystemInit+0xac>)
 8003308:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800330c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00
 800331c:	58024400 	.word	0x58024400
 8003320:	eaf6ed7f 	.word	0xeaf6ed7f
 8003324:	5c001000 	.word	0x5c001000
 8003328:	ffff0000 	.word	0xffff0000
 800332c:	51008108 	.word	0x51008108

08003330 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	; 0x30
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003336:	f107 0320 	add.w	r3, r7, #32
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800335c:	4b2b      	ldr	r3, [pc, #172]	; (800340c <MX_TIM2_Init+0xdc>)
 800335e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003362:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003364:	4b29      	ldr	r3, [pc, #164]	; (800340c <MX_TIM2_Init+0xdc>)
 8003366:	2200      	movs	r2, #0
 8003368:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800336a:	4b28      	ldr	r3, [pc, #160]	; (800340c <MX_TIM2_Init+0xdc>)
 800336c:	2200      	movs	r2, #0
 800336e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8003370:	4b26      	ldr	r3, [pc, #152]	; (800340c <MX_TIM2_Init+0xdc>)
 8003372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003376:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <MX_TIM2_Init+0xdc>)
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337e:	4b23      	ldr	r3, [pc, #140]	; (800340c <MX_TIM2_Init+0xdc>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003384:	4821      	ldr	r0, [pc, #132]	; (800340c <MX_TIM2_Init+0xdc>)
 8003386:	f006 f84d 	bl	8009424 <HAL_TIM_Base_Init>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003390:	f7ff fd0a 	bl	8002da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003398:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800339a:	f107 0320 	add.w	r3, r7, #32
 800339e:	4619      	mov	r1, r3
 80033a0:	481a      	ldr	r0, [pc, #104]	; (800340c <MX_TIM2_Init+0xdc>)
 80033a2:	f007 f8cd 	bl	800a540 <HAL_TIM_ConfigClockSource>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80033ac:	f7ff fcfc 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80033b0:	4816      	ldr	r0, [pc, #88]	; (800340c <MX_TIM2_Init+0xdc>)
 80033b2:	f006 fbd3 	bl	8009b5c <HAL_TIM_IC_Init>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80033bc:	f7ff fcf4 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	4619      	mov	r1, r3
 80033ce:	480f      	ldr	r0, [pc, #60]	; (800340c <MX_TIM2_Init+0xdc>)
 80033d0:	f007 ff2a 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80033da:	f7ff fce5 	bl	8002da8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80033e2:	2301      	movs	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	2200      	movs	r2, #0
 80033f2:	4619      	mov	r1, r3
 80033f4:	4805      	ldr	r0, [pc, #20]	; (800340c <MX_TIM2_Init+0xdc>)
 80033f6:	f006 fef2 	bl	800a1de <HAL_TIM_IC_ConfigChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003400:	f7ff fcd2 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003404:	bf00      	nop
 8003406:	3730      	adds	r7, #48	; 0x30
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	240004f8 	.word	0x240004f8

08003410 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08c      	sub	sp, #48	; 0x30
 8003414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003416:	f107 0320 	add.w	r3, r7, #32
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003430:	1d3b      	adds	r3, r7, #4
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <MX_TIM3_Init+0xdc>)
 800343e:	4a2c      	ldr	r2, [pc, #176]	; (80034f0 <MX_TIM3_Init+0xe0>)
 8003440:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003442:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <MX_TIM3_Init+0xdc>)
 8003444:	2200      	movs	r2, #0
 8003446:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003448:	4b28      	ldr	r3, [pc, #160]	; (80034ec <MX_TIM3_Init+0xdc>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 800344e:	4b27      	ldr	r3, [pc, #156]	; (80034ec <MX_TIM3_Init+0xdc>)
 8003450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003454:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003456:	4b25      	ldr	r3, [pc, #148]	; (80034ec <MX_TIM3_Init+0xdc>)
 8003458:	2200      	movs	r2, #0
 800345a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800345c:	4b23      	ldr	r3, [pc, #140]	; (80034ec <MX_TIM3_Init+0xdc>)
 800345e:	2200      	movs	r2, #0
 8003460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003462:	4822      	ldr	r0, [pc, #136]	; (80034ec <MX_TIM3_Init+0xdc>)
 8003464:	f005 ffde 	bl	8009424 <HAL_TIM_Base_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800346e:	f7ff fc9b 	bl	8002da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003476:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003478:	f107 0320 	add.w	r3, r7, #32
 800347c:	4619      	mov	r1, r3
 800347e:	481b      	ldr	r0, [pc, #108]	; (80034ec <MX_TIM3_Init+0xdc>)
 8003480:	f007 f85e 	bl	800a540 <HAL_TIM_ConfigClockSource>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800348a:	f7ff fc8d 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800348e:	4817      	ldr	r0, [pc, #92]	; (80034ec <MX_TIM3_Init+0xdc>)
 8003490:	f006 fb64 	bl	8009b5c <HAL_TIM_IC_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800349a:	f7ff fc85 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034a6:	f107 0314 	add.w	r3, r7, #20
 80034aa:	4619      	mov	r1, r3
 80034ac:	480f      	ldr	r0, [pc, #60]	; (80034ec <MX_TIM3_Init+0xdc>)
 80034ae:	f007 febb 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80034b8:	f7ff fc76 	bl	8002da8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034bc:	2300      	movs	r3, #0
 80034be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80034c0:	2301      	movs	r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80034cc:	1d3b      	adds	r3, r7, #4
 80034ce:	2200      	movs	r2, #0
 80034d0:	4619      	mov	r1, r3
 80034d2:	4806      	ldr	r0, [pc, #24]	; (80034ec <MX_TIM3_Init+0xdc>)
 80034d4:	f006 fe83 	bl	800a1de <HAL_TIM_IC_ConfigChannel>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80034de:	f7ff fc63 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80034e2:	bf00      	nop
 80034e4:	3730      	adds	r7, #48	; 0x30
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	24000544 	.word	0x24000544
 80034f0:	40000400 	.word	0x40000400

080034f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08c      	sub	sp, #48	; 0x30
 80034f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034fa:	f107 0320 	add.w	r3, r7, #32
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <MX_TIM4_Init+0xdc>)
 8003522:	4a2c      	ldr	r2, [pc, #176]	; (80035d4 <MX_TIM4_Init+0xe0>)
 8003524:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <MX_TIM4_Init+0xdc>)
 8003528:	2200      	movs	r2, #0
 800352a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <MX_TIM4_Init+0xdc>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003532:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <MX_TIM4_Init+0xdc>)
 8003534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003538:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800353a:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <MX_TIM4_Init+0xdc>)
 800353c:	2200      	movs	r2, #0
 800353e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003540:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <MX_TIM4_Init+0xdc>)
 8003542:	2200      	movs	r2, #0
 8003544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003546:	4822      	ldr	r0, [pc, #136]	; (80035d0 <MX_TIM4_Init+0xdc>)
 8003548:	f005 ff6c 	bl	8009424 <HAL_TIM_Base_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8003552:	f7ff fc29 	bl	8002da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800355a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800355c:	f107 0320 	add.w	r3, r7, #32
 8003560:	4619      	mov	r1, r3
 8003562:	481b      	ldr	r0, [pc, #108]	; (80035d0 <MX_TIM4_Init+0xdc>)
 8003564:	f006 ffec 	bl	800a540 <HAL_TIM_ConfigClockSource>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800356e:	f7ff fc1b 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003572:	4817      	ldr	r0, [pc, #92]	; (80035d0 <MX_TIM4_Init+0xdc>)
 8003574:	f006 faf2 	bl	8009b5c <HAL_TIM_IC_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800357e:	f7ff fc13 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800358a:	f107 0314 	add.w	r3, r7, #20
 800358e:	4619      	mov	r1, r3
 8003590:	480f      	ldr	r0, [pc, #60]	; (80035d0 <MX_TIM4_Init+0xdc>)
 8003592:	f007 fe49 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800359c:	f7ff fc04 	bl	8002da8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80035a0:	2300      	movs	r3, #0
 80035a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80035a4:	2301      	movs	r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80035b0:	1d3b      	adds	r3, r7, #4
 80035b2:	2200      	movs	r2, #0
 80035b4:	4619      	mov	r1, r3
 80035b6:	4806      	ldr	r0, [pc, #24]	; (80035d0 <MX_TIM4_Init+0xdc>)
 80035b8:	f006 fe11 	bl	800a1de <HAL_TIM_IC_ConfigChannel>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80035c2:	f7ff fbf1 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80035c6:	bf00      	nop
 80035c8:	3730      	adds	r7, #48	; 0x30
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	24000590 	.word	0x24000590
 80035d4:	40000800 	.word	0x40000800

080035d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035de:	f107 0310 	add.w	r3, r7, #16
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ec:	1d3b      	adds	r3, r7, #4
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	605a      	str	r2, [r3, #4]
 80035f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <MX_TIM5_Init+0x94>)
 80035f8:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <MX_TIM5_Init+0x98>)
 80035fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <MX_TIM5_Init+0x94>)
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <MX_TIM5_Init+0x94>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <MX_TIM5_Init+0x94>)
 800360a:	f04f 32ff 	mov.w	r2, #4294967295
 800360e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003610:	4b16      	ldr	r3, [pc, #88]	; (800366c <MX_TIM5_Init+0x94>)
 8003612:	2200      	movs	r2, #0
 8003614:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <MX_TIM5_Init+0x94>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800361c:	4813      	ldr	r0, [pc, #76]	; (800366c <MX_TIM5_Init+0x94>)
 800361e:	f005 ff01 	bl	8009424 <HAL_TIM_Base_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003628:	f7ff fbbe 	bl	8002da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800362c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003630:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003632:	f107 0310 	add.w	r3, r7, #16
 8003636:	4619      	mov	r1, r3
 8003638:	480c      	ldr	r0, [pc, #48]	; (800366c <MX_TIM5_Init+0x94>)
 800363a:	f006 ff81 	bl	800a540 <HAL_TIM_ConfigClockSource>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003644:	f7ff fbb0 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003648:	2300      	movs	r3, #0
 800364a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003650:	1d3b      	adds	r3, r7, #4
 8003652:	4619      	mov	r1, r3
 8003654:	4805      	ldr	r0, [pc, #20]	; (800366c <MX_TIM5_Init+0x94>)
 8003656:	f007 fde7 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003660:	f7ff fba2 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003664:	bf00      	nop
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	240005dc 	.word	0x240005dc
 8003670:	40000c00 	.word	0x40000c00

08003674 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	; 0x30
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800367a:	f107 0320 	add.w	r3, r7, #32
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	611a      	str	r2, [r3, #16]
 8003696:	615a      	str	r2, [r3, #20]
 8003698:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800369a:	4b25      	ldr	r3, [pc, #148]	; (8003730 <MX_TIM12_Init+0xbc>)
 800369c:	4a25      	ldr	r2, [pc, #148]	; (8003734 <MX_TIM12_Init+0xc0>)
 800369e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 80036a0:	4b23      	ldr	r3, [pc, #140]	; (8003730 <MX_TIM12_Init+0xbc>)
 80036a2:	223f      	movs	r2, #63	; 0x3f
 80036a4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a6:	4b22      	ldr	r3, [pc, #136]	; (8003730 <MX_TIM12_Init+0xbc>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80036ac:	4b20      	ldr	r3, [pc, #128]	; (8003730 <MX_TIM12_Init+0xbc>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <MX_TIM12_Init+0xbc>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b8:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <MX_TIM12_Init+0xbc>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80036be:	481c      	ldr	r0, [pc, #112]	; (8003730 <MX_TIM12_Init+0xbc>)
 80036c0:	f005 feb0 	bl	8009424 <HAL_TIM_Base_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80036ca:	f7ff fb6d 	bl	8002da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80036d4:	f107 0320 	add.w	r3, r7, #32
 80036d8:	4619      	mov	r1, r3
 80036da:	4815      	ldr	r0, [pc, #84]	; (8003730 <MX_TIM12_Init+0xbc>)
 80036dc:	f006 ff30 	bl	800a540 <HAL_TIM_ConfigClockSource>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 80036e6:	f7ff fb5f 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80036ea:	4811      	ldr	r0, [pc, #68]	; (8003730 <MX_TIM12_Init+0xbc>)
 80036ec:	f006 f831 	bl	8009752 <HAL_TIM_PWM_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 80036f6:	f7ff fb57 	bl	8002da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036fa:	2360      	movs	r3, #96	; 0x60
 80036fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	2200      	movs	r2, #0
 800370e:	4619      	mov	r1, r3
 8003710:	4807      	ldr	r0, [pc, #28]	; (8003730 <MX_TIM12_Init+0xbc>)
 8003712:	f006 fe01 	bl	800a318 <HAL_TIM_PWM_ConfigChannel>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 800371c:	f7ff fb44 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003720:	4803      	ldr	r0, [pc, #12]	; (8003730 <MX_TIM12_Init+0xbc>)
 8003722:	f000 fa3d 	bl	8003ba0 <HAL_TIM_MspPostInit>

}
 8003726:	bf00      	nop
 8003728:	3730      	adds	r7, #48	; 0x30
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	24000628 	.word	0x24000628
 8003734:	40001800 	.word	0x40001800

08003738 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	611a      	str	r2, [r3, #16]
 800374c:	615a      	str	r2, [r3, #20]
 800374e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <MX_TIM13_Init+0x90>)
 8003752:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <MX_TIM13_Init+0x94>)
 8003754:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64-1;
 8003756:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <MX_TIM13_Init+0x90>)
 8003758:	223f      	movs	r2, #63	; 0x3f
 800375a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <MX_TIM13_Init+0x90>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8003762:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <MX_TIM13_Init+0x90>)
 8003764:	2200      	movs	r2, #0
 8003766:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003768:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <MX_TIM13_Init+0x90>)
 800376a:	2200      	movs	r2, #0
 800376c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <MX_TIM13_Init+0x90>)
 8003770:	2200      	movs	r2, #0
 8003772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003774:	4814      	ldr	r0, [pc, #80]	; (80037c8 <MX_TIM13_Init+0x90>)
 8003776:	f005 fe55 	bl	8009424 <HAL_TIM_Base_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8003780:	f7ff fb12 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003784:	4810      	ldr	r0, [pc, #64]	; (80037c8 <MX_TIM13_Init+0x90>)
 8003786:	f005 ffe4 	bl	8009752 <HAL_TIM_PWM_Init>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8003790:	f7ff fb0a 	bl	8002da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003794:	2360      	movs	r3, #96	; 0x60
 8003796:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	2200      	movs	r2, #0
 80037a8:	4619      	mov	r1, r3
 80037aa:	4807      	ldr	r0, [pc, #28]	; (80037c8 <MX_TIM13_Init+0x90>)
 80037ac:	f006 fdb4 	bl	800a318 <HAL_TIM_PWM_ConfigChannel>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 80037b6:	f7ff faf7 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80037ba:	4803      	ldr	r0, [pc, #12]	; (80037c8 <MX_TIM13_Init+0x90>)
 80037bc:	f000 f9f0 	bl	8003ba0 <HAL_TIM_MspPostInit>

}
 80037c0:	bf00      	nop
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	24000674 	.word	0x24000674
 80037cc:	40001c00 	.word	0x40001c00

080037d0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
 80037e4:	615a      	str	r2, [r3, #20]
 80037e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <MX_TIM14_Init+0x90>)
 80037ea:	4a1e      	ldr	r2, [pc, #120]	; (8003864 <MX_TIM14_Init+0x94>)
 80037ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 80037ee:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <MX_TIM14_Init+0x90>)
 80037f0:	223f      	movs	r2, #63	; 0x3f
 80037f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f4:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <MX_TIM14_Init+0x90>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <MX_TIM14_Init+0x90>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003800:	4b17      	ldr	r3, [pc, #92]	; (8003860 <MX_TIM14_Init+0x90>)
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <MX_TIM14_Init+0x90>)
 8003808:	2200      	movs	r2, #0
 800380a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800380c:	4814      	ldr	r0, [pc, #80]	; (8003860 <MX_TIM14_Init+0x90>)
 800380e:	f005 fe09 	bl	8009424 <HAL_TIM_Base_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8003818:	f7ff fac6 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800381c:	4810      	ldr	r0, [pc, #64]	; (8003860 <MX_TIM14_Init+0x90>)
 800381e:	f005 ff98 	bl	8009752 <HAL_TIM_PWM_Init>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8003828:	f7ff fabe 	bl	8002da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800382c:	2360      	movs	r3, #96	; 0x60
 800382e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	2200      	movs	r2, #0
 8003840:	4619      	mov	r1, r3
 8003842:	4807      	ldr	r0, [pc, #28]	; (8003860 <MX_TIM14_Init+0x90>)
 8003844:	f006 fd68 	bl	800a318 <HAL_TIM_PWM_ConfigChannel>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 800384e:	f7ff faab 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8003852:	4803      	ldr	r0, [pc, #12]	; (8003860 <MX_TIM14_Init+0x90>)
 8003854:	f000 f9a4 	bl	8003ba0 <HAL_TIM_MspPostInit>

}
 8003858:	bf00      	nop
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	240006c0 	.word	0x240006c0
 8003864:	40002000 	.word	0x40002000

08003868 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800386e:	f107 0310 	add.w	r3, r7, #16
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003886:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <MX_TIM15_Init+0x9c>)
 8003888:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <MX_TIM15_Init+0xa0>)
 800388a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <MX_TIM15_Init+0x9c>)
 800388e:	2200      	movs	r2, #0
 8003890:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003892:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <MX_TIM15_Init+0x9c>)
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8003898:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <MX_TIM15_Init+0x9c>)
 800389a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800389e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a0:	4b18      	ldr	r3, [pc, #96]	; (8003904 <MX_TIM15_Init+0x9c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <MX_TIM15_Init+0x9c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ac:	4b15      	ldr	r3, [pc, #84]	; (8003904 <MX_TIM15_Init+0x9c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80038b2:	4814      	ldr	r0, [pc, #80]	; (8003904 <MX_TIM15_Init+0x9c>)
 80038b4:	f005 fdb6 	bl	8009424 <HAL_TIM_Base_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80038be:	f7ff fa73 	bl	8002da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80038c8:	f107 0310 	add.w	r3, r7, #16
 80038cc:	4619      	mov	r1, r3
 80038ce:	480d      	ldr	r0, [pc, #52]	; (8003904 <MX_TIM15_Init+0x9c>)
 80038d0:	f006 fe36 	bl	800a540 <HAL_TIM_ConfigClockSource>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80038da:	f7ff fa65 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80038e6:	1d3b      	adds	r3, r7, #4
 80038e8:	4619      	mov	r1, r3
 80038ea:	4806      	ldr	r0, [pc, #24]	; (8003904 <MX_TIM15_Init+0x9c>)
 80038ec:	f007 fc9c 	bl	800b228 <HAL_TIMEx_MasterConfigSynchronization>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80038f6:	f7ff fa57 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80038fa:	bf00      	nop
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	2400070c 	.word	0x2400070c
 8003908:	40014000 	.word	0x40014000

0800390c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b092      	sub	sp, #72	; 0x48
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392c:	d136      	bne.n	800399c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800392e:	4b92      	ldr	r3, [pc, #584]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003934:	4a90      	ldr	r2, [pc, #576]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800393e:	4b8e      	ldr	r3, [pc, #568]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	633b      	str	r3, [r7, #48]	; 0x30
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394c:	4b8a      	ldr	r3, [pc, #552]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 800394e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003952:	4a89      	ldr	r2, [pc, #548]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800395c:	4b86      	ldr	r3, [pc, #536]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 800395e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800396a:	2301      	movs	r3, #1
 800396c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	2302      	movs	r3, #2
 8003970:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003976:	2300      	movs	r3, #0
 8003978:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800397a:	2301      	movs	r3, #1
 800397c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003982:	4619      	mov	r1, r3
 8003984:	487d      	ldr	r0, [pc, #500]	; (8003b7c <HAL_TIM_Base_MspInit+0x270>)
 8003986:	f002 fff5 	bl	8006974 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	2101      	movs	r1, #1
 800398e:	201c      	movs	r0, #28
 8003990:	f002 fa49 	bl	8005e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003994:	201c      	movs	r0, #28
 8003996:	f002 fa60 	bl	8005e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800399a:	e0e8      	b.n	8003b6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a77      	ldr	r2, [pc, #476]	; (8003b80 <HAL_TIM_Base_MspInit+0x274>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d136      	bne.n	8003a14 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039a6:	4b74      	ldr	r3, [pc, #464]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 80039a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ac:	4a72      	ldr	r2, [pc, #456]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 80039ae:	f043 0302 	orr.w	r3, r3, #2
 80039b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039b6:	4b70      	ldr	r3, [pc, #448]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 80039b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c4:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 80039c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ca:	4a6b      	ldr	r2, [pc, #428]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039d4:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 80039d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039e2:	2340      	movs	r3, #64	; 0x40
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e6:	2302      	movs	r3, #2
 80039e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ee:	2300      	movs	r3, #0
 80039f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039f2:	2302      	movs	r3, #2
 80039f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039fa:	4619      	mov	r1, r3
 80039fc:	485f      	ldr	r0, [pc, #380]	; (8003b7c <HAL_TIM_Base_MspInit+0x270>)
 80039fe:	f002 ffb9 	bl	8006974 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003a02:	2200      	movs	r2, #0
 8003a04:	2101      	movs	r1, #1
 8003a06:	201d      	movs	r0, #29
 8003a08:	f002 fa0d 	bl	8005e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a0c:	201d      	movs	r0, #29
 8003a0e:	f002 fa24 	bl	8005e5a <HAL_NVIC_EnableIRQ>
}
 8003a12:	e0ac      	b.n	8003b6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5a      	ldr	r2, [pc, #360]	; (8003b84 <HAL_TIM_Base_MspInit+0x278>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d137      	bne.n	8003a8e <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a1e:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a24:	4a54      	ldr	r2, [pc, #336]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a26:	f043 0304 	orr.w	r3, r3, #4
 8003a2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a2e:	4b52      	ldr	r3, [pc, #328]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	623b      	str	r3, [r7, #32]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a3c:	4b4e      	ldr	r3, [pc, #312]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a42:	4a4d      	ldr	r2, [pc, #308]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a44:	f043 0308 	orr.w	r3, r3, #8
 8003a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a4c:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a74:	4619      	mov	r1, r3
 8003a76:	4844      	ldr	r0, [pc, #272]	; (8003b88 <HAL_TIM_Base_MspInit+0x27c>)
 8003a78:	f002 ff7c 	bl	8006974 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2101      	movs	r1, #1
 8003a80:	201e      	movs	r0, #30
 8003a82:	f002 f9d0 	bl	8005e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a86:	201e      	movs	r0, #30
 8003a88:	f002 f9e7 	bl	8005e5a <HAL_NVIC_EnableIRQ>
}
 8003a8c:	e06f      	b.n	8003b6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a3e      	ldr	r2, [pc, #248]	; (8003b8c <HAL_TIM_Base_MspInit+0x280>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10f      	bne.n	8003ab8 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a98:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a9e:	4a36      	ldr	r2, [pc, #216]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003aa0:	f043 0308 	orr.w	r3, r3, #8
 8003aa4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003aa8:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	69bb      	ldr	r3, [r7, #24]
}
 8003ab6:	e05a      	b.n	8003b6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <HAL_TIM_Base_MspInit+0x284>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10f      	bne.n	8003ae2 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ac8:	4a2b      	ldr	r2, [pc, #172]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ace:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ad2:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697b      	ldr	r3, [r7, #20]
}
 8003ae0:	e045      	b.n	8003b6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a2b      	ldr	r2, [pc, #172]	; (8003b94 <HAL_TIM_Base_MspInit+0x288>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d10f      	bne.n	8003b0c <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003aec:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003aee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003afc:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003afe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
}
 8003b0a:	e030      	b.n	8003b6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <HAL_TIM_Base_MspInit+0x28c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10f      	bne.n	8003b36 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b1c:	4a16      	ldr	r2, [pc, #88]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b26:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	e01b      	b.n	8003b6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_TIM_Base_MspInit+0x290>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d116      	bne.n	8003b6e <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003b40:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b46:	4a0c      	ldr	r2, [pc, #48]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_TIM_Base_MspInit+0x26c>)
 8003b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2101      	movs	r1, #1
 8003b62:	2074      	movs	r0, #116	; 0x74
 8003b64:	f002 f95f 	bl	8005e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003b68:	2074      	movs	r0, #116	; 0x74
 8003b6a:	f002 f976 	bl	8005e5a <HAL_NVIC_EnableIRQ>
}
 8003b6e:	bf00      	nop
 8003b70:	3748      	adds	r7, #72	; 0x48
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58020000 	.word	0x58020000
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	58020c00 	.word	0x58020c00
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40001800 	.word	0x40001800
 8003b94:	40001c00 	.word	0x40001c00
 8003b98:	40002000 	.word	0x40002000
 8003b9c:	40014000 	.word	0x40014000

08003ba0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	; 0x28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba8:	f107 0314 	add.w	r3, r7, #20
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a39      	ldr	r2, [pc, #228]	; (8003ca4 <HAL_TIM_MspPostInit+0x104>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d120      	bne.n	8003c04 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc2:	4b39      	ldr	r3, [pc, #228]	; (8003ca8 <HAL_TIM_MspPostInit+0x108>)
 8003bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bc8:	4a37      	ldr	r2, [pc, #220]	; (8003ca8 <HAL_TIM_MspPostInit+0x108>)
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bd2:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <HAL_TIM_MspPostInit+0x108>)
 8003bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8003be0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be6:	2302      	movs	r3, #2
 8003be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003bea:	2302      	movs	r3, #2
 8003bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8003bf6:	f107 0314 	add.w	r3, r7, #20
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	482b      	ldr	r0, [pc, #172]	; (8003cac <HAL_TIM_MspPostInit+0x10c>)
 8003bfe:	f002 feb9 	bl	8006974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003c02:	e04a      	b.n	8003c9a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a29      	ldr	r2, [pc, #164]	; (8003cb0 <HAL_TIM_MspPostInit+0x110>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d120      	bne.n	8003c50 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c0e:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <HAL_TIM_MspPostInit+0x108>)
 8003c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c14:	4a24      	ldr	r2, [pc, #144]	; (8003ca8 <HAL_TIM_MspPostInit+0x108>)
 8003c16:	f043 0320 	orr.w	r3, r3, #32
 8003c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <HAL_TIM_MspPostInit+0x108>)
 8003c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8003c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c32:	2302      	movs	r3, #2
 8003c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c36:	2302      	movs	r3, #2
 8003c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003c3e:	2309      	movs	r3, #9
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	4619      	mov	r1, r3
 8003c48:	481a      	ldr	r0, [pc, #104]	; (8003cb4 <HAL_TIM_MspPostInit+0x114>)
 8003c4a:	f002 fe93 	bl	8006974 <HAL_GPIO_Init>
}
 8003c4e:	e024      	b.n	8003c9a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <HAL_TIM_MspPostInit+0x118>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d11f      	bne.n	8003c9a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c5a:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <HAL_TIM_MspPostInit+0x108>)
 8003c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c60:	4a11      	ldr	r2, [pc, #68]	; (8003ca8 <HAL_TIM_MspPostInit+0x108>)
 8003c62:	f043 0320 	orr.w	r3, r3, #32
 8003c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <HAL_TIM_MspPostInit+0x108>)
 8003c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8003c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c82:	2302      	movs	r3, #2
 8003c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c86:	2300      	movs	r3, #0
 8003c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003c8a:	2309      	movs	r3, #9
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 8003c8e:	f107 0314 	add.w	r3, r7, #20
 8003c92:	4619      	mov	r1, r3
 8003c94:	4807      	ldr	r0, [pc, #28]	; (8003cb4 <HAL_TIM_MspPostInit+0x114>)
 8003c96:	f002 fe6d 	bl	8006974 <HAL_GPIO_Init>
}
 8003c9a:	bf00      	nop
 8003c9c:	3728      	adds	r7, #40	; 0x28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40001800 	.word	0x40001800
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	58020400 	.word	0x58020400
 8003cb0:	40001c00 	.word	0x40001c00
 8003cb4:	58021400 	.word	0x58021400
 8003cb8:	40002000 	.word	0x40002000

08003cbc <get_Straj>:
double _rpm1,_rpm2,_rpm3;
uint32_t _peri1,_peri2,_peri3;



double get_Straj(double t,double _qi, double _qf ,double *params){
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	ed2d 8b06 	vpush	{d8-d10}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	ed87 0b06 	vstr	d0, [r7, #24]
 8003cca:	ed87 1b04 	vstr	d1, [r7, #16]
 8003cce:	ed87 2b02 	vstr	d2, [r7, #8]
 8003cd2:	6078      	str	r0, [r7, #4]

	Tj1 = params[0];
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	495f      	ldr	r1, [pc, #380]	; (8003e58 <get_Straj+0x19c>)
 8003cdc:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003ce6:	495d      	ldr	r1, [pc, #372]	; (8003e5c <get_Straj+0x1a0>)
 8003ce8:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003cf2:	495b      	ldr	r1, [pc, #364]	; (8003e60 <get_Straj+0x1a4>)
 8003cf4:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cfe:	4959      	ldr	r1, [pc, #356]	; (8003e64 <get_Straj+0x1a8>)
 8003d00:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d0a:	4957      	ldr	r1, [pc, #348]	; (8003e68 <get_Straj+0x1ac>)
 8003d0c:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003d16:	4955      	ldr	r1, [pc, #340]	; (8003e6c <get_Straj+0x1b0>)
 8003d18:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003d22:	4953      	ldr	r1, [pc, #332]	; (8003e70 <get_Straj+0x1b4>)
 8003d24:	e9c1 2300 	strd	r2, r3, [r1]

	qi=_qi;
 8003d28:	4952      	ldr	r1, [pc, #328]	; (8003e74 <get_Straj+0x1b8>)
 8003d2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d2e:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8003d32:	4951      	ldr	r1, [pc, #324]	; (8003e78 <get_Straj+0x1bc>)
 8003d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d38:	e9c1 2300 	strd	r2, r3, [r1]

    if (qf < qi){
 8003d3c:	4b4e      	ldr	r3, [pc, #312]	; (8003e78 <get_Straj+0x1bc>)
 8003d3e:	ed93 6b00 	vldr	d6, [r3]
 8003d42:	4b4c      	ldr	r3, [pc, #304]	; (8003e74 <get_Straj+0x1b8>)
 8003d44:	ed93 7b00 	vldr	d7, [r3]
 8003d48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d50:	f140 80ac 	bpl.w	8003eac <get_Straj+0x1f0>

    flagInv = true;
 8003d54:	4b49      	ldr	r3, [pc, #292]	; (8003e7c <get_Straj+0x1c0>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 8003d5a:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <get_Straj+0x1b8>)
 8003d5c:	ed93 7b00 	vldr	d7, [r3]
 8003d60:	eeb1 7b47 	vneg.f64	d7, d7
 8003d64:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <get_Straj+0x1b8>)
 8003d66:	ed83 7b00 	vstr	d7, [r3]
    qf = -qf;
 8003d6a:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <get_Straj+0x1bc>)
 8003d6c:	ed93 7b00 	vldr	d7, [r3]
 8003d70:	eeb1 7b47 	vneg.f64	d7, d7
 8003d74:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <get_Straj+0x1bc>)
 8003d76:	ed83 7b00 	vstr	d7, [r3]
    vi = -vi;
 8003d7a:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <get_Straj+0x1c4>)
 8003d7c:	ed93 7b00 	vldr	d7, [r3]
 8003d80:	eeb1 7b47 	vneg.f64	d7, d7
 8003d84:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <get_Straj+0x1c4>)
 8003d86:	ed83 7b00 	vstr	d7, [r3]
    vf = -vf;
 8003d8a:	4b3e      	ldr	r3, [pc, #248]	; (8003e84 <get_Straj+0x1c8>)
 8003d8c:	ed93 7b00 	vldr	d7, [r3]
 8003d90:	eeb1 7b47 	vneg.f64	d7, d7
 8003d94:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <get_Straj+0x1c8>)
 8003d96:	ed83 7b00 	vstr	d7, [r3]

    vmax = -vmin;
 8003d9a:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <get_Straj+0x1cc>)
 8003d9c:	ed93 7b00 	vldr	d7, [r3]
 8003da0:	eeb1 7b47 	vneg.f64	d7, d7
 8003da4:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <get_Straj+0x1d0>)
 8003da6:	ed83 7b00 	vstr	d7, [r3]
    vmin = -vmax;
 8003daa:	4b38      	ldr	r3, [pc, #224]	; (8003e8c <get_Straj+0x1d0>)
 8003dac:	ed93 7b00 	vldr	d7, [r3]
 8003db0:	eeb1 7b47 	vneg.f64	d7, d7
 8003db4:	4b34      	ldr	r3, [pc, #208]	; (8003e88 <get_Straj+0x1cc>)
 8003db6:	ed83 7b00 	vstr	d7, [r3]
    amax = -amin;
 8003dba:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <get_Straj+0x1d4>)
 8003dbc:	ed93 7b00 	vldr	d7, [r3]
 8003dc0:	eeb1 7b47 	vneg.f64	d7, d7
 8003dc4:	4b33      	ldr	r3, [pc, #204]	; (8003e94 <get_Straj+0x1d8>)
 8003dc6:	ed83 7b00 	vstr	d7, [r3]
    amin = -amax;
 8003dca:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <get_Straj+0x1d8>)
 8003dcc:	ed93 7b00 	vldr	d7, [r3]
 8003dd0:	eeb1 7b47 	vneg.f64	d7, d7
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <get_Straj+0x1d4>)
 8003dd6:	ed83 7b00 	vstr	d7, [r3]
    jmax = -jmin;
 8003dda:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <get_Straj+0x1dc>)
 8003ddc:	ed93 7b00 	vldr	d7, [r3]
 8003de0:	eeb1 7b47 	vneg.f64	d7, d7
 8003de4:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <get_Straj+0x1e0>)
 8003de6:	ed83 7b00 	vstr	d7, [r3]
    jmin = -jmax;
 8003dea:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <get_Straj+0x1e0>)
 8003dec:	ed93 7b00 	vldr	d7, [r3]
 8003df0:	eeb1 7b47 	vneg.f64	d7, d7
 8003df4:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <get_Straj+0x1dc>)
 8003df6:	ed83 7b00 	vstr	d7, [r3]

    alima = jmax*Tj1;
 8003dfa:	4b28      	ldr	r3, [pc, #160]	; (8003e9c <get_Straj+0x1e0>)
 8003dfc:	ed93 6b00 	vldr	d6, [r3]
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <get_Straj+0x19c>)
 8003e02:	ed93 7b00 	vldr	d7, [r3]
 8003e06:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003e0a:	4b25      	ldr	r3, [pc, #148]	; (8003ea0 <get_Straj+0x1e4>)
 8003e0c:	ed83 7b00 	vstr	d7, [r3]
    alimd = -jmax*Tj2;
 8003e10:	4b22      	ldr	r3, [pc, #136]	; (8003e9c <get_Straj+0x1e0>)
 8003e12:	ed93 7b00 	vldr	d7, [r3]
 8003e16:	eeb1 6b47 	vneg.f64	d6, d7
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <get_Straj+0x1a0>)
 8003e1c:	ed93 7b00 	vldr	d7, [r3]
 8003e20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003e24:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <get_Straj+0x1e8>)
 8003e26:	ed83 7b00 	vstr	d7, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <get_Straj+0x1a8>)
 8003e2c:	ed93 6b00 	vldr	d6, [r3]
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <get_Straj+0x19c>)
 8003e32:	ed93 7b00 	vldr	d7, [r3]
 8003e36:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003e3a:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <get_Straj+0x1e4>)
 8003e3c:	ed93 7b00 	vldr	d7, [r3]
 8003e40:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <get_Straj+0x1c4>)
 8003e46:	ed93 7b00 	vldr	d7, [r3]
 8003e4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <get_Straj+0x1ec>)
 8003e50:	ed83 7b00 	vstr	d7, [r3]
 8003e54:	e06f      	b.n	8003f36 <get_Straj+0x27a>
 8003e56:	bf00      	nop
 8003e58:	24000798 	.word	0x24000798
 8003e5c:	240007a0 	.word	0x240007a0
 8003e60:	240007a8 	.word	0x240007a8
 8003e64:	24000780 	.word	0x24000780
 8003e68:	24000788 	.word	0x24000788
 8003e6c:	24000790 	.word	0x24000790
 8003e70:	24000778 	.word	0x24000778
 8003e74:	240007b8 	.word	0x240007b8
 8003e78:	240007c0 	.word	0x240007c0
 8003e7c:	24000758 	.word	0x24000758
 8003e80:	24000460 	.word	0x24000460
 8003e84:	24000468 	.word	0x24000468
 8003e88:	24000458 	.word	0x24000458
 8003e8c:	24000010 	.word	0x24000010
 8003e90:	24000470 	.word	0x24000470
 8003e94:	24000018 	.word	0x24000018
 8003e98:	24000450 	.word	0x24000450
 8003e9c:	24000008 	.word	0x24000008
 8003ea0:	24000760 	.word	0x24000760
 8003ea4:	24000768 	.word	0x24000768
 8003ea8:	24000770 	.word	0x24000770

    }else{
        jmin = -jmax;
 8003eac:	4bbc      	ldr	r3, [pc, #752]	; (80041a0 <get_Straj+0x4e4>)
 8003eae:	ed93 7b00 	vldr	d7, [r3]
 8003eb2:	eeb1 7b47 	vneg.f64	d7, d7
 8003eb6:	4bbb      	ldr	r3, [pc, #748]	; (80041a4 <get_Straj+0x4e8>)
 8003eb8:	ed83 7b00 	vstr	d7, [r3]
        amin = -amax;
 8003ebc:	4bba      	ldr	r3, [pc, #744]	; (80041a8 <get_Straj+0x4ec>)
 8003ebe:	ed93 7b00 	vldr	d7, [r3]
 8003ec2:	eeb1 7b47 	vneg.f64	d7, d7
 8003ec6:	4bb9      	ldr	r3, [pc, #740]	; (80041ac <get_Straj+0x4f0>)
 8003ec8:	ed83 7b00 	vstr	d7, [r3]
        vmin = -vmax;
 8003ecc:	4bb8      	ldr	r3, [pc, #736]	; (80041b0 <get_Straj+0x4f4>)
 8003ece:	ed93 7b00 	vldr	d7, [r3]
 8003ed2:	eeb1 7b47 	vneg.f64	d7, d7
 8003ed6:	4bb7      	ldr	r3, [pc, #732]	; (80041b4 <get_Straj+0x4f8>)
 8003ed8:	ed83 7b00 	vstr	d7, [r3]

        alima = jmax*Tj1;
 8003edc:	4bb0      	ldr	r3, [pc, #704]	; (80041a0 <get_Straj+0x4e4>)
 8003ede:	ed93 6b00 	vldr	d6, [r3]
 8003ee2:	4bb5      	ldr	r3, [pc, #724]	; (80041b8 <get_Straj+0x4fc>)
 8003ee4:	ed93 7b00 	vldr	d7, [r3]
 8003ee8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003eec:	4bb3      	ldr	r3, [pc, #716]	; (80041bc <get_Straj+0x500>)
 8003eee:	ed83 7b00 	vstr	d7, [r3]
        alimd = -jmax*Tj2;
 8003ef2:	4bab      	ldr	r3, [pc, #684]	; (80041a0 <get_Straj+0x4e4>)
 8003ef4:	ed93 7b00 	vldr	d7, [r3]
 8003ef8:	eeb1 6b47 	vneg.f64	d6, d7
 8003efc:	4bb0      	ldr	r3, [pc, #704]	; (80041c0 <get_Straj+0x504>)
 8003efe:	ed93 7b00 	vldr	d7, [r3]
 8003f02:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003f06:	4baf      	ldr	r3, [pc, #700]	; (80041c4 <get_Straj+0x508>)
 8003f08:	ed83 7b00 	vstr	d7, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 8003f0c:	4bae      	ldr	r3, [pc, #696]	; (80041c8 <get_Straj+0x50c>)
 8003f0e:	ed93 6b00 	vldr	d6, [r3]
 8003f12:	4ba9      	ldr	r3, [pc, #676]	; (80041b8 <get_Straj+0x4fc>)
 8003f14:	ed93 7b00 	vldr	d7, [r3]
 8003f18:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003f1c:	4ba7      	ldr	r3, [pc, #668]	; (80041bc <get_Straj+0x500>)
 8003f1e:	ed93 7b00 	vldr	d7, [r3]
 8003f22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003f26:	4ba9      	ldr	r3, [pc, #676]	; (80041cc <get_Straj+0x510>)
 8003f28:	ed93 7b00 	vldr	d7, [r3]
 8003f2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f30:	4ba7      	ldr	r3, [pc, #668]	; (80041d0 <get_Straj+0x514>)
 8003f32:	ed83 7b00 	vstr	d7, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 8003f36:	ed97 7b06 	vldr	d7, [r7, #24]
 8003f3a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f42:	db7e      	blt.n	8004042 <get_Straj+0x386>
 8003f44:	4b9c      	ldr	r3, [pc, #624]	; (80041b8 <get_Straj+0x4fc>)
 8003f46:	ed93 7b00 	vldr	d7, [r3]
 8003f4a:	ed97 6b06 	vldr	d6, [r7, #24]
 8003f4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f56:	d874      	bhi.n	8004042 <get_Straj+0x386>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 8003f58:	4b9c      	ldr	r3, [pc, #624]	; (80041cc <get_Straj+0x510>)
 8003f5a:	ed93 6b00 	vldr	d6, [r3]
 8003f5e:	ed97 7b06 	vldr	d7, [r7, #24]
 8003f62:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003f66:	4b9b      	ldr	r3, [pc, #620]	; (80041d4 <get_Straj+0x518>)
 8003f68:	ed93 7b00 	vldr	d7, [r3]
 8003f6c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8003f70:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8003f74:	ed97 0b06 	vldr	d0, [r7, #24]
 8003f78:	f00c fc36 	bl	80107e8 <pow>
 8003f7c:	eeb0 6b40 	vmov.f64	d6, d0
 8003f80:	4b87      	ldr	r3, [pc, #540]	; (80041a0 <get_Straj+0x4e4>)
 8003f82:	ed93 7b00 	vldr	d7, [r3]
 8003f86:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003f8a:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8003f8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f92:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003f96:	4b90      	ldr	r3, [pc, #576]	; (80041d8 <get_Straj+0x51c>)
 8003f98:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+jmax*pow(t,2)/2;
 8003f9c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003fa0:	ed97 0b06 	vldr	d0, [r7, #24]
 8003fa4:	f00c fc20 	bl	80107e8 <pow>
 8003fa8:	eeb0 6b40 	vmov.f64	d6, d0
 8003fac:	4b7c      	ldr	r3, [pc, #496]	; (80041a0 <get_Straj+0x4e4>)
 8003fae:	ed93 7b00 	vldr	d7, [r3]
 8003fb2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003fb6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003fba:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003fbe:	4b83      	ldr	r3, [pc, #524]	; (80041cc <get_Straj+0x510>)
 8003fc0:	ed93 7b00 	vldr	d7, [r3]
 8003fc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003fc8:	4b84      	ldr	r3, [pc, #528]	; (80041dc <get_Straj+0x520>)
 8003fca:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*t;
 8003fce:	4b74      	ldr	r3, [pc, #464]	; (80041a0 <get_Straj+0x4e4>)
 8003fd0:	ed93 6b00 	vldr	d6, [r3]
 8003fd4:	ed97 7b06 	vldr	d7, [r7, #24]
 8003fd8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003fdc:	4b80      	ldr	r3, [pc, #512]	; (80041e0 <get_Straj+0x524>)
 8003fde:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 8003fe2:	4b6f      	ldr	r3, [pc, #444]	; (80041a0 <get_Straj+0x4e4>)
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	497e      	ldr	r1, [pc, #504]	; (80041e4 <get_Straj+0x528>)
 8003fea:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8003fee:	4b7e      	ldr	r3, [pc, #504]	; (80041e8 <get_Straj+0x52c>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 84fb 	beq.w	80049ee <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8003ff8:	4b77      	ldr	r3, [pc, #476]	; (80041d8 <get_Straj+0x51c>)
 8003ffa:	ed93 7b00 	vldr	d7, [r3]
 8003ffe:	eeb1 7b47 	vneg.f64	d7, d7
 8004002:	4b75      	ldr	r3, [pc, #468]	; (80041d8 <get_Straj+0x51c>)
 8004004:	ed83 7b00 	vstr	d7, [r3]
 8004008:	4b74      	ldr	r3, [pc, #464]	; (80041dc <get_Straj+0x520>)
 800400a:	ed93 7b00 	vldr	d7, [r3]
 800400e:	eeb1 7b47 	vneg.f64	d7, d7
 8004012:	4b72      	ldr	r3, [pc, #456]	; (80041dc <get_Straj+0x520>)
 8004014:	ed83 7b00 	vstr	d7, [r3]
 8004018:	4b71      	ldr	r3, [pc, #452]	; (80041e0 <get_Straj+0x524>)
 800401a:	ed93 7b00 	vldr	d7, [r3]
 800401e:	eeb1 7b47 	vneg.f64	d7, d7
 8004022:	4b6f      	ldr	r3, [pc, #444]	; (80041e0 <get_Straj+0x524>)
 8004024:	ed83 7b00 	vstr	d7, [r3]
 8004028:	4b6e      	ldr	r3, [pc, #440]	; (80041e4 <get_Straj+0x528>)
 800402a:	ed93 7b00 	vldr	d7, [r3]
 800402e:	eeb1 7b47 	vneg.f64	d7, d7
 8004032:	4b6c      	ldr	r3, [pc, #432]	; (80041e4 <get_Straj+0x528>)
 8004034:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004038:	4b6b      	ldr	r3, [pc, #428]	; (80041e8 <get_Straj+0x52c>)
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800403e:	f000 bcd6 	b.w	80049ee <get_Straj+0xd32>
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8004042:	4b5d      	ldr	r3, [pc, #372]	; (80041b8 <get_Straj+0x4fc>)
 8004044:	ed93 7b00 	vldr	d7, [r3]
 8004048:	ed97 6b06 	vldr	d6, [r7, #24]
 800404c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004054:	f340 80ca 	ble.w	80041ec <get_Straj+0x530>
 8004058:	4b5b      	ldr	r3, [pc, #364]	; (80041c8 <get_Straj+0x50c>)
 800405a:	ed93 6b00 	vldr	d6, [r3]
 800405e:	4b56      	ldr	r3, [pc, #344]	; (80041b8 <get_Straj+0x4fc>)
 8004060:	ed93 7b00 	vldr	d7, [r3]
 8004064:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004068:	ed97 6b06 	vldr	d6, [r7, #24]
 800406c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004074:	f200 80ba 	bhi.w	80041ec <get_Straj+0x530>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8004078:	4b54      	ldr	r3, [pc, #336]	; (80041cc <get_Straj+0x510>)
 800407a:	ed93 6b00 	vldr	d6, [r3]
 800407e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004082:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004086:	4b53      	ldr	r3, [pc, #332]	; (80041d4 <get_Straj+0x518>)
 8004088:	ed93 7b00 	vldr	d7, [r3]
 800408c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004090:	4b4a      	ldr	r3, [pc, #296]	; (80041bc <get_Straj+0x500>)
 8004092:	ed93 7b00 	vldr	d7, [r3]
 8004096:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800409a:	ee87 9b06 	vdiv.f64	d9, d7, d6
 800409e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80040a2:	ed97 0b06 	vldr	d0, [r7, #24]
 80040a6:	f00c fb9f 	bl	80107e8 <pow>
 80040aa:	eeb0 7b40 	vmov.f64	d7, d0
 80040ae:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80040b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80040b6:	4b40      	ldr	r3, [pc, #256]	; (80041b8 <get_Straj+0x4fc>)
 80040b8:	ed93 7b00 	vldr	d7, [r3]
 80040bc:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80040c0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80040c4:	ed97 7b06 	vldr	d7, [r7, #24]
 80040c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80040cc:	ee36 ab47 	vsub.f64	d10, d6, d7
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <get_Straj+0x4fc>)
 80040d2:	ed93 7b00 	vldr	d7, [r3]
 80040d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80040da:	eeb0 0b47 	vmov.f64	d0, d7
 80040de:	f00c fb83 	bl	80107e8 <pow>
 80040e2:	eeb0 7b40 	vmov.f64	d7, d0
 80040e6:	ee3a 7b07 	vadd.f64	d7, d10, d7
 80040ea:	ee29 7b07 	vmul.f64	d7, d9, d7
 80040ee:	ee38 7b07 	vadd.f64	d7, d8, d7
 80040f2:	4b39      	ldr	r3, [pc, #228]	; (80041d8 <get_Straj+0x51c>)
 80040f4:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+amax*(t-Tj1/2);
 80040f8:	4b2f      	ldr	r3, [pc, #188]	; (80041b8 <get_Straj+0x4fc>)
 80040fa:	ed93 6b00 	vldr	d6, [r3]
 80040fe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004102:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004106:	ed97 6b06 	vldr	d6, [r7, #24]
 800410a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800410e:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <get_Straj+0x4ec>)
 8004110:	ed93 7b00 	vldr	d7, [r3]
 8004114:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004118:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <get_Straj+0x510>)
 800411a:	ed93 7b00 	vldr	d7, [r3]
 800411e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004122:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <get_Straj+0x520>)
 8004124:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*Tj1;
 8004128:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <get_Straj+0x4e4>)
 800412a:	ed93 6b00 	vldr	d6, [r3]
 800412e:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <get_Straj+0x4fc>)
 8004130:	ed93 7b00 	vldr	d7, [r3]
 8004134:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004138:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <get_Straj+0x524>)
 800413a:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 800413e:	4929      	ldr	r1, [pc, #164]	; (80041e4 <get_Straj+0x528>)
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9c1 2300 	strd	r2, r3, [r1]

        if (flagInv){
 800414c:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <get_Straj+0x52c>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 844c 	beq.w	80049ee <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004156:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <get_Straj+0x51c>)
 8004158:	ed93 7b00 	vldr	d7, [r3]
 800415c:	eeb1 7b47 	vneg.f64	d7, d7
 8004160:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <get_Straj+0x51c>)
 8004162:	ed83 7b00 	vstr	d7, [r3]
 8004166:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <get_Straj+0x520>)
 8004168:	ed93 7b00 	vldr	d7, [r3]
 800416c:	eeb1 7b47 	vneg.f64	d7, d7
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <get_Straj+0x520>)
 8004172:	ed83 7b00 	vstr	d7, [r3]
 8004176:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <get_Straj+0x524>)
 8004178:	ed93 7b00 	vldr	d7, [r3]
 800417c:	eeb1 7b47 	vneg.f64	d7, d7
 8004180:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <get_Straj+0x524>)
 8004182:	ed83 7b00 	vstr	d7, [r3]
 8004186:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <get_Straj+0x528>)
 8004188:	ed93 7b00 	vldr	d7, [r3]
 800418c:	eeb1 7b47 	vneg.f64	d7, d7
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <get_Straj+0x528>)
 8004192:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <get_Straj+0x52c>)
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800419c:	f000 bc27 	b.w	80049ee <get_Straj+0xd32>
 80041a0:	24000008 	.word	0x24000008
 80041a4:	24000450 	.word	0x24000450
 80041a8:	24000018 	.word	0x24000018
 80041ac:	24000470 	.word	0x24000470
 80041b0:	24000010 	.word	0x24000010
 80041b4:	24000458 	.word	0x24000458
 80041b8:	24000798 	.word	0x24000798
 80041bc:	24000760 	.word	0x24000760
 80041c0:	240007a0 	.word	0x240007a0
 80041c4:	24000768 	.word	0x24000768
 80041c8:	24000780 	.word	0x24000780
 80041cc:	24000460 	.word	0x24000460
 80041d0:	24000770 	.word	0x24000770
 80041d4:	240007b8 	.word	0x240007b8
 80041d8:	24000430 	.word	0x24000430
 80041dc:	24000438 	.word	0x24000438
 80041e0:	24000440 	.word	0x24000440
 80041e4:	24000448 	.word	0x24000448
 80041e8:	24000758 	.word	0x24000758
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 80041ec:	4b9c      	ldr	r3, [pc, #624]	; (8004460 <get_Straj+0x7a4>)
 80041ee:	ed93 6b00 	vldr	d6, [r3]
 80041f2:	4b9c      	ldr	r3, [pc, #624]	; (8004464 <get_Straj+0x7a8>)
 80041f4:	ed93 7b00 	vldr	d7, [r3]
 80041f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80041fc:	ed97 6b06 	vldr	d6, [r7, #24]
 8004200:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004208:	f340 80ac 	ble.w	8004364 <get_Straj+0x6a8>
 800420c:	4b94      	ldr	r3, [pc, #592]	; (8004460 <get_Straj+0x7a4>)
 800420e:	ed93 7b00 	vldr	d7, [r3]
 8004212:	ed97 6b06 	vldr	d6, [r7, #24]
 8004216:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421e:	f200 80a1 	bhi.w	8004364 <get_Straj+0x6a8>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 8004222:	4b91      	ldr	r3, [pc, #580]	; (8004468 <get_Straj+0x7ac>)
 8004224:	ed93 6b00 	vldr	d6, [r3]
 8004228:	4b90      	ldr	r3, [pc, #576]	; (800446c <get_Straj+0x7b0>)
 800422a:	ed93 7b00 	vldr	d7, [r3]
 800422e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004232:	4b8b      	ldr	r3, [pc, #556]	; (8004460 <get_Straj+0x7a4>)
 8004234:	ed93 7b00 	vldr	d7, [r3]
 8004238:	ee26 7b07 	vmul.f64	d7, d6, d7
 800423c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004240:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004244:	4b8a      	ldr	r3, [pc, #552]	; (8004470 <get_Straj+0x7b4>)
 8004246:	ed93 7b00 	vldr	d7, [r3]
 800424a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800424e:	4b84      	ldr	r3, [pc, #528]	; (8004460 <get_Straj+0x7a4>)
 8004250:	ed93 5b00 	vldr	d5, [r3]
 8004254:	ed97 7b06 	vldr	d7, [r7, #24]
 8004258:	ee35 5b47 	vsub.f64	d5, d5, d7
 800425c:	4b82      	ldr	r3, [pc, #520]	; (8004468 <get_Straj+0x7ac>)
 800425e:	ed93 7b00 	vldr	d7, [r3]
 8004262:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004266:	ee36 8b47 	vsub.f64	d8, d6, d7
 800426a:	4b7d      	ldr	r3, [pc, #500]	; (8004460 <get_Straj+0x7a4>)
 800426c:	ed93 6b00 	vldr	d6, [r3]
 8004270:	ed97 7b06 	vldr	d7, [r7, #24]
 8004274:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004278:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800427c:	eeb0 0b47 	vmov.f64	d0, d7
 8004280:	f00c fab2 	bl	80107e8 <pow>
 8004284:	eeb0 6b40 	vmov.f64	d6, d0
 8004288:	4b7a      	ldr	r3, [pc, #488]	; (8004474 <get_Straj+0x7b8>)
 800428a:	ed93 7b00 	vldr	d7, [r3]
 800428e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004292:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004296:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800429a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800429e:	4b76      	ldr	r3, [pc, #472]	; (8004478 <get_Straj+0x7bc>)
 80042a0:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax+jmin*pow(Ta-t,2)/2;
 80042a4:	4b6e      	ldr	r3, [pc, #440]	; (8004460 <get_Straj+0x7a4>)
 80042a6:	ed93 6b00 	vldr	d6, [r3]
 80042aa:	ed97 7b06 	vldr	d7, [r7, #24]
 80042ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80042b2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80042b6:	eeb0 0b47 	vmov.f64	d0, d7
 80042ba:	f00c fa95 	bl	80107e8 <pow>
 80042be:	eeb0 6b40 	vmov.f64	d6, d0
 80042c2:	4b6c      	ldr	r3, [pc, #432]	; (8004474 <get_Straj+0x7b8>)
 80042c4:	ed93 7b00 	vldr	d7, [r3]
 80042c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80042cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80042d0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80042d4:	4b69      	ldr	r3, [pc, #420]	; (800447c <get_Straj+0x7c0>)
 80042d6:	ed93 7b00 	vldr	d7, [r3]
 80042da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80042de:	4b68      	ldr	r3, [pc, #416]	; (8004480 <get_Straj+0x7c4>)
 80042e0:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmin*(Ta-t);
 80042e4:	4b63      	ldr	r3, [pc, #396]	; (8004474 <get_Straj+0x7b8>)
 80042e6:	ed93 7b00 	vldr	d7, [r3]
 80042ea:	eeb1 6b47 	vneg.f64	d6, d7
 80042ee:	4b5c      	ldr	r3, [pc, #368]	; (8004460 <get_Straj+0x7a4>)
 80042f0:	ed93 5b00 	vldr	d5, [r3]
 80042f4:	ed97 7b06 	vldr	d7, [r7, #24]
 80042f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80042fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004300:	4b60      	ldr	r3, [pc, #384]	; (8004484 <get_Straj+0x7c8>)
 8004302:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmin;
 8004306:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <get_Straj+0x7b8>)
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	495e      	ldr	r1, [pc, #376]	; (8004488 <get_Straj+0x7cc>)
 800430e:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004312:	4b5e      	ldr	r3, [pc, #376]	; (800448c <get_Straj+0x7d0>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8369 	beq.w	80049ee <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800431c:	4b56      	ldr	r3, [pc, #344]	; (8004478 <get_Straj+0x7bc>)
 800431e:	ed93 7b00 	vldr	d7, [r3]
 8004322:	eeb1 7b47 	vneg.f64	d7, d7
 8004326:	4b54      	ldr	r3, [pc, #336]	; (8004478 <get_Straj+0x7bc>)
 8004328:	ed83 7b00 	vstr	d7, [r3]
 800432c:	4b54      	ldr	r3, [pc, #336]	; (8004480 <get_Straj+0x7c4>)
 800432e:	ed93 7b00 	vldr	d7, [r3]
 8004332:	eeb1 7b47 	vneg.f64	d7, d7
 8004336:	4b52      	ldr	r3, [pc, #328]	; (8004480 <get_Straj+0x7c4>)
 8004338:	ed83 7b00 	vstr	d7, [r3]
 800433c:	4b51      	ldr	r3, [pc, #324]	; (8004484 <get_Straj+0x7c8>)
 800433e:	ed93 7b00 	vldr	d7, [r3]
 8004342:	eeb1 7b47 	vneg.f64	d7, d7
 8004346:	4b4f      	ldr	r3, [pc, #316]	; (8004484 <get_Straj+0x7c8>)
 8004348:	ed83 7b00 	vstr	d7, [r3]
 800434c:	4b4e      	ldr	r3, [pc, #312]	; (8004488 <get_Straj+0x7cc>)
 800434e:	ed93 7b00 	vldr	d7, [r3]
 8004352:	eeb1 7b47 	vneg.f64	d7, d7
 8004356:	4b4c      	ldr	r3, [pc, #304]	; (8004488 <get_Straj+0x7cc>)
 8004358:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 800435c:	4b4b      	ldr	r3, [pc, #300]	; (800448c <get_Straj+0x7d0>)
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004362:	e344      	b.n	80049ee <get_Straj+0xd32>
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8004364:	4b3e      	ldr	r3, [pc, #248]	; (8004460 <get_Straj+0x7a4>)
 8004366:	ed93 7b00 	vldr	d7, [r3]
 800436a:	ed97 6b06 	vldr	d6, [r7, #24]
 800436e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004376:	f340 808d 	ble.w	8004494 <get_Straj+0x7d8>
 800437a:	4b39      	ldr	r3, [pc, #228]	; (8004460 <get_Straj+0x7a4>)
 800437c:	ed93 6b00 	vldr	d6, [r3]
 8004380:	4b43      	ldr	r3, [pc, #268]	; (8004490 <get_Straj+0x7d4>)
 8004382:	ed93 7b00 	vldr	d7, [r3]
 8004386:	ee36 7b07 	vadd.f64	d7, d6, d7
 800438a:	ed97 6b06 	vldr	d6, [r7, #24]
 800438e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004396:	d87d      	bhi.n	8004494 <get_Straj+0x7d8>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8004398:	4b33      	ldr	r3, [pc, #204]	; (8004468 <get_Straj+0x7ac>)
 800439a:	ed93 6b00 	vldr	d6, [r3]
 800439e:	4b33      	ldr	r3, [pc, #204]	; (800446c <get_Straj+0x7b0>)
 80043a0:	ed93 7b00 	vldr	d7, [r3]
 80043a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80043a8:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <get_Straj+0x7a4>)
 80043aa:	ed93 7b00 	vldr	d7, [r3]
 80043ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 80043b2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80043b6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80043ba:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <get_Straj+0x7b4>)
 80043bc:	ed93 7b00 	vldr	d7, [r3]
 80043c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80043c4:	4b26      	ldr	r3, [pc, #152]	; (8004460 <get_Straj+0x7a4>)
 80043c6:	ed93 7b00 	vldr	d7, [r3]
 80043ca:	ed97 5b06 	vldr	d5, [r7, #24]
 80043ce:	ee35 5b47 	vsub.f64	d5, d5, d7
 80043d2:	4b25      	ldr	r3, [pc, #148]	; (8004468 <get_Straj+0x7ac>)
 80043d4:	ed93 7b00 	vldr	d7, [r3]
 80043d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80043dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <get_Straj+0x7bc>)
 80043e2:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax;
 80043e6:	4b25      	ldr	r3, [pc, #148]	; (800447c <get_Straj+0x7c0>)
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	4924      	ldr	r1, [pc, #144]	; (8004480 <get_Straj+0x7c4>)
 80043ee:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 80043f2:	4924      	ldr	r1, [pc, #144]	; (8004484 <get_Straj+0x7c8>)
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8004400:	4921      	ldr	r1, [pc, #132]	; (8004488 <get_Straj+0x7cc>)
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 800440e:	4b1f      	ldr	r3, [pc, #124]	; (800448c <get_Straj+0x7d0>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 82eb 	beq.w	80049ee <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004418:	4b17      	ldr	r3, [pc, #92]	; (8004478 <get_Straj+0x7bc>)
 800441a:	ed93 7b00 	vldr	d7, [r3]
 800441e:	eeb1 7b47 	vneg.f64	d7, d7
 8004422:	4b15      	ldr	r3, [pc, #84]	; (8004478 <get_Straj+0x7bc>)
 8004424:	ed83 7b00 	vstr	d7, [r3]
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <get_Straj+0x7c4>)
 800442a:	ed93 7b00 	vldr	d7, [r3]
 800442e:	eeb1 7b47 	vneg.f64	d7, d7
 8004432:	4b13      	ldr	r3, [pc, #76]	; (8004480 <get_Straj+0x7c4>)
 8004434:	ed83 7b00 	vstr	d7, [r3]
 8004438:	4b12      	ldr	r3, [pc, #72]	; (8004484 <get_Straj+0x7c8>)
 800443a:	ed93 7b00 	vldr	d7, [r3]
 800443e:	eeb1 7b47 	vneg.f64	d7, d7
 8004442:	4b10      	ldr	r3, [pc, #64]	; (8004484 <get_Straj+0x7c8>)
 8004444:	ed83 7b00 	vstr	d7, [r3]
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <get_Straj+0x7cc>)
 800444a:	ed93 7b00 	vldr	d7, [r3]
 800444e:	eeb1 7b47 	vneg.f64	d7, d7
 8004452:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <get_Straj+0x7cc>)
 8004454:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <get_Straj+0x7d0>)
 800445a:	2200      	movs	r2, #0
 800445c:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800445e:	e2c6      	b.n	80049ee <get_Straj+0xd32>
 8004460:	24000780 	.word	0x24000780
 8004464:	24000798 	.word	0x24000798
 8004468:	24000770 	.word	0x24000770
 800446c:	24000460 	.word	0x24000460
 8004470:	240007b8 	.word	0x240007b8
 8004474:	24000450 	.word	0x24000450
 8004478:	24000430 	.word	0x24000430
 800447c:	24000010 	.word	0x24000010
 8004480:	24000438 	.word	0x24000438
 8004484:	24000440 	.word	0x24000440
 8004488:	24000448 	.word	0x24000448
 800448c:	24000758 	.word	0x24000758
 8004490:	24000790 	.word	0x24000790
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 8004494:	4b6c      	ldr	r3, [pc, #432]	; (8004648 <get_Straj+0x98c>)
 8004496:	ed93 6b00 	vldr	d6, [r3]
 800449a:	4b6c      	ldr	r3, [pc, #432]	; (800464c <get_Straj+0x990>)
 800449c:	ed93 7b00 	vldr	d7, [r3]
 80044a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80044a4:	ed97 6b06 	vldr	d6, [r7, #24]
 80044a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80044ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b0:	f2c0 80e4 	blt.w	800467c <get_Straj+0x9c0>
 80044b4:	4b64      	ldr	r3, [pc, #400]	; (8004648 <get_Straj+0x98c>)
 80044b6:	ed93 6b00 	vldr	d6, [r3]
 80044ba:	4b64      	ldr	r3, [pc, #400]	; (800464c <get_Straj+0x990>)
 80044bc:	ed93 7b00 	vldr	d7, [r3]
 80044c0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80044c4:	4b62      	ldr	r3, [pc, #392]	; (8004650 <get_Straj+0x994>)
 80044c6:	ed93 7b00 	vldr	d7, [r3]
 80044ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80044ce:	ed97 6b06 	vldr	d6, [r7, #24]
 80044d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80044d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044da:	f200 80cf 	bhi.w	800467c <get_Straj+0x9c0>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 80044de:	4b5d      	ldr	r3, [pc, #372]	; (8004654 <get_Straj+0x998>)
 80044e0:	ed93 6b00 	vldr	d6, [r3]
 80044e4:	4b5c      	ldr	r3, [pc, #368]	; (8004658 <get_Straj+0x99c>)
 80044e6:	ed93 5b00 	vldr	d5, [r3]
 80044ea:	4b5c      	ldr	r3, [pc, #368]	; (800465c <get_Straj+0x9a0>)
 80044ec:	ed93 7b00 	vldr	d7, [r3]
 80044f0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80044f4:	4b55      	ldr	r3, [pc, #340]	; (800464c <get_Straj+0x990>)
 80044f6:	ed93 7b00 	vldr	d7, [r3]
 80044fa:	ee25 5b07 	vmul.f64	d5, d5, d7
 80044fe:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004502:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004506:	ee36 6b47 	vsub.f64	d6, d6, d7
 800450a:	4b4f      	ldr	r3, [pc, #316]	; (8004648 <get_Straj+0x98c>)
 800450c:	ed93 7b00 	vldr	d7, [r3]
 8004510:	ed97 5b06 	vldr	d5, [r7, #24]
 8004514:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004518:	4b4c      	ldr	r3, [pc, #304]	; (800464c <get_Straj+0x990>)
 800451a:	ed93 7b00 	vldr	d7, [r3]
 800451e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004522:	4b4d      	ldr	r3, [pc, #308]	; (8004658 <get_Straj+0x99c>)
 8004524:	ed93 7b00 	vldr	d7, [r3]
 8004528:	ee25 7b07 	vmul.f64	d7, d5, d7
 800452c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004530:	4b45      	ldr	r3, [pc, #276]	; (8004648 <get_Straj+0x98c>)
 8004532:	ed93 7b00 	vldr	d7, [r3]
 8004536:	ed97 6b06 	vldr	d6, [r7, #24]
 800453a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800453e:	4b43      	ldr	r3, [pc, #268]	; (800464c <get_Straj+0x990>)
 8004540:	ed93 7b00 	vldr	d7, [r3]
 8004544:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004548:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800454c:	eeb0 0b47 	vmov.f64	d0, d7
 8004550:	f00c f94a 	bl	80107e8 <pow>
 8004554:	eeb0 7b40 	vmov.f64	d7, d0
 8004558:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800455c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004560:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <get_Straj+0x9a4>)
 8004562:	ed93 7b00 	vldr	d7, [r3]
 8004566:	ee26 7b07 	vmul.f64	d7, d6, d7
 800456a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800456e:	4b3d      	ldr	r3, [pc, #244]	; (8004664 <get_Straj+0x9a8>)
 8004570:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 8004574:	4b38      	ldr	r3, [pc, #224]	; (8004658 <get_Straj+0x99c>)
 8004576:	ed93 8b00 	vldr	d8, [r3]
 800457a:	4b33      	ldr	r3, [pc, #204]	; (8004648 <get_Straj+0x98c>)
 800457c:	ed93 7b00 	vldr	d7, [r3]
 8004580:	ed97 6b06 	vldr	d6, [r7, #24]
 8004584:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004588:	4b30      	ldr	r3, [pc, #192]	; (800464c <get_Straj+0x990>)
 800458a:	ed93 7b00 	vldr	d7, [r3]
 800458e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004592:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004596:	eeb0 0b47 	vmov.f64	d0, d7
 800459a:	f00c f925 	bl	80107e8 <pow>
 800459e:	eeb0 7b40 	vmov.f64	d7, d0
 80045a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80045a6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80045aa:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <get_Straj+0x9a4>)
 80045ac:	ed93 7b00 	vldr	d7, [r3]
 80045b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80045b4:	ee38 7b47 	vsub.f64	d7, d8, d7
 80045b8:	4b2b      	ldr	r3, [pc, #172]	; (8004668 <get_Straj+0x9ac>)
 80045ba:	ed83 7b00 	vstr	d7, [r3]
        qdd=-jmax*(t-T+Td);
 80045be:	4b28      	ldr	r3, [pc, #160]	; (8004660 <get_Straj+0x9a4>)
 80045c0:	ed93 7b00 	vldr	d7, [r3]
 80045c4:	eeb1 6b47 	vneg.f64	d6, d7
 80045c8:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <get_Straj+0x98c>)
 80045ca:	ed93 7b00 	vldr	d7, [r3]
 80045ce:	ed97 5b06 	vldr	d5, [r7, #24]
 80045d2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80045d6:	4b1d      	ldr	r3, [pc, #116]	; (800464c <get_Straj+0x990>)
 80045d8:	ed93 7b00 	vldr	d7, [r3]
 80045dc:	ee35 7b07 	vadd.f64	d7, d5, d7
 80045e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80045e4:	4b21      	ldr	r3, [pc, #132]	; (800466c <get_Straj+0x9b0>)
 80045e6:	ed83 7b00 	vstr	d7, [r3]
        qddd=jmin;
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <get_Straj+0x9b4>)
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	4920      	ldr	r1, [pc, #128]	; (8004674 <get_Straj+0x9b8>)
 80045f2:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80045f6:	4b20      	ldr	r3, [pc, #128]	; (8004678 <get_Straj+0x9bc>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 81f7 	beq.w	80049ee <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004600:	4b18      	ldr	r3, [pc, #96]	; (8004664 <get_Straj+0x9a8>)
 8004602:	ed93 7b00 	vldr	d7, [r3]
 8004606:	eeb1 7b47 	vneg.f64	d7, d7
 800460a:	4b16      	ldr	r3, [pc, #88]	; (8004664 <get_Straj+0x9a8>)
 800460c:	ed83 7b00 	vstr	d7, [r3]
 8004610:	4b15      	ldr	r3, [pc, #84]	; (8004668 <get_Straj+0x9ac>)
 8004612:	ed93 7b00 	vldr	d7, [r3]
 8004616:	eeb1 7b47 	vneg.f64	d7, d7
 800461a:	4b13      	ldr	r3, [pc, #76]	; (8004668 <get_Straj+0x9ac>)
 800461c:	ed83 7b00 	vstr	d7, [r3]
 8004620:	4b12      	ldr	r3, [pc, #72]	; (800466c <get_Straj+0x9b0>)
 8004622:	ed93 7b00 	vldr	d7, [r3]
 8004626:	eeb1 7b47 	vneg.f64	d7, d7
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <get_Straj+0x9b0>)
 800462c:	ed83 7b00 	vstr	d7, [r3]
 8004630:	4b10      	ldr	r3, [pc, #64]	; (8004674 <get_Straj+0x9b8>)
 8004632:	ed93 7b00 	vldr	d7, [r3]
 8004636:	eeb1 7b47 	vneg.f64	d7, d7
 800463a:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <get_Straj+0x9b8>)
 800463c:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004640:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <get_Straj+0x9bc>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004646:	e1d2      	b.n	80049ee <get_Straj+0xd32>
 8004648:	24000778 	.word	0x24000778
 800464c:	24000788 	.word	0x24000788
 8004650:	240007a0 	.word	0x240007a0
 8004654:	240007c0 	.word	0x240007c0
 8004658:	24000770 	.word	0x24000770
 800465c:	24000468 	.word	0x24000468
 8004660:	24000008 	.word	0x24000008
 8004664:	24000430 	.word	0x24000430
 8004668:	24000438 	.word	0x24000438
 800466c:	24000440 	.word	0x24000440
 8004670:	24000450 	.word	0x24000450
 8004674:	24000448 	.word	0x24000448
 8004678:	24000758 	.word	0x24000758
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 800467c:	4b7b      	ldr	r3, [pc, #492]	; (800486c <get_Straj+0xbb0>)
 800467e:	ed93 6b00 	vldr	d6, [r3]
 8004682:	4b7b      	ldr	r3, [pc, #492]	; (8004870 <get_Straj+0xbb4>)
 8004684:	ed93 7b00 	vldr	d7, [r3]
 8004688:	ee36 6b47 	vsub.f64	d6, d6, d7
 800468c:	4b79      	ldr	r3, [pc, #484]	; (8004874 <get_Straj+0xbb8>)
 800468e:	ed93 7b00 	vldr	d7, [r3]
 8004692:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004696:	ed97 6b06 	vldr	d6, [r7, #24]
 800469a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800469e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a2:	f340 80fd 	ble.w	80048a0 <get_Straj+0xbe4>
 80046a6:	4b71      	ldr	r3, [pc, #452]	; (800486c <get_Straj+0xbb0>)
 80046a8:	ed93 6b00 	vldr	d6, [r3]
 80046ac:	4b71      	ldr	r3, [pc, #452]	; (8004874 <get_Straj+0xbb8>)
 80046ae:	ed93 7b00 	vldr	d7, [r3]
 80046b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80046b6:	ed97 6b06 	vldr	d6, [r7, #24]
 80046ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80046be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c2:	f200 80ed 	bhi.w	80048a0 <get_Straj+0xbe4>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 80046c6:	4b6c      	ldr	r3, [pc, #432]	; (8004878 <get_Straj+0xbbc>)
 80046c8:	ed93 6b00 	vldr	d6, [r3]
 80046cc:	4b6b      	ldr	r3, [pc, #428]	; (800487c <get_Straj+0xbc0>)
 80046ce:	ed93 5b00 	vldr	d5, [r3]
 80046d2:	4b6b      	ldr	r3, [pc, #428]	; (8004880 <get_Straj+0xbc4>)
 80046d4:	ed93 7b00 	vldr	d7, [r3]
 80046d8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80046dc:	4b64      	ldr	r3, [pc, #400]	; (8004870 <get_Straj+0xbb4>)
 80046de:	ed93 7b00 	vldr	d7, [r3]
 80046e2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80046e6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80046ea:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80046ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80046f2:	4b5e      	ldr	r3, [pc, #376]	; (800486c <get_Straj+0xbb0>)
 80046f4:	ed93 7b00 	vldr	d7, [r3]
 80046f8:	ed97 5b06 	vldr	d5, [r7, #24]
 80046fc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004700:	4b5b      	ldr	r3, [pc, #364]	; (8004870 <get_Straj+0xbb4>)
 8004702:	ed93 7b00 	vldr	d7, [r3]
 8004706:	ee35 5b07 	vadd.f64	d5, d5, d7
 800470a:	4b5c      	ldr	r3, [pc, #368]	; (800487c <get_Straj+0xbc0>)
 800470c:	ed93 7b00 	vldr	d7, [r3]
 8004710:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004714:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004718:	4b5a      	ldr	r3, [pc, #360]	; (8004884 <get_Straj+0xbc8>)
 800471a:	ed93 7b00 	vldr	d7, [r3]
 800471e:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004722:	ee87 9b06 	vdiv.f64	d9, d7, d6
 8004726:	4b51      	ldr	r3, [pc, #324]	; (800486c <get_Straj+0xbb0>)
 8004728:	ed93 7b00 	vldr	d7, [r3]
 800472c:	ed97 6b06 	vldr	d6, [r7, #24]
 8004730:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004734:	4b4e      	ldr	r3, [pc, #312]	; (8004870 <get_Straj+0xbb4>)
 8004736:	ed93 7b00 	vldr	d7, [r3]
 800473a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800473e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004742:	eeb0 0b47 	vmov.f64	d0, d7
 8004746:	f00c f84f 	bl	80107e8 <pow>
 800474a:	eeb0 7b40 	vmov.f64	d7, d0
 800474e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004752:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004756:	4b47      	ldr	r3, [pc, #284]	; (8004874 <get_Straj+0xbb8>)
 8004758:	ed93 7b00 	vldr	d7, [r3]
 800475c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8004760:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004764:	4b41      	ldr	r3, [pc, #260]	; (800486c <get_Straj+0xbb0>)
 8004766:	ed93 7b00 	vldr	d7, [r3]
 800476a:	ed97 4b06 	vldr	d4, [r7, #24]
 800476e:	ee34 4b47 	vsub.f64	d4, d4, d7
 8004772:	4b3f      	ldr	r3, [pc, #252]	; (8004870 <get_Straj+0xbb4>)
 8004774:	ed93 7b00 	vldr	d7, [r3]
 8004778:	ee34 7b07 	vadd.f64	d7, d4, d7
 800477c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004780:	ee36 ab47 	vsub.f64	d10, d6, d7
 8004784:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <get_Straj+0xbb8>)
 8004786:	ed93 7b00 	vldr	d7, [r3]
 800478a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800478e:	eeb0 0b47 	vmov.f64	d0, d7
 8004792:	f00c f829 	bl	80107e8 <pow>
 8004796:	eeb0 7b40 	vmov.f64	d7, d0
 800479a:	ee3a 7b07 	vadd.f64	d7, d10, d7
 800479e:	ee29 7b07 	vmul.f64	d7, d9, d7
 80047a2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80047a6:	4b38      	ldr	r3, [pc, #224]	; (8004888 <get_Straj+0xbcc>)
 80047a8:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 80047ac:	4b2f      	ldr	r3, [pc, #188]	; (800486c <get_Straj+0xbb0>)
 80047ae:	ed93 7b00 	vldr	d7, [r3]
 80047b2:	ed97 6b06 	vldr	d6, [r7, #24]
 80047b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80047ba:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <get_Straj+0xbb4>)
 80047bc:	ed93 7b00 	vldr	d7, [r3]
 80047c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80047c4:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <get_Straj+0xbb8>)
 80047c6:	ed93 5b00 	vldr	d5, [r3]
 80047ca:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80047ce:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80047d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80047d6:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <get_Straj+0xbc8>)
 80047d8:	ed93 7b00 	vldr	d7, [r3]
 80047dc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80047e0:	4b26      	ldr	r3, [pc, #152]	; (800487c <get_Straj+0xbc0>)
 80047e2:	ed93 7b00 	vldr	d7, [r3]
 80047e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047ea:	4b28      	ldr	r3, [pc, #160]	; (800488c <get_Straj+0xbd0>)
 80047ec:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*Tj2;
 80047f0:	4b27      	ldr	r3, [pc, #156]	; (8004890 <get_Straj+0xbd4>)
 80047f2:	ed93 7b00 	vldr	d7, [r3]
 80047f6:	eeb1 6b47 	vneg.f64	d6, d7
 80047fa:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <get_Straj+0xbb8>)
 80047fc:	ed93 7b00 	vldr	d7, [r3]
 8004800:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004804:	4b23      	ldr	r3, [pc, #140]	; (8004894 <get_Straj+0xbd8>)
 8004806:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 800480a:	4923      	ldr	r1, [pc, #140]	; (8004898 <get_Straj+0xbdc>)
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004818:	4b20      	ldr	r3, [pc, #128]	; (800489c <get_Straj+0xbe0>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80e6 	beq.w	80049ee <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004822:	4b19      	ldr	r3, [pc, #100]	; (8004888 <get_Straj+0xbcc>)
 8004824:	ed93 7b00 	vldr	d7, [r3]
 8004828:	eeb1 7b47 	vneg.f64	d7, d7
 800482c:	4b16      	ldr	r3, [pc, #88]	; (8004888 <get_Straj+0xbcc>)
 800482e:	ed83 7b00 	vstr	d7, [r3]
 8004832:	4b16      	ldr	r3, [pc, #88]	; (800488c <get_Straj+0xbd0>)
 8004834:	ed93 7b00 	vldr	d7, [r3]
 8004838:	eeb1 7b47 	vneg.f64	d7, d7
 800483c:	4b13      	ldr	r3, [pc, #76]	; (800488c <get_Straj+0xbd0>)
 800483e:	ed83 7b00 	vstr	d7, [r3]
 8004842:	4b14      	ldr	r3, [pc, #80]	; (8004894 <get_Straj+0xbd8>)
 8004844:	ed93 7b00 	vldr	d7, [r3]
 8004848:	eeb1 7b47 	vneg.f64	d7, d7
 800484c:	4b11      	ldr	r3, [pc, #68]	; (8004894 <get_Straj+0xbd8>)
 800484e:	ed83 7b00 	vstr	d7, [r3]
 8004852:	4b11      	ldr	r3, [pc, #68]	; (8004898 <get_Straj+0xbdc>)
 8004854:	ed93 7b00 	vldr	d7, [r3]
 8004858:	eeb1 7b47 	vneg.f64	d7, d7
 800485c:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <get_Straj+0xbdc>)
 800485e:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004862:	4b0e      	ldr	r3, [pc, #56]	; (800489c <get_Straj+0xbe0>)
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004868:	e0c1      	b.n	80049ee <get_Straj+0xd32>
 800486a:	bf00      	nop
 800486c:	24000778 	.word	0x24000778
 8004870:	24000788 	.word	0x24000788
 8004874:	240007a0 	.word	0x240007a0
 8004878:	240007c0 	.word	0x240007c0
 800487c:	24000770 	.word	0x24000770
 8004880:	24000468 	.word	0x24000468
 8004884:	24000768 	.word	0x24000768
 8004888:	24000430 	.word	0x24000430
 800488c:	24000438 	.word	0x24000438
 8004890:	24000008 	.word	0x24000008
 8004894:	24000440 	.word	0x24000440
 8004898:	24000448 	.word	0x24000448
 800489c:	24000758 	.word	0x24000758
        }

    } else if (t>T-Tj2 && t<=T){
 80048a0:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <get_Straj+0xd4c>)
 80048a2:	ed93 6b00 	vldr	d6, [r3]
 80048a6:	4b59      	ldr	r3, [pc, #356]	; (8004a0c <get_Straj+0xd50>)
 80048a8:	ed93 7b00 	vldr	d7, [r3]
 80048ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80048b0:	ed97 6b06 	vldr	d6, [r7, #24]
 80048b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80048b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048bc:	f340 8097 	ble.w	80049ee <get_Straj+0xd32>
 80048c0:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <get_Straj+0xd4c>)
 80048c2:	ed93 7b00 	vldr	d7, [r3]
 80048c6:	ed97 6b06 	vldr	d6, [r7, #24]
 80048ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80048ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d2:	f200 808c 	bhi.w	80049ee <get_Straj+0xd32>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 80048d6:	4b4e      	ldr	r3, [pc, #312]	; (8004a10 <get_Straj+0xd54>)
 80048d8:	ed93 6b00 	vldr	d6, [r3]
 80048dc:	4b4a      	ldr	r3, [pc, #296]	; (8004a08 <get_Straj+0xd4c>)
 80048de:	ed93 5b00 	vldr	d5, [r3]
 80048e2:	ed97 7b06 	vldr	d7, [r7, #24]
 80048e6:	ee35 5b47 	vsub.f64	d5, d5, d7
 80048ea:	4b4a      	ldr	r3, [pc, #296]	; (8004a14 <get_Straj+0xd58>)
 80048ec:	ed93 7b00 	vldr	d7, [r3]
 80048f0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80048f4:	ee36 8b47 	vsub.f64	d8, d6, d7
 80048f8:	4b43      	ldr	r3, [pc, #268]	; (8004a08 <get_Straj+0xd4c>)
 80048fa:	ed93 6b00 	vldr	d6, [r3]
 80048fe:	ed97 7b06 	vldr	d7, [r7, #24]
 8004902:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004906:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800490a:	eeb0 0b47 	vmov.f64	d0, d7
 800490e:	f00b ff6b 	bl	80107e8 <pow>
 8004912:	eeb0 7b40 	vmov.f64	d7, d0
 8004916:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800491a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800491e:	4b3e      	ldr	r3, [pc, #248]	; (8004a18 <get_Straj+0xd5c>)
 8004920:	ed93 7b00 	vldr	d7, [r3]
 8004924:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004928:	ee38 7b47 	vsub.f64	d7, d8, d7
 800492c:	4b3b      	ldr	r3, [pc, #236]	; (8004a1c <get_Straj+0xd60>)
 800492e:	ed83 7b00 	vstr	d7, [r3]
        qd = vf+jmax*(pow(T-t,2))/2;
 8004932:	4b35      	ldr	r3, [pc, #212]	; (8004a08 <get_Straj+0xd4c>)
 8004934:	ed93 6b00 	vldr	d6, [r3]
 8004938:	ed97 7b06 	vldr	d7, [r7, #24]
 800493c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004940:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004944:	eeb0 0b47 	vmov.f64	d0, d7
 8004948:	f00b ff4e 	bl	80107e8 <pow>
 800494c:	eeb0 6b40 	vmov.f64	d6, d0
 8004950:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <get_Straj+0xd5c>)
 8004952:	ed93 7b00 	vldr	d7, [r3]
 8004956:	ee26 7b07 	vmul.f64	d7, d6, d7
 800495a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800495e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004962:	4b2c      	ldr	r3, [pc, #176]	; (8004a14 <get_Straj+0xd58>)
 8004964:	ed93 7b00 	vldr	d7, [r3]
 8004968:	ee36 7b07 	vadd.f64	d7, d6, d7
 800496c:	4b2c      	ldr	r3, [pc, #176]	; (8004a20 <get_Straj+0xd64>)
 800496e:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*(T-t);
 8004972:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <get_Straj+0xd5c>)
 8004974:	ed93 7b00 	vldr	d7, [r3]
 8004978:	eeb1 6b47 	vneg.f64	d6, d7
 800497c:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <get_Straj+0xd4c>)
 800497e:	ed93 5b00 	vldr	d5, [r3]
 8004982:	ed97 7b06 	vldr	d7, [r7, #24]
 8004986:	ee35 7b47 	vsub.f64	d7, d5, d7
 800498a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800498e:	4b25      	ldr	r3, [pc, #148]	; (8004a24 <get_Straj+0xd68>)
 8004990:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 8004994:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <get_Straj+0xd5c>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	4923      	ldr	r1, [pc, #140]	; (8004a28 <get_Straj+0xd6c>)
 800499c:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80049a0:	4b22      	ldr	r3, [pc, #136]	; (8004a2c <get_Straj+0xd70>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d022      	beq.n	80049ee <get_Straj+0xd32>
            //printf("inv tramo7\n");
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80049a8:	4b1c      	ldr	r3, [pc, #112]	; (8004a1c <get_Straj+0xd60>)
 80049aa:	ed93 7b00 	vldr	d7, [r3]
 80049ae:	eeb1 7b47 	vneg.f64	d7, d7
 80049b2:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <get_Straj+0xd60>)
 80049b4:	ed83 7b00 	vstr	d7, [r3]
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <get_Straj+0xd64>)
 80049ba:	ed93 7b00 	vldr	d7, [r3]
 80049be:	eeb1 7b47 	vneg.f64	d7, d7
 80049c2:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <get_Straj+0xd64>)
 80049c4:	ed83 7b00 	vstr	d7, [r3]
 80049c8:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <get_Straj+0xd68>)
 80049ca:	ed93 7b00 	vldr	d7, [r3]
 80049ce:	eeb1 7b47 	vneg.f64	d7, d7
 80049d2:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <get_Straj+0xd68>)
 80049d4:	ed83 7b00 	vstr	d7, [r3]
 80049d8:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <get_Straj+0xd6c>)
 80049da:	ed93 7b00 	vldr	d7, [r3]
 80049de:	eeb1 7b47 	vneg.f64	d7, d7
 80049e2:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <get_Straj+0xd6c>)
 80049e4:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <get_Straj+0xd70>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
        }
    }


    return qd;
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <get_Straj+0xd64>)
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80049f8:	eeb0 0b47 	vmov.f64	d0, d7
 80049fc:	3720      	adds	r7, #32
 80049fe:	46bd      	mov	sp, r7
 8004a00:	ecbd 8b06 	vpop	{d8-d10}
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	24000778 	.word	0x24000778
 8004a0c:	240007a0 	.word	0x240007a0
 8004a10:	240007c0 	.word	0x240007c0
 8004a14:	24000468 	.word	0x24000468
 8004a18:	24000008 	.word	0x24000008
 8004a1c:	24000430 	.word	0x24000430
 8004a20:	24000438 	.word	0x24000438
 8004a24:	24000440 	.word	0x24000440
 8004a28:	24000448 	.word	0x24000448
 8004a2c:	24000758 	.word	0x24000758

08004a30 <update_ScurveTraj>:


double*update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax){
 8004a30:	b580      	push	{r7, lr}
 8004a32:	ed2d 8b04 	vpush	{d8-d9}
 8004a36:	b092      	sub	sp, #72	; 0x48
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8004a3e:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8004a42:	ed87 2b08 	vstr	d2, [r7, #32]
 8004a46:	ed87 3b06 	vstr	d3, [r7, #24]
 8004a4a:	ed87 4b04 	vstr	d4, [r7, #16]
 8004a4e:	ed87 5b02 	vstr	d5, [r7, #8]
 8004a52:	ed87 6b00 	vstr	d6, [r7]


	int nbSegment = 7; //Number of profil segments
 8004a56:	2307      	movs	r3, #7
 8004a58:	647b      	str	r3, [r7, #68]	; 0x44
	double* params = (double*)malloc(nbSegment * sizeof(double));
 8004a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f009 f816 	bl	800da90 <malloc>
 8004a64:	4603      	mov	r3, r0
 8004a66:	643b      	str	r3, [r7, #64]	; 0x40

	jmin = -jmax;
 8004a68:	ed97 7b00 	vldr	d7, [r7]
 8004a6c:	eeb1 7b47 	vneg.f64	d7, d7
 8004a70:	4b9e      	ldr	r3, [pc, #632]	; (8004cec <update_ScurveTraj+0x2bc>)
 8004a72:	ed83 7b00 	vstr	d7, [r3]
	amin = -amax;
 8004a76:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a7a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a7e:	4b9c      	ldr	r3, [pc, #624]	; (8004cf0 <update_ScurveTraj+0x2c0>)
 8004a80:	ed83 7b00 	vstr	d7, [r3]
	vmin = -vmax;
 8004a84:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a88:	eeb1 7b47 	vneg.f64	d7, d7
 8004a8c:	4b99      	ldr	r3, [pc, #612]	; (8004cf4 <update_ScurveTraj+0x2c4>)
 8004a8e:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 8004a92:	4999      	ldr	r1, [pc, #612]	; (8004cf8 <update_ScurveTraj+0x2c8>)
 8004a94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a98:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8004a9c:	4997      	ldr	r1, [pc, #604]	; (8004cfc <update_ScurveTraj+0x2cc>)
 8004a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aa2:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 8004aa6:	4b95      	ldr	r3, [pc, #596]	; (8004cfc <update_ScurveTraj+0x2cc>)
 8004aa8:	ed93 6b00 	vldr	d6, [r3]
 8004aac:	4b92      	ldr	r3, [pc, #584]	; (8004cf8 <update_ScurveTraj+0x2c8>)
 8004aae:	ed93 7b00 	vldr	d7, [r3]
 8004ab2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aba:	d548      	bpl.n	8004b4e <update_ScurveTraj+0x11e>

		flagInv = true;
 8004abc:	4b90      	ldr	r3, [pc, #576]	; (8004d00 <update_ScurveTraj+0x2d0>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]

		qi = -qi;
 8004ac2:	4b8d      	ldr	r3, [pc, #564]	; (8004cf8 <update_ScurveTraj+0x2c8>)
 8004ac4:	ed93 7b00 	vldr	d7, [r3]
 8004ac8:	eeb1 7b47 	vneg.f64	d7, d7
 8004acc:	4b8a      	ldr	r3, [pc, #552]	; (8004cf8 <update_ScurveTraj+0x2c8>)
 8004ace:	ed83 7b00 	vstr	d7, [r3]
		qf = -qf;
 8004ad2:	4b8a      	ldr	r3, [pc, #552]	; (8004cfc <update_ScurveTraj+0x2cc>)
 8004ad4:	ed93 7b00 	vldr	d7, [r3]
 8004ad8:	eeb1 7b47 	vneg.f64	d7, d7
 8004adc:	4b87      	ldr	r3, [pc, #540]	; (8004cfc <update_ScurveTraj+0x2cc>)
 8004ade:	ed83 7b00 	vstr	d7, [r3]
		vi = -vi;
 8004ae2:	ed97 7b08 	vldr	d7, [r7, #32]
 8004ae6:	eeb1 7b47 	vneg.f64	d7, d7
 8004aea:	ed87 7b08 	vstr	d7, [r7, #32]
		vf = -vf;
 8004aee:	ed97 7b06 	vldr	d7, [r7, #24]
 8004af2:	eeb1 7b47 	vneg.f64	d7, d7
 8004af6:	ed87 7b06 	vstr	d7, [r7, #24]

		vmax = -vmin;
 8004afa:	4b7e      	ldr	r3, [pc, #504]	; (8004cf4 <update_ScurveTraj+0x2c4>)
 8004afc:	ed93 7b00 	vldr	d7, [r3]
 8004b00:	eeb1 7b47 	vneg.f64	d7, d7
 8004b04:	ed87 7b04 	vstr	d7, [r7, #16]
		vmin = -vmax;
 8004b08:	ed97 7b04 	vldr	d7, [r7, #16]
 8004b0c:	eeb1 7b47 	vneg.f64	d7, d7
 8004b10:	4b78      	ldr	r3, [pc, #480]	; (8004cf4 <update_ScurveTraj+0x2c4>)
 8004b12:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 8004b16:	4b76      	ldr	r3, [pc, #472]	; (8004cf0 <update_ScurveTraj+0x2c0>)
 8004b18:	ed93 7b00 	vldr	d7, [r3]
 8004b1c:	eeb1 7b47 	vneg.f64	d7, d7
 8004b20:	ed87 7b02 	vstr	d7, [r7, #8]
		amin = -amax;
 8004b24:	ed97 7b02 	vldr	d7, [r7, #8]
 8004b28:	eeb1 7b47 	vneg.f64	d7, d7
 8004b2c:	4b70      	ldr	r3, [pc, #448]	; (8004cf0 <update_ScurveTraj+0x2c0>)
 8004b2e:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 8004b32:	4b6e      	ldr	r3, [pc, #440]	; (8004cec <update_ScurveTraj+0x2bc>)
 8004b34:	ed93 7b00 	vldr	d7, [r3]
 8004b38:	eeb1 7b47 	vneg.f64	d7, d7
 8004b3c:	ed87 7b00 	vstr	d7, [r7]
		jmin = -jmax;
 8004b40:	ed97 7b00 	vldr	d7, [r7]
 8004b44:	eeb1 7b47 	vneg.f64	d7, d7
 8004b48:	4b68      	ldr	r3, [pc, #416]	; (8004cec <update_ScurveTraj+0x2bc>)
 8004b4a:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 8004b4e:	ed97 6b06 	vldr	d6, [r7, #24]
 8004b52:	ed97 7b08 	vldr	d7, [r7, #32]
 8004b56:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b5a:	eeb0 6bc7 	vabs.f64	d6, d7
 8004b5e:	ed97 7b00 	vldr	d7, [r7]
 8004b62:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004b66:	eeb0 0b45 	vmov.f64	d0, d5
 8004b6a:	f00c f8bd 	bl	8010ce8 <sqrt>
 8004b6e:	eeb0 4b40 	vmov.f64	d4, d0
 8004b72:	ed97 5b02 	vldr	d5, [r7, #8]
 8004b76:	ed97 6b00 	vldr	d6, [r7]
 8004b7a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004b7e:	eeb4 4bc7 	vcmpe.f64	d4, d7
 8004b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b86:	d512      	bpl.n	8004bae <update_ScurveTraj+0x17e>
 8004b88:	ed97 6b06 	vldr	d6, [r7, #24]
 8004b8c:	ed97 7b08 	vldr	d7, [r7, #32]
 8004b90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b94:	eeb0 6bc7 	vabs.f64	d6, d7
 8004b98:	ed97 7b00 	vldr	d7, [r7]
 8004b9c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004ba0:	eeb0 0b45 	vmov.f64	d0, d5
 8004ba4:	f00c f8a0 	bl	8010ce8 <sqrt>
 8004ba8:	eeb0 7b40 	vmov.f64	d7, d0
 8004bac:	e005      	b.n	8004bba <update_ScurveTraj+0x18a>
 8004bae:	ed97 5b02 	vldr	d5, [r7, #8]
 8004bb2:	ed97 6b00 	vldr	d6, [r7]
 8004bb6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004bba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004bbe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c


	if (Tjaux<amax/jmax){
 8004bc2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004bc6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004bca:	ed97 4b02 	vldr	d4, [r7, #8]
 8004bce:	ed97 5b00 	vldr	d5, [r7]
 8004bd2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004bd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bde:	d400      	bmi.n	8004be2 <update_ScurveTraj+0x1b2>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 8004be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 8004be2:	ed97 6b04 	vldr	d6, [r7, #16]
 8004be6:	ed97 7b08 	vldr	d7, [r7, #32]
 8004bea:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004bee:	ed97 7b00 	vldr	d7, [r7]
 8004bf2:	ee26 8b07 	vmul.f64	d8, d6, d7
 8004bf6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004bfa:	ed97 0b02 	vldr	d0, [r7, #8]
 8004bfe:	f00b fdf3 	bl	80107e8 <pow>
 8004c02:	eeb0 7b40 	vmov.f64	d7, d0
 8004c06:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0e:	d51d      	bpl.n	8004c4c <update_ScurveTraj+0x21c>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 8004c10:	ed97 6b04 	vldr	d6, [r7, #16]
 8004c14:	ed97 7b08 	vldr	d7, [r7, #32]
 8004c18:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004c1c:	eeb0 6bc7 	vabs.f64	d6, d7
 8004c20:	ed97 7b00 	vldr	d7, [r7]
 8004c24:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004c28:	eeb0 0b45 	vmov.f64	d0, d5
 8004c2c:	f00c f85c 	bl	8010ce8 <sqrt>
 8004c30:	eeb0 7b40 	vmov.f64	d7, d0
 8004c34:	4b33      	ldr	r3, [pc, #204]	; (8004d04 <update_ScurveTraj+0x2d4>)
 8004c36:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 8004c3a:	4b32      	ldr	r3, [pc, #200]	; (8004d04 <update_ScurveTraj+0x2d4>)
 8004c3c:	ed93 7b00 	vldr	d7, [r3]
 8004c40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c44:	4b30      	ldr	r3, [pc, #192]	; (8004d08 <update_ScurveTraj+0x2d8>)
 8004c46:	ed83 7b00 	vstr	d7, [r3]
 8004c4a:	e01a      	b.n	8004c82 <update_ScurveTraj+0x252>
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 8004c4c:	ed97 5b02 	vldr	d5, [r7, #8]
 8004c50:	ed97 6b00 	vldr	d6, [r7]
 8004c54:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004c58:	4b2a      	ldr	r3, [pc, #168]	; (8004d04 <update_ScurveTraj+0x2d4>)
 8004c5a:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1+(vmax-vi)/amax;
 8004c5e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004c62:	ed97 7b08 	vldr	d7, [r7, #32]
 8004c66:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004c6a:	ed97 7b02 	vldr	d7, [r7, #8]
 8004c6e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004c72:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <update_ScurveTraj+0x2d4>)
 8004c74:	ed93 7b00 	vldr	d7, [r3]
 8004c78:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c7c:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <update_ScurveTraj+0x2d8>)
 8004c7e:	ed83 7b00 	vstr	d7, [r3]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 8004c82:	ed97 6b04 	vldr	d6, [r7, #16]
 8004c86:	ed97 7b06 	vldr	d7, [r7, #24]
 8004c8a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004c8e:	ed97 7b00 	vldr	d7, [r7]
 8004c92:	ee26 8b07 	vmul.f64	d8, d6, d7
 8004c96:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004c9a:	ed97 0b02 	vldr	d0, [r7, #8]
 8004c9e:	f00b fda3 	bl	80107e8 <pow>
 8004ca2:	eeb0 7b40 	vmov.f64	d7, d0
 8004ca6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cae:	d531      	bpl.n	8004d14 <update_ScurveTraj+0x2e4>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 8004cb0:	ed97 6b04 	vldr	d6, [r7, #16]
 8004cb4:	ed97 7b06 	vldr	d7, [r7, #24]
 8004cb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004cbc:	eeb0 6bc7 	vabs.f64	d6, d7
 8004cc0:	ed97 7b00 	vldr	d7, [r7]
 8004cc4:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004cc8:	eeb0 0b45 	vmov.f64	d0, d5
 8004ccc:	f00c f80c 	bl	8010ce8 <sqrt>
 8004cd0:	eeb0 7b40 	vmov.f64	d7, d0
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <update_ScurveTraj+0x2dc>)
 8004cd6:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 8004cda:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <update_ScurveTraj+0x2dc>)
 8004cdc:	ed93 7b00 	vldr	d7, [r3]
 8004ce0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <update_ScurveTraj+0x2e0>)
 8004ce6:	ed83 7b00 	vstr	d7, [r3]
 8004cea:	e02e      	b.n	8004d4a <update_ScurveTraj+0x31a>
 8004cec:	24000450 	.word	0x24000450
 8004cf0:	24000470 	.word	0x24000470
 8004cf4:	24000458 	.word	0x24000458
 8004cf8:	240007b8 	.word	0x240007b8
 8004cfc:	240007c0 	.word	0x240007c0
 8004d00:	24000758 	.word	0x24000758
 8004d04:	24000798 	.word	0x24000798
 8004d08:	24000780 	.word	0x24000780
 8004d0c:	240007a0 	.word	0x240007a0
 8004d10:	24000788 	.word	0x24000788
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 8004d14:	ed97 5b02 	vldr	d5, [r7, #8]
 8004d18:	ed97 6b00 	vldr	d6, [r7]
 8004d1c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004d20:	4b95      	ldr	r3, [pc, #596]	; (8004f78 <update_ScurveTraj+0x548>)
 8004d22:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2+(vmax-vf)/amax;
 8004d26:	ed97 6b04 	vldr	d6, [r7, #16]
 8004d2a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d2e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004d32:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d36:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004d3a:	4b8f      	ldr	r3, [pc, #572]	; (8004f78 <update_ScurveTraj+0x548>)
 8004d3c:	ed93 7b00 	vldr	d7, [r3]
 8004d40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d44:	4b8d      	ldr	r3, [pc, #564]	; (8004f7c <update_ScurveTraj+0x54c>)
 8004d46:	ed83 7b00 	vstr	d7, [r3]
	}


	Tv = (qf-qi)/vmax - Ta/2*(1+vi/vmax)-Td/2*(1+vf/vmax);
 8004d4a:	4b8d      	ldr	r3, [pc, #564]	; (8004f80 <update_ScurveTraj+0x550>)
 8004d4c:	ed93 6b00 	vldr	d6, [r3]
 8004d50:	4b8c      	ldr	r3, [pc, #560]	; (8004f84 <update_ScurveTraj+0x554>)
 8004d52:	ed93 7b00 	vldr	d7, [r3]
 8004d56:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004d5a:	ed97 7b04 	vldr	d7, [r7, #16]
 8004d5e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004d62:	4b89      	ldr	r3, [pc, #548]	; (8004f88 <update_ScurveTraj+0x558>)
 8004d64:	ed93 7b00 	vldr	d7, [r3]
 8004d68:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004d6c:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8004d70:	ed97 3b08 	vldr	d3, [r7, #32]
 8004d74:	ed97 4b04 	vldr	d4, [r7, #16]
 8004d78:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004d7c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8004d80:	ee37 7b04 	vadd.f64	d7, d7, d4
 8004d84:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d88:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d8c:	4b7b      	ldr	r3, [pc, #492]	; (8004f7c <update_ScurveTraj+0x54c>)
 8004d8e:	ed93 7b00 	vldr	d7, [r3]
 8004d92:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004d96:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8004d9a:	ed97 3b06 	vldr	d3, [r7, #24]
 8004d9e:	ed97 4b04 	vldr	d4, [r7, #16]
 8004da2:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004da6:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8004daa:	ee37 7b04 	vadd.f64	d7, d7, d4
 8004dae:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004db2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004db6:	4b75      	ldr	r3, [pc, #468]	; (8004f8c <update_ScurveTraj+0x55c>)
 8004db8:	ed83 7b00 	vstr	d7, [r3]

	if (Tv>0){
 8004dbc:	4b73      	ldr	r3, [pc, #460]	; (8004f8c <update_ScurveTraj+0x55c>)
 8004dbe:	ed93 7b00 	vldr	d7, [r3]
 8004dc2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dca:	f300 82d5 	bgt.w	8005378 <update_ScurveTraj+0x948>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 8004dce:	ed97 5b02 	vldr	d5, [r7, #8]
 8004dd2:	ed97 6b00 	vldr	d6, [r7]
 8004dd6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004dda:	4b6d      	ldr	r3, [pc, #436]	; (8004f90 <update_ScurveTraj+0x560>)
 8004ddc:	ed83 7b00 	vstr	d7, [r3]
		Tj2=Tj1;
 8004de0:	4b6b      	ldr	r3, [pc, #428]	; (8004f90 <update_ScurveTraj+0x560>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	4964      	ldr	r1, [pc, #400]	; (8004f78 <update_ScurveTraj+0x548>)
 8004de8:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 8004dec:	4b68      	ldr	r3, [pc, #416]	; (8004f90 <update_ScurveTraj+0x560>)
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	4968      	ldr	r1, [pc, #416]	; (8004f94 <update_ScurveTraj+0x564>)
 8004df4:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8004df8:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8004dfc:	ed97 0b02 	vldr	d0, [r7, #8]
 8004e00:	f00b fcf2 	bl	80107e8 <pow>
 8004e04:	eeb0 9b40 	vmov.f64	d9, d0
 8004e08:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e0c:	ed97 0b00 	vldr	d0, [r7]
 8004e10:	f00b fcea 	bl	80107e8 <pow>
 8004e14:	eeb0 7b40 	vmov.f64	d7, d0
 8004e18:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8004e1c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e20:	ed97 0b08 	vldr	d0, [r7, #32]
 8004e24:	f00b fce0 	bl	80107e8 <pow>
 8004e28:	eeb0 9b40 	vmov.f64	d9, d0
 8004e2c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e30:	ed97 0b06 	vldr	d0, [r7, #24]
 8004e34:	f00b fcd8 	bl	80107e8 <pow>
 8004e38:	eeb0 7b40 	vmov.f64	d7, d0
 8004e3c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8004e40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e44:	ee38 6b07 	vadd.f64	d6, d8, d7
 8004e48:	4b4d      	ldr	r3, [pc, #308]	; (8004f80 <update_ScurveTraj+0x550>)
 8004e4a:	ed93 5b00 	vldr	d5, [r3]
 8004e4e:	4b4d      	ldr	r3, [pc, #308]	; (8004f84 <update_ScurveTraj+0x554>)
 8004e50:	ed93 7b00 	vldr	d7, [r3]
 8004e54:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004e58:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8004e5c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004e60:	ed97 3b02 	vldr	d3, [r7, #8]
 8004e64:	ed97 4b00 	vldr	d4, [r7]
 8004e68:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004e6c:	ee37 4b07 	vadd.f64	d4, d7, d7
 8004e70:	ed97 3b08 	vldr	d3, [r7, #32]
 8004e74:	ed97 7b06 	vldr	d7, [r7, #24]
 8004e78:	ee33 7b07 	vadd.f64	d7, d3, d7
 8004e7c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8004e80:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004e84:	ed97 7b02 	vldr	d7, [r7, #8]
 8004e88:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004e8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e90:	4b41      	ldr	r3, [pc, #260]	; (8004f98 <update_ScurveTraj+0x568>)
 8004e92:	ed83 7b00 	vstr	d7, [r3]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8004e96:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e9a:	ed97 0b02 	vldr	d0, [r7, #8]
 8004e9e:	f00b fca3 	bl	80107e8 <pow>
 8004ea2:	eeb0 5b40 	vmov.f64	d5, d0
 8004ea6:	ed97 7b00 	vldr	d7, [r7]
 8004eaa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004eae:	ed97 7b08 	vldr	d7, [r7, #32]
 8004eb2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004eb6:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004eba:	4b37      	ldr	r3, [pc, #220]	; (8004f98 <update_ScurveTraj+0x568>)
 8004ebc:	ed93 7b00 	vldr	d7, [r3]
 8004ec0:	eeb0 0b47 	vmov.f64	d0, d7
 8004ec4:	f00b ff10 	bl	8010ce8 <sqrt>
 8004ec8:	eeb0 7b40 	vmov.f64	d7, d0
 8004ecc:	ee38 5b07 	vadd.f64	d5, d8, d7
 8004ed0:	ed97 7b02 	vldr	d7, [r7, #8]
 8004ed4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004ed8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004edc:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <update_ScurveTraj+0x558>)
 8004ede:	ed83 7b00 	vstr	d7, [r3]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8004ee2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004ee6:	ed97 0b02 	vldr	d0, [r7, #8]
 8004eea:	f00b fc7d 	bl	80107e8 <pow>
 8004eee:	eeb0 5b40 	vmov.f64	d5, d0
 8004ef2:	ed97 7b00 	vldr	d7, [r7]
 8004ef6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004efa:	ed97 7b06 	vldr	d7, [r7, #24]
 8004efe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f02:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004f06:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <update_ScurveTraj+0x568>)
 8004f08:	ed93 7b00 	vldr	d7, [r3]
 8004f0c:	eeb0 0b47 	vmov.f64	d0, d7
 8004f10:	f00b feea 	bl	8010ce8 <sqrt>
 8004f14:	eeb0 7b40 	vmov.f64	d7, d0
 8004f18:	ee38 5b07 	vadd.f64	d5, d8, d7
 8004f1c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004f20:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004f24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004f28:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <update_ScurveTraj+0x54c>)
 8004f2a:	ed83 7b00 	vstr	d7, [r3]
		Tv=0;
 8004f2e:	4917      	ldr	r1, [pc, #92]	; (8004f8c <update_ScurveTraj+0x55c>)
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 8004f3c:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <update_ScurveTraj+0x564>)
 8004f3e:	ed93 7b00 	vldr	d7, [r3]
 8004f42:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <update_ScurveTraj+0x558>)
 8004f48:	ed93 7b00 	vldr	d7, [r3]
 8004f4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f54:	f300 81e4 	bgt.w	8005320 <update_ScurveTraj+0x8f0>
 8004f58:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <update_ScurveTraj+0x564>)
 8004f5a:	ed93 7b00 	vldr	d7, [r3]
 8004f5e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <update_ScurveTraj+0x54c>)
 8004f64:	ed93 7b00 	vldr	d7, [r3]
 8004f68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f70:	f340 8202 	ble.w	8005378 <update_ScurveTraj+0x948>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 8004f74:	e1d4      	b.n	8005320 <update_ScurveTraj+0x8f0>
 8004f76:	bf00      	nop
 8004f78:	240007a0 	.word	0x240007a0
 8004f7c:	24000788 	.word	0x24000788
 8004f80:	240007c0 	.word	0x240007c0
 8004f84:	240007b8 	.word	0x240007b8
 8004f88:	24000780 	.word	0x24000780
 8004f8c:	24000790 	.word	0x24000790
 8004f90:	24000798 	.word	0x24000798
 8004f94:	240007a8 	.word	0x240007a8
 8004f98:	240007b0 	.word	0x240007b0

				amax=amax*0.99;
 8004f9c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004fa0:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 80052f8 <update_ScurveTraj+0x8c8>
 8004fa4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004fa8:	ed87 7b02 	vstr	d7, [r7, #8]
				Tj=amax/jmax;
 8004fac:	ed97 5b02 	vldr	d5, [r7, #8]
 8004fb0:	ed97 6b00 	vldr	d6, [r7]
 8004fb4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004fb8:	4bd1      	ldr	r3, [pc, #836]	; (8005300 <update_ScurveTraj+0x8d0>)
 8004fba:	ed83 7b00 	vstr	d7, [r3]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8004fbe:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8004fc2:	ed97 0b02 	vldr	d0, [r7, #8]
 8004fc6:	f00b fc0f 	bl	80107e8 <pow>
 8004fca:	eeb0 9b40 	vmov.f64	d9, d0
 8004fce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004fd2:	ed97 0b00 	vldr	d0, [r7]
 8004fd6:	f00b fc07 	bl	80107e8 <pow>
 8004fda:	eeb0 7b40 	vmov.f64	d7, d0
 8004fde:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8004fe2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004fe6:	ed97 0b08 	vldr	d0, [r7, #32]
 8004fea:	f00b fbfd 	bl	80107e8 <pow>
 8004fee:	eeb0 9b40 	vmov.f64	d9, d0
 8004ff2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004ff6:	ed97 0b06 	vldr	d0, [r7, #24]
 8004ffa:	f00b fbf5 	bl	80107e8 <pow>
 8004ffe:	eeb0 7b40 	vmov.f64	d7, d0
 8005002:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005006:	ee37 7b07 	vadd.f64	d7, d7, d7
 800500a:	ee38 6b07 	vadd.f64	d6, d8, d7
 800500e:	4bbd      	ldr	r3, [pc, #756]	; (8005304 <update_ScurveTraj+0x8d4>)
 8005010:	ed93 5b00 	vldr	d5, [r3]
 8005014:	4bbc      	ldr	r3, [pc, #752]	; (8005308 <update_ScurveTraj+0x8d8>)
 8005016:	ed93 7b00 	vldr	d7, [r3]
 800501a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800501e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8005022:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005026:	ed97 3b02 	vldr	d3, [r7, #8]
 800502a:	ed97 4b00 	vldr	d4, [r7]
 800502e:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005032:	ee37 4b07 	vadd.f64	d4, d7, d7
 8005036:	ed97 3b08 	vldr	d3, [r7, #32]
 800503a:	ed97 7b06 	vldr	d7, [r7, #24]
 800503e:	ee33 7b07 	vadd.f64	d7, d3, d7
 8005042:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005046:	ee35 5b47 	vsub.f64	d5, d5, d7
 800504a:	ed97 7b02 	vldr	d7, [r7, #8]
 800504e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005052:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005056:	4bad      	ldr	r3, [pc, #692]	; (800530c <update_ScurveTraj+0x8dc>)
 8005058:	ed83 7b00 	vstr	d7, [r3]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 800505c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005060:	ed97 0b02 	vldr	d0, [r7, #8]
 8005064:	f00b fbc0 	bl	80107e8 <pow>
 8005068:	eeb0 5b40 	vmov.f64	d5, d0
 800506c:	ed97 7b00 	vldr	d7, [r7]
 8005070:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005074:	ed97 7b08 	vldr	d7, [r7, #32]
 8005078:	ee37 7b07 	vadd.f64	d7, d7, d7
 800507c:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005080:	4ba2      	ldr	r3, [pc, #648]	; (800530c <update_ScurveTraj+0x8dc>)
 8005082:	ed93 7b00 	vldr	d7, [r3]
 8005086:	eeb0 0b47 	vmov.f64	d0, d7
 800508a:	f00b fe2d 	bl	8010ce8 <sqrt>
 800508e:	eeb0 7b40 	vmov.f64	d7, d0
 8005092:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005096:	ed97 7b02 	vldr	d7, [r7, #8]
 800509a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800509e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80050a2:	4b9b      	ldr	r3, [pc, #620]	; (8005310 <update_ScurveTraj+0x8e0>)
 80050a4:	ed83 7b00 	vstr	d7, [r3]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 80050a8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80050ac:	ed97 0b02 	vldr	d0, [r7, #8]
 80050b0:	f00b fb9a 	bl	80107e8 <pow>
 80050b4:	eeb0 5b40 	vmov.f64	d5, d0
 80050b8:	ed97 7b00 	vldr	d7, [r7]
 80050bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80050c0:	ed97 7b06 	vldr	d7, [r7, #24]
 80050c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80050c8:	ee36 8b47 	vsub.f64	d8, d6, d7
 80050cc:	4b8f      	ldr	r3, [pc, #572]	; (800530c <update_ScurveTraj+0x8dc>)
 80050ce:	ed93 7b00 	vldr	d7, [r3]
 80050d2:	eeb0 0b47 	vmov.f64	d0, d7
 80050d6:	f00b fe07 	bl	8010ce8 <sqrt>
 80050da:	eeb0 7b40 	vmov.f64	d7, d0
 80050de:	ee38 5b07 	vadd.f64	d5, d8, d7
 80050e2:	ed97 7b02 	vldr	d7, [r7, #8]
 80050e6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80050ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80050ee:	4b89      	ldr	r3, [pc, #548]	; (8005314 <update_ScurveTraj+0x8e4>)
 80050f0:	ed83 7b00 	vstr	d7, [r3]

				//print(f'{i}',amax)


				if (Ta<0){
 80050f4:	4b86      	ldr	r3, [pc, #536]	; (8005310 <update_ScurveTraj+0x8e0>)
 80050f6:	ed93 7b00 	vldr	d7, [r3]
 80050fa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80050fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005102:	d576      	bpl.n	80051f2 <update_ScurveTraj+0x7c2>
					Ta=0;
 8005104:	4982      	ldr	r1, [pc, #520]	; (8005310 <update_ScurveTraj+0x8e0>)
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 8005112:	4981      	ldr	r1, [pc, #516]	; (8005318 <update_ScurveTraj+0x8e8>)
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 8005120:	4b78      	ldr	r3, [pc, #480]	; (8005304 <update_ScurveTraj+0x8d4>)
 8005122:	ed93 6b00 	vldr	d6, [r3]
 8005126:	4b78      	ldr	r3, [pc, #480]	; (8005308 <update_ScurveTraj+0x8d8>)
 8005128:	ed93 7b00 	vldr	d7, [r3]
 800512c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005130:	ed97 6b06 	vldr	d6, [r7, #24]
 8005134:	ed97 7b08 	vldr	d7, [r7, #32]
 8005138:	ee36 6b07 	vadd.f64	d6, d6, d7
 800513c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005140:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005144:	4b73      	ldr	r3, [pc, #460]	; (8005314 <update_ScurveTraj+0x8e4>)
 8005146:	ed83 7b00 	vstr	d7, [r3]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 800514a:	4b6e      	ldr	r3, [pc, #440]	; (8005304 <update_ScurveTraj+0x8d4>)
 800514c:	ed93 6b00 	vldr	d6, [r3]
 8005150:	4b6d      	ldr	r3, [pc, #436]	; (8005308 <update_ScurveTraj+0x8d8>)
 8005152:	ed93 7b00 	vldr	d7, [r3]
 8005156:	ee36 6b47 	vsub.f64	d6, d6, d7
 800515a:	ed97 7b00 	vldr	d7, [r7]
 800515e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005162:	4b68      	ldr	r3, [pc, #416]	; (8005304 <update_ScurveTraj+0x8d4>)
 8005164:	ed93 6b00 	vldr	d6, [r3]
 8005168:	4b67      	ldr	r3, [pc, #412]	; (8005308 <update_ScurveTraj+0x8d8>)
 800516a:	ed93 7b00 	vldr	d7, [r3]
 800516e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005172:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005176:	eeb0 0b47 	vmov.f64	d0, d7
 800517a:	f00b fb35 	bl	80107e8 <pow>
 800517e:	eeb0 6b40 	vmov.f64	d6, d0
 8005182:	ed97 7b00 	vldr	d7, [r7]
 8005186:	ee26 9b07 	vmul.f64	d9, d6, d7
 800518a:	ed97 6b06 	vldr	d6, [r7, #24]
 800518e:	ed97 7b08 	vldr	d7, [r7, #32]
 8005192:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005196:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800519a:	eeb0 0b47 	vmov.f64	d0, d7
 800519e:	f00b fb23 	bl	80107e8 <pow>
 80051a2:	eeb0 5b40 	vmov.f64	d5, d0
 80051a6:	ed97 6b06 	vldr	d6, [r7, #24]
 80051aa:	ed97 7b08 	vldr	d7, [r7, #32]
 80051ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80051b2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80051b6:	ee39 6b07 	vadd.f64	d6, d9, d7
 80051ba:	ed97 7b00 	vldr	d7, [r7]
 80051be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051c2:	eeb0 0b47 	vmov.f64	d0, d7
 80051c6:	f00b fd8f 	bl	8010ce8 <sqrt>
 80051ca:	eeb0 7b40 	vmov.f64	d7, d0
 80051ce:	ee38 5b47 	vsub.f64	d5, d8, d7
 80051d2:	ed97 6b06 	vldr	d6, [r7, #24]
 80051d6:	ed97 7b08 	vldr	d7, [r7, #32]
 80051da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80051de:	ed97 7b00 	vldr	d7, [r7]
 80051e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80051e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80051ea:	4b4c      	ldr	r3, [pc, #304]	; (800531c <update_ScurveTraj+0x8ec>)
 80051ec:	ed83 7b00 	vstr	d7, [r3]
					break;
 80051f0:	e0c2      	b.n	8005378 <update_ScurveTraj+0x948>
				}
				if (Td<0){
 80051f2:	4b48      	ldr	r3, [pc, #288]	; (8005314 <update_ScurveTraj+0x8e4>)
 80051f4:	ed93 7b00 	vldr	d7, [r3]
 80051f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	d400      	bmi.n	8005204 <update_ScurveTraj+0x7d4>
 8005202:	e08d      	b.n	8005320 <update_ScurveTraj+0x8f0>
					Td=0;
 8005204:	4943      	ldr	r1, [pc, #268]	; (8005314 <update_ScurveTraj+0x8e4>)
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8005212:	4b3c      	ldr	r3, [pc, #240]	; (8005304 <update_ScurveTraj+0x8d4>)
 8005214:	ed93 6b00 	vldr	d6, [r3]
 8005218:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <update_ScurveTraj+0x8d8>)
 800521a:	ed93 7b00 	vldr	d7, [r3]
 800521e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005222:	ed97 6b06 	vldr	d6, [r7, #24]
 8005226:	ed97 7b08 	vldr	d7, [r7, #32]
 800522a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800522e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005232:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005236:	4b36      	ldr	r3, [pc, #216]	; (8005310 <update_ScurveTraj+0x8e0>)
 8005238:	ed83 7b00 	vstr	d7, [r3]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 800523c:	4b31      	ldr	r3, [pc, #196]	; (8005304 <update_ScurveTraj+0x8d4>)
 800523e:	ed93 6b00 	vldr	d6, [r3]
 8005242:	4b31      	ldr	r3, [pc, #196]	; (8005308 <update_ScurveTraj+0x8d8>)
 8005244:	ed93 7b00 	vldr	d7, [r3]
 8005248:	ee36 6b47 	vsub.f64	d6, d6, d7
 800524c:	ed97 7b00 	vldr	d7, [r7]
 8005250:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005254:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <update_ScurveTraj+0x8d4>)
 8005256:	ed93 6b00 	vldr	d6, [r3]
 800525a:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <update_ScurveTraj+0x8d8>)
 800525c:	ed93 7b00 	vldr	d7, [r3]
 8005260:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005264:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005268:	eeb0 0b47 	vmov.f64	d0, d7
 800526c:	f00b fabc 	bl	80107e8 <pow>
 8005270:	eeb0 6b40 	vmov.f64	d6, d0
 8005274:	ed97 7b00 	vldr	d7, [r7]
 8005278:	ee26 9b07 	vmul.f64	d9, d6, d7
 800527c:	ed97 6b06 	vldr	d6, [r7, #24]
 8005280:	ed97 7b08 	vldr	d7, [r7, #32]
 8005284:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005288:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800528c:	eeb0 0b47 	vmov.f64	d0, d7
 8005290:	f00b faaa 	bl	80107e8 <pow>
 8005294:	eeb0 5b40 	vmov.f64	d5, d0
 8005298:	ed97 6b06 	vldr	d6, [r7, #24]
 800529c:	ed97 7b08 	vldr	d7, [r7, #32]
 80052a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80052a8:	ee39 6b47 	vsub.f64	d6, d9, d7
 80052ac:	ed97 7b00 	vldr	d7, [r7]
 80052b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80052b4:	eeb0 0b47 	vmov.f64	d0, d7
 80052b8:	f00b fd16 	bl	8010ce8 <sqrt>
 80052bc:	eeb0 7b40 	vmov.f64	d7, d0
 80052c0:	ee38 5b47 	vsub.f64	d5, d8, d7
 80052c4:	ed97 6b06 	vldr	d6, [r7, #24]
 80052c8:	ed97 7b08 	vldr	d7, [r7, #32]
 80052cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80052d0:	ed97 7b00 	vldr	d7, [r7]
 80052d4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80052d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80052dc:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <update_ScurveTraj+0x8e8>)
 80052de:	ed83 7b00 	vstr	d7, [r3]
					Tj2=0;
 80052e2:	490e      	ldr	r1, [pc, #56]	; (800531c <update_ScurveTraj+0x8ec>)
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 80052f0:	e042      	b.n	8005378 <update_ScurveTraj+0x948>
 80052f2:	bf00      	nop
 80052f4:	f3af 8000 	nop.w
 80052f8:	7ae147ae 	.word	0x7ae147ae
 80052fc:	3fefae14 	.word	0x3fefae14
 8005300:	240007a8 	.word	0x240007a8
 8005304:	240007c0 	.word	0x240007c0
 8005308:	240007b8 	.word	0x240007b8
 800530c:	240007b0 	.word	0x240007b0
 8005310:	24000780 	.word	0x24000780
 8005314:	24000788 	.word	0x24000788
 8005318:	24000798 	.word	0x24000798
 800531c:	240007a0 	.word	0x240007a0
			while (!(Ta>2*Tj && Td>2*Tj)){
 8005320:	4b34      	ldr	r3, [pc, #208]	; (80053f4 <update_ScurveTraj+0x9c4>)
 8005322:	ed93 7b00 	vldr	d7, [r3]
 8005326:	ee37 6b07 	vadd.f64	d6, d7, d7
 800532a:	4b33      	ldr	r3, [pc, #204]	; (80053f8 <update_ScurveTraj+0x9c8>)
 800532c:	ed93 7b00 	vldr	d7, [r3]
 8005330:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005338:	bf4c      	ite	mi
 800533a:	2301      	movmi	r3, #1
 800533c:	2300      	movpl	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f083 0301 	eor.w	r3, r3, #1
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	f47f ae28 	bne.w	8004f9c <update_ScurveTraj+0x56c>
 800534c:	4b29      	ldr	r3, [pc, #164]	; (80053f4 <update_ScurveTraj+0x9c4>)
 800534e:	ed93 7b00 	vldr	d7, [r3]
 8005352:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005356:	4b29      	ldr	r3, [pc, #164]	; (80053fc <update_ScurveTraj+0x9cc>)
 8005358:	ed93 7b00 	vldr	d7, [r3]
 800535c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005364:	bf4c      	ite	mi
 8005366:	2301      	movmi	r3, #1
 8005368:	2300      	movpl	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	f083 0301 	eor.w	r3, r3, #1
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	f47f ae12 	bne.w	8004f9c <update_ScurveTraj+0x56c>
				}
			}
		}
	}

	params[0]=Tj1;
 8005378:	4b21      	ldr	r3, [pc, #132]	; (8005400 <update_ScurveTraj+0x9d0>)
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005380:	e9c1 2300 	strd	r2, r3, [r1]
	params[1]=Tj2;
 8005384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005386:	f103 0108 	add.w	r1, r3, #8
 800538a:	4b1e      	ldr	r3, [pc, #120]	; (8005404 <update_ScurveTraj+0x9d4>)
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	e9c1 2300 	strd	r2, r3, [r1]
	params[2]=Tj;
 8005394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005396:	f103 0110 	add.w	r1, r3, #16
 800539a:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <update_ScurveTraj+0x9c4>)
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	e9c1 2300 	strd	r2, r3, [r1]
	params[3]=Ta;
 80053a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a6:	f103 0118 	add.w	r1, r3, #24
 80053aa:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <update_ScurveTraj+0x9c8>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	e9c1 2300 	strd	r2, r3, [r1]
	params[4]=Td;
 80053b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b6:	f103 0120 	add.w	r1, r3, #32
 80053ba:	4b10      	ldr	r3, [pc, #64]	; (80053fc <update_ScurveTraj+0x9cc>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	e9c1 2300 	strd	r2, r3, [r1]
	params[5]=Tv;
 80053c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80053ca:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <update_ScurveTraj+0x9d8>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	e9c1 2300 	strd	r2, r3, [r1]
	params[6]=T;
 80053d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80053da:	4b0c      	ldr	r3, [pc, #48]	; (800540c <update_ScurveTraj+0x9dc>)
 80053dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e0:	e9c1 2300 	strd	r2, r3, [r1]

return params;
 80053e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3748      	adds	r7, #72	; 0x48
 80053ea:	46bd      	mov	sp, r7
 80053ec:	ecbd 8b04 	vpop	{d8-d9}
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	240007a8 	.word	0x240007a8
 80053f8:	24000780 	.word	0x24000780
 80053fc:	24000788 	.word	0x24000788
 8005400:	24000798 	.word	0x24000798
 8005404:	240007a0 	.word	0x240007a0
 8005408:	24000790 	.word	0x24000790
 800540c:	24000778 	.word	0x24000778

08005410 <setProfilTimer>:


void setProfilTimer(void){
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8005414:	4b78      	ldr	r3, [pc, #480]	; (80055f8 <setProfilTimer+0x1e8>)
 8005416:	ed93 7b04 	vldr	d7, [r3, #16]
 800541a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80055d8 <setProfilTimer+0x1c8>
 800541e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005422:	4b75      	ldr	r3, [pc, #468]	; (80055f8 <setProfilTimer+0x1e8>)
 8005424:	ed83 7b06 	vstr	d7, [r3, #24]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 8005428:	4b74      	ldr	r3, [pc, #464]	; (80055fc <setProfilTimer+0x1ec>)
 800542a:	ed93 7b04 	vldr	d7, [r3, #16]
 800542e:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80055d8 <setProfilTimer+0x1c8>
 8005432:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005436:	4b71      	ldr	r3, [pc, #452]	; (80055fc <setProfilTimer+0x1ec>)
 8005438:	ed83 7b06 	vstr	d7, [r3, #24]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 800543c:	4b70      	ldr	r3, [pc, #448]	; (8005600 <setProfilTimer+0x1f0>)
 800543e:	ed93 7b04 	vldr	d7, [r3, #16]
 8005442:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80055d8 <setProfilTimer+0x1c8>
 8005446:	ee27 7b06 	vmul.f64	d7, d7, d6
 800544a:	4b6d      	ldr	r3, [pc, #436]	; (8005600 <setProfilTimer+0x1f0>)
 800544c:	ed83 7b06 	vstr	d7, [r3, #24]
	if(rpm3<=0.1){
		rpm3=0.1;
	}
	*/

	rpm1 = 4.0;   //HARDCODE PARA HACER PRUEBAS A BAJA VELOCIDAD
 8005450:	496c      	ldr	r1, [pc, #432]	; (8005604 <setProfilTimer+0x1f4>)
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	4b6c      	ldr	r3, [pc, #432]	; (8005608 <setProfilTimer+0x1f8>)
 8005458:	e9c1 2300 	strd	r2, r3, [r1]
	rpm2 = 1.0 ;
 800545c:	496b      	ldr	r1, [pc, #428]	; (800560c <setProfilTimer+0x1fc>)
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	4b6b      	ldr	r3, [pc, #428]	; (8005610 <setProfilTimer+0x200>)
 8005464:	e9c1 2300 	strd	r2, r3, [r1]
	rpm3 = 1.0;
 8005468:	496a      	ldr	r1, [pc, #424]	; (8005614 <setProfilTimer+0x204>)
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	4b68      	ldr	r3, [pc, #416]	; (8005610 <setProfilTimer+0x200>)
 8005470:	e9c1 2300 	strd	r2, r3, [r1]


	_peri1= COUNTERPERIOD(rpm1);
 8005474:	4b68      	ldr	r3, [pc, #416]	; (8005618 <setProfilTimer+0x208>)
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	ee07 3a90 	vmov	s15, r3
 800547c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005480:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005484:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005488:	ed9f 5b55 	vldr	d5, [pc, #340]	; 80055e0 <setProfilTimer+0x1d0>
 800548c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005490:	4b5c      	ldr	r3, [pc, #368]	; (8005604 <setProfilTimer+0x1f4>)
 8005492:	ed93 7b00 	vldr	d7, [r3]
 8005496:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80055e8 <setProfilTimer+0x1d8>
 800549a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800549e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 80055f0 <setProfilTimer+0x1e0>
 80054a2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80054a6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80054aa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80054ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80054b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80054b6:	ee17 2a90 	vmov	r2, s15
 80054ba:	4b58      	ldr	r3, [pc, #352]	; (800561c <setProfilTimer+0x20c>)
 80054bc:	601a      	str	r2, [r3, #0]
	_peri2= COUNTERPERIOD(rpm2);
 80054be:	4b56      	ldr	r3, [pc, #344]	; (8005618 <setProfilTimer+0x208>)
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80054ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80054ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80054d2:	ed9f 5b43 	vldr	d5, [pc, #268]	; 80055e0 <setProfilTimer+0x1d0>
 80054d6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80054da:	4b4c      	ldr	r3, [pc, #304]	; (800560c <setProfilTimer+0x1fc>)
 80054dc:	ed93 7b00 	vldr	d7, [r3]
 80054e0:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80055e8 <setProfilTimer+0x1d8>
 80054e4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80054e8:	ed9f 4b41 	vldr	d4, [pc, #260]	; 80055f0 <setProfilTimer+0x1e0>
 80054ec:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80054f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80054f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80054f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80054fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005500:	ee17 2a90 	vmov	r2, s15
 8005504:	4b46      	ldr	r3, [pc, #280]	; (8005620 <setProfilTimer+0x210>)
 8005506:	601a      	str	r2, [r3, #0]
	_peri3= COUNTERPERIOD(rpm3);
 8005508:	4b43      	ldr	r3, [pc, #268]	; (8005618 <setProfilTimer+0x208>)
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	ee07 3a90 	vmov	s15, r3
 8005510:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005514:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005518:	ee37 7b06 	vadd.f64	d7, d7, d6
 800551c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80055e0 <setProfilTimer+0x1d0>
 8005520:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005524:	4b3b      	ldr	r3, [pc, #236]	; (8005614 <setProfilTimer+0x204>)
 8005526:	ed93 7b00 	vldr	d7, [r3]
 800552a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80055e8 <setProfilTimer+0x1d8>
 800552e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005532:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 80055f0 <setProfilTimer+0x1e0>
 8005536:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800553a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800553e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005542:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005546:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800554a:	ee17 2a90 	vmov	r2, s15
 800554e:	4b35      	ldr	r3, [pc, #212]	; (8005624 <setProfilTimer+0x214>)
 8005550:	601a      	str	r2, [r3, #0]




	TIM12->ARR = _peri1;
 8005552:	4a31      	ldr	r2, [pc, #196]	; (8005618 <setProfilTimer+0x208>)
 8005554:	4b31      	ldr	r3, [pc, #196]	; (800561c <setProfilTimer+0x20c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM13->ARR = _peri2;
 800555a:	4a33      	ldr	r2, [pc, #204]	; (8005628 <setProfilTimer+0x218>)
 800555c:	4b30      	ldr	r3, [pc, #192]	; (8005620 <setProfilTimer+0x210>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM14->ARR = _peri3;
 8005562:	4a32      	ldr	r2, [pc, #200]	; (800562c <setProfilTimer+0x21c>)
 8005564:	4b2f      	ldr	r3, [pc, #188]	; (8005624 <setProfilTimer+0x214>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	62d3      	str	r3, [r2, #44]	; 0x2c



	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 800556a:	4b2b      	ldr	r3, [pc, #172]	; (8005618 <setProfilTimer+0x208>)
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8005576:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800557a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800557e:	4b26      	ldr	r3, [pc, #152]	; (8005618 <setProfilTimer+0x208>)
 8005580:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005584:	ee17 2a90 	vmov	r2, s15
 8005588:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 800558a:	4b27      	ldr	r3, [pc, #156]	; (8005628 <setProfilTimer+0x218>)
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8005596:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800559a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800559e:	4b22      	ldr	r3, [pc, #136]	; (8005628 <setProfilTimer+0x218>)
 80055a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80055a4:	ee17 2a90 	vmov	r2, s15
 80055a8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80055aa:	4b20      	ldr	r3, [pc, #128]	; (800562c <setProfilTimer+0x21c>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80055b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80055ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80055be:	4b1b      	ldr	r3, [pc, #108]	; (800562c <setProfilTimer+0x21c>)
 80055c0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80055c4:	ee17 2a90 	vmov	r2, s15
 80055c8:	635a      	str	r2, [r3, #52]	; 0x34
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		*/


}
 80055ca:	bf00      	nop
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	f3af 8000 	nop.w
 80055d8:	66ed2a99 	.word	0x66ed2a99
 80055dc:	4023193d 	.word	0x4023193d
 80055e0:	00000000 	.word	0x00000000
 80055e4:	418e8480 	.word	0x418e8480
 80055e8:	00000000 	.word	0x00000000
 80055ec:	40bf4000 	.word	0x40bf4000
 80055f0:	00000000 	.word	0x00000000
 80055f4:	404e0000 	.word	0x404e0000
 80055f8:	24000350 	.word	0x24000350
 80055fc:	24000390 	.word	0x24000390
 8005600:	240003d0 	.word	0x240003d0
 8005604:	24000410 	.word	0x24000410
 8005608:	40100000 	.word	0x40100000
 800560c:	24000418 	.word	0x24000418
 8005610:	3ff00000 	.word	0x3ff00000
 8005614:	24000420 	.word	0x24000420
 8005618:	40001800 	.word	0x40001800
 800561c:	240007c8 	.word	0x240007c8
 8005620:	240007cc 	.word	0x240007cc
 8005624:	240007d0 	.word	0x240007d0
 8005628:	40001c00 	.word	0x40001c00
 800562c:	40002000 	.word	0x40002000

08005630 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005634:	4b22      	ldr	r3, [pc, #136]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 8005636:	4a23      	ldr	r2, [pc, #140]	; (80056c4 <MX_USART1_UART_Init+0x94>)
 8005638:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800563a:	4b21      	ldr	r3, [pc, #132]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 800563c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005640:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005642:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 8005644:	2200      	movs	r2, #0
 8005646:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005648:	4b1d      	ldr	r3, [pc, #116]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 800564a:	2200      	movs	r2, #0
 800564c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800564e:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 8005650:	2200      	movs	r2, #0
 8005652:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005654:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 8005656:	220c      	movs	r2, #12
 8005658:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800565a:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 800565c:	2200      	movs	r2, #0
 800565e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005660:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 8005662:	2200      	movs	r2, #0
 8005664:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005666:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 8005668:	2200      	movs	r2, #0
 800566a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800566c:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 800566e:	2200      	movs	r2, #0
 8005670:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 8005674:	2200      	movs	r2, #0
 8005676:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005678:	4811      	ldr	r0, [pc, #68]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 800567a:	f005 fe81 	bl	800b380 <HAL_UART_Init>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005684:	f7fd fb90 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005688:	2100      	movs	r1, #0
 800568a:	480d      	ldr	r0, [pc, #52]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 800568c:	f008 f90b 	bl	800d8a6 <HAL_UARTEx_SetTxFifoThreshold>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005696:	f7fd fb87 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800569a:	2100      	movs	r1, #0
 800569c:	4808      	ldr	r0, [pc, #32]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 800569e:	f008 f940 	bl	800d922 <HAL_UARTEx_SetRxFifoThreshold>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80056a8:	f7fd fb7e 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80056ac:	4804      	ldr	r0, [pc, #16]	; (80056c0 <MX_USART1_UART_Init+0x90>)
 80056ae:	f008 f8c1 	bl	800d834 <HAL_UARTEx_DisableFifoMode>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80056b8:	f7fd fb76 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80056bc:	bf00      	nop
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	240007d4 	.word	0x240007d4
 80056c4:	40011000 	.word	0x40011000

080056c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80056cc:	4b22      	ldr	r3, [pc, #136]	; (8005758 <MX_USART2_UART_Init+0x90>)
 80056ce:	4a23      	ldr	r2, [pc, #140]	; (800575c <MX_USART2_UART_Init+0x94>)
 80056d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80056d2:	4b21      	ldr	r3, [pc, #132]	; (8005758 <MX_USART2_UART_Init+0x90>)
 80056d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80056d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80056da:	4b1f      	ldr	r3, [pc, #124]	; (8005758 <MX_USART2_UART_Init+0x90>)
 80056dc:	2200      	movs	r2, #0
 80056de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80056e0:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <MX_USART2_UART_Init+0x90>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80056e6:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <MX_USART2_UART_Init+0x90>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80056ec:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <MX_USART2_UART_Init+0x90>)
 80056ee:	220c      	movs	r2, #12
 80056f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056f2:	4b19      	ldr	r3, [pc, #100]	; (8005758 <MX_USART2_UART_Init+0x90>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80056f8:	4b17      	ldr	r3, [pc, #92]	; (8005758 <MX_USART2_UART_Init+0x90>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056fe:	4b16      	ldr	r3, [pc, #88]	; (8005758 <MX_USART2_UART_Init+0x90>)
 8005700:	2200      	movs	r2, #0
 8005702:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005704:	4b14      	ldr	r3, [pc, #80]	; (8005758 <MX_USART2_UART_Init+0x90>)
 8005706:	2200      	movs	r2, #0
 8005708:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800570a:	4b13      	ldr	r3, [pc, #76]	; (8005758 <MX_USART2_UART_Init+0x90>)
 800570c:	2200      	movs	r2, #0
 800570e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005710:	4811      	ldr	r0, [pc, #68]	; (8005758 <MX_USART2_UART_Init+0x90>)
 8005712:	f005 fe35 	bl	800b380 <HAL_UART_Init>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800571c:	f7fd fb44 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005720:	2100      	movs	r1, #0
 8005722:	480d      	ldr	r0, [pc, #52]	; (8005758 <MX_USART2_UART_Init+0x90>)
 8005724:	f008 f8bf 	bl	800d8a6 <HAL_UARTEx_SetTxFifoThreshold>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800572e:	f7fd fb3b 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005732:	2100      	movs	r1, #0
 8005734:	4808      	ldr	r0, [pc, #32]	; (8005758 <MX_USART2_UART_Init+0x90>)
 8005736:	f008 f8f4 	bl	800d922 <HAL_UARTEx_SetRxFifoThreshold>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005740:	f7fd fb32 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005744:	4804      	ldr	r0, [pc, #16]	; (8005758 <MX_USART2_UART_Init+0x90>)
 8005746:	f008 f875 	bl	800d834 <HAL_UARTEx_DisableFifoMode>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005750:	f7fd fb2a 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005754:	bf00      	nop
 8005756:	bd80      	pop	{r7, pc}
 8005758:	24000864 	.word	0x24000864
 800575c:	40004400 	.word	0x40004400

08005760 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005764:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 8005766:	4a23      	ldr	r2, [pc, #140]	; (80057f4 <MX_USART3_UART_Init+0x94>)
 8005768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800576a:	4b21      	ldr	r3, [pc, #132]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 800576c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005772:	4b1f      	ldr	r3, [pc, #124]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 8005774:	2200      	movs	r2, #0
 8005776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005778:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 800577a:	2200      	movs	r2, #0
 800577c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800577e:	4b1c      	ldr	r3, [pc, #112]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 8005780:	2200      	movs	r2, #0
 8005782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005784:	4b1a      	ldr	r3, [pc, #104]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 8005786:	220c      	movs	r2, #12
 8005788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800578a:	4b19      	ldr	r3, [pc, #100]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 800578c:	2200      	movs	r2, #0
 800578e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005790:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 8005792:	2200      	movs	r2, #0
 8005794:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005796:	4b16      	ldr	r3, [pc, #88]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 8005798:	2200      	movs	r2, #0
 800579a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800579c:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 800579e:	2200      	movs	r2, #0
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057a2:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80057a8:	4811      	ldr	r0, [pc, #68]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 80057aa:	f005 fde9 	bl	800b380 <HAL_UART_Init>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80057b4:	f7fd faf8 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057b8:	2100      	movs	r1, #0
 80057ba:	480d      	ldr	r0, [pc, #52]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 80057bc:	f008 f873 	bl	800d8a6 <HAL_UARTEx_SetTxFifoThreshold>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80057c6:	f7fd faef 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057ca:	2100      	movs	r1, #0
 80057cc:	4808      	ldr	r0, [pc, #32]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 80057ce:	f008 f8a8 	bl	800d922 <HAL_UARTEx_SetRxFifoThreshold>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80057d8:	f7fd fae6 	bl	8002da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80057dc:	4804      	ldr	r0, [pc, #16]	; (80057f0 <MX_USART3_UART_Init+0x90>)
 80057de:	f008 f829 	bl	800d834 <HAL_UARTEx_DisableFifoMode>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80057e8:	f7fd fade 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80057ec:	bf00      	nop
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	240008f4 	.word	0x240008f4
 80057f4:	40004800 	.word	0x40004800

080057f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b0be      	sub	sp, #248	; 0xf8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005800:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	605a      	str	r2, [r3, #4]
 800580a:	609a      	str	r2, [r3, #8]
 800580c:	60da      	str	r2, [r3, #12]
 800580e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005814:	22bc      	movs	r2, #188	; 0xbc
 8005816:	2100      	movs	r1, #0
 8005818:	4618      	mov	r0, r3
 800581a:	f008 f949 	bl	800dab0 <memset>
  if(uartHandle->Instance==USART1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a84      	ldr	r2, [pc, #528]	; (8005a34 <HAL_UART_MspInit+0x23c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d168      	bne.n	80058fa <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005828:	2301      	movs	r3, #1
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800582c:	2300      	movs	r3, #0
 800582e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005836:	4618      	mov	r0, r3
 8005838:	f002 fa8c 	bl	8007d54 <HAL_RCCEx_PeriphCLKConfig>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005842:	f7fd fab1 	bl	8002da8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005846:	4b7c      	ldr	r3, [pc, #496]	; (8005a38 <HAL_UART_MspInit+0x240>)
 8005848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800584c:	4a7a      	ldr	r2, [pc, #488]	; (8005a38 <HAL_UART_MspInit+0x240>)
 800584e:	f043 0310 	orr.w	r3, r3, #16
 8005852:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005856:	4b78      	ldr	r3, [pc, #480]	; (8005a38 <HAL_UART_MspInit+0x240>)
 8005858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005864:	4b74      	ldr	r3, [pc, #464]	; (8005a38 <HAL_UART_MspInit+0x240>)
 8005866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800586a:	4a73      	ldr	r2, [pc, #460]	; (8005a38 <HAL_UART_MspInit+0x240>)
 800586c:	f043 0302 	orr.w	r3, r3, #2
 8005870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005874:	4b70      	ldr	r3, [pc, #448]	; (8005a38 <HAL_UART_MspInit+0x240>)
 8005876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	623b      	str	r3, [r7, #32]
 8005880:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005882:	4b6d      	ldr	r3, [pc, #436]	; (8005a38 <HAL_UART_MspInit+0x240>)
 8005884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005888:	4a6b      	ldr	r2, [pc, #428]	; (8005a38 <HAL_UART_MspInit+0x240>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005892:	4b69      	ldr	r3, [pc, #420]	; (8005a38 <HAL_UART_MspInit+0x240>)
 8005894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 80058a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a8:	2302      	movs	r3, #2
 80058aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058b4:	2300      	movs	r3, #0
 80058b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80058ba:	2304      	movs	r3, #4
 80058bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 80058c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80058c4:	4619      	mov	r1, r3
 80058c6:	485d      	ldr	r0, [pc, #372]	; (8005a3c <HAL_UART_MspInit+0x244>)
 80058c8:	f001 f854 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 80058cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d4:	2302      	movs	r3, #2
 80058d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058e0:	2300      	movs	r3, #0
 80058e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80058e6:	2307      	movs	r3, #7
 80058e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 80058ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4853      	ldr	r0, [pc, #332]	; (8005a40 <HAL_UART_MspInit+0x248>)
 80058f4:	f001 f83e 	bl	8006974 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80058f8:	e097      	b.n	8005a2a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a51      	ldr	r2, [pc, #324]	; (8005a44 <HAL_UART_MspInit+0x24c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d142      	bne.n	800598a <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005904:	2302      	movs	r3, #2
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005908:	2300      	movs	r3, #0
 800590a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800590e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005912:	4618      	mov	r0, r3
 8005914:	f002 fa1e 	bl	8007d54 <HAL_RCCEx_PeriphCLKConfig>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 800591e:	f7fd fa43 	bl	8002da8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005922:	4b45      	ldr	r3, [pc, #276]	; (8005a38 <HAL_UART_MspInit+0x240>)
 8005924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005928:	4a43      	ldr	r2, [pc, #268]	; (8005a38 <HAL_UART_MspInit+0x240>)
 800592a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800592e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005932:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <HAL_UART_MspInit+0x240>)
 8005934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005940:	4b3d      	ldr	r3, [pc, #244]	; (8005a38 <HAL_UART_MspInit+0x240>)
 8005942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005946:	4a3c      	ldr	r2, [pc, #240]	; (8005a38 <HAL_UART_MspInit+0x240>)
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005950:	4b39      	ldr	r3, [pc, #228]	; (8005a38 <HAL_UART_MspInit+0x240>)
 8005952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 800595e:	230c      	movs	r3, #12
 8005960:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005964:	2302      	movs	r3, #2
 8005966:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596a:	2300      	movs	r3, #0
 800596c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005970:	2300      	movs	r3, #0
 8005972:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005976:	2307      	movs	r3, #7
 8005978:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800597c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005980:	4619      	mov	r1, r3
 8005982:	482f      	ldr	r0, [pc, #188]	; (8005a40 <HAL_UART_MspInit+0x248>)
 8005984:	f000 fff6 	bl	8006974 <HAL_GPIO_Init>
}
 8005988:	e04f      	b.n	8005a2a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2e      	ldr	r2, [pc, #184]	; (8005a48 <HAL_UART_MspInit+0x250>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d14a      	bne.n	8005a2a <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005994:	2302      	movs	r3, #2
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005998:	2300      	movs	r3, #0
 800599a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800599e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059a2:	4618      	mov	r0, r3
 80059a4:	f002 f9d6 	bl	8007d54 <HAL_RCCEx_PeriphCLKConfig>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 80059ae:	f7fd f9fb 	bl	8002da8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059b2:	4b21      	ldr	r3, [pc, #132]	; (8005a38 <HAL_UART_MspInit+0x240>)
 80059b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059b8:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <HAL_UART_MspInit+0x240>)
 80059ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059c2:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <HAL_UART_MspInit+0x240>)
 80059c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059d0:	4b19      	ldr	r3, [pc, #100]	; (8005a38 <HAL_UART_MspInit+0x240>)
 80059d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059d6:	4a18      	ldr	r2, [pc, #96]	; (8005a38 <HAL_UART_MspInit+0x240>)
 80059d8:	f043 0308 	orr.w	r3, r3, #8
 80059dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059e0:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <HAL_UART_MspInit+0x240>)
 80059e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80059ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80059f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f6:	2302      	movs	r3, #2
 80059f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a02:	2300      	movs	r3, #0
 8005a04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a08:	2307      	movs	r3, #7
 8005a0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005a12:	4619      	mov	r1, r3
 8005a14:	480d      	ldr	r0, [pc, #52]	; (8005a4c <HAL_UART_MspInit+0x254>)
 8005a16:	f000 ffad 	bl	8006974 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	2027      	movs	r0, #39	; 0x27
 8005a20:	f000 fa01 	bl	8005e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a24:	2027      	movs	r0, #39	; 0x27
 8005a26:	f000 fa18 	bl	8005e5a <HAL_NVIC_EnableIRQ>
}
 8005a2a:	bf00      	nop
 8005a2c:	37f8      	adds	r7, #248	; 0xf8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40011000 	.word	0x40011000
 8005a38:	58024400 	.word	0x58024400
 8005a3c:	58020400 	.word	0x58020400
 8005a40:	58020000 	.word	0x58020000
 8005a44:	40004400 	.word	0x40004400
 8005a48:	40004800 	.word	0x40004800
 8005a4c:	58020c00 	.word	0x58020c00

08005a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005a54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005a56:	e003      	b.n	8005a60 <LoopCopyDataInit>

08005a58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005a5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005a5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005a5e:	3104      	adds	r1, #4

08005a60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005a60:	480b      	ldr	r0, [pc, #44]	; (8005a90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005a62:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005a64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005a66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005a68:	d3f6      	bcc.n	8005a58 <CopyDataInit>
  ldr  r2, =_sbss
 8005a6a:	4a0b      	ldr	r2, [pc, #44]	; (8005a98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005a6c:	e002      	b.n	8005a74 <LoopFillZerobss>

08005a6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005a6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005a70:	f842 3b04 	str.w	r3, [r2], #4

08005a74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005a74:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005a76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005a78:	d3f9      	bcc.n	8005a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005a7a:	f7fd fbf7 	bl	800326c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a7e:	f007 ffe3 	bl	800da48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a82:	f7fc fd01 	bl	8002488 <main>
  bx  lr    
 8005a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a88:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8005a8c:	08012db8 	.word	0x08012db8
  ldr  r0, =_sdata
 8005a90:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8005a94:	24000248 	.word	0x24000248
  ldr  r2, =_sbss
 8005a98:	24000248 	.word	0x24000248
  ldr  r3, = _ebss
 8005a9c:	24000998 	.word	0x24000998

08005aa0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005aa0:	e7fe      	b.n	8005aa0 <ADC3_IRQHandler>
	...

08005aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005aaa:	2003      	movs	r0, #3
 8005aac:	f000 f9b0 	bl	8005e10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ab0:	f001 ff7a 	bl	80079a8 <HAL_RCC_GetSysClockFreq>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <HAL_Init+0x68>)
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	4913      	ldr	r1, [pc, #76]	; (8005b10 <HAL_Init+0x6c>)
 8005ac2:	5ccb      	ldrb	r3, [r1, r3]
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8005acc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ace:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <HAL_Init+0x68>)
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	4a0e      	ldr	r2, [pc, #56]	; (8005b10 <HAL_Init+0x6c>)
 8005ad8:	5cd3      	ldrb	r3, [r2, r3]
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae4:	4a0b      	ldr	r2, [pc, #44]	; (8005b14 <HAL_Init+0x70>)
 8005ae6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ae8:	4a0b      	ldr	r2, [pc, #44]	; (8005b18 <HAL_Init+0x74>)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005aee:	2000      	movs	r0, #0
 8005af0:	f000 f814 	bl	8005b1c <HAL_InitTick>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e002      	b.n	8005b04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005afe:	f7fd fa3b 	bl	8002f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	58024400 	.word	0x58024400
 8005b10:	08011088 	.word	0x08011088
 8005b14:	24000068 	.word	0x24000068
 8005b18:	24000064 	.word	0x24000064

08005b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005b24:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <HAL_InitTick+0x60>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e021      	b.n	8005b74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005b30:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <HAL_InitTick+0x64>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <HAL_InitTick+0x60>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 f9a3 	bl	8005e92 <HAL_SYSTICK_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e00e      	b.n	8005b74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b0f      	cmp	r3, #15
 8005b5a:	d80a      	bhi.n	8005b72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	f000 f95f 	bl	8005e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b68:	4a06      	ldr	r2, [pc, #24]	; (8005b84 <HAL_InitTick+0x68>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e000      	b.n	8005b74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	24000070 	.word	0x24000070
 8005b80:	24000064 	.word	0x24000064
 8005b84:	2400006c 	.word	0x2400006c

08005b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b8c:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <HAL_IncTick+0x20>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	4b06      	ldr	r3, [pc, #24]	; (8005bac <HAL_IncTick+0x24>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4413      	add	r3, r2
 8005b98:	4a04      	ldr	r2, [pc, #16]	; (8005bac <HAL_IncTick+0x24>)
 8005b9a:	6013      	str	r3, [r2, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	24000070 	.word	0x24000070
 8005bac:	24000984 	.word	0x24000984

08005bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8005bb4:	4b03      	ldr	r3, [pc, #12]	; (8005bc4 <HAL_GetTick+0x14>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	24000984 	.word	0x24000984

08005bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bd0:	f7ff ffee 	bl	8005bb0 <HAL_GetTick>
 8005bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d005      	beq.n	8005bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <HAL_Delay+0x44>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bee:	bf00      	nop
 8005bf0:	f7ff ffde 	bl	8005bb0 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d8f7      	bhi.n	8005bf0 <HAL_Delay+0x28>
  {
  }
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	24000070 	.word	0x24000070

08005c10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005c14:	4b03      	ldr	r3, [pc, #12]	; (8005c24 <HAL_GetREVID+0x14>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	0c1b      	lsrs	r3, r3, #16
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	5c001000 	.word	0x5c001000

08005c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c38:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <__NVIC_SetPriorityGrouping+0x40>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c44:	4013      	ands	r3, r2
 8005c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c50:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <__NVIC_SetPriorityGrouping+0x44>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c56:	4a04      	ldr	r2, [pc, #16]	; (8005c68 <__NVIC_SetPriorityGrouping+0x40>)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	60d3      	str	r3, [r2, #12]
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	e000ed00 	.word	0xe000ed00
 8005c6c:	05fa0000 	.word	0x05fa0000

08005c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c74:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <__NVIC_GetPriorityGrouping+0x18>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	f003 0307 	and.w	r3, r3, #7
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	e000ed00 	.word	0xe000ed00

08005c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	db0b      	blt.n	8005cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	f003 021f 	and.w	r2, r3, #31
 8005ca4:	4907      	ldr	r1, [pc, #28]	; (8005cc4 <__NVIC_EnableIRQ+0x38>)
 8005ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	2001      	movs	r0, #1
 8005cae:	fa00 f202 	lsl.w	r2, r0, r2
 8005cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	e000e100 	.word	0xe000e100

08005cc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	db12      	blt.n	8005d00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	f003 021f 	and.w	r2, r3, #31
 8005ce0:	490a      	ldr	r1, [pc, #40]	; (8005d0c <__NVIC_DisableIRQ+0x44>)
 8005ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2001      	movs	r0, #1
 8005cea:	fa00 f202 	lsl.w	r2, r0, r2
 8005cee:	3320      	adds	r3, #32
 8005cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005cf4:	f3bf 8f4f 	dsb	sy
}
 8005cf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cfa:	f3bf 8f6f 	isb	sy
}
 8005cfe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	e000e100 	.word	0xe000e100

08005d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	6039      	str	r1, [r7, #0]
 8005d1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	db0a      	blt.n	8005d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	490c      	ldr	r1, [pc, #48]	; (8005d5c <__NVIC_SetPriority+0x4c>)
 8005d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d2e:	0112      	lsls	r2, r2, #4
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	440b      	add	r3, r1
 8005d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d38:	e00a      	b.n	8005d50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	4908      	ldr	r1, [pc, #32]	; (8005d60 <__NVIC_SetPriority+0x50>)
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	3b04      	subs	r3, #4
 8005d48:	0112      	lsls	r2, r2, #4
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	761a      	strb	r2, [r3, #24]
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	e000e100 	.word	0xe000e100
 8005d60:	e000ed00 	.word	0xe000ed00

08005d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b089      	sub	sp, #36	; 0x24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f1c3 0307 	rsb	r3, r3, #7
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	bf28      	it	cs
 8005d82:	2304      	movcs	r3, #4
 8005d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	2b06      	cmp	r3, #6
 8005d8c:	d902      	bls.n	8005d94 <NVIC_EncodePriority+0x30>
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	3b03      	subs	r3, #3
 8005d92:	e000      	b.n	8005d96 <NVIC_EncodePriority+0x32>
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43da      	mvns	r2, r3
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	401a      	ands	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dac:	f04f 31ff 	mov.w	r1, #4294967295
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	fa01 f303 	lsl.w	r3, r1, r3
 8005db6:	43d9      	mvns	r1, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dbc:	4313      	orrs	r3, r2
         );
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3724      	adds	r7, #36	; 0x24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ddc:	d301      	bcc.n	8005de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dde:	2301      	movs	r3, #1
 8005de0:	e00f      	b.n	8005e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005de2:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <SysTick_Config+0x40>)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dea:	210f      	movs	r1, #15
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	f7ff ff8e 	bl	8005d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005df4:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <SysTick_Config+0x40>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dfa:	4b04      	ldr	r3, [pc, #16]	; (8005e0c <SysTick_Config+0x40>)
 8005dfc:	2207      	movs	r2, #7
 8005dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	e000e010 	.word	0xe000e010

08005e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ff05 	bl	8005c28 <__NVIC_SetPriorityGrouping>
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b086      	sub	sp, #24
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
 8005e32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e34:	f7ff ff1c 	bl	8005c70 <__NVIC_GetPriorityGrouping>
 8005e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	68b9      	ldr	r1, [r7, #8]
 8005e3e:	6978      	ldr	r0, [r7, #20]
 8005e40:	f7ff ff90 	bl	8005d64 <NVIC_EncodePriority>
 8005e44:	4602      	mov	r2, r0
 8005e46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff ff5f 	bl	8005d10 <__NVIC_SetPriority>
}
 8005e52:	bf00      	nop
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	4603      	mov	r3, r0
 8005e62:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff ff0f 	bl	8005c8c <__NVIC_EnableIRQ>
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff ff1f 	bl	8005cc8 <__NVIC_DisableIRQ>
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff ff96 	bl	8005dcc <SysTick_Config>
 8005ea0:	4603      	mov	r3, r0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005eb4:	f7ff fe7c 	bl	8005bb0 <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e2dc      	b.n	800647e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d008      	beq.n	8005ee2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2280      	movs	r2, #128	; 0x80
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e2cd      	b.n	800647e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a76      	ldr	r2, [pc, #472]	; (80060c0 <HAL_DMA_Abort+0x214>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d04a      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a74      	ldr	r2, [pc, #464]	; (80060c4 <HAL_DMA_Abort+0x218>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d045      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a73      	ldr	r2, [pc, #460]	; (80060c8 <HAL_DMA_Abort+0x21c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d040      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a71      	ldr	r2, [pc, #452]	; (80060cc <HAL_DMA_Abort+0x220>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d03b      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a70      	ldr	r2, [pc, #448]	; (80060d0 <HAL_DMA_Abort+0x224>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d036      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a6e      	ldr	r2, [pc, #440]	; (80060d4 <HAL_DMA_Abort+0x228>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d031      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a6d      	ldr	r2, [pc, #436]	; (80060d8 <HAL_DMA_Abort+0x22c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d02c      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a6b      	ldr	r2, [pc, #428]	; (80060dc <HAL_DMA_Abort+0x230>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d027      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a6a      	ldr	r2, [pc, #424]	; (80060e0 <HAL_DMA_Abort+0x234>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d022      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a68      	ldr	r2, [pc, #416]	; (80060e4 <HAL_DMA_Abort+0x238>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d01d      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a67      	ldr	r2, [pc, #412]	; (80060e8 <HAL_DMA_Abort+0x23c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d018      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a65      	ldr	r2, [pc, #404]	; (80060ec <HAL_DMA_Abort+0x240>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d013      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a64      	ldr	r2, [pc, #400]	; (80060f0 <HAL_DMA_Abort+0x244>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00e      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a62      	ldr	r2, [pc, #392]	; (80060f4 <HAL_DMA_Abort+0x248>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d009      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a61      	ldr	r2, [pc, #388]	; (80060f8 <HAL_DMA_Abort+0x24c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d004      	beq.n	8005f82 <HAL_DMA_Abort+0xd6>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a5f      	ldr	r2, [pc, #380]	; (80060fc <HAL_DMA_Abort+0x250>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d101      	bne.n	8005f86 <HAL_DMA_Abort+0xda>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <HAL_DMA_Abort+0xdc>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d013      	beq.n	8005fb4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 021e 	bic.w	r2, r2, #30
 8005f9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005faa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	e00a      	b.n	8005fca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 020e 	bic.w	r2, r2, #14
 8005fc2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a3c      	ldr	r2, [pc, #240]	; (80060c0 <HAL_DMA_Abort+0x214>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d072      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a3a      	ldr	r2, [pc, #232]	; (80060c4 <HAL_DMA_Abort+0x218>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d06d      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a39      	ldr	r2, [pc, #228]	; (80060c8 <HAL_DMA_Abort+0x21c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d068      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a37      	ldr	r2, [pc, #220]	; (80060cc <HAL_DMA_Abort+0x220>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d063      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a36      	ldr	r2, [pc, #216]	; (80060d0 <HAL_DMA_Abort+0x224>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d05e      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a34      	ldr	r2, [pc, #208]	; (80060d4 <HAL_DMA_Abort+0x228>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d059      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a33      	ldr	r2, [pc, #204]	; (80060d8 <HAL_DMA_Abort+0x22c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d054      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a31      	ldr	r2, [pc, #196]	; (80060dc <HAL_DMA_Abort+0x230>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d04f      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a30      	ldr	r2, [pc, #192]	; (80060e0 <HAL_DMA_Abort+0x234>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d04a      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a2e      	ldr	r2, [pc, #184]	; (80060e4 <HAL_DMA_Abort+0x238>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d045      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2d      	ldr	r2, [pc, #180]	; (80060e8 <HAL_DMA_Abort+0x23c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d040      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a2b      	ldr	r2, [pc, #172]	; (80060ec <HAL_DMA_Abort+0x240>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d03b      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <HAL_DMA_Abort+0x244>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d036      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a28      	ldr	r2, [pc, #160]	; (80060f4 <HAL_DMA_Abort+0x248>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d031      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a27      	ldr	r2, [pc, #156]	; (80060f8 <HAL_DMA_Abort+0x24c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d02c      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a25      	ldr	r2, [pc, #148]	; (80060fc <HAL_DMA_Abort+0x250>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d027      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a24      	ldr	r2, [pc, #144]	; (8006100 <HAL_DMA_Abort+0x254>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d022      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a22      	ldr	r2, [pc, #136]	; (8006104 <HAL_DMA_Abort+0x258>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d01d      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a21      	ldr	r2, [pc, #132]	; (8006108 <HAL_DMA_Abort+0x25c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d018      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1f      	ldr	r2, [pc, #124]	; (800610c <HAL_DMA_Abort+0x260>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d013      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a1e      	ldr	r2, [pc, #120]	; (8006110 <HAL_DMA_Abort+0x264>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00e      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <HAL_DMA_Abort+0x268>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d009      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <HAL_DMA_Abort+0x26c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d004      	beq.n	80060ba <HAL_DMA_Abort+0x20e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <HAL_DMA_Abort+0x270>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d132      	bne.n	8006120 <HAL_DMA_Abort+0x274>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e031      	b.n	8006122 <HAL_DMA_Abort+0x276>
 80060be:	bf00      	nop
 80060c0:	40020010 	.word	0x40020010
 80060c4:	40020028 	.word	0x40020028
 80060c8:	40020040 	.word	0x40020040
 80060cc:	40020058 	.word	0x40020058
 80060d0:	40020070 	.word	0x40020070
 80060d4:	40020088 	.word	0x40020088
 80060d8:	400200a0 	.word	0x400200a0
 80060dc:	400200b8 	.word	0x400200b8
 80060e0:	40020410 	.word	0x40020410
 80060e4:	40020428 	.word	0x40020428
 80060e8:	40020440 	.word	0x40020440
 80060ec:	40020458 	.word	0x40020458
 80060f0:	40020470 	.word	0x40020470
 80060f4:	40020488 	.word	0x40020488
 80060f8:	400204a0 	.word	0x400204a0
 80060fc:	400204b8 	.word	0x400204b8
 8006100:	58025408 	.word	0x58025408
 8006104:	5802541c 	.word	0x5802541c
 8006108:	58025430 	.word	0x58025430
 800610c:	58025444 	.word	0x58025444
 8006110:	58025458 	.word	0x58025458
 8006114:	5802546c 	.word	0x5802546c
 8006118:	58025480 	.word	0x58025480
 800611c:	58025494 	.word	0x58025494
 8006120:	2300      	movs	r3, #0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d007      	beq.n	8006136 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006134:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a6d      	ldr	r2, [pc, #436]	; (80062f0 <HAL_DMA_Abort+0x444>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d04a      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a6b      	ldr	r2, [pc, #428]	; (80062f4 <HAL_DMA_Abort+0x448>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d045      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a6a      	ldr	r2, [pc, #424]	; (80062f8 <HAL_DMA_Abort+0x44c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d040      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a68      	ldr	r2, [pc, #416]	; (80062fc <HAL_DMA_Abort+0x450>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d03b      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a67      	ldr	r2, [pc, #412]	; (8006300 <HAL_DMA_Abort+0x454>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d036      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a65      	ldr	r2, [pc, #404]	; (8006304 <HAL_DMA_Abort+0x458>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d031      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a64      	ldr	r2, [pc, #400]	; (8006308 <HAL_DMA_Abort+0x45c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d02c      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a62      	ldr	r2, [pc, #392]	; (800630c <HAL_DMA_Abort+0x460>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d027      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a61      	ldr	r2, [pc, #388]	; (8006310 <HAL_DMA_Abort+0x464>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d022      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a5f      	ldr	r2, [pc, #380]	; (8006314 <HAL_DMA_Abort+0x468>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d01d      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a5e      	ldr	r2, [pc, #376]	; (8006318 <HAL_DMA_Abort+0x46c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d018      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a5c      	ldr	r2, [pc, #368]	; (800631c <HAL_DMA_Abort+0x470>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d013      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a5b      	ldr	r2, [pc, #364]	; (8006320 <HAL_DMA_Abort+0x474>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00e      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a59      	ldr	r2, [pc, #356]	; (8006324 <HAL_DMA_Abort+0x478>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d009      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a58      	ldr	r2, [pc, #352]	; (8006328 <HAL_DMA_Abort+0x47c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d004      	beq.n	80061d6 <HAL_DMA_Abort+0x32a>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a56      	ldr	r2, [pc, #344]	; (800632c <HAL_DMA_Abort+0x480>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d108      	bne.n	80061e8 <HAL_DMA_Abort+0x33c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0201 	bic.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	e007      	b.n	80061f8 <HAL_DMA_Abort+0x34c>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0201 	bic.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80061f8:	e013      	b.n	8006222 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061fa:	f7ff fcd9 	bl	8005bb0 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b05      	cmp	r3, #5
 8006206:	d90c      	bls.n	8006222 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2203      	movs	r2, #3
 8006212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e12d      	b.n	800647e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e5      	bne.n	80061fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a2f      	ldr	r2, [pc, #188]	; (80062f0 <HAL_DMA_Abort+0x444>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d04a      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <HAL_DMA_Abort+0x448>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d045      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a2c      	ldr	r2, [pc, #176]	; (80062f8 <HAL_DMA_Abort+0x44c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d040      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <HAL_DMA_Abort+0x450>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d03b      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a29      	ldr	r2, [pc, #164]	; (8006300 <HAL_DMA_Abort+0x454>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d036      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a27      	ldr	r2, [pc, #156]	; (8006304 <HAL_DMA_Abort+0x458>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d031      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a26      	ldr	r2, [pc, #152]	; (8006308 <HAL_DMA_Abort+0x45c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d02c      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a24      	ldr	r2, [pc, #144]	; (800630c <HAL_DMA_Abort+0x460>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d027      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a23      	ldr	r2, [pc, #140]	; (8006310 <HAL_DMA_Abort+0x464>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d022      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a21      	ldr	r2, [pc, #132]	; (8006314 <HAL_DMA_Abort+0x468>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01d      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a20      	ldr	r2, [pc, #128]	; (8006318 <HAL_DMA_Abort+0x46c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d018      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1e      	ldr	r2, [pc, #120]	; (800631c <HAL_DMA_Abort+0x470>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1d      	ldr	r2, [pc, #116]	; (8006320 <HAL_DMA_Abort+0x474>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <HAL_DMA_Abort+0x478>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1a      	ldr	r2, [pc, #104]	; (8006328 <HAL_DMA_Abort+0x47c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_DMA_Abort+0x422>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a18      	ldr	r2, [pc, #96]	; (800632c <HAL_DMA_Abort+0x480>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d101      	bne.n	80062d2 <HAL_DMA_Abort+0x426>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <HAL_DMA_Abort+0x428>
 80062d2:	2300      	movs	r3, #0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d02b      	beq.n	8006330 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e2:	f003 031f 	and.w	r3, r3, #31
 80062e6:	223f      	movs	r2, #63	; 0x3f
 80062e8:	409a      	lsls	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	609a      	str	r2, [r3, #8]
 80062ee:	e02a      	b.n	8006346 <HAL_DMA_Abort+0x49a>
 80062f0:	40020010 	.word	0x40020010
 80062f4:	40020028 	.word	0x40020028
 80062f8:	40020040 	.word	0x40020040
 80062fc:	40020058 	.word	0x40020058
 8006300:	40020070 	.word	0x40020070
 8006304:	40020088 	.word	0x40020088
 8006308:	400200a0 	.word	0x400200a0
 800630c:	400200b8 	.word	0x400200b8
 8006310:	40020410 	.word	0x40020410
 8006314:	40020428 	.word	0x40020428
 8006318:	40020440 	.word	0x40020440
 800631c:	40020458 	.word	0x40020458
 8006320:	40020470 	.word	0x40020470
 8006324:	40020488 	.word	0x40020488
 8006328:	400204a0 	.word	0x400204a0
 800632c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006334:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633a:	f003 031f 	and.w	r3, r3, #31
 800633e:	2201      	movs	r2, #1
 8006340:	409a      	lsls	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a4f      	ldr	r2, [pc, #316]	; (8006488 <HAL_DMA_Abort+0x5dc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d072      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a4d      	ldr	r2, [pc, #308]	; (800648c <HAL_DMA_Abort+0x5e0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d06d      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a4c      	ldr	r2, [pc, #304]	; (8006490 <HAL_DMA_Abort+0x5e4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d068      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a4a      	ldr	r2, [pc, #296]	; (8006494 <HAL_DMA_Abort+0x5e8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d063      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a49      	ldr	r2, [pc, #292]	; (8006498 <HAL_DMA_Abort+0x5ec>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d05e      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a47      	ldr	r2, [pc, #284]	; (800649c <HAL_DMA_Abort+0x5f0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d059      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a46      	ldr	r2, [pc, #280]	; (80064a0 <HAL_DMA_Abort+0x5f4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d054      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a44      	ldr	r2, [pc, #272]	; (80064a4 <HAL_DMA_Abort+0x5f8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d04f      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a43      	ldr	r2, [pc, #268]	; (80064a8 <HAL_DMA_Abort+0x5fc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d04a      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a41      	ldr	r2, [pc, #260]	; (80064ac <HAL_DMA_Abort+0x600>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d045      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a40      	ldr	r2, [pc, #256]	; (80064b0 <HAL_DMA_Abort+0x604>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d040      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a3e      	ldr	r2, [pc, #248]	; (80064b4 <HAL_DMA_Abort+0x608>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d03b      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a3d      	ldr	r2, [pc, #244]	; (80064b8 <HAL_DMA_Abort+0x60c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d036      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a3b      	ldr	r2, [pc, #236]	; (80064bc <HAL_DMA_Abort+0x610>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d031      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a3a      	ldr	r2, [pc, #232]	; (80064c0 <HAL_DMA_Abort+0x614>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d02c      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a38      	ldr	r2, [pc, #224]	; (80064c4 <HAL_DMA_Abort+0x618>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d027      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a37      	ldr	r2, [pc, #220]	; (80064c8 <HAL_DMA_Abort+0x61c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d022      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a35      	ldr	r2, [pc, #212]	; (80064cc <HAL_DMA_Abort+0x620>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01d      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a34      	ldr	r2, [pc, #208]	; (80064d0 <HAL_DMA_Abort+0x624>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d018      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a32      	ldr	r2, [pc, #200]	; (80064d4 <HAL_DMA_Abort+0x628>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a31      	ldr	r2, [pc, #196]	; (80064d8 <HAL_DMA_Abort+0x62c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00e      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a2f      	ldr	r2, [pc, #188]	; (80064dc <HAL_DMA_Abort+0x630>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d009      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a2e      	ldr	r2, [pc, #184]	; (80064e0 <HAL_DMA_Abort+0x634>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d004      	beq.n	8006436 <HAL_DMA_Abort+0x58a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a2c      	ldr	r2, [pc, #176]	; (80064e4 <HAL_DMA_Abort+0x638>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d101      	bne.n	800643a <HAL_DMA_Abort+0x58e>
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <HAL_DMA_Abort+0x590>
 800643a:	2300      	movs	r3, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d015      	beq.n	800646c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006448:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006460:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800646a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40020010 	.word	0x40020010
 800648c:	40020028 	.word	0x40020028
 8006490:	40020040 	.word	0x40020040
 8006494:	40020058 	.word	0x40020058
 8006498:	40020070 	.word	0x40020070
 800649c:	40020088 	.word	0x40020088
 80064a0:	400200a0 	.word	0x400200a0
 80064a4:	400200b8 	.word	0x400200b8
 80064a8:	40020410 	.word	0x40020410
 80064ac:	40020428 	.word	0x40020428
 80064b0:	40020440 	.word	0x40020440
 80064b4:	40020458 	.word	0x40020458
 80064b8:	40020470 	.word	0x40020470
 80064bc:	40020488 	.word	0x40020488
 80064c0:	400204a0 	.word	0x400204a0
 80064c4:	400204b8 	.word	0x400204b8
 80064c8:	58025408 	.word	0x58025408
 80064cc:	5802541c 	.word	0x5802541c
 80064d0:	58025430 	.word	0x58025430
 80064d4:	58025444 	.word	0x58025444
 80064d8:	58025458 	.word	0x58025458
 80064dc:	5802546c 	.word	0x5802546c
 80064e0:	58025480 	.word	0x58025480
 80064e4:	58025494 	.word	0x58025494

080064e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e237      	b.n	800696a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d004      	beq.n	8006510 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2280      	movs	r2, #128	; 0x80
 800650a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e22c      	b.n	800696a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a5c      	ldr	r2, [pc, #368]	; (8006688 <HAL_DMA_Abort_IT+0x1a0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d04a      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a5b      	ldr	r2, [pc, #364]	; (800668c <HAL_DMA_Abort_IT+0x1a4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d045      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a59      	ldr	r2, [pc, #356]	; (8006690 <HAL_DMA_Abort_IT+0x1a8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d040      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a58      	ldr	r2, [pc, #352]	; (8006694 <HAL_DMA_Abort_IT+0x1ac>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d03b      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a56      	ldr	r2, [pc, #344]	; (8006698 <HAL_DMA_Abort_IT+0x1b0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d036      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a55      	ldr	r2, [pc, #340]	; (800669c <HAL_DMA_Abort_IT+0x1b4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d031      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a53      	ldr	r2, [pc, #332]	; (80066a0 <HAL_DMA_Abort_IT+0x1b8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d02c      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a52      	ldr	r2, [pc, #328]	; (80066a4 <HAL_DMA_Abort_IT+0x1bc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d027      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a50      	ldr	r2, [pc, #320]	; (80066a8 <HAL_DMA_Abort_IT+0x1c0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d022      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a4f      	ldr	r2, [pc, #316]	; (80066ac <HAL_DMA_Abort_IT+0x1c4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d01d      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a4d      	ldr	r2, [pc, #308]	; (80066b0 <HAL_DMA_Abort_IT+0x1c8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d018      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a4c      	ldr	r2, [pc, #304]	; (80066b4 <HAL_DMA_Abort_IT+0x1cc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d013      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a4a      	ldr	r2, [pc, #296]	; (80066b8 <HAL_DMA_Abort_IT+0x1d0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00e      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a49      	ldr	r2, [pc, #292]	; (80066bc <HAL_DMA_Abort_IT+0x1d4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d009      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a47      	ldr	r2, [pc, #284]	; (80066c0 <HAL_DMA_Abort_IT+0x1d8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xc8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a46      	ldr	r2, [pc, #280]	; (80066c4 <HAL_DMA_Abort_IT+0x1dc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d101      	bne.n	80065b4 <HAL_DMA_Abort_IT+0xcc>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <HAL_DMA_Abort_IT+0xce>
 80065b4:	2300      	movs	r3, #0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8086 	beq.w	80066c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2204      	movs	r2, #4
 80065c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a2f      	ldr	r2, [pc, #188]	; (8006688 <HAL_DMA_Abort_IT+0x1a0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d04a      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a2e      	ldr	r2, [pc, #184]	; (800668c <HAL_DMA_Abort_IT+0x1a4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d045      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a2c      	ldr	r2, [pc, #176]	; (8006690 <HAL_DMA_Abort_IT+0x1a8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d040      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a2b      	ldr	r2, [pc, #172]	; (8006694 <HAL_DMA_Abort_IT+0x1ac>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d03b      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a29      	ldr	r2, [pc, #164]	; (8006698 <HAL_DMA_Abort_IT+0x1b0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d036      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a28      	ldr	r2, [pc, #160]	; (800669c <HAL_DMA_Abort_IT+0x1b4>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d031      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a26      	ldr	r2, [pc, #152]	; (80066a0 <HAL_DMA_Abort_IT+0x1b8>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d02c      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a25      	ldr	r2, [pc, #148]	; (80066a4 <HAL_DMA_Abort_IT+0x1bc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d027      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a23      	ldr	r2, [pc, #140]	; (80066a8 <HAL_DMA_Abort_IT+0x1c0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d022      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a22      	ldr	r2, [pc, #136]	; (80066ac <HAL_DMA_Abort_IT+0x1c4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d01d      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a20      	ldr	r2, [pc, #128]	; (80066b0 <HAL_DMA_Abort_IT+0x1c8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d018      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a1f      	ldr	r2, [pc, #124]	; (80066b4 <HAL_DMA_Abort_IT+0x1cc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1d      	ldr	r2, [pc, #116]	; (80066b8 <HAL_DMA_Abort_IT+0x1d0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00e      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <HAL_DMA_Abort_IT+0x1d4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d009      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1a      	ldr	r2, [pc, #104]	; (80066c0 <HAL_DMA_Abort_IT+0x1d8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <HAL_DMA_Abort_IT+0x17c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a19      	ldr	r2, [pc, #100]	; (80066c4 <HAL_DMA_Abort_IT+0x1dc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d108      	bne.n	8006676 <HAL_DMA_Abort_IT+0x18e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	e178      	b.n	8006968 <HAL_DMA_Abort_IT+0x480>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0201 	bic.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	e16f      	b.n	8006968 <HAL_DMA_Abort_IT+0x480>
 8006688:	40020010 	.word	0x40020010
 800668c:	40020028 	.word	0x40020028
 8006690:	40020040 	.word	0x40020040
 8006694:	40020058 	.word	0x40020058
 8006698:	40020070 	.word	0x40020070
 800669c:	40020088 	.word	0x40020088
 80066a0:	400200a0 	.word	0x400200a0
 80066a4:	400200b8 	.word	0x400200b8
 80066a8:	40020410 	.word	0x40020410
 80066ac:	40020428 	.word	0x40020428
 80066b0:	40020440 	.word	0x40020440
 80066b4:	40020458 	.word	0x40020458
 80066b8:	40020470 	.word	0x40020470
 80066bc:	40020488 	.word	0x40020488
 80066c0:	400204a0 	.word	0x400204a0
 80066c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 020e 	bic.w	r2, r2, #14
 80066d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a6c      	ldr	r2, [pc, #432]	; (8006890 <HAL_DMA_Abort_IT+0x3a8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d04a      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a6b      	ldr	r2, [pc, #428]	; (8006894 <HAL_DMA_Abort_IT+0x3ac>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d045      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a69      	ldr	r2, [pc, #420]	; (8006898 <HAL_DMA_Abort_IT+0x3b0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d040      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a68      	ldr	r2, [pc, #416]	; (800689c <HAL_DMA_Abort_IT+0x3b4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d03b      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a66      	ldr	r2, [pc, #408]	; (80068a0 <HAL_DMA_Abort_IT+0x3b8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d036      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a65      	ldr	r2, [pc, #404]	; (80068a4 <HAL_DMA_Abort_IT+0x3bc>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d031      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a63      	ldr	r2, [pc, #396]	; (80068a8 <HAL_DMA_Abort_IT+0x3c0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d02c      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a62      	ldr	r2, [pc, #392]	; (80068ac <HAL_DMA_Abort_IT+0x3c4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d027      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a60      	ldr	r2, [pc, #384]	; (80068b0 <HAL_DMA_Abort_IT+0x3c8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d022      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a5f      	ldr	r2, [pc, #380]	; (80068b4 <HAL_DMA_Abort_IT+0x3cc>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d01d      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a5d      	ldr	r2, [pc, #372]	; (80068b8 <HAL_DMA_Abort_IT+0x3d0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d018      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a5c      	ldr	r2, [pc, #368]	; (80068bc <HAL_DMA_Abort_IT+0x3d4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d013      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a5a      	ldr	r2, [pc, #360]	; (80068c0 <HAL_DMA_Abort_IT+0x3d8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00e      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a59      	ldr	r2, [pc, #356]	; (80068c4 <HAL_DMA_Abort_IT+0x3dc>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d009      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a57      	ldr	r2, [pc, #348]	; (80068c8 <HAL_DMA_Abort_IT+0x3e0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d004      	beq.n	8006778 <HAL_DMA_Abort_IT+0x290>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a56      	ldr	r2, [pc, #344]	; (80068cc <HAL_DMA_Abort_IT+0x3e4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d108      	bne.n	800678a <HAL_DMA_Abort_IT+0x2a2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	e007      	b.n	800679a <HAL_DMA_Abort_IT+0x2b2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0201 	bic.w	r2, r2, #1
 8006798:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a3c      	ldr	r2, [pc, #240]	; (8006890 <HAL_DMA_Abort_IT+0x3a8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d072      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a3a      	ldr	r2, [pc, #232]	; (8006894 <HAL_DMA_Abort_IT+0x3ac>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d06d      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a39      	ldr	r2, [pc, #228]	; (8006898 <HAL_DMA_Abort_IT+0x3b0>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d068      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a37      	ldr	r2, [pc, #220]	; (800689c <HAL_DMA_Abort_IT+0x3b4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d063      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a36      	ldr	r2, [pc, #216]	; (80068a0 <HAL_DMA_Abort_IT+0x3b8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d05e      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a34      	ldr	r2, [pc, #208]	; (80068a4 <HAL_DMA_Abort_IT+0x3bc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d059      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a33      	ldr	r2, [pc, #204]	; (80068a8 <HAL_DMA_Abort_IT+0x3c0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d054      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a31      	ldr	r2, [pc, #196]	; (80068ac <HAL_DMA_Abort_IT+0x3c4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d04f      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a30      	ldr	r2, [pc, #192]	; (80068b0 <HAL_DMA_Abort_IT+0x3c8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d04a      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a2e      	ldr	r2, [pc, #184]	; (80068b4 <HAL_DMA_Abort_IT+0x3cc>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d045      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a2d      	ldr	r2, [pc, #180]	; (80068b8 <HAL_DMA_Abort_IT+0x3d0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d040      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a2b      	ldr	r2, [pc, #172]	; (80068bc <HAL_DMA_Abort_IT+0x3d4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d03b      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a2a      	ldr	r2, [pc, #168]	; (80068c0 <HAL_DMA_Abort_IT+0x3d8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d036      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a28      	ldr	r2, [pc, #160]	; (80068c4 <HAL_DMA_Abort_IT+0x3dc>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d031      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a27      	ldr	r2, [pc, #156]	; (80068c8 <HAL_DMA_Abort_IT+0x3e0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d02c      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a25      	ldr	r2, [pc, #148]	; (80068cc <HAL_DMA_Abort_IT+0x3e4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d027      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a24      	ldr	r2, [pc, #144]	; (80068d0 <HAL_DMA_Abort_IT+0x3e8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d022      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <HAL_DMA_Abort_IT+0x3ec>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01d      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <HAL_DMA_Abort_IT+0x3f0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d018      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1f      	ldr	r2, [pc, #124]	; (80068dc <HAL_DMA_Abort_IT+0x3f4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <HAL_DMA_Abort_IT+0x3f8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <HAL_DMA_Abort_IT+0x3fc>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_DMA_Abort_IT+0x400>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <HAL_DMA_Abort_IT+0x3a2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a19      	ldr	r2, [pc, #100]	; (80068ec <HAL_DMA_Abort_IT+0x404>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d132      	bne.n	80068f0 <HAL_DMA_Abort_IT+0x408>
 800688a:	2301      	movs	r3, #1
 800688c:	e031      	b.n	80068f2 <HAL_DMA_Abort_IT+0x40a>
 800688e:	bf00      	nop
 8006890:	40020010 	.word	0x40020010
 8006894:	40020028 	.word	0x40020028
 8006898:	40020040 	.word	0x40020040
 800689c:	40020058 	.word	0x40020058
 80068a0:	40020070 	.word	0x40020070
 80068a4:	40020088 	.word	0x40020088
 80068a8:	400200a0 	.word	0x400200a0
 80068ac:	400200b8 	.word	0x400200b8
 80068b0:	40020410 	.word	0x40020410
 80068b4:	40020428 	.word	0x40020428
 80068b8:	40020440 	.word	0x40020440
 80068bc:	40020458 	.word	0x40020458
 80068c0:	40020470 	.word	0x40020470
 80068c4:	40020488 	.word	0x40020488
 80068c8:	400204a0 	.word	0x400204a0
 80068cc:	400204b8 	.word	0x400204b8
 80068d0:	58025408 	.word	0x58025408
 80068d4:	5802541c 	.word	0x5802541c
 80068d8:	58025430 	.word	0x58025430
 80068dc:	58025444 	.word	0x58025444
 80068e0:	58025458 	.word	0x58025458
 80068e4:	5802546c 	.word	0x5802546c
 80068e8:	58025480 	.word	0x58025480
 80068ec:	58025494 	.word	0x58025494
 80068f0:	2300      	movs	r3, #0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d028      	beq.n	8006948 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006904:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006910:	f003 031f 	and.w	r3, r3, #31
 8006914:	2201      	movs	r2, #1
 8006916:	409a      	lsls	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006924:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00c      	beq.n	8006948 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800693c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006946:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop

08006974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006974:	b480      	push	{r7}
 8006976:	b089      	sub	sp, #36	; 0x24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006982:	4b89      	ldr	r3, [pc, #548]	; (8006ba8 <HAL_GPIO_Init+0x234>)
 8006984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006986:	e194      	b.n	8006cb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	2101      	movs	r1, #1
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	fa01 f303 	lsl.w	r3, r1, r3
 8006994:	4013      	ands	r3, r2
 8006996:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8186 	beq.w	8006cac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d005      	beq.n	80069b8 <HAL_GPIO_Init+0x44>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d130      	bne.n	8006a1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	2203      	movs	r2, #3
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	43db      	mvns	r3, r3
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	4013      	ands	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4313      	orrs	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069ee:	2201      	movs	r2, #1
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	fa02 f303 	lsl.w	r3, r2, r3
 80069f6:	43db      	mvns	r3, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	4013      	ands	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	091b      	lsrs	r3, r3, #4
 8006a04:	f003 0201 	and.w	r2, r3, #1
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d017      	beq.n	8006a56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	2203      	movs	r2, #3
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	43db      	mvns	r3, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d123      	bne.n	8006aaa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	08da      	lsrs	r2, r3, #3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3208      	adds	r2, #8
 8006a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	220f      	movs	r2, #15
 8006a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7e:	43db      	mvns	r3, r3
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	4013      	ands	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	08da      	lsrs	r2, r3, #3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3208      	adds	r2, #8
 8006aa4:	69b9      	ldr	r1, [r7, #24]
 8006aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	43db      	mvns	r3, r3
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f003 0203 	and.w	r2, r3, #3
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 80e0 	beq.w	8006cac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aec:	4b2f      	ldr	r3, [pc, #188]	; (8006bac <HAL_GPIO_Init+0x238>)
 8006aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006af2:	4a2e      	ldr	r2, [pc, #184]	; (8006bac <HAL_GPIO_Init+0x238>)
 8006af4:	f043 0302 	orr.w	r3, r3, #2
 8006af8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006afc:	4b2b      	ldr	r3, [pc, #172]	; (8006bac <HAL_GPIO_Init+0x238>)
 8006afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b0a:	4a29      	ldr	r2, [pc, #164]	; (8006bb0 <HAL_GPIO_Init+0x23c>)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	089b      	lsrs	r3, r3, #2
 8006b10:	3302      	adds	r3, #2
 8006b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	220f      	movs	r2, #15
 8006b22:	fa02 f303 	lsl.w	r3, r2, r3
 8006b26:	43db      	mvns	r3, r3
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a20      	ldr	r2, [pc, #128]	; (8006bb4 <HAL_GPIO_Init+0x240>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d052      	beq.n	8006bdc <HAL_GPIO_Init+0x268>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <HAL_GPIO_Init+0x244>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d031      	beq.n	8006ba2 <HAL_GPIO_Init+0x22e>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a1e      	ldr	r2, [pc, #120]	; (8006bbc <HAL_GPIO_Init+0x248>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d02b      	beq.n	8006b9e <HAL_GPIO_Init+0x22a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a1d      	ldr	r2, [pc, #116]	; (8006bc0 <HAL_GPIO_Init+0x24c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d025      	beq.n	8006b9a <HAL_GPIO_Init+0x226>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a1c      	ldr	r2, [pc, #112]	; (8006bc4 <HAL_GPIO_Init+0x250>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d01f      	beq.n	8006b96 <HAL_GPIO_Init+0x222>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a1b      	ldr	r2, [pc, #108]	; (8006bc8 <HAL_GPIO_Init+0x254>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d019      	beq.n	8006b92 <HAL_GPIO_Init+0x21e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1a      	ldr	r2, [pc, #104]	; (8006bcc <HAL_GPIO_Init+0x258>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d013      	beq.n	8006b8e <HAL_GPIO_Init+0x21a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a19      	ldr	r2, [pc, #100]	; (8006bd0 <HAL_GPIO_Init+0x25c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00d      	beq.n	8006b8a <HAL_GPIO_Init+0x216>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a18      	ldr	r2, [pc, #96]	; (8006bd4 <HAL_GPIO_Init+0x260>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d007      	beq.n	8006b86 <HAL_GPIO_Init+0x212>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a17      	ldr	r2, [pc, #92]	; (8006bd8 <HAL_GPIO_Init+0x264>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d101      	bne.n	8006b82 <HAL_GPIO_Init+0x20e>
 8006b7e:	2309      	movs	r3, #9
 8006b80:	e02d      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b82:	230a      	movs	r3, #10
 8006b84:	e02b      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b86:	2308      	movs	r3, #8
 8006b88:	e029      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b8a:	2307      	movs	r3, #7
 8006b8c:	e027      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b8e:	2306      	movs	r3, #6
 8006b90:	e025      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b92:	2305      	movs	r3, #5
 8006b94:	e023      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b96:	2304      	movs	r3, #4
 8006b98:	e021      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e01f      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e01d      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e01b      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006ba6:	bf00      	nop
 8006ba8:	58000080 	.word	0x58000080
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	58000400 	.word	0x58000400
 8006bb4:	58020000 	.word	0x58020000
 8006bb8:	58020400 	.word	0x58020400
 8006bbc:	58020800 	.word	0x58020800
 8006bc0:	58020c00 	.word	0x58020c00
 8006bc4:	58021000 	.word	0x58021000
 8006bc8:	58021400 	.word	0x58021400
 8006bcc:	58021800 	.word	0x58021800
 8006bd0:	58021c00 	.word	0x58021c00
 8006bd4:	58022000 	.word	0x58022000
 8006bd8:	58022400 	.word	0x58022400
 8006bdc:	2300      	movs	r3, #0
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	f002 0203 	and.w	r2, r2, #3
 8006be4:	0092      	lsls	r2, r2, #2
 8006be6:	4093      	lsls	r3, r2
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bee:	4938      	ldr	r1, [pc, #224]	; (8006cd0 <HAL_GPIO_Init+0x35c>)
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	089b      	lsrs	r3, r3, #2
 8006bf4:	3302      	adds	r3, #2
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	43db      	mvns	r3, r3
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	43db      	mvns	r3, r3
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	43db      	mvns	r3, r3
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	4013      	ands	r3, r2
 8006c66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f47f ae63 	bne.w	8006988 <HAL_GPIO_Init+0x14>
  }
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	3724      	adds	r7, #36	; 0x24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	58000400 	.word	0x58000400

08006cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	887b      	ldrh	r3, [r7, #2]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cec:	2301      	movs	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
 8006cf0:	e001      	b.n	8006cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	807b      	strh	r3, [r7, #2]
 8006d10:	4613      	mov	r3, r2
 8006d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d14:	787b      	ldrb	r3, [r7, #1]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d1a:	887a      	ldrh	r2, [r7, #2]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d20:	e003      	b.n	8006d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d22:	887b      	ldrh	r3, [r7, #2]
 8006d24:	041a      	lsls	r2, r3, #16
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	619a      	str	r2, [r3, #24]
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d48:	88fb      	ldrh	r3, [r7, #6]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d008      	beq.n	8006d62 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fb ff03 	bl	8002b68 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006d74:	4b19      	ldr	r3, [pc, #100]	; (8006ddc <HAL_PWREx_ConfigSupply+0x70>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d00a      	beq.n	8006d96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006d80:	4b16      	ldr	r3, [pc, #88]	; (8006ddc <HAL_PWREx_ConfigSupply+0x70>)
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d001      	beq.n	8006d92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e01f      	b.n	8006dd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e01d      	b.n	8006dd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d96:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <HAL_PWREx_ConfigSupply+0x70>)
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f023 0207 	bic.w	r2, r3, #7
 8006d9e:	490f      	ldr	r1, [pc, #60]	; (8006ddc <HAL_PWREx_ConfigSupply+0x70>)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006da6:	f7fe ff03 	bl	8005bb0 <HAL_GetTick>
 8006daa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006dac:	e009      	b.n	8006dc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006dae:	f7fe feff 	bl	8005bb0 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dbc:	d901      	bls.n	8006dc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e007      	b.n	8006dd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006dc2:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <HAL_PWREx_ConfigSupply+0x70>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dce:	d1ee      	bne.n	8006dae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	58024800 	.word	0x58024800

08006de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08c      	sub	sp, #48	; 0x30
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d102      	bne.n	8006df4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f000 bc1d 	b.w	800762e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8087 	beq.w	8006f10 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e02:	4b99      	ldr	r3, [pc, #612]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e0c:	4b96      	ldr	r3, [pc, #600]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e14:	2b10      	cmp	r3, #16
 8006e16:	d007      	beq.n	8006e28 <HAL_RCC_OscConfig+0x48>
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	2b18      	cmp	r3, #24
 8006e1c:	d110      	bne.n	8006e40 <HAL_RCC_OscConfig+0x60>
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d10b      	bne.n	8006e40 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e28:	4b8f      	ldr	r3, [pc, #572]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d06c      	beq.n	8006f0e <HAL_RCC_OscConfig+0x12e>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d168      	bne.n	8006f0e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e3f6      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e48:	d106      	bne.n	8006e58 <HAL_RCC_OscConfig+0x78>
 8006e4a:	4b87      	ldr	r3, [pc, #540]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a86      	ldr	r2, [pc, #536]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	e02e      	b.n	8006eb6 <HAL_RCC_OscConfig+0xd6>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10c      	bne.n	8006e7a <HAL_RCC_OscConfig+0x9a>
 8006e60:	4b81      	ldr	r3, [pc, #516]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a80      	ldr	r2, [pc, #512]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	4b7e      	ldr	r3, [pc, #504]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a7d      	ldr	r2, [pc, #500]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	e01d      	b.n	8006eb6 <HAL_RCC_OscConfig+0xd6>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e82:	d10c      	bne.n	8006e9e <HAL_RCC_OscConfig+0xbe>
 8006e84:	4b78      	ldr	r3, [pc, #480]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a77      	ldr	r2, [pc, #476]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	4b75      	ldr	r3, [pc, #468]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a74      	ldr	r2, [pc, #464]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	e00b      	b.n	8006eb6 <HAL_RCC_OscConfig+0xd6>
 8006e9e:	4b72      	ldr	r3, [pc, #456]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a71      	ldr	r2, [pc, #452]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ea8:	6013      	str	r3, [r2, #0]
 8006eaa:	4b6f      	ldr	r3, [pc, #444]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a6e      	ldr	r2, [pc, #440]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eb4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d013      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebe:	f7fe fe77 	bl	8005bb0 <HAL_GetTick>
 8006ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ec6:	f7fe fe73 	bl	8005bb0 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b64      	cmp	r3, #100	; 0x64
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e3aa      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ed8:	4b63      	ldr	r3, [pc, #396]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0f0      	beq.n	8006ec6 <HAL_RCC_OscConfig+0xe6>
 8006ee4:	e014      	b.n	8006f10 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee6:	f7fe fe63 	bl	8005bb0 <HAL_GetTick>
 8006eea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006eec:	e008      	b.n	8006f00 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006eee:	f7fe fe5f 	bl	8005bb0 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b64      	cmp	r3, #100	; 0x64
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e396      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f00:	4b59      	ldr	r3, [pc, #356]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f0      	bne.n	8006eee <HAL_RCC_OscConfig+0x10e>
 8006f0c:	e000      	b.n	8006f10 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 80cb 	beq.w	80070b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f1e:	4b52      	ldr	r3, [pc, #328]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f26:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f28:	4b4f      	ldr	r3, [pc, #316]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <HAL_RCC_OscConfig+0x164>
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	2b18      	cmp	r3, #24
 8006f38:	d156      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x208>
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d151      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f44:	4b48      	ldr	r3, [pc, #288]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <HAL_RCC_OscConfig+0x17c>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e368      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f5c:	4b42      	ldr	r3, [pc, #264]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f023 0219 	bic.w	r2, r3, #25
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	493f      	ldr	r1, [pc, #252]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f6e:	f7fe fe1f 	bl	8005bb0 <HAL_GetTick>
 8006f72:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f76:	f7fe fe1b 	bl	8005bb0 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e352      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f88:	4b37      	ldr	r3, [pc, #220]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f94:	f7fe fe3c 	bl	8005c10 <HAL_GetREVID>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d817      	bhi.n	8006fd2 <HAL_RCC_OscConfig+0x1f2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b40      	cmp	r3, #64	; 0x40
 8006fa8:	d108      	bne.n	8006fbc <HAL_RCC_OscConfig+0x1dc>
 8006faa:	4b2f      	ldr	r3, [pc, #188]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006fb2:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fba:	e07b      	b.n	80070b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fbc:	4b2a      	ldr	r3, [pc, #168]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	031b      	lsls	r3, r3, #12
 8006fca:	4927      	ldr	r1, [pc, #156]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fd0:	e070      	b.n	80070b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fd2:	4b25      	ldr	r3, [pc, #148]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	061b      	lsls	r3, r3, #24
 8006fe0:	4921      	ldr	r1, [pc, #132]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fe6:	e065      	b.n	80070b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d048      	beq.n	8007082 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ff0:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f023 0219 	bic.w	r2, r3, #25
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	491a      	ldr	r1, [pc, #104]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007002:	f7fe fdd5 	bl	8005bb0 <HAL_GetTick>
 8007006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007008:	e008      	b.n	800701c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800700a:	f7fe fdd1 	bl	8005bb0 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d901      	bls.n	800701c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e308      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800701c:	4b12      	ldr	r3, [pc, #72]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d0f0      	beq.n	800700a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007028:	f7fe fdf2 	bl	8005c10 <HAL_GetREVID>
 800702c:	4603      	mov	r3, r0
 800702e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007032:	4293      	cmp	r3, r2
 8007034:	d81a      	bhi.n	800706c <HAL_RCC_OscConfig+0x28c>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d108      	bne.n	8007050 <HAL_RCC_OscConfig+0x270>
 800703e:	4b0a      	ldr	r3, [pc, #40]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007046:	4a08      	ldr	r2, [pc, #32]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8007048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800704c:	6053      	str	r3, [r2, #4]
 800704e:	e031      	b.n	80070b4 <HAL_RCC_OscConfig+0x2d4>
 8007050:	4b05      	ldr	r3, [pc, #20]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	031b      	lsls	r3, r3, #12
 800705e:	4902      	ldr	r1, [pc, #8]	; (8007068 <HAL_RCC_OscConfig+0x288>)
 8007060:	4313      	orrs	r3, r2
 8007062:	604b      	str	r3, [r1, #4]
 8007064:	e026      	b.n	80070b4 <HAL_RCC_OscConfig+0x2d4>
 8007066:	bf00      	nop
 8007068:	58024400 	.word	0x58024400
 800706c:	4b9a      	ldr	r3, [pc, #616]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	061b      	lsls	r3, r3, #24
 800707a:	4997      	ldr	r1, [pc, #604]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 800707c:	4313      	orrs	r3, r2
 800707e:	604b      	str	r3, [r1, #4]
 8007080:	e018      	b.n	80070b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007082:	4b95      	ldr	r3, [pc, #596]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a94      	ldr	r2, [pc, #592]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 8007088:	f023 0301 	bic.w	r3, r3, #1
 800708c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708e:	f7fe fd8f 	bl	8005bb0 <HAL_GetTick>
 8007092:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007096:	f7fe fd8b 	bl	8005bb0 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e2c2      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80070a8:	4b8b      	ldr	r3, [pc, #556]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1f0      	bne.n	8007096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80a9 	beq.w	8007214 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070c2:	4b85      	ldr	r3, [pc, #532]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070cc:	4b82      	ldr	r3, [pc, #520]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d007      	beq.n	80070e8 <HAL_RCC_OscConfig+0x308>
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b18      	cmp	r3, #24
 80070dc:	d13a      	bne.n	8007154 <HAL_RCC_OscConfig+0x374>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f003 0303 	and.w	r3, r3, #3
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d135      	bne.n	8007154 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070e8:	4b7b      	ldr	r3, [pc, #492]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_RCC_OscConfig+0x320>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	2b80      	cmp	r3, #128	; 0x80
 80070fa:	d001      	beq.n	8007100 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e296      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007100:	f7fe fd86 	bl	8005c10 <HAL_GetREVID>
 8007104:	4603      	mov	r3, r0
 8007106:	f241 0203 	movw	r2, #4099	; 0x1003
 800710a:	4293      	cmp	r3, r2
 800710c:	d817      	bhi.n	800713e <HAL_RCC_OscConfig+0x35e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	2b20      	cmp	r3, #32
 8007114:	d108      	bne.n	8007128 <HAL_RCC_OscConfig+0x348>
 8007116:	4b70      	ldr	r3, [pc, #448]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800711e:	4a6e      	ldr	r2, [pc, #440]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 8007120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007124:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007126:	e075      	b.n	8007214 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007128:	4b6b      	ldr	r3, [pc, #428]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	069b      	lsls	r3, r3, #26
 8007136:	4968      	ldr	r1, [pc, #416]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 8007138:	4313      	orrs	r3, r2
 800713a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800713c:	e06a      	b.n	8007214 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800713e:	4b66      	ldr	r3, [pc, #408]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	061b      	lsls	r3, r3, #24
 800714c:	4962      	ldr	r1, [pc, #392]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 800714e:	4313      	orrs	r3, r2
 8007150:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007152:	e05f      	b.n	8007214 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d042      	beq.n	80071e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800715c:	4b5e      	ldr	r3, [pc, #376]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a5d      	ldr	r2, [pc, #372]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 8007162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fe fd22 	bl	8005bb0 <HAL_GetTick>
 800716c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007170:	f7fe fd1e 	bl	8005bb0 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e255      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007182:	4b55      	ldr	r3, [pc, #340]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800718e:	f7fe fd3f 	bl	8005c10 <HAL_GetREVID>
 8007192:	4603      	mov	r3, r0
 8007194:	f241 0203 	movw	r2, #4099	; 0x1003
 8007198:	4293      	cmp	r3, r2
 800719a:	d817      	bhi.n	80071cc <HAL_RCC_OscConfig+0x3ec>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d108      	bne.n	80071b6 <HAL_RCC_OscConfig+0x3d6>
 80071a4:	4b4c      	ldr	r3, [pc, #304]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80071ac:	4a4a      	ldr	r2, [pc, #296]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80071ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071b2:	6053      	str	r3, [r2, #4]
 80071b4:	e02e      	b.n	8007214 <HAL_RCC_OscConfig+0x434>
 80071b6:	4b48      	ldr	r3, [pc, #288]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	069b      	lsls	r3, r3, #26
 80071c4:	4944      	ldr	r1, [pc, #272]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	604b      	str	r3, [r1, #4]
 80071ca:	e023      	b.n	8007214 <HAL_RCC_OscConfig+0x434>
 80071cc:	4b42      	ldr	r3, [pc, #264]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	061b      	lsls	r3, r3, #24
 80071da:	493f      	ldr	r1, [pc, #252]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	60cb      	str	r3, [r1, #12]
 80071e0:	e018      	b.n	8007214 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80071e2:	4b3d      	ldr	r3, [pc, #244]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a3c      	ldr	r2, [pc, #240]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80071e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ee:	f7fe fcdf 	bl	8005bb0 <HAL_GetTick>
 80071f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80071f6:	f7fe fcdb 	bl	8005bb0 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e212      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007208:	4b33      	ldr	r3, [pc, #204]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1f0      	bne.n	80071f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b00      	cmp	r3, #0
 800721e:	d036      	beq.n	800728e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d019      	beq.n	800725c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007228:	4b2b      	ldr	r3, [pc, #172]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 800722a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800722c:	4a2a      	ldr	r2, [pc, #168]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007234:	f7fe fcbc 	bl	8005bb0 <HAL_GetTick>
 8007238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800723a:	e008      	b.n	800724e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800723c:	f7fe fcb8 	bl	8005bb0 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d901      	bls.n	800724e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e1ef      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800724e:	4b22      	ldr	r3, [pc, #136]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 8007250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0f0      	beq.n	800723c <HAL_RCC_OscConfig+0x45c>
 800725a:	e018      	b.n	800728e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800725c:	4b1e      	ldr	r3, [pc, #120]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 800725e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007260:	4a1d      	ldr	r2, [pc, #116]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 8007262:	f023 0301 	bic.w	r3, r3, #1
 8007266:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007268:	f7fe fca2 	bl	8005bb0 <HAL_GetTick>
 800726c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007270:	f7fe fc9e 	bl	8005bb0 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e1d5      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007282:	4b15      	ldr	r3, [pc, #84]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 8007284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f0      	bne.n	8007270 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b00      	cmp	r3, #0
 8007298:	d039      	beq.n	800730e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d01c      	beq.n	80072dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a0c      	ldr	r2, [pc, #48]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80072a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072ae:	f7fe fc7f 	bl	8005bb0 <HAL_GetTick>
 80072b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072b4:	e008      	b.n	80072c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072b6:	f7fe fc7b 	bl	8005bb0 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e1b2      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072c8:	4b03      	ldr	r3, [pc, #12]	; (80072d8 <HAL_RCC_OscConfig+0x4f8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0f0      	beq.n	80072b6 <HAL_RCC_OscConfig+0x4d6>
 80072d4:	e01b      	b.n	800730e <HAL_RCC_OscConfig+0x52e>
 80072d6:	bf00      	nop
 80072d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072dc:	4b9b      	ldr	r3, [pc, #620]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a9a      	ldr	r2, [pc, #616]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80072e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072e8:	f7fe fc62 	bl	8005bb0 <HAL_GetTick>
 80072ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072ee:	e008      	b.n	8007302 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072f0:	f7fe fc5e 	bl	8005bb0 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e195      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007302:	4b92      	ldr	r3, [pc, #584]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1f0      	bne.n	80072f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0304 	and.w	r3, r3, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8081 	beq.w	800741e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800731c:	4b8c      	ldr	r3, [pc, #560]	; (8007550 <HAL_RCC_OscConfig+0x770>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a8b      	ldr	r2, [pc, #556]	; (8007550 <HAL_RCC_OscConfig+0x770>)
 8007322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007326:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007328:	f7fe fc42 	bl	8005bb0 <HAL_GetTick>
 800732c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800732e:	e008      	b.n	8007342 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007330:	f7fe fc3e 	bl	8005bb0 <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b64      	cmp	r3, #100	; 0x64
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e175      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007342:	4b83      	ldr	r3, [pc, #524]	; (8007550 <HAL_RCC_OscConfig+0x770>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0f0      	beq.n	8007330 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d106      	bne.n	8007364 <HAL_RCC_OscConfig+0x584>
 8007356:	4b7d      	ldr	r3, [pc, #500]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735a:	4a7c      	ldr	r2, [pc, #496]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 800735c:	f043 0301 	orr.w	r3, r3, #1
 8007360:	6713      	str	r3, [r2, #112]	; 0x70
 8007362:	e02d      	b.n	80073c0 <HAL_RCC_OscConfig+0x5e0>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10c      	bne.n	8007386 <HAL_RCC_OscConfig+0x5a6>
 800736c:	4b77      	ldr	r3, [pc, #476]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 800736e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007370:	4a76      	ldr	r2, [pc, #472]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007372:	f023 0301 	bic.w	r3, r3, #1
 8007376:	6713      	str	r3, [r2, #112]	; 0x70
 8007378:	4b74      	ldr	r3, [pc, #464]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737c:	4a73      	ldr	r2, [pc, #460]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 800737e:	f023 0304 	bic.w	r3, r3, #4
 8007382:	6713      	str	r3, [r2, #112]	; 0x70
 8007384:	e01c      	b.n	80073c0 <HAL_RCC_OscConfig+0x5e0>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b05      	cmp	r3, #5
 800738c:	d10c      	bne.n	80073a8 <HAL_RCC_OscConfig+0x5c8>
 800738e:	4b6f      	ldr	r3, [pc, #444]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007392:	4a6e      	ldr	r2, [pc, #440]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007394:	f043 0304 	orr.w	r3, r3, #4
 8007398:	6713      	str	r3, [r2, #112]	; 0x70
 800739a:	4b6c      	ldr	r3, [pc, #432]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 800739c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739e:	4a6b      	ldr	r2, [pc, #428]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80073a0:	f043 0301 	orr.w	r3, r3, #1
 80073a4:	6713      	str	r3, [r2, #112]	; 0x70
 80073a6:	e00b      	b.n	80073c0 <HAL_RCC_OscConfig+0x5e0>
 80073a8:	4b68      	ldr	r3, [pc, #416]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80073aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ac:	4a67      	ldr	r2, [pc, #412]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	6713      	str	r3, [r2, #112]	; 0x70
 80073b4:	4b65      	ldr	r3, [pc, #404]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b8:	4a64      	ldr	r2, [pc, #400]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80073ba:	f023 0304 	bic.w	r3, r3, #4
 80073be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d015      	beq.n	80073f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c8:	f7fe fbf2 	bl	8005bb0 <HAL_GetTick>
 80073cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073ce:	e00a      	b.n	80073e6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073d0:	f7fe fbee 	bl	8005bb0 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	f241 3288 	movw	r2, #5000	; 0x1388
 80073de:	4293      	cmp	r3, r2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e123      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073e6:	4b59      	ldr	r3, [pc, #356]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80073e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0ee      	beq.n	80073d0 <HAL_RCC_OscConfig+0x5f0>
 80073f2:	e014      	b.n	800741e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f4:	f7fe fbdc 	bl	8005bb0 <HAL_GetTick>
 80073f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073fa:	e00a      	b.n	8007412 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073fc:	f7fe fbd8 	bl	8005bb0 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	f241 3288 	movw	r2, #5000	; 0x1388
 800740a:	4293      	cmp	r3, r2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e10d      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007412:	4b4e      	ldr	r3, [pc, #312]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1ee      	bne.n	80073fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 8102 	beq.w	800762c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007428:	4b48      	ldr	r3, [pc, #288]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007430:	2b18      	cmp	r3, #24
 8007432:	f000 80bd 	beq.w	80075b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b02      	cmp	r3, #2
 800743c:	f040 809e 	bne.w	800757c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007440:	4b42      	ldr	r3, [pc, #264]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a41      	ldr	r2, [pc, #260]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800744a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744c:	f7fe fbb0 	bl	8005bb0 <HAL_GetTick>
 8007450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007454:	f7fe fbac 	bl	8005bb0 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e0e3      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007466:	4b39      	ldr	r3, [pc, #228]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f0      	bne.n	8007454 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007472:	4b36      	ldr	r3, [pc, #216]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007476:	4b37      	ldr	r3, [pc, #220]	; (8007554 <HAL_RCC_OscConfig+0x774>)
 8007478:	4013      	ands	r3, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007482:	0112      	lsls	r2, r2, #4
 8007484:	430a      	orrs	r2, r1
 8007486:	4931      	ldr	r1, [pc, #196]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007488:	4313      	orrs	r3, r2
 800748a:	628b      	str	r3, [r1, #40]	; 0x28
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007490:	3b01      	subs	r3, #1
 8007492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749a:	3b01      	subs	r3, #1
 800749c:	025b      	lsls	r3, r3, #9
 800749e:	b29b      	uxth	r3, r3
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	3b01      	subs	r3, #1
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b4:	3b01      	subs	r3, #1
 80074b6:	061b      	lsls	r3, r3, #24
 80074b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074bc:	4923      	ldr	r1, [pc, #140]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80074c2:	4b22      	ldr	r3, [pc, #136]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	4a21      	ldr	r2, [pc, #132]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80074c8:	f023 0301 	bic.w	r3, r3, #1
 80074cc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074ce:	4b1f      	ldr	r3, [pc, #124]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80074d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d2:	4b21      	ldr	r3, [pc, #132]	; (8007558 <HAL_RCC_OscConfig+0x778>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80074da:	00d2      	lsls	r2, r2, #3
 80074dc:	491b      	ldr	r1, [pc, #108]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80074e2:	4b1a      	ldr	r3, [pc, #104]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80074e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e6:	f023 020c 	bic.w	r2, r3, #12
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	4917      	ldr	r1, [pc, #92]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80074f4:	4b15      	ldr	r3, [pc, #84]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	f023 0202 	bic.w	r2, r3, #2
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007500:	4912      	ldr	r1, [pc, #72]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007502:	4313      	orrs	r3, r2
 8007504:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007506:	4b11      	ldr	r3, [pc, #68]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	4a10      	ldr	r2, [pc, #64]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 800750c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007510:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007512:	4b0e      	ldr	r3, [pc, #56]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	4a0d      	ldr	r2, [pc, #52]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800751c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800751e:	4b0b      	ldr	r3, [pc, #44]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	4a0a      	ldr	r2, [pc, #40]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800752a:	4b08      	ldr	r3, [pc, #32]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	4a07      	ldr	r2, [pc, #28]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007530:	f043 0301 	orr.w	r3, r3, #1
 8007534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a04      	ldr	r2, [pc, #16]	; (800754c <HAL_RCC_OscConfig+0x76c>)
 800753c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007542:	f7fe fb35 	bl	8005bb0 <HAL_GetTick>
 8007546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007548:	e011      	b.n	800756e <HAL_RCC_OscConfig+0x78e>
 800754a:	bf00      	nop
 800754c:	58024400 	.word	0x58024400
 8007550:	58024800 	.word	0x58024800
 8007554:	fffffc0c 	.word	0xfffffc0c
 8007558:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800755c:	f7fe fb28 	bl	8005bb0 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e05f      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800756e:	4b32      	ldr	r3, [pc, #200]	; (8007638 <HAL_RCC_OscConfig+0x858>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f0      	beq.n	800755c <HAL_RCC_OscConfig+0x77c>
 800757a:	e057      	b.n	800762c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800757c:	4b2e      	ldr	r3, [pc, #184]	; (8007638 <HAL_RCC_OscConfig+0x858>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a2d      	ldr	r2, [pc, #180]	; (8007638 <HAL_RCC_OscConfig+0x858>)
 8007582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007588:	f7fe fb12 	bl	8005bb0 <HAL_GetTick>
 800758c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007590:	f7fe fb0e 	bl	8005bb0 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e045      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075a2:	4b25      	ldr	r3, [pc, #148]	; (8007638 <HAL_RCC_OscConfig+0x858>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1f0      	bne.n	8007590 <HAL_RCC_OscConfig+0x7b0>
 80075ae:	e03d      	b.n	800762c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80075b0:	4b21      	ldr	r3, [pc, #132]	; (8007638 <HAL_RCC_OscConfig+0x858>)
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80075b6:	4b20      	ldr	r3, [pc, #128]	; (8007638 <HAL_RCC_OscConfig+0x858>)
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d031      	beq.n	8007628 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f003 0203 	and.w	r2, r3, #3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d12a      	bne.n	8007628 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	091b      	lsrs	r3, r3, #4
 80075d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075de:	429a      	cmp	r2, r3
 80075e0:	d122      	bne.n	8007628 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d11a      	bne.n	8007628 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	0a5b      	lsrs	r3, r3, #9
 80075f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007600:	429a      	cmp	r2, r3
 8007602:	d111      	bne.n	8007628 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	0c1b      	lsrs	r3, r3, #16
 8007608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007612:	429a      	cmp	r2, r3
 8007614:	d108      	bne.n	8007628 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	0e1b      	lsrs	r3, r3, #24
 800761a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007622:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007624:	429a      	cmp	r2, r3
 8007626:	d001      	beq.n	800762c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e000      	b.n	800762e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3730      	adds	r7, #48	; 0x30
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	58024400 	.word	0x58024400

0800763c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e19c      	b.n	800798a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007650:	4b8a      	ldr	r3, [pc, #552]	; (800787c <HAL_RCC_ClockConfig+0x240>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d910      	bls.n	8007680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800765e:	4b87      	ldr	r3, [pc, #540]	; (800787c <HAL_RCC_ClockConfig+0x240>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f023 020f 	bic.w	r2, r3, #15
 8007666:	4985      	ldr	r1, [pc, #532]	; (800787c <HAL_RCC_ClockConfig+0x240>)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	4313      	orrs	r3, r2
 800766c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800766e:	4b83      	ldr	r3, [pc, #524]	; (800787c <HAL_RCC_ClockConfig+0x240>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 030f 	and.w	r3, r3, #15
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d001      	beq.n	8007680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e184      	b.n	800798a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d010      	beq.n	80076ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	4b7b      	ldr	r3, [pc, #492]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007698:	429a      	cmp	r2, r3
 800769a:	d908      	bls.n	80076ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800769c:	4b78      	ldr	r3, [pc, #480]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	4975      	ldr	r1, [pc, #468]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d010      	beq.n	80076dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	695a      	ldr	r2, [r3, #20]
 80076be:	4b70      	ldr	r3, [pc, #448]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d908      	bls.n	80076dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076ca:	4b6d      	ldr	r3, [pc, #436]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	496a      	ldr	r1, [pc, #424]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d010      	beq.n	800770a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	699a      	ldr	r2, [r3, #24]
 80076ec:	4b64      	ldr	r3, [pc, #400]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d908      	bls.n	800770a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076f8:	4b61      	ldr	r3, [pc, #388]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	495e      	ldr	r1, [pc, #376]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 8007706:	4313      	orrs	r3, r2
 8007708:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0320 	and.w	r3, r3, #32
 8007712:	2b00      	cmp	r3, #0
 8007714:	d010      	beq.n	8007738 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	69da      	ldr	r2, [r3, #28]
 800771a:	4b59      	ldr	r3, [pc, #356]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007722:	429a      	cmp	r2, r3
 8007724:	d908      	bls.n	8007738 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007726:	4b56      	ldr	r3, [pc, #344]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	4953      	ldr	r1, [pc, #332]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 8007734:	4313      	orrs	r3, r2
 8007736:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d010      	beq.n	8007766 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	4b4d      	ldr	r3, [pc, #308]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	429a      	cmp	r2, r3
 8007752:	d908      	bls.n	8007766 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007754:	4b4a      	ldr	r3, [pc, #296]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	f023 020f 	bic.w	r2, r3, #15
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	4947      	ldr	r1, [pc, #284]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 8007762:	4313      	orrs	r3, r2
 8007764:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d055      	beq.n	800781e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007772:	4b43      	ldr	r3, [pc, #268]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	4940      	ldr	r1, [pc, #256]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 8007780:	4313      	orrs	r3, r2
 8007782:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d107      	bne.n	800779c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800778c:	4b3c      	ldr	r3, [pc, #240]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d121      	bne.n	80077dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e0f6      	b.n	800798a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d107      	bne.n	80077b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80077a4:	4b36      	ldr	r3, [pc, #216]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d115      	bne.n	80077dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e0ea      	b.n	800798a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d107      	bne.n	80077cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077bc:	4b30      	ldr	r3, [pc, #192]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d109      	bne.n	80077dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0de      	b.n	800798a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077cc:	4b2c      	ldr	r3, [pc, #176]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e0d6      	b.n	800798a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077dc:	4b28      	ldr	r3, [pc, #160]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f023 0207 	bic.w	r2, r3, #7
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	4925      	ldr	r1, [pc, #148]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ee:	f7fe f9df 	bl	8005bb0 <HAL_GetTick>
 80077f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077f4:	e00a      	b.n	800780c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077f6:	f7fe f9db 	bl	8005bb0 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	f241 3288 	movw	r2, #5000	; 0x1388
 8007804:	4293      	cmp	r3, r2
 8007806:	d901      	bls.n	800780c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e0be      	b.n	800798a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800780c:	4b1c      	ldr	r3, [pc, #112]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	429a      	cmp	r2, r3
 800781c:	d1eb      	bne.n	80077f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d010      	beq.n	800784c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	4b14      	ldr	r3, [pc, #80]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	429a      	cmp	r2, r3
 8007838:	d208      	bcs.n	800784c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800783a:	4b11      	ldr	r3, [pc, #68]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	f023 020f 	bic.w	r2, r3, #15
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	490e      	ldr	r1, [pc, #56]	; (8007880 <HAL_RCC_ClockConfig+0x244>)
 8007848:	4313      	orrs	r3, r2
 800784a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800784c:	4b0b      	ldr	r3, [pc, #44]	; (800787c <HAL_RCC_ClockConfig+0x240>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d214      	bcs.n	8007884 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800785a:	4b08      	ldr	r3, [pc, #32]	; (800787c <HAL_RCC_ClockConfig+0x240>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f023 020f 	bic.w	r2, r3, #15
 8007862:	4906      	ldr	r1, [pc, #24]	; (800787c <HAL_RCC_ClockConfig+0x240>)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	4313      	orrs	r3, r2
 8007868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800786a:	4b04      	ldr	r3, [pc, #16]	; (800787c <HAL_RCC_ClockConfig+0x240>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d005      	beq.n	8007884 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e086      	b.n	800798a <HAL_RCC_ClockConfig+0x34e>
 800787c:	52002000 	.word	0x52002000
 8007880:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d010      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691a      	ldr	r2, [r3, #16]
 8007894:	4b3f      	ldr	r3, [pc, #252]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800789c:	429a      	cmp	r2, r3
 800789e:	d208      	bcs.n	80078b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078a0:	4b3c      	ldr	r3, [pc, #240]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	4939      	ldr	r1, [pc, #228]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0308 	and.w	r3, r3, #8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d010      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695a      	ldr	r2, [r3, #20]
 80078c2:	4b34      	ldr	r3, [pc, #208]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d208      	bcs.n	80078e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078ce:	4b31      	ldr	r3, [pc, #196]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	492e      	ldr	r1, [pc, #184]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0310 	and.w	r3, r3, #16
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d010      	beq.n	800790e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	4b28      	ldr	r3, [pc, #160]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d208      	bcs.n	800790e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078fc:	4b25      	ldr	r3, [pc, #148]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	4922      	ldr	r1, [pc, #136]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 800790a:	4313      	orrs	r3, r2
 800790c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d010      	beq.n	800793c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69da      	ldr	r2, [r3, #28]
 800791e:	4b1d      	ldr	r3, [pc, #116]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007926:	429a      	cmp	r2, r3
 8007928:	d208      	bcs.n	800793c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800792a:	4b1a      	ldr	r3, [pc, #104]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	4917      	ldr	r1, [pc, #92]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 8007938:	4313      	orrs	r3, r2
 800793a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800793c:	f000 f834 	bl	80079a8 <HAL_RCC_GetSysClockFreq>
 8007940:	4602      	mov	r2, r0
 8007942:	4b14      	ldr	r3, [pc, #80]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	0a1b      	lsrs	r3, r3, #8
 8007948:	f003 030f 	and.w	r3, r3, #15
 800794c:	4912      	ldr	r1, [pc, #72]	; (8007998 <HAL_RCC_ClockConfig+0x35c>)
 800794e:	5ccb      	ldrb	r3, [r1, r3]
 8007950:	f003 031f 	and.w	r3, r3, #31
 8007954:	fa22 f303 	lsr.w	r3, r2, r3
 8007958:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800795a:	4b0e      	ldr	r3, [pc, #56]	; (8007994 <HAL_RCC_ClockConfig+0x358>)
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	4a0d      	ldr	r2, [pc, #52]	; (8007998 <HAL_RCC_ClockConfig+0x35c>)
 8007964:	5cd3      	ldrb	r3, [r2, r3]
 8007966:	f003 031f 	and.w	r3, r3, #31
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	fa22 f303 	lsr.w	r3, r2, r3
 8007970:	4a0a      	ldr	r2, [pc, #40]	; (800799c <HAL_RCC_ClockConfig+0x360>)
 8007972:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007974:	4a0a      	ldr	r2, [pc, #40]	; (80079a0 <HAL_RCC_ClockConfig+0x364>)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800797a:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <HAL_RCC_ClockConfig+0x368>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe f8cc 	bl	8005b1c <HAL_InitTick>
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007988:	7bfb      	ldrb	r3, [r7, #15]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	58024400 	.word	0x58024400
 8007998:	08011088 	.word	0x08011088
 800799c:	24000068 	.word	0x24000068
 80079a0:	24000064 	.word	0x24000064
 80079a4:	2400006c 	.word	0x2400006c

080079a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b089      	sub	sp, #36	; 0x24
 80079ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079ae:	4bb3      	ldr	r3, [pc, #716]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079b6:	2b18      	cmp	r3, #24
 80079b8:	f200 8155 	bhi.w	8007c66 <HAL_RCC_GetSysClockFreq+0x2be>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	08007a29 	.word	0x08007a29
 80079c8:	08007c67 	.word	0x08007c67
 80079cc:	08007c67 	.word	0x08007c67
 80079d0:	08007c67 	.word	0x08007c67
 80079d4:	08007c67 	.word	0x08007c67
 80079d8:	08007c67 	.word	0x08007c67
 80079dc:	08007c67 	.word	0x08007c67
 80079e0:	08007c67 	.word	0x08007c67
 80079e4:	08007a4f 	.word	0x08007a4f
 80079e8:	08007c67 	.word	0x08007c67
 80079ec:	08007c67 	.word	0x08007c67
 80079f0:	08007c67 	.word	0x08007c67
 80079f4:	08007c67 	.word	0x08007c67
 80079f8:	08007c67 	.word	0x08007c67
 80079fc:	08007c67 	.word	0x08007c67
 8007a00:	08007c67 	.word	0x08007c67
 8007a04:	08007a55 	.word	0x08007a55
 8007a08:	08007c67 	.word	0x08007c67
 8007a0c:	08007c67 	.word	0x08007c67
 8007a10:	08007c67 	.word	0x08007c67
 8007a14:	08007c67 	.word	0x08007c67
 8007a18:	08007c67 	.word	0x08007c67
 8007a1c:	08007c67 	.word	0x08007c67
 8007a20:	08007c67 	.word	0x08007c67
 8007a24:	08007a5b 	.word	0x08007a5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a28:	4b94      	ldr	r3, [pc, #592]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d009      	beq.n	8007a48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a34:	4b91      	ldr	r3, [pc, #580]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	08db      	lsrs	r3, r3, #3
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	4a90      	ldr	r2, [pc, #576]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
 8007a44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007a46:	e111      	b.n	8007c6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a48:	4b8d      	ldr	r3, [pc, #564]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a4a:	61bb      	str	r3, [r7, #24]
    break;
 8007a4c:	e10e      	b.n	8007c6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007a4e:	4b8d      	ldr	r3, [pc, #564]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a50:	61bb      	str	r3, [r7, #24]
    break;
 8007a52:	e10b      	b.n	8007c6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007a54:	4b8c      	ldr	r3, [pc, #560]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a56:	61bb      	str	r3, [r7, #24]
    break;
 8007a58:	e108      	b.n	8007c6c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a5a:	4b88      	ldr	r3, [pc, #544]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007a64:	4b85      	ldr	r3, [pc, #532]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	091b      	lsrs	r3, r3, #4
 8007a6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a70:	4b82      	ldr	r3, [pc, #520]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a7a:	4b80      	ldr	r3, [pc, #512]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7e:	08db      	lsrs	r3, r3, #3
 8007a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80e1 	beq.w	8007c60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	f000 8083 	beq.w	8007bac <HAL_RCC_GetSysClockFreq+0x204>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	f200 80a1 	bhi.w	8007bf0 <HAL_RCC_GetSysClockFreq+0x248>
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <HAL_RCC_GetSysClockFreq+0x114>
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d056      	beq.n	8007b68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007aba:	e099      	b.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007abc:	4b6f      	ldr	r3, [pc, #444]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d02d      	beq.n	8007b24 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ac8:	4b6c      	ldr	r3, [pc, #432]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	08db      	lsrs	r3, r3, #3
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	4a6b      	ldr	r2, [pc, #428]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af2:	4b62      	ldr	r3, [pc, #392]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b06:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007b22:	e087      	b.n	8007c34 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007c90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b36:	4b51      	ldr	r3, [pc, #324]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b66:	e065      	b.n	8007c34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007c94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7a:	4b40      	ldr	r3, [pc, #256]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007baa:	e043      	b.n	8007c34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007c98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bbe:	4b2f      	ldr	r3, [pc, #188]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bee:	e021      	b.n	8007c34 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007c94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c02:	4b1e      	ldr	r3, [pc, #120]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c32:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007c34:	4b11      	ldr	r3, [pc, #68]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	0a5b      	lsrs	r3, r3, #9
 8007c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3e:	3301      	adds	r3, #1
 8007c40:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	ee07 3a90 	vmov	s15, r3
 8007c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c58:	ee17 3a90 	vmov	r3, s15
 8007c5c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007c5e:	e005      	b.n	8007c6c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	61bb      	str	r3, [r7, #24]
    break;
 8007c64:	e002      	b.n	8007c6c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007c66:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c68:	61bb      	str	r3, [r7, #24]
    break;
 8007c6a:	bf00      	nop
  }

  return sysclockfreq;
 8007c6c:	69bb      	ldr	r3, [r7, #24]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3724      	adds	r7, #36	; 0x24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	58024400 	.word	0x58024400
 8007c80:	03d09000 	.word	0x03d09000
 8007c84:	003d0900 	.word	0x003d0900
 8007c88:	017d7840 	.word	0x017d7840
 8007c8c:	46000000 	.word	0x46000000
 8007c90:	4c742400 	.word	0x4c742400
 8007c94:	4a742400 	.word	0x4a742400
 8007c98:	4bbebc20 	.word	0x4bbebc20

08007c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ca2:	f7ff fe81 	bl	80079a8 <HAL_RCC_GetSysClockFreq>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	4b10      	ldr	r3, [pc, #64]	; (8007cec <HAL_RCC_GetHCLKFreq+0x50>)
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	0a1b      	lsrs	r3, r3, #8
 8007cae:	f003 030f 	and.w	r3, r3, #15
 8007cb2:	490f      	ldr	r1, [pc, #60]	; (8007cf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007cb4:	5ccb      	ldrb	r3, [r1, r3]
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	fa22 f303 	lsr.w	r3, r2, r3
 8007cbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cc0:	4b0a      	ldr	r3, [pc, #40]	; (8007cec <HAL_RCC_GetHCLKFreq+0x50>)
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	f003 030f 	and.w	r3, r3, #15
 8007cc8:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007cca:	5cd3      	ldrb	r3, [r2, r3]
 8007ccc:	f003 031f 	and.w	r3, r3, #31
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	4a07      	ldr	r2, [pc, #28]	; (8007cf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007cd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007cda:	4a07      	ldr	r2, [pc, #28]	; (8007cf8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ce0:	4b04      	ldr	r3, [pc, #16]	; (8007cf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	58024400 	.word	0x58024400
 8007cf0:	08011088 	.word	0x08011088
 8007cf4:	24000068 	.word	0x24000068
 8007cf8:	24000064 	.word	0x24000064

08007cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007d00:	f7ff ffcc 	bl	8007c9c <HAL_RCC_GetHCLKFreq>
 8007d04:	4602      	mov	r2, r0
 8007d06:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	091b      	lsrs	r3, r3, #4
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	4904      	ldr	r1, [pc, #16]	; (8007d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d12:	5ccb      	ldrb	r3, [r1, r3]
 8007d14:	f003 031f 	and.w	r3, r3, #31
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	58024400 	.word	0x58024400
 8007d24:	08011088 	.word	0x08011088

08007d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007d2c:	f7ff ffb6 	bl	8007c9c <HAL_RCC_GetHCLKFreq>
 8007d30:	4602      	mov	r2, r0
 8007d32:	4b06      	ldr	r3, [pc, #24]	; (8007d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	0a1b      	lsrs	r3, r3, #8
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	4904      	ldr	r1, [pc, #16]	; (8007d50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d3e:	5ccb      	ldrb	r3, [r1, r3]
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	58024400 	.word	0x58024400
 8007d50:	08011088 	.word	0x08011088

08007d54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d60:	2300      	movs	r3, #0
 8007d62:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d03f      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d78:	d02a      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007d7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d7e:	d824      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d84:	d018      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d8a:	d81e      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d94:	d007      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007d96:	e018      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d98:	4ba3      	ldr	r3, [pc, #652]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	4aa2      	ldr	r2, [pc, #648]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007da4:	e015      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	3304      	adds	r3, #4
 8007daa:	2102      	movs	r1, #2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f001 f9d5 	bl	800915c <RCCEx_PLL2_Config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007db6:	e00c      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3324      	adds	r3, #36	; 0x24
 8007dbc:	2102      	movs	r1, #2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f001 fa7e 	bl	80092c0 <RCCEx_PLL3_Config>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007dc8:	e003      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8007dce:	e000      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007dd8:	4b93      	ldr	r3, [pc, #588]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de4:	4990      	ldr	r1, [pc, #576]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	650b      	str	r3, [r1, #80]	; 0x50
 8007dea:	e001      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
 8007dee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d03d      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d826      	bhi.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007e04:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0a:	bf00      	nop
 8007e0c:	08007e21 	.word	0x08007e21
 8007e10:	08007e2f 	.word	0x08007e2f
 8007e14:	08007e41 	.word	0x08007e41
 8007e18:	08007e59 	.word	0x08007e59
 8007e1c:	08007e59 	.word	0x08007e59
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e20:	4b81      	ldr	r3, [pc, #516]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	4a80      	ldr	r2, [pc, #512]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e2c:	e015      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3304      	adds	r3, #4
 8007e32:	2100      	movs	r1, #0
 8007e34:	4618      	mov	r0, r3
 8007e36:	f001 f991 	bl	800915c <RCCEx_PLL2_Config>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e3e:	e00c      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3324      	adds	r3, #36	; 0x24
 8007e44:	2100      	movs	r1, #0
 8007e46:	4618      	mov	r0, r3
 8007e48:	f001 fa3a 	bl	80092c0 <RCCEx_PLL3_Config>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e50:	e003      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	75fb      	strb	r3, [r7, #23]
      break;
 8007e56:	e000      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e60:	4b71      	ldr	r3, [pc, #452]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e64:	f023 0207 	bic.w	r2, r3, #7
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6c:	496e      	ldr	r1, [pc, #440]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	650b      	str	r3, [r1, #80]	; 0x50
 8007e72:	e001      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d042      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e8c:	d02b      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e92:	d825      	bhi.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e94:	2bc0      	cmp	r3, #192	; 0xc0
 8007e96:	d028      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007e98:	2bc0      	cmp	r3, #192	; 0xc0
 8007e9a:	d821      	bhi.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e9c:	2b80      	cmp	r3, #128	; 0x80
 8007e9e:	d016      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007ea0:	2b80      	cmp	r3, #128	; 0x80
 8007ea2:	d81d      	bhi.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007ea8:	2b40      	cmp	r3, #64	; 0x40
 8007eaa:	d007      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007eac:	e018      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eae:	4b5e      	ldr	r3, [pc, #376]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb2:	4a5d      	ldr	r2, [pc, #372]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007eba:	e017      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f001 f94a 	bl	800915c <RCCEx_PLL2_Config>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007ecc:	e00e      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3324      	adds	r3, #36	; 0x24
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 f9f3 	bl	80092c0 <RCCEx_PLL3_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007ede:	e005      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee4:	e002      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007ee6:	bf00      	nop
 8007ee8:	e000      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d109      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007ef2:	4b4d      	ldr	r3, [pc, #308]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efe:	494a      	ldr	r1, [pc, #296]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	650b      	str	r3, [r1, #80]	; 0x50
 8007f04:	e001      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d049      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f20:	d030      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f26:	d82a      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f2c:	d02c      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007f2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f32:	d824      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f38:	d018      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f3e:	d81e      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f48:	d007      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007f4a:	e018      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f4c:	4b36      	ldr	r3, [pc, #216]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	4a35      	ldr	r2, [pc, #212]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f58:	e017      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 f8fb 	bl	800915c <RCCEx_PLL2_Config>
 8007f66:	4603      	mov	r3, r0
 8007f68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f6a:	e00e      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3324      	adds	r3, #36	; 0x24
 8007f70:	2100      	movs	r1, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f001 f9a4 	bl	80092c0 <RCCEx_PLL3_Config>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f7c:	e005      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	75fb      	strb	r3, [r7, #23]
      break;
 8007f82:	e002      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007f84:	bf00      	nop
 8007f86:	e000      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f90:	4b25      	ldr	r3, [pc, #148]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f9e:	4922      	ldr	r1, [pc, #136]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	658b      	str	r3, [r1, #88]	; 0x58
 8007fa4:	e001      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d04b      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fc0:	d030      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007fc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fc6:	d82a      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007fc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fcc:	d02e      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007fce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fd2:	d824      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fd8:	d018      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fde:	d81e      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fe8:	d007      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007fea:	e018      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fec:	4b0e      	ldr	r3, [pc, #56]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff0:	4a0d      	ldr	r2, [pc, #52]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ff8:	e019      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	2100      	movs	r1, #0
 8008000:	4618      	mov	r0, r3
 8008002:	f001 f8ab 	bl	800915c <RCCEx_PLL2_Config>
 8008006:	4603      	mov	r3, r0
 8008008:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800800a:	e010      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3324      	adds	r3, #36	; 0x24
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f001 f954 	bl	80092c0 <RCCEx_PLL3_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800801c:	e007      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	75fb      	strb	r3, [r7, #23]
      break;
 8008022:	e004      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008024:	bf00      	nop
 8008026:	e002      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008028:	58024400 	.word	0x58024400
      break;
 800802c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008034:	4b99      	ldr	r3, [pc, #612]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008038:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008042:	4996      	ldr	r1, [pc, #600]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008044:	4313      	orrs	r3, r2
 8008046:	658b      	str	r3, [r1, #88]	; 0x58
 8008048:	e001      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d032      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800805e:	2b30      	cmp	r3, #48	; 0x30
 8008060:	d01c      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008062:	2b30      	cmp	r3, #48	; 0x30
 8008064:	d817      	bhi.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008066:	2b20      	cmp	r3, #32
 8008068:	d00c      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800806a:	2b20      	cmp	r3, #32
 800806c:	d813      	bhi.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d016      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008072:	2b10      	cmp	r3, #16
 8008074:	d10f      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008076:	4b89      	ldr	r3, [pc, #548]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	4a88      	ldr	r2, [pc, #544]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800807c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008080:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008082:	e00e      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3304      	adds	r3, #4
 8008088:	2102      	movs	r1, #2
 800808a:	4618      	mov	r0, r3
 800808c:	f001 f866 	bl	800915c <RCCEx_PLL2_Config>
 8008090:	4603      	mov	r3, r0
 8008092:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008094:	e005      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	75fb      	strb	r3, [r7, #23]
      break;
 800809a:	e002      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800809c:	bf00      	nop
 800809e:	e000      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80080a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d109      	bne.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80080a8:	4b7c      	ldr	r3, [pc, #496]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b4:	4979      	ldr	r1, [pc, #484]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080ba:	e001      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080bc:	7dfb      	ldrb	r3, [r7, #23]
 80080be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d047      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080d4:	d030      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80080d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080da:	d82a      	bhi.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80080dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080e0:	d02c      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80080e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080e6:	d824      	bhi.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80080e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ec:	d018      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80080ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f2:	d81e      	bhi.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80080f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fc:	d007      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80080fe:	e018      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008100:	4b66      	ldr	r3, [pc, #408]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	4a65      	ldr	r2, [pc, #404]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800810a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800810c:	e017      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3304      	adds	r3, #4
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f001 f821 	bl	800915c <RCCEx_PLL2_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800811e:	e00e      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3324      	adds	r3, #36	; 0x24
 8008124:	2100      	movs	r1, #0
 8008126:	4618      	mov	r0, r3
 8008128:	f001 f8ca 	bl	80092c0 <RCCEx_PLL3_Config>
 800812c:	4603      	mov	r3, r0
 800812e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008130:	e005      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	75fb      	strb	r3, [r7, #23]
      break;
 8008136:	e002      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008138:	bf00      	nop
 800813a:	e000      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800813c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d109      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008144:	4b55      	ldr	r3, [pc, #340]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008148:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008150:	4952      	ldr	r1, [pc, #328]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008152:	4313      	orrs	r3, r2
 8008154:	650b      	str	r3, [r1, #80]	; 0x50
 8008156:	e001      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d049      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800816c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008170:	d02e      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008176:	d828      	bhi.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008178:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800817c:	d02a      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800817e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008182:	d822      	bhi.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008184:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008188:	d026      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800818a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800818e:	d81c      	bhi.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008194:	d010      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800819a:	d816      	bhi.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01d      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x488>
 80081a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081a4:	d111      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3304      	adds	r3, #4
 80081aa:	2101      	movs	r1, #1
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 ffd5 	bl	800915c <RCCEx_PLL2_Config>
 80081b2:	4603      	mov	r3, r0
 80081b4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80081b6:	e012      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3324      	adds	r3, #36	; 0x24
 80081bc:	2101      	movs	r1, #1
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 f87e 	bl	80092c0 <RCCEx_PLL3_Config>
 80081c4:	4603      	mov	r3, r0
 80081c6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80081c8:	e009      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
      break;
 80081ce:	e006      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80081d0:	bf00      	nop
 80081d2:	e004      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80081d4:	bf00      	nop
 80081d6:	e002      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80081d8:	bf00      	nop
 80081da:	e000      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80081dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d109      	bne.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081e4:	4b2d      	ldr	r3, [pc, #180]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80081e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f0:	492a      	ldr	r1, [pc, #168]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	650b      	str	r3, [r1, #80]	; 0x50
 80081f6:	e001      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d04d      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800820e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008212:	d02e      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008218:	d828      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800821a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821e:	d02a      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008224:	d822      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008226:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800822a:	d026      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800822c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008230:	d81c      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008236:	d010      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800823c:	d816      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d01d      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008246:	d111      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3304      	adds	r3, #4
 800824c:	2101      	movs	r1, #1
 800824e:	4618      	mov	r0, r3
 8008250:	f000 ff84 	bl	800915c <RCCEx_PLL2_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008258:	e012      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3324      	adds	r3, #36	; 0x24
 800825e:	2101      	movs	r1, #1
 8008260:	4618      	mov	r0, r3
 8008262:	f001 f82d 	bl	80092c0 <RCCEx_PLL3_Config>
 8008266:	4603      	mov	r3, r0
 8008268:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800826a:	e009      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	75fb      	strb	r3, [r7, #23]
      break;
 8008270:	e006      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008272:	bf00      	nop
 8008274:	e004      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008276:	bf00      	nop
 8008278:	e002      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800827a:	bf00      	nop
 800827c:	e000      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800827e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10c      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008286:	4b05      	ldr	r3, [pc, #20]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800828a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008294:	4901      	ldr	r1, [pc, #4]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008296:	4313      	orrs	r3, r2
 8008298:	658b      	str	r3, [r1, #88]	; 0x58
 800829a:	e003      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800829c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d02f      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082b8:	d00e      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80082ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082be:	d814      	bhi.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x596>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d015      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80082c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082c8:	d10f      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082ca:	4baf      	ldr	r3, [pc, #700]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ce:	4aae      	ldr	r2, [pc, #696]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80082d6:	e00c      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3304      	adds	r3, #4
 80082dc:	2101      	movs	r1, #1
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 ff3c 	bl	800915c <RCCEx_PLL2_Config>
 80082e4:	4603      	mov	r3, r0
 80082e6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80082e8:	e003      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	75fb      	strb	r3, [r7, #23]
      break;
 80082ee:	e000      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80082f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d109      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80082f8:	4ba3      	ldr	r3, [pc, #652]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008304:	49a0      	ldr	r1, [pc, #640]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008306:	4313      	orrs	r3, r2
 8008308:	650b      	str	r3, [r1, #80]	; 0x50
 800830a:	e001      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d032      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008320:	2b03      	cmp	r3, #3
 8008322:	d81b      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008324:	a201      	add	r2, pc, #4	; (adr r2, 800832c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008363 	.word	0x08008363
 8008330:	0800833d 	.word	0x0800833d
 8008334:	0800834b 	.word	0x0800834b
 8008338:	08008363 	.word	0x08008363
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800833c:	4b92      	ldr	r3, [pc, #584]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	4a91      	ldr	r2, [pc, #580]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008346:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008348:	e00c      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3304      	adds	r3, #4
 800834e:	2102      	movs	r1, #2
 8008350:	4618      	mov	r0, r3
 8008352:	f000 ff03 	bl	800915c <RCCEx_PLL2_Config>
 8008356:	4603      	mov	r3, r0
 8008358:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800835a:	e003      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	75fb      	strb	r3, [r7, #23]
      break;
 8008360:	e000      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008364:	7dfb      	ldrb	r3, [r7, #23]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800836a:	4b87      	ldr	r3, [pc, #540]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800836c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836e:	f023 0203 	bic.w	r2, r3, #3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008376:	4984      	ldr	r1, [pc, #528]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008378:	4313      	orrs	r3, r2
 800837a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800837c:	e001      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837e:	7dfb      	ldrb	r3, [r7, #23]
 8008380:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 8086 	beq.w	800849c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008390:	4b7e      	ldr	r3, [pc, #504]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a7d      	ldr	r2, [pc, #500]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800839c:	f7fd fc08 	bl	8005bb0 <HAL_GetTick>
 80083a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083a2:	e009      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083a4:	f7fd fc04 	bl	8005bb0 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b64      	cmp	r3, #100	; 0x64
 80083b0:	d902      	bls.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	75fb      	strb	r3, [r7, #23]
        break;
 80083b6:	e005      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083b8:	4b74      	ldr	r3, [pc, #464]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0ef      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d166      	bne.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80083ca:	4b6f      	ldr	r3, [pc, #444]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083d4:	4053      	eors	r3, r2
 80083d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d013      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083de:	4b6a      	ldr	r3, [pc, #424]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083e8:	4b67      	ldr	r3, [pc, #412]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ec:	4a66      	ldr	r2, [pc, #408]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083f4:	4b64      	ldr	r3, [pc, #400]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f8:	4a63      	ldr	r2, [pc, #396]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008400:	4a61      	ldr	r2, [pc, #388]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800840c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008410:	d115      	bne.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008412:	f7fd fbcd 	bl	8005bb0 <HAL_GetTick>
 8008416:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008418:	e00b      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800841a:	f7fd fbc9 	bl	8005bb0 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	f241 3288 	movw	r2, #5000	; 0x1388
 8008428:	4293      	cmp	r3, r2
 800842a:	d902      	bls.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	75fb      	strb	r3, [r7, #23]
            break;
 8008430:	e005      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008432:	4b55      	ldr	r3, [pc, #340]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0ed      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d126      	bne.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800844a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800844e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008452:	d10d      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008454:	4b4c      	ldr	r3, [pc, #304]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008462:	0919      	lsrs	r1, r3, #4
 8008464:	4b4a      	ldr	r3, [pc, #296]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008466:	400b      	ands	r3, r1
 8008468:	4947      	ldr	r1, [pc, #284]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800846a:	4313      	orrs	r3, r2
 800846c:	610b      	str	r3, [r1, #16]
 800846e:	e005      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008470:	4b45      	ldr	r3, [pc, #276]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	4a44      	ldr	r2, [pc, #272]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008476:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800847a:	6113      	str	r3, [r2, #16]
 800847c:	4b42      	ldr	r3, [pc, #264]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800847e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800848a:	493f      	ldr	r1, [pc, #252]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800848c:	4313      	orrs	r3, r2
 800848e:	670b      	str	r3, [r1, #112]	; 0x70
 8008490:	e004      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	75bb      	strb	r3, [r7, #22]
 8008496:	e001      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8085 	beq.w	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ae:	2b28      	cmp	r3, #40	; 0x28
 80084b0:	d866      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	08008595 	.word	0x08008595
 80084bc:	08008581 	.word	0x08008581
 80084c0:	08008581 	.word	0x08008581
 80084c4:	08008581 	.word	0x08008581
 80084c8:	08008581 	.word	0x08008581
 80084cc:	08008581 	.word	0x08008581
 80084d0:	08008581 	.word	0x08008581
 80084d4:	08008581 	.word	0x08008581
 80084d8:	0800855d 	.word	0x0800855d
 80084dc:	08008581 	.word	0x08008581
 80084e0:	08008581 	.word	0x08008581
 80084e4:	08008581 	.word	0x08008581
 80084e8:	08008581 	.word	0x08008581
 80084ec:	08008581 	.word	0x08008581
 80084f0:	08008581 	.word	0x08008581
 80084f4:	08008581 	.word	0x08008581
 80084f8:	0800856f 	.word	0x0800856f
 80084fc:	08008581 	.word	0x08008581
 8008500:	08008581 	.word	0x08008581
 8008504:	08008581 	.word	0x08008581
 8008508:	08008581 	.word	0x08008581
 800850c:	08008581 	.word	0x08008581
 8008510:	08008581 	.word	0x08008581
 8008514:	08008581 	.word	0x08008581
 8008518:	08008595 	.word	0x08008595
 800851c:	08008581 	.word	0x08008581
 8008520:	08008581 	.word	0x08008581
 8008524:	08008581 	.word	0x08008581
 8008528:	08008581 	.word	0x08008581
 800852c:	08008581 	.word	0x08008581
 8008530:	08008581 	.word	0x08008581
 8008534:	08008581 	.word	0x08008581
 8008538:	08008595 	.word	0x08008595
 800853c:	08008581 	.word	0x08008581
 8008540:	08008581 	.word	0x08008581
 8008544:	08008581 	.word	0x08008581
 8008548:	08008581 	.word	0x08008581
 800854c:	08008581 	.word	0x08008581
 8008550:	08008581 	.word	0x08008581
 8008554:	08008581 	.word	0x08008581
 8008558:	08008595 	.word	0x08008595
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3304      	adds	r3, #4
 8008560:	2101      	movs	r1, #1
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fdfa 	bl	800915c <RCCEx_PLL2_Config>
 8008568:	4603      	mov	r3, r0
 800856a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800856c:	e013      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3324      	adds	r3, #36	; 0x24
 8008572:	2101      	movs	r1, #1
 8008574:	4618      	mov	r0, r3
 8008576:	f000 fea3 	bl	80092c0 <RCCEx_PLL3_Config>
 800857a:	4603      	mov	r3, r0
 800857c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800857e:	e00a      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	75fb      	strb	r3, [r7, #23]
      break;
 8008584:	e007      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008586:	bf00      	nop
 8008588:	58024400 	.word	0x58024400
 800858c:	58024800 	.word	0x58024800
 8008590:	00ffffcf 	.word	0x00ffffcf
      break;
 8008594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d109      	bne.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800859c:	4b96      	ldr	r3, [pc, #600]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800859e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085a8:	4993      	ldr	r1, [pc, #588]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	654b      	str	r3, [r1, #84]	; 0x54
 80085ae:	e001      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d038      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c4:	2b05      	cmp	r3, #5
 80085c6:	d821      	bhi.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80085c8:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80085ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ce:	bf00      	nop
 80085d0:	08008613 	.word	0x08008613
 80085d4:	080085e9 	.word	0x080085e9
 80085d8:	080085fb 	.word	0x080085fb
 80085dc:	08008613 	.word	0x08008613
 80085e0:	08008613 	.word	0x08008613
 80085e4:	08008613 	.word	0x08008613
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3304      	adds	r3, #4
 80085ec:	2101      	movs	r1, #1
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fdb4 	bl	800915c <RCCEx_PLL2_Config>
 80085f4:	4603      	mov	r3, r0
 80085f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80085f8:	e00c      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3324      	adds	r3, #36	; 0x24
 80085fe:	2101      	movs	r1, #1
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fe5d 	bl	80092c0 <RCCEx_PLL3_Config>
 8008606:	4603      	mov	r3, r0
 8008608:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800860a:	e003      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	75fb      	strb	r3, [r7, #23]
      break;
 8008610:	e000      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d109      	bne.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800861a:	4b77      	ldr	r3, [pc, #476]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800861c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861e:	f023 0207 	bic.w	r2, r3, #7
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008626:	4974      	ldr	r1, [pc, #464]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008628:	4313      	orrs	r3, r2
 800862a:	654b      	str	r3, [r1, #84]	; 0x54
 800862c:	e001      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862e:	7dfb      	ldrb	r3, [r7, #23]
 8008630:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	d03a      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008644:	2b05      	cmp	r3, #5
 8008646:	d821      	bhi.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008648:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	08008693 	.word	0x08008693
 8008654:	08008669 	.word	0x08008669
 8008658:	0800867b 	.word	0x0800867b
 800865c:	08008693 	.word	0x08008693
 8008660:	08008693 	.word	0x08008693
 8008664:	08008693 	.word	0x08008693
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	3304      	adds	r3, #4
 800866c:	2101      	movs	r1, #1
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fd74 	bl	800915c <RCCEx_PLL2_Config>
 8008674:	4603      	mov	r3, r0
 8008676:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008678:	e00c      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	3324      	adds	r3, #36	; 0x24
 800867e:	2101      	movs	r1, #1
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fe1d 	bl	80092c0 <RCCEx_PLL3_Config>
 8008686:	4603      	mov	r3, r0
 8008688:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800868a:	e003      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	75fb      	strb	r3, [r7, #23]
      break;
 8008690:	e000      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800869a:	4b57      	ldr	r3, [pc, #348]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800869c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869e:	f023 0207 	bic.w	r2, r3, #7
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a8:	4953      	ldr	r1, [pc, #332]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	658b      	str	r3, [r1, #88]	; 0x58
 80086ae:	e001      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0320 	and.w	r3, r3, #32
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d04b      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086ca:	d02e      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80086cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086d0:	d828      	bhi.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80086d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d6:	d02a      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80086d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086dc:	d822      	bhi.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80086de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086e2:	d026      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80086e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086e8:	d81c      	bhi.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80086ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ee:	d010      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80086f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f4:	d816      	bhi.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d01d      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80086fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086fe:	d111      	bne.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3304      	adds	r3, #4
 8008704:	2100      	movs	r1, #0
 8008706:	4618      	mov	r0, r3
 8008708:	f000 fd28 	bl	800915c <RCCEx_PLL2_Config>
 800870c:	4603      	mov	r3, r0
 800870e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008710:	e012      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3324      	adds	r3, #36	; 0x24
 8008716:	2102      	movs	r1, #2
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fdd1 	bl	80092c0 <RCCEx_PLL3_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008722:	e009      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	75fb      	strb	r3, [r7, #23]
      break;
 8008728:	e006      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800872a:	bf00      	nop
 800872c:	e004      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800872e:	bf00      	nop
 8008730:	e002      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008732:	bf00      	nop
 8008734:	e000      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10a      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800873e:	4b2e      	ldr	r3, [pc, #184]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008742:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800874c:	492a      	ldr	r1, [pc, #168]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800874e:	4313      	orrs	r3, r2
 8008750:	654b      	str	r3, [r1, #84]	; 0x54
 8008752:	e001      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008760:	2b00      	cmp	r3, #0
 8008762:	d04d      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800876a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800876e:	d02e      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008770:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008774:	d828      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800877a:	d02a      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800877c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008780:	d822      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008782:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008786:	d026      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008788:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800878c:	d81c      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800878e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008792:	d010      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008798:	d816      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d01d      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800879e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a2:	d111      	bne.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3304      	adds	r3, #4
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fcd6 	bl	800915c <RCCEx_PLL2_Config>
 80087b0:	4603      	mov	r3, r0
 80087b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80087b4:	e012      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3324      	adds	r3, #36	; 0x24
 80087ba:	2102      	movs	r1, #2
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fd7f 	bl	80092c0 <RCCEx_PLL3_Config>
 80087c2:	4603      	mov	r3, r0
 80087c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80087c6:	e009      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	75fb      	strb	r3, [r7, #23]
      break;
 80087cc:	e006      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80087ce:	bf00      	nop
 80087d0:	e004      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80087d2:	bf00      	nop
 80087d4:	e002      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80087d6:	bf00      	nop
 80087d8:	e000      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80087da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10c      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087e2:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80087e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087f0:	4901      	ldr	r1, [pc, #4]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	658b      	str	r3, [r1, #88]	; 0x58
 80087f6:	e003      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80087f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008808:	2b00      	cmp	r3, #0
 800880a:	d04b      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008812:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008816:	d02e      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008818:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800881c:	d828      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800881e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008822:	d02a      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008828:	d822      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800882a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800882e:	d026      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008830:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008834:	d81c      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008836:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800883a:	d010      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800883c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008840:	d816      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d01d      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800884a:	d111      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3304      	adds	r3, #4
 8008850:	2100      	movs	r1, #0
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fc82 	bl	800915c <RCCEx_PLL2_Config>
 8008858:	4603      	mov	r3, r0
 800885a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800885c:	e012      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3324      	adds	r3, #36	; 0x24
 8008862:	2102      	movs	r1, #2
 8008864:	4618      	mov	r0, r3
 8008866:	f000 fd2b 	bl	80092c0 <RCCEx_PLL3_Config>
 800886a:	4603      	mov	r3, r0
 800886c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800886e:	e009      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	75fb      	strb	r3, [r7, #23]
      break;
 8008874:	e006      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008876:	bf00      	nop
 8008878:	e004      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800887a:	bf00      	nop
 800887c:	e002      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800887e:	bf00      	nop
 8008880:	e000      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008884:	7dfb      	ldrb	r3, [r7, #23]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10a      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800888a:	4b9d      	ldr	r3, [pc, #628]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800888c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800888e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008898:	4999      	ldr	r1, [pc, #612]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800889a:	4313      	orrs	r3, r2
 800889c:	658b      	str	r3, [r1, #88]	; 0x58
 800889e:	e001      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0308 	and.w	r3, r3, #8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01a      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ba:	d10a      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3324      	adds	r3, #36	; 0x24
 80088c0:	2102      	movs	r1, #2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fcfc 	bl	80092c0 <RCCEx_PLL3_Config>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80088d2:	4b8b      	ldr	r3, [pc, #556]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088e0:	4987      	ldr	r1, [pc, #540]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0310 	and.w	r3, r3, #16
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01a      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088fc:	d10a      	bne.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3324      	adds	r3, #36	; 0x24
 8008902:	2102      	movs	r1, #2
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fcdb 	bl	80092c0 <RCCEx_PLL3_Config>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008914:	4b7a      	ldr	r3, [pc, #488]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008918:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008922:	4977      	ldr	r1, [pc, #476]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008924:	4313      	orrs	r3, r2
 8008926:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d034      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800893a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800893e:	d01d      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008944:	d817      	bhi.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800894a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800894e:	d009      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008950:	e011      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3304      	adds	r3, #4
 8008956:	2100      	movs	r1, #0
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fbff 	bl	800915c <RCCEx_PLL2_Config>
 800895e:	4603      	mov	r3, r0
 8008960:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008962:	e00c      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3324      	adds	r3, #36	; 0x24
 8008968:	2102      	movs	r1, #2
 800896a:	4618      	mov	r0, r3
 800896c:	f000 fca8 	bl	80092c0 <RCCEx_PLL3_Config>
 8008970:	4603      	mov	r3, r0
 8008972:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008974:	e003      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	75fb      	strb	r3, [r7, #23]
      break;
 800897a:	e000      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800897c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008984:	4b5e      	ldr	r3, [pc, #376]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008992:	495b      	ldr	r1, [pc, #364]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008994:	4313      	orrs	r3, r2
 8008996:	658b      	str	r3, [r1, #88]	; 0x58
 8008998:	e001      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d033      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089b4:	d01c      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80089b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089ba:	d816      	bhi.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80089bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089c0:	d003      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80089c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089c6:	d007      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80089c8:	e00f      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ca:	4b4d      	ldr	r3, [pc, #308]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ce:	4a4c      	ldr	r2, [pc, #304]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80089d6:	e00c      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3324      	adds	r3, #36	; 0x24
 80089dc:	2101      	movs	r1, #1
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 fc6e 	bl	80092c0 <RCCEx_PLL3_Config>
 80089e4:	4603      	mov	r3, r0
 80089e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80089e8:	e003      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	75fb      	strb	r3, [r7, #23]
      break;
 80089ee:	e000      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80089f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10a      	bne.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089f8:	4b41      	ldr	r3, [pc, #260]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a06:	493e      	ldr	r1, [pc, #248]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	654b      	str	r3, [r1, #84]	; 0x54
 8008a0c:	e001      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d029      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a2a:	d007      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008a2c:	e00f      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a2e:	4b34      	ldr	r3, [pc, #208]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a32:	4a33      	ldr	r2, [pc, #204]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a3a:	e00b      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	3304      	adds	r3, #4
 8008a40:	2102      	movs	r1, #2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fb8a 	bl	800915c <RCCEx_PLL2_Config>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a4c:	e002      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	75fb      	strb	r3, [r7, #23]
      break;
 8008a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d109      	bne.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a5a:	4b29      	ldr	r3, [pc, #164]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a66:	4926      	ldr	r1, [pc, #152]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a6c:	e001      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	3324      	adds	r3, #36	; 0x24
 8008a82:	2102      	movs	r1, #2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fc1b 	bl	80092c0 <RCCEx_PLL3_Config>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d033      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008aa8:	d017      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008aaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008aae:	d811      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ab4:	d013      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aba:	d80b      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d010      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ac4:	d106      	bne.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aca:	4a0d      	ldr	r2, [pc, #52]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008ad2:	e007      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad8:	e004      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008ada:	bf00      	nop
 8008adc:	e002      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008ade:	bf00      	nop
 8008ae0:	e000      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10c      	bne.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008aea:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008af6:	4902      	ldr	r1, [pc, #8]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	654b      	str	r3, [r1, #84]	; 0x54
 8008afc:	e004      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008afe:	bf00      	nop
 8008b00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d008      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b14:	4b31      	ldr	r3, [pc, #196]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b20:	492e      	ldr	r1, [pc, #184]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d009      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b32:	4b2a      	ldr	r3, [pc, #168]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b40:	4926      	ldr	r1, [pc, #152]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d008      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b52:	4b22      	ldr	r3, [pc, #136]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b5e:	491f      	ldr	r1, [pc, #124]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00d      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b70:	4b1a      	ldr	r3, [pc, #104]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	4a19      	ldr	r2, [pc, #100]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b7a:	6113      	str	r3, [r2, #16]
 8008b7c:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b7e:	691a      	ldr	r2, [r3, #16]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b86:	4915      	ldr	r1, [pc, #84]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	da08      	bge.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b94:	4b11      	ldr	r3, [pc, #68]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba0:	490e      	ldr	r1, [pc, #56]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d009      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bb2:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc0:	4906      	ldr	r1, [pc, #24]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008bc6:	7dbb      	ldrb	r3, [r7, #22]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e000      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	58024400 	.word	0x58024400

08008be0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008be4:	f7ff f85a 	bl	8007c9c <HAL_RCC_GetHCLKFreq>
 8008be8:	4602      	mov	r2, r0
 8008bea:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	091b      	lsrs	r3, r3, #4
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	4904      	ldr	r1, [pc, #16]	; (8008c08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008bf6:	5ccb      	ldrb	r3, [r1, r3]
 8008bf8:	f003 031f 	and.w	r3, r3, #31
 8008bfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	58024400 	.word	0x58024400
 8008c08:	08011088 	.word	0x08011088

08008c0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b089      	sub	sp, #36	; 0x24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c14:	4ba1      	ldr	r3, [pc, #644]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	f003 0303 	and.w	r3, r3, #3
 8008c1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008c1e:	4b9f      	ldr	r3, [pc, #636]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c22:	0b1b      	lsrs	r3, r3, #12
 8008c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c2a:	4b9c      	ldr	r3, [pc, #624]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2e:	091b      	lsrs	r3, r3, #4
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008c36:	4b99      	ldr	r3, [pc, #612]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3a:	08db      	lsrs	r3, r3, #3
 8008c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	fb02 f303 	mul.w	r3, r2, r3
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 8111 	beq.w	8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	f000 8083 	beq.w	8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	f200 80a1 	bhi.w	8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d056      	beq.n	8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c76:	e099      	b.n	8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c78:	4b88      	ldr	r3, [pc, #544]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0320 	and.w	r3, r3, #32
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d02d      	beq.n	8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c84:	4b85      	ldr	r3, [pc, #532]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	08db      	lsrs	r3, r3, #3
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	4a84      	ldr	r2, [pc, #528]	; (8008ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c90:	fa22 f303 	lsr.w	r3, r2, r3
 8008c94:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	ee07 3a90 	vmov	s15, r3
 8008c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cae:	4b7b      	ldr	r3, [pc, #492]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008cde:	e087      	b.n	8008df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf2:	4b6a      	ldr	r3, [pc, #424]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfa:	ee07 3a90 	vmov	s15, r3
 8008cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d22:	e065      	b.n	8008df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d36:	4b59      	ldr	r3, [pc, #356]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d66:	e043      	b.n	8008df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7a:	4b48      	ldr	r3, [pc, #288]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008daa:	e021      	b.n	8008df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008eac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dbe:	4b37      	ldr	r3, [pc, #220]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008df0:	4b2a      	ldr	r3, [pc, #168]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df4:	0a5b      	lsrs	r3, r3, #9
 8008df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e16:	ee17 2a90 	vmov	r2, s15
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008e1e:	4b1f      	ldr	r3, [pc, #124]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e22:	0c1b      	lsrs	r3, r3, #16
 8008e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e28:	ee07 3a90 	vmov	s15, r3
 8008e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e38:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e44:	ee17 2a90 	vmov	r2, s15
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008e4c:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	0e1b      	lsrs	r3, r3, #24
 8008e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e72:	ee17 2a90 	vmov	r2, s15
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e7a:	e008      	b.n	8008e8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	609a      	str	r2, [r3, #8]
}
 8008e8e:	bf00      	nop
 8008e90:	3724      	adds	r7, #36	; 0x24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	58024400 	.word	0x58024400
 8008ea0:	03d09000 	.word	0x03d09000
 8008ea4:	46000000 	.word	0x46000000
 8008ea8:	4c742400 	.word	0x4c742400
 8008eac:	4a742400 	.word	0x4a742400
 8008eb0:	4bbebc20 	.word	0x4bbebc20

08008eb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b089      	sub	sp, #36	; 0x24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ebc:	4ba1      	ldr	r3, [pc, #644]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008ec6:	4b9f      	ldr	r3, [pc, #636]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eca:	0d1b      	lsrs	r3, r3, #20
 8008ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ed0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ed2:	4b9c      	ldr	r3, [pc, #624]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed6:	0a1b      	lsrs	r3, r3, #8
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008ede:	4b99      	ldr	r3, [pc, #612]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ee2:	08db      	lsrs	r3, r3, #3
 8008ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	fb02 f303 	mul.w	r3, r2, r3
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 8111 	beq.w	8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	f000 8083 	beq.w	8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	f200 80a1 	bhi.w	8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d056      	beq.n	8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f1e:	e099      	b.n	8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f20:	4b88      	ldr	r3, [pc, #544]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d02d      	beq.n	8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f2c:	4b85      	ldr	r3, [pc, #532]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	08db      	lsrs	r3, r3, #3
 8008f32:	f003 0303 	and.w	r3, r3, #3
 8008f36:	4a84      	ldr	r2, [pc, #528]	; (8009148 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f38:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	ee07 3a90 	vmov	s15, r3
 8008f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f56:	4b7b      	ldr	r3, [pc, #492]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800914c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008f86:	e087      	b.n	8009098 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f9a:	4b6a      	ldr	r3, [pc, #424]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa2:	ee07 3a90 	vmov	s15, r3
 8008fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800914c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fca:	e065      	b.n	8009098 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fde:	4b59      	ldr	r3, [pc, #356]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ff2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800914c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800900e:	e043      	b.n	8009098 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009158 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800901e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009022:	4b48      	ldr	r3, [pc, #288]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009032:	ed97 6a03 	vldr	s12, [r7, #12]
 8009036:	eddf 5a45 	vldr	s11, [pc, #276]	; 800914c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800903a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800903e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800904a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800904e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009052:	e021      	b.n	8009098 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009154 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009066:	4b37      	ldr	r3, [pc, #220]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009076:	ed97 6a03 	vldr	s12, [r7, #12]
 800907a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800914c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800907e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800908a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009092:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009096:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009098:	4b2a      	ldr	r3, [pc, #168]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800909a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909c:	0a5b      	lsrs	r3, r3, #9
 800909e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090be:	ee17 2a90 	vmov	r2, s15
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80090c6:	4b1f      	ldr	r3, [pc, #124]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ca:	0c1b      	lsrs	r3, r3, #16
 80090cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d0:	ee07 3a90 	vmov	s15, r3
 80090d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ec:	ee17 2a90 	vmov	r2, s15
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80090f4:	4b13      	ldr	r3, [pc, #76]	; (8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f8:	0e1b      	lsrs	r3, r3, #24
 80090fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800910a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800910e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800911a:	ee17 2a90 	vmov	r2, s15
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009122:	e008      	b.n	8009136 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	609a      	str	r2, [r3, #8]
}
 8009136:	bf00      	nop
 8009138:	3724      	adds	r7, #36	; 0x24
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	58024400 	.word	0x58024400
 8009148:	03d09000 	.word	0x03d09000
 800914c:	46000000 	.word	0x46000000
 8009150:	4c742400 	.word	0x4c742400
 8009154:	4a742400 	.word	0x4a742400
 8009158:	4bbebc20 	.word	0x4bbebc20

0800915c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800916a:	4b53      	ldr	r3, [pc, #332]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 800916c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	2b03      	cmp	r3, #3
 8009174:	d101      	bne.n	800917a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e099      	b.n	80092ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800917a:	4b4f      	ldr	r3, [pc, #316]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a4e      	ldr	r2, [pc, #312]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009180:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009186:	f7fc fd13 	bl	8005bb0 <HAL_GetTick>
 800918a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800918c:	e008      	b.n	80091a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800918e:	f7fc fd0f 	bl	8005bb0 <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	2b02      	cmp	r3, #2
 800919a:	d901      	bls.n	80091a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e086      	b.n	80092ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091a0:	4b45      	ldr	r3, [pc, #276]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1f0      	bne.n	800918e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80091ac:	4b42      	ldr	r3, [pc, #264]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 80091ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	031b      	lsls	r3, r3, #12
 80091ba:	493f      	ldr	r1, [pc, #252]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 80091bc:	4313      	orrs	r3, r2
 80091be:	628b      	str	r3, [r1, #40]	; 0x28
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	025b      	lsls	r3, r3, #9
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	3b01      	subs	r3, #1
 80091dc:	041b      	lsls	r3, r3, #16
 80091de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091e2:	431a      	orrs	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	061b      	lsls	r3, r3, #24
 80091ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091f0:	4931      	ldr	r1, [pc, #196]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80091f6:	4b30      	ldr	r3, [pc, #192]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	695b      	ldr	r3, [r3, #20]
 8009202:	492d      	ldr	r1, [pc, #180]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009204:	4313      	orrs	r3, r2
 8009206:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009208:	4b2b      	ldr	r3, [pc, #172]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	f023 0220 	bic.w	r2, r3, #32
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	4928      	ldr	r1, [pc, #160]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009216:	4313      	orrs	r3, r2
 8009218:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800921a:	4b27      	ldr	r3, [pc, #156]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	4a26      	ldr	r2, [pc, #152]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009220:	f023 0310 	bic.w	r3, r3, #16
 8009224:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009226:	4b24      	ldr	r3, [pc, #144]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800922a:	4b24      	ldr	r3, [pc, #144]	; (80092bc <RCCEx_PLL2_Config+0x160>)
 800922c:	4013      	ands	r3, r2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	69d2      	ldr	r2, [r2, #28]
 8009232:	00d2      	lsls	r2, r2, #3
 8009234:	4920      	ldr	r1, [pc, #128]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009236:	4313      	orrs	r3, r2
 8009238:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800923a:	4b1f      	ldr	r3, [pc, #124]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 800923c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923e:	4a1e      	ldr	r2, [pc, #120]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009240:	f043 0310 	orr.w	r3, r3, #16
 8009244:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d106      	bne.n	800925a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800924c:	4b1a      	ldr	r3, [pc, #104]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 800924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009250:	4a19      	ldr	r2, [pc, #100]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009252:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009256:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009258:	e00f      	b.n	800927a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d106      	bne.n	800926e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009260:	4b15      	ldr	r3, [pc, #84]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	4a14      	ldr	r2, [pc, #80]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800926a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800926c:	e005      	b.n	800927a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800926e:	4b12      	ldr	r3, [pc, #72]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009272:	4a11      	ldr	r2, [pc, #68]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009278:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800927a:	4b0f      	ldr	r3, [pc, #60]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a0e      	ldr	r2, [pc, #56]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 8009280:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009286:	f7fc fc93 	bl	8005bb0 <HAL_GetTick>
 800928a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800928c:	e008      	b.n	80092a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800928e:	f7fc fc8f 	bl	8005bb0 <HAL_GetTick>
 8009292:	4602      	mov	r2, r0
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	2b02      	cmp	r3, #2
 800929a:	d901      	bls.n	80092a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e006      	b.n	80092ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092a0:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <RCCEx_PLL2_Config+0x15c>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d0f0      	beq.n	800928e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	58024400 	.word	0x58024400
 80092bc:	ffff0007 	.word	0xffff0007

080092c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092ce:	4b53      	ldr	r3, [pc, #332]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80092d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d2:	f003 0303 	and.w	r3, r3, #3
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d101      	bne.n	80092de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e099      	b.n	8009412 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80092de:	4b4f      	ldr	r3, [pc, #316]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a4e      	ldr	r2, [pc, #312]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80092e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ea:	f7fc fc61 	bl	8005bb0 <HAL_GetTick>
 80092ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092f0:	e008      	b.n	8009304 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80092f2:	f7fc fc5d 	bl	8005bb0 <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d901      	bls.n	8009304 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e086      	b.n	8009412 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009304:	4b45      	ldr	r3, [pc, #276]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1f0      	bne.n	80092f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009310:	4b42      	ldr	r3, [pc, #264]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 8009312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009314:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	051b      	lsls	r3, r3, #20
 800931e:	493f      	ldr	r1, [pc, #252]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 8009320:	4313      	orrs	r3, r2
 8009322:	628b      	str	r3, [r1, #40]	; 0x28
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	3b01      	subs	r3, #1
 800932a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	3b01      	subs	r3, #1
 8009334:	025b      	lsls	r3, r3, #9
 8009336:	b29b      	uxth	r3, r3
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	3b01      	subs	r3, #1
 8009340:	041b      	lsls	r3, r3, #16
 8009342:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009346:	431a      	orrs	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	3b01      	subs	r3, #1
 800934e:	061b      	lsls	r3, r3, #24
 8009350:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009354:	4931      	ldr	r1, [pc, #196]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 8009356:	4313      	orrs	r3, r2
 8009358:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800935a:	4b30      	ldr	r3, [pc, #192]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	492d      	ldr	r1, [pc, #180]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 8009368:	4313      	orrs	r3, r2
 800936a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800936c:	4b2b      	ldr	r3, [pc, #172]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	4928      	ldr	r1, [pc, #160]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 800937a:	4313      	orrs	r3, r2
 800937c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800937e:	4b27      	ldr	r3, [pc, #156]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 8009380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009382:	4a26      	ldr	r2, [pc, #152]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 8009384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009388:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800938a:	4b24      	ldr	r3, [pc, #144]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 800938c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800938e:	4b24      	ldr	r3, [pc, #144]	; (8009420 <RCCEx_PLL3_Config+0x160>)
 8009390:	4013      	ands	r3, r2
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	69d2      	ldr	r2, [r2, #28]
 8009396:	00d2      	lsls	r2, r2, #3
 8009398:	4920      	ldr	r1, [pc, #128]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 800939a:	4313      	orrs	r3, r2
 800939c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800939e:	4b1f      	ldr	r3, [pc, #124]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80093a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a2:	4a1e      	ldr	r2, [pc, #120]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80093a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d106      	bne.n	80093be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80093b0:	4b1a      	ldr	r3, [pc, #104]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80093b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b4:	4a19      	ldr	r2, [pc, #100]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80093b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093bc:	e00f      	b.n	80093de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d106      	bne.n	80093d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80093c4:	4b15      	ldr	r3, [pc, #84]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	4a14      	ldr	r2, [pc, #80]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80093ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093d0:	e005      	b.n	80093de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80093d2:	4b12      	ldr	r3, [pc, #72]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	4a11      	ldr	r2, [pc, #68]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80093d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80093de:	4b0f      	ldr	r3, [pc, #60]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a0e      	ldr	r2, [pc, #56]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 80093e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ea:	f7fc fbe1 	bl	8005bb0 <HAL_GetTick>
 80093ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093f0:	e008      	b.n	8009404 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80093f2:	f7fc fbdd 	bl	8005bb0 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d901      	bls.n	8009404 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e006      	b.n	8009412 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009404:	4b05      	ldr	r3, [pc, #20]	; (800941c <RCCEx_PLL3_Config+0x15c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0f0      	beq.n	80093f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009410:	7bfb      	ldrb	r3, [r7, #15]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	58024400 	.word	0x58024400
 8009420:	ffff0007 	.word	0xffff0007

08009424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e049      	b.n	80094ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b00      	cmp	r3, #0
 8009440:	d106      	bne.n	8009450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7fa fa5e 	bl	800390c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3304      	adds	r3, #4
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	f001 f982 	bl	800a76c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d001      	beq.n	80094ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e04c      	b.n	8009586 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2202      	movs	r2, #2
 80094f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a26      	ldr	r2, [pc, #152]	; (8009594 <HAL_TIM_Base_Start+0xc0>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d022      	beq.n	8009544 <HAL_TIM_Base_Start+0x70>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009506:	d01d      	beq.n	8009544 <HAL_TIM_Base_Start+0x70>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a22      	ldr	r2, [pc, #136]	; (8009598 <HAL_TIM_Base_Start+0xc4>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d018      	beq.n	8009544 <HAL_TIM_Base_Start+0x70>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a21      	ldr	r2, [pc, #132]	; (800959c <HAL_TIM_Base_Start+0xc8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d013      	beq.n	8009544 <HAL_TIM_Base_Start+0x70>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a1f      	ldr	r2, [pc, #124]	; (80095a0 <HAL_TIM_Base_Start+0xcc>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d00e      	beq.n	8009544 <HAL_TIM_Base_Start+0x70>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a1e      	ldr	r2, [pc, #120]	; (80095a4 <HAL_TIM_Base_Start+0xd0>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d009      	beq.n	8009544 <HAL_TIM_Base_Start+0x70>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a1c      	ldr	r2, [pc, #112]	; (80095a8 <HAL_TIM_Base_Start+0xd4>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d004      	beq.n	8009544 <HAL_TIM_Base_Start+0x70>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a1b      	ldr	r2, [pc, #108]	; (80095ac <HAL_TIM_Base_Start+0xd8>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d115      	bne.n	8009570 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	689a      	ldr	r2, [r3, #8]
 800954a:	4b19      	ldr	r3, [pc, #100]	; (80095b0 <HAL_TIM_Base_Start+0xdc>)
 800954c:	4013      	ands	r3, r2
 800954e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b06      	cmp	r3, #6
 8009554:	d015      	beq.n	8009582 <HAL_TIM_Base_Start+0xae>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800955c:	d011      	beq.n	8009582 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f042 0201 	orr.w	r2, r2, #1
 800956c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800956e:	e008      	b.n	8009582 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f042 0201 	orr.w	r2, r2, #1
 800957e:	601a      	str	r2, [r3, #0]
 8009580:	e000      	b.n	8009584 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	40010000 	.word	0x40010000
 8009598:	40000400 	.word	0x40000400
 800959c:	40000800 	.word	0x40000800
 80095a0:	40000c00 	.word	0x40000c00
 80095a4:	40010400 	.word	0x40010400
 80095a8:	40001800 	.word	0x40001800
 80095ac:	40014000 	.word	0x40014000
 80095b0:	00010007 	.word	0x00010007

080095b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6a1a      	ldr	r2, [r3, #32]
 80095c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80095c6:	4013      	ands	r3, r2
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10f      	bne.n	80095ec <HAL_TIM_Base_Stop+0x38>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6a1a      	ldr	r2, [r3, #32]
 80095d2:	f240 4344 	movw	r3, #1092	; 0x444
 80095d6:	4013      	ands	r3, r2
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d107      	bne.n	80095ec <HAL_TIM_Base_Stop+0x38>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0201 	bic.w	r2, r2, #1
 80095ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
	...

08009604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b01      	cmp	r3, #1
 8009616:	d001      	beq.n	800961c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e054      	b.n	80096c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68da      	ldr	r2, [r3, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f042 0201 	orr.w	r2, r2, #1
 8009632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a26      	ldr	r2, [pc, #152]	; (80096d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d022      	beq.n	8009684 <HAL_TIM_Base_Start_IT+0x80>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009646:	d01d      	beq.n	8009684 <HAL_TIM_Base_Start_IT+0x80>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a22      	ldr	r2, [pc, #136]	; (80096d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d018      	beq.n	8009684 <HAL_TIM_Base_Start_IT+0x80>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a21      	ldr	r2, [pc, #132]	; (80096dc <HAL_TIM_Base_Start_IT+0xd8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d013      	beq.n	8009684 <HAL_TIM_Base_Start_IT+0x80>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a1f      	ldr	r2, [pc, #124]	; (80096e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d00e      	beq.n	8009684 <HAL_TIM_Base_Start_IT+0x80>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a1e      	ldr	r2, [pc, #120]	; (80096e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d009      	beq.n	8009684 <HAL_TIM_Base_Start_IT+0x80>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a1c      	ldr	r2, [pc, #112]	; (80096e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d004      	beq.n	8009684 <HAL_TIM_Base_Start_IT+0x80>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a1b      	ldr	r2, [pc, #108]	; (80096ec <HAL_TIM_Base_Start_IT+0xe8>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d115      	bne.n	80096b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689a      	ldr	r2, [r3, #8]
 800968a:	4b19      	ldr	r3, [pc, #100]	; (80096f0 <HAL_TIM_Base_Start_IT+0xec>)
 800968c:	4013      	ands	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b06      	cmp	r3, #6
 8009694:	d015      	beq.n	80096c2 <HAL_TIM_Base_Start_IT+0xbe>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800969c:	d011      	beq.n	80096c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0201 	orr.w	r2, r2, #1
 80096ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ae:	e008      	b.n	80096c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f042 0201 	orr.w	r2, r2, #1
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	e000      	b.n	80096c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40000400 	.word	0x40000400
 80096dc:	40000800 	.word	0x40000800
 80096e0:	40000c00 	.word	0x40000c00
 80096e4:	40010400 	.word	0x40010400
 80096e8:	40001800 	.word	0x40001800
 80096ec:	40014000 	.word	0x40014000
 80096f0:	00010007 	.word	0x00010007

080096f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0201 	bic.w	r2, r2, #1
 800970a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6a1a      	ldr	r2, [r3, #32]
 8009712:	f241 1311 	movw	r3, #4369	; 0x1111
 8009716:	4013      	ands	r3, r2
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10f      	bne.n	800973c <HAL_TIM_Base_Stop_IT+0x48>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6a1a      	ldr	r2, [r3, #32]
 8009722:	f240 4344 	movw	r3, #1092	; 0x444
 8009726:	4013      	ands	r3, r2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d107      	bne.n	800973c <HAL_TIM_Base_Stop_IT+0x48>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f022 0201 	bic.w	r2, r2, #1
 800973a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b082      	sub	sp, #8
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e049      	b.n	80097f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	d106      	bne.n	800977e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f841 	bl	8009800 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2202      	movs	r2, #2
 8009782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3304      	adds	r3, #4
 800978e:	4619      	mov	r1, r3
 8009790:	4610      	mov	r0, r2
 8009792:	f000 ffeb 	bl	800a76c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d109      	bne.n	8009838 <HAL_TIM_PWM_Start+0x24>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b01      	cmp	r3, #1
 800982e:	bf14      	ite	ne
 8009830:	2301      	movne	r3, #1
 8009832:	2300      	moveq	r3, #0
 8009834:	b2db      	uxtb	r3, r3
 8009836:	e03c      	b.n	80098b2 <HAL_TIM_PWM_Start+0x9e>
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	2b04      	cmp	r3, #4
 800983c:	d109      	bne.n	8009852 <HAL_TIM_PWM_Start+0x3e>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b01      	cmp	r3, #1
 8009848:	bf14      	ite	ne
 800984a:	2301      	movne	r3, #1
 800984c:	2300      	moveq	r3, #0
 800984e:	b2db      	uxtb	r3, r3
 8009850:	e02f      	b.n	80098b2 <HAL_TIM_PWM_Start+0x9e>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b08      	cmp	r3, #8
 8009856:	d109      	bne.n	800986c <HAL_TIM_PWM_Start+0x58>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b01      	cmp	r3, #1
 8009862:	bf14      	ite	ne
 8009864:	2301      	movne	r3, #1
 8009866:	2300      	moveq	r3, #0
 8009868:	b2db      	uxtb	r3, r3
 800986a:	e022      	b.n	80098b2 <HAL_TIM_PWM_Start+0x9e>
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	2b0c      	cmp	r3, #12
 8009870:	d109      	bne.n	8009886 <HAL_TIM_PWM_Start+0x72>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b01      	cmp	r3, #1
 800987c:	bf14      	ite	ne
 800987e:	2301      	movne	r3, #1
 8009880:	2300      	moveq	r3, #0
 8009882:	b2db      	uxtb	r3, r3
 8009884:	e015      	b.n	80098b2 <HAL_TIM_PWM_Start+0x9e>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b10      	cmp	r3, #16
 800988a:	d109      	bne.n	80098a0 <HAL_TIM_PWM_Start+0x8c>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b01      	cmp	r3, #1
 8009896:	bf14      	ite	ne
 8009898:	2301      	movne	r3, #1
 800989a:	2300      	moveq	r3, #0
 800989c:	b2db      	uxtb	r3, r3
 800989e:	e008      	b.n	80098b2 <HAL_TIM_PWM_Start+0x9e>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	bf14      	ite	ne
 80098ac:	2301      	movne	r3, #1
 80098ae:	2300      	moveq	r3, #0
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e0a1      	b.n	80099fe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d104      	bne.n	80098ca <HAL_TIM_PWM_Start+0xb6>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098c8:	e023      	b.n	8009912 <HAL_TIM_PWM_Start+0xfe>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b04      	cmp	r3, #4
 80098ce:	d104      	bne.n	80098da <HAL_TIM_PWM_Start+0xc6>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098d8:	e01b      	b.n	8009912 <HAL_TIM_PWM_Start+0xfe>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d104      	bne.n	80098ea <HAL_TIM_PWM_Start+0xd6>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098e8:	e013      	b.n	8009912 <HAL_TIM_PWM_Start+0xfe>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b0c      	cmp	r3, #12
 80098ee:	d104      	bne.n	80098fa <HAL_TIM_PWM_Start+0xe6>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098f8:	e00b      	b.n	8009912 <HAL_TIM_PWM_Start+0xfe>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b10      	cmp	r3, #16
 80098fe:	d104      	bne.n	800990a <HAL_TIM_PWM_Start+0xf6>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009908:	e003      	b.n	8009912 <HAL_TIM_PWM_Start+0xfe>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2202      	movs	r2, #2
 800990e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2201      	movs	r2, #1
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	4618      	mov	r0, r3
 800991c:	f001 fc5e 	bl	800b1dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a38      	ldr	r2, [pc, #224]	; (8009a08 <HAL_TIM_PWM_Start+0x1f4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d013      	beq.n	8009952 <HAL_TIM_PWM_Start+0x13e>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a37      	ldr	r2, [pc, #220]	; (8009a0c <HAL_TIM_PWM_Start+0x1f8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d00e      	beq.n	8009952 <HAL_TIM_PWM_Start+0x13e>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a35      	ldr	r2, [pc, #212]	; (8009a10 <HAL_TIM_PWM_Start+0x1fc>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d009      	beq.n	8009952 <HAL_TIM_PWM_Start+0x13e>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a34      	ldr	r2, [pc, #208]	; (8009a14 <HAL_TIM_PWM_Start+0x200>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d004      	beq.n	8009952 <HAL_TIM_PWM_Start+0x13e>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a32      	ldr	r2, [pc, #200]	; (8009a18 <HAL_TIM_PWM_Start+0x204>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d101      	bne.n	8009956 <HAL_TIM_PWM_Start+0x142>
 8009952:	2301      	movs	r3, #1
 8009954:	e000      	b.n	8009958 <HAL_TIM_PWM_Start+0x144>
 8009956:	2300      	movs	r3, #0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d007      	beq.n	800996c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800996a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a25      	ldr	r2, [pc, #148]	; (8009a08 <HAL_TIM_PWM_Start+0x1f4>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d022      	beq.n	80099bc <HAL_TIM_PWM_Start+0x1a8>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800997e:	d01d      	beq.n	80099bc <HAL_TIM_PWM_Start+0x1a8>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a25      	ldr	r2, [pc, #148]	; (8009a1c <HAL_TIM_PWM_Start+0x208>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d018      	beq.n	80099bc <HAL_TIM_PWM_Start+0x1a8>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a24      	ldr	r2, [pc, #144]	; (8009a20 <HAL_TIM_PWM_Start+0x20c>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d013      	beq.n	80099bc <HAL_TIM_PWM_Start+0x1a8>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a22      	ldr	r2, [pc, #136]	; (8009a24 <HAL_TIM_PWM_Start+0x210>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d00e      	beq.n	80099bc <HAL_TIM_PWM_Start+0x1a8>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a1a      	ldr	r2, [pc, #104]	; (8009a0c <HAL_TIM_PWM_Start+0x1f8>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d009      	beq.n	80099bc <HAL_TIM_PWM_Start+0x1a8>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a1e      	ldr	r2, [pc, #120]	; (8009a28 <HAL_TIM_PWM_Start+0x214>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d004      	beq.n	80099bc <HAL_TIM_PWM_Start+0x1a8>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a16      	ldr	r2, [pc, #88]	; (8009a10 <HAL_TIM_PWM_Start+0x1fc>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d115      	bne.n	80099e8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689a      	ldr	r2, [r3, #8]
 80099c2:	4b1a      	ldr	r3, [pc, #104]	; (8009a2c <HAL_TIM_PWM_Start+0x218>)
 80099c4:	4013      	ands	r3, r2
 80099c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b06      	cmp	r3, #6
 80099cc:	d015      	beq.n	80099fa <HAL_TIM_PWM_Start+0x1e6>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099d4:	d011      	beq.n	80099fa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f042 0201 	orr.w	r2, r2, #1
 80099e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099e6:	e008      	b.n	80099fa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0201 	orr.w	r2, r2, #1
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	e000      	b.n	80099fc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	40010000 	.word	0x40010000
 8009a0c:	40010400 	.word	0x40010400
 8009a10:	40014000 	.word	0x40014000
 8009a14:	40014400 	.word	0x40014400
 8009a18:	40014800 	.word	0x40014800
 8009a1c:	40000400 	.word	0x40000400
 8009a20:	40000800 	.word	0x40000800
 8009a24:	40000c00 	.word	0x40000c00
 8009a28:	40001800 	.word	0x40001800
 8009a2c:	00010007 	.word	0x00010007

08009a30 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 fbca 	bl	800b1dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a3e      	ldr	r2, [pc, #248]	; (8009b48 <HAL_TIM_PWM_Stop+0x118>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d013      	beq.n	8009a7a <HAL_TIM_PWM_Stop+0x4a>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a3d      	ldr	r2, [pc, #244]	; (8009b4c <HAL_TIM_PWM_Stop+0x11c>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d00e      	beq.n	8009a7a <HAL_TIM_PWM_Stop+0x4a>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a3b      	ldr	r2, [pc, #236]	; (8009b50 <HAL_TIM_PWM_Stop+0x120>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d009      	beq.n	8009a7a <HAL_TIM_PWM_Stop+0x4a>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a3a      	ldr	r2, [pc, #232]	; (8009b54 <HAL_TIM_PWM_Stop+0x124>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d004      	beq.n	8009a7a <HAL_TIM_PWM_Stop+0x4a>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a38      	ldr	r2, [pc, #224]	; (8009b58 <HAL_TIM_PWM_Stop+0x128>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d101      	bne.n	8009a7e <HAL_TIM_PWM_Stop+0x4e>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e000      	b.n	8009a80 <HAL_TIM_PWM_Stop+0x50>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d017      	beq.n	8009ab4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6a1a      	ldr	r2, [r3, #32]
 8009a8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a8e:	4013      	ands	r3, r2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10f      	bne.n	8009ab4 <HAL_TIM_PWM_Stop+0x84>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6a1a      	ldr	r2, [r3, #32]
 8009a9a:	f240 4344 	movw	r3, #1092	; 0x444
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d107      	bne.n	8009ab4 <HAL_TIM_PWM_Stop+0x84>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ab2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6a1a      	ldr	r2, [r3, #32]
 8009aba:	f241 1311 	movw	r3, #4369	; 0x1111
 8009abe:	4013      	ands	r3, r2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10f      	bne.n	8009ae4 <HAL_TIM_PWM_Stop+0xb4>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6a1a      	ldr	r2, [r3, #32]
 8009aca:	f240 4344 	movw	r3, #1092	; 0x444
 8009ace:	4013      	ands	r3, r2
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d107      	bne.n	8009ae4 <HAL_TIM_PWM_Stop+0xb4>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 0201 	bic.w	r2, r2, #1
 8009ae2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d104      	bne.n	8009af4 <HAL_TIM_PWM_Stop+0xc4>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009af2:	e023      	b.n	8009b3c <HAL_TIM_PWM_Stop+0x10c>
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	d104      	bne.n	8009b04 <HAL_TIM_PWM_Stop+0xd4>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b02:	e01b      	b.n	8009b3c <HAL_TIM_PWM_Stop+0x10c>
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	2b08      	cmp	r3, #8
 8009b08:	d104      	bne.n	8009b14 <HAL_TIM_PWM_Stop+0xe4>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b12:	e013      	b.n	8009b3c <HAL_TIM_PWM_Stop+0x10c>
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2b0c      	cmp	r3, #12
 8009b18:	d104      	bne.n	8009b24 <HAL_TIM_PWM_Stop+0xf4>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b22:	e00b      	b.n	8009b3c <HAL_TIM_PWM_Stop+0x10c>
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b10      	cmp	r3, #16
 8009b28:	d104      	bne.n	8009b34 <HAL_TIM_PWM_Stop+0x104>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b32:	e003      	b.n	8009b3c <HAL_TIM_PWM_Stop+0x10c>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	40010000 	.word	0x40010000
 8009b4c:	40010400 	.word	0x40010400
 8009b50:	40014000 	.word	0x40014000
 8009b54:	40014400 	.word	0x40014400
 8009b58:	40014800 	.word	0x40014800

08009b5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e049      	b.n	8009c02 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f841 	bl	8009c0a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	3304      	adds	r3, #4
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	f000 fde6 	bl	800a76c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b083      	sub	sp, #12
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009c12:	bf00      	nop
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b082      	sub	sp, #8
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f001 fad3 	bl	800b1dc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	6a1a      	ldr	r2, [r3, #32]
 8009c3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c40:	4013      	ands	r3, r2
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10f      	bne.n	8009c66 <HAL_TIM_IC_Stop+0x48>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6a1a      	ldr	r2, [r3, #32]
 8009c4c:	f240 4344 	movw	r3, #1092	; 0x444
 8009c50:	4013      	ands	r3, r2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d107      	bne.n	8009c66 <HAL_TIM_IC_Stop+0x48>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0201 	bic.w	r2, r2, #1
 8009c64:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d104      	bne.n	8009c76 <HAL_TIM_IC_Stop+0x58>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c74:	e023      	b.n	8009cbe <HAL_TIM_IC_Stop+0xa0>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	d104      	bne.n	8009c86 <HAL_TIM_IC_Stop+0x68>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c84:	e01b      	b.n	8009cbe <HAL_TIM_IC_Stop+0xa0>
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d104      	bne.n	8009c96 <HAL_TIM_IC_Stop+0x78>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c94:	e013      	b.n	8009cbe <HAL_TIM_IC_Stop+0xa0>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b0c      	cmp	r3, #12
 8009c9a:	d104      	bne.n	8009ca6 <HAL_TIM_IC_Stop+0x88>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ca4:	e00b      	b.n	8009cbe <HAL_TIM_IC_Stop+0xa0>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b10      	cmp	r3, #16
 8009caa:	d104      	bne.n	8009cb6 <HAL_TIM_IC_Stop+0x98>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cb4:	e003      	b.n	8009cbe <HAL_TIM_IC_Stop+0xa0>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d104      	bne.n	8009cce <HAL_TIM_IC_Stop+0xb0>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ccc:	e013      	b.n	8009cf6 <HAL_TIM_IC_Stop+0xd8>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b04      	cmp	r3, #4
 8009cd2:	d104      	bne.n	8009cde <HAL_TIM_IC_Stop+0xc0>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cdc:	e00b      	b.n	8009cf6 <HAL_TIM_IC_Stop+0xd8>
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d104      	bne.n	8009cee <HAL_TIM_IC_Stop+0xd0>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cec:	e003      	b.n	8009cf6 <HAL_TIM_IC_Stop+0xd8>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d104      	bne.n	8009d1e <HAL_TIM_IC_Start_IT+0x1e>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	e023      	b.n	8009d66 <HAL_TIM_IC_Start_IT+0x66>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b04      	cmp	r3, #4
 8009d22:	d104      	bne.n	8009d2e <HAL_TIM_IC_Start_IT+0x2e>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	e01b      	b.n	8009d66 <HAL_TIM_IC_Start_IT+0x66>
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2b08      	cmp	r3, #8
 8009d32:	d104      	bne.n	8009d3e <HAL_TIM_IC_Start_IT+0x3e>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	e013      	b.n	8009d66 <HAL_TIM_IC_Start_IT+0x66>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b0c      	cmp	r3, #12
 8009d42:	d104      	bne.n	8009d4e <HAL_TIM_IC_Start_IT+0x4e>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	e00b      	b.n	8009d66 <HAL_TIM_IC_Start_IT+0x66>
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	2b10      	cmp	r3, #16
 8009d52:	d104      	bne.n	8009d5e <HAL_TIM_IC_Start_IT+0x5e>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	e003      	b.n	8009d66 <HAL_TIM_IC_Start_IT+0x66>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d104      	bne.n	8009d78 <HAL_TIM_IC_Start_IT+0x78>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	e013      	b.n	8009da0 <HAL_TIM_IC_Start_IT+0xa0>
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	2b04      	cmp	r3, #4
 8009d7c:	d104      	bne.n	8009d88 <HAL_TIM_IC_Start_IT+0x88>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	e00b      	b.n	8009da0 <HAL_TIM_IC_Start_IT+0xa0>
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b08      	cmp	r3, #8
 8009d8c:	d104      	bne.n	8009d98 <HAL_TIM_IC_Start_IT+0x98>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	e003      	b.n	8009da0 <HAL_TIM_IC_Start_IT+0xa0>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d102      	bne.n	8009dae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009da8:	7b7b      	ldrb	r3, [r7, #13]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d001      	beq.n	8009db2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e0e2      	b.n	8009f78 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d104      	bne.n	8009dc2 <HAL_TIM_IC_Start_IT+0xc2>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dc0:	e023      	b.n	8009e0a <HAL_TIM_IC_Start_IT+0x10a>
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	d104      	bne.n	8009dd2 <HAL_TIM_IC_Start_IT+0xd2>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dd0:	e01b      	b.n	8009e0a <HAL_TIM_IC_Start_IT+0x10a>
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	d104      	bne.n	8009de2 <HAL_TIM_IC_Start_IT+0xe2>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009de0:	e013      	b.n	8009e0a <HAL_TIM_IC_Start_IT+0x10a>
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b0c      	cmp	r3, #12
 8009de6:	d104      	bne.n	8009df2 <HAL_TIM_IC_Start_IT+0xf2>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2202      	movs	r2, #2
 8009dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009df0:	e00b      	b.n	8009e0a <HAL_TIM_IC_Start_IT+0x10a>
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	2b10      	cmp	r3, #16
 8009df6:	d104      	bne.n	8009e02 <HAL_TIM_IC_Start_IT+0x102>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e00:	e003      	b.n	8009e0a <HAL_TIM_IC_Start_IT+0x10a>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2202      	movs	r2, #2
 8009e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <HAL_TIM_IC_Start_IT+0x11a>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e18:	e013      	b.n	8009e42 <HAL_TIM_IC_Start_IT+0x142>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d104      	bne.n	8009e2a <HAL_TIM_IC_Start_IT+0x12a>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2202      	movs	r2, #2
 8009e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e28:	e00b      	b.n	8009e42 <HAL_TIM_IC_Start_IT+0x142>
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	2b08      	cmp	r3, #8
 8009e2e:	d104      	bne.n	8009e3a <HAL_TIM_IC_Start_IT+0x13a>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2202      	movs	r2, #2
 8009e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e38:	e003      	b.n	8009e42 <HAL_TIM_IC_Start_IT+0x142>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b0c      	cmp	r3, #12
 8009e46:	d841      	bhi.n	8009ecc <HAL_TIM_IC_Start_IT+0x1cc>
 8009e48:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <HAL_TIM_IC_Start_IT+0x150>)
 8009e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4e:	bf00      	nop
 8009e50:	08009e85 	.word	0x08009e85
 8009e54:	08009ecd 	.word	0x08009ecd
 8009e58:	08009ecd 	.word	0x08009ecd
 8009e5c:	08009ecd 	.word	0x08009ecd
 8009e60:	08009e97 	.word	0x08009e97
 8009e64:	08009ecd 	.word	0x08009ecd
 8009e68:	08009ecd 	.word	0x08009ecd
 8009e6c:	08009ecd 	.word	0x08009ecd
 8009e70:	08009ea9 	.word	0x08009ea9
 8009e74:	08009ecd 	.word	0x08009ecd
 8009e78:	08009ecd 	.word	0x08009ecd
 8009e7c:	08009ecd 	.word	0x08009ecd
 8009e80:	08009ebb 	.word	0x08009ebb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f042 0202 	orr.w	r2, r2, #2
 8009e92:	60da      	str	r2, [r3, #12]
      break;
 8009e94:	e01d      	b.n	8009ed2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68da      	ldr	r2, [r3, #12]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f042 0204 	orr.w	r2, r2, #4
 8009ea4:	60da      	str	r2, [r3, #12]
      break;
 8009ea6:	e014      	b.n	8009ed2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68da      	ldr	r2, [r3, #12]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f042 0208 	orr.w	r2, r2, #8
 8009eb6:	60da      	str	r2, [r3, #12]
      break;
 8009eb8:	e00b      	b.n	8009ed2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f042 0210 	orr.w	r2, r2, #16
 8009ec8:	60da      	str	r2, [r3, #12]
      break;
 8009eca:	e002      	b.n	8009ed2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	73fb      	strb	r3, [r7, #15]
      break;
 8009ed0:	bf00      	nop
  }

  if (status == HAL_OK)
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d14e      	bne.n	8009f76 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2201      	movs	r2, #1
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f001 f97b 	bl	800b1dc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a25      	ldr	r2, [pc, #148]	; (8009f80 <HAL_TIM_IC_Start_IT+0x280>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d022      	beq.n	8009f36 <HAL_TIM_IC_Start_IT+0x236>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef8:	d01d      	beq.n	8009f36 <HAL_TIM_IC_Start_IT+0x236>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a21      	ldr	r2, [pc, #132]	; (8009f84 <HAL_TIM_IC_Start_IT+0x284>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d018      	beq.n	8009f36 <HAL_TIM_IC_Start_IT+0x236>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a1f      	ldr	r2, [pc, #124]	; (8009f88 <HAL_TIM_IC_Start_IT+0x288>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d013      	beq.n	8009f36 <HAL_TIM_IC_Start_IT+0x236>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a1e      	ldr	r2, [pc, #120]	; (8009f8c <HAL_TIM_IC_Start_IT+0x28c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d00e      	beq.n	8009f36 <HAL_TIM_IC_Start_IT+0x236>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a1c      	ldr	r2, [pc, #112]	; (8009f90 <HAL_TIM_IC_Start_IT+0x290>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d009      	beq.n	8009f36 <HAL_TIM_IC_Start_IT+0x236>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a1b      	ldr	r2, [pc, #108]	; (8009f94 <HAL_TIM_IC_Start_IT+0x294>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d004      	beq.n	8009f36 <HAL_TIM_IC_Start_IT+0x236>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a19      	ldr	r2, [pc, #100]	; (8009f98 <HAL_TIM_IC_Start_IT+0x298>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d115      	bne.n	8009f62 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	689a      	ldr	r2, [r3, #8]
 8009f3c:	4b17      	ldr	r3, [pc, #92]	; (8009f9c <HAL_TIM_IC_Start_IT+0x29c>)
 8009f3e:	4013      	ands	r3, r2
 8009f40:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2b06      	cmp	r3, #6
 8009f46:	d015      	beq.n	8009f74 <HAL_TIM_IC_Start_IT+0x274>
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f4e:	d011      	beq.n	8009f74 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f042 0201 	orr.w	r2, r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f60:	e008      	b.n	8009f74 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f042 0201 	orr.w	r2, r2, #1
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	e000      	b.n	8009f76 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f74:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	40010000 	.word	0x40010000
 8009f84:	40000400 	.word	0x40000400
 8009f88:	40000800 	.word	0x40000800
 8009f8c:	40000c00 	.word	0x40000c00
 8009f90:	40010400 	.word	0x40010400
 8009f94:	40001800 	.word	0x40001800
 8009f98:	40014000 	.word	0x40014000
 8009f9c:	00010007 	.word	0x00010007

08009fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d122      	bne.n	8009ffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d11b      	bne.n	8009ffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f06f 0202 	mvn.w	r2, #2
 8009fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d003      	beq.n	8009fea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7f8 fe4c 	bl	8002c80 <HAL_TIM_IC_CaptureCallback>
 8009fe8:	e005      	b.n	8009ff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fba0 	bl	800a730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fba7 	bl	800a744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f003 0304 	and.w	r3, r3, #4
 800a006:	2b04      	cmp	r3, #4
 800a008:	d122      	bne.n	800a050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b04      	cmp	r3, #4
 800a016:	d11b      	bne.n	800a050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f06f 0204 	mvn.w	r2, #4
 800a020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2202      	movs	r2, #2
 800a026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7f8 fe22 	bl	8002c80 <HAL_TIM_IC_CaptureCallback>
 800a03c:	e005      	b.n	800a04a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fb76 	bl	800a730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fb7d 	bl	800a744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	f003 0308 	and.w	r3, r3, #8
 800a05a:	2b08      	cmp	r3, #8
 800a05c:	d122      	bne.n	800a0a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	f003 0308 	and.w	r3, r3, #8
 800a068:	2b08      	cmp	r3, #8
 800a06a:	d11b      	bne.n	800a0a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f06f 0208 	mvn.w	r2, #8
 800a074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2204      	movs	r2, #4
 800a07a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7f8 fdf8 	bl	8002c80 <HAL_TIM_IC_CaptureCallback>
 800a090:	e005      	b.n	800a09e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fb4c 	bl	800a730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fb53 	bl	800a744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	f003 0310 	and.w	r3, r3, #16
 800a0ae:	2b10      	cmp	r3, #16
 800a0b0:	d122      	bne.n	800a0f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	f003 0310 	and.w	r3, r3, #16
 800a0bc:	2b10      	cmp	r3, #16
 800a0be:	d11b      	bne.n	800a0f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f06f 0210 	mvn.w	r2, #16
 800a0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2208      	movs	r2, #8
 800a0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	69db      	ldr	r3, [r3, #28]
 800a0d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7f8 fdce 	bl	8002c80 <HAL_TIM_IC_CaptureCallback>
 800a0e4:	e005      	b.n	800a0f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fb22 	bl	800a730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fb29 	bl	800a744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b01      	cmp	r3, #1
 800a104:	d10e      	bne.n	800a124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	f003 0301 	and.w	r3, r3, #1
 800a110:	2b01      	cmp	r3, #1
 800a112:	d107      	bne.n	800a124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f06f 0201 	mvn.w	r2, #1
 800a11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7f8 fe06 	bl	8002d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a12e:	2b80      	cmp	r3, #128	; 0x80
 800a130:	d10e      	bne.n	800a150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a13c:	2b80      	cmp	r3, #128	; 0x80
 800a13e:	d107      	bne.n	800a150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f001 f904 	bl	800b358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a15a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a15e:	d10e      	bne.n	800a17e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16a:	2b80      	cmp	r3, #128	; 0x80
 800a16c:	d107      	bne.n	800a17e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f001 f8f7 	bl	800b36c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a188:	2b40      	cmp	r3, #64	; 0x40
 800a18a:	d10e      	bne.n	800a1aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a196:	2b40      	cmp	r3, #64	; 0x40
 800a198:	d107      	bne.n	800a1aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fad7 	bl	800a758 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	f003 0320 	and.w	r3, r3, #32
 800a1b4:	2b20      	cmp	r3, #32
 800a1b6:	d10e      	bne.n	800a1d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	d107      	bne.n	800a1d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f06f 0220 	mvn.w	r2, #32
 800a1ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f001 f8b7 	bl	800b344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1d6:	bf00      	nop
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b086      	sub	sp, #24
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d101      	bne.n	800a1fc <HAL_TIM_IC_ConfigChannel+0x1e>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	e088      	b.n	800a30e <HAL_TIM_IC_ConfigChannel+0x130>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d11b      	bne.n	800a242 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	6819      	ldr	r1, [r3, #0]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f000 fe17 	bl	800ae4c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	699a      	ldr	r2, [r3, #24]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 020c 	bic.w	r2, r2, #12
 800a22c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	6999      	ldr	r1, [r3, #24]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	689a      	ldr	r2, [r3, #8]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	430a      	orrs	r2, r1
 800a23e:	619a      	str	r2, [r3, #24]
 800a240:	e060      	b.n	800a304 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b04      	cmp	r3, #4
 800a246:	d11c      	bne.n	800a282 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6818      	ldr	r0, [r3, #0]
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	6819      	ldr	r1, [r3, #0]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f000 fe9b 	bl	800af92 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a26a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6999      	ldr	r1, [r3, #24]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	021a      	lsls	r2, r3, #8
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	430a      	orrs	r2, r1
 800a27e:	619a      	str	r2, [r3, #24]
 800a280:	e040      	b.n	800a304 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b08      	cmp	r3, #8
 800a286:	d11b      	bne.n	800a2c0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6818      	ldr	r0, [r3, #0]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	6819      	ldr	r1, [r3, #0]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f000 fee8 	bl	800b06c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	69da      	ldr	r2, [r3, #28]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f022 020c 	bic.w	r2, r2, #12
 800a2aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	69d9      	ldr	r1, [r3, #28]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	689a      	ldr	r2, [r3, #8]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	61da      	str	r2, [r3, #28]
 800a2be:	e021      	b.n	800a304 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b0c      	cmp	r3, #12
 800a2c4:	d11c      	bne.n	800a300 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	6819      	ldr	r1, [r3, #0]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f000 ff05 	bl	800b0e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	69da      	ldr	r2, [r3, #28]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a2e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	69d9      	ldr	r1, [r3, #28]
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	021a      	lsls	r2, r3, #8
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	430a      	orrs	r2, r1
 800a2fc:	61da      	str	r2, [r3, #28]
 800a2fe:	e001      	b.n	800a304 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a30c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d101      	bne.n	800a336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a332:	2302      	movs	r3, #2
 800a334:	e0ff      	b.n	800a536 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b14      	cmp	r3, #20
 800a342:	f200 80f0 	bhi.w	800a526 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a346:	a201      	add	r2, pc, #4	; (adr r2, 800a34c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34c:	0800a3a1 	.word	0x0800a3a1
 800a350:	0800a527 	.word	0x0800a527
 800a354:	0800a527 	.word	0x0800a527
 800a358:	0800a527 	.word	0x0800a527
 800a35c:	0800a3e1 	.word	0x0800a3e1
 800a360:	0800a527 	.word	0x0800a527
 800a364:	0800a527 	.word	0x0800a527
 800a368:	0800a527 	.word	0x0800a527
 800a36c:	0800a423 	.word	0x0800a423
 800a370:	0800a527 	.word	0x0800a527
 800a374:	0800a527 	.word	0x0800a527
 800a378:	0800a527 	.word	0x0800a527
 800a37c:	0800a463 	.word	0x0800a463
 800a380:	0800a527 	.word	0x0800a527
 800a384:	0800a527 	.word	0x0800a527
 800a388:	0800a527 	.word	0x0800a527
 800a38c:	0800a4a5 	.word	0x0800a4a5
 800a390:	0800a527 	.word	0x0800a527
 800a394:	0800a527 	.word	0x0800a527
 800a398:	0800a527 	.word	0x0800a527
 800a39c:	0800a4e5 	.word	0x0800a4e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68b9      	ldr	r1, [r7, #8]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 fa7a 	bl	800a8a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	699a      	ldr	r2, [r3, #24]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f042 0208 	orr.w	r2, r2, #8
 800a3ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	699a      	ldr	r2, [r3, #24]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f022 0204 	bic.w	r2, r2, #4
 800a3ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6999      	ldr	r1, [r3, #24]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	691a      	ldr	r2, [r3, #16]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	619a      	str	r2, [r3, #24]
      break;
 800a3de:	e0a5      	b.n	800a52c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68b9      	ldr	r1, [r7, #8]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 faea 	bl	800a9c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	699a      	ldr	r2, [r3, #24]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699a      	ldr	r2, [r3, #24]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a40a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6999      	ldr	r1, [r3, #24]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	021a      	lsls	r2, r3, #8
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	430a      	orrs	r2, r1
 800a41e:	619a      	str	r2, [r3, #24]
      break;
 800a420:	e084      	b.n	800a52c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68b9      	ldr	r1, [r7, #8]
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 fb53 	bl	800aad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	69da      	ldr	r2, [r3, #28]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f042 0208 	orr.w	r2, r2, #8
 800a43c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	69da      	ldr	r2, [r3, #28]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0204 	bic.w	r2, r2, #4
 800a44c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	69d9      	ldr	r1, [r3, #28]
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	61da      	str	r2, [r3, #28]
      break;
 800a460:	e064      	b.n	800a52c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68b9      	ldr	r1, [r7, #8]
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 fbbb 	bl	800abe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	69da      	ldr	r2, [r3, #28]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a47c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69da      	ldr	r2, [r3, #28]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a48c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	69d9      	ldr	r1, [r3, #28]
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	021a      	lsls	r2, r3, #8
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	61da      	str	r2, [r3, #28]
      break;
 800a4a2:	e043      	b.n	800a52c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68b9      	ldr	r1, [r7, #8]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 fc04 	bl	800acb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f042 0208 	orr.w	r2, r2, #8
 800a4be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f022 0204 	bic.w	r2, r2, #4
 800a4ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	691a      	ldr	r2, [r3, #16]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4e2:	e023      	b.n	800a52c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68b9      	ldr	r1, [r7, #8]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 fc48 	bl	800ad80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a50e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	021a      	lsls	r2, r3, #8
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	430a      	orrs	r2, r1
 800a522:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a524:	e002      	b.n	800a52c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	75fb      	strb	r3, [r7, #23]
      break;
 800a52a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a534:	7dfb      	ldrb	r3, [r7, #23]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop

0800a540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a554:	2b01      	cmp	r3, #1
 800a556:	d101      	bne.n	800a55c <HAL_TIM_ConfigClockSource+0x1c>
 800a558:	2302      	movs	r3, #2
 800a55a:	e0dc      	b.n	800a716 <HAL_TIM_ConfigClockSource+0x1d6>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	4b6a      	ldr	r3, [pc, #424]	; (800a720 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a578:	4013      	ands	r3, r2
 800a57a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a64      	ldr	r2, [pc, #400]	; (800a724 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a592:	4293      	cmp	r3, r2
 800a594:	f000 80a9 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a598:	4a62      	ldr	r2, [pc, #392]	; (800a724 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	f200 80ae 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5a0:	4a61      	ldr	r2, [pc, #388]	; (800a728 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	f000 80a1 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a5a8:	4a5f      	ldr	r2, [pc, #380]	; (800a728 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	f200 80a6 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5b0:	4a5e      	ldr	r2, [pc, #376]	; (800a72c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	f000 8099 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a5b8:	4a5c      	ldr	r2, [pc, #368]	; (800a72c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	f200 809e 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5c4:	f000 8091 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a5c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5cc:	f200 8096 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5d4:	f000 8089 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a5d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5dc:	f200 808e 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5e4:	d03e      	beq.n	800a664 <HAL_TIM_ConfigClockSource+0x124>
 800a5e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ea:	f200 8087 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f2:	f000 8086 	beq.w	800a702 <HAL_TIM_ConfigClockSource+0x1c2>
 800a5f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5fa:	d87f      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5fc:	2b70      	cmp	r3, #112	; 0x70
 800a5fe:	d01a      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0xf6>
 800a600:	2b70      	cmp	r3, #112	; 0x70
 800a602:	d87b      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a604:	2b60      	cmp	r3, #96	; 0x60
 800a606:	d050      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x16a>
 800a608:	2b60      	cmp	r3, #96	; 0x60
 800a60a:	d877      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a60c:	2b50      	cmp	r3, #80	; 0x50
 800a60e:	d03c      	beq.n	800a68a <HAL_TIM_ConfigClockSource+0x14a>
 800a610:	2b50      	cmp	r3, #80	; 0x50
 800a612:	d873      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a614:	2b40      	cmp	r3, #64	; 0x40
 800a616:	d058      	beq.n	800a6ca <HAL_TIM_ConfigClockSource+0x18a>
 800a618:	2b40      	cmp	r3, #64	; 0x40
 800a61a:	d86f      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a61c:	2b30      	cmp	r3, #48	; 0x30
 800a61e:	d064      	beq.n	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a620:	2b30      	cmp	r3, #48	; 0x30
 800a622:	d86b      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a624:	2b20      	cmp	r3, #32
 800a626:	d060      	beq.n	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a628:	2b20      	cmp	r3, #32
 800a62a:	d867      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d05c      	beq.n	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a630:	2b10      	cmp	r3, #16
 800a632:	d05a      	beq.n	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a634:	e062      	b.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6818      	ldr	r0, [r3, #0]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	6899      	ldr	r1, [r3, #8]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	f000 fda9 	bl	800b19c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a658:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	609a      	str	r2, [r3, #8]
      break;
 800a662:	e04f      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6818      	ldr	r0, [r3, #0]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	6899      	ldr	r1, [r3, #8]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	f000 fd92 	bl	800b19c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689a      	ldr	r2, [r3, #8]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a686:	609a      	str	r2, [r3, #8]
      break;
 800a688:	e03c      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6818      	ldr	r0, [r3, #0]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	6859      	ldr	r1, [r3, #4]
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	461a      	mov	r2, r3
 800a698:	f000 fc4c 	bl	800af34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2150      	movs	r1, #80	; 0x50
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f000 fd5c 	bl	800b160 <TIM_ITRx_SetConfig>
      break;
 800a6a8:	e02c      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	6859      	ldr	r1, [r3, #4]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f000 fca8 	bl	800b00c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2160      	movs	r1, #96	; 0x60
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 fd4c 	bl	800b160 <TIM_ITRx_SetConfig>
      break;
 800a6c8:	e01c      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	6859      	ldr	r1, [r3, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f000 fc2c 	bl	800af34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2140      	movs	r1, #64	; 0x40
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 fd3c 	bl	800b160 <TIM_ITRx_SetConfig>
      break;
 800a6e8:	e00c      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	f000 fd33 	bl	800b160 <TIM_ITRx_SetConfig>
      break;
 800a6fa:	e003      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a700:	e000      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a702:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a714:	7bfb      	ldrb	r3, [r7, #15]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	ffceff88 	.word	0xffceff88
 800a724:	00100040 	.word	0x00100040
 800a728:	00100030 	.word	0x00100030
 800a72c:	00100020 	.word	0x00100020

0800a730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a40      	ldr	r2, [pc, #256]	; (800a880 <TIM_Base_SetConfig+0x114>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d013      	beq.n	800a7ac <TIM_Base_SetConfig+0x40>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a78a:	d00f      	beq.n	800a7ac <TIM_Base_SetConfig+0x40>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a3d      	ldr	r2, [pc, #244]	; (800a884 <TIM_Base_SetConfig+0x118>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d00b      	beq.n	800a7ac <TIM_Base_SetConfig+0x40>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a3c      	ldr	r2, [pc, #240]	; (800a888 <TIM_Base_SetConfig+0x11c>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d007      	beq.n	800a7ac <TIM_Base_SetConfig+0x40>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a3b      	ldr	r2, [pc, #236]	; (800a88c <TIM_Base_SetConfig+0x120>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d003      	beq.n	800a7ac <TIM_Base_SetConfig+0x40>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a3a      	ldr	r2, [pc, #232]	; (800a890 <TIM_Base_SetConfig+0x124>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d108      	bne.n	800a7be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a2f      	ldr	r2, [pc, #188]	; (800a880 <TIM_Base_SetConfig+0x114>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d01f      	beq.n	800a806 <TIM_Base_SetConfig+0x9a>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7cc:	d01b      	beq.n	800a806 <TIM_Base_SetConfig+0x9a>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a2c      	ldr	r2, [pc, #176]	; (800a884 <TIM_Base_SetConfig+0x118>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d017      	beq.n	800a806 <TIM_Base_SetConfig+0x9a>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a2b      	ldr	r2, [pc, #172]	; (800a888 <TIM_Base_SetConfig+0x11c>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d013      	beq.n	800a806 <TIM_Base_SetConfig+0x9a>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a2a      	ldr	r2, [pc, #168]	; (800a88c <TIM_Base_SetConfig+0x120>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d00f      	beq.n	800a806 <TIM_Base_SetConfig+0x9a>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a29      	ldr	r2, [pc, #164]	; (800a890 <TIM_Base_SetConfig+0x124>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d00b      	beq.n	800a806 <TIM_Base_SetConfig+0x9a>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a28      	ldr	r2, [pc, #160]	; (800a894 <TIM_Base_SetConfig+0x128>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d007      	beq.n	800a806 <TIM_Base_SetConfig+0x9a>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a27      	ldr	r2, [pc, #156]	; (800a898 <TIM_Base_SetConfig+0x12c>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d003      	beq.n	800a806 <TIM_Base_SetConfig+0x9a>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a26      	ldr	r2, [pc, #152]	; (800a89c <TIM_Base_SetConfig+0x130>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d108      	bne.n	800a818 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a80c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	4313      	orrs	r3, r2
 800a816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	4313      	orrs	r3, r2
 800a824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a10      	ldr	r2, [pc, #64]	; (800a880 <TIM_Base_SetConfig+0x114>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00f      	beq.n	800a864 <TIM_Base_SetConfig+0xf8>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a12      	ldr	r2, [pc, #72]	; (800a890 <TIM_Base_SetConfig+0x124>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d00b      	beq.n	800a864 <TIM_Base_SetConfig+0xf8>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a11      	ldr	r2, [pc, #68]	; (800a894 <TIM_Base_SetConfig+0x128>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d007      	beq.n	800a864 <TIM_Base_SetConfig+0xf8>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a10      	ldr	r2, [pc, #64]	; (800a898 <TIM_Base_SetConfig+0x12c>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d003      	beq.n	800a864 <TIM_Base_SetConfig+0xf8>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a0f      	ldr	r2, [pc, #60]	; (800a89c <TIM_Base_SetConfig+0x130>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d103      	bne.n	800a86c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	691a      	ldr	r2, [r3, #16]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	615a      	str	r2, [r3, #20]
}
 800a872:	bf00      	nop
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	40010000 	.word	0x40010000
 800a884:	40000400 	.word	0x40000400
 800a888:	40000800 	.word	0x40000800
 800a88c:	40000c00 	.word	0x40000c00
 800a890:	40010400 	.word	0x40010400
 800a894:	40014000 	.word	0x40014000
 800a898:	40014400 	.word	0x40014400
 800a89c:	40014800 	.word	0x40014800

0800a8a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	f023 0201 	bic.w	r2, r3, #1
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	4b37      	ldr	r3, [pc, #220]	; (800a9a8 <TIM_OC1_SetConfig+0x108>)
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f023 0303 	bic.w	r3, r3, #3
 800a8d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f023 0302 	bic.w	r3, r3, #2
 800a8e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a2d      	ldr	r2, [pc, #180]	; (800a9ac <TIM_OC1_SetConfig+0x10c>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d00f      	beq.n	800a91c <TIM_OC1_SetConfig+0x7c>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a2c      	ldr	r2, [pc, #176]	; (800a9b0 <TIM_OC1_SetConfig+0x110>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d00b      	beq.n	800a91c <TIM_OC1_SetConfig+0x7c>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a2b      	ldr	r2, [pc, #172]	; (800a9b4 <TIM_OC1_SetConfig+0x114>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d007      	beq.n	800a91c <TIM_OC1_SetConfig+0x7c>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a2a      	ldr	r2, [pc, #168]	; (800a9b8 <TIM_OC1_SetConfig+0x118>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d003      	beq.n	800a91c <TIM_OC1_SetConfig+0x7c>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a29      	ldr	r2, [pc, #164]	; (800a9bc <TIM_OC1_SetConfig+0x11c>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d10c      	bne.n	800a936 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f023 0308 	bic.w	r3, r3, #8
 800a922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f023 0304 	bic.w	r3, r3, #4
 800a934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a1c      	ldr	r2, [pc, #112]	; (800a9ac <TIM_OC1_SetConfig+0x10c>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d00f      	beq.n	800a95e <TIM_OC1_SetConfig+0xbe>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a1b      	ldr	r2, [pc, #108]	; (800a9b0 <TIM_OC1_SetConfig+0x110>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d00b      	beq.n	800a95e <TIM_OC1_SetConfig+0xbe>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a1a      	ldr	r2, [pc, #104]	; (800a9b4 <TIM_OC1_SetConfig+0x114>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d007      	beq.n	800a95e <TIM_OC1_SetConfig+0xbe>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a19      	ldr	r2, [pc, #100]	; (800a9b8 <TIM_OC1_SetConfig+0x118>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d003      	beq.n	800a95e <TIM_OC1_SetConfig+0xbe>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a18      	ldr	r2, [pc, #96]	; (800a9bc <TIM_OC1_SetConfig+0x11c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d111      	bne.n	800a982 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a96c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	4313      	orrs	r3, r2
 800a976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	4313      	orrs	r3, r2
 800a980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	621a      	str	r2, [r3, #32]
}
 800a99c:	bf00      	nop
 800a99e:	371c      	adds	r7, #28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	fffeff8f 	.word	0xfffeff8f
 800a9ac:	40010000 	.word	0x40010000
 800a9b0:	40010400 	.word	0x40010400
 800a9b4:	40014000 	.word	0x40014000
 800a9b8:	40014400 	.word	0x40014400
 800a9bc:	40014800 	.word	0x40014800

0800a9c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	f023 0210 	bic.w	r2, r3, #16
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4b34      	ldr	r3, [pc, #208]	; (800aabc <TIM_OC2_SetConfig+0xfc>)
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	021b      	lsls	r3, r3, #8
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	f023 0320 	bic.w	r3, r3, #32
 800aa0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	011b      	lsls	r3, r3, #4
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a29      	ldr	r2, [pc, #164]	; (800aac0 <TIM_OC2_SetConfig+0x100>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d003      	beq.n	800aa28 <TIM_OC2_SetConfig+0x68>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4a28      	ldr	r2, [pc, #160]	; (800aac4 <TIM_OC2_SetConfig+0x104>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d10d      	bne.n	800aa44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	011b      	lsls	r3, r3, #4
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a1e      	ldr	r2, [pc, #120]	; (800aac0 <TIM_OC2_SetConfig+0x100>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d00f      	beq.n	800aa6c <TIM_OC2_SetConfig+0xac>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a1d      	ldr	r2, [pc, #116]	; (800aac4 <TIM_OC2_SetConfig+0x104>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d00b      	beq.n	800aa6c <TIM_OC2_SetConfig+0xac>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a1c      	ldr	r2, [pc, #112]	; (800aac8 <TIM_OC2_SetConfig+0x108>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d007      	beq.n	800aa6c <TIM_OC2_SetConfig+0xac>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a1b      	ldr	r2, [pc, #108]	; (800aacc <TIM_OC2_SetConfig+0x10c>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d003      	beq.n	800aa6c <TIM_OC2_SetConfig+0xac>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a1a      	ldr	r2, [pc, #104]	; (800aad0 <TIM_OC2_SetConfig+0x110>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d113      	bne.n	800aa94 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	695b      	ldr	r3, [r3, #20]
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	621a      	str	r2, [r3, #32]
}
 800aaae:	bf00      	nop
 800aab0:	371c      	adds	r7, #28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	feff8fff 	.word	0xfeff8fff
 800aac0:	40010000 	.word	0x40010000
 800aac4:	40010400 	.word	0x40010400
 800aac8:	40014000 	.word	0x40014000
 800aacc:	40014400 	.word	0x40014400
 800aad0:	40014800 	.word	0x40014800

0800aad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	4b33      	ldr	r3, [pc, #204]	; (800abcc <TIM_OC3_SetConfig+0xf8>)
 800ab00:	4013      	ands	r3, r2
 800ab02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f023 0303 	bic.w	r3, r3, #3
 800ab0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	021b      	lsls	r3, r3, #8
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a28      	ldr	r2, [pc, #160]	; (800abd0 <TIM_OC3_SetConfig+0xfc>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d003      	beq.n	800ab3a <TIM_OC3_SetConfig+0x66>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a27      	ldr	r2, [pc, #156]	; (800abd4 <TIM_OC3_SetConfig+0x100>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d10d      	bne.n	800ab56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	021b      	lsls	r3, r3, #8
 800ab48:	697a      	ldr	r2, [r7, #20]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a1d      	ldr	r2, [pc, #116]	; (800abd0 <TIM_OC3_SetConfig+0xfc>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d00f      	beq.n	800ab7e <TIM_OC3_SetConfig+0xaa>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a1c      	ldr	r2, [pc, #112]	; (800abd4 <TIM_OC3_SetConfig+0x100>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d00b      	beq.n	800ab7e <TIM_OC3_SetConfig+0xaa>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a1b      	ldr	r2, [pc, #108]	; (800abd8 <TIM_OC3_SetConfig+0x104>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d007      	beq.n	800ab7e <TIM_OC3_SetConfig+0xaa>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a1a      	ldr	r2, [pc, #104]	; (800abdc <TIM_OC3_SetConfig+0x108>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d003      	beq.n	800ab7e <TIM_OC3_SetConfig+0xaa>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a19      	ldr	r2, [pc, #100]	; (800abe0 <TIM_OC3_SetConfig+0x10c>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d113      	bne.n	800aba6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	011b      	lsls	r3, r3, #4
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	011b      	lsls	r3, r3, #4
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	621a      	str	r2, [r3, #32]
}
 800abc0:	bf00      	nop
 800abc2:	371c      	adds	r7, #28
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	fffeff8f 	.word	0xfffeff8f
 800abd0:	40010000 	.word	0x40010000
 800abd4:	40010400 	.word	0x40010400
 800abd8:	40014000 	.word	0x40014000
 800abdc:	40014400 	.word	0x40014400
 800abe0:	40014800 	.word	0x40014800

0800abe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b087      	sub	sp, #28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4b24      	ldr	r3, [pc, #144]	; (800aca0 <TIM_OC4_SetConfig+0xbc>)
 800ac10:	4013      	ands	r3, r2
 800ac12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	021b      	lsls	r3, r3, #8
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	031b      	lsls	r3, r3, #12
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a19      	ldr	r2, [pc, #100]	; (800aca4 <TIM_OC4_SetConfig+0xc0>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d00f      	beq.n	800ac64 <TIM_OC4_SetConfig+0x80>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a18      	ldr	r2, [pc, #96]	; (800aca8 <TIM_OC4_SetConfig+0xc4>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d00b      	beq.n	800ac64 <TIM_OC4_SetConfig+0x80>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a17      	ldr	r2, [pc, #92]	; (800acac <TIM_OC4_SetConfig+0xc8>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d007      	beq.n	800ac64 <TIM_OC4_SetConfig+0x80>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a16      	ldr	r2, [pc, #88]	; (800acb0 <TIM_OC4_SetConfig+0xcc>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d003      	beq.n	800ac64 <TIM_OC4_SetConfig+0x80>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a15      	ldr	r2, [pc, #84]	; (800acb4 <TIM_OC4_SetConfig+0xd0>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d109      	bne.n	800ac78 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	019b      	lsls	r3, r3, #6
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	693a      	ldr	r2, [r7, #16]
 800ac90:	621a      	str	r2, [r3, #32]
}
 800ac92:	bf00      	nop
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	feff8fff 	.word	0xfeff8fff
 800aca4:	40010000 	.word	0x40010000
 800aca8:	40010400 	.word	0x40010400
 800acac:	40014000 	.word	0x40014000
 800acb0:	40014400 	.word	0x40014400
 800acb4:	40014800 	.word	0x40014800

0800acb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800acb8:	b480      	push	{r7}
 800acba:	b087      	sub	sp, #28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	4b21      	ldr	r3, [pc, #132]	; (800ad68 <TIM_OC5_SetConfig+0xb0>)
 800ace4:	4013      	ands	r3, r2
 800ace6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	4313      	orrs	r3, r2
 800acf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800acf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	041b      	lsls	r3, r3, #16
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a18      	ldr	r2, [pc, #96]	; (800ad6c <TIM_OC5_SetConfig+0xb4>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d00f      	beq.n	800ad2e <TIM_OC5_SetConfig+0x76>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a17      	ldr	r2, [pc, #92]	; (800ad70 <TIM_OC5_SetConfig+0xb8>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d00b      	beq.n	800ad2e <TIM_OC5_SetConfig+0x76>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a16      	ldr	r2, [pc, #88]	; (800ad74 <TIM_OC5_SetConfig+0xbc>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d007      	beq.n	800ad2e <TIM_OC5_SetConfig+0x76>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a15      	ldr	r2, [pc, #84]	; (800ad78 <TIM_OC5_SetConfig+0xc0>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d003      	beq.n	800ad2e <TIM_OC5_SetConfig+0x76>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a14      	ldr	r2, [pc, #80]	; (800ad7c <TIM_OC5_SetConfig+0xc4>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d109      	bne.n	800ad42 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	021b      	lsls	r3, r3, #8
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	693a      	ldr	r2, [r7, #16]
 800ad5a:	621a      	str	r2, [r3, #32]
}
 800ad5c:	bf00      	nop
 800ad5e:	371c      	adds	r7, #28
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	fffeff8f 	.word	0xfffeff8f
 800ad6c:	40010000 	.word	0x40010000
 800ad70:	40010400 	.word	0x40010400
 800ad74:	40014000 	.word	0x40014000
 800ad78:	40014400 	.word	0x40014400
 800ad7c:	40014800 	.word	0x40014800

0800ad80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b087      	sub	sp, #28
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a1b      	ldr	r3, [r3, #32]
 800ad8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	4b22      	ldr	r3, [pc, #136]	; (800ae34 <TIM_OC6_SetConfig+0xb4>)
 800adac:	4013      	ands	r3, r2
 800adae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	021b      	lsls	r3, r3, #8
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4313      	orrs	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800adc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	051b      	lsls	r3, r3, #20
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	4313      	orrs	r3, r2
 800adce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a19      	ldr	r2, [pc, #100]	; (800ae38 <TIM_OC6_SetConfig+0xb8>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d00f      	beq.n	800adf8 <TIM_OC6_SetConfig+0x78>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a18      	ldr	r2, [pc, #96]	; (800ae3c <TIM_OC6_SetConfig+0xbc>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d00b      	beq.n	800adf8 <TIM_OC6_SetConfig+0x78>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a17      	ldr	r2, [pc, #92]	; (800ae40 <TIM_OC6_SetConfig+0xc0>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d007      	beq.n	800adf8 <TIM_OC6_SetConfig+0x78>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a16      	ldr	r2, [pc, #88]	; (800ae44 <TIM_OC6_SetConfig+0xc4>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d003      	beq.n	800adf8 <TIM_OC6_SetConfig+0x78>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a15      	ldr	r2, [pc, #84]	; (800ae48 <TIM_OC6_SetConfig+0xc8>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d109      	bne.n	800ae0c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800adfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	029b      	lsls	r3, r3, #10
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	621a      	str	r2, [r3, #32]
}
 800ae26:	bf00      	nop
 800ae28:	371c      	adds	r7, #28
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	feff8fff 	.word	0xfeff8fff
 800ae38:	40010000 	.word	0x40010000
 800ae3c:	40010400 	.word	0x40010400
 800ae40:	40014000 	.word	0x40014000
 800ae44:	40014400 	.word	0x40014400
 800ae48:	40014800 	.word	0x40014800

0800ae4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	f023 0201 	bic.w	r2, r3, #1
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6a1b      	ldr	r3, [r3, #32]
 800ae70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4a28      	ldr	r2, [pc, #160]	; (800af18 <TIM_TI1_SetConfig+0xcc>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d01b      	beq.n	800aeb2 <TIM_TI1_SetConfig+0x66>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae80:	d017      	beq.n	800aeb2 <TIM_TI1_SetConfig+0x66>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4a25      	ldr	r2, [pc, #148]	; (800af1c <TIM_TI1_SetConfig+0xd0>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d013      	beq.n	800aeb2 <TIM_TI1_SetConfig+0x66>
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	4a24      	ldr	r2, [pc, #144]	; (800af20 <TIM_TI1_SetConfig+0xd4>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d00f      	beq.n	800aeb2 <TIM_TI1_SetConfig+0x66>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	4a23      	ldr	r2, [pc, #140]	; (800af24 <TIM_TI1_SetConfig+0xd8>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d00b      	beq.n	800aeb2 <TIM_TI1_SetConfig+0x66>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	4a22      	ldr	r2, [pc, #136]	; (800af28 <TIM_TI1_SetConfig+0xdc>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d007      	beq.n	800aeb2 <TIM_TI1_SetConfig+0x66>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	4a21      	ldr	r2, [pc, #132]	; (800af2c <TIM_TI1_SetConfig+0xe0>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d003      	beq.n	800aeb2 <TIM_TI1_SetConfig+0x66>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	4a20      	ldr	r2, [pc, #128]	; (800af30 <TIM_TI1_SetConfig+0xe4>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d101      	bne.n	800aeb6 <TIM_TI1_SetConfig+0x6a>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e000      	b.n	800aeb8 <TIM_TI1_SetConfig+0x6c>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d008      	beq.n	800aece <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	f023 0303 	bic.w	r3, r3, #3
 800aec2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	e003      	b.n	800aed6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f043 0301 	orr.w	r3, r3, #1
 800aed4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aedc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	011b      	lsls	r3, r3, #4
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	f023 030a 	bic.w	r3, r3, #10
 800aef0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	f003 030a 	and.w	r3, r3, #10
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	697a      	ldr	r2, [r7, #20]
 800af02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	621a      	str	r2, [r3, #32]
}
 800af0a:	bf00      	nop
 800af0c:	371c      	adds	r7, #28
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	40010000 	.word	0x40010000
 800af1c:	40000400 	.word	0x40000400
 800af20:	40000800 	.word	0x40000800
 800af24:	40000c00 	.word	0x40000c00
 800af28:	40010400 	.word	0x40010400
 800af2c:	40001800 	.word	0x40001800
 800af30:	40014000 	.word	0x40014000

0800af34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a1b      	ldr	r3, [r3, #32]
 800af44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	f023 0201 	bic.w	r2, r3, #1
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	4313      	orrs	r3, r2
 800af68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f023 030a 	bic.w	r3, r3, #10
 800af70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	4313      	orrs	r3, r2
 800af78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	621a      	str	r2, [r3, #32]
}
 800af86:	bf00      	nop
 800af88:	371c      	adds	r7, #28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800af92:	b480      	push	{r7}
 800af94:	b087      	sub	sp, #28
 800af96:	af00      	add	r7, sp, #0
 800af98:	60f8      	str	r0, [r7, #12]
 800af9a:	60b9      	str	r1, [r7, #8]
 800af9c:	607a      	str	r2, [r7, #4]
 800af9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6a1b      	ldr	r3, [r3, #32]
 800afa4:	f023 0210 	bic.w	r2, r3, #16
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	021b      	lsls	r3, r3, #8
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	031b      	lsls	r3, r3, #12
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	4313      	orrs	r3, r2
 800afdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800afe4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	011b      	lsls	r3, r3, #4
 800afea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800afee:	693a      	ldr	r2, [r7, #16]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	621a      	str	r2, [r3, #32]
}
 800b000:	bf00      	nop
 800b002:	371c      	adds	r7, #28
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b087      	sub	sp, #28
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6a1b      	ldr	r3, [r3, #32]
 800b01c:	f023 0210 	bic.w	r2, r3, #16
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6a1b      	ldr	r3, [r3, #32]
 800b02e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b036:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	031b      	lsls	r3, r3, #12
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	4313      	orrs	r3, r2
 800b040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b048:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	011b      	lsls	r3, r3, #4
 800b04e:	693a      	ldr	r2, [r7, #16]
 800b050:	4313      	orrs	r3, r2
 800b052:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	621a      	str	r2, [r3, #32]
}
 800b060:	bf00      	nop
 800b062:	371c      	adds	r7, #28
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
 800b078:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	69db      	ldr	r3, [r3, #28]
 800b08a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6a1b      	ldr	r3, [r3, #32]
 800b090:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f023 0303 	bic.w	r3, r3, #3
 800b098:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b0bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	021b      	lsls	r3, r3, #8
 800b0c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	697a      	ldr	r2, [r7, #20]
 800b0d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	621a      	str	r2, [r3, #32]
}
 800b0d8:	bf00      	nop
 800b0da:	371c      	adds	r7, #28
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b110:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	021b      	lsls	r3, r3, #8
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	4313      	orrs	r3, r2
 800b11a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b122:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	031b      	lsls	r3, r3, #12
 800b128:	b29b      	uxth	r3, r3
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b136:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	031b      	lsls	r3, r3, #12
 800b13c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	4313      	orrs	r3, r2
 800b144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	621a      	str	r2, [r3, #32]
}
 800b152:	bf00      	nop
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
	...

0800b160 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	4b09      	ldr	r3, [pc, #36]	; (800b198 <TIM_ITRx_SetConfig+0x38>)
 800b174:	4013      	ands	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	f043 0307 	orr.w	r3, r3, #7
 800b182:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	609a      	str	r2, [r3, #8]
}
 800b18a:	bf00      	nop
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	ffcfff8f 	.word	0xffcfff8f

0800b19c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
 800b1a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	021a      	lsls	r2, r3, #8
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	609a      	str	r2, [r3, #8]
}
 800b1d0:	bf00      	nop
 800b1d2:	371c      	adds	r7, #28
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b087      	sub	sp, #28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	f003 031f 	and.w	r3, r3, #31
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6a1a      	ldr	r2, [r3, #32]
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	43db      	mvns	r3, r3
 800b1fe:	401a      	ands	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6a1a      	ldr	r2, [r3, #32]
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	f003 031f 	and.w	r3, r3, #31
 800b20e:	6879      	ldr	r1, [r7, #4]
 800b210:	fa01 f303 	lsl.w	r3, r1, r3
 800b214:	431a      	orrs	r2, r3
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	621a      	str	r2, [r3, #32]
}
 800b21a:	bf00      	nop
 800b21c:	371c      	adds	r7, #28
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
	...

0800b228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e06d      	b.n	800b31c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2202      	movs	r2, #2
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a30      	ldr	r2, [pc, #192]	; (800b328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d004      	beq.n	800b274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a2f      	ldr	r2, [pc, #188]	; (800b32c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d108      	bne.n	800b286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b27a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	4313      	orrs	r3, r2
 800b284:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b28c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	4313      	orrs	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a20      	ldr	r2, [pc, #128]	; (800b328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d022      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2b2:	d01d      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a1d      	ldr	r2, [pc, #116]	; (800b330 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d018      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a1c      	ldr	r2, [pc, #112]	; (800b334 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d013      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a1a      	ldr	r2, [pc, #104]	; (800b338 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d00e      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a15      	ldr	r2, [pc, #84]	; (800b32c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d009      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a16      	ldr	r2, [pc, #88]	; (800b33c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d004      	beq.n	800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a15      	ldr	r2, [pc, #84]	; (800b340 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d10c      	bne.n	800b30a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	40010000 	.word	0x40010000
 800b32c:	40010400 	.word	0x40010400
 800b330:	40000400 	.word	0x40000400
 800b334:	40000800 	.word	0x40000800
 800b338:	40000c00 	.word	0x40000c00
 800b33c:	40001800 	.word	0x40001800
 800b340:	40014000 	.word	0x40014000

0800b344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d101      	bne.n	800b392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	e042      	b.n	800b418 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d106      	bne.n	800b3aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f7fa fa27 	bl	80057f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2224      	movs	r2, #36	; 0x24
 800b3ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f022 0201 	bic.w	r2, r2, #1
 800b3c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fccc 	bl	800bd60 <UART_SetConfig>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d101      	bne.n	800b3d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e022      	b.n	800b418 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d002      	beq.n	800b3e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f001 fa28 	bl	800c830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	689a      	ldr	r2, [r3, #8]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f042 0201 	orr.w	r2, r2, #1
 800b40e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f001 faaf 	bl	800c974 <UART_CheckIdleState>
 800b416:	4603      	mov	r3, r0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08a      	sub	sp, #40	; 0x28
 800b424:	af02      	add	r7, sp, #8
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	603b      	str	r3, [r7, #0]
 800b42c:	4613      	mov	r3, r2
 800b42e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b436:	2b20      	cmp	r3, #32
 800b438:	f040 8083 	bne.w	800b542 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <HAL_UART_Transmit+0x28>
 800b442:	88fb      	ldrh	r3, [r7, #6]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e07b      	b.n	800b544 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b452:	2b01      	cmp	r3, #1
 800b454:	d101      	bne.n	800b45a <HAL_UART_Transmit+0x3a>
 800b456:	2302      	movs	r3, #2
 800b458:	e074      	b.n	800b544 <HAL_UART_Transmit+0x124>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2221      	movs	r2, #33	; 0x21
 800b46e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b472:	f7fa fb9d 	bl	8005bb0 <HAL_GetTick>
 800b476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	88fa      	ldrh	r2, [r7, #6]
 800b47c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	88fa      	ldrh	r2, [r7, #6]
 800b484:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b490:	d108      	bne.n	800b4a4 <HAL_UART_Transmit+0x84>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d104      	bne.n	800b4a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b49a:	2300      	movs	r3, #0
 800b49c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	61bb      	str	r3, [r7, #24]
 800b4a2:	e003      	b.n	800b4ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b4b4:	e02c      	b.n	800b510 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	2180      	movs	r1, #128	; 0x80
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f001 faa2 	bl	800ca0a <UART_WaitOnFlagUntilTimeout>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e039      	b.n	800b544 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10b      	bne.n	800b4ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	3302      	adds	r3, #2
 800b4ea:	61bb      	str	r3, [r7, #24]
 800b4ec:	e007      	b.n	800b4fe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	781a      	ldrb	r2, [r3, #0]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b504:	b29b      	uxth	r3, r3
 800b506:	3b01      	subs	r3, #1
 800b508:	b29a      	uxth	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b516:	b29b      	uxth	r3, r3
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1cc      	bne.n	800b4b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	2200      	movs	r2, #0
 800b524:	2140      	movs	r1, #64	; 0x40
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f001 fa6f 	bl	800ca0a <UART_WaitOnFlagUntilTimeout>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d001      	beq.n	800b536 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b532:	2303      	movs	r3, #3
 800b534:	e006      	b.n	800b544 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2220      	movs	r2, #32
 800b53a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	e000      	b.n	800b544 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b542:	2302      	movs	r3, #2
  }
}
 800b544:	4618      	mov	r0, r3
 800b546:	3720      	adds	r7, #32
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08a      	sub	sp, #40	; 0x28
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	4613      	mov	r3, r2
 800b558:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b560:	2b20      	cmp	r3, #32
 800b562:	d142      	bne.n	800b5ea <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d002      	beq.n	800b570 <HAL_UART_Receive_IT+0x24>
 800b56a:	88fb      	ldrh	r3, [r7, #6]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	e03b      	b.n	800b5ec <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d101      	bne.n	800b582 <HAL_UART_Receive_IT+0x36>
 800b57e:	2302      	movs	r3, #2
 800b580:	e034      	b.n	800b5ec <HAL_UART_Receive_IT+0xa0>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2200      	movs	r2, #0
 800b58e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a17      	ldr	r2, [pc, #92]	; (800b5f4 <HAL_UART_Receive_IT+0xa8>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d01f      	beq.n	800b5da <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d018      	beq.n	800b5da <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	e853 3f00 	ldrex	r3, [r3]
 800b5b4:	613b      	str	r3, [r7, #16]
   return(result);
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b5bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	623b      	str	r3, [r7, #32]
 800b5c8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ca:	69f9      	ldr	r1, [r7, #28]
 800b5cc:	6a3a      	ldr	r2, [r7, #32]
 800b5ce:	e841 2300 	strex	r3, r2, [r1]
 800b5d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1e6      	bne.n	800b5a8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b5da:	88fb      	ldrh	r3, [r7, #6]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	68b9      	ldr	r1, [r7, #8]
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f001 fadb 	bl	800cb9c <UART_Start_Receive_IT>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	e000      	b.n	800b5ec <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b5ea:	2302      	movs	r3, #2
  }
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3728      	adds	r7, #40	; 0x28
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	58000c00 	.word	0x58000c00

0800b5f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b0ba      	sub	sp, #232	; 0xe8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	69db      	ldr	r3, [r3, #28]
 800b606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b61e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b622:	f640 030f 	movw	r3, #2063	; 0x80f
 800b626:	4013      	ands	r3, r2
 800b628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b62c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b630:	2b00      	cmp	r3, #0
 800b632:	d11b      	bne.n	800b66c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b638:	f003 0320 	and.w	r3, r3, #32
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d015      	beq.n	800b66c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b644:	f003 0320 	and.w	r3, r3, #32
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d105      	bne.n	800b658 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b64c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d009      	beq.n	800b66c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 835a 	beq.w	800bd16 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	4798      	blx	r3
      }
      return;
 800b66a:	e354      	b.n	800bd16 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b66c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 811f 	beq.w	800b8b4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b676:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b67a:	4b8b      	ldr	r3, [pc, #556]	; (800b8a8 <HAL_UART_IRQHandler+0x2b0>)
 800b67c:	4013      	ands	r3, r2
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d106      	bne.n	800b690 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b682:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b686:	4b89      	ldr	r3, [pc, #548]	; (800b8ac <HAL_UART_IRQHandler+0x2b4>)
 800b688:	4013      	ands	r3, r2
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 8112 	beq.w	800b8b4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d011      	beq.n	800b6c0 <HAL_UART_IRQHandler+0xc8>
 800b69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00b      	beq.n	800b6c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6b6:	f043 0201 	orr.w	r2, r3, #1
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6c4:	f003 0302 	and.w	r3, r3, #2
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d011      	beq.n	800b6f0 <HAL_UART_IRQHandler+0xf8>
 800b6cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00b      	beq.n	800b6f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2202      	movs	r2, #2
 800b6de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6e6:	f043 0204 	orr.w	r2, r3, #4
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f4:	f003 0304 	and.w	r3, r3, #4
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d011      	beq.n	800b720 <HAL_UART_IRQHandler+0x128>
 800b6fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b700:	f003 0301 	and.w	r3, r3, #1
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00b      	beq.n	800b720 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2204      	movs	r2, #4
 800b70e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b716:	f043 0202 	orr.w	r2, r3, #2
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b724:	f003 0308 	and.w	r3, r3, #8
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d017      	beq.n	800b75c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b72c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b730:	f003 0320 	and.w	r3, r3, #32
 800b734:	2b00      	cmp	r3, #0
 800b736:	d105      	bne.n	800b744 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b738:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b73c:	4b5a      	ldr	r3, [pc, #360]	; (800b8a8 <HAL_UART_IRQHandler+0x2b0>)
 800b73e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00b      	beq.n	800b75c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2208      	movs	r2, #8
 800b74a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b752:	f043 0208 	orr.w	r2, r3, #8
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b764:	2b00      	cmp	r3, #0
 800b766:	d012      	beq.n	800b78e <HAL_UART_IRQHandler+0x196>
 800b768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b76c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00c      	beq.n	800b78e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b77c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b784:	f043 0220 	orr.w	r2, r3, #32
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 82c0 	beq.w	800bd1a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b79e:	f003 0320 	and.w	r3, r3, #32
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d013      	beq.n	800b7ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7aa:	f003 0320 	and.w	r3, r3, #32
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d105      	bne.n	800b7be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b7b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d007      	beq.n	800b7ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7e2:	2b40      	cmp	r3, #64	; 0x40
 800b7e4:	d005      	beq.n	800b7f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b7e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d04f      	beq.n	800b892 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f001 fafc 	bl	800cdf0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b802:	2b40      	cmp	r3, #64	; 0x40
 800b804:	d141      	bne.n	800b88a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	3308      	adds	r3, #8
 800b80c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b814:	e853 3f00 	ldrex	r3, [r3]
 800b818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b81c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3308      	adds	r3, #8
 800b82e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b832:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b83e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b842:	e841 2300 	strex	r3, r2, [r1]
 800b846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b84a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1d9      	bne.n	800b806 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b856:	2b00      	cmp	r3, #0
 800b858:	d013      	beq.n	800b882 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b85e:	4a14      	ldr	r2, [pc, #80]	; (800b8b0 <HAL_UART_IRQHandler+0x2b8>)
 800b860:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b866:	4618      	mov	r0, r3
 800b868:	f7fa fe3e 	bl	80064e8 <HAL_DMA_Abort_IT>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d017      	beq.n	800b8a2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b87c:	4610      	mov	r0, r2
 800b87e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b880:	e00f      	b.n	800b8a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fa56 	bl	800bd34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b888:	e00b      	b.n	800b8a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fa52 	bl	800bd34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b890:	e007      	b.n	800b8a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fa4e 	bl	800bd34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b8a0:	e23b      	b.n	800bd1a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8a2:	bf00      	nop
    return;
 800b8a4:	e239      	b.n	800bd1a <HAL_UART_IRQHandler+0x722>
 800b8a6:	bf00      	nop
 800b8a8:	10000001 	.word	0x10000001
 800b8ac:	04000120 	.word	0x04000120
 800b8b0:	0800cebd 	.word	0x0800cebd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	f040 81ce 	bne.w	800bc5a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b8be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8c2:	f003 0310 	and.w	r3, r3, #16
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f000 81c7 	beq.w	800bc5a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8d0:	f003 0310 	and.w	r3, r3, #16
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 81c0 	beq.w	800bc5a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2210      	movs	r2, #16
 800b8e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ec:	2b40      	cmp	r3, #64	; 0x40
 800b8ee:	f040 813b 	bne.w	800bb68 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a8b      	ldr	r2, [pc, #556]	; (800bb28 <HAL_UART_IRQHandler+0x530>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d059      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a89      	ldr	r2, [pc, #548]	; (800bb2c <HAL_UART_IRQHandler+0x534>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d053      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a87      	ldr	r2, [pc, #540]	; (800bb30 <HAL_UART_IRQHandler+0x538>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d04d      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a85      	ldr	r2, [pc, #532]	; (800bb34 <HAL_UART_IRQHandler+0x53c>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d047      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a83      	ldr	r2, [pc, #524]	; (800bb38 <HAL_UART_IRQHandler+0x540>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d041      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a81      	ldr	r2, [pc, #516]	; (800bb3c <HAL_UART_IRQHandler+0x544>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d03b      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a7f      	ldr	r2, [pc, #508]	; (800bb40 <HAL_UART_IRQHandler+0x548>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d035      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a7d      	ldr	r2, [pc, #500]	; (800bb44 <HAL_UART_IRQHandler+0x54c>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d02f      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a7b      	ldr	r2, [pc, #492]	; (800bb48 <HAL_UART_IRQHandler+0x550>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d029      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a79      	ldr	r2, [pc, #484]	; (800bb4c <HAL_UART_IRQHandler+0x554>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d023      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a77      	ldr	r2, [pc, #476]	; (800bb50 <HAL_UART_IRQHandler+0x558>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d01d      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a75      	ldr	r2, [pc, #468]	; (800bb54 <HAL_UART_IRQHandler+0x55c>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d017      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a73      	ldr	r2, [pc, #460]	; (800bb58 <HAL_UART_IRQHandler+0x560>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d011      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a71      	ldr	r2, [pc, #452]	; (800bb5c <HAL_UART_IRQHandler+0x564>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d00b      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a6f      	ldr	r2, [pc, #444]	; (800bb60 <HAL_UART_IRQHandler+0x568>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d005      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x3ba>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a6d      	ldr	r2, [pc, #436]	; (800bb64 <HAL_UART_IRQHandler+0x56c>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d105      	bne.n	800b9be <HAL_UART_IRQHandler+0x3c6>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	e004      	b.n	800b9c8 <HAL_UART_IRQHandler+0x3d0>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b9cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f000 81a4 	beq.w	800bd1e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b9dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	f080 819c 	bcs.w	800bd1e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9fa:	f000 8086 	beq.w	800bb0a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	461a      	mov	r2, r3
 800ba24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba2c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba30:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba38:	e841 2300 	strex	r3, r2, [r1]
 800ba3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1da      	bne.n	800b9fe <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	3308      	adds	r3, #8
 800ba4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba52:	e853 3f00 	ldrex	r3, [r3]
 800ba56:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba5a:	f023 0301 	bic.w	r3, r3, #1
 800ba5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3308      	adds	r3, #8
 800ba68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ba6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ba70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ba74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba78:	e841 2300 	strex	r3, r2, [r1]
 800ba7c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ba7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1e1      	bne.n	800ba48 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3308      	adds	r3, #8
 800ba8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba8e:	e853 3f00 	ldrex	r3, [r3]
 800ba92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3308      	adds	r3, #8
 800baa4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800baa8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800baaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800baae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bab0:	e841 2300 	strex	r3, r2, [r1]
 800bab4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1e3      	bne.n	800ba84 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2220      	movs	r2, #32
 800bac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad2:	e853 3f00 	ldrex	r3, [r3]
 800bad6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bada:	f023 0310 	bic.w	r3, r3, #16
 800bade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800baec:	65bb      	str	r3, [r7, #88]	; 0x58
 800baee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800baf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800baf4:	e841 2300 	strex	r3, r2, [r1]
 800baf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1e4      	bne.n	800baca <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fa f9d1 	bl	8005eac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f912 	bl	800bd48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb24:	e0fb      	b.n	800bd1e <HAL_UART_IRQHandler+0x726>
 800bb26:	bf00      	nop
 800bb28:	40020010 	.word	0x40020010
 800bb2c:	40020028 	.word	0x40020028
 800bb30:	40020040 	.word	0x40020040
 800bb34:	40020058 	.word	0x40020058
 800bb38:	40020070 	.word	0x40020070
 800bb3c:	40020088 	.word	0x40020088
 800bb40:	400200a0 	.word	0x400200a0
 800bb44:	400200b8 	.word	0x400200b8
 800bb48:	40020410 	.word	0x40020410
 800bb4c:	40020428 	.word	0x40020428
 800bb50:	40020440 	.word	0x40020440
 800bb54:	40020458 	.word	0x40020458
 800bb58:	40020470 	.word	0x40020470
 800bb5c:	40020488 	.word	0x40020488
 800bb60:	400204a0 	.word	0x400204a0
 800bb64:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f000 80cc 	beq.w	800bd22 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800bb8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f000 80c7 	beq.w	800bd22 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9c:	e853 3f00 	ldrex	r3, [r3]
 800bba0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bba8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbb6:	647b      	str	r3, [r7, #68]	; 0x44
 800bbb8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbbe:	e841 2300 	strex	r3, r2, [r1]
 800bbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bbc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1e4      	bne.n	800bb94 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3308      	adds	r3, #8
 800bbd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	e853 3f00 	ldrex	r3, [r3]
 800bbd8:	623b      	str	r3, [r7, #32]
   return(result);
 800bbda:	6a3a      	ldr	r2, [r7, #32]
 800bbdc:	4b54      	ldr	r3, [pc, #336]	; (800bd30 <HAL_UART_IRQHandler+0x738>)
 800bbde:	4013      	ands	r3, r2
 800bbe0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3308      	adds	r3, #8
 800bbea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bbee:	633a      	str	r2, [r7, #48]	; 0x30
 800bbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbf6:	e841 2300 	strex	r3, r2, [r1]
 800bbfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1e3      	bne.n	800bbca <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2220      	movs	r2, #32
 800bc06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	e853 3f00 	ldrex	r3, [r3]
 800bc22:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f023 0310 	bic.w	r3, r3, #16
 800bc2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bc38:	61fb      	str	r3, [r7, #28]
 800bc3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3c:	69b9      	ldr	r1, [r7, #24]
 800bc3e:	69fa      	ldr	r2, [r7, #28]
 800bc40:	e841 2300 	strex	r3, r2, [r1]
 800bc44:	617b      	str	r3, [r7, #20]
   return(result);
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1e4      	bne.n	800bc16 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f878 	bl	800bd48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc58:	e063      	b.n	800bd22 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00e      	beq.n	800bc84 <HAL_UART_IRQHandler+0x68c>
 800bc66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d008      	beq.n	800bc84 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bc7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f001 fdbb 	bl	800d7f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc82:	e051      	b.n	800bd28 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bc84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d014      	beq.n	800bcba <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bc90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d105      	bne.n	800bca8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bc9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d008      	beq.n	800bcba <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d03a      	beq.n	800bd26 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	4798      	blx	r3
    }
    return;
 800bcb8:	e035      	b.n	800bd26 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bcba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d009      	beq.n	800bcda <HAL_UART_IRQHandler+0x6e2>
 800bcc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f001 f908 	bl	800cee8 <UART_EndTransmit_IT>
    return;
 800bcd8:	e026      	b.n	800bd28 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bcda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d009      	beq.n	800bcfa <HAL_UART_IRQHandler+0x702>
 800bce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d003      	beq.n	800bcfa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f001 fd94 	bl	800d820 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bcf8:	e016      	b.n	800bd28 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bcfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d010      	beq.n	800bd28 <HAL_UART_IRQHandler+0x730>
 800bd06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	da0c      	bge.n	800bd28 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f001 fd7c 	bl	800d80c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd14:	e008      	b.n	800bd28 <HAL_UART_IRQHandler+0x730>
      return;
 800bd16:	bf00      	nop
 800bd18:	e006      	b.n	800bd28 <HAL_UART_IRQHandler+0x730>
    return;
 800bd1a:	bf00      	nop
 800bd1c:	e004      	b.n	800bd28 <HAL_UART_IRQHandler+0x730>
      return;
 800bd1e:	bf00      	nop
 800bd20:	e002      	b.n	800bd28 <HAL_UART_IRQHandler+0x730>
      return;
 800bd22:	bf00      	nop
 800bd24:	e000      	b.n	800bd28 <HAL_UART_IRQHandler+0x730>
    return;
 800bd26:	bf00      	nop
  }
}
 800bd28:	37e8      	adds	r7, #232	; 0xe8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	effffffe 	.word	0xeffffffe

0800bd34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bd3c:	bf00      	nop
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	460b      	mov	r3, r1
 800bd52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd64:	b092      	sub	sp, #72	; 0x48
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	689a      	ldr	r2, [r3, #8]
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	431a      	orrs	r2, r3
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	431a      	orrs	r2, r3
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	69db      	ldr	r3, [r3, #28]
 800bd84:	4313      	orrs	r3, r2
 800bd86:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	4bbe      	ldr	r3, [pc, #760]	; (800c088 <UART_SetConfig+0x328>)
 800bd90:	4013      	ands	r3, r2
 800bd92:	697a      	ldr	r2, [r7, #20]
 800bd94:	6812      	ldr	r2, [r2, #0]
 800bd96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd98:	430b      	orrs	r3, r1
 800bd9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	68da      	ldr	r2, [r3, #12]
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	430a      	orrs	r2, r1
 800bdb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	699b      	ldr	r3, [r3, #24]
 800bdb6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4ab3      	ldr	r2, [pc, #716]	; (800c08c <UART_SetConfig+0x32c>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d004      	beq.n	800bdcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	6a1b      	ldr	r3, [r3, #32]
 800bdc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	689a      	ldr	r2, [r3, #8]
 800bdd2:	4baf      	ldr	r3, [pc, #700]	; (800c090 <UART_SetConfig+0x330>)
 800bdd4:	4013      	ands	r3, r2
 800bdd6:	697a      	ldr	r2, [r7, #20]
 800bdd8:	6812      	ldr	r2, [r2, #0]
 800bdda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bddc:	430b      	orrs	r3, r1
 800bdde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde6:	f023 010f 	bic.w	r1, r3, #15
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	430a      	orrs	r2, r1
 800bdf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4aa6      	ldr	r2, [pc, #664]	; (800c094 <UART_SetConfig+0x334>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d177      	bne.n	800bef0 <UART_SetConfig+0x190>
 800be00:	4ba5      	ldr	r3, [pc, #660]	; (800c098 <UART_SetConfig+0x338>)
 800be02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be08:	2b28      	cmp	r3, #40	; 0x28
 800be0a:	d86d      	bhi.n	800bee8 <UART_SetConfig+0x188>
 800be0c:	a201      	add	r2, pc, #4	; (adr r2, 800be14 <UART_SetConfig+0xb4>)
 800be0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be12:	bf00      	nop
 800be14:	0800beb9 	.word	0x0800beb9
 800be18:	0800bee9 	.word	0x0800bee9
 800be1c:	0800bee9 	.word	0x0800bee9
 800be20:	0800bee9 	.word	0x0800bee9
 800be24:	0800bee9 	.word	0x0800bee9
 800be28:	0800bee9 	.word	0x0800bee9
 800be2c:	0800bee9 	.word	0x0800bee9
 800be30:	0800bee9 	.word	0x0800bee9
 800be34:	0800bec1 	.word	0x0800bec1
 800be38:	0800bee9 	.word	0x0800bee9
 800be3c:	0800bee9 	.word	0x0800bee9
 800be40:	0800bee9 	.word	0x0800bee9
 800be44:	0800bee9 	.word	0x0800bee9
 800be48:	0800bee9 	.word	0x0800bee9
 800be4c:	0800bee9 	.word	0x0800bee9
 800be50:	0800bee9 	.word	0x0800bee9
 800be54:	0800bec9 	.word	0x0800bec9
 800be58:	0800bee9 	.word	0x0800bee9
 800be5c:	0800bee9 	.word	0x0800bee9
 800be60:	0800bee9 	.word	0x0800bee9
 800be64:	0800bee9 	.word	0x0800bee9
 800be68:	0800bee9 	.word	0x0800bee9
 800be6c:	0800bee9 	.word	0x0800bee9
 800be70:	0800bee9 	.word	0x0800bee9
 800be74:	0800bed1 	.word	0x0800bed1
 800be78:	0800bee9 	.word	0x0800bee9
 800be7c:	0800bee9 	.word	0x0800bee9
 800be80:	0800bee9 	.word	0x0800bee9
 800be84:	0800bee9 	.word	0x0800bee9
 800be88:	0800bee9 	.word	0x0800bee9
 800be8c:	0800bee9 	.word	0x0800bee9
 800be90:	0800bee9 	.word	0x0800bee9
 800be94:	0800bed9 	.word	0x0800bed9
 800be98:	0800bee9 	.word	0x0800bee9
 800be9c:	0800bee9 	.word	0x0800bee9
 800bea0:	0800bee9 	.word	0x0800bee9
 800bea4:	0800bee9 	.word	0x0800bee9
 800bea8:	0800bee9 	.word	0x0800bee9
 800beac:	0800bee9 	.word	0x0800bee9
 800beb0:	0800bee9 	.word	0x0800bee9
 800beb4:	0800bee1 	.word	0x0800bee1
 800beb8:	2301      	movs	r3, #1
 800beba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bebe:	e222      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bec0:	2304      	movs	r3, #4
 800bec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bec6:	e21e      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bec8:	2308      	movs	r3, #8
 800beca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bece:	e21a      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bed0:	2310      	movs	r3, #16
 800bed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bed6:	e216      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bed8:	2320      	movs	r3, #32
 800beda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bede:	e212      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bee0:	2340      	movs	r3, #64	; 0x40
 800bee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee6:	e20e      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bee8:	2380      	movs	r3, #128	; 0x80
 800beea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beee:	e20a      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a69      	ldr	r2, [pc, #420]	; (800c09c <UART_SetConfig+0x33c>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d130      	bne.n	800bf5c <UART_SetConfig+0x1fc>
 800befa:	4b67      	ldr	r3, [pc, #412]	; (800c098 <UART_SetConfig+0x338>)
 800befc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befe:	f003 0307 	and.w	r3, r3, #7
 800bf02:	2b05      	cmp	r3, #5
 800bf04:	d826      	bhi.n	800bf54 <UART_SetConfig+0x1f4>
 800bf06:	a201      	add	r2, pc, #4	; (adr r2, 800bf0c <UART_SetConfig+0x1ac>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bf25 	.word	0x0800bf25
 800bf10:	0800bf2d 	.word	0x0800bf2d
 800bf14:	0800bf35 	.word	0x0800bf35
 800bf18:	0800bf3d 	.word	0x0800bf3d
 800bf1c:	0800bf45 	.word	0x0800bf45
 800bf20:	0800bf4d 	.word	0x0800bf4d
 800bf24:	2300      	movs	r3, #0
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2a:	e1ec      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bf2c:	2304      	movs	r3, #4
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf32:	e1e8      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bf34:	2308      	movs	r3, #8
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf3a:	e1e4      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bf3c:	2310      	movs	r3, #16
 800bf3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf42:	e1e0      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bf44:	2320      	movs	r3, #32
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4a:	e1dc      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bf4c:	2340      	movs	r3, #64	; 0x40
 800bf4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf52:	e1d8      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bf54:	2380      	movs	r3, #128	; 0x80
 800bf56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf5a:	e1d4      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a4f      	ldr	r2, [pc, #316]	; (800c0a0 <UART_SetConfig+0x340>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d130      	bne.n	800bfc8 <UART_SetConfig+0x268>
 800bf66:	4b4c      	ldr	r3, [pc, #304]	; (800c098 <UART_SetConfig+0x338>)
 800bf68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf6a:	f003 0307 	and.w	r3, r3, #7
 800bf6e:	2b05      	cmp	r3, #5
 800bf70:	d826      	bhi.n	800bfc0 <UART_SetConfig+0x260>
 800bf72:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <UART_SetConfig+0x218>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bf91 	.word	0x0800bf91
 800bf7c:	0800bf99 	.word	0x0800bf99
 800bf80:	0800bfa1 	.word	0x0800bfa1
 800bf84:	0800bfa9 	.word	0x0800bfa9
 800bf88:	0800bfb1 	.word	0x0800bfb1
 800bf8c:	0800bfb9 	.word	0x0800bfb9
 800bf90:	2300      	movs	r3, #0
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e1b6      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bf98:	2304      	movs	r3, #4
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9e:	e1b2      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bfa0:	2308      	movs	r3, #8
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa6:	e1ae      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bfa8:	2310      	movs	r3, #16
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfae:	e1aa      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bfb0:	2320      	movs	r3, #32
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb6:	e1a6      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bfb8:	2340      	movs	r3, #64	; 0x40
 800bfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfbe:	e1a2      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bfc0:	2380      	movs	r3, #128	; 0x80
 800bfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfc6:	e19e      	b.n	800c306 <UART_SetConfig+0x5a6>
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a35      	ldr	r2, [pc, #212]	; (800c0a4 <UART_SetConfig+0x344>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d130      	bne.n	800c034 <UART_SetConfig+0x2d4>
 800bfd2:	4b31      	ldr	r3, [pc, #196]	; (800c098 <UART_SetConfig+0x338>)
 800bfd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfd6:	f003 0307 	and.w	r3, r3, #7
 800bfda:	2b05      	cmp	r3, #5
 800bfdc:	d826      	bhi.n	800c02c <UART_SetConfig+0x2cc>
 800bfde:	a201      	add	r2, pc, #4	; (adr r2, 800bfe4 <UART_SetConfig+0x284>)
 800bfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe4:	0800bffd 	.word	0x0800bffd
 800bfe8:	0800c005 	.word	0x0800c005
 800bfec:	0800c00d 	.word	0x0800c00d
 800bff0:	0800c015 	.word	0x0800c015
 800bff4:	0800c01d 	.word	0x0800c01d
 800bff8:	0800c025 	.word	0x0800c025
 800bffc:	2300      	movs	r3, #0
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c002:	e180      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c004:	2304      	movs	r3, #4
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00a:	e17c      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c00c:	2308      	movs	r3, #8
 800c00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c012:	e178      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c014:	2310      	movs	r3, #16
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c01a:	e174      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c01c:	2320      	movs	r3, #32
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c022:	e170      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c024:	2340      	movs	r3, #64	; 0x40
 800c026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c02a:	e16c      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c02c:	2380      	movs	r3, #128	; 0x80
 800c02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c032:	e168      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a1b      	ldr	r2, [pc, #108]	; (800c0a8 <UART_SetConfig+0x348>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d142      	bne.n	800c0c4 <UART_SetConfig+0x364>
 800c03e:	4b16      	ldr	r3, [pc, #88]	; (800c098 <UART_SetConfig+0x338>)
 800c040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c042:	f003 0307 	and.w	r3, r3, #7
 800c046:	2b05      	cmp	r3, #5
 800c048:	d838      	bhi.n	800c0bc <UART_SetConfig+0x35c>
 800c04a:	a201      	add	r2, pc, #4	; (adr r2, 800c050 <UART_SetConfig+0x2f0>)
 800c04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c050:	0800c069 	.word	0x0800c069
 800c054:	0800c071 	.word	0x0800c071
 800c058:	0800c079 	.word	0x0800c079
 800c05c:	0800c081 	.word	0x0800c081
 800c060:	0800c0ad 	.word	0x0800c0ad
 800c064:	0800c0b5 	.word	0x0800c0b5
 800c068:	2300      	movs	r3, #0
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06e:	e14a      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c070:	2304      	movs	r3, #4
 800c072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c076:	e146      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c078:	2308      	movs	r3, #8
 800c07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c07e:	e142      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c080:	2310      	movs	r3, #16
 800c082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c086:	e13e      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c088:	cfff69f3 	.word	0xcfff69f3
 800c08c:	58000c00 	.word	0x58000c00
 800c090:	11fff4ff 	.word	0x11fff4ff
 800c094:	40011000 	.word	0x40011000
 800c098:	58024400 	.word	0x58024400
 800c09c:	40004400 	.word	0x40004400
 800c0a0:	40004800 	.word	0x40004800
 800c0a4:	40004c00 	.word	0x40004c00
 800c0a8:	40005000 	.word	0x40005000
 800c0ac:	2320      	movs	r3, #32
 800c0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0b2:	e128      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c0b4:	2340      	movs	r3, #64	; 0x40
 800c0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ba:	e124      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c0bc:	2380      	movs	r3, #128	; 0x80
 800c0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0c2:	e120      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4acb      	ldr	r2, [pc, #812]	; (800c3f8 <UART_SetConfig+0x698>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d176      	bne.n	800c1bc <UART_SetConfig+0x45c>
 800c0ce:	4bcb      	ldr	r3, [pc, #812]	; (800c3fc <UART_SetConfig+0x69c>)
 800c0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0d6:	2b28      	cmp	r3, #40	; 0x28
 800c0d8:	d86c      	bhi.n	800c1b4 <UART_SetConfig+0x454>
 800c0da:	a201      	add	r2, pc, #4	; (adr r2, 800c0e0 <UART_SetConfig+0x380>)
 800c0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e0:	0800c185 	.word	0x0800c185
 800c0e4:	0800c1b5 	.word	0x0800c1b5
 800c0e8:	0800c1b5 	.word	0x0800c1b5
 800c0ec:	0800c1b5 	.word	0x0800c1b5
 800c0f0:	0800c1b5 	.word	0x0800c1b5
 800c0f4:	0800c1b5 	.word	0x0800c1b5
 800c0f8:	0800c1b5 	.word	0x0800c1b5
 800c0fc:	0800c1b5 	.word	0x0800c1b5
 800c100:	0800c18d 	.word	0x0800c18d
 800c104:	0800c1b5 	.word	0x0800c1b5
 800c108:	0800c1b5 	.word	0x0800c1b5
 800c10c:	0800c1b5 	.word	0x0800c1b5
 800c110:	0800c1b5 	.word	0x0800c1b5
 800c114:	0800c1b5 	.word	0x0800c1b5
 800c118:	0800c1b5 	.word	0x0800c1b5
 800c11c:	0800c1b5 	.word	0x0800c1b5
 800c120:	0800c195 	.word	0x0800c195
 800c124:	0800c1b5 	.word	0x0800c1b5
 800c128:	0800c1b5 	.word	0x0800c1b5
 800c12c:	0800c1b5 	.word	0x0800c1b5
 800c130:	0800c1b5 	.word	0x0800c1b5
 800c134:	0800c1b5 	.word	0x0800c1b5
 800c138:	0800c1b5 	.word	0x0800c1b5
 800c13c:	0800c1b5 	.word	0x0800c1b5
 800c140:	0800c19d 	.word	0x0800c19d
 800c144:	0800c1b5 	.word	0x0800c1b5
 800c148:	0800c1b5 	.word	0x0800c1b5
 800c14c:	0800c1b5 	.word	0x0800c1b5
 800c150:	0800c1b5 	.word	0x0800c1b5
 800c154:	0800c1b5 	.word	0x0800c1b5
 800c158:	0800c1b5 	.word	0x0800c1b5
 800c15c:	0800c1b5 	.word	0x0800c1b5
 800c160:	0800c1a5 	.word	0x0800c1a5
 800c164:	0800c1b5 	.word	0x0800c1b5
 800c168:	0800c1b5 	.word	0x0800c1b5
 800c16c:	0800c1b5 	.word	0x0800c1b5
 800c170:	0800c1b5 	.word	0x0800c1b5
 800c174:	0800c1b5 	.word	0x0800c1b5
 800c178:	0800c1b5 	.word	0x0800c1b5
 800c17c:	0800c1b5 	.word	0x0800c1b5
 800c180:	0800c1ad 	.word	0x0800c1ad
 800c184:	2301      	movs	r3, #1
 800c186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18a:	e0bc      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c18c:	2304      	movs	r3, #4
 800c18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c192:	e0b8      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c194:	2308      	movs	r3, #8
 800c196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19a:	e0b4      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c19c:	2310      	movs	r3, #16
 800c19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a2:	e0b0      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c1a4:	2320      	movs	r3, #32
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1aa:	e0ac      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c1ac:	2340      	movs	r3, #64	; 0x40
 800c1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1b2:	e0a8      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c1b4:	2380      	movs	r3, #128	; 0x80
 800c1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ba:	e0a4      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a8f      	ldr	r2, [pc, #572]	; (800c400 <UART_SetConfig+0x6a0>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d130      	bne.n	800c228 <UART_SetConfig+0x4c8>
 800c1c6:	4b8d      	ldr	r3, [pc, #564]	; (800c3fc <UART_SetConfig+0x69c>)
 800c1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ca:	f003 0307 	and.w	r3, r3, #7
 800c1ce:	2b05      	cmp	r3, #5
 800c1d0:	d826      	bhi.n	800c220 <UART_SetConfig+0x4c0>
 800c1d2:	a201      	add	r2, pc, #4	; (adr r2, 800c1d8 <UART_SetConfig+0x478>)
 800c1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d8:	0800c1f1 	.word	0x0800c1f1
 800c1dc:	0800c1f9 	.word	0x0800c1f9
 800c1e0:	0800c201 	.word	0x0800c201
 800c1e4:	0800c209 	.word	0x0800c209
 800c1e8:	0800c211 	.word	0x0800c211
 800c1ec:	0800c219 	.word	0x0800c219
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f6:	e086      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c1f8:	2304      	movs	r3, #4
 800c1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fe:	e082      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c200:	2308      	movs	r3, #8
 800c202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c206:	e07e      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c208:	2310      	movs	r3, #16
 800c20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20e:	e07a      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c210:	2320      	movs	r3, #32
 800c212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c216:	e076      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c218:	2340      	movs	r3, #64	; 0x40
 800c21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c21e:	e072      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c220:	2380      	movs	r3, #128	; 0x80
 800c222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c226:	e06e      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a75      	ldr	r2, [pc, #468]	; (800c404 <UART_SetConfig+0x6a4>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d130      	bne.n	800c294 <UART_SetConfig+0x534>
 800c232:	4b72      	ldr	r3, [pc, #456]	; (800c3fc <UART_SetConfig+0x69c>)
 800c234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c236:	f003 0307 	and.w	r3, r3, #7
 800c23a:	2b05      	cmp	r3, #5
 800c23c:	d826      	bhi.n	800c28c <UART_SetConfig+0x52c>
 800c23e:	a201      	add	r2, pc, #4	; (adr r2, 800c244 <UART_SetConfig+0x4e4>)
 800c240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c244:	0800c25d 	.word	0x0800c25d
 800c248:	0800c265 	.word	0x0800c265
 800c24c:	0800c26d 	.word	0x0800c26d
 800c250:	0800c275 	.word	0x0800c275
 800c254:	0800c27d 	.word	0x0800c27d
 800c258:	0800c285 	.word	0x0800c285
 800c25c:	2300      	movs	r3, #0
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c262:	e050      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c264:	2304      	movs	r3, #4
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26a:	e04c      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c26c:	2308      	movs	r3, #8
 800c26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c272:	e048      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c274:	2310      	movs	r3, #16
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27a:	e044      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c27c:	2320      	movs	r3, #32
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c282:	e040      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c284:	2340      	movs	r3, #64	; 0x40
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28a:	e03c      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c28c:	2380      	movs	r3, #128	; 0x80
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c292:	e038      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a5b      	ldr	r2, [pc, #364]	; (800c408 <UART_SetConfig+0x6a8>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d130      	bne.n	800c300 <UART_SetConfig+0x5a0>
 800c29e:	4b57      	ldr	r3, [pc, #348]	; (800c3fc <UART_SetConfig+0x69c>)
 800c2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2a2:	f003 0307 	and.w	r3, r3, #7
 800c2a6:	2b05      	cmp	r3, #5
 800c2a8:	d826      	bhi.n	800c2f8 <UART_SetConfig+0x598>
 800c2aa:	a201      	add	r2, pc, #4	; (adr r2, 800c2b0 <UART_SetConfig+0x550>)
 800c2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b0:	0800c2c9 	.word	0x0800c2c9
 800c2b4:	0800c2d1 	.word	0x0800c2d1
 800c2b8:	0800c2d9 	.word	0x0800c2d9
 800c2bc:	0800c2e1 	.word	0x0800c2e1
 800c2c0:	0800c2e9 	.word	0x0800c2e9
 800c2c4:	0800c2f1 	.word	0x0800c2f1
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ce:	e01a      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c2d0:	2304      	movs	r3, #4
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d6:	e016      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c2d8:	2308      	movs	r3, #8
 800c2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2de:	e012      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c2e0:	2310      	movs	r3, #16
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e6:	e00e      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c2e8:	2320      	movs	r3, #32
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ee:	e00a      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c2f0:	2340      	movs	r3, #64	; 0x40
 800c2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f6:	e006      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c2f8:	2380      	movs	r3, #128	; 0x80
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2fe:	e002      	b.n	800c306 <UART_SetConfig+0x5a6>
 800c300:	2380      	movs	r3, #128	; 0x80
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a3f      	ldr	r2, [pc, #252]	; (800c408 <UART_SetConfig+0x6a8>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	f040 80f8 	bne.w	800c502 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c312:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c316:	2b20      	cmp	r3, #32
 800c318:	dc46      	bgt.n	800c3a8 <UART_SetConfig+0x648>
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	f2c0 8082 	blt.w	800c424 <UART_SetConfig+0x6c4>
 800c320:	3b02      	subs	r3, #2
 800c322:	2b1e      	cmp	r3, #30
 800c324:	d87e      	bhi.n	800c424 <UART_SetConfig+0x6c4>
 800c326:	a201      	add	r2, pc, #4	; (adr r2, 800c32c <UART_SetConfig+0x5cc>)
 800c328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32c:	0800c3af 	.word	0x0800c3af
 800c330:	0800c425 	.word	0x0800c425
 800c334:	0800c3b7 	.word	0x0800c3b7
 800c338:	0800c425 	.word	0x0800c425
 800c33c:	0800c425 	.word	0x0800c425
 800c340:	0800c425 	.word	0x0800c425
 800c344:	0800c3c7 	.word	0x0800c3c7
 800c348:	0800c425 	.word	0x0800c425
 800c34c:	0800c425 	.word	0x0800c425
 800c350:	0800c425 	.word	0x0800c425
 800c354:	0800c425 	.word	0x0800c425
 800c358:	0800c425 	.word	0x0800c425
 800c35c:	0800c425 	.word	0x0800c425
 800c360:	0800c425 	.word	0x0800c425
 800c364:	0800c3d7 	.word	0x0800c3d7
 800c368:	0800c425 	.word	0x0800c425
 800c36c:	0800c425 	.word	0x0800c425
 800c370:	0800c425 	.word	0x0800c425
 800c374:	0800c425 	.word	0x0800c425
 800c378:	0800c425 	.word	0x0800c425
 800c37c:	0800c425 	.word	0x0800c425
 800c380:	0800c425 	.word	0x0800c425
 800c384:	0800c425 	.word	0x0800c425
 800c388:	0800c425 	.word	0x0800c425
 800c38c:	0800c425 	.word	0x0800c425
 800c390:	0800c425 	.word	0x0800c425
 800c394:	0800c425 	.word	0x0800c425
 800c398:	0800c425 	.word	0x0800c425
 800c39c:	0800c425 	.word	0x0800c425
 800c3a0:	0800c425 	.word	0x0800c425
 800c3a4:	0800c417 	.word	0x0800c417
 800c3a8:	2b40      	cmp	r3, #64	; 0x40
 800c3aa:	d037      	beq.n	800c41c <UART_SetConfig+0x6bc>
 800c3ac:	e03a      	b.n	800c424 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c3ae:	f7fc fc17 	bl	8008be0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c3b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3b4:	e03c      	b.n	800c430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fc fc26 	bl	8008c0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3c4:	e034      	b.n	800c430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3c6:	f107 0318 	add.w	r3, r7, #24
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fc fd72 	bl	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3d4:	e02c      	b.n	800c430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3d6:	4b09      	ldr	r3, [pc, #36]	; (800c3fc <UART_SetConfig+0x69c>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f003 0320 	and.w	r3, r3, #32
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d016      	beq.n	800c410 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3e2:	4b06      	ldr	r3, [pc, #24]	; (800c3fc <UART_SetConfig+0x69c>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	08db      	lsrs	r3, r3, #3
 800c3e8:	f003 0303 	and.w	r3, r3, #3
 800c3ec:	4a07      	ldr	r2, [pc, #28]	; (800c40c <UART_SetConfig+0x6ac>)
 800c3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3f4:	e01c      	b.n	800c430 <UART_SetConfig+0x6d0>
 800c3f6:	bf00      	nop
 800c3f8:	40011400 	.word	0x40011400
 800c3fc:	58024400 	.word	0x58024400
 800c400:	40007800 	.word	0x40007800
 800c404:	40007c00 	.word	0x40007c00
 800c408:	58000c00 	.word	0x58000c00
 800c40c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c410:	4b9d      	ldr	r3, [pc, #628]	; (800c688 <UART_SetConfig+0x928>)
 800c412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c414:	e00c      	b.n	800c430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c416:	4b9d      	ldr	r3, [pc, #628]	; (800c68c <UART_SetConfig+0x92c>)
 800c418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41a:	e009      	b.n	800c430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c41c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c422:	e005      	b.n	800c430 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c424:	2300      	movs	r3, #0
 800c426:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c42e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 81de 	beq.w	800c7f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43c:	4a94      	ldr	r2, [pc, #592]	; (800c690 <UART_SetConfig+0x930>)
 800c43e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c442:	461a      	mov	r2, r3
 800c444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c446:	fbb3 f3f2 	udiv	r3, r3, r2
 800c44a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	4613      	mov	r3, r2
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	4413      	add	r3, r2
 800c456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c458:	429a      	cmp	r2, r3
 800c45a:	d305      	bcc.n	800c468 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c464:	429a      	cmp	r2, r3
 800c466:	d903      	bls.n	800c470 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c46e:	e1c1      	b.n	800c7f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c472:	2200      	movs	r2, #0
 800c474:	60bb      	str	r3, [r7, #8]
 800c476:	60fa      	str	r2, [r7, #12]
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47c:	4a84      	ldr	r2, [pc, #528]	; (800c690 <UART_SetConfig+0x930>)
 800c47e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c482:	b29b      	uxth	r3, r3
 800c484:	2200      	movs	r2, #0
 800c486:	603b      	str	r3, [r7, #0]
 800c488:	607a      	str	r2, [r7, #4]
 800c48a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c48e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c492:	f7f4 f939 	bl	8000708 <__aeabi_uldivmod>
 800c496:	4602      	mov	r2, r0
 800c498:	460b      	mov	r3, r1
 800c49a:	4610      	mov	r0, r2
 800c49c:	4619      	mov	r1, r3
 800c49e:	f04f 0200 	mov.w	r2, #0
 800c4a2:	f04f 0300 	mov.w	r3, #0
 800c4a6:	020b      	lsls	r3, r1, #8
 800c4a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c4ac:	0202      	lsls	r2, r0, #8
 800c4ae:	6979      	ldr	r1, [r7, #20]
 800c4b0:	6849      	ldr	r1, [r1, #4]
 800c4b2:	0849      	lsrs	r1, r1, #1
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	460c      	mov	r4, r1
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	eb12 0804 	adds.w	r8, r2, r4
 800c4be:	eb43 0905 	adc.w	r9, r3, r5
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	469a      	mov	sl, r3
 800c4ca:	4693      	mov	fp, r2
 800c4cc:	4652      	mov	r2, sl
 800c4ce:	465b      	mov	r3, fp
 800c4d0:	4640      	mov	r0, r8
 800c4d2:	4649      	mov	r1, r9
 800c4d4:	f7f4 f918 	bl	8000708 <__aeabi_uldivmod>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	4613      	mov	r3, r2
 800c4de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4e6:	d308      	bcc.n	800c4fa <UART_SetConfig+0x79a>
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4ee:	d204      	bcs.n	800c4fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4f6:	60da      	str	r2, [r3, #12]
 800c4f8:	e17c      	b.n	800c7f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c500:	e178      	b.n	800c7f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	69db      	ldr	r3, [r3, #28]
 800c506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c50a:	f040 80c5 	bne.w	800c698 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c50e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c512:	2b20      	cmp	r3, #32
 800c514:	dc48      	bgt.n	800c5a8 <UART_SetConfig+0x848>
 800c516:	2b00      	cmp	r3, #0
 800c518:	db7b      	blt.n	800c612 <UART_SetConfig+0x8b2>
 800c51a:	2b20      	cmp	r3, #32
 800c51c:	d879      	bhi.n	800c612 <UART_SetConfig+0x8b2>
 800c51e:	a201      	add	r2, pc, #4	; (adr r2, 800c524 <UART_SetConfig+0x7c4>)
 800c520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c524:	0800c5af 	.word	0x0800c5af
 800c528:	0800c5b7 	.word	0x0800c5b7
 800c52c:	0800c613 	.word	0x0800c613
 800c530:	0800c613 	.word	0x0800c613
 800c534:	0800c5bf 	.word	0x0800c5bf
 800c538:	0800c613 	.word	0x0800c613
 800c53c:	0800c613 	.word	0x0800c613
 800c540:	0800c613 	.word	0x0800c613
 800c544:	0800c5cf 	.word	0x0800c5cf
 800c548:	0800c613 	.word	0x0800c613
 800c54c:	0800c613 	.word	0x0800c613
 800c550:	0800c613 	.word	0x0800c613
 800c554:	0800c613 	.word	0x0800c613
 800c558:	0800c613 	.word	0x0800c613
 800c55c:	0800c613 	.word	0x0800c613
 800c560:	0800c613 	.word	0x0800c613
 800c564:	0800c5df 	.word	0x0800c5df
 800c568:	0800c613 	.word	0x0800c613
 800c56c:	0800c613 	.word	0x0800c613
 800c570:	0800c613 	.word	0x0800c613
 800c574:	0800c613 	.word	0x0800c613
 800c578:	0800c613 	.word	0x0800c613
 800c57c:	0800c613 	.word	0x0800c613
 800c580:	0800c613 	.word	0x0800c613
 800c584:	0800c613 	.word	0x0800c613
 800c588:	0800c613 	.word	0x0800c613
 800c58c:	0800c613 	.word	0x0800c613
 800c590:	0800c613 	.word	0x0800c613
 800c594:	0800c613 	.word	0x0800c613
 800c598:	0800c613 	.word	0x0800c613
 800c59c:	0800c613 	.word	0x0800c613
 800c5a0:	0800c613 	.word	0x0800c613
 800c5a4:	0800c605 	.word	0x0800c605
 800c5a8:	2b40      	cmp	r3, #64	; 0x40
 800c5aa:	d02e      	beq.n	800c60a <UART_SetConfig+0x8aa>
 800c5ac:	e031      	b.n	800c612 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5ae:	f7fb fba5 	bl	8007cfc <HAL_RCC_GetPCLK1Freq>
 800c5b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5b4:	e033      	b.n	800c61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5b6:	f7fb fbb7 	bl	8007d28 <HAL_RCC_GetPCLK2Freq>
 800c5ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5bc:	e02f      	b.n	800c61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fc fb22 	bl	8008c0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5cc:	e027      	b.n	800c61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ce:	f107 0318 	add.w	r3, r7, #24
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fc fc6e 	bl	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5dc:	e01f      	b.n	800c61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5de:	4b2d      	ldr	r3, [pc, #180]	; (800c694 <UART_SetConfig+0x934>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f003 0320 	and.w	r3, r3, #32
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d009      	beq.n	800c5fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5ea:	4b2a      	ldr	r3, [pc, #168]	; (800c694 <UART_SetConfig+0x934>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	08db      	lsrs	r3, r3, #3
 800c5f0:	f003 0303 	and.w	r3, r3, #3
 800c5f4:	4a24      	ldr	r2, [pc, #144]	; (800c688 <UART_SetConfig+0x928>)
 800c5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5fc:	e00f      	b.n	800c61e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c5fe:	4b22      	ldr	r3, [pc, #136]	; (800c688 <UART_SetConfig+0x928>)
 800c600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c602:	e00c      	b.n	800c61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c604:	4b21      	ldr	r3, [pc, #132]	; (800c68c <UART_SetConfig+0x92c>)
 800c606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c608:	e009      	b.n	800c61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c60a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c610:	e005      	b.n	800c61e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c612:	2300      	movs	r3, #0
 800c614:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c61c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 80e7 	beq.w	800c7f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62a:	4a19      	ldr	r2, [pc, #100]	; (800c690 <UART_SetConfig+0x930>)
 800c62c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c630:	461a      	mov	r2, r3
 800c632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c634:	fbb3 f3f2 	udiv	r3, r3, r2
 800c638:	005a      	lsls	r2, r3, #1
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	085b      	lsrs	r3, r3, #1
 800c640:	441a      	add	r2, r3
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	fbb2 f3f3 	udiv	r3, r2, r3
 800c64a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	2b0f      	cmp	r3, #15
 800c650:	d916      	bls.n	800c680 <UART_SetConfig+0x920>
 800c652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c658:	d212      	bcs.n	800c680 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	f023 030f 	bic.w	r3, r3, #15
 800c662:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c666:	085b      	lsrs	r3, r3, #1
 800c668:	b29b      	uxth	r3, r3
 800c66a:	f003 0307 	and.w	r3, r3, #7
 800c66e:	b29a      	uxth	r2, r3
 800c670:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c672:	4313      	orrs	r3, r2
 800c674:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c67c:	60da      	str	r2, [r3, #12]
 800c67e:	e0b9      	b.n	800c7f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c686:	e0b5      	b.n	800c7f4 <UART_SetConfig+0xa94>
 800c688:	03d09000 	.word	0x03d09000
 800c68c:	003d0900 	.word	0x003d0900
 800c690:	08011098 	.word	0x08011098
 800c694:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c698:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c69c:	2b20      	cmp	r3, #32
 800c69e:	dc49      	bgt.n	800c734 <UART_SetConfig+0x9d4>
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	db7c      	blt.n	800c79e <UART_SetConfig+0xa3e>
 800c6a4:	2b20      	cmp	r3, #32
 800c6a6:	d87a      	bhi.n	800c79e <UART_SetConfig+0xa3e>
 800c6a8:	a201      	add	r2, pc, #4	; (adr r2, 800c6b0 <UART_SetConfig+0x950>)
 800c6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ae:	bf00      	nop
 800c6b0:	0800c73b 	.word	0x0800c73b
 800c6b4:	0800c743 	.word	0x0800c743
 800c6b8:	0800c79f 	.word	0x0800c79f
 800c6bc:	0800c79f 	.word	0x0800c79f
 800c6c0:	0800c74b 	.word	0x0800c74b
 800c6c4:	0800c79f 	.word	0x0800c79f
 800c6c8:	0800c79f 	.word	0x0800c79f
 800c6cc:	0800c79f 	.word	0x0800c79f
 800c6d0:	0800c75b 	.word	0x0800c75b
 800c6d4:	0800c79f 	.word	0x0800c79f
 800c6d8:	0800c79f 	.word	0x0800c79f
 800c6dc:	0800c79f 	.word	0x0800c79f
 800c6e0:	0800c79f 	.word	0x0800c79f
 800c6e4:	0800c79f 	.word	0x0800c79f
 800c6e8:	0800c79f 	.word	0x0800c79f
 800c6ec:	0800c79f 	.word	0x0800c79f
 800c6f0:	0800c76b 	.word	0x0800c76b
 800c6f4:	0800c79f 	.word	0x0800c79f
 800c6f8:	0800c79f 	.word	0x0800c79f
 800c6fc:	0800c79f 	.word	0x0800c79f
 800c700:	0800c79f 	.word	0x0800c79f
 800c704:	0800c79f 	.word	0x0800c79f
 800c708:	0800c79f 	.word	0x0800c79f
 800c70c:	0800c79f 	.word	0x0800c79f
 800c710:	0800c79f 	.word	0x0800c79f
 800c714:	0800c79f 	.word	0x0800c79f
 800c718:	0800c79f 	.word	0x0800c79f
 800c71c:	0800c79f 	.word	0x0800c79f
 800c720:	0800c79f 	.word	0x0800c79f
 800c724:	0800c79f 	.word	0x0800c79f
 800c728:	0800c79f 	.word	0x0800c79f
 800c72c:	0800c79f 	.word	0x0800c79f
 800c730:	0800c791 	.word	0x0800c791
 800c734:	2b40      	cmp	r3, #64	; 0x40
 800c736:	d02e      	beq.n	800c796 <UART_SetConfig+0xa36>
 800c738:	e031      	b.n	800c79e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c73a:	f7fb fadf 	bl	8007cfc <HAL_RCC_GetPCLK1Freq>
 800c73e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c740:	e033      	b.n	800c7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c742:	f7fb faf1 	bl	8007d28 <HAL_RCC_GetPCLK2Freq>
 800c746:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c748:	e02f      	b.n	800c7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c74a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fc fa5c 	bl	8008c0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c758:	e027      	b.n	800c7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c75a:	f107 0318 	add.w	r3, r7, #24
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fc fba8 	bl	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c768:	e01f      	b.n	800c7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c76a:	4b2d      	ldr	r3, [pc, #180]	; (800c820 <UART_SetConfig+0xac0>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 0320 	and.w	r3, r3, #32
 800c772:	2b00      	cmp	r3, #0
 800c774:	d009      	beq.n	800c78a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c776:	4b2a      	ldr	r3, [pc, #168]	; (800c820 <UART_SetConfig+0xac0>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	08db      	lsrs	r3, r3, #3
 800c77c:	f003 0303 	and.w	r3, r3, #3
 800c780:	4a28      	ldr	r2, [pc, #160]	; (800c824 <UART_SetConfig+0xac4>)
 800c782:	fa22 f303 	lsr.w	r3, r2, r3
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c788:	e00f      	b.n	800c7aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c78a:	4b26      	ldr	r3, [pc, #152]	; (800c824 <UART_SetConfig+0xac4>)
 800c78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c78e:	e00c      	b.n	800c7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c790:	4b25      	ldr	r3, [pc, #148]	; (800c828 <UART_SetConfig+0xac8>)
 800c792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c794:	e009      	b.n	800c7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c79c:	e005      	b.n	800c7aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c7a8:	bf00      	nop
    }

    if (pclk != 0U)
 800c7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d021      	beq.n	800c7f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b4:	4a1d      	ldr	r2, [pc, #116]	; (800c82c <UART_SetConfig+0xacc>)
 800c7b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7be:	fbb3 f2f2 	udiv	r2, r3, r2
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	085b      	lsrs	r3, r3, #1
 800c7c8:	441a      	add	r2, r3
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	2b0f      	cmp	r3, #15
 800c7d8:	d909      	bls.n	800c7ee <UART_SetConfig+0xa8e>
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7e0:	d205      	bcs.n	800c7ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	60da      	str	r2, [r3, #12]
 800c7ec:	e002      	b.n	800c7f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	2200      	movs	r2, #0
 800c808:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2200      	movs	r2, #0
 800c80e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c810:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c814:	4618      	mov	r0, r3
 800c816:	3748      	adds	r7, #72	; 0x48
 800c818:	46bd      	mov	sp, r7
 800c81a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c81e:	bf00      	nop
 800c820:	58024400 	.word	0x58024400
 800c824:	03d09000 	.word	0x03d09000
 800c828:	003d0900 	.word	0x003d0900
 800c82c:	08011098 	.word	0x08011098

0800c830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00a      	beq.n	800c85a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	430a      	orrs	r2, r1
 800c858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85e:	f003 0302 	and.w	r3, r3, #2
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00a      	beq.n	800c87c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	430a      	orrs	r2, r1
 800c87a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00a      	beq.n	800c89e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	430a      	orrs	r2, r1
 800c89c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a2:	f003 0308 	and.w	r3, r3, #8
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00a      	beq.n	800c8c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	430a      	orrs	r2, r1
 800c8be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c4:	f003 0310 	and.w	r3, r3, #16
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00a      	beq.n	800c8e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	430a      	orrs	r2, r1
 800c8e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e6:	f003 0320 	and.w	r3, r3, #32
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00a      	beq.n	800c904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	430a      	orrs	r2, r1
 800c902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d01a      	beq.n	800c946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	430a      	orrs	r2, r1
 800c924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c92a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c92e:	d10a      	bne.n	800c946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	430a      	orrs	r2, r1
 800c944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00a      	beq.n	800c968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	430a      	orrs	r2, r1
 800c966:	605a      	str	r2, [r3, #4]
  }
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b086      	sub	sp, #24
 800c978:	af02      	add	r7, sp, #8
 800c97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c984:	f7f9 f914 	bl	8005bb0 <HAL_GetTick>
 800c988:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 0308 	and.w	r3, r3, #8
 800c994:	2b08      	cmp	r3, #8
 800c996:	d10e      	bne.n	800c9b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 f82f 	bl	800ca0a <UART_WaitOnFlagUntilTimeout>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	e025      	b.n	800ca02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 0304 	and.w	r3, r3, #4
 800c9c0:	2b04      	cmp	r3, #4
 800c9c2:	d10e      	bne.n	800c9e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f819 	bl	800ca0a <UART_WaitOnFlagUntilTimeout>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d001      	beq.n	800c9e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	e00f      	b.n	800ca02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2220      	movs	r2, #32
 800c9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2220      	movs	r2, #32
 800c9ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b09c      	sub	sp, #112	; 0x70
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	60f8      	str	r0, [r7, #12]
 800ca12:	60b9      	str	r1, [r7, #8]
 800ca14:	603b      	str	r3, [r7, #0]
 800ca16:	4613      	mov	r3, r2
 800ca18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca1a:	e0a9      	b.n	800cb70 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca22:	f000 80a5 	beq.w	800cb70 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca26:	f7f9 f8c3 	bl	8005bb0 <HAL_GetTick>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d302      	bcc.n	800ca3c <UART_WaitOnFlagUntilTimeout+0x32>
 800ca36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d140      	bne.n	800cabe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca44:	e853 3f00 	ldrex	r3, [r3]
 800ca48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ca4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca50:	667b      	str	r3, [r7, #100]	; 0x64
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	461a      	mov	r2, r3
 800ca58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ca60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca62:	e841 2300 	strex	r3, r2, [r1]
 800ca66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ca68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d1e6      	bne.n	800ca3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	3308      	adds	r3, #8
 800ca74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca78:	e853 3f00 	ldrex	r3, [r3]
 800ca7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca80:	f023 0301 	bic.w	r3, r3, #1
 800ca84:	663b      	str	r3, [r7, #96]	; 0x60
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca8e:	64ba      	str	r2, [r7, #72]	; 0x48
 800ca90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ca94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca96:	e841 2300 	strex	r3, r2, [r1]
 800ca9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ca9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1e5      	bne.n	800ca6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2220      	movs	r2, #32
 800caa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2220      	movs	r2, #32
 800caae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2200      	movs	r2, #0
 800cab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800caba:	2303      	movs	r3, #3
 800cabc:	e069      	b.n	800cb92 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 0304 	and.w	r3, r3, #4
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d051      	beq.n	800cb70 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	69db      	ldr	r3, [r3, #28]
 800cad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cada:	d149      	bne.n	800cb70 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cae4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	e853 3f00 	ldrex	r3, [r3]
 800caf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cafa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	461a      	mov	r2, r3
 800cb02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb04:	637b      	str	r3, [r7, #52]	; 0x34
 800cb06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb0c:	e841 2300 	strex	r3, r2, [r1]
 800cb10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1e6      	bne.n	800cae6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	e853 3f00 	ldrex	r3, [r3]
 800cb26:	613b      	str	r3, [r7, #16]
   return(result);
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	f023 0301 	bic.w	r3, r3, #1
 800cb2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3308      	adds	r3, #8
 800cb36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cb38:	623a      	str	r2, [r7, #32]
 800cb3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3c:	69f9      	ldr	r1, [r7, #28]
 800cb3e:	6a3a      	ldr	r2, [r7, #32]
 800cb40:	e841 2300 	strex	r3, r2, [r1]
 800cb44:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1e5      	bne.n	800cb18 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2220      	movs	r2, #32
 800cb50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2220      	movs	r2, #32
 800cb58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2220      	movs	r2, #32
 800cb60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e010      	b.n	800cb92 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	69da      	ldr	r2, [r3, #28]
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	4013      	ands	r3, r2
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	bf0c      	ite	eq
 800cb80:	2301      	moveq	r3, #1
 800cb82:	2300      	movne	r3, #0
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	461a      	mov	r2, r3
 800cb88:	79fb      	ldrb	r3, [r7, #7]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	f43f af46 	beq.w	800ca1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3770      	adds	r7, #112	; 0x70
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
	...

0800cb9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b0a3      	sub	sp, #140	; 0x8c
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	4613      	mov	r3, r2
 800cba8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	68ba      	ldr	r2, [r7, #8]
 800cbae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	88fa      	ldrh	r2, [r7, #6]
 800cbb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	88fa      	ldrh	r2, [r7, #6]
 800cbbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbce:	d10e      	bne.n	800cbee <UART_Start_Receive_IT+0x52>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d105      	bne.n	800cbe4 <UART_Start_Receive_IT+0x48>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cbde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cbe2:	e02d      	b.n	800cc40 <UART_Start_Receive_IT+0xa4>
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	22ff      	movs	r2, #255	; 0xff
 800cbe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cbec:	e028      	b.n	800cc40 <UART_Start_Receive_IT+0xa4>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10d      	bne.n	800cc12 <UART_Start_Receive_IT+0x76>
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d104      	bne.n	800cc08 <UART_Start_Receive_IT+0x6c>
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	22ff      	movs	r2, #255	; 0xff
 800cc02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc06:	e01b      	b.n	800cc40 <UART_Start_Receive_IT+0xa4>
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	227f      	movs	r2, #127	; 0x7f
 800cc0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc10:	e016      	b.n	800cc40 <UART_Start_Receive_IT+0xa4>
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc1a:	d10d      	bne.n	800cc38 <UART_Start_Receive_IT+0x9c>
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d104      	bne.n	800cc2e <UART_Start_Receive_IT+0x92>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	227f      	movs	r2, #127	; 0x7f
 800cc28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc2c:	e008      	b.n	800cc40 <UART_Start_Receive_IT+0xa4>
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	223f      	movs	r2, #63	; 0x3f
 800cc32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc36:	e003      	b.n	800cc40 <UART_Start_Receive_IT+0xa4>
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2222      	movs	r2, #34	; 0x22
 800cc4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	3308      	adds	r3, #8
 800cc56:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc5a:	e853 3f00 	ldrex	r3, [r3]
 800cc5e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cc60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc62:	f043 0301 	orr.w	r3, r3, #1
 800cc66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	3308      	adds	r3, #8
 800cc70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cc74:	673a      	str	r2, [r7, #112]	; 0x70
 800cc76:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc78:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cc7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cc7c:	e841 2300 	strex	r3, r2, [r1]
 800cc80:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800cc82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1e3      	bne.n	800cc50 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc90:	d153      	bne.n	800cd3a <UART_Start_Receive_IT+0x19e>
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc98:	88fa      	ldrh	r2, [r7, #6]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d34d      	bcc.n	800cd3a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cca6:	d107      	bne.n	800ccb8 <UART_Start_Receive_IT+0x11c>
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d103      	bne.n	800ccb8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	4a4b      	ldr	r2, [pc, #300]	; (800cde0 <UART_Start_Receive_IT+0x244>)
 800ccb4:	671a      	str	r2, [r3, #112]	; 0x70
 800ccb6:	e002      	b.n	800ccbe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	4a4a      	ldr	r2, [pc, #296]	; (800cde4 <UART_Start_Receive_IT+0x248>)
 800ccbc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	691b      	ldr	r3, [r3, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d01a      	beq.n	800cd04 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccd6:	e853 3f00 	ldrex	r3, [r3]
 800ccda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ccdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cce2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	461a      	mov	r2, r3
 800ccec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ccf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccf2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccf6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccf8:	e841 2300 	strex	r3, r2, [r1]
 800ccfc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ccfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1e4      	bne.n	800ccce <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	3308      	adds	r3, #8
 800cd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd0e:	e853 3f00 	ldrex	r3, [r3]
 800cd12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	3308      	adds	r3, #8
 800cd22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cd24:	64ba      	str	r2, [r7, #72]	; 0x48
 800cd26:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd2c:	e841 2300 	strex	r3, r2, [r1]
 800cd30:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cd32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1e5      	bne.n	800cd04 <UART_Start_Receive_IT+0x168>
 800cd38:	e04a      	b.n	800cdd0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd42:	d107      	bne.n	800cd54 <UART_Start_Receive_IT+0x1b8>
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d103      	bne.n	800cd54 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	4a26      	ldr	r2, [pc, #152]	; (800cde8 <UART_Start_Receive_IT+0x24c>)
 800cd50:	671a      	str	r2, [r3, #112]	; 0x70
 800cd52:	e002      	b.n	800cd5a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	4a25      	ldr	r2, [pc, #148]	; (800cdec <UART_Start_Receive_IT+0x250>)
 800cd58:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	691b      	ldr	r3, [r3, #16]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d019      	beq.n	800cd9e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd72:	e853 3f00 	ldrex	r3, [r3]
 800cd76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cd7e:	677b      	str	r3, [r7, #116]	; 0x74
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	461a      	mov	r2, r3
 800cd86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd88:	637b      	str	r3, [r7, #52]	; 0x34
 800cd8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd90:	e841 2300 	strex	r3, r2, [r1]
 800cd94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1e6      	bne.n	800cd6a <UART_Start_Receive_IT+0x1ce>
 800cd9c:	e018      	b.n	800cdd0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	e853 3f00 	ldrex	r3, [r3]
 800cdaa:	613b      	str	r3, [r7, #16]
   return(result);
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	f043 0320 	orr.w	r3, r3, #32
 800cdb2:	67bb      	str	r3, [r7, #120]	; 0x78
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	461a      	mov	r2, r3
 800cdba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cdbc:	623b      	str	r3, [r7, #32]
 800cdbe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc0:	69f9      	ldr	r1, [r7, #28]
 800cdc2:	6a3a      	ldr	r2, [r7, #32]
 800cdc4:	e841 2300 	strex	r3, r2, [r1]
 800cdc8:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1e6      	bne.n	800cd9e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	378c      	adds	r7, #140	; 0x8c
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	0800d4f9 	.word	0x0800d4f9
 800cde4:	0800d201 	.word	0x0800d201
 800cde8:	0800d09f 	.word	0x0800d09f
 800cdec:	0800cf3f 	.word	0x0800cf3f

0800cdf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b095      	sub	sp, #84	; 0x54
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce00:	e853 3f00 	ldrex	r3, [r3]
 800ce04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	461a      	mov	r2, r3
 800ce14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce16:	643b      	str	r3, [r7, #64]	; 0x40
 800ce18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce1e:	e841 2300 	strex	r3, r2, [r1]
 800ce22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d1e6      	bne.n	800cdf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	3308      	adds	r3, #8
 800ce30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	e853 3f00 	ldrex	r3, [r3]
 800ce38:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce3a:	69fa      	ldr	r2, [r7, #28]
 800ce3c:	4b1e      	ldr	r3, [pc, #120]	; (800ceb8 <UART_EndRxTransfer+0xc8>)
 800ce3e:	4013      	ands	r3, r2
 800ce40:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	3308      	adds	r3, #8
 800ce48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce52:	e841 2300 	strex	r3, r2, [r1]
 800ce56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d1e5      	bne.n	800ce2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d118      	bne.n	800ce98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	e853 3f00 	ldrex	r3, [r3]
 800ce72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	f023 0310 	bic.w	r3, r3, #16
 800ce7a:	647b      	str	r3, [r7, #68]	; 0x44
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	461a      	mov	r2, r3
 800ce82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce84:	61bb      	str	r3, [r7, #24]
 800ce86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce88:	6979      	ldr	r1, [r7, #20]
 800ce8a:	69ba      	ldr	r2, [r7, #24]
 800ce8c:	e841 2300 	strex	r3, r2, [r1]
 800ce90:	613b      	str	r3, [r7, #16]
   return(result);
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1e6      	bne.n	800ce66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2220      	movs	r2, #32
 800ce9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ceac:	bf00      	nop
 800ceae:	3754      	adds	r7, #84	; 0x54
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr
 800ceb8:	effffffe 	.word	0xeffffffe

0800cebc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f7fe ff2a 	bl	800bd34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cee0:	bf00      	nop
 800cee2:	3710      	adds	r7, #16
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b088      	sub	sp, #32
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	e853 3f00 	ldrex	r3, [r3]
 800cefc:	60bb      	str	r3, [r7, #8]
   return(result);
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf04:	61fb      	str	r3, [r7, #28]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	61bb      	str	r3, [r7, #24]
 800cf10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf12:	6979      	ldr	r1, [r7, #20]
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	e841 2300 	strex	r3, r2, [r1]
 800cf1a:	613b      	str	r3, [r7, #16]
   return(result);
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d1e6      	bne.n	800cef0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2220      	movs	r2, #32
 800cf26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f7f5 fe99 	bl	8002c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf36:	bf00      	nop
 800cf38:	3720      	adds	r7, #32
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b096      	sub	sp, #88	; 0x58
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf56:	2b22      	cmp	r3, #34	; 0x22
 800cf58:	f040 8095 	bne.w	800d086 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf62:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cf66:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cf6a:	b2d9      	uxtb	r1, r3
 800cf6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cf70:	b2da      	uxtb	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf76:	400a      	ands	r2, r1
 800cf78:	b2d2      	uxtb	r2, r2
 800cf7a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	3b01      	subs	r3, #1
 800cf90:	b29a      	uxth	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d178      	bne.n	800d096 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	e853 3f00 	ldrex	r3, [r3]
 800cfb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cfb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cfb8:	653b      	str	r3, [r7, #80]	; 0x50
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfc2:	647b      	str	r3, [r7, #68]	; 0x44
 800cfc4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cfc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfca:	e841 2300 	strex	r3, r2, [r1]
 800cfce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cfd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1e6      	bne.n	800cfa4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	3308      	adds	r3, #8
 800cfdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe0:	e853 3f00 	ldrex	r3, [r3]
 800cfe4:	623b      	str	r3, [r7, #32]
   return(result);
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	f023 0301 	bic.w	r3, r3, #1
 800cfec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	3308      	adds	r3, #8
 800cff4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cff6:	633a      	str	r2, [r7, #48]	; 0x30
 800cff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cffe:	e841 2300 	strex	r3, r2, [r1]
 800d002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d006:	2b00      	cmp	r3, #0
 800d008:	d1e5      	bne.n	800cfd6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2220      	movs	r2, #32
 800d00e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d12e      	bne.n	800d07e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	e853 3f00 	ldrex	r3, [r3]
 800d032:	60fb      	str	r3, [r7, #12]
   return(result);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f023 0310 	bic.w	r3, r3, #16
 800d03a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	461a      	mov	r2, r3
 800d042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d044:	61fb      	str	r3, [r7, #28]
 800d046:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d048:	69b9      	ldr	r1, [r7, #24]
 800d04a:	69fa      	ldr	r2, [r7, #28]
 800d04c:	e841 2300 	strex	r3, r2, [r1]
 800d050:	617b      	str	r3, [r7, #20]
   return(result);
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1e6      	bne.n	800d026 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	69db      	ldr	r3, [r3, #28]
 800d05e:	f003 0310 	and.w	r3, r3, #16
 800d062:	2b10      	cmp	r3, #16
 800d064:	d103      	bne.n	800d06e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2210      	movs	r2, #16
 800d06c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d074:	4619      	mov	r1, r3
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7fe fe66 	bl	800bd48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d07c:	e00b      	b.n	800d096 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7f5 fd7e 	bl	8002b80 <HAL_UART_RxCpltCallback>
}
 800d084:	e007      	b.n	800d096 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	699a      	ldr	r2, [r3, #24]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f042 0208 	orr.w	r2, r2, #8
 800d094:	619a      	str	r2, [r3, #24]
}
 800d096:	bf00      	nop
 800d098:	3758      	adds	r7, #88	; 0x58
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b096      	sub	sp, #88	; 0x58
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0b6:	2b22      	cmp	r3, #34	; 0x22
 800d0b8:	f040 8095 	bne.w	800d1e6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d0cc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d0d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0e0:	1c9a      	adds	r2, r3, #2
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	2b00      	cmp	r3, #0
 800d102:	d178      	bne.n	800d1f6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10c:	e853 3f00 	ldrex	r3, [r3]
 800d110:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d118:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	461a      	mov	r2, r3
 800d120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d122:	643b      	str	r3, [r7, #64]	; 0x40
 800d124:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d126:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d128:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d12a:	e841 2300 	strex	r3, r2, [r1]
 800d12e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1e6      	bne.n	800d104 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	3308      	adds	r3, #8
 800d13c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13e:	6a3b      	ldr	r3, [r7, #32]
 800d140:	e853 3f00 	ldrex	r3, [r3]
 800d144:	61fb      	str	r3, [r7, #28]
   return(result);
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	f023 0301 	bic.w	r3, r3, #1
 800d14c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3308      	adds	r3, #8
 800d154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d156:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d158:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d15c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d15e:	e841 2300 	strex	r3, r2, [r1]
 800d162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1e5      	bne.n	800d136 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2220      	movs	r2, #32
 800d16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d12e      	bne.n	800d1de <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	e853 3f00 	ldrex	r3, [r3]
 800d192:	60bb      	str	r3, [r7, #8]
   return(result);
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	f023 0310 	bic.w	r3, r3, #16
 800d19a:	647b      	str	r3, [r7, #68]	; 0x44
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1a4:	61bb      	str	r3, [r7, #24]
 800d1a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a8:	6979      	ldr	r1, [r7, #20]
 800d1aa:	69ba      	ldr	r2, [r7, #24]
 800d1ac:	e841 2300 	strex	r3, r2, [r1]
 800d1b0:	613b      	str	r3, [r7, #16]
   return(result);
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d1e6      	bne.n	800d186 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	69db      	ldr	r3, [r3, #28]
 800d1be:	f003 0310 	and.w	r3, r3, #16
 800d1c2:	2b10      	cmp	r3, #16
 800d1c4:	d103      	bne.n	800d1ce <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2210      	movs	r2, #16
 800d1cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7fe fdb6 	bl	800bd48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d1dc:	e00b      	b.n	800d1f6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7f5 fcce 	bl	8002b80 <HAL_UART_RxCpltCallback>
}
 800d1e4:	e007      	b.n	800d1f6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	699a      	ldr	r2, [r3, #24]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f042 0208 	orr.w	r2, r2, #8
 800d1f4:	619a      	str	r2, [r3, #24]
}
 800d1f6:	bf00      	nop
 800d1f8:	3758      	adds	r7, #88	; 0x58
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
	...

0800d200 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b0a6      	sub	sp, #152	; 0x98
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d20e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	69db      	ldr	r3, [r3, #28]
 800d218:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d236:	2b22      	cmp	r3, #34	; 0x22
 800d238:	f040 814d 	bne.w	800d4d6 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d242:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d246:	e0f4      	b.n	800d432 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d252:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800d256:	b2d9      	uxtb	r1, r3
 800d258:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d262:	400a      	ands	r2, r1
 800d264:	b2d2      	uxtb	r2, r2
 800d266:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d26c:	1c5a      	adds	r2, r3, #1
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d278:	b29b      	uxth	r3, r3
 800d27a:	3b01      	subs	r3, #1
 800d27c:	b29a      	uxth	r2, r3
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	69db      	ldr	r3, [r3, #28]
 800d28a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d28e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d292:	f003 0307 	and.w	r3, r3, #7
 800d296:	2b00      	cmp	r3, #0
 800d298:	d053      	beq.n	800d342 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d29a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d011      	beq.n	800d2ca <UART_RxISR_8BIT_FIFOEN+0xca>
 800d2a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00b      	beq.n	800d2ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2c0:	f043 0201 	orr.w	r2, r3, #1
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2ce:	f003 0302 	and.w	r3, r3, #2
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d011      	beq.n	800d2fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d2d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d2da:	f003 0301 	and.w	r3, r3, #1
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00b      	beq.n	800d2fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2202      	movs	r2, #2
 800d2e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2f0:	f043 0204 	orr.w	r2, r3, #4
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2fe:	f003 0304 	and.w	r3, r3, #4
 800d302:	2b00      	cmp	r3, #0
 800d304:	d011      	beq.n	800d32a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d30a:	f003 0301 	and.w	r3, r3, #1
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00b      	beq.n	800d32a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2204      	movs	r2, #4
 800d318:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d320:	f043 0202 	orr.w	r2, r3, #2
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d330:	2b00      	cmp	r3, #0
 800d332:	d006      	beq.n	800d342 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7fe fcfd 	bl	800bd34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2200      	movs	r2, #0
 800d33e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d348:	b29b      	uxth	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d171      	bne.n	800d432 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d356:	e853 3f00 	ldrex	r3, [r3]
 800d35a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d35c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d35e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d362:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d370:	66bb      	str	r3, [r7, #104]	; 0x68
 800d372:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d374:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d378:	e841 2300 	strex	r3, r2, [r1]
 800d37c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d37e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1e4      	bne.n	800d34e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	3308      	adds	r3, #8
 800d38a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d38e:	e853 3f00 	ldrex	r3, [r3]
 800d392:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d396:	4b56      	ldr	r3, [pc, #344]	; (800d4f0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800d398:	4013      	ands	r3, r2
 800d39a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	3308      	adds	r3, #8
 800d3a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d3a4:	657a      	str	r2, [r7, #84]	; 0x54
 800d3a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d3aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3ac:	e841 2300 	strex	r3, r2, [r1]
 800d3b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1e5      	bne.n	800d384 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2220      	movs	r2, #32
 800d3bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d12e      	bne.n	800d42c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3dc:	e853 3f00 	ldrex	r3, [r3]
 800d3e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e4:	f023 0310 	bic.w	r3, r3, #16
 800d3e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3f2:	643b      	str	r3, [r7, #64]	; 0x40
 800d3f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d3f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3fa:	e841 2300 	strex	r3, r2, [r1]
 800d3fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1e6      	bne.n	800d3d4 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	69db      	ldr	r3, [r3, #28]
 800d40c:	f003 0310 	and.w	r3, r3, #16
 800d410:	2b10      	cmp	r3, #16
 800d412:	d103      	bne.n	800d41c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2210      	movs	r2, #16
 800d41a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d422:	4619      	mov	r1, r3
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f7fe fc8f 	bl	800bd48 <HAL_UARTEx_RxEventCallback>
 800d42a:	e002      	b.n	800d432 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f7f5 fba7 	bl	8002b80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d432:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d436:	2b00      	cmp	r3, #0
 800d438:	d006      	beq.n	800d448 <UART_RxISR_8BIT_FIFOEN+0x248>
 800d43a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d43e:	f003 0320 	and.w	r3, r3, #32
 800d442:	2b00      	cmp	r3, #0
 800d444:	f47f af00 	bne.w	800d248 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d44e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d452:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d456:	2b00      	cmp	r3, #0
 800d458:	d045      	beq.n	800d4e6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d460:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d464:	429a      	cmp	r2, r3
 800d466:	d23e      	bcs.n	800d4e6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	3308      	adds	r3, #8
 800d46e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d470:	6a3b      	ldr	r3, [r7, #32]
 800d472:	e853 3f00 	ldrex	r3, [r3]
 800d476:	61fb      	str	r3, [r7, #28]
   return(result);
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d47e:	673b      	str	r3, [r7, #112]	; 0x70
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3308      	adds	r3, #8
 800d486:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d488:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d48a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d48e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d490:	e841 2300 	strex	r3, r2, [r1]
 800d494:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1e5      	bne.n	800d468 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a15      	ldr	r2, [pc, #84]	; (800d4f4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800d4a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	e853 3f00 	ldrex	r3, [r3]
 800d4ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	f043 0320 	orr.w	r3, r3, #32
 800d4b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c0:	61bb      	str	r3, [r7, #24]
 800d4c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c4:	6979      	ldr	r1, [r7, #20]
 800d4c6:	69ba      	ldr	r2, [r7, #24]
 800d4c8:	e841 2300 	strex	r3, r2, [r1]
 800d4cc:	613b      	str	r3, [r7, #16]
   return(result);
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1e6      	bne.n	800d4a2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d4d4:	e007      	b.n	800d4e6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	699a      	ldr	r2, [r3, #24]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f042 0208 	orr.w	r2, r2, #8
 800d4e4:	619a      	str	r2, [r3, #24]
}
 800d4e6:	bf00      	nop
 800d4e8:	3798      	adds	r7, #152	; 0x98
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	effffffe 	.word	0xeffffffe
 800d4f4:	0800cf3f 	.word	0x0800cf3f

0800d4f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b0a8      	sub	sp, #160	; 0xa0
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d506:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	69db      	ldr	r3, [r3, #28]
 800d510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	689b      	ldr	r3, [r3, #8]
 800d524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d52e:	2b22      	cmp	r3, #34	; 0x22
 800d530:	f040 8151 	bne.w	800d7d6 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d53a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d53e:	e0f8      	b.n	800d732 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d546:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d54e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800d552:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800d556:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800d55a:	4013      	ands	r3, r2
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d562:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d568:	1c9a      	adds	r2, r3, #2
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d574:	b29b      	uxth	r3, r3
 800d576:	3b01      	subs	r3, #1
 800d578:	b29a      	uxth	r2, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	69db      	ldr	r3, [r3, #28]
 800d586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d58a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d58e:	f003 0307 	and.w	r3, r3, #7
 800d592:	2b00      	cmp	r3, #0
 800d594:	d053      	beq.n	800d63e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d596:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d59a:	f003 0301 	and.w	r3, r3, #1
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d011      	beq.n	800d5c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d5a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d5a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00b      	beq.n	800d5c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5bc:	f043 0201 	orr.w	r2, r3, #1
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d5c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5ca:	f003 0302 	and.w	r3, r3, #2
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d011      	beq.n	800d5f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d5d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00b      	beq.n	800d5f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2202      	movs	r2, #2
 800d5e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5ec:	f043 0204 	orr.w	r2, r3, #4
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d5f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5fa:	f003 0304 	and.w	r3, r3, #4
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d011      	beq.n	800d626 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d602:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d606:	f003 0301 	and.w	r3, r3, #1
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00b      	beq.n	800d626 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2204      	movs	r2, #4
 800d614:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d61c:	f043 0202 	orr.w	r2, r3, #2
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d006      	beq.n	800d63e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7fe fb7f 	bl	800bd34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d644:	b29b      	uxth	r3, r3
 800d646:	2b00      	cmp	r3, #0
 800d648:	d173      	bne.n	800d732 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d652:	e853 3f00 	ldrex	r3, [r3]
 800d656:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d65a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d65e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	461a      	mov	r2, r3
 800d668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d66c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d66e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d672:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d674:	e841 2300 	strex	r3, r2, [r1]
 800d678:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d67a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e4      	bne.n	800d64a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	3308      	adds	r3, #8
 800d686:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d68a:	e853 3f00 	ldrex	r3, [r3]
 800d68e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d692:	4b57      	ldr	r3, [pc, #348]	; (800d7f0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800d694:	4013      	ands	r3, r2
 800d696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	3308      	adds	r3, #8
 800d6a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d6a4:	65ba      	str	r2, [r7, #88]	; 0x58
 800d6a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6ac:	e841 2300 	strex	r3, r2, [r1]
 800d6b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1e3      	bne.n	800d680 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2220      	movs	r2, #32
 800d6bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	d12e      	bne.n	800d72c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6dc:	e853 3f00 	ldrex	r3, [r3]
 800d6e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e4:	f023 0310 	bic.w	r3, r3, #16
 800d6e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6f2:	647b      	str	r3, [r7, #68]	; 0x44
 800d6f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6fa:	e841 2300 	strex	r3, r2, [r1]
 800d6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1e6      	bne.n	800d6d4 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	69db      	ldr	r3, [r3, #28]
 800d70c:	f003 0310 	and.w	r3, r3, #16
 800d710:	2b10      	cmp	r3, #16
 800d712:	d103      	bne.n	800d71c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2210      	movs	r2, #16
 800d71a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d722:	4619      	mov	r1, r3
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7fe fb0f 	bl	800bd48 <HAL_UARTEx_RxEventCallback>
 800d72a:	e002      	b.n	800d732 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7f5 fa27 	bl	8002b80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d732:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d736:	2b00      	cmp	r3, #0
 800d738:	d006      	beq.n	800d748 <UART_RxISR_16BIT_FIFOEN+0x250>
 800d73a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d73e:	f003 0320 	and.w	r3, r3, #32
 800d742:	2b00      	cmp	r3, #0
 800d744:	f47f aefc 	bne.w	800d540 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d74e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d752:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d756:	2b00      	cmp	r3, #0
 800d758:	d045      	beq.n	800d7e6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d760:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d764:	429a      	cmp	r2, r3
 800d766:	d23e      	bcs.n	800d7e6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	3308      	adds	r3, #8
 800d76e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d772:	e853 3f00 	ldrex	r3, [r3]
 800d776:	623b      	str	r3, [r7, #32]
   return(result);
 800d778:	6a3b      	ldr	r3, [r7, #32]
 800d77a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d77e:	677b      	str	r3, [r7, #116]	; 0x74
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	3308      	adds	r3, #8
 800d786:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d788:	633a      	str	r2, [r7, #48]	; 0x30
 800d78a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d78e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d790:	e841 2300 	strex	r3, r2, [r1]
 800d794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1e5      	bne.n	800d768 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4a15      	ldr	r2, [pc, #84]	; (800d7f4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800d7a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	e853 3f00 	ldrex	r3, [r3]
 800d7ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f043 0320 	orr.w	r3, r3, #32
 800d7b6:	673b      	str	r3, [r7, #112]	; 0x70
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7c0:	61fb      	str	r3, [r7, #28]
 800d7c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c4:	69b9      	ldr	r1, [r7, #24]
 800d7c6:	69fa      	ldr	r2, [r7, #28]
 800d7c8:	e841 2300 	strex	r3, r2, [r1]
 800d7cc:	617b      	str	r3, [r7, #20]
   return(result);
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1e6      	bne.n	800d7a2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d7d4:	e007      	b.n	800d7e6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	699a      	ldr	r2, [r3, #24]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f042 0208 	orr.w	r2, r2, #8
 800d7e4:	619a      	str	r2, [r3, #24]
}
 800d7e6:	bf00      	nop
 800d7e8:	37a0      	adds	r7, #160	; 0xa0
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	effffffe 	.word	0xeffffffe
 800d7f4:	0800d09f 	.word	0x0800d09f

0800d7f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d800:	bf00      	nop
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d814:	bf00      	nop
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d828:	bf00      	nop
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d842:	2b01      	cmp	r3, #1
 800d844:	d101      	bne.n	800d84a <HAL_UARTEx_DisableFifoMode+0x16>
 800d846:	2302      	movs	r3, #2
 800d848:	e027      	b.n	800d89a <HAL_UARTEx_DisableFifoMode+0x66>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2224      	movs	r2, #36	; 0x24
 800d856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f022 0201 	bic.w	r2, r2, #1
 800d870:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d878:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2220      	movs	r2, #32
 800d88c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3714      	adds	r7, #20
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b084      	sub	sp, #16
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d101      	bne.n	800d8be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	e02d      	b.n	800d91a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2224      	movs	r2, #36	; 0x24
 800d8ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f022 0201 	bic.w	r2, r2, #1
 800d8e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	683a      	ldr	r2, [r7, #0]
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 f850 	bl	800d9a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2220      	movs	r2, #32
 800d90c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b084      	sub	sp, #16
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
 800d92a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d932:	2b01      	cmp	r3, #1
 800d934:	d101      	bne.n	800d93a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d936:	2302      	movs	r3, #2
 800d938:	e02d      	b.n	800d996 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2201      	movs	r2, #1
 800d93e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2224      	movs	r2, #36	; 0x24
 800d946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f022 0201 	bic.w	r2, r2, #1
 800d960:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	683a      	ldr	r2, [r7, #0]
 800d972:	430a      	orrs	r2, r1
 800d974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f812 	bl	800d9a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2220      	movs	r2, #32
 800d988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d994:	2300      	movs	r3, #0
}
 800d996:	4618      	mov	r0, r3
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
	...

0800d9a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d108      	bne.n	800d9c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d9c0:	e031      	b.n	800da26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d9c2:	2310      	movs	r3, #16
 800d9c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d9c6:	2310      	movs	r3, #16
 800d9c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	0e5b      	lsrs	r3, r3, #25
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f003 0307 	and.w	r3, r3, #7
 800d9d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	0f5b      	lsrs	r3, r3, #29
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	f003 0307 	and.w	r3, r3, #7
 800d9e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9ea:	7bbb      	ldrb	r3, [r7, #14]
 800d9ec:	7b3a      	ldrb	r2, [r7, #12]
 800d9ee:	4911      	ldr	r1, [pc, #68]	; (800da34 <UARTEx_SetNbDataToProcess+0x94>)
 800d9f0:	5c8a      	ldrb	r2, [r1, r2]
 800d9f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d9f6:	7b3a      	ldrb	r2, [r7, #12]
 800d9f8:	490f      	ldr	r1, [pc, #60]	; (800da38 <UARTEx_SetNbDataToProcess+0x98>)
 800d9fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800da00:	b29a      	uxth	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da08:	7bfb      	ldrb	r3, [r7, #15]
 800da0a:	7b7a      	ldrb	r2, [r7, #13]
 800da0c:	4909      	ldr	r1, [pc, #36]	; (800da34 <UARTEx_SetNbDataToProcess+0x94>)
 800da0e:	5c8a      	ldrb	r2, [r1, r2]
 800da10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800da14:	7b7a      	ldrb	r2, [r7, #13]
 800da16:	4908      	ldr	r1, [pc, #32]	; (800da38 <UARTEx_SetNbDataToProcess+0x98>)
 800da18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da1a:	fb93 f3f2 	sdiv	r3, r3, r2
 800da1e:	b29a      	uxth	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800da26:	bf00      	nop
 800da28:	3714      	adds	r7, #20
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop
 800da34:	080110b0 	.word	0x080110b0
 800da38:	080110b8 	.word	0x080110b8

0800da3c <__errno>:
 800da3c:	4b01      	ldr	r3, [pc, #4]	; (800da44 <__errno+0x8>)
 800da3e:	6818      	ldr	r0, [r3, #0]
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	24000074 	.word	0x24000074

0800da48 <__libc_init_array>:
 800da48:	b570      	push	{r4, r5, r6, lr}
 800da4a:	4d0d      	ldr	r5, [pc, #52]	; (800da80 <__libc_init_array+0x38>)
 800da4c:	4c0d      	ldr	r4, [pc, #52]	; (800da84 <__libc_init_array+0x3c>)
 800da4e:	1b64      	subs	r4, r4, r5
 800da50:	10a4      	asrs	r4, r4, #2
 800da52:	2600      	movs	r6, #0
 800da54:	42a6      	cmp	r6, r4
 800da56:	d109      	bne.n	800da6c <__libc_init_array+0x24>
 800da58:	4d0b      	ldr	r5, [pc, #44]	; (800da88 <__libc_init_array+0x40>)
 800da5a:	4c0c      	ldr	r4, [pc, #48]	; (800da8c <__libc_init_array+0x44>)
 800da5c:	f003 faf2 	bl	8011044 <_init>
 800da60:	1b64      	subs	r4, r4, r5
 800da62:	10a4      	asrs	r4, r4, #2
 800da64:	2600      	movs	r6, #0
 800da66:	42a6      	cmp	r6, r4
 800da68:	d105      	bne.n	800da76 <__libc_init_array+0x2e>
 800da6a:	bd70      	pop	{r4, r5, r6, pc}
 800da6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800da70:	4798      	blx	r3
 800da72:	3601      	adds	r6, #1
 800da74:	e7ee      	b.n	800da54 <__libc_init_array+0xc>
 800da76:	f855 3b04 	ldr.w	r3, [r5], #4
 800da7a:	4798      	blx	r3
 800da7c:	3601      	adds	r6, #1
 800da7e:	e7f2      	b.n	800da66 <__libc_init_array+0x1e>
 800da80:	08012db0 	.word	0x08012db0
 800da84:	08012db0 	.word	0x08012db0
 800da88:	08012db0 	.word	0x08012db0
 800da8c:	08012db4 	.word	0x08012db4

0800da90 <malloc>:
 800da90:	4b02      	ldr	r3, [pc, #8]	; (800da9c <malloc+0xc>)
 800da92:	4601      	mov	r1, r0
 800da94:	6818      	ldr	r0, [r3, #0]
 800da96:	f000 b87f 	b.w	800db98 <_malloc_r>
 800da9a:	bf00      	nop
 800da9c:	24000074 	.word	0x24000074

0800daa0 <free>:
 800daa0:	4b02      	ldr	r3, [pc, #8]	; (800daac <free+0xc>)
 800daa2:	4601      	mov	r1, r0
 800daa4:	6818      	ldr	r0, [r3, #0]
 800daa6:	f000 b80b 	b.w	800dac0 <_free_r>
 800daaa:	bf00      	nop
 800daac:	24000074 	.word	0x24000074

0800dab0 <memset>:
 800dab0:	4402      	add	r2, r0
 800dab2:	4603      	mov	r3, r0
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d100      	bne.n	800daba <memset+0xa>
 800dab8:	4770      	bx	lr
 800daba:	f803 1b01 	strb.w	r1, [r3], #1
 800dabe:	e7f9      	b.n	800dab4 <memset+0x4>

0800dac0 <_free_r>:
 800dac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dac2:	2900      	cmp	r1, #0
 800dac4:	d044      	beq.n	800db50 <_free_r+0x90>
 800dac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daca:	9001      	str	r0, [sp, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f1a1 0404 	sub.w	r4, r1, #4
 800dad2:	bfb8      	it	lt
 800dad4:	18e4      	addlt	r4, r4, r3
 800dad6:	f001 fa51 	bl	800ef7c <__malloc_lock>
 800dada:	4a1e      	ldr	r2, [pc, #120]	; (800db54 <_free_r+0x94>)
 800dadc:	9801      	ldr	r0, [sp, #4]
 800dade:	6813      	ldr	r3, [r2, #0]
 800dae0:	b933      	cbnz	r3, 800daf0 <_free_r+0x30>
 800dae2:	6063      	str	r3, [r4, #4]
 800dae4:	6014      	str	r4, [r2, #0]
 800dae6:	b003      	add	sp, #12
 800dae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800daec:	f001 ba4c 	b.w	800ef88 <__malloc_unlock>
 800daf0:	42a3      	cmp	r3, r4
 800daf2:	d908      	bls.n	800db06 <_free_r+0x46>
 800daf4:	6825      	ldr	r5, [r4, #0]
 800daf6:	1961      	adds	r1, r4, r5
 800daf8:	428b      	cmp	r3, r1
 800dafa:	bf01      	itttt	eq
 800dafc:	6819      	ldreq	r1, [r3, #0]
 800dafe:	685b      	ldreq	r3, [r3, #4]
 800db00:	1949      	addeq	r1, r1, r5
 800db02:	6021      	streq	r1, [r4, #0]
 800db04:	e7ed      	b.n	800dae2 <_free_r+0x22>
 800db06:	461a      	mov	r2, r3
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	b10b      	cbz	r3, 800db10 <_free_r+0x50>
 800db0c:	42a3      	cmp	r3, r4
 800db0e:	d9fa      	bls.n	800db06 <_free_r+0x46>
 800db10:	6811      	ldr	r1, [r2, #0]
 800db12:	1855      	adds	r5, r2, r1
 800db14:	42a5      	cmp	r5, r4
 800db16:	d10b      	bne.n	800db30 <_free_r+0x70>
 800db18:	6824      	ldr	r4, [r4, #0]
 800db1a:	4421      	add	r1, r4
 800db1c:	1854      	adds	r4, r2, r1
 800db1e:	42a3      	cmp	r3, r4
 800db20:	6011      	str	r1, [r2, #0]
 800db22:	d1e0      	bne.n	800dae6 <_free_r+0x26>
 800db24:	681c      	ldr	r4, [r3, #0]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	6053      	str	r3, [r2, #4]
 800db2a:	4421      	add	r1, r4
 800db2c:	6011      	str	r1, [r2, #0]
 800db2e:	e7da      	b.n	800dae6 <_free_r+0x26>
 800db30:	d902      	bls.n	800db38 <_free_r+0x78>
 800db32:	230c      	movs	r3, #12
 800db34:	6003      	str	r3, [r0, #0]
 800db36:	e7d6      	b.n	800dae6 <_free_r+0x26>
 800db38:	6825      	ldr	r5, [r4, #0]
 800db3a:	1961      	adds	r1, r4, r5
 800db3c:	428b      	cmp	r3, r1
 800db3e:	bf04      	itt	eq
 800db40:	6819      	ldreq	r1, [r3, #0]
 800db42:	685b      	ldreq	r3, [r3, #4]
 800db44:	6063      	str	r3, [r4, #4]
 800db46:	bf04      	itt	eq
 800db48:	1949      	addeq	r1, r1, r5
 800db4a:	6021      	streq	r1, [r4, #0]
 800db4c:	6054      	str	r4, [r2, #4]
 800db4e:	e7ca      	b.n	800dae6 <_free_r+0x26>
 800db50:	b003      	add	sp, #12
 800db52:	bd30      	pop	{r4, r5, pc}
 800db54:	24000988 	.word	0x24000988

0800db58 <sbrk_aligned>:
 800db58:	b570      	push	{r4, r5, r6, lr}
 800db5a:	4e0e      	ldr	r6, [pc, #56]	; (800db94 <sbrk_aligned+0x3c>)
 800db5c:	460c      	mov	r4, r1
 800db5e:	6831      	ldr	r1, [r6, #0]
 800db60:	4605      	mov	r5, r0
 800db62:	b911      	cbnz	r1, 800db6a <sbrk_aligned+0x12>
 800db64:	f000 f88c 	bl	800dc80 <_sbrk_r>
 800db68:	6030      	str	r0, [r6, #0]
 800db6a:	4621      	mov	r1, r4
 800db6c:	4628      	mov	r0, r5
 800db6e:	f000 f887 	bl	800dc80 <_sbrk_r>
 800db72:	1c43      	adds	r3, r0, #1
 800db74:	d00a      	beq.n	800db8c <sbrk_aligned+0x34>
 800db76:	1cc4      	adds	r4, r0, #3
 800db78:	f024 0403 	bic.w	r4, r4, #3
 800db7c:	42a0      	cmp	r0, r4
 800db7e:	d007      	beq.n	800db90 <sbrk_aligned+0x38>
 800db80:	1a21      	subs	r1, r4, r0
 800db82:	4628      	mov	r0, r5
 800db84:	f000 f87c 	bl	800dc80 <_sbrk_r>
 800db88:	3001      	adds	r0, #1
 800db8a:	d101      	bne.n	800db90 <sbrk_aligned+0x38>
 800db8c:	f04f 34ff 	mov.w	r4, #4294967295
 800db90:	4620      	mov	r0, r4
 800db92:	bd70      	pop	{r4, r5, r6, pc}
 800db94:	2400098c 	.word	0x2400098c

0800db98 <_malloc_r>:
 800db98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9c:	1ccd      	adds	r5, r1, #3
 800db9e:	f025 0503 	bic.w	r5, r5, #3
 800dba2:	3508      	adds	r5, #8
 800dba4:	2d0c      	cmp	r5, #12
 800dba6:	bf38      	it	cc
 800dba8:	250c      	movcc	r5, #12
 800dbaa:	2d00      	cmp	r5, #0
 800dbac:	4607      	mov	r7, r0
 800dbae:	db01      	blt.n	800dbb4 <_malloc_r+0x1c>
 800dbb0:	42a9      	cmp	r1, r5
 800dbb2:	d905      	bls.n	800dbc0 <_malloc_r+0x28>
 800dbb4:	230c      	movs	r3, #12
 800dbb6:	603b      	str	r3, [r7, #0]
 800dbb8:	2600      	movs	r6, #0
 800dbba:	4630      	mov	r0, r6
 800dbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc0:	4e2e      	ldr	r6, [pc, #184]	; (800dc7c <_malloc_r+0xe4>)
 800dbc2:	f001 f9db 	bl	800ef7c <__malloc_lock>
 800dbc6:	6833      	ldr	r3, [r6, #0]
 800dbc8:	461c      	mov	r4, r3
 800dbca:	bb34      	cbnz	r4, 800dc1a <_malloc_r+0x82>
 800dbcc:	4629      	mov	r1, r5
 800dbce:	4638      	mov	r0, r7
 800dbd0:	f7ff ffc2 	bl	800db58 <sbrk_aligned>
 800dbd4:	1c43      	adds	r3, r0, #1
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	d14d      	bne.n	800dc76 <_malloc_r+0xde>
 800dbda:	6834      	ldr	r4, [r6, #0]
 800dbdc:	4626      	mov	r6, r4
 800dbde:	2e00      	cmp	r6, #0
 800dbe0:	d140      	bne.n	800dc64 <_malloc_r+0xcc>
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	4631      	mov	r1, r6
 800dbe6:	4638      	mov	r0, r7
 800dbe8:	eb04 0803 	add.w	r8, r4, r3
 800dbec:	f000 f848 	bl	800dc80 <_sbrk_r>
 800dbf0:	4580      	cmp	r8, r0
 800dbf2:	d13a      	bne.n	800dc6a <_malloc_r+0xd2>
 800dbf4:	6821      	ldr	r1, [r4, #0]
 800dbf6:	3503      	adds	r5, #3
 800dbf8:	1a6d      	subs	r5, r5, r1
 800dbfa:	f025 0503 	bic.w	r5, r5, #3
 800dbfe:	3508      	adds	r5, #8
 800dc00:	2d0c      	cmp	r5, #12
 800dc02:	bf38      	it	cc
 800dc04:	250c      	movcc	r5, #12
 800dc06:	4629      	mov	r1, r5
 800dc08:	4638      	mov	r0, r7
 800dc0a:	f7ff ffa5 	bl	800db58 <sbrk_aligned>
 800dc0e:	3001      	adds	r0, #1
 800dc10:	d02b      	beq.n	800dc6a <_malloc_r+0xd2>
 800dc12:	6823      	ldr	r3, [r4, #0]
 800dc14:	442b      	add	r3, r5
 800dc16:	6023      	str	r3, [r4, #0]
 800dc18:	e00e      	b.n	800dc38 <_malloc_r+0xa0>
 800dc1a:	6822      	ldr	r2, [r4, #0]
 800dc1c:	1b52      	subs	r2, r2, r5
 800dc1e:	d41e      	bmi.n	800dc5e <_malloc_r+0xc6>
 800dc20:	2a0b      	cmp	r2, #11
 800dc22:	d916      	bls.n	800dc52 <_malloc_r+0xba>
 800dc24:	1961      	adds	r1, r4, r5
 800dc26:	42a3      	cmp	r3, r4
 800dc28:	6025      	str	r5, [r4, #0]
 800dc2a:	bf18      	it	ne
 800dc2c:	6059      	strne	r1, [r3, #4]
 800dc2e:	6863      	ldr	r3, [r4, #4]
 800dc30:	bf08      	it	eq
 800dc32:	6031      	streq	r1, [r6, #0]
 800dc34:	5162      	str	r2, [r4, r5]
 800dc36:	604b      	str	r3, [r1, #4]
 800dc38:	4638      	mov	r0, r7
 800dc3a:	f104 060b 	add.w	r6, r4, #11
 800dc3e:	f001 f9a3 	bl	800ef88 <__malloc_unlock>
 800dc42:	f026 0607 	bic.w	r6, r6, #7
 800dc46:	1d23      	adds	r3, r4, #4
 800dc48:	1af2      	subs	r2, r6, r3
 800dc4a:	d0b6      	beq.n	800dbba <_malloc_r+0x22>
 800dc4c:	1b9b      	subs	r3, r3, r6
 800dc4e:	50a3      	str	r3, [r4, r2]
 800dc50:	e7b3      	b.n	800dbba <_malloc_r+0x22>
 800dc52:	6862      	ldr	r2, [r4, #4]
 800dc54:	42a3      	cmp	r3, r4
 800dc56:	bf0c      	ite	eq
 800dc58:	6032      	streq	r2, [r6, #0]
 800dc5a:	605a      	strne	r2, [r3, #4]
 800dc5c:	e7ec      	b.n	800dc38 <_malloc_r+0xa0>
 800dc5e:	4623      	mov	r3, r4
 800dc60:	6864      	ldr	r4, [r4, #4]
 800dc62:	e7b2      	b.n	800dbca <_malloc_r+0x32>
 800dc64:	4634      	mov	r4, r6
 800dc66:	6876      	ldr	r6, [r6, #4]
 800dc68:	e7b9      	b.n	800dbde <_malloc_r+0x46>
 800dc6a:	230c      	movs	r3, #12
 800dc6c:	603b      	str	r3, [r7, #0]
 800dc6e:	4638      	mov	r0, r7
 800dc70:	f001 f98a 	bl	800ef88 <__malloc_unlock>
 800dc74:	e7a1      	b.n	800dbba <_malloc_r+0x22>
 800dc76:	6025      	str	r5, [r4, #0]
 800dc78:	e7de      	b.n	800dc38 <_malloc_r+0xa0>
 800dc7a:	bf00      	nop
 800dc7c:	24000988 	.word	0x24000988

0800dc80 <_sbrk_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4d06      	ldr	r5, [pc, #24]	; (800dc9c <_sbrk_r+0x1c>)
 800dc84:	2300      	movs	r3, #0
 800dc86:	4604      	mov	r4, r0
 800dc88:	4608      	mov	r0, r1
 800dc8a:	602b      	str	r3, [r5, #0]
 800dc8c:	f7f5 fac2 	bl	8003214 <_sbrk>
 800dc90:	1c43      	adds	r3, r0, #1
 800dc92:	d102      	bne.n	800dc9a <_sbrk_r+0x1a>
 800dc94:	682b      	ldr	r3, [r5, #0]
 800dc96:	b103      	cbz	r3, 800dc9a <_sbrk_r+0x1a>
 800dc98:	6023      	str	r3, [r4, #0]
 800dc9a:	bd38      	pop	{r3, r4, r5, pc}
 800dc9c:	24000990 	.word	0x24000990

0800dca0 <sulp>:
 800dca0:	b570      	push	{r4, r5, r6, lr}
 800dca2:	4604      	mov	r4, r0
 800dca4:	460d      	mov	r5, r1
 800dca6:	4616      	mov	r6, r2
 800dca8:	ec45 4b10 	vmov	d0, r4, r5
 800dcac:	f001 fce4 	bl	800f678 <__ulp>
 800dcb0:	b17e      	cbz	r6, 800dcd2 <sulp+0x32>
 800dcb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dcb6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	dd09      	ble.n	800dcd2 <sulp+0x32>
 800dcbe:	051b      	lsls	r3, r3, #20
 800dcc0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800dcca:	ec41 0b17 	vmov	d7, r0, r1
 800dcce:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dcd2:	bd70      	pop	{r4, r5, r6, pc}
 800dcd4:	0000      	movs	r0, r0
	...

0800dcd8 <_strtod_l>:
 800dcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcdc:	ed2d 8b0e 	vpush	{d8-d14}
 800dce0:	b097      	sub	sp, #92	; 0x5c
 800dce2:	461f      	mov	r7, r3
 800dce4:	2300      	movs	r3, #0
 800dce6:	9312      	str	r3, [sp, #72]	; 0x48
 800dce8:	4ba1      	ldr	r3, [pc, #644]	; (800df70 <_strtod_l+0x298>)
 800dcea:	920d      	str	r2, [sp, #52]	; 0x34
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	9307      	str	r3, [sp, #28]
 800dcf0:	4604      	mov	r4, r0
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	468b      	mov	fp, r1
 800dcf6:	f7f2 faf3 	bl	80002e0 <strlen>
 800dcfa:	f04f 0800 	mov.w	r8, #0
 800dcfe:	4605      	mov	r5, r0
 800dd00:	f04f 0900 	mov.w	r9, #0
 800dd04:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800dd08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dd0a:	7813      	ldrb	r3, [r2, #0]
 800dd0c:	2b2b      	cmp	r3, #43	; 0x2b
 800dd0e:	d04d      	beq.n	800ddac <_strtod_l+0xd4>
 800dd10:	d83a      	bhi.n	800dd88 <_strtod_l+0xb0>
 800dd12:	2b0d      	cmp	r3, #13
 800dd14:	d833      	bhi.n	800dd7e <_strtod_l+0xa6>
 800dd16:	2b08      	cmp	r3, #8
 800dd18:	d833      	bhi.n	800dd82 <_strtod_l+0xaa>
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d03d      	beq.n	800dd9a <_strtod_l+0xc2>
 800dd1e:	2300      	movs	r3, #0
 800dd20:	9308      	str	r3, [sp, #32]
 800dd22:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800dd24:	7833      	ldrb	r3, [r6, #0]
 800dd26:	2b30      	cmp	r3, #48	; 0x30
 800dd28:	f040 80b0 	bne.w	800de8c <_strtod_l+0x1b4>
 800dd2c:	7873      	ldrb	r3, [r6, #1]
 800dd2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dd32:	2b58      	cmp	r3, #88	; 0x58
 800dd34:	d167      	bne.n	800de06 <_strtod_l+0x12e>
 800dd36:	9b08      	ldr	r3, [sp, #32]
 800dd38:	9301      	str	r3, [sp, #4]
 800dd3a:	ab12      	add	r3, sp, #72	; 0x48
 800dd3c:	9702      	str	r7, [sp, #8]
 800dd3e:	9300      	str	r3, [sp, #0]
 800dd40:	4a8c      	ldr	r2, [pc, #560]	; (800df74 <_strtod_l+0x29c>)
 800dd42:	ab13      	add	r3, sp, #76	; 0x4c
 800dd44:	a911      	add	r1, sp, #68	; 0x44
 800dd46:	4620      	mov	r0, r4
 800dd48:	f000 fdf0 	bl	800e92c <__gethex>
 800dd4c:	f010 0507 	ands.w	r5, r0, #7
 800dd50:	4607      	mov	r7, r0
 800dd52:	d005      	beq.n	800dd60 <_strtod_l+0x88>
 800dd54:	2d06      	cmp	r5, #6
 800dd56:	d12b      	bne.n	800ddb0 <_strtod_l+0xd8>
 800dd58:	3601      	adds	r6, #1
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	9611      	str	r6, [sp, #68]	; 0x44
 800dd5e:	9308      	str	r3, [sp, #32]
 800dd60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f040 854e 	bne.w	800e804 <_strtod_l+0xb2c>
 800dd68:	9b08      	ldr	r3, [sp, #32]
 800dd6a:	b1e3      	cbz	r3, 800dda6 <_strtod_l+0xce>
 800dd6c:	ec49 8b17 	vmov	d7, r8, r9
 800dd70:	eeb1 0b47 	vneg.f64	d0, d7
 800dd74:	b017      	add	sp, #92	; 0x5c
 800dd76:	ecbd 8b0e 	vpop	{d8-d14}
 800dd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7e:	2b20      	cmp	r3, #32
 800dd80:	d1cd      	bne.n	800dd1e <_strtod_l+0x46>
 800dd82:	3201      	adds	r2, #1
 800dd84:	9211      	str	r2, [sp, #68]	; 0x44
 800dd86:	e7bf      	b.n	800dd08 <_strtod_l+0x30>
 800dd88:	2b2d      	cmp	r3, #45	; 0x2d
 800dd8a:	d1c8      	bne.n	800dd1e <_strtod_l+0x46>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	9308      	str	r3, [sp, #32]
 800dd90:	1c53      	adds	r3, r2, #1
 800dd92:	9311      	str	r3, [sp, #68]	; 0x44
 800dd94:	7853      	ldrb	r3, [r2, #1]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1c3      	bne.n	800dd22 <_strtod_l+0x4a>
 800dd9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd9c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f040 852d 	bne.w	800e800 <_strtod_l+0xb28>
 800dda6:	ec49 8b10 	vmov	d0, r8, r9
 800ddaa:	e7e3      	b.n	800dd74 <_strtod_l+0x9c>
 800ddac:	2300      	movs	r3, #0
 800ddae:	e7ee      	b.n	800dd8e <_strtod_l+0xb6>
 800ddb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ddb2:	b13a      	cbz	r2, 800ddc4 <_strtod_l+0xec>
 800ddb4:	2135      	movs	r1, #53	; 0x35
 800ddb6:	a814      	add	r0, sp, #80	; 0x50
 800ddb8:	f001 fd66 	bl	800f888 <__copybits>
 800ddbc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f001 f928 	bl	800f014 <_Bfree>
 800ddc4:	3d01      	subs	r5, #1
 800ddc6:	2d04      	cmp	r5, #4
 800ddc8:	d806      	bhi.n	800ddd8 <_strtod_l+0x100>
 800ddca:	e8df f005 	tbb	[pc, r5]
 800ddce:	030a      	.short	0x030a
 800ddd0:	1714      	.short	0x1714
 800ddd2:	0a          	.byte	0x0a
 800ddd3:	00          	.byte	0x00
 800ddd4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800ddd8:	073f      	lsls	r7, r7, #28
 800ddda:	d5c1      	bpl.n	800dd60 <_strtod_l+0x88>
 800dddc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800dde0:	e7be      	b.n	800dd60 <_strtod_l+0x88>
 800dde2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800dde6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dde8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ddec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ddf0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ddf4:	e7f0      	b.n	800ddd8 <_strtod_l+0x100>
 800ddf6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800df78 <_strtod_l+0x2a0>
 800ddfa:	e7ed      	b.n	800ddd8 <_strtod_l+0x100>
 800ddfc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800de00:	f04f 38ff 	mov.w	r8, #4294967295
 800de04:	e7e8      	b.n	800ddd8 <_strtod_l+0x100>
 800de06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	9211      	str	r2, [sp, #68]	; 0x44
 800de0c:	785b      	ldrb	r3, [r3, #1]
 800de0e:	2b30      	cmp	r3, #48	; 0x30
 800de10:	d0f9      	beq.n	800de06 <_strtod_l+0x12e>
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0a4      	beq.n	800dd60 <_strtod_l+0x88>
 800de16:	2301      	movs	r3, #1
 800de18:	f04f 0a00 	mov.w	sl, #0
 800de1c:	9304      	str	r3, [sp, #16]
 800de1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de20:	930a      	str	r3, [sp, #40]	; 0x28
 800de22:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800de26:	f8cd a018 	str.w	sl, [sp, #24]
 800de2a:	220a      	movs	r2, #10
 800de2c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800de2e:	7807      	ldrb	r7, [r0, #0]
 800de30:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800de34:	b2d9      	uxtb	r1, r3
 800de36:	2909      	cmp	r1, #9
 800de38:	d92a      	bls.n	800de90 <_strtod_l+0x1b8>
 800de3a:	9907      	ldr	r1, [sp, #28]
 800de3c:	462a      	mov	r2, r5
 800de3e:	f001 fd87 	bl	800f950 <strncmp>
 800de42:	2800      	cmp	r0, #0
 800de44:	d033      	beq.n	800deae <_strtod_l+0x1d6>
 800de46:	2000      	movs	r0, #0
 800de48:	9b06      	ldr	r3, [sp, #24]
 800de4a:	463a      	mov	r2, r7
 800de4c:	4601      	mov	r1, r0
 800de4e:	4607      	mov	r7, r0
 800de50:	2a65      	cmp	r2, #101	; 0x65
 800de52:	d001      	beq.n	800de58 <_strtod_l+0x180>
 800de54:	2a45      	cmp	r2, #69	; 0x45
 800de56:	d117      	bne.n	800de88 <_strtod_l+0x1b0>
 800de58:	b91b      	cbnz	r3, 800de62 <_strtod_l+0x18a>
 800de5a:	9b04      	ldr	r3, [sp, #16]
 800de5c:	4303      	orrs	r3, r0
 800de5e:	d09c      	beq.n	800dd9a <_strtod_l+0xc2>
 800de60:	2300      	movs	r3, #0
 800de62:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800de66:	f10b 0201 	add.w	r2, fp, #1
 800de6a:	9211      	str	r2, [sp, #68]	; 0x44
 800de6c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800de70:	2a2b      	cmp	r2, #43	; 0x2b
 800de72:	d071      	beq.n	800df58 <_strtod_l+0x280>
 800de74:	2a2d      	cmp	r2, #45	; 0x2d
 800de76:	d077      	beq.n	800df68 <_strtod_l+0x290>
 800de78:	f04f 0e00 	mov.w	lr, #0
 800de7c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800de80:	2d09      	cmp	r5, #9
 800de82:	d97f      	bls.n	800df84 <_strtod_l+0x2ac>
 800de84:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800de88:	2500      	movs	r5, #0
 800de8a:	e09b      	b.n	800dfc4 <_strtod_l+0x2ec>
 800de8c:	2300      	movs	r3, #0
 800de8e:	e7c3      	b.n	800de18 <_strtod_l+0x140>
 800de90:	9906      	ldr	r1, [sp, #24]
 800de92:	2908      	cmp	r1, #8
 800de94:	bfdd      	ittte	le
 800de96:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800de98:	fb02 3301 	mlale	r3, r2, r1, r3
 800de9c:	9309      	strle	r3, [sp, #36]	; 0x24
 800de9e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800dea2:	9b06      	ldr	r3, [sp, #24]
 800dea4:	3001      	adds	r0, #1
 800dea6:	3301      	adds	r3, #1
 800dea8:	9306      	str	r3, [sp, #24]
 800deaa:	9011      	str	r0, [sp, #68]	; 0x44
 800deac:	e7be      	b.n	800de2c <_strtod_l+0x154>
 800deae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800deb0:	195a      	adds	r2, r3, r5
 800deb2:	9211      	str	r2, [sp, #68]	; 0x44
 800deb4:	5d5a      	ldrb	r2, [r3, r5]
 800deb6:	9b06      	ldr	r3, [sp, #24]
 800deb8:	b3a3      	cbz	r3, 800df24 <_strtod_l+0x24c>
 800deba:	4607      	mov	r7, r0
 800debc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dec0:	2909      	cmp	r1, #9
 800dec2:	d912      	bls.n	800deea <_strtod_l+0x212>
 800dec4:	2101      	movs	r1, #1
 800dec6:	e7c3      	b.n	800de50 <_strtod_l+0x178>
 800dec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800deca:	1c5a      	adds	r2, r3, #1
 800decc:	9211      	str	r2, [sp, #68]	; 0x44
 800dece:	785a      	ldrb	r2, [r3, #1]
 800ded0:	3001      	adds	r0, #1
 800ded2:	2a30      	cmp	r2, #48	; 0x30
 800ded4:	d0f8      	beq.n	800dec8 <_strtod_l+0x1f0>
 800ded6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800deda:	2b08      	cmp	r3, #8
 800dedc:	f200 8497 	bhi.w	800e80e <_strtod_l+0xb36>
 800dee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dee2:	930a      	str	r3, [sp, #40]	; 0x28
 800dee4:	4607      	mov	r7, r0
 800dee6:	2000      	movs	r0, #0
 800dee8:	4603      	mov	r3, r0
 800deea:	3a30      	subs	r2, #48	; 0x30
 800deec:	f100 0101 	add.w	r1, r0, #1
 800def0:	d012      	beq.n	800df18 <_strtod_l+0x240>
 800def2:	440f      	add	r7, r1
 800def4:	eb00 0c03 	add.w	ip, r0, r3
 800def8:	4619      	mov	r1, r3
 800defa:	250a      	movs	r5, #10
 800defc:	4561      	cmp	r1, ip
 800defe:	d113      	bne.n	800df28 <_strtod_l+0x250>
 800df00:	1819      	adds	r1, r3, r0
 800df02:	2908      	cmp	r1, #8
 800df04:	f103 0301 	add.w	r3, r3, #1
 800df08:	4403      	add	r3, r0
 800df0a:	dc1c      	bgt.n	800df46 <_strtod_l+0x26e>
 800df0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df0e:	210a      	movs	r1, #10
 800df10:	fb01 2200 	mla	r2, r1, r0, r2
 800df14:	9209      	str	r2, [sp, #36]	; 0x24
 800df16:	2100      	movs	r1, #0
 800df18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df1a:	1c50      	adds	r0, r2, #1
 800df1c:	9011      	str	r0, [sp, #68]	; 0x44
 800df1e:	7852      	ldrb	r2, [r2, #1]
 800df20:	4608      	mov	r0, r1
 800df22:	e7cb      	b.n	800debc <_strtod_l+0x1e4>
 800df24:	9806      	ldr	r0, [sp, #24]
 800df26:	e7d4      	b.n	800ded2 <_strtod_l+0x1fa>
 800df28:	2908      	cmp	r1, #8
 800df2a:	dc04      	bgt.n	800df36 <_strtod_l+0x25e>
 800df2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800df2e:	436e      	muls	r6, r5
 800df30:	9609      	str	r6, [sp, #36]	; 0x24
 800df32:	3101      	adds	r1, #1
 800df34:	e7e2      	b.n	800defc <_strtod_l+0x224>
 800df36:	f101 0e01 	add.w	lr, r1, #1
 800df3a:	f1be 0f10 	cmp.w	lr, #16
 800df3e:	bfd8      	it	le
 800df40:	fb05 fa0a 	mulle.w	sl, r5, sl
 800df44:	e7f5      	b.n	800df32 <_strtod_l+0x25a>
 800df46:	2b10      	cmp	r3, #16
 800df48:	bfdc      	itt	le
 800df4a:	210a      	movle	r1, #10
 800df4c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800df50:	e7e1      	b.n	800df16 <_strtod_l+0x23e>
 800df52:	2700      	movs	r7, #0
 800df54:	2101      	movs	r1, #1
 800df56:	e780      	b.n	800de5a <_strtod_l+0x182>
 800df58:	f04f 0e00 	mov.w	lr, #0
 800df5c:	f10b 0202 	add.w	r2, fp, #2
 800df60:	9211      	str	r2, [sp, #68]	; 0x44
 800df62:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800df66:	e789      	b.n	800de7c <_strtod_l+0x1a4>
 800df68:	f04f 0e01 	mov.w	lr, #1
 800df6c:	e7f6      	b.n	800df5c <_strtod_l+0x284>
 800df6e:	bf00      	nop
 800df70:	08011198 	.word	0x08011198
 800df74:	080110d0 	.word	0x080110d0
 800df78:	7ff00000 	.word	0x7ff00000
 800df7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df7e:	1c55      	adds	r5, r2, #1
 800df80:	9511      	str	r5, [sp, #68]	; 0x44
 800df82:	7852      	ldrb	r2, [r2, #1]
 800df84:	2a30      	cmp	r2, #48	; 0x30
 800df86:	d0f9      	beq.n	800df7c <_strtod_l+0x2a4>
 800df88:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800df8c:	2d08      	cmp	r5, #8
 800df8e:	f63f af7b 	bhi.w	800de88 <_strtod_l+0x1b0>
 800df92:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800df96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df98:	9207      	str	r2, [sp, #28]
 800df9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df9c:	1c55      	adds	r5, r2, #1
 800df9e:	9511      	str	r5, [sp, #68]	; 0x44
 800dfa0:	7852      	ldrb	r2, [r2, #1]
 800dfa2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800dfa6:	2e09      	cmp	r6, #9
 800dfa8:	d937      	bls.n	800e01a <_strtod_l+0x342>
 800dfaa:	9e07      	ldr	r6, [sp, #28]
 800dfac:	1bad      	subs	r5, r5, r6
 800dfae:	2d08      	cmp	r5, #8
 800dfb0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800dfb4:	dc02      	bgt.n	800dfbc <_strtod_l+0x2e4>
 800dfb6:	4565      	cmp	r5, ip
 800dfb8:	bfa8      	it	ge
 800dfba:	4665      	movge	r5, ip
 800dfbc:	f1be 0f00 	cmp.w	lr, #0
 800dfc0:	d000      	beq.n	800dfc4 <_strtod_l+0x2ec>
 800dfc2:	426d      	negs	r5, r5
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d14d      	bne.n	800e064 <_strtod_l+0x38c>
 800dfc8:	9b04      	ldr	r3, [sp, #16]
 800dfca:	4303      	orrs	r3, r0
 800dfcc:	f47f aec8 	bne.w	800dd60 <_strtod_l+0x88>
 800dfd0:	2900      	cmp	r1, #0
 800dfd2:	f47f aee2 	bne.w	800dd9a <_strtod_l+0xc2>
 800dfd6:	2a69      	cmp	r2, #105	; 0x69
 800dfd8:	d027      	beq.n	800e02a <_strtod_l+0x352>
 800dfda:	dc24      	bgt.n	800e026 <_strtod_l+0x34e>
 800dfdc:	2a49      	cmp	r2, #73	; 0x49
 800dfde:	d024      	beq.n	800e02a <_strtod_l+0x352>
 800dfe0:	2a4e      	cmp	r2, #78	; 0x4e
 800dfe2:	f47f aeda 	bne.w	800dd9a <_strtod_l+0xc2>
 800dfe6:	4996      	ldr	r1, [pc, #600]	; (800e240 <_strtod_l+0x568>)
 800dfe8:	a811      	add	r0, sp, #68	; 0x44
 800dfea:	f000 fef7 	bl	800eddc <__match>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	f43f aed3 	beq.w	800dd9a <_strtod_l+0xc2>
 800dff4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	2b28      	cmp	r3, #40	; 0x28
 800dffa:	d12d      	bne.n	800e058 <_strtod_l+0x380>
 800dffc:	4991      	ldr	r1, [pc, #580]	; (800e244 <_strtod_l+0x56c>)
 800dffe:	aa14      	add	r2, sp, #80	; 0x50
 800e000:	a811      	add	r0, sp, #68	; 0x44
 800e002:	f000 feff 	bl	800ee04 <__hexnan>
 800e006:	2805      	cmp	r0, #5
 800e008:	d126      	bne.n	800e058 <_strtod_l+0x380>
 800e00a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e00c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e010:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e014:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e018:	e6a2      	b.n	800dd60 <_strtod_l+0x88>
 800e01a:	250a      	movs	r5, #10
 800e01c:	fb05 250c 	mla	r5, r5, ip, r2
 800e020:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800e024:	e7b9      	b.n	800df9a <_strtod_l+0x2c2>
 800e026:	2a6e      	cmp	r2, #110	; 0x6e
 800e028:	e7db      	b.n	800dfe2 <_strtod_l+0x30a>
 800e02a:	4987      	ldr	r1, [pc, #540]	; (800e248 <_strtod_l+0x570>)
 800e02c:	a811      	add	r0, sp, #68	; 0x44
 800e02e:	f000 fed5 	bl	800eddc <__match>
 800e032:	2800      	cmp	r0, #0
 800e034:	f43f aeb1 	beq.w	800dd9a <_strtod_l+0xc2>
 800e038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e03a:	4984      	ldr	r1, [pc, #528]	; (800e24c <_strtod_l+0x574>)
 800e03c:	3b01      	subs	r3, #1
 800e03e:	a811      	add	r0, sp, #68	; 0x44
 800e040:	9311      	str	r3, [sp, #68]	; 0x44
 800e042:	f000 fecb 	bl	800eddc <__match>
 800e046:	b910      	cbnz	r0, 800e04e <_strtod_l+0x376>
 800e048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e04a:	3301      	adds	r3, #1
 800e04c:	9311      	str	r3, [sp, #68]	; 0x44
 800e04e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800e260 <_strtod_l+0x588>
 800e052:	f04f 0800 	mov.w	r8, #0
 800e056:	e683      	b.n	800dd60 <_strtod_l+0x88>
 800e058:	487d      	ldr	r0, [pc, #500]	; (800e250 <_strtod_l+0x578>)
 800e05a:	f001 fc71 	bl	800f940 <nan>
 800e05e:	ec59 8b10 	vmov	r8, r9, d0
 800e062:	e67d      	b.n	800dd60 <_strtod_l+0x88>
 800e064:	1bea      	subs	r2, r5, r7
 800e066:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800e06a:	9207      	str	r2, [sp, #28]
 800e06c:	9a06      	ldr	r2, [sp, #24]
 800e06e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e072:	2a00      	cmp	r2, #0
 800e074:	bf08      	it	eq
 800e076:	461a      	moveq	r2, r3
 800e078:	2b10      	cmp	r3, #16
 800e07a:	9206      	str	r2, [sp, #24]
 800e07c:	461a      	mov	r2, r3
 800e07e:	bfa8      	it	ge
 800e080:	2210      	movge	r2, #16
 800e082:	2b09      	cmp	r3, #9
 800e084:	ec59 8b17 	vmov	r8, r9, d7
 800e088:	dd0c      	ble.n	800e0a4 <_strtod_l+0x3cc>
 800e08a:	4972      	ldr	r1, [pc, #456]	; (800e254 <_strtod_l+0x57c>)
 800e08c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e090:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800e094:	ee06 aa90 	vmov	s13, sl
 800e098:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e09c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e0a0:	ec59 8b16 	vmov	r8, r9, d6
 800e0a4:	2b0f      	cmp	r3, #15
 800e0a6:	dc36      	bgt.n	800e116 <_strtod_l+0x43e>
 800e0a8:	9907      	ldr	r1, [sp, #28]
 800e0aa:	2900      	cmp	r1, #0
 800e0ac:	f43f ae58 	beq.w	800dd60 <_strtod_l+0x88>
 800e0b0:	dd23      	ble.n	800e0fa <_strtod_l+0x422>
 800e0b2:	2916      	cmp	r1, #22
 800e0b4:	dc0b      	bgt.n	800e0ce <_strtod_l+0x3f6>
 800e0b6:	4b67      	ldr	r3, [pc, #412]	; (800e254 <_strtod_l+0x57c>)
 800e0b8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e0bc:	ed93 7b00 	vldr	d7, [r3]
 800e0c0:	ec49 8b16 	vmov	d6, r8, r9
 800e0c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e0c8:	ec59 8b17 	vmov	r8, r9, d7
 800e0cc:	e648      	b.n	800dd60 <_strtod_l+0x88>
 800e0ce:	9807      	ldr	r0, [sp, #28]
 800e0d0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800e0d4:	4281      	cmp	r1, r0
 800e0d6:	db1e      	blt.n	800e116 <_strtod_l+0x43e>
 800e0d8:	4a5e      	ldr	r2, [pc, #376]	; (800e254 <_strtod_l+0x57c>)
 800e0da:	f1c3 030f 	rsb	r3, r3, #15
 800e0de:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e0e2:	ed91 7b00 	vldr	d7, [r1]
 800e0e6:	ec49 8b16 	vmov	d6, r8, r9
 800e0ea:	1ac3      	subs	r3, r0, r3
 800e0ec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e0f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e0f4:	ed92 6b00 	vldr	d6, [r2]
 800e0f8:	e7e4      	b.n	800e0c4 <_strtod_l+0x3ec>
 800e0fa:	9907      	ldr	r1, [sp, #28]
 800e0fc:	3116      	adds	r1, #22
 800e0fe:	db0a      	blt.n	800e116 <_strtod_l+0x43e>
 800e100:	4b54      	ldr	r3, [pc, #336]	; (800e254 <_strtod_l+0x57c>)
 800e102:	1b7d      	subs	r5, r7, r5
 800e104:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e108:	ed95 7b00 	vldr	d7, [r5]
 800e10c:	ec49 8b16 	vmov	d6, r8, r9
 800e110:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e114:	e7d8      	b.n	800e0c8 <_strtod_l+0x3f0>
 800e116:	9907      	ldr	r1, [sp, #28]
 800e118:	1a9a      	subs	r2, r3, r2
 800e11a:	440a      	add	r2, r1
 800e11c:	2a00      	cmp	r2, #0
 800e11e:	dd6f      	ble.n	800e200 <_strtod_l+0x528>
 800e120:	f012 000f 	ands.w	r0, r2, #15
 800e124:	d00a      	beq.n	800e13c <_strtod_l+0x464>
 800e126:	494b      	ldr	r1, [pc, #300]	; (800e254 <_strtod_l+0x57c>)
 800e128:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e12c:	ed91 7b00 	vldr	d7, [r1]
 800e130:	ec49 8b16 	vmov	d6, r8, r9
 800e134:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e138:	ec59 8b17 	vmov	r8, r9, d7
 800e13c:	f032 020f 	bics.w	r2, r2, #15
 800e140:	d04f      	beq.n	800e1e2 <_strtod_l+0x50a>
 800e142:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800e146:	dd22      	ble.n	800e18e <_strtod_l+0x4b6>
 800e148:	2500      	movs	r5, #0
 800e14a:	462e      	mov	r6, r5
 800e14c:	9506      	str	r5, [sp, #24]
 800e14e:	462f      	mov	r7, r5
 800e150:	2322      	movs	r3, #34	; 0x22
 800e152:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800e260 <_strtod_l+0x588>
 800e156:	6023      	str	r3, [r4, #0]
 800e158:	f04f 0800 	mov.w	r8, #0
 800e15c:	9b06      	ldr	r3, [sp, #24]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f43f adfe 	beq.w	800dd60 <_strtod_l+0x88>
 800e164:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e166:	4620      	mov	r0, r4
 800e168:	f000 ff54 	bl	800f014 <_Bfree>
 800e16c:	4639      	mov	r1, r7
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 ff50 	bl	800f014 <_Bfree>
 800e174:	4631      	mov	r1, r6
 800e176:	4620      	mov	r0, r4
 800e178:	f000 ff4c 	bl	800f014 <_Bfree>
 800e17c:	9906      	ldr	r1, [sp, #24]
 800e17e:	4620      	mov	r0, r4
 800e180:	f000 ff48 	bl	800f014 <_Bfree>
 800e184:	4629      	mov	r1, r5
 800e186:	4620      	mov	r0, r4
 800e188:	f000 ff44 	bl	800f014 <_Bfree>
 800e18c:	e5e8      	b.n	800dd60 <_strtod_l+0x88>
 800e18e:	2000      	movs	r0, #0
 800e190:	ec49 8b17 	vmov	d7, r8, r9
 800e194:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800e258 <_strtod_l+0x580>
 800e198:	1112      	asrs	r2, r2, #4
 800e19a:	4601      	mov	r1, r0
 800e19c:	2a01      	cmp	r2, #1
 800e19e:	dc23      	bgt.n	800e1e8 <_strtod_l+0x510>
 800e1a0:	b108      	cbz	r0, 800e1a6 <_strtod_l+0x4ce>
 800e1a2:	ec59 8b17 	vmov	r8, r9, d7
 800e1a6:	4a2c      	ldr	r2, [pc, #176]	; (800e258 <_strtod_l+0x580>)
 800e1a8:	482c      	ldr	r0, [pc, #176]	; (800e25c <_strtod_l+0x584>)
 800e1aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e1ae:	ed92 7b00 	vldr	d7, [r2]
 800e1b2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e1b6:	ec49 8b16 	vmov	d6, r8, r9
 800e1ba:	4a29      	ldr	r2, [pc, #164]	; (800e260 <_strtod_l+0x588>)
 800e1bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e1c0:	ee17 1a90 	vmov	r1, s15
 800e1c4:	400a      	ands	r2, r1
 800e1c6:	4282      	cmp	r2, r0
 800e1c8:	ec59 8b17 	vmov	r8, r9, d7
 800e1cc:	d8bc      	bhi.n	800e148 <_strtod_l+0x470>
 800e1ce:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800e1d2:	4282      	cmp	r2, r0
 800e1d4:	bf86      	itte	hi
 800e1d6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800e264 <_strtod_l+0x58c>
 800e1da:	f04f 38ff 	movhi.w	r8, #4294967295
 800e1de:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	9204      	str	r2, [sp, #16]
 800e1e6:	e078      	b.n	800e2da <_strtod_l+0x602>
 800e1e8:	07d6      	lsls	r6, r2, #31
 800e1ea:	d504      	bpl.n	800e1f6 <_strtod_l+0x51e>
 800e1ec:	ed9c 6b00 	vldr	d6, [ip]
 800e1f0:	2001      	movs	r0, #1
 800e1f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e1f6:	3101      	adds	r1, #1
 800e1f8:	1052      	asrs	r2, r2, #1
 800e1fa:	f10c 0c08 	add.w	ip, ip, #8
 800e1fe:	e7cd      	b.n	800e19c <_strtod_l+0x4c4>
 800e200:	d0ef      	beq.n	800e1e2 <_strtod_l+0x50a>
 800e202:	4252      	negs	r2, r2
 800e204:	f012 000f 	ands.w	r0, r2, #15
 800e208:	d00a      	beq.n	800e220 <_strtod_l+0x548>
 800e20a:	4912      	ldr	r1, [pc, #72]	; (800e254 <_strtod_l+0x57c>)
 800e20c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e210:	ed91 7b00 	vldr	d7, [r1]
 800e214:	ec49 8b16 	vmov	d6, r8, r9
 800e218:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e21c:	ec59 8b17 	vmov	r8, r9, d7
 800e220:	1112      	asrs	r2, r2, #4
 800e222:	d0de      	beq.n	800e1e2 <_strtod_l+0x50a>
 800e224:	2a1f      	cmp	r2, #31
 800e226:	dd1f      	ble.n	800e268 <_strtod_l+0x590>
 800e228:	2500      	movs	r5, #0
 800e22a:	462e      	mov	r6, r5
 800e22c:	9506      	str	r5, [sp, #24]
 800e22e:	462f      	mov	r7, r5
 800e230:	2322      	movs	r3, #34	; 0x22
 800e232:	f04f 0800 	mov.w	r8, #0
 800e236:	f04f 0900 	mov.w	r9, #0
 800e23a:	6023      	str	r3, [r4, #0]
 800e23c:	e78e      	b.n	800e15c <_strtod_l+0x484>
 800e23e:	bf00      	nop
 800e240:	080110cd 	.word	0x080110cd
 800e244:	080110e4 	.word	0x080110e4
 800e248:	080110c4 	.word	0x080110c4
 800e24c:	080110c7 	.word	0x080110c7
 800e250:	08011357 	.word	0x08011357
 800e254:	08011248 	.word	0x08011248
 800e258:	08011220 	.word	0x08011220
 800e25c:	7ca00000 	.word	0x7ca00000
 800e260:	7ff00000 	.word	0x7ff00000
 800e264:	7fefffff 	.word	0x7fefffff
 800e268:	f012 0110 	ands.w	r1, r2, #16
 800e26c:	bf18      	it	ne
 800e26e:	216a      	movne	r1, #106	; 0x6a
 800e270:	9104      	str	r1, [sp, #16]
 800e272:	ec49 8b17 	vmov	d7, r8, r9
 800e276:	49be      	ldr	r1, [pc, #760]	; (800e570 <_strtod_l+0x898>)
 800e278:	2000      	movs	r0, #0
 800e27a:	07d6      	lsls	r6, r2, #31
 800e27c:	d504      	bpl.n	800e288 <_strtod_l+0x5b0>
 800e27e:	ed91 6b00 	vldr	d6, [r1]
 800e282:	2001      	movs	r0, #1
 800e284:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e288:	1052      	asrs	r2, r2, #1
 800e28a:	f101 0108 	add.w	r1, r1, #8
 800e28e:	d1f4      	bne.n	800e27a <_strtod_l+0x5a2>
 800e290:	b108      	cbz	r0, 800e296 <_strtod_l+0x5be>
 800e292:	ec59 8b17 	vmov	r8, r9, d7
 800e296:	9a04      	ldr	r2, [sp, #16]
 800e298:	b1c2      	cbz	r2, 800e2cc <_strtod_l+0x5f4>
 800e29a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800e29e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800e2a2:	2a00      	cmp	r2, #0
 800e2a4:	4648      	mov	r0, r9
 800e2a6:	dd11      	ble.n	800e2cc <_strtod_l+0x5f4>
 800e2a8:	2a1f      	cmp	r2, #31
 800e2aa:	f340 812e 	ble.w	800e50a <_strtod_l+0x832>
 800e2ae:	2a34      	cmp	r2, #52	; 0x34
 800e2b0:	bfde      	ittt	le
 800e2b2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800e2b6:	f04f 32ff 	movle.w	r2, #4294967295
 800e2ba:	fa02 f101 	lslle.w	r1, r2, r1
 800e2be:	f04f 0800 	mov.w	r8, #0
 800e2c2:	bfcc      	ite	gt
 800e2c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e2c8:	ea01 0900 	andle.w	r9, r1, r0
 800e2cc:	ec49 8b17 	vmov	d7, r8, r9
 800e2d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d8:	d0a6      	beq.n	800e228 <_strtod_l+0x550>
 800e2da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2dc:	9200      	str	r2, [sp, #0]
 800e2de:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e2e0:	9a06      	ldr	r2, [sp, #24]
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f000 fefe 	bl	800f0e4 <__s2b>
 800e2e8:	9006      	str	r0, [sp, #24]
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	f43f af2c 	beq.w	800e148 <_strtod_l+0x470>
 800e2f0:	9b07      	ldr	r3, [sp, #28]
 800e2f2:	1b7d      	subs	r5, r7, r5
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	bfb4      	ite	lt
 800e2f8:	462b      	movlt	r3, r5
 800e2fa:	2300      	movge	r3, #0
 800e2fc:	9309      	str	r3, [sp, #36]	; 0x24
 800e2fe:	9b07      	ldr	r3, [sp, #28]
 800e300:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800e550 <_strtod_l+0x878>
 800e304:	ed9f ab94 	vldr	d10, [pc, #592]	; 800e558 <_strtod_l+0x880>
 800e308:	ed9f bb95 	vldr	d11, [pc, #596]	; 800e560 <_strtod_l+0x888>
 800e30c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e310:	2500      	movs	r5, #0
 800e312:	930c      	str	r3, [sp, #48]	; 0x30
 800e314:	462e      	mov	r6, r5
 800e316:	9b06      	ldr	r3, [sp, #24]
 800e318:	4620      	mov	r0, r4
 800e31a:	6859      	ldr	r1, [r3, #4]
 800e31c:	f000 fe3a 	bl	800ef94 <_Balloc>
 800e320:	4607      	mov	r7, r0
 800e322:	2800      	cmp	r0, #0
 800e324:	f43f af14 	beq.w	800e150 <_strtod_l+0x478>
 800e328:	9b06      	ldr	r3, [sp, #24]
 800e32a:	691a      	ldr	r2, [r3, #16]
 800e32c:	3202      	adds	r2, #2
 800e32e:	f103 010c 	add.w	r1, r3, #12
 800e332:	0092      	lsls	r2, r2, #2
 800e334:	300c      	adds	r0, #12
 800e336:	f000 fe13 	bl	800ef60 <memcpy>
 800e33a:	ec49 8b10 	vmov	d0, r8, r9
 800e33e:	aa14      	add	r2, sp, #80	; 0x50
 800e340:	a913      	add	r1, sp, #76	; 0x4c
 800e342:	4620      	mov	r0, r4
 800e344:	f001 fa14 	bl	800f770 <__d2b>
 800e348:	ec49 8b18 	vmov	d8, r8, r9
 800e34c:	9012      	str	r0, [sp, #72]	; 0x48
 800e34e:	2800      	cmp	r0, #0
 800e350:	f43f aefe 	beq.w	800e150 <_strtod_l+0x478>
 800e354:	2101      	movs	r1, #1
 800e356:	4620      	mov	r0, r4
 800e358:	f000 ff5e 	bl	800f218 <__i2b>
 800e35c:	4606      	mov	r6, r0
 800e35e:	2800      	cmp	r0, #0
 800e360:	f43f aef6 	beq.w	800e150 <_strtod_l+0x478>
 800e364:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e366:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e368:	2b00      	cmp	r3, #0
 800e36a:	bfab      	itete	ge
 800e36c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800e36e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800e370:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800e374:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800e378:	bfac      	ite	ge
 800e37a:	eb03 0b02 	addge.w	fp, r3, r2
 800e37e:	eba2 0a03 	sublt.w	sl, r2, r3
 800e382:	9a04      	ldr	r2, [sp, #16]
 800e384:	1a9b      	subs	r3, r3, r2
 800e386:	440b      	add	r3, r1
 800e388:	4a7a      	ldr	r2, [pc, #488]	; (800e574 <_strtod_l+0x89c>)
 800e38a:	3b01      	subs	r3, #1
 800e38c:	4293      	cmp	r3, r2
 800e38e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800e392:	f280 80cd 	bge.w	800e530 <_strtod_l+0x858>
 800e396:	1ad2      	subs	r2, r2, r3
 800e398:	2a1f      	cmp	r2, #31
 800e39a:	eba1 0102 	sub.w	r1, r1, r2
 800e39e:	f04f 0001 	mov.w	r0, #1
 800e3a2:	f300 80b9 	bgt.w	800e518 <_strtod_l+0x840>
 800e3a6:	fa00 f302 	lsl.w	r3, r0, r2
 800e3aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800e3b0:	eb0b 0301 	add.w	r3, fp, r1
 800e3b4:	9a04      	ldr	r2, [sp, #16]
 800e3b6:	459b      	cmp	fp, r3
 800e3b8:	448a      	add	sl, r1
 800e3ba:	4492      	add	sl, r2
 800e3bc:	465a      	mov	r2, fp
 800e3be:	bfa8      	it	ge
 800e3c0:	461a      	movge	r2, r3
 800e3c2:	4552      	cmp	r2, sl
 800e3c4:	bfa8      	it	ge
 800e3c6:	4652      	movge	r2, sl
 800e3c8:	2a00      	cmp	r2, #0
 800e3ca:	bfc2      	ittt	gt
 800e3cc:	1a9b      	subgt	r3, r3, r2
 800e3ce:	ebaa 0a02 	subgt.w	sl, sl, r2
 800e3d2:	ebab 0b02 	subgt.w	fp, fp, r2
 800e3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3d8:	2a00      	cmp	r2, #0
 800e3da:	dd18      	ble.n	800e40e <_strtod_l+0x736>
 800e3dc:	4631      	mov	r1, r6
 800e3de:	4620      	mov	r0, r4
 800e3e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3e2:	f000 ffd9 	bl	800f398 <__pow5mult>
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	f43f aeb1 	beq.w	800e150 <_strtod_l+0x478>
 800e3ee:	4601      	mov	r1, r0
 800e3f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f000 ff26 	bl	800f244 <__multiply>
 800e3f8:	900e      	str	r0, [sp, #56]	; 0x38
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	f43f aea8 	beq.w	800e150 <_strtod_l+0x478>
 800e400:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e402:	4620      	mov	r0, r4
 800e404:	f000 fe06 	bl	800f014 <_Bfree>
 800e408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e40a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e40c:	9212      	str	r2, [sp, #72]	; 0x48
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f300 8093 	bgt.w	800e53a <_strtod_l+0x862>
 800e414:	9b07      	ldr	r3, [sp, #28]
 800e416:	2b00      	cmp	r3, #0
 800e418:	dd08      	ble.n	800e42c <_strtod_l+0x754>
 800e41a:	4639      	mov	r1, r7
 800e41c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e41e:	4620      	mov	r0, r4
 800e420:	f000 ffba 	bl	800f398 <__pow5mult>
 800e424:	4607      	mov	r7, r0
 800e426:	2800      	cmp	r0, #0
 800e428:	f43f ae92 	beq.w	800e150 <_strtod_l+0x478>
 800e42c:	f1ba 0f00 	cmp.w	sl, #0
 800e430:	dd08      	ble.n	800e444 <_strtod_l+0x76c>
 800e432:	4639      	mov	r1, r7
 800e434:	4652      	mov	r2, sl
 800e436:	4620      	mov	r0, r4
 800e438:	f001 f808 	bl	800f44c <__lshift>
 800e43c:	4607      	mov	r7, r0
 800e43e:	2800      	cmp	r0, #0
 800e440:	f43f ae86 	beq.w	800e150 <_strtod_l+0x478>
 800e444:	f1bb 0f00 	cmp.w	fp, #0
 800e448:	dd08      	ble.n	800e45c <_strtod_l+0x784>
 800e44a:	4631      	mov	r1, r6
 800e44c:	465a      	mov	r2, fp
 800e44e:	4620      	mov	r0, r4
 800e450:	f000 fffc 	bl	800f44c <__lshift>
 800e454:	4606      	mov	r6, r0
 800e456:	2800      	cmp	r0, #0
 800e458:	f43f ae7a 	beq.w	800e150 <_strtod_l+0x478>
 800e45c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e45e:	463a      	mov	r2, r7
 800e460:	4620      	mov	r0, r4
 800e462:	f001 f87f 	bl	800f564 <__mdiff>
 800e466:	4605      	mov	r5, r0
 800e468:	2800      	cmp	r0, #0
 800e46a:	f43f ae71 	beq.w	800e150 <_strtod_l+0x478>
 800e46e:	2300      	movs	r3, #0
 800e470:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800e474:	60c3      	str	r3, [r0, #12]
 800e476:	4631      	mov	r1, r6
 800e478:	f001 f858 	bl	800f52c <__mcmp>
 800e47c:	2800      	cmp	r0, #0
 800e47e:	da7d      	bge.n	800e57c <_strtod_l+0x8a4>
 800e480:	ea5a 0308 	orrs.w	r3, sl, r8
 800e484:	f040 80a3 	bne.w	800e5ce <_strtod_l+0x8f6>
 800e488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f040 809e 	bne.w	800e5ce <_strtod_l+0x8f6>
 800e492:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e496:	0d1b      	lsrs	r3, r3, #20
 800e498:	051b      	lsls	r3, r3, #20
 800e49a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e49e:	f240 8096 	bls.w	800e5ce <_strtod_l+0x8f6>
 800e4a2:	696b      	ldr	r3, [r5, #20]
 800e4a4:	b91b      	cbnz	r3, 800e4ae <_strtod_l+0x7d6>
 800e4a6:	692b      	ldr	r3, [r5, #16]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	f340 8090 	ble.w	800e5ce <_strtod_l+0x8f6>
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	f000 ffca 	bl	800f44c <__lshift>
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	4605      	mov	r5, r0
 800e4bc:	f001 f836 	bl	800f52c <__mcmp>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	f340 8084 	ble.w	800e5ce <_strtod_l+0x8f6>
 800e4c6:	9904      	ldr	r1, [sp, #16]
 800e4c8:	4a2b      	ldr	r2, [pc, #172]	; (800e578 <_strtod_l+0x8a0>)
 800e4ca:	464b      	mov	r3, r9
 800e4cc:	2900      	cmp	r1, #0
 800e4ce:	f000 809d 	beq.w	800e60c <_strtod_l+0x934>
 800e4d2:	ea02 0109 	and.w	r1, r2, r9
 800e4d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e4da:	f300 8097 	bgt.w	800e60c <_strtod_l+0x934>
 800e4de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e4e2:	f77f aea5 	ble.w	800e230 <_strtod_l+0x558>
 800e4e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e568 <_strtod_l+0x890>
 800e4ea:	ec49 8b16 	vmov	d6, r8, r9
 800e4ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e4f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e4f6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	bf08      	it	eq
 800e4fe:	2322      	moveq	r3, #34	; 0x22
 800e500:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e504:	bf08      	it	eq
 800e506:	6023      	streq	r3, [r4, #0]
 800e508:	e62c      	b.n	800e164 <_strtod_l+0x48c>
 800e50a:	f04f 31ff 	mov.w	r1, #4294967295
 800e50e:	fa01 f202 	lsl.w	r2, r1, r2
 800e512:	ea02 0808 	and.w	r8, r2, r8
 800e516:	e6d9      	b.n	800e2cc <_strtod_l+0x5f4>
 800e518:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800e51c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e520:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800e524:	33e2      	adds	r3, #226	; 0xe2
 800e526:	fa00 f303 	lsl.w	r3, r0, r3
 800e52a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800e52e:	e73f      	b.n	800e3b0 <_strtod_l+0x6d8>
 800e530:	2200      	movs	r2, #0
 800e532:	2301      	movs	r3, #1
 800e534:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e538:	e73a      	b.n	800e3b0 <_strtod_l+0x6d8>
 800e53a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e53c:	461a      	mov	r2, r3
 800e53e:	4620      	mov	r0, r4
 800e540:	f000 ff84 	bl	800f44c <__lshift>
 800e544:	9012      	str	r0, [sp, #72]	; 0x48
 800e546:	2800      	cmp	r0, #0
 800e548:	f47f af64 	bne.w	800e414 <_strtod_l+0x73c>
 800e54c:	e600      	b.n	800e150 <_strtod_l+0x478>
 800e54e:	bf00      	nop
 800e550:	94a03595 	.word	0x94a03595
 800e554:	3fcfffff 	.word	0x3fcfffff
 800e558:	94a03595 	.word	0x94a03595
 800e55c:	3fdfffff 	.word	0x3fdfffff
 800e560:	35afe535 	.word	0x35afe535
 800e564:	3fe00000 	.word	0x3fe00000
 800e568:	00000000 	.word	0x00000000
 800e56c:	39500000 	.word	0x39500000
 800e570:	080110f8 	.word	0x080110f8
 800e574:	fffffc02 	.word	0xfffffc02
 800e578:	7ff00000 	.word	0x7ff00000
 800e57c:	46cb      	mov	fp, r9
 800e57e:	d15f      	bne.n	800e640 <_strtod_l+0x968>
 800e580:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e584:	f1ba 0f00 	cmp.w	sl, #0
 800e588:	d02a      	beq.n	800e5e0 <_strtod_l+0x908>
 800e58a:	4aa7      	ldr	r2, [pc, #668]	; (800e828 <_strtod_l+0xb50>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d12b      	bne.n	800e5e8 <_strtod_l+0x910>
 800e590:	9b04      	ldr	r3, [sp, #16]
 800e592:	4642      	mov	r2, r8
 800e594:	b1fb      	cbz	r3, 800e5d6 <_strtod_l+0x8fe>
 800e596:	4ba5      	ldr	r3, [pc, #660]	; (800e82c <_strtod_l+0xb54>)
 800e598:	ea09 0303 	and.w	r3, r9, r3
 800e59c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e5a0:	f04f 31ff 	mov.w	r1, #4294967295
 800e5a4:	d81a      	bhi.n	800e5dc <_strtod_l+0x904>
 800e5a6:	0d1b      	lsrs	r3, r3, #20
 800e5a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e5ac:	fa01 f303 	lsl.w	r3, r1, r3
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d119      	bne.n	800e5e8 <_strtod_l+0x910>
 800e5b4:	4b9e      	ldr	r3, [pc, #632]	; (800e830 <_strtod_l+0xb58>)
 800e5b6:	459b      	cmp	fp, r3
 800e5b8:	d102      	bne.n	800e5c0 <_strtod_l+0x8e8>
 800e5ba:	3201      	adds	r2, #1
 800e5bc:	f43f adc8 	beq.w	800e150 <_strtod_l+0x478>
 800e5c0:	4b9a      	ldr	r3, [pc, #616]	; (800e82c <_strtod_l+0xb54>)
 800e5c2:	ea0b 0303 	and.w	r3, fp, r3
 800e5c6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e5ca:	f04f 0800 	mov.w	r8, #0
 800e5ce:	9b04      	ldr	r3, [sp, #16]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d188      	bne.n	800e4e6 <_strtod_l+0x80e>
 800e5d4:	e5c6      	b.n	800e164 <_strtod_l+0x48c>
 800e5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5da:	e7e9      	b.n	800e5b0 <_strtod_l+0x8d8>
 800e5dc:	460b      	mov	r3, r1
 800e5de:	e7e7      	b.n	800e5b0 <_strtod_l+0x8d8>
 800e5e0:	ea53 0308 	orrs.w	r3, r3, r8
 800e5e4:	f43f af6f 	beq.w	800e4c6 <_strtod_l+0x7ee>
 800e5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ea:	b1cb      	cbz	r3, 800e620 <_strtod_l+0x948>
 800e5ec:	ea13 0f0b 	tst.w	r3, fp
 800e5f0:	d0ed      	beq.n	800e5ce <_strtod_l+0x8f6>
 800e5f2:	9a04      	ldr	r2, [sp, #16]
 800e5f4:	4640      	mov	r0, r8
 800e5f6:	4649      	mov	r1, r9
 800e5f8:	f1ba 0f00 	cmp.w	sl, #0
 800e5fc:	d014      	beq.n	800e628 <_strtod_l+0x950>
 800e5fe:	f7ff fb4f 	bl	800dca0 <sulp>
 800e602:	ee38 7b00 	vadd.f64	d7, d8, d0
 800e606:	ec59 8b17 	vmov	r8, r9, d7
 800e60a:	e7e0      	b.n	800e5ce <_strtod_l+0x8f6>
 800e60c:	4013      	ands	r3, r2
 800e60e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e612:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e616:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e61a:	f04f 38ff 	mov.w	r8, #4294967295
 800e61e:	e7d6      	b.n	800e5ce <_strtod_l+0x8f6>
 800e620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e622:	ea13 0f08 	tst.w	r3, r8
 800e626:	e7e3      	b.n	800e5f0 <_strtod_l+0x918>
 800e628:	f7ff fb3a 	bl	800dca0 <sulp>
 800e62c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800e630:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e638:	ec59 8b10 	vmov	r8, r9, d0
 800e63c:	d1c7      	bne.n	800e5ce <_strtod_l+0x8f6>
 800e63e:	e5f7      	b.n	800e230 <_strtod_l+0x558>
 800e640:	4631      	mov	r1, r6
 800e642:	4628      	mov	r0, r5
 800e644:	f001 f8f0 	bl	800f828 <__ratio>
 800e648:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e64c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e654:	d865      	bhi.n	800e722 <_strtod_l+0xa4a>
 800e656:	f1ba 0f00 	cmp.w	sl, #0
 800e65a:	d042      	beq.n	800e6e2 <_strtod_l+0xa0a>
 800e65c:	4b75      	ldr	r3, [pc, #468]	; (800e834 <_strtod_l+0xb5c>)
 800e65e:	2200      	movs	r2, #0
 800e660:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800e664:	4871      	ldr	r0, [pc, #452]	; (800e82c <_strtod_l+0xb54>)
 800e666:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800e840 <_strtod_l+0xb68>
 800e66a:	ea0b 0100 	and.w	r1, fp, r0
 800e66e:	4561      	cmp	r1, ip
 800e670:	f040 808e 	bne.w	800e790 <_strtod_l+0xab8>
 800e674:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800e678:	ec49 8b10 	vmov	d0, r8, r9
 800e67c:	ec43 2b1c 	vmov	d12, r2, r3
 800e680:	910a      	str	r1, [sp, #40]	; 0x28
 800e682:	f000 fff9 	bl	800f678 <__ulp>
 800e686:	ec49 8b1e 	vmov	d14, r8, r9
 800e68a:	4868      	ldr	r0, [pc, #416]	; (800e82c <_strtod_l+0xb54>)
 800e68c:	eeac eb00 	vfma.f64	d14, d12, d0
 800e690:	ee1e 3a90 	vmov	r3, s29
 800e694:	4a68      	ldr	r2, [pc, #416]	; (800e838 <_strtod_l+0xb60>)
 800e696:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e698:	4018      	ands	r0, r3
 800e69a:	4290      	cmp	r0, r2
 800e69c:	ec59 8b1e 	vmov	r8, r9, d14
 800e6a0:	d94e      	bls.n	800e740 <_strtod_l+0xa68>
 800e6a2:	ee18 3a90 	vmov	r3, s17
 800e6a6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d104      	bne.n	800e6b8 <_strtod_l+0x9e0>
 800e6ae:	ee18 3a10 	vmov	r3, s16
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	f43f ad4c 	beq.w	800e150 <_strtod_l+0x478>
 800e6b8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800e830 <_strtod_l+0xb58>
 800e6bc:	f04f 38ff 	mov.w	r8, #4294967295
 800e6c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	f000 fca6 	bl	800f014 <_Bfree>
 800e6c8:	4639      	mov	r1, r7
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f000 fca2 	bl	800f014 <_Bfree>
 800e6d0:	4631      	mov	r1, r6
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f000 fc9e 	bl	800f014 <_Bfree>
 800e6d8:	4629      	mov	r1, r5
 800e6da:	4620      	mov	r0, r4
 800e6dc:	f000 fc9a 	bl	800f014 <_Bfree>
 800e6e0:	e619      	b.n	800e316 <_strtod_l+0x63e>
 800e6e2:	f1b8 0f00 	cmp.w	r8, #0
 800e6e6:	d112      	bne.n	800e70e <_strtod_l+0xa36>
 800e6e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6ec:	b9b3      	cbnz	r3, 800e71c <_strtod_l+0xa44>
 800e6ee:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e6f2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6fa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800e6fe:	bf58      	it	pl
 800e700:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800e704:	eeb1 7b4d 	vneg.f64	d7, d13
 800e708:	ec53 2b17 	vmov	r2, r3, d7
 800e70c:	e7aa      	b.n	800e664 <_strtod_l+0x98c>
 800e70e:	f1b8 0f01 	cmp.w	r8, #1
 800e712:	d103      	bne.n	800e71c <_strtod_l+0xa44>
 800e714:	f1b9 0f00 	cmp.w	r9, #0
 800e718:	f43f ad8a 	beq.w	800e230 <_strtod_l+0x558>
 800e71c:	4b47      	ldr	r3, [pc, #284]	; (800e83c <_strtod_l+0xb64>)
 800e71e:	2200      	movs	r2, #0
 800e720:	e79e      	b.n	800e660 <_strtod_l+0x988>
 800e722:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800e726:	ee20 db0d 	vmul.f64	d13, d0, d13
 800e72a:	f1ba 0f00 	cmp.w	sl, #0
 800e72e:	d104      	bne.n	800e73a <_strtod_l+0xa62>
 800e730:	eeb1 7b4d 	vneg.f64	d7, d13
 800e734:	ec53 2b17 	vmov	r2, r3, d7
 800e738:	e794      	b.n	800e664 <_strtod_l+0x98c>
 800e73a:	eeb0 7b4d 	vmov.f64	d7, d13
 800e73e:	e7f9      	b.n	800e734 <_strtod_l+0xa5c>
 800e740:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e744:	9b04      	ldr	r3, [sp, #16]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d1ba      	bne.n	800e6c0 <_strtod_l+0x9e8>
 800e74a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e74e:	0d1b      	lsrs	r3, r3, #20
 800e750:	051b      	lsls	r3, r3, #20
 800e752:	4299      	cmp	r1, r3
 800e754:	d1b4      	bne.n	800e6c0 <_strtod_l+0x9e8>
 800e756:	ec51 0b1d 	vmov	r0, r1, d13
 800e75a:	f7f1 ffed 	bl	8000738 <__aeabi_d2lz>
 800e75e:	f7f1 ffa5 	bl	80006ac <__aeabi_l2d>
 800e762:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e766:	ec41 0b17 	vmov	d7, r0, r1
 800e76a:	ea43 0308 	orr.w	r3, r3, r8
 800e76e:	ea53 030a 	orrs.w	r3, r3, sl
 800e772:	ee3d db47 	vsub.f64	d13, d13, d7
 800e776:	d03c      	beq.n	800e7f2 <_strtod_l+0xb1a>
 800e778:	eeb4 dbca 	vcmpe.f64	d13, d10
 800e77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e780:	f53f acf0 	bmi.w	800e164 <_strtod_l+0x48c>
 800e784:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800e788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78c:	dd98      	ble.n	800e6c0 <_strtod_l+0x9e8>
 800e78e:	e4e9      	b.n	800e164 <_strtod_l+0x48c>
 800e790:	9804      	ldr	r0, [sp, #16]
 800e792:	b1f0      	cbz	r0, 800e7d2 <_strtod_l+0xafa>
 800e794:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800e798:	d81b      	bhi.n	800e7d2 <_strtod_l+0xafa>
 800e79a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e820 <_strtod_l+0xb48>
 800e79e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800e7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a6:	d811      	bhi.n	800e7cc <_strtod_l+0xaf4>
 800e7a8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800e7ac:	ee1d 3a10 	vmov	r3, s26
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	bf38      	it	cc
 800e7b4:	2301      	movcc	r3, #1
 800e7b6:	ee0d 3a10 	vmov	s26, r3
 800e7ba:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800e7be:	f1ba 0f00 	cmp.w	sl, #0
 800e7c2:	d113      	bne.n	800e7ec <_strtod_l+0xb14>
 800e7c4:	eeb1 7b4d 	vneg.f64	d7, d13
 800e7c8:	ec53 2b17 	vmov	r2, r3, d7
 800e7cc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800e7d0:	1a43      	subs	r3, r0, r1
 800e7d2:	eeb0 0b48 	vmov.f64	d0, d8
 800e7d6:	ec43 2b1c 	vmov	d12, r2, r3
 800e7da:	910a      	str	r1, [sp, #40]	; 0x28
 800e7dc:	f000 ff4c 	bl	800f678 <__ulp>
 800e7e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e7e2:	eeac 8b00 	vfma.f64	d8, d12, d0
 800e7e6:	ec59 8b18 	vmov	r8, r9, d8
 800e7ea:	e7ab      	b.n	800e744 <_strtod_l+0xa6c>
 800e7ec:	eeb0 7b4d 	vmov.f64	d7, d13
 800e7f0:	e7ea      	b.n	800e7c8 <_strtod_l+0xaf0>
 800e7f2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800e7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fa:	f57f af61 	bpl.w	800e6c0 <_strtod_l+0x9e8>
 800e7fe:	e4b1      	b.n	800e164 <_strtod_l+0x48c>
 800e800:	2300      	movs	r3, #0
 800e802:	9308      	str	r3, [sp, #32]
 800e804:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e808:	6013      	str	r3, [r2, #0]
 800e80a:	f7ff baad 	b.w	800dd68 <_strtod_l+0x90>
 800e80e:	2a65      	cmp	r2, #101	; 0x65
 800e810:	f43f ab9f 	beq.w	800df52 <_strtod_l+0x27a>
 800e814:	2a45      	cmp	r2, #69	; 0x45
 800e816:	f43f ab9c 	beq.w	800df52 <_strtod_l+0x27a>
 800e81a:	2101      	movs	r1, #1
 800e81c:	f7ff bbd4 	b.w	800dfc8 <_strtod_l+0x2f0>
 800e820:	ffc00000 	.word	0xffc00000
 800e824:	41dfffff 	.word	0x41dfffff
 800e828:	000fffff 	.word	0x000fffff
 800e82c:	7ff00000 	.word	0x7ff00000
 800e830:	7fefffff 	.word	0x7fefffff
 800e834:	3ff00000 	.word	0x3ff00000
 800e838:	7c9fffff 	.word	0x7c9fffff
 800e83c:	bff00000 	.word	0xbff00000
 800e840:	7fe00000 	.word	0x7fe00000

0800e844 <strtod>:
 800e844:	460a      	mov	r2, r1
 800e846:	4601      	mov	r1, r0
 800e848:	4802      	ldr	r0, [pc, #8]	; (800e854 <strtod+0x10>)
 800e84a:	4b03      	ldr	r3, [pc, #12]	; (800e858 <strtod+0x14>)
 800e84c:	6800      	ldr	r0, [r0, #0]
 800e84e:	f7ff ba43 	b.w	800dcd8 <_strtod_l>
 800e852:	bf00      	nop
 800e854:	24000074 	.word	0x24000074
 800e858:	240000dc 	.word	0x240000dc

0800e85c <rshift>:
 800e85c:	6903      	ldr	r3, [r0, #16]
 800e85e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e862:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e866:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e86a:	f100 0414 	add.w	r4, r0, #20
 800e86e:	dd45      	ble.n	800e8fc <rshift+0xa0>
 800e870:	f011 011f 	ands.w	r1, r1, #31
 800e874:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e878:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e87c:	d10c      	bne.n	800e898 <rshift+0x3c>
 800e87e:	f100 0710 	add.w	r7, r0, #16
 800e882:	4629      	mov	r1, r5
 800e884:	42b1      	cmp	r1, r6
 800e886:	d334      	bcc.n	800e8f2 <rshift+0x96>
 800e888:	1a9b      	subs	r3, r3, r2
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	1eea      	subs	r2, r5, #3
 800e88e:	4296      	cmp	r6, r2
 800e890:	bf38      	it	cc
 800e892:	2300      	movcc	r3, #0
 800e894:	4423      	add	r3, r4
 800e896:	e015      	b.n	800e8c4 <rshift+0x68>
 800e898:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e89c:	f1c1 0820 	rsb	r8, r1, #32
 800e8a0:	40cf      	lsrs	r7, r1
 800e8a2:	f105 0e04 	add.w	lr, r5, #4
 800e8a6:	46a1      	mov	r9, r4
 800e8a8:	4576      	cmp	r6, lr
 800e8aa:	46f4      	mov	ip, lr
 800e8ac:	d815      	bhi.n	800e8da <rshift+0x7e>
 800e8ae:	1a9a      	subs	r2, r3, r2
 800e8b0:	0092      	lsls	r2, r2, #2
 800e8b2:	3a04      	subs	r2, #4
 800e8b4:	3501      	adds	r5, #1
 800e8b6:	42ae      	cmp	r6, r5
 800e8b8:	bf38      	it	cc
 800e8ba:	2200      	movcc	r2, #0
 800e8bc:	18a3      	adds	r3, r4, r2
 800e8be:	50a7      	str	r7, [r4, r2]
 800e8c0:	b107      	cbz	r7, 800e8c4 <rshift+0x68>
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	1b1a      	subs	r2, r3, r4
 800e8c6:	42a3      	cmp	r3, r4
 800e8c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e8cc:	bf08      	it	eq
 800e8ce:	2300      	moveq	r3, #0
 800e8d0:	6102      	str	r2, [r0, #16]
 800e8d2:	bf08      	it	eq
 800e8d4:	6143      	streq	r3, [r0, #20]
 800e8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8da:	f8dc c000 	ldr.w	ip, [ip]
 800e8de:	fa0c fc08 	lsl.w	ip, ip, r8
 800e8e2:	ea4c 0707 	orr.w	r7, ip, r7
 800e8e6:	f849 7b04 	str.w	r7, [r9], #4
 800e8ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e8ee:	40cf      	lsrs	r7, r1
 800e8f0:	e7da      	b.n	800e8a8 <rshift+0x4c>
 800e8f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e8f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e8fa:	e7c3      	b.n	800e884 <rshift+0x28>
 800e8fc:	4623      	mov	r3, r4
 800e8fe:	e7e1      	b.n	800e8c4 <rshift+0x68>

0800e900 <__hexdig_fun>:
 800e900:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e904:	2b09      	cmp	r3, #9
 800e906:	d802      	bhi.n	800e90e <__hexdig_fun+0xe>
 800e908:	3820      	subs	r0, #32
 800e90a:	b2c0      	uxtb	r0, r0
 800e90c:	4770      	bx	lr
 800e90e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e912:	2b05      	cmp	r3, #5
 800e914:	d801      	bhi.n	800e91a <__hexdig_fun+0x1a>
 800e916:	3847      	subs	r0, #71	; 0x47
 800e918:	e7f7      	b.n	800e90a <__hexdig_fun+0xa>
 800e91a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e91e:	2b05      	cmp	r3, #5
 800e920:	d801      	bhi.n	800e926 <__hexdig_fun+0x26>
 800e922:	3827      	subs	r0, #39	; 0x27
 800e924:	e7f1      	b.n	800e90a <__hexdig_fun+0xa>
 800e926:	2000      	movs	r0, #0
 800e928:	4770      	bx	lr
	...

0800e92c <__gethex>:
 800e92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e930:	ed2d 8b02 	vpush	{d8}
 800e934:	b089      	sub	sp, #36	; 0x24
 800e936:	ee08 0a10 	vmov	s16, r0
 800e93a:	9304      	str	r3, [sp, #16]
 800e93c:	4bb4      	ldr	r3, [pc, #720]	; (800ec10 <__gethex+0x2e4>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	9301      	str	r3, [sp, #4]
 800e942:	4618      	mov	r0, r3
 800e944:	468b      	mov	fp, r1
 800e946:	4690      	mov	r8, r2
 800e948:	f7f1 fcca 	bl	80002e0 <strlen>
 800e94c:	9b01      	ldr	r3, [sp, #4]
 800e94e:	f8db 2000 	ldr.w	r2, [fp]
 800e952:	4403      	add	r3, r0
 800e954:	4682      	mov	sl, r0
 800e956:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e95a:	9305      	str	r3, [sp, #20]
 800e95c:	1c93      	adds	r3, r2, #2
 800e95e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e962:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e966:	32fe      	adds	r2, #254	; 0xfe
 800e968:	18d1      	adds	r1, r2, r3
 800e96a:	461f      	mov	r7, r3
 800e96c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e970:	9100      	str	r1, [sp, #0]
 800e972:	2830      	cmp	r0, #48	; 0x30
 800e974:	d0f8      	beq.n	800e968 <__gethex+0x3c>
 800e976:	f7ff ffc3 	bl	800e900 <__hexdig_fun>
 800e97a:	4604      	mov	r4, r0
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d13a      	bne.n	800e9f6 <__gethex+0xca>
 800e980:	9901      	ldr	r1, [sp, #4]
 800e982:	4652      	mov	r2, sl
 800e984:	4638      	mov	r0, r7
 800e986:	f000 ffe3 	bl	800f950 <strncmp>
 800e98a:	4605      	mov	r5, r0
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d168      	bne.n	800ea62 <__gethex+0x136>
 800e990:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e994:	eb07 060a 	add.w	r6, r7, sl
 800e998:	f7ff ffb2 	bl	800e900 <__hexdig_fun>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	d062      	beq.n	800ea66 <__gethex+0x13a>
 800e9a0:	4633      	mov	r3, r6
 800e9a2:	7818      	ldrb	r0, [r3, #0]
 800e9a4:	2830      	cmp	r0, #48	; 0x30
 800e9a6:	461f      	mov	r7, r3
 800e9a8:	f103 0301 	add.w	r3, r3, #1
 800e9ac:	d0f9      	beq.n	800e9a2 <__gethex+0x76>
 800e9ae:	f7ff ffa7 	bl	800e900 <__hexdig_fun>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	fab0 f480 	clz	r4, r0
 800e9b8:	0964      	lsrs	r4, r4, #5
 800e9ba:	4635      	mov	r5, r6
 800e9bc:	9300      	str	r3, [sp, #0]
 800e9be:	463a      	mov	r2, r7
 800e9c0:	4616      	mov	r6, r2
 800e9c2:	3201      	adds	r2, #1
 800e9c4:	7830      	ldrb	r0, [r6, #0]
 800e9c6:	f7ff ff9b 	bl	800e900 <__hexdig_fun>
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d1f8      	bne.n	800e9c0 <__gethex+0x94>
 800e9ce:	9901      	ldr	r1, [sp, #4]
 800e9d0:	4652      	mov	r2, sl
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f000 ffbc 	bl	800f950 <strncmp>
 800e9d8:	b980      	cbnz	r0, 800e9fc <__gethex+0xd0>
 800e9da:	b94d      	cbnz	r5, 800e9f0 <__gethex+0xc4>
 800e9dc:	eb06 050a 	add.w	r5, r6, sl
 800e9e0:	462a      	mov	r2, r5
 800e9e2:	4616      	mov	r6, r2
 800e9e4:	3201      	adds	r2, #1
 800e9e6:	7830      	ldrb	r0, [r6, #0]
 800e9e8:	f7ff ff8a 	bl	800e900 <__hexdig_fun>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d1f8      	bne.n	800e9e2 <__gethex+0xb6>
 800e9f0:	1bad      	subs	r5, r5, r6
 800e9f2:	00ad      	lsls	r5, r5, #2
 800e9f4:	e004      	b.n	800ea00 <__gethex+0xd4>
 800e9f6:	2400      	movs	r4, #0
 800e9f8:	4625      	mov	r5, r4
 800e9fa:	e7e0      	b.n	800e9be <__gethex+0x92>
 800e9fc:	2d00      	cmp	r5, #0
 800e9fe:	d1f7      	bne.n	800e9f0 <__gethex+0xc4>
 800ea00:	7833      	ldrb	r3, [r6, #0]
 800ea02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ea06:	2b50      	cmp	r3, #80	; 0x50
 800ea08:	d13b      	bne.n	800ea82 <__gethex+0x156>
 800ea0a:	7873      	ldrb	r3, [r6, #1]
 800ea0c:	2b2b      	cmp	r3, #43	; 0x2b
 800ea0e:	d02c      	beq.n	800ea6a <__gethex+0x13e>
 800ea10:	2b2d      	cmp	r3, #45	; 0x2d
 800ea12:	d02e      	beq.n	800ea72 <__gethex+0x146>
 800ea14:	1c71      	adds	r1, r6, #1
 800ea16:	f04f 0900 	mov.w	r9, #0
 800ea1a:	7808      	ldrb	r0, [r1, #0]
 800ea1c:	f7ff ff70 	bl	800e900 <__hexdig_fun>
 800ea20:	1e43      	subs	r3, r0, #1
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b18      	cmp	r3, #24
 800ea26:	d82c      	bhi.n	800ea82 <__gethex+0x156>
 800ea28:	f1a0 0210 	sub.w	r2, r0, #16
 800ea2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ea30:	f7ff ff66 	bl	800e900 <__hexdig_fun>
 800ea34:	1e43      	subs	r3, r0, #1
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	2b18      	cmp	r3, #24
 800ea3a:	d91d      	bls.n	800ea78 <__gethex+0x14c>
 800ea3c:	f1b9 0f00 	cmp.w	r9, #0
 800ea40:	d000      	beq.n	800ea44 <__gethex+0x118>
 800ea42:	4252      	negs	r2, r2
 800ea44:	4415      	add	r5, r2
 800ea46:	f8cb 1000 	str.w	r1, [fp]
 800ea4a:	b1e4      	cbz	r4, 800ea86 <__gethex+0x15a>
 800ea4c:	9b00      	ldr	r3, [sp, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	bf14      	ite	ne
 800ea52:	2700      	movne	r7, #0
 800ea54:	2706      	moveq	r7, #6
 800ea56:	4638      	mov	r0, r7
 800ea58:	b009      	add	sp, #36	; 0x24
 800ea5a:	ecbd 8b02 	vpop	{d8}
 800ea5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea62:	463e      	mov	r6, r7
 800ea64:	4625      	mov	r5, r4
 800ea66:	2401      	movs	r4, #1
 800ea68:	e7ca      	b.n	800ea00 <__gethex+0xd4>
 800ea6a:	f04f 0900 	mov.w	r9, #0
 800ea6e:	1cb1      	adds	r1, r6, #2
 800ea70:	e7d3      	b.n	800ea1a <__gethex+0xee>
 800ea72:	f04f 0901 	mov.w	r9, #1
 800ea76:	e7fa      	b.n	800ea6e <__gethex+0x142>
 800ea78:	230a      	movs	r3, #10
 800ea7a:	fb03 0202 	mla	r2, r3, r2, r0
 800ea7e:	3a10      	subs	r2, #16
 800ea80:	e7d4      	b.n	800ea2c <__gethex+0x100>
 800ea82:	4631      	mov	r1, r6
 800ea84:	e7df      	b.n	800ea46 <__gethex+0x11a>
 800ea86:	1bf3      	subs	r3, r6, r7
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	4621      	mov	r1, r4
 800ea8c:	2b07      	cmp	r3, #7
 800ea8e:	dc0b      	bgt.n	800eaa8 <__gethex+0x17c>
 800ea90:	ee18 0a10 	vmov	r0, s16
 800ea94:	f000 fa7e 	bl	800ef94 <_Balloc>
 800ea98:	4604      	mov	r4, r0
 800ea9a:	b940      	cbnz	r0, 800eaae <__gethex+0x182>
 800ea9c:	4b5d      	ldr	r3, [pc, #372]	; (800ec14 <__gethex+0x2e8>)
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	21de      	movs	r1, #222	; 0xde
 800eaa2:	485d      	ldr	r0, [pc, #372]	; (800ec18 <__gethex+0x2ec>)
 800eaa4:	f000 ff76 	bl	800f994 <__assert_func>
 800eaa8:	3101      	adds	r1, #1
 800eaaa:	105b      	asrs	r3, r3, #1
 800eaac:	e7ee      	b.n	800ea8c <__gethex+0x160>
 800eaae:	f100 0914 	add.w	r9, r0, #20
 800eab2:	f04f 0b00 	mov.w	fp, #0
 800eab6:	f1ca 0301 	rsb	r3, sl, #1
 800eaba:	f8cd 9008 	str.w	r9, [sp, #8]
 800eabe:	f8cd b000 	str.w	fp, [sp]
 800eac2:	9306      	str	r3, [sp, #24]
 800eac4:	42b7      	cmp	r7, r6
 800eac6:	d340      	bcc.n	800eb4a <__gethex+0x21e>
 800eac8:	9802      	ldr	r0, [sp, #8]
 800eaca:	9b00      	ldr	r3, [sp, #0]
 800eacc:	f840 3b04 	str.w	r3, [r0], #4
 800ead0:	eba0 0009 	sub.w	r0, r0, r9
 800ead4:	1080      	asrs	r0, r0, #2
 800ead6:	0146      	lsls	r6, r0, #5
 800ead8:	6120      	str	r0, [r4, #16]
 800eada:	4618      	mov	r0, r3
 800eadc:	f000 fb4c 	bl	800f178 <__hi0bits>
 800eae0:	1a30      	subs	r0, r6, r0
 800eae2:	f8d8 6000 	ldr.w	r6, [r8]
 800eae6:	42b0      	cmp	r0, r6
 800eae8:	dd63      	ble.n	800ebb2 <__gethex+0x286>
 800eaea:	1b87      	subs	r7, r0, r6
 800eaec:	4639      	mov	r1, r7
 800eaee:	4620      	mov	r0, r4
 800eaf0:	f000 feed 	bl	800f8ce <__any_on>
 800eaf4:	4682      	mov	sl, r0
 800eaf6:	b1a8      	cbz	r0, 800eb24 <__gethex+0x1f8>
 800eaf8:	1e7b      	subs	r3, r7, #1
 800eafa:	1159      	asrs	r1, r3, #5
 800eafc:	f003 021f 	and.w	r2, r3, #31
 800eb00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800eb04:	f04f 0a01 	mov.w	sl, #1
 800eb08:	fa0a f202 	lsl.w	r2, sl, r2
 800eb0c:	420a      	tst	r2, r1
 800eb0e:	d009      	beq.n	800eb24 <__gethex+0x1f8>
 800eb10:	4553      	cmp	r3, sl
 800eb12:	dd05      	ble.n	800eb20 <__gethex+0x1f4>
 800eb14:	1eb9      	subs	r1, r7, #2
 800eb16:	4620      	mov	r0, r4
 800eb18:	f000 fed9 	bl	800f8ce <__any_on>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d145      	bne.n	800ebac <__gethex+0x280>
 800eb20:	f04f 0a02 	mov.w	sl, #2
 800eb24:	4639      	mov	r1, r7
 800eb26:	4620      	mov	r0, r4
 800eb28:	f7ff fe98 	bl	800e85c <rshift>
 800eb2c:	443d      	add	r5, r7
 800eb2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb32:	42ab      	cmp	r3, r5
 800eb34:	da4c      	bge.n	800ebd0 <__gethex+0x2a4>
 800eb36:	ee18 0a10 	vmov	r0, s16
 800eb3a:	4621      	mov	r1, r4
 800eb3c:	f000 fa6a 	bl	800f014 <_Bfree>
 800eb40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eb42:	2300      	movs	r3, #0
 800eb44:	6013      	str	r3, [r2, #0]
 800eb46:	27a3      	movs	r7, #163	; 0xa3
 800eb48:	e785      	b.n	800ea56 <__gethex+0x12a>
 800eb4a:	1e73      	subs	r3, r6, #1
 800eb4c:	9a05      	ldr	r2, [sp, #20]
 800eb4e:	9303      	str	r3, [sp, #12]
 800eb50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d019      	beq.n	800eb8c <__gethex+0x260>
 800eb58:	f1bb 0f20 	cmp.w	fp, #32
 800eb5c:	d107      	bne.n	800eb6e <__gethex+0x242>
 800eb5e:	9b02      	ldr	r3, [sp, #8]
 800eb60:	9a00      	ldr	r2, [sp, #0]
 800eb62:	f843 2b04 	str.w	r2, [r3], #4
 800eb66:	9302      	str	r3, [sp, #8]
 800eb68:	2300      	movs	r3, #0
 800eb6a:	9300      	str	r3, [sp, #0]
 800eb6c:	469b      	mov	fp, r3
 800eb6e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800eb72:	f7ff fec5 	bl	800e900 <__hexdig_fun>
 800eb76:	9b00      	ldr	r3, [sp, #0]
 800eb78:	f000 000f 	and.w	r0, r0, #15
 800eb7c:	fa00 f00b 	lsl.w	r0, r0, fp
 800eb80:	4303      	orrs	r3, r0
 800eb82:	9300      	str	r3, [sp, #0]
 800eb84:	f10b 0b04 	add.w	fp, fp, #4
 800eb88:	9b03      	ldr	r3, [sp, #12]
 800eb8a:	e00d      	b.n	800eba8 <__gethex+0x27c>
 800eb8c:	9b03      	ldr	r3, [sp, #12]
 800eb8e:	9a06      	ldr	r2, [sp, #24]
 800eb90:	4413      	add	r3, r2
 800eb92:	42bb      	cmp	r3, r7
 800eb94:	d3e0      	bcc.n	800eb58 <__gethex+0x22c>
 800eb96:	4618      	mov	r0, r3
 800eb98:	9901      	ldr	r1, [sp, #4]
 800eb9a:	9307      	str	r3, [sp, #28]
 800eb9c:	4652      	mov	r2, sl
 800eb9e:	f000 fed7 	bl	800f950 <strncmp>
 800eba2:	9b07      	ldr	r3, [sp, #28]
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d1d7      	bne.n	800eb58 <__gethex+0x22c>
 800eba8:	461e      	mov	r6, r3
 800ebaa:	e78b      	b.n	800eac4 <__gethex+0x198>
 800ebac:	f04f 0a03 	mov.w	sl, #3
 800ebb0:	e7b8      	b.n	800eb24 <__gethex+0x1f8>
 800ebb2:	da0a      	bge.n	800ebca <__gethex+0x29e>
 800ebb4:	1a37      	subs	r7, r6, r0
 800ebb6:	4621      	mov	r1, r4
 800ebb8:	ee18 0a10 	vmov	r0, s16
 800ebbc:	463a      	mov	r2, r7
 800ebbe:	f000 fc45 	bl	800f44c <__lshift>
 800ebc2:	1bed      	subs	r5, r5, r7
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	f100 0914 	add.w	r9, r0, #20
 800ebca:	f04f 0a00 	mov.w	sl, #0
 800ebce:	e7ae      	b.n	800eb2e <__gethex+0x202>
 800ebd0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ebd4:	42a8      	cmp	r0, r5
 800ebd6:	dd72      	ble.n	800ecbe <__gethex+0x392>
 800ebd8:	1b45      	subs	r5, r0, r5
 800ebda:	42ae      	cmp	r6, r5
 800ebdc:	dc36      	bgt.n	800ec4c <__gethex+0x320>
 800ebde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ebe2:	2b02      	cmp	r3, #2
 800ebe4:	d02a      	beq.n	800ec3c <__gethex+0x310>
 800ebe6:	2b03      	cmp	r3, #3
 800ebe8:	d02c      	beq.n	800ec44 <__gethex+0x318>
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d11c      	bne.n	800ec28 <__gethex+0x2fc>
 800ebee:	42ae      	cmp	r6, r5
 800ebf0:	d11a      	bne.n	800ec28 <__gethex+0x2fc>
 800ebf2:	2e01      	cmp	r6, #1
 800ebf4:	d112      	bne.n	800ec1c <__gethex+0x2f0>
 800ebf6:	9a04      	ldr	r2, [sp, #16]
 800ebf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ebfc:	6013      	str	r3, [r2, #0]
 800ebfe:	2301      	movs	r3, #1
 800ec00:	6123      	str	r3, [r4, #16]
 800ec02:	f8c9 3000 	str.w	r3, [r9]
 800ec06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec08:	2762      	movs	r7, #98	; 0x62
 800ec0a:	601c      	str	r4, [r3, #0]
 800ec0c:	e723      	b.n	800ea56 <__gethex+0x12a>
 800ec0e:	bf00      	nop
 800ec10:	08011198 	.word	0x08011198
 800ec14:	08011120 	.word	0x08011120
 800ec18:	08011131 	.word	0x08011131
 800ec1c:	1e71      	subs	r1, r6, #1
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f000 fe55 	bl	800f8ce <__any_on>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d1e6      	bne.n	800ebf6 <__gethex+0x2ca>
 800ec28:	ee18 0a10 	vmov	r0, s16
 800ec2c:	4621      	mov	r1, r4
 800ec2e:	f000 f9f1 	bl	800f014 <_Bfree>
 800ec32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec34:	2300      	movs	r3, #0
 800ec36:	6013      	str	r3, [r2, #0]
 800ec38:	2750      	movs	r7, #80	; 0x50
 800ec3a:	e70c      	b.n	800ea56 <__gethex+0x12a>
 800ec3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d1f2      	bne.n	800ec28 <__gethex+0x2fc>
 800ec42:	e7d8      	b.n	800ebf6 <__gethex+0x2ca>
 800ec44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1d5      	bne.n	800ebf6 <__gethex+0x2ca>
 800ec4a:	e7ed      	b.n	800ec28 <__gethex+0x2fc>
 800ec4c:	1e6f      	subs	r7, r5, #1
 800ec4e:	f1ba 0f00 	cmp.w	sl, #0
 800ec52:	d131      	bne.n	800ecb8 <__gethex+0x38c>
 800ec54:	b127      	cbz	r7, 800ec60 <__gethex+0x334>
 800ec56:	4639      	mov	r1, r7
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 fe38 	bl	800f8ce <__any_on>
 800ec5e:	4682      	mov	sl, r0
 800ec60:	117b      	asrs	r3, r7, #5
 800ec62:	2101      	movs	r1, #1
 800ec64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ec68:	f007 071f 	and.w	r7, r7, #31
 800ec6c:	fa01 f707 	lsl.w	r7, r1, r7
 800ec70:	421f      	tst	r7, r3
 800ec72:	4629      	mov	r1, r5
 800ec74:	4620      	mov	r0, r4
 800ec76:	bf18      	it	ne
 800ec78:	f04a 0a02 	orrne.w	sl, sl, #2
 800ec7c:	1b76      	subs	r6, r6, r5
 800ec7e:	f7ff fded 	bl	800e85c <rshift>
 800ec82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ec86:	2702      	movs	r7, #2
 800ec88:	f1ba 0f00 	cmp.w	sl, #0
 800ec8c:	d048      	beq.n	800ed20 <__gethex+0x3f4>
 800ec8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec92:	2b02      	cmp	r3, #2
 800ec94:	d015      	beq.n	800ecc2 <__gethex+0x396>
 800ec96:	2b03      	cmp	r3, #3
 800ec98:	d017      	beq.n	800ecca <__gethex+0x39e>
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d109      	bne.n	800ecb2 <__gethex+0x386>
 800ec9e:	f01a 0f02 	tst.w	sl, #2
 800eca2:	d006      	beq.n	800ecb2 <__gethex+0x386>
 800eca4:	f8d9 0000 	ldr.w	r0, [r9]
 800eca8:	ea4a 0a00 	orr.w	sl, sl, r0
 800ecac:	f01a 0f01 	tst.w	sl, #1
 800ecb0:	d10e      	bne.n	800ecd0 <__gethex+0x3a4>
 800ecb2:	f047 0710 	orr.w	r7, r7, #16
 800ecb6:	e033      	b.n	800ed20 <__gethex+0x3f4>
 800ecb8:	f04f 0a01 	mov.w	sl, #1
 800ecbc:	e7d0      	b.n	800ec60 <__gethex+0x334>
 800ecbe:	2701      	movs	r7, #1
 800ecc0:	e7e2      	b.n	800ec88 <__gethex+0x35c>
 800ecc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecc4:	f1c3 0301 	rsb	r3, r3, #1
 800ecc8:	9315      	str	r3, [sp, #84]	; 0x54
 800ecca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d0f0      	beq.n	800ecb2 <__gethex+0x386>
 800ecd0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ecd4:	f104 0314 	add.w	r3, r4, #20
 800ecd8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ecdc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ece0:	f04f 0c00 	mov.w	ip, #0
 800ece4:	4618      	mov	r0, r3
 800ece6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecea:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ecee:	d01c      	beq.n	800ed2a <__gethex+0x3fe>
 800ecf0:	3201      	adds	r2, #1
 800ecf2:	6002      	str	r2, [r0, #0]
 800ecf4:	2f02      	cmp	r7, #2
 800ecf6:	f104 0314 	add.w	r3, r4, #20
 800ecfa:	d13f      	bne.n	800ed7c <__gethex+0x450>
 800ecfc:	f8d8 2000 	ldr.w	r2, [r8]
 800ed00:	3a01      	subs	r2, #1
 800ed02:	42b2      	cmp	r2, r6
 800ed04:	d10a      	bne.n	800ed1c <__gethex+0x3f0>
 800ed06:	1171      	asrs	r1, r6, #5
 800ed08:	2201      	movs	r2, #1
 800ed0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed0e:	f006 061f 	and.w	r6, r6, #31
 800ed12:	fa02 f606 	lsl.w	r6, r2, r6
 800ed16:	421e      	tst	r6, r3
 800ed18:	bf18      	it	ne
 800ed1a:	4617      	movne	r7, r2
 800ed1c:	f047 0720 	orr.w	r7, r7, #32
 800ed20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ed22:	601c      	str	r4, [r3, #0]
 800ed24:	9b04      	ldr	r3, [sp, #16]
 800ed26:	601d      	str	r5, [r3, #0]
 800ed28:	e695      	b.n	800ea56 <__gethex+0x12a>
 800ed2a:	4299      	cmp	r1, r3
 800ed2c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ed30:	d8d8      	bhi.n	800ece4 <__gethex+0x3b8>
 800ed32:	68a3      	ldr	r3, [r4, #8]
 800ed34:	459b      	cmp	fp, r3
 800ed36:	db19      	blt.n	800ed6c <__gethex+0x440>
 800ed38:	6861      	ldr	r1, [r4, #4]
 800ed3a:	ee18 0a10 	vmov	r0, s16
 800ed3e:	3101      	adds	r1, #1
 800ed40:	f000 f928 	bl	800ef94 <_Balloc>
 800ed44:	4681      	mov	r9, r0
 800ed46:	b918      	cbnz	r0, 800ed50 <__gethex+0x424>
 800ed48:	4b1a      	ldr	r3, [pc, #104]	; (800edb4 <__gethex+0x488>)
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	2184      	movs	r1, #132	; 0x84
 800ed4e:	e6a8      	b.n	800eaa2 <__gethex+0x176>
 800ed50:	6922      	ldr	r2, [r4, #16]
 800ed52:	3202      	adds	r2, #2
 800ed54:	f104 010c 	add.w	r1, r4, #12
 800ed58:	0092      	lsls	r2, r2, #2
 800ed5a:	300c      	adds	r0, #12
 800ed5c:	f000 f900 	bl	800ef60 <memcpy>
 800ed60:	4621      	mov	r1, r4
 800ed62:	ee18 0a10 	vmov	r0, s16
 800ed66:	f000 f955 	bl	800f014 <_Bfree>
 800ed6a:	464c      	mov	r4, r9
 800ed6c:	6923      	ldr	r3, [r4, #16]
 800ed6e:	1c5a      	adds	r2, r3, #1
 800ed70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed74:	6122      	str	r2, [r4, #16]
 800ed76:	2201      	movs	r2, #1
 800ed78:	615a      	str	r2, [r3, #20]
 800ed7a:	e7bb      	b.n	800ecf4 <__gethex+0x3c8>
 800ed7c:	6922      	ldr	r2, [r4, #16]
 800ed7e:	455a      	cmp	r2, fp
 800ed80:	dd0b      	ble.n	800ed9a <__gethex+0x46e>
 800ed82:	2101      	movs	r1, #1
 800ed84:	4620      	mov	r0, r4
 800ed86:	f7ff fd69 	bl	800e85c <rshift>
 800ed8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed8e:	3501      	adds	r5, #1
 800ed90:	42ab      	cmp	r3, r5
 800ed92:	f6ff aed0 	blt.w	800eb36 <__gethex+0x20a>
 800ed96:	2701      	movs	r7, #1
 800ed98:	e7c0      	b.n	800ed1c <__gethex+0x3f0>
 800ed9a:	f016 061f 	ands.w	r6, r6, #31
 800ed9e:	d0fa      	beq.n	800ed96 <__gethex+0x46a>
 800eda0:	4453      	add	r3, sl
 800eda2:	f1c6 0620 	rsb	r6, r6, #32
 800eda6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800edaa:	f000 f9e5 	bl	800f178 <__hi0bits>
 800edae:	42b0      	cmp	r0, r6
 800edb0:	dbe7      	blt.n	800ed82 <__gethex+0x456>
 800edb2:	e7f0      	b.n	800ed96 <__gethex+0x46a>
 800edb4:	08011120 	.word	0x08011120

0800edb8 <L_shift>:
 800edb8:	f1c2 0208 	rsb	r2, r2, #8
 800edbc:	0092      	lsls	r2, r2, #2
 800edbe:	b570      	push	{r4, r5, r6, lr}
 800edc0:	f1c2 0620 	rsb	r6, r2, #32
 800edc4:	6843      	ldr	r3, [r0, #4]
 800edc6:	6804      	ldr	r4, [r0, #0]
 800edc8:	fa03 f506 	lsl.w	r5, r3, r6
 800edcc:	432c      	orrs	r4, r5
 800edce:	40d3      	lsrs	r3, r2
 800edd0:	6004      	str	r4, [r0, #0]
 800edd2:	f840 3f04 	str.w	r3, [r0, #4]!
 800edd6:	4288      	cmp	r0, r1
 800edd8:	d3f4      	bcc.n	800edc4 <L_shift+0xc>
 800edda:	bd70      	pop	{r4, r5, r6, pc}

0800eddc <__match>:
 800eddc:	b530      	push	{r4, r5, lr}
 800edde:	6803      	ldr	r3, [r0, #0]
 800ede0:	3301      	adds	r3, #1
 800ede2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ede6:	b914      	cbnz	r4, 800edee <__match+0x12>
 800ede8:	6003      	str	r3, [r0, #0]
 800edea:	2001      	movs	r0, #1
 800edec:	bd30      	pop	{r4, r5, pc}
 800edee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800edf6:	2d19      	cmp	r5, #25
 800edf8:	bf98      	it	ls
 800edfa:	3220      	addls	r2, #32
 800edfc:	42a2      	cmp	r2, r4
 800edfe:	d0f0      	beq.n	800ede2 <__match+0x6>
 800ee00:	2000      	movs	r0, #0
 800ee02:	e7f3      	b.n	800edec <__match+0x10>

0800ee04 <__hexnan>:
 800ee04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee08:	680b      	ldr	r3, [r1, #0]
 800ee0a:	115e      	asrs	r6, r3, #5
 800ee0c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ee10:	f013 031f 	ands.w	r3, r3, #31
 800ee14:	b087      	sub	sp, #28
 800ee16:	bf18      	it	ne
 800ee18:	3604      	addne	r6, #4
 800ee1a:	2500      	movs	r5, #0
 800ee1c:	1f37      	subs	r7, r6, #4
 800ee1e:	4690      	mov	r8, r2
 800ee20:	6802      	ldr	r2, [r0, #0]
 800ee22:	9301      	str	r3, [sp, #4]
 800ee24:	4682      	mov	sl, r0
 800ee26:	f846 5c04 	str.w	r5, [r6, #-4]
 800ee2a:	46b9      	mov	r9, r7
 800ee2c:	463c      	mov	r4, r7
 800ee2e:	9502      	str	r5, [sp, #8]
 800ee30:	46ab      	mov	fp, r5
 800ee32:	7851      	ldrb	r1, [r2, #1]
 800ee34:	1c53      	adds	r3, r2, #1
 800ee36:	9303      	str	r3, [sp, #12]
 800ee38:	b341      	cbz	r1, 800ee8c <__hexnan+0x88>
 800ee3a:	4608      	mov	r0, r1
 800ee3c:	9205      	str	r2, [sp, #20]
 800ee3e:	9104      	str	r1, [sp, #16]
 800ee40:	f7ff fd5e 	bl	800e900 <__hexdig_fun>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	d14f      	bne.n	800eee8 <__hexnan+0xe4>
 800ee48:	9904      	ldr	r1, [sp, #16]
 800ee4a:	9a05      	ldr	r2, [sp, #20]
 800ee4c:	2920      	cmp	r1, #32
 800ee4e:	d818      	bhi.n	800ee82 <__hexnan+0x7e>
 800ee50:	9b02      	ldr	r3, [sp, #8]
 800ee52:	459b      	cmp	fp, r3
 800ee54:	dd13      	ble.n	800ee7e <__hexnan+0x7a>
 800ee56:	454c      	cmp	r4, r9
 800ee58:	d206      	bcs.n	800ee68 <__hexnan+0x64>
 800ee5a:	2d07      	cmp	r5, #7
 800ee5c:	dc04      	bgt.n	800ee68 <__hexnan+0x64>
 800ee5e:	462a      	mov	r2, r5
 800ee60:	4649      	mov	r1, r9
 800ee62:	4620      	mov	r0, r4
 800ee64:	f7ff ffa8 	bl	800edb8 <L_shift>
 800ee68:	4544      	cmp	r4, r8
 800ee6a:	d950      	bls.n	800ef0e <__hexnan+0x10a>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	f1a4 0904 	sub.w	r9, r4, #4
 800ee72:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee76:	f8cd b008 	str.w	fp, [sp, #8]
 800ee7a:	464c      	mov	r4, r9
 800ee7c:	461d      	mov	r5, r3
 800ee7e:	9a03      	ldr	r2, [sp, #12]
 800ee80:	e7d7      	b.n	800ee32 <__hexnan+0x2e>
 800ee82:	2929      	cmp	r1, #41	; 0x29
 800ee84:	d156      	bne.n	800ef34 <__hexnan+0x130>
 800ee86:	3202      	adds	r2, #2
 800ee88:	f8ca 2000 	str.w	r2, [sl]
 800ee8c:	f1bb 0f00 	cmp.w	fp, #0
 800ee90:	d050      	beq.n	800ef34 <__hexnan+0x130>
 800ee92:	454c      	cmp	r4, r9
 800ee94:	d206      	bcs.n	800eea4 <__hexnan+0xa0>
 800ee96:	2d07      	cmp	r5, #7
 800ee98:	dc04      	bgt.n	800eea4 <__hexnan+0xa0>
 800ee9a:	462a      	mov	r2, r5
 800ee9c:	4649      	mov	r1, r9
 800ee9e:	4620      	mov	r0, r4
 800eea0:	f7ff ff8a 	bl	800edb8 <L_shift>
 800eea4:	4544      	cmp	r4, r8
 800eea6:	d934      	bls.n	800ef12 <__hexnan+0x10e>
 800eea8:	f1a8 0204 	sub.w	r2, r8, #4
 800eeac:	4623      	mov	r3, r4
 800eeae:	f853 1b04 	ldr.w	r1, [r3], #4
 800eeb2:	f842 1f04 	str.w	r1, [r2, #4]!
 800eeb6:	429f      	cmp	r7, r3
 800eeb8:	d2f9      	bcs.n	800eeae <__hexnan+0xaa>
 800eeba:	1b3b      	subs	r3, r7, r4
 800eebc:	f023 0303 	bic.w	r3, r3, #3
 800eec0:	3304      	adds	r3, #4
 800eec2:	3401      	adds	r4, #1
 800eec4:	3e03      	subs	r6, #3
 800eec6:	42b4      	cmp	r4, r6
 800eec8:	bf88      	it	hi
 800eeca:	2304      	movhi	r3, #4
 800eecc:	4443      	add	r3, r8
 800eece:	2200      	movs	r2, #0
 800eed0:	f843 2b04 	str.w	r2, [r3], #4
 800eed4:	429f      	cmp	r7, r3
 800eed6:	d2fb      	bcs.n	800eed0 <__hexnan+0xcc>
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	b91b      	cbnz	r3, 800eee4 <__hexnan+0xe0>
 800eedc:	4547      	cmp	r7, r8
 800eede:	d127      	bne.n	800ef30 <__hexnan+0x12c>
 800eee0:	2301      	movs	r3, #1
 800eee2:	603b      	str	r3, [r7, #0]
 800eee4:	2005      	movs	r0, #5
 800eee6:	e026      	b.n	800ef36 <__hexnan+0x132>
 800eee8:	3501      	adds	r5, #1
 800eeea:	2d08      	cmp	r5, #8
 800eeec:	f10b 0b01 	add.w	fp, fp, #1
 800eef0:	dd06      	ble.n	800ef00 <__hexnan+0xfc>
 800eef2:	4544      	cmp	r4, r8
 800eef4:	d9c3      	bls.n	800ee7e <__hexnan+0x7a>
 800eef6:	2300      	movs	r3, #0
 800eef8:	f844 3c04 	str.w	r3, [r4, #-4]
 800eefc:	2501      	movs	r5, #1
 800eefe:	3c04      	subs	r4, #4
 800ef00:	6822      	ldr	r2, [r4, #0]
 800ef02:	f000 000f 	and.w	r0, r0, #15
 800ef06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ef0a:	6022      	str	r2, [r4, #0]
 800ef0c:	e7b7      	b.n	800ee7e <__hexnan+0x7a>
 800ef0e:	2508      	movs	r5, #8
 800ef10:	e7b5      	b.n	800ee7e <__hexnan+0x7a>
 800ef12:	9b01      	ldr	r3, [sp, #4]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d0df      	beq.n	800eed8 <__hexnan+0xd4>
 800ef18:	f04f 32ff 	mov.w	r2, #4294967295
 800ef1c:	f1c3 0320 	rsb	r3, r3, #32
 800ef20:	fa22 f303 	lsr.w	r3, r2, r3
 800ef24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ef28:	401a      	ands	r2, r3
 800ef2a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ef2e:	e7d3      	b.n	800eed8 <__hexnan+0xd4>
 800ef30:	3f04      	subs	r7, #4
 800ef32:	e7d1      	b.n	800eed8 <__hexnan+0xd4>
 800ef34:	2004      	movs	r0, #4
 800ef36:	b007      	add	sp, #28
 800ef38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef3c <__ascii_mbtowc>:
 800ef3c:	b082      	sub	sp, #8
 800ef3e:	b901      	cbnz	r1, 800ef42 <__ascii_mbtowc+0x6>
 800ef40:	a901      	add	r1, sp, #4
 800ef42:	b142      	cbz	r2, 800ef56 <__ascii_mbtowc+0x1a>
 800ef44:	b14b      	cbz	r3, 800ef5a <__ascii_mbtowc+0x1e>
 800ef46:	7813      	ldrb	r3, [r2, #0]
 800ef48:	600b      	str	r3, [r1, #0]
 800ef4a:	7812      	ldrb	r2, [r2, #0]
 800ef4c:	1e10      	subs	r0, r2, #0
 800ef4e:	bf18      	it	ne
 800ef50:	2001      	movne	r0, #1
 800ef52:	b002      	add	sp, #8
 800ef54:	4770      	bx	lr
 800ef56:	4610      	mov	r0, r2
 800ef58:	e7fb      	b.n	800ef52 <__ascii_mbtowc+0x16>
 800ef5a:	f06f 0001 	mvn.w	r0, #1
 800ef5e:	e7f8      	b.n	800ef52 <__ascii_mbtowc+0x16>

0800ef60 <memcpy>:
 800ef60:	440a      	add	r2, r1
 800ef62:	4291      	cmp	r1, r2
 800ef64:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef68:	d100      	bne.n	800ef6c <memcpy+0xc>
 800ef6a:	4770      	bx	lr
 800ef6c:	b510      	push	{r4, lr}
 800ef6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef76:	4291      	cmp	r1, r2
 800ef78:	d1f9      	bne.n	800ef6e <memcpy+0xe>
 800ef7a:	bd10      	pop	{r4, pc}

0800ef7c <__malloc_lock>:
 800ef7c:	4801      	ldr	r0, [pc, #4]	; (800ef84 <__malloc_lock+0x8>)
 800ef7e:	f000 bd3a 	b.w	800f9f6 <__retarget_lock_acquire_recursive>
 800ef82:	bf00      	nop
 800ef84:	24000994 	.word	0x24000994

0800ef88 <__malloc_unlock>:
 800ef88:	4801      	ldr	r0, [pc, #4]	; (800ef90 <__malloc_unlock+0x8>)
 800ef8a:	f000 bd35 	b.w	800f9f8 <__retarget_lock_release_recursive>
 800ef8e:	bf00      	nop
 800ef90:	24000994 	.word	0x24000994

0800ef94 <_Balloc>:
 800ef94:	b570      	push	{r4, r5, r6, lr}
 800ef96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef98:	4604      	mov	r4, r0
 800ef9a:	460d      	mov	r5, r1
 800ef9c:	b976      	cbnz	r6, 800efbc <_Balloc+0x28>
 800ef9e:	2010      	movs	r0, #16
 800efa0:	f7fe fd76 	bl	800da90 <malloc>
 800efa4:	4602      	mov	r2, r0
 800efa6:	6260      	str	r0, [r4, #36]	; 0x24
 800efa8:	b920      	cbnz	r0, 800efb4 <_Balloc+0x20>
 800efaa:	4b18      	ldr	r3, [pc, #96]	; (800f00c <_Balloc+0x78>)
 800efac:	4818      	ldr	r0, [pc, #96]	; (800f010 <_Balloc+0x7c>)
 800efae:	2166      	movs	r1, #102	; 0x66
 800efb0:	f000 fcf0 	bl	800f994 <__assert_func>
 800efb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800efb8:	6006      	str	r6, [r0, #0]
 800efba:	60c6      	str	r6, [r0, #12]
 800efbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800efbe:	68f3      	ldr	r3, [r6, #12]
 800efc0:	b183      	cbz	r3, 800efe4 <_Balloc+0x50>
 800efc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efc4:	68db      	ldr	r3, [r3, #12]
 800efc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800efca:	b9b8      	cbnz	r0, 800effc <_Balloc+0x68>
 800efcc:	2101      	movs	r1, #1
 800efce:	fa01 f605 	lsl.w	r6, r1, r5
 800efd2:	1d72      	adds	r2, r6, #5
 800efd4:	0092      	lsls	r2, r2, #2
 800efd6:	4620      	mov	r0, r4
 800efd8:	f000 fc9a 	bl	800f910 <_calloc_r>
 800efdc:	b160      	cbz	r0, 800eff8 <_Balloc+0x64>
 800efde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800efe2:	e00e      	b.n	800f002 <_Balloc+0x6e>
 800efe4:	2221      	movs	r2, #33	; 0x21
 800efe6:	2104      	movs	r1, #4
 800efe8:	4620      	mov	r0, r4
 800efea:	f000 fc91 	bl	800f910 <_calloc_r>
 800efee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eff0:	60f0      	str	r0, [r6, #12]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1e4      	bne.n	800efc2 <_Balloc+0x2e>
 800eff8:	2000      	movs	r0, #0
 800effa:	bd70      	pop	{r4, r5, r6, pc}
 800effc:	6802      	ldr	r2, [r0, #0]
 800effe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f002:	2300      	movs	r3, #0
 800f004:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f008:	e7f7      	b.n	800effa <_Balloc+0x66>
 800f00a:	bf00      	nop
 800f00c:	080111ac 	.word	0x080111ac
 800f010:	080111c3 	.word	0x080111c3

0800f014 <_Bfree>:
 800f014:	b570      	push	{r4, r5, r6, lr}
 800f016:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f018:	4605      	mov	r5, r0
 800f01a:	460c      	mov	r4, r1
 800f01c:	b976      	cbnz	r6, 800f03c <_Bfree+0x28>
 800f01e:	2010      	movs	r0, #16
 800f020:	f7fe fd36 	bl	800da90 <malloc>
 800f024:	4602      	mov	r2, r0
 800f026:	6268      	str	r0, [r5, #36]	; 0x24
 800f028:	b920      	cbnz	r0, 800f034 <_Bfree+0x20>
 800f02a:	4b09      	ldr	r3, [pc, #36]	; (800f050 <_Bfree+0x3c>)
 800f02c:	4809      	ldr	r0, [pc, #36]	; (800f054 <_Bfree+0x40>)
 800f02e:	218a      	movs	r1, #138	; 0x8a
 800f030:	f000 fcb0 	bl	800f994 <__assert_func>
 800f034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f038:	6006      	str	r6, [r0, #0]
 800f03a:	60c6      	str	r6, [r0, #12]
 800f03c:	b13c      	cbz	r4, 800f04e <_Bfree+0x3a>
 800f03e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f040:	6862      	ldr	r2, [r4, #4]
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f048:	6021      	str	r1, [r4, #0]
 800f04a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f04e:	bd70      	pop	{r4, r5, r6, pc}
 800f050:	080111ac 	.word	0x080111ac
 800f054:	080111c3 	.word	0x080111c3

0800f058 <__multadd>:
 800f058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f05c:	690d      	ldr	r5, [r1, #16]
 800f05e:	4607      	mov	r7, r0
 800f060:	460c      	mov	r4, r1
 800f062:	461e      	mov	r6, r3
 800f064:	f101 0c14 	add.w	ip, r1, #20
 800f068:	2000      	movs	r0, #0
 800f06a:	f8dc 3000 	ldr.w	r3, [ip]
 800f06e:	b299      	uxth	r1, r3
 800f070:	fb02 6101 	mla	r1, r2, r1, r6
 800f074:	0c1e      	lsrs	r6, r3, #16
 800f076:	0c0b      	lsrs	r3, r1, #16
 800f078:	fb02 3306 	mla	r3, r2, r6, r3
 800f07c:	b289      	uxth	r1, r1
 800f07e:	3001      	adds	r0, #1
 800f080:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f084:	4285      	cmp	r5, r0
 800f086:	f84c 1b04 	str.w	r1, [ip], #4
 800f08a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f08e:	dcec      	bgt.n	800f06a <__multadd+0x12>
 800f090:	b30e      	cbz	r6, 800f0d6 <__multadd+0x7e>
 800f092:	68a3      	ldr	r3, [r4, #8]
 800f094:	42ab      	cmp	r3, r5
 800f096:	dc19      	bgt.n	800f0cc <__multadd+0x74>
 800f098:	6861      	ldr	r1, [r4, #4]
 800f09a:	4638      	mov	r0, r7
 800f09c:	3101      	adds	r1, #1
 800f09e:	f7ff ff79 	bl	800ef94 <_Balloc>
 800f0a2:	4680      	mov	r8, r0
 800f0a4:	b928      	cbnz	r0, 800f0b2 <__multadd+0x5a>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	4b0c      	ldr	r3, [pc, #48]	; (800f0dc <__multadd+0x84>)
 800f0aa:	480d      	ldr	r0, [pc, #52]	; (800f0e0 <__multadd+0x88>)
 800f0ac:	21b5      	movs	r1, #181	; 0xb5
 800f0ae:	f000 fc71 	bl	800f994 <__assert_func>
 800f0b2:	6922      	ldr	r2, [r4, #16]
 800f0b4:	3202      	adds	r2, #2
 800f0b6:	f104 010c 	add.w	r1, r4, #12
 800f0ba:	0092      	lsls	r2, r2, #2
 800f0bc:	300c      	adds	r0, #12
 800f0be:	f7ff ff4f 	bl	800ef60 <memcpy>
 800f0c2:	4621      	mov	r1, r4
 800f0c4:	4638      	mov	r0, r7
 800f0c6:	f7ff ffa5 	bl	800f014 <_Bfree>
 800f0ca:	4644      	mov	r4, r8
 800f0cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f0d0:	3501      	adds	r5, #1
 800f0d2:	615e      	str	r6, [r3, #20]
 800f0d4:	6125      	str	r5, [r4, #16]
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0dc:	08011120 	.word	0x08011120
 800f0e0:	080111c3 	.word	0x080111c3

0800f0e4 <__s2b>:
 800f0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0e8:	460c      	mov	r4, r1
 800f0ea:	4615      	mov	r5, r2
 800f0ec:	461f      	mov	r7, r3
 800f0ee:	2209      	movs	r2, #9
 800f0f0:	3308      	adds	r3, #8
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	db09      	blt.n	800f114 <__s2b+0x30>
 800f100:	4630      	mov	r0, r6
 800f102:	f7ff ff47 	bl	800ef94 <_Balloc>
 800f106:	b940      	cbnz	r0, 800f11a <__s2b+0x36>
 800f108:	4602      	mov	r2, r0
 800f10a:	4b19      	ldr	r3, [pc, #100]	; (800f170 <__s2b+0x8c>)
 800f10c:	4819      	ldr	r0, [pc, #100]	; (800f174 <__s2b+0x90>)
 800f10e:	21ce      	movs	r1, #206	; 0xce
 800f110:	f000 fc40 	bl	800f994 <__assert_func>
 800f114:	0052      	lsls	r2, r2, #1
 800f116:	3101      	adds	r1, #1
 800f118:	e7f0      	b.n	800f0fc <__s2b+0x18>
 800f11a:	9b08      	ldr	r3, [sp, #32]
 800f11c:	6143      	str	r3, [r0, #20]
 800f11e:	2d09      	cmp	r5, #9
 800f120:	f04f 0301 	mov.w	r3, #1
 800f124:	6103      	str	r3, [r0, #16]
 800f126:	dd16      	ble.n	800f156 <__s2b+0x72>
 800f128:	f104 0909 	add.w	r9, r4, #9
 800f12c:	46c8      	mov	r8, r9
 800f12e:	442c      	add	r4, r5
 800f130:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f134:	4601      	mov	r1, r0
 800f136:	3b30      	subs	r3, #48	; 0x30
 800f138:	220a      	movs	r2, #10
 800f13a:	4630      	mov	r0, r6
 800f13c:	f7ff ff8c 	bl	800f058 <__multadd>
 800f140:	45a0      	cmp	r8, r4
 800f142:	d1f5      	bne.n	800f130 <__s2b+0x4c>
 800f144:	f1a5 0408 	sub.w	r4, r5, #8
 800f148:	444c      	add	r4, r9
 800f14a:	1b2d      	subs	r5, r5, r4
 800f14c:	1963      	adds	r3, r4, r5
 800f14e:	42bb      	cmp	r3, r7
 800f150:	db04      	blt.n	800f15c <__s2b+0x78>
 800f152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f156:	340a      	adds	r4, #10
 800f158:	2509      	movs	r5, #9
 800f15a:	e7f6      	b.n	800f14a <__s2b+0x66>
 800f15c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f160:	4601      	mov	r1, r0
 800f162:	3b30      	subs	r3, #48	; 0x30
 800f164:	220a      	movs	r2, #10
 800f166:	4630      	mov	r0, r6
 800f168:	f7ff ff76 	bl	800f058 <__multadd>
 800f16c:	e7ee      	b.n	800f14c <__s2b+0x68>
 800f16e:	bf00      	nop
 800f170:	08011120 	.word	0x08011120
 800f174:	080111c3 	.word	0x080111c3

0800f178 <__hi0bits>:
 800f178:	0c03      	lsrs	r3, r0, #16
 800f17a:	041b      	lsls	r3, r3, #16
 800f17c:	b9d3      	cbnz	r3, 800f1b4 <__hi0bits+0x3c>
 800f17e:	0400      	lsls	r0, r0, #16
 800f180:	2310      	movs	r3, #16
 800f182:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f186:	bf04      	itt	eq
 800f188:	0200      	lsleq	r0, r0, #8
 800f18a:	3308      	addeq	r3, #8
 800f18c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f190:	bf04      	itt	eq
 800f192:	0100      	lsleq	r0, r0, #4
 800f194:	3304      	addeq	r3, #4
 800f196:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f19a:	bf04      	itt	eq
 800f19c:	0080      	lsleq	r0, r0, #2
 800f19e:	3302      	addeq	r3, #2
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	db05      	blt.n	800f1b0 <__hi0bits+0x38>
 800f1a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f1a8:	f103 0301 	add.w	r3, r3, #1
 800f1ac:	bf08      	it	eq
 800f1ae:	2320      	moveq	r3, #32
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	4770      	bx	lr
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	e7e4      	b.n	800f182 <__hi0bits+0xa>

0800f1b8 <__lo0bits>:
 800f1b8:	6803      	ldr	r3, [r0, #0]
 800f1ba:	f013 0207 	ands.w	r2, r3, #7
 800f1be:	4601      	mov	r1, r0
 800f1c0:	d00b      	beq.n	800f1da <__lo0bits+0x22>
 800f1c2:	07da      	lsls	r2, r3, #31
 800f1c4:	d423      	bmi.n	800f20e <__lo0bits+0x56>
 800f1c6:	0798      	lsls	r0, r3, #30
 800f1c8:	bf49      	itett	mi
 800f1ca:	085b      	lsrmi	r3, r3, #1
 800f1cc:	089b      	lsrpl	r3, r3, #2
 800f1ce:	2001      	movmi	r0, #1
 800f1d0:	600b      	strmi	r3, [r1, #0]
 800f1d2:	bf5c      	itt	pl
 800f1d4:	600b      	strpl	r3, [r1, #0]
 800f1d6:	2002      	movpl	r0, #2
 800f1d8:	4770      	bx	lr
 800f1da:	b298      	uxth	r0, r3
 800f1dc:	b9a8      	cbnz	r0, 800f20a <__lo0bits+0x52>
 800f1de:	0c1b      	lsrs	r3, r3, #16
 800f1e0:	2010      	movs	r0, #16
 800f1e2:	b2da      	uxtb	r2, r3
 800f1e4:	b90a      	cbnz	r2, 800f1ea <__lo0bits+0x32>
 800f1e6:	3008      	adds	r0, #8
 800f1e8:	0a1b      	lsrs	r3, r3, #8
 800f1ea:	071a      	lsls	r2, r3, #28
 800f1ec:	bf04      	itt	eq
 800f1ee:	091b      	lsreq	r3, r3, #4
 800f1f0:	3004      	addeq	r0, #4
 800f1f2:	079a      	lsls	r2, r3, #30
 800f1f4:	bf04      	itt	eq
 800f1f6:	089b      	lsreq	r3, r3, #2
 800f1f8:	3002      	addeq	r0, #2
 800f1fa:	07da      	lsls	r2, r3, #31
 800f1fc:	d403      	bmi.n	800f206 <__lo0bits+0x4e>
 800f1fe:	085b      	lsrs	r3, r3, #1
 800f200:	f100 0001 	add.w	r0, r0, #1
 800f204:	d005      	beq.n	800f212 <__lo0bits+0x5a>
 800f206:	600b      	str	r3, [r1, #0]
 800f208:	4770      	bx	lr
 800f20a:	4610      	mov	r0, r2
 800f20c:	e7e9      	b.n	800f1e2 <__lo0bits+0x2a>
 800f20e:	2000      	movs	r0, #0
 800f210:	4770      	bx	lr
 800f212:	2020      	movs	r0, #32
 800f214:	4770      	bx	lr
	...

0800f218 <__i2b>:
 800f218:	b510      	push	{r4, lr}
 800f21a:	460c      	mov	r4, r1
 800f21c:	2101      	movs	r1, #1
 800f21e:	f7ff feb9 	bl	800ef94 <_Balloc>
 800f222:	4602      	mov	r2, r0
 800f224:	b928      	cbnz	r0, 800f232 <__i2b+0x1a>
 800f226:	4b05      	ldr	r3, [pc, #20]	; (800f23c <__i2b+0x24>)
 800f228:	4805      	ldr	r0, [pc, #20]	; (800f240 <__i2b+0x28>)
 800f22a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f22e:	f000 fbb1 	bl	800f994 <__assert_func>
 800f232:	2301      	movs	r3, #1
 800f234:	6144      	str	r4, [r0, #20]
 800f236:	6103      	str	r3, [r0, #16]
 800f238:	bd10      	pop	{r4, pc}
 800f23a:	bf00      	nop
 800f23c:	08011120 	.word	0x08011120
 800f240:	080111c3 	.word	0x080111c3

0800f244 <__multiply>:
 800f244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f248:	4691      	mov	r9, r2
 800f24a:	690a      	ldr	r2, [r1, #16]
 800f24c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f250:	429a      	cmp	r2, r3
 800f252:	bfb8      	it	lt
 800f254:	460b      	movlt	r3, r1
 800f256:	460c      	mov	r4, r1
 800f258:	bfbc      	itt	lt
 800f25a:	464c      	movlt	r4, r9
 800f25c:	4699      	movlt	r9, r3
 800f25e:	6927      	ldr	r7, [r4, #16]
 800f260:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f264:	68a3      	ldr	r3, [r4, #8]
 800f266:	6861      	ldr	r1, [r4, #4]
 800f268:	eb07 060a 	add.w	r6, r7, sl
 800f26c:	42b3      	cmp	r3, r6
 800f26e:	b085      	sub	sp, #20
 800f270:	bfb8      	it	lt
 800f272:	3101      	addlt	r1, #1
 800f274:	f7ff fe8e 	bl	800ef94 <_Balloc>
 800f278:	b930      	cbnz	r0, 800f288 <__multiply+0x44>
 800f27a:	4602      	mov	r2, r0
 800f27c:	4b44      	ldr	r3, [pc, #272]	; (800f390 <__multiply+0x14c>)
 800f27e:	4845      	ldr	r0, [pc, #276]	; (800f394 <__multiply+0x150>)
 800f280:	f240 115d 	movw	r1, #349	; 0x15d
 800f284:	f000 fb86 	bl	800f994 <__assert_func>
 800f288:	f100 0514 	add.w	r5, r0, #20
 800f28c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f290:	462b      	mov	r3, r5
 800f292:	2200      	movs	r2, #0
 800f294:	4543      	cmp	r3, r8
 800f296:	d321      	bcc.n	800f2dc <__multiply+0x98>
 800f298:	f104 0314 	add.w	r3, r4, #20
 800f29c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f2a0:	f109 0314 	add.w	r3, r9, #20
 800f2a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f2a8:	9202      	str	r2, [sp, #8]
 800f2aa:	1b3a      	subs	r2, r7, r4
 800f2ac:	3a15      	subs	r2, #21
 800f2ae:	f022 0203 	bic.w	r2, r2, #3
 800f2b2:	3204      	adds	r2, #4
 800f2b4:	f104 0115 	add.w	r1, r4, #21
 800f2b8:	428f      	cmp	r7, r1
 800f2ba:	bf38      	it	cc
 800f2bc:	2204      	movcc	r2, #4
 800f2be:	9201      	str	r2, [sp, #4]
 800f2c0:	9a02      	ldr	r2, [sp, #8]
 800f2c2:	9303      	str	r3, [sp, #12]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d80c      	bhi.n	800f2e2 <__multiply+0x9e>
 800f2c8:	2e00      	cmp	r6, #0
 800f2ca:	dd03      	ble.n	800f2d4 <__multiply+0x90>
 800f2cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d05a      	beq.n	800f38a <__multiply+0x146>
 800f2d4:	6106      	str	r6, [r0, #16]
 800f2d6:	b005      	add	sp, #20
 800f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2dc:	f843 2b04 	str.w	r2, [r3], #4
 800f2e0:	e7d8      	b.n	800f294 <__multiply+0x50>
 800f2e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f2e6:	f1ba 0f00 	cmp.w	sl, #0
 800f2ea:	d024      	beq.n	800f336 <__multiply+0xf2>
 800f2ec:	f104 0e14 	add.w	lr, r4, #20
 800f2f0:	46a9      	mov	r9, r5
 800f2f2:	f04f 0c00 	mov.w	ip, #0
 800f2f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f2fa:	f8d9 1000 	ldr.w	r1, [r9]
 800f2fe:	fa1f fb82 	uxth.w	fp, r2
 800f302:	b289      	uxth	r1, r1
 800f304:	fb0a 110b 	mla	r1, sl, fp, r1
 800f308:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f30c:	f8d9 2000 	ldr.w	r2, [r9]
 800f310:	4461      	add	r1, ip
 800f312:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f316:	fb0a c20b 	mla	r2, sl, fp, ip
 800f31a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f31e:	b289      	uxth	r1, r1
 800f320:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f324:	4577      	cmp	r7, lr
 800f326:	f849 1b04 	str.w	r1, [r9], #4
 800f32a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f32e:	d8e2      	bhi.n	800f2f6 <__multiply+0xb2>
 800f330:	9a01      	ldr	r2, [sp, #4]
 800f332:	f845 c002 	str.w	ip, [r5, r2]
 800f336:	9a03      	ldr	r2, [sp, #12]
 800f338:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f33c:	3304      	adds	r3, #4
 800f33e:	f1b9 0f00 	cmp.w	r9, #0
 800f342:	d020      	beq.n	800f386 <__multiply+0x142>
 800f344:	6829      	ldr	r1, [r5, #0]
 800f346:	f104 0c14 	add.w	ip, r4, #20
 800f34a:	46ae      	mov	lr, r5
 800f34c:	f04f 0a00 	mov.w	sl, #0
 800f350:	f8bc b000 	ldrh.w	fp, [ip]
 800f354:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f358:	fb09 220b 	mla	r2, r9, fp, r2
 800f35c:	4492      	add	sl, r2
 800f35e:	b289      	uxth	r1, r1
 800f360:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f364:	f84e 1b04 	str.w	r1, [lr], #4
 800f368:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f36c:	f8be 1000 	ldrh.w	r1, [lr]
 800f370:	0c12      	lsrs	r2, r2, #16
 800f372:	fb09 1102 	mla	r1, r9, r2, r1
 800f376:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f37a:	4567      	cmp	r7, ip
 800f37c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f380:	d8e6      	bhi.n	800f350 <__multiply+0x10c>
 800f382:	9a01      	ldr	r2, [sp, #4]
 800f384:	50a9      	str	r1, [r5, r2]
 800f386:	3504      	adds	r5, #4
 800f388:	e79a      	b.n	800f2c0 <__multiply+0x7c>
 800f38a:	3e01      	subs	r6, #1
 800f38c:	e79c      	b.n	800f2c8 <__multiply+0x84>
 800f38e:	bf00      	nop
 800f390:	08011120 	.word	0x08011120
 800f394:	080111c3 	.word	0x080111c3

0800f398 <__pow5mult>:
 800f398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f39c:	4615      	mov	r5, r2
 800f39e:	f012 0203 	ands.w	r2, r2, #3
 800f3a2:	4606      	mov	r6, r0
 800f3a4:	460f      	mov	r7, r1
 800f3a6:	d007      	beq.n	800f3b8 <__pow5mult+0x20>
 800f3a8:	4c25      	ldr	r4, [pc, #148]	; (800f440 <__pow5mult+0xa8>)
 800f3aa:	3a01      	subs	r2, #1
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f3b2:	f7ff fe51 	bl	800f058 <__multadd>
 800f3b6:	4607      	mov	r7, r0
 800f3b8:	10ad      	asrs	r5, r5, #2
 800f3ba:	d03d      	beq.n	800f438 <__pow5mult+0xa0>
 800f3bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f3be:	b97c      	cbnz	r4, 800f3e0 <__pow5mult+0x48>
 800f3c0:	2010      	movs	r0, #16
 800f3c2:	f7fe fb65 	bl	800da90 <malloc>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	6270      	str	r0, [r6, #36]	; 0x24
 800f3ca:	b928      	cbnz	r0, 800f3d8 <__pow5mult+0x40>
 800f3cc:	4b1d      	ldr	r3, [pc, #116]	; (800f444 <__pow5mult+0xac>)
 800f3ce:	481e      	ldr	r0, [pc, #120]	; (800f448 <__pow5mult+0xb0>)
 800f3d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f3d4:	f000 fade 	bl	800f994 <__assert_func>
 800f3d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f3dc:	6004      	str	r4, [r0, #0]
 800f3de:	60c4      	str	r4, [r0, #12]
 800f3e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f3e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f3e8:	b94c      	cbnz	r4, 800f3fe <__pow5mult+0x66>
 800f3ea:	f240 2171 	movw	r1, #625	; 0x271
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	f7ff ff12 	bl	800f218 <__i2b>
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	6003      	str	r3, [r0, #0]
 800f3fe:	f04f 0900 	mov.w	r9, #0
 800f402:	07eb      	lsls	r3, r5, #31
 800f404:	d50a      	bpl.n	800f41c <__pow5mult+0x84>
 800f406:	4639      	mov	r1, r7
 800f408:	4622      	mov	r2, r4
 800f40a:	4630      	mov	r0, r6
 800f40c:	f7ff ff1a 	bl	800f244 <__multiply>
 800f410:	4639      	mov	r1, r7
 800f412:	4680      	mov	r8, r0
 800f414:	4630      	mov	r0, r6
 800f416:	f7ff fdfd 	bl	800f014 <_Bfree>
 800f41a:	4647      	mov	r7, r8
 800f41c:	106d      	asrs	r5, r5, #1
 800f41e:	d00b      	beq.n	800f438 <__pow5mult+0xa0>
 800f420:	6820      	ldr	r0, [r4, #0]
 800f422:	b938      	cbnz	r0, 800f434 <__pow5mult+0x9c>
 800f424:	4622      	mov	r2, r4
 800f426:	4621      	mov	r1, r4
 800f428:	4630      	mov	r0, r6
 800f42a:	f7ff ff0b 	bl	800f244 <__multiply>
 800f42e:	6020      	str	r0, [r4, #0]
 800f430:	f8c0 9000 	str.w	r9, [r0]
 800f434:	4604      	mov	r4, r0
 800f436:	e7e4      	b.n	800f402 <__pow5mult+0x6a>
 800f438:	4638      	mov	r0, r7
 800f43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f43e:	bf00      	nop
 800f440:	08011310 	.word	0x08011310
 800f444:	080111ac 	.word	0x080111ac
 800f448:	080111c3 	.word	0x080111c3

0800f44c <__lshift>:
 800f44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f450:	460c      	mov	r4, r1
 800f452:	6849      	ldr	r1, [r1, #4]
 800f454:	6923      	ldr	r3, [r4, #16]
 800f456:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f45a:	68a3      	ldr	r3, [r4, #8]
 800f45c:	4607      	mov	r7, r0
 800f45e:	4691      	mov	r9, r2
 800f460:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f464:	f108 0601 	add.w	r6, r8, #1
 800f468:	42b3      	cmp	r3, r6
 800f46a:	db0b      	blt.n	800f484 <__lshift+0x38>
 800f46c:	4638      	mov	r0, r7
 800f46e:	f7ff fd91 	bl	800ef94 <_Balloc>
 800f472:	4605      	mov	r5, r0
 800f474:	b948      	cbnz	r0, 800f48a <__lshift+0x3e>
 800f476:	4602      	mov	r2, r0
 800f478:	4b2a      	ldr	r3, [pc, #168]	; (800f524 <__lshift+0xd8>)
 800f47a:	482b      	ldr	r0, [pc, #172]	; (800f528 <__lshift+0xdc>)
 800f47c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f480:	f000 fa88 	bl	800f994 <__assert_func>
 800f484:	3101      	adds	r1, #1
 800f486:	005b      	lsls	r3, r3, #1
 800f488:	e7ee      	b.n	800f468 <__lshift+0x1c>
 800f48a:	2300      	movs	r3, #0
 800f48c:	f100 0114 	add.w	r1, r0, #20
 800f490:	f100 0210 	add.w	r2, r0, #16
 800f494:	4618      	mov	r0, r3
 800f496:	4553      	cmp	r3, sl
 800f498:	db37      	blt.n	800f50a <__lshift+0xbe>
 800f49a:	6920      	ldr	r0, [r4, #16]
 800f49c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f4a0:	f104 0314 	add.w	r3, r4, #20
 800f4a4:	f019 091f 	ands.w	r9, r9, #31
 800f4a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f4ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f4b0:	d02f      	beq.n	800f512 <__lshift+0xc6>
 800f4b2:	f1c9 0e20 	rsb	lr, r9, #32
 800f4b6:	468a      	mov	sl, r1
 800f4b8:	f04f 0c00 	mov.w	ip, #0
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	fa02 f209 	lsl.w	r2, r2, r9
 800f4c2:	ea42 020c 	orr.w	r2, r2, ip
 800f4c6:	f84a 2b04 	str.w	r2, [sl], #4
 800f4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4ce:	4298      	cmp	r0, r3
 800f4d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f4d4:	d8f2      	bhi.n	800f4bc <__lshift+0x70>
 800f4d6:	1b03      	subs	r3, r0, r4
 800f4d8:	3b15      	subs	r3, #21
 800f4da:	f023 0303 	bic.w	r3, r3, #3
 800f4de:	3304      	adds	r3, #4
 800f4e0:	f104 0215 	add.w	r2, r4, #21
 800f4e4:	4290      	cmp	r0, r2
 800f4e6:	bf38      	it	cc
 800f4e8:	2304      	movcc	r3, #4
 800f4ea:	f841 c003 	str.w	ip, [r1, r3]
 800f4ee:	f1bc 0f00 	cmp.w	ip, #0
 800f4f2:	d001      	beq.n	800f4f8 <__lshift+0xac>
 800f4f4:	f108 0602 	add.w	r6, r8, #2
 800f4f8:	3e01      	subs	r6, #1
 800f4fa:	4638      	mov	r0, r7
 800f4fc:	612e      	str	r6, [r5, #16]
 800f4fe:	4621      	mov	r1, r4
 800f500:	f7ff fd88 	bl	800f014 <_Bfree>
 800f504:	4628      	mov	r0, r5
 800f506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f50a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f50e:	3301      	adds	r3, #1
 800f510:	e7c1      	b.n	800f496 <__lshift+0x4a>
 800f512:	3904      	subs	r1, #4
 800f514:	f853 2b04 	ldr.w	r2, [r3], #4
 800f518:	f841 2f04 	str.w	r2, [r1, #4]!
 800f51c:	4298      	cmp	r0, r3
 800f51e:	d8f9      	bhi.n	800f514 <__lshift+0xc8>
 800f520:	e7ea      	b.n	800f4f8 <__lshift+0xac>
 800f522:	bf00      	nop
 800f524:	08011120 	.word	0x08011120
 800f528:	080111c3 	.word	0x080111c3

0800f52c <__mcmp>:
 800f52c:	b530      	push	{r4, r5, lr}
 800f52e:	6902      	ldr	r2, [r0, #16]
 800f530:	690c      	ldr	r4, [r1, #16]
 800f532:	1b12      	subs	r2, r2, r4
 800f534:	d10e      	bne.n	800f554 <__mcmp+0x28>
 800f536:	f100 0314 	add.w	r3, r0, #20
 800f53a:	3114      	adds	r1, #20
 800f53c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f540:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f544:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f548:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f54c:	42a5      	cmp	r5, r4
 800f54e:	d003      	beq.n	800f558 <__mcmp+0x2c>
 800f550:	d305      	bcc.n	800f55e <__mcmp+0x32>
 800f552:	2201      	movs	r2, #1
 800f554:	4610      	mov	r0, r2
 800f556:	bd30      	pop	{r4, r5, pc}
 800f558:	4283      	cmp	r3, r0
 800f55a:	d3f3      	bcc.n	800f544 <__mcmp+0x18>
 800f55c:	e7fa      	b.n	800f554 <__mcmp+0x28>
 800f55e:	f04f 32ff 	mov.w	r2, #4294967295
 800f562:	e7f7      	b.n	800f554 <__mcmp+0x28>

0800f564 <__mdiff>:
 800f564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f568:	460c      	mov	r4, r1
 800f56a:	4606      	mov	r6, r0
 800f56c:	4611      	mov	r1, r2
 800f56e:	4620      	mov	r0, r4
 800f570:	4690      	mov	r8, r2
 800f572:	f7ff ffdb 	bl	800f52c <__mcmp>
 800f576:	1e05      	subs	r5, r0, #0
 800f578:	d110      	bne.n	800f59c <__mdiff+0x38>
 800f57a:	4629      	mov	r1, r5
 800f57c:	4630      	mov	r0, r6
 800f57e:	f7ff fd09 	bl	800ef94 <_Balloc>
 800f582:	b930      	cbnz	r0, 800f592 <__mdiff+0x2e>
 800f584:	4b3a      	ldr	r3, [pc, #232]	; (800f670 <__mdiff+0x10c>)
 800f586:	4602      	mov	r2, r0
 800f588:	f240 2132 	movw	r1, #562	; 0x232
 800f58c:	4839      	ldr	r0, [pc, #228]	; (800f674 <__mdiff+0x110>)
 800f58e:	f000 fa01 	bl	800f994 <__assert_func>
 800f592:	2301      	movs	r3, #1
 800f594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f59c:	bfa4      	itt	ge
 800f59e:	4643      	movge	r3, r8
 800f5a0:	46a0      	movge	r8, r4
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f5a8:	bfa6      	itte	ge
 800f5aa:	461c      	movge	r4, r3
 800f5ac:	2500      	movge	r5, #0
 800f5ae:	2501      	movlt	r5, #1
 800f5b0:	f7ff fcf0 	bl	800ef94 <_Balloc>
 800f5b4:	b920      	cbnz	r0, 800f5c0 <__mdiff+0x5c>
 800f5b6:	4b2e      	ldr	r3, [pc, #184]	; (800f670 <__mdiff+0x10c>)
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f5be:	e7e5      	b.n	800f58c <__mdiff+0x28>
 800f5c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f5c4:	6926      	ldr	r6, [r4, #16]
 800f5c6:	60c5      	str	r5, [r0, #12]
 800f5c8:	f104 0914 	add.w	r9, r4, #20
 800f5cc:	f108 0514 	add.w	r5, r8, #20
 800f5d0:	f100 0e14 	add.w	lr, r0, #20
 800f5d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f5d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f5dc:	f108 0210 	add.w	r2, r8, #16
 800f5e0:	46f2      	mov	sl, lr
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800f5e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f5ec:	fa1f f883 	uxth.w	r8, r3
 800f5f0:	fa11 f18b 	uxtah	r1, r1, fp
 800f5f4:	0c1b      	lsrs	r3, r3, #16
 800f5f6:	eba1 0808 	sub.w	r8, r1, r8
 800f5fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f5fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f602:	fa1f f888 	uxth.w	r8, r8
 800f606:	1419      	asrs	r1, r3, #16
 800f608:	454e      	cmp	r6, r9
 800f60a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f60e:	f84a 3b04 	str.w	r3, [sl], #4
 800f612:	d8e7      	bhi.n	800f5e4 <__mdiff+0x80>
 800f614:	1b33      	subs	r3, r6, r4
 800f616:	3b15      	subs	r3, #21
 800f618:	f023 0303 	bic.w	r3, r3, #3
 800f61c:	3304      	adds	r3, #4
 800f61e:	3415      	adds	r4, #21
 800f620:	42a6      	cmp	r6, r4
 800f622:	bf38      	it	cc
 800f624:	2304      	movcc	r3, #4
 800f626:	441d      	add	r5, r3
 800f628:	4473      	add	r3, lr
 800f62a:	469e      	mov	lr, r3
 800f62c:	462e      	mov	r6, r5
 800f62e:	4566      	cmp	r6, ip
 800f630:	d30e      	bcc.n	800f650 <__mdiff+0xec>
 800f632:	f10c 0203 	add.w	r2, ip, #3
 800f636:	1b52      	subs	r2, r2, r5
 800f638:	f022 0203 	bic.w	r2, r2, #3
 800f63c:	3d03      	subs	r5, #3
 800f63e:	45ac      	cmp	ip, r5
 800f640:	bf38      	it	cc
 800f642:	2200      	movcc	r2, #0
 800f644:	441a      	add	r2, r3
 800f646:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f64a:	b17b      	cbz	r3, 800f66c <__mdiff+0x108>
 800f64c:	6107      	str	r7, [r0, #16]
 800f64e:	e7a3      	b.n	800f598 <__mdiff+0x34>
 800f650:	f856 8b04 	ldr.w	r8, [r6], #4
 800f654:	fa11 f288 	uxtah	r2, r1, r8
 800f658:	1414      	asrs	r4, r2, #16
 800f65a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f65e:	b292      	uxth	r2, r2
 800f660:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f664:	f84e 2b04 	str.w	r2, [lr], #4
 800f668:	1421      	asrs	r1, r4, #16
 800f66a:	e7e0      	b.n	800f62e <__mdiff+0xca>
 800f66c:	3f01      	subs	r7, #1
 800f66e:	e7ea      	b.n	800f646 <__mdiff+0xe2>
 800f670:	08011120 	.word	0x08011120
 800f674:	080111c3 	.word	0x080111c3

0800f678 <__ulp>:
 800f678:	b082      	sub	sp, #8
 800f67a:	ed8d 0b00 	vstr	d0, [sp]
 800f67e:	9b01      	ldr	r3, [sp, #4]
 800f680:	4912      	ldr	r1, [pc, #72]	; (800f6cc <__ulp+0x54>)
 800f682:	4019      	ands	r1, r3
 800f684:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f688:	2900      	cmp	r1, #0
 800f68a:	dd05      	ble.n	800f698 <__ulp+0x20>
 800f68c:	2200      	movs	r2, #0
 800f68e:	460b      	mov	r3, r1
 800f690:	ec43 2b10 	vmov	d0, r2, r3
 800f694:	b002      	add	sp, #8
 800f696:	4770      	bx	lr
 800f698:	4249      	negs	r1, r1
 800f69a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f69e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f6a2:	f04f 0200 	mov.w	r2, #0
 800f6a6:	f04f 0300 	mov.w	r3, #0
 800f6aa:	da04      	bge.n	800f6b6 <__ulp+0x3e>
 800f6ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f6b0:	fa41 f300 	asr.w	r3, r1, r0
 800f6b4:	e7ec      	b.n	800f690 <__ulp+0x18>
 800f6b6:	f1a0 0114 	sub.w	r1, r0, #20
 800f6ba:	291e      	cmp	r1, #30
 800f6bc:	bfda      	itte	le
 800f6be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f6c2:	fa20 f101 	lsrle.w	r1, r0, r1
 800f6c6:	2101      	movgt	r1, #1
 800f6c8:	460a      	mov	r2, r1
 800f6ca:	e7e1      	b.n	800f690 <__ulp+0x18>
 800f6cc:	7ff00000 	.word	0x7ff00000

0800f6d0 <__b2d>:
 800f6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d2:	6905      	ldr	r5, [r0, #16]
 800f6d4:	f100 0714 	add.w	r7, r0, #20
 800f6d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f6dc:	1f2e      	subs	r6, r5, #4
 800f6de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f7ff fd48 	bl	800f178 <__hi0bits>
 800f6e8:	f1c0 0320 	rsb	r3, r0, #32
 800f6ec:	280a      	cmp	r0, #10
 800f6ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f76c <__b2d+0x9c>
 800f6f2:	600b      	str	r3, [r1, #0]
 800f6f4:	dc14      	bgt.n	800f720 <__b2d+0x50>
 800f6f6:	f1c0 0e0b 	rsb	lr, r0, #11
 800f6fa:	fa24 f10e 	lsr.w	r1, r4, lr
 800f6fe:	42b7      	cmp	r7, r6
 800f700:	ea41 030c 	orr.w	r3, r1, ip
 800f704:	bf34      	ite	cc
 800f706:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f70a:	2100      	movcs	r1, #0
 800f70c:	3015      	adds	r0, #21
 800f70e:	fa04 f000 	lsl.w	r0, r4, r0
 800f712:	fa21 f10e 	lsr.w	r1, r1, lr
 800f716:	ea40 0201 	orr.w	r2, r0, r1
 800f71a:	ec43 2b10 	vmov	d0, r2, r3
 800f71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f720:	42b7      	cmp	r7, r6
 800f722:	bf3a      	itte	cc
 800f724:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f728:	f1a5 0608 	subcc.w	r6, r5, #8
 800f72c:	2100      	movcs	r1, #0
 800f72e:	380b      	subs	r0, #11
 800f730:	d017      	beq.n	800f762 <__b2d+0x92>
 800f732:	f1c0 0c20 	rsb	ip, r0, #32
 800f736:	fa04 f500 	lsl.w	r5, r4, r0
 800f73a:	42be      	cmp	r6, r7
 800f73c:	fa21 f40c 	lsr.w	r4, r1, ip
 800f740:	ea45 0504 	orr.w	r5, r5, r4
 800f744:	bf8c      	ite	hi
 800f746:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f74a:	2400      	movls	r4, #0
 800f74c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f750:	fa01 f000 	lsl.w	r0, r1, r0
 800f754:	fa24 f40c 	lsr.w	r4, r4, ip
 800f758:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f75c:	ea40 0204 	orr.w	r2, r0, r4
 800f760:	e7db      	b.n	800f71a <__b2d+0x4a>
 800f762:	ea44 030c 	orr.w	r3, r4, ip
 800f766:	460a      	mov	r2, r1
 800f768:	e7d7      	b.n	800f71a <__b2d+0x4a>
 800f76a:	bf00      	nop
 800f76c:	3ff00000 	.word	0x3ff00000

0800f770 <__d2b>:
 800f770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f774:	4689      	mov	r9, r1
 800f776:	2101      	movs	r1, #1
 800f778:	ec57 6b10 	vmov	r6, r7, d0
 800f77c:	4690      	mov	r8, r2
 800f77e:	f7ff fc09 	bl	800ef94 <_Balloc>
 800f782:	4604      	mov	r4, r0
 800f784:	b930      	cbnz	r0, 800f794 <__d2b+0x24>
 800f786:	4602      	mov	r2, r0
 800f788:	4b25      	ldr	r3, [pc, #148]	; (800f820 <__d2b+0xb0>)
 800f78a:	4826      	ldr	r0, [pc, #152]	; (800f824 <__d2b+0xb4>)
 800f78c:	f240 310a 	movw	r1, #778	; 0x30a
 800f790:	f000 f900 	bl	800f994 <__assert_func>
 800f794:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f798:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f79c:	bb35      	cbnz	r5, 800f7ec <__d2b+0x7c>
 800f79e:	2e00      	cmp	r6, #0
 800f7a0:	9301      	str	r3, [sp, #4]
 800f7a2:	d028      	beq.n	800f7f6 <__d2b+0x86>
 800f7a4:	4668      	mov	r0, sp
 800f7a6:	9600      	str	r6, [sp, #0]
 800f7a8:	f7ff fd06 	bl	800f1b8 <__lo0bits>
 800f7ac:	9900      	ldr	r1, [sp, #0]
 800f7ae:	b300      	cbz	r0, 800f7f2 <__d2b+0x82>
 800f7b0:	9a01      	ldr	r2, [sp, #4]
 800f7b2:	f1c0 0320 	rsb	r3, r0, #32
 800f7b6:	fa02 f303 	lsl.w	r3, r2, r3
 800f7ba:	430b      	orrs	r3, r1
 800f7bc:	40c2      	lsrs	r2, r0
 800f7be:	6163      	str	r3, [r4, #20]
 800f7c0:	9201      	str	r2, [sp, #4]
 800f7c2:	9b01      	ldr	r3, [sp, #4]
 800f7c4:	61a3      	str	r3, [r4, #24]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	bf14      	ite	ne
 800f7ca:	2202      	movne	r2, #2
 800f7cc:	2201      	moveq	r2, #1
 800f7ce:	6122      	str	r2, [r4, #16]
 800f7d0:	b1d5      	cbz	r5, 800f808 <__d2b+0x98>
 800f7d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f7d6:	4405      	add	r5, r0
 800f7d8:	f8c9 5000 	str.w	r5, [r9]
 800f7dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f7e0:	f8c8 0000 	str.w	r0, [r8]
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	b003      	add	sp, #12
 800f7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f7f0:	e7d5      	b.n	800f79e <__d2b+0x2e>
 800f7f2:	6161      	str	r1, [r4, #20]
 800f7f4:	e7e5      	b.n	800f7c2 <__d2b+0x52>
 800f7f6:	a801      	add	r0, sp, #4
 800f7f8:	f7ff fcde 	bl	800f1b8 <__lo0bits>
 800f7fc:	9b01      	ldr	r3, [sp, #4]
 800f7fe:	6163      	str	r3, [r4, #20]
 800f800:	2201      	movs	r2, #1
 800f802:	6122      	str	r2, [r4, #16]
 800f804:	3020      	adds	r0, #32
 800f806:	e7e3      	b.n	800f7d0 <__d2b+0x60>
 800f808:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f80c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f810:	f8c9 0000 	str.w	r0, [r9]
 800f814:	6918      	ldr	r0, [r3, #16]
 800f816:	f7ff fcaf 	bl	800f178 <__hi0bits>
 800f81a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f81e:	e7df      	b.n	800f7e0 <__d2b+0x70>
 800f820:	08011120 	.word	0x08011120
 800f824:	080111c3 	.word	0x080111c3

0800f828 <__ratio>:
 800f828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82c:	4688      	mov	r8, r1
 800f82e:	4669      	mov	r1, sp
 800f830:	4681      	mov	r9, r0
 800f832:	f7ff ff4d 	bl	800f6d0 <__b2d>
 800f836:	a901      	add	r1, sp, #4
 800f838:	4640      	mov	r0, r8
 800f83a:	ec55 4b10 	vmov	r4, r5, d0
 800f83e:	ee10 aa10 	vmov	sl, s0
 800f842:	f7ff ff45 	bl	800f6d0 <__b2d>
 800f846:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f84a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f84e:	1a59      	subs	r1, r3, r1
 800f850:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f854:	1ad3      	subs	r3, r2, r3
 800f856:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f85a:	ec57 6b10 	vmov	r6, r7, d0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	bfd6      	itet	le
 800f862:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f866:	462a      	movgt	r2, r5
 800f868:	463a      	movle	r2, r7
 800f86a:	46ab      	mov	fp, r5
 800f86c:	bfd6      	itet	le
 800f86e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800f872:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800f876:	ee00 3a90 	vmovle	s1, r3
 800f87a:	ec4b ab17 	vmov	d7, sl, fp
 800f87e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800f882:	b003      	add	sp, #12
 800f884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f888 <__copybits>:
 800f888:	3901      	subs	r1, #1
 800f88a:	b570      	push	{r4, r5, r6, lr}
 800f88c:	1149      	asrs	r1, r1, #5
 800f88e:	6914      	ldr	r4, [r2, #16]
 800f890:	3101      	adds	r1, #1
 800f892:	f102 0314 	add.w	r3, r2, #20
 800f896:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f89a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f89e:	1f05      	subs	r5, r0, #4
 800f8a0:	42a3      	cmp	r3, r4
 800f8a2:	d30c      	bcc.n	800f8be <__copybits+0x36>
 800f8a4:	1aa3      	subs	r3, r4, r2
 800f8a6:	3b11      	subs	r3, #17
 800f8a8:	f023 0303 	bic.w	r3, r3, #3
 800f8ac:	3211      	adds	r2, #17
 800f8ae:	42a2      	cmp	r2, r4
 800f8b0:	bf88      	it	hi
 800f8b2:	2300      	movhi	r3, #0
 800f8b4:	4418      	add	r0, r3
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	4288      	cmp	r0, r1
 800f8ba:	d305      	bcc.n	800f8c8 <__copybits+0x40>
 800f8bc:	bd70      	pop	{r4, r5, r6, pc}
 800f8be:	f853 6b04 	ldr.w	r6, [r3], #4
 800f8c2:	f845 6f04 	str.w	r6, [r5, #4]!
 800f8c6:	e7eb      	b.n	800f8a0 <__copybits+0x18>
 800f8c8:	f840 3b04 	str.w	r3, [r0], #4
 800f8cc:	e7f4      	b.n	800f8b8 <__copybits+0x30>

0800f8ce <__any_on>:
 800f8ce:	f100 0214 	add.w	r2, r0, #20
 800f8d2:	6900      	ldr	r0, [r0, #16]
 800f8d4:	114b      	asrs	r3, r1, #5
 800f8d6:	4298      	cmp	r0, r3
 800f8d8:	b510      	push	{r4, lr}
 800f8da:	db11      	blt.n	800f900 <__any_on+0x32>
 800f8dc:	dd0a      	ble.n	800f8f4 <__any_on+0x26>
 800f8de:	f011 011f 	ands.w	r1, r1, #31
 800f8e2:	d007      	beq.n	800f8f4 <__any_on+0x26>
 800f8e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f8e8:	fa24 f001 	lsr.w	r0, r4, r1
 800f8ec:	fa00 f101 	lsl.w	r1, r0, r1
 800f8f0:	428c      	cmp	r4, r1
 800f8f2:	d10b      	bne.n	800f90c <__any_on+0x3e>
 800f8f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d803      	bhi.n	800f904 <__any_on+0x36>
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	bd10      	pop	{r4, pc}
 800f900:	4603      	mov	r3, r0
 800f902:	e7f7      	b.n	800f8f4 <__any_on+0x26>
 800f904:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f908:	2900      	cmp	r1, #0
 800f90a:	d0f5      	beq.n	800f8f8 <__any_on+0x2a>
 800f90c:	2001      	movs	r0, #1
 800f90e:	e7f6      	b.n	800f8fe <__any_on+0x30>

0800f910 <_calloc_r>:
 800f910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f912:	fba1 2402 	umull	r2, r4, r1, r2
 800f916:	b94c      	cbnz	r4, 800f92c <_calloc_r+0x1c>
 800f918:	4611      	mov	r1, r2
 800f91a:	9201      	str	r2, [sp, #4]
 800f91c:	f7fe f93c 	bl	800db98 <_malloc_r>
 800f920:	9a01      	ldr	r2, [sp, #4]
 800f922:	4605      	mov	r5, r0
 800f924:	b930      	cbnz	r0, 800f934 <_calloc_r+0x24>
 800f926:	4628      	mov	r0, r5
 800f928:	b003      	add	sp, #12
 800f92a:	bd30      	pop	{r4, r5, pc}
 800f92c:	220c      	movs	r2, #12
 800f92e:	6002      	str	r2, [r0, #0]
 800f930:	2500      	movs	r5, #0
 800f932:	e7f8      	b.n	800f926 <_calloc_r+0x16>
 800f934:	4621      	mov	r1, r4
 800f936:	f7fe f8bb 	bl	800dab0 <memset>
 800f93a:	e7f4      	b.n	800f926 <_calloc_r+0x16>
 800f93c:	0000      	movs	r0, r0
	...

0800f940 <nan>:
 800f940:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f948 <nan+0x8>
 800f944:	4770      	bx	lr
 800f946:	bf00      	nop
 800f948:	00000000 	.word	0x00000000
 800f94c:	7ff80000 	.word	0x7ff80000

0800f950 <strncmp>:
 800f950:	b510      	push	{r4, lr}
 800f952:	b17a      	cbz	r2, 800f974 <strncmp+0x24>
 800f954:	4603      	mov	r3, r0
 800f956:	3901      	subs	r1, #1
 800f958:	1884      	adds	r4, r0, r2
 800f95a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f95e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f962:	4290      	cmp	r0, r2
 800f964:	d101      	bne.n	800f96a <strncmp+0x1a>
 800f966:	42a3      	cmp	r3, r4
 800f968:	d101      	bne.n	800f96e <strncmp+0x1e>
 800f96a:	1a80      	subs	r0, r0, r2
 800f96c:	bd10      	pop	{r4, pc}
 800f96e:	2800      	cmp	r0, #0
 800f970:	d1f3      	bne.n	800f95a <strncmp+0xa>
 800f972:	e7fa      	b.n	800f96a <strncmp+0x1a>
 800f974:	4610      	mov	r0, r2
 800f976:	e7f9      	b.n	800f96c <strncmp+0x1c>

0800f978 <__ascii_wctomb>:
 800f978:	b149      	cbz	r1, 800f98e <__ascii_wctomb+0x16>
 800f97a:	2aff      	cmp	r2, #255	; 0xff
 800f97c:	bf85      	ittet	hi
 800f97e:	238a      	movhi	r3, #138	; 0x8a
 800f980:	6003      	strhi	r3, [r0, #0]
 800f982:	700a      	strbls	r2, [r1, #0]
 800f984:	f04f 30ff 	movhi.w	r0, #4294967295
 800f988:	bf98      	it	ls
 800f98a:	2001      	movls	r0, #1
 800f98c:	4770      	bx	lr
 800f98e:	4608      	mov	r0, r1
 800f990:	4770      	bx	lr
	...

0800f994 <__assert_func>:
 800f994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f996:	4614      	mov	r4, r2
 800f998:	461a      	mov	r2, r3
 800f99a:	4b09      	ldr	r3, [pc, #36]	; (800f9c0 <__assert_func+0x2c>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	4605      	mov	r5, r0
 800f9a0:	68d8      	ldr	r0, [r3, #12]
 800f9a2:	b14c      	cbz	r4, 800f9b8 <__assert_func+0x24>
 800f9a4:	4b07      	ldr	r3, [pc, #28]	; (800f9c4 <__assert_func+0x30>)
 800f9a6:	9100      	str	r1, [sp, #0]
 800f9a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9ac:	4906      	ldr	r1, [pc, #24]	; (800f9c8 <__assert_func+0x34>)
 800f9ae:	462b      	mov	r3, r5
 800f9b0:	f000 f80e 	bl	800f9d0 <fiprintf>
 800f9b4:	f000 fbce 	bl	8010154 <abort>
 800f9b8:	4b04      	ldr	r3, [pc, #16]	; (800f9cc <__assert_func+0x38>)
 800f9ba:	461c      	mov	r4, r3
 800f9bc:	e7f3      	b.n	800f9a6 <__assert_func+0x12>
 800f9be:	bf00      	nop
 800f9c0:	24000074 	.word	0x24000074
 800f9c4:	0801131c 	.word	0x0801131c
 800f9c8:	08011329 	.word	0x08011329
 800f9cc:	08011357 	.word	0x08011357

0800f9d0 <fiprintf>:
 800f9d0:	b40e      	push	{r1, r2, r3}
 800f9d2:	b503      	push	{r0, r1, lr}
 800f9d4:	4601      	mov	r1, r0
 800f9d6:	ab03      	add	r3, sp, #12
 800f9d8:	4805      	ldr	r0, [pc, #20]	; (800f9f0 <fiprintf+0x20>)
 800f9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9de:	6800      	ldr	r0, [r0, #0]
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	f000 f833 	bl	800fa4c <_vfiprintf_r>
 800f9e6:	b002      	add	sp, #8
 800f9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9ec:	b003      	add	sp, #12
 800f9ee:	4770      	bx	lr
 800f9f0:	24000074 	.word	0x24000074

0800f9f4 <__retarget_lock_init_recursive>:
 800f9f4:	4770      	bx	lr

0800f9f6 <__retarget_lock_acquire_recursive>:
 800f9f6:	4770      	bx	lr

0800f9f8 <__retarget_lock_release_recursive>:
 800f9f8:	4770      	bx	lr

0800f9fa <__sfputc_r>:
 800f9fa:	6893      	ldr	r3, [r2, #8]
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	b410      	push	{r4}
 800fa02:	6093      	str	r3, [r2, #8]
 800fa04:	da08      	bge.n	800fa18 <__sfputc_r+0x1e>
 800fa06:	6994      	ldr	r4, [r2, #24]
 800fa08:	42a3      	cmp	r3, r4
 800fa0a:	db01      	blt.n	800fa10 <__sfputc_r+0x16>
 800fa0c:	290a      	cmp	r1, #10
 800fa0e:	d103      	bne.n	800fa18 <__sfputc_r+0x1e>
 800fa10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa14:	f000 bade 	b.w	800ffd4 <__swbuf_r>
 800fa18:	6813      	ldr	r3, [r2, #0]
 800fa1a:	1c58      	adds	r0, r3, #1
 800fa1c:	6010      	str	r0, [r2, #0]
 800fa1e:	7019      	strb	r1, [r3, #0]
 800fa20:	4608      	mov	r0, r1
 800fa22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <__sfputs_r>:
 800fa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2a:	4606      	mov	r6, r0
 800fa2c:	460f      	mov	r7, r1
 800fa2e:	4614      	mov	r4, r2
 800fa30:	18d5      	adds	r5, r2, r3
 800fa32:	42ac      	cmp	r4, r5
 800fa34:	d101      	bne.n	800fa3a <__sfputs_r+0x12>
 800fa36:	2000      	movs	r0, #0
 800fa38:	e007      	b.n	800fa4a <__sfputs_r+0x22>
 800fa3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa3e:	463a      	mov	r2, r7
 800fa40:	4630      	mov	r0, r6
 800fa42:	f7ff ffda 	bl	800f9fa <__sfputc_r>
 800fa46:	1c43      	adds	r3, r0, #1
 800fa48:	d1f3      	bne.n	800fa32 <__sfputs_r+0xa>
 800fa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa4c <_vfiprintf_r>:
 800fa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa50:	460d      	mov	r5, r1
 800fa52:	b09d      	sub	sp, #116	; 0x74
 800fa54:	4614      	mov	r4, r2
 800fa56:	4698      	mov	r8, r3
 800fa58:	4606      	mov	r6, r0
 800fa5a:	b118      	cbz	r0, 800fa64 <_vfiprintf_r+0x18>
 800fa5c:	6983      	ldr	r3, [r0, #24]
 800fa5e:	b90b      	cbnz	r3, 800fa64 <_vfiprintf_r+0x18>
 800fa60:	f000 fc9a 	bl	8010398 <__sinit>
 800fa64:	4b89      	ldr	r3, [pc, #548]	; (800fc8c <_vfiprintf_r+0x240>)
 800fa66:	429d      	cmp	r5, r3
 800fa68:	d11b      	bne.n	800faa2 <_vfiprintf_r+0x56>
 800fa6a:	6875      	ldr	r5, [r6, #4]
 800fa6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa6e:	07d9      	lsls	r1, r3, #31
 800fa70:	d405      	bmi.n	800fa7e <_vfiprintf_r+0x32>
 800fa72:	89ab      	ldrh	r3, [r5, #12]
 800fa74:	059a      	lsls	r2, r3, #22
 800fa76:	d402      	bmi.n	800fa7e <_vfiprintf_r+0x32>
 800fa78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa7a:	f7ff ffbc 	bl	800f9f6 <__retarget_lock_acquire_recursive>
 800fa7e:	89ab      	ldrh	r3, [r5, #12]
 800fa80:	071b      	lsls	r3, r3, #28
 800fa82:	d501      	bpl.n	800fa88 <_vfiprintf_r+0x3c>
 800fa84:	692b      	ldr	r3, [r5, #16]
 800fa86:	b9eb      	cbnz	r3, 800fac4 <_vfiprintf_r+0x78>
 800fa88:	4629      	mov	r1, r5
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	f000 faf4 	bl	8010078 <__swsetup_r>
 800fa90:	b1c0      	cbz	r0, 800fac4 <_vfiprintf_r+0x78>
 800fa92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa94:	07dc      	lsls	r4, r3, #31
 800fa96:	d50e      	bpl.n	800fab6 <_vfiprintf_r+0x6a>
 800fa98:	f04f 30ff 	mov.w	r0, #4294967295
 800fa9c:	b01d      	add	sp, #116	; 0x74
 800fa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa2:	4b7b      	ldr	r3, [pc, #492]	; (800fc90 <_vfiprintf_r+0x244>)
 800faa4:	429d      	cmp	r5, r3
 800faa6:	d101      	bne.n	800faac <_vfiprintf_r+0x60>
 800faa8:	68b5      	ldr	r5, [r6, #8]
 800faaa:	e7df      	b.n	800fa6c <_vfiprintf_r+0x20>
 800faac:	4b79      	ldr	r3, [pc, #484]	; (800fc94 <_vfiprintf_r+0x248>)
 800faae:	429d      	cmp	r5, r3
 800fab0:	bf08      	it	eq
 800fab2:	68f5      	ldreq	r5, [r6, #12]
 800fab4:	e7da      	b.n	800fa6c <_vfiprintf_r+0x20>
 800fab6:	89ab      	ldrh	r3, [r5, #12]
 800fab8:	0598      	lsls	r0, r3, #22
 800faba:	d4ed      	bmi.n	800fa98 <_vfiprintf_r+0x4c>
 800fabc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fabe:	f7ff ff9b 	bl	800f9f8 <__retarget_lock_release_recursive>
 800fac2:	e7e9      	b.n	800fa98 <_vfiprintf_r+0x4c>
 800fac4:	2300      	movs	r3, #0
 800fac6:	9309      	str	r3, [sp, #36]	; 0x24
 800fac8:	2320      	movs	r3, #32
 800faca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800face:	f8cd 800c 	str.w	r8, [sp, #12]
 800fad2:	2330      	movs	r3, #48	; 0x30
 800fad4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc98 <_vfiprintf_r+0x24c>
 800fad8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fadc:	f04f 0901 	mov.w	r9, #1
 800fae0:	4623      	mov	r3, r4
 800fae2:	469a      	mov	sl, r3
 800fae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fae8:	b10a      	cbz	r2, 800faee <_vfiprintf_r+0xa2>
 800faea:	2a25      	cmp	r2, #37	; 0x25
 800faec:	d1f9      	bne.n	800fae2 <_vfiprintf_r+0x96>
 800faee:	ebba 0b04 	subs.w	fp, sl, r4
 800faf2:	d00b      	beq.n	800fb0c <_vfiprintf_r+0xc0>
 800faf4:	465b      	mov	r3, fp
 800faf6:	4622      	mov	r2, r4
 800faf8:	4629      	mov	r1, r5
 800fafa:	4630      	mov	r0, r6
 800fafc:	f7ff ff94 	bl	800fa28 <__sfputs_r>
 800fb00:	3001      	adds	r0, #1
 800fb02:	f000 80aa 	beq.w	800fc5a <_vfiprintf_r+0x20e>
 800fb06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb08:	445a      	add	r2, fp
 800fb0a:	9209      	str	r2, [sp, #36]	; 0x24
 800fb0c:	f89a 3000 	ldrb.w	r3, [sl]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f000 80a2 	beq.w	800fc5a <_vfiprintf_r+0x20e>
 800fb16:	2300      	movs	r3, #0
 800fb18:	f04f 32ff 	mov.w	r2, #4294967295
 800fb1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb20:	f10a 0a01 	add.w	sl, sl, #1
 800fb24:	9304      	str	r3, [sp, #16]
 800fb26:	9307      	str	r3, [sp, #28]
 800fb28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb2c:	931a      	str	r3, [sp, #104]	; 0x68
 800fb2e:	4654      	mov	r4, sl
 800fb30:	2205      	movs	r2, #5
 800fb32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb36:	4858      	ldr	r0, [pc, #352]	; (800fc98 <_vfiprintf_r+0x24c>)
 800fb38:	f7f0 fbda 	bl	80002f0 <memchr>
 800fb3c:	9a04      	ldr	r2, [sp, #16]
 800fb3e:	b9d8      	cbnz	r0, 800fb78 <_vfiprintf_r+0x12c>
 800fb40:	06d1      	lsls	r1, r2, #27
 800fb42:	bf44      	itt	mi
 800fb44:	2320      	movmi	r3, #32
 800fb46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb4a:	0713      	lsls	r3, r2, #28
 800fb4c:	bf44      	itt	mi
 800fb4e:	232b      	movmi	r3, #43	; 0x2b
 800fb50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb54:	f89a 3000 	ldrb.w	r3, [sl]
 800fb58:	2b2a      	cmp	r3, #42	; 0x2a
 800fb5a:	d015      	beq.n	800fb88 <_vfiprintf_r+0x13c>
 800fb5c:	9a07      	ldr	r2, [sp, #28]
 800fb5e:	4654      	mov	r4, sl
 800fb60:	2000      	movs	r0, #0
 800fb62:	f04f 0c0a 	mov.w	ip, #10
 800fb66:	4621      	mov	r1, r4
 800fb68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb6c:	3b30      	subs	r3, #48	; 0x30
 800fb6e:	2b09      	cmp	r3, #9
 800fb70:	d94e      	bls.n	800fc10 <_vfiprintf_r+0x1c4>
 800fb72:	b1b0      	cbz	r0, 800fba2 <_vfiprintf_r+0x156>
 800fb74:	9207      	str	r2, [sp, #28]
 800fb76:	e014      	b.n	800fba2 <_vfiprintf_r+0x156>
 800fb78:	eba0 0308 	sub.w	r3, r0, r8
 800fb7c:	fa09 f303 	lsl.w	r3, r9, r3
 800fb80:	4313      	orrs	r3, r2
 800fb82:	9304      	str	r3, [sp, #16]
 800fb84:	46a2      	mov	sl, r4
 800fb86:	e7d2      	b.n	800fb2e <_vfiprintf_r+0xe2>
 800fb88:	9b03      	ldr	r3, [sp, #12]
 800fb8a:	1d19      	adds	r1, r3, #4
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	9103      	str	r1, [sp, #12]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	bfbb      	ittet	lt
 800fb94:	425b      	neglt	r3, r3
 800fb96:	f042 0202 	orrlt.w	r2, r2, #2
 800fb9a:	9307      	strge	r3, [sp, #28]
 800fb9c:	9307      	strlt	r3, [sp, #28]
 800fb9e:	bfb8      	it	lt
 800fba0:	9204      	strlt	r2, [sp, #16]
 800fba2:	7823      	ldrb	r3, [r4, #0]
 800fba4:	2b2e      	cmp	r3, #46	; 0x2e
 800fba6:	d10c      	bne.n	800fbc2 <_vfiprintf_r+0x176>
 800fba8:	7863      	ldrb	r3, [r4, #1]
 800fbaa:	2b2a      	cmp	r3, #42	; 0x2a
 800fbac:	d135      	bne.n	800fc1a <_vfiprintf_r+0x1ce>
 800fbae:	9b03      	ldr	r3, [sp, #12]
 800fbb0:	1d1a      	adds	r2, r3, #4
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	9203      	str	r2, [sp, #12]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	bfb8      	it	lt
 800fbba:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbbe:	3402      	adds	r4, #2
 800fbc0:	9305      	str	r3, [sp, #20]
 800fbc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fca8 <_vfiprintf_r+0x25c>
 800fbc6:	7821      	ldrb	r1, [r4, #0]
 800fbc8:	2203      	movs	r2, #3
 800fbca:	4650      	mov	r0, sl
 800fbcc:	f7f0 fb90 	bl	80002f0 <memchr>
 800fbd0:	b140      	cbz	r0, 800fbe4 <_vfiprintf_r+0x198>
 800fbd2:	2340      	movs	r3, #64	; 0x40
 800fbd4:	eba0 000a 	sub.w	r0, r0, sl
 800fbd8:	fa03 f000 	lsl.w	r0, r3, r0
 800fbdc:	9b04      	ldr	r3, [sp, #16]
 800fbde:	4303      	orrs	r3, r0
 800fbe0:	3401      	adds	r4, #1
 800fbe2:	9304      	str	r3, [sp, #16]
 800fbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbe8:	482c      	ldr	r0, [pc, #176]	; (800fc9c <_vfiprintf_r+0x250>)
 800fbea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbee:	2206      	movs	r2, #6
 800fbf0:	f7f0 fb7e 	bl	80002f0 <memchr>
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	d03f      	beq.n	800fc78 <_vfiprintf_r+0x22c>
 800fbf8:	4b29      	ldr	r3, [pc, #164]	; (800fca0 <_vfiprintf_r+0x254>)
 800fbfa:	bb1b      	cbnz	r3, 800fc44 <_vfiprintf_r+0x1f8>
 800fbfc:	9b03      	ldr	r3, [sp, #12]
 800fbfe:	3307      	adds	r3, #7
 800fc00:	f023 0307 	bic.w	r3, r3, #7
 800fc04:	3308      	adds	r3, #8
 800fc06:	9303      	str	r3, [sp, #12]
 800fc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc0a:	443b      	add	r3, r7
 800fc0c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc0e:	e767      	b.n	800fae0 <_vfiprintf_r+0x94>
 800fc10:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc14:	460c      	mov	r4, r1
 800fc16:	2001      	movs	r0, #1
 800fc18:	e7a5      	b.n	800fb66 <_vfiprintf_r+0x11a>
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	3401      	adds	r4, #1
 800fc1e:	9305      	str	r3, [sp, #20]
 800fc20:	4619      	mov	r1, r3
 800fc22:	f04f 0c0a 	mov.w	ip, #10
 800fc26:	4620      	mov	r0, r4
 800fc28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc2c:	3a30      	subs	r2, #48	; 0x30
 800fc2e:	2a09      	cmp	r2, #9
 800fc30:	d903      	bls.n	800fc3a <_vfiprintf_r+0x1ee>
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d0c5      	beq.n	800fbc2 <_vfiprintf_r+0x176>
 800fc36:	9105      	str	r1, [sp, #20]
 800fc38:	e7c3      	b.n	800fbc2 <_vfiprintf_r+0x176>
 800fc3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc3e:	4604      	mov	r4, r0
 800fc40:	2301      	movs	r3, #1
 800fc42:	e7f0      	b.n	800fc26 <_vfiprintf_r+0x1da>
 800fc44:	ab03      	add	r3, sp, #12
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	462a      	mov	r2, r5
 800fc4a:	4b16      	ldr	r3, [pc, #88]	; (800fca4 <_vfiprintf_r+0x258>)
 800fc4c:	a904      	add	r1, sp, #16
 800fc4e:	4630      	mov	r0, r6
 800fc50:	f3af 8000 	nop.w
 800fc54:	4607      	mov	r7, r0
 800fc56:	1c78      	adds	r0, r7, #1
 800fc58:	d1d6      	bne.n	800fc08 <_vfiprintf_r+0x1bc>
 800fc5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc5c:	07d9      	lsls	r1, r3, #31
 800fc5e:	d405      	bmi.n	800fc6c <_vfiprintf_r+0x220>
 800fc60:	89ab      	ldrh	r3, [r5, #12]
 800fc62:	059a      	lsls	r2, r3, #22
 800fc64:	d402      	bmi.n	800fc6c <_vfiprintf_r+0x220>
 800fc66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc68:	f7ff fec6 	bl	800f9f8 <__retarget_lock_release_recursive>
 800fc6c:	89ab      	ldrh	r3, [r5, #12]
 800fc6e:	065b      	lsls	r3, r3, #25
 800fc70:	f53f af12 	bmi.w	800fa98 <_vfiprintf_r+0x4c>
 800fc74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc76:	e711      	b.n	800fa9c <_vfiprintf_r+0x50>
 800fc78:	ab03      	add	r3, sp, #12
 800fc7a:	9300      	str	r3, [sp, #0]
 800fc7c:	462a      	mov	r2, r5
 800fc7e:	4b09      	ldr	r3, [pc, #36]	; (800fca4 <_vfiprintf_r+0x258>)
 800fc80:	a904      	add	r1, sp, #16
 800fc82:	4630      	mov	r0, r6
 800fc84:	f000 f880 	bl	800fd88 <_printf_i>
 800fc88:	e7e4      	b.n	800fc54 <_vfiprintf_r+0x208>
 800fc8a:	bf00      	nop
 800fc8c:	080114ac 	.word	0x080114ac
 800fc90:	080114cc 	.word	0x080114cc
 800fc94:	0801148c 	.word	0x0801148c
 800fc98:	08011459 	.word	0x08011459
 800fc9c:	08011463 	.word	0x08011463
 800fca0:	00000000 	.word	0x00000000
 800fca4:	0800fa29 	.word	0x0800fa29
 800fca8:	0801145f 	.word	0x0801145f

0800fcac <_printf_common>:
 800fcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcb0:	4616      	mov	r6, r2
 800fcb2:	4699      	mov	r9, r3
 800fcb4:	688a      	ldr	r2, [r1, #8]
 800fcb6:	690b      	ldr	r3, [r1, #16]
 800fcb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	bfb8      	it	lt
 800fcc0:	4613      	movlt	r3, r2
 800fcc2:	6033      	str	r3, [r6, #0]
 800fcc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fcc8:	4607      	mov	r7, r0
 800fcca:	460c      	mov	r4, r1
 800fccc:	b10a      	cbz	r2, 800fcd2 <_printf_common+0x26>
 800fcce:	3301      	adds	r3, #1
 800fcd0:	6033      	str	r3, [r6, #0]
 800fcd2:	6823      	ldr	r3, [r4, #0]
 800fcd4:	0699      	lsls	r1, r3, #26
 800fcd6:	bf42      	ittt	mi
 800fcd8:	6833      	ldrmi	r3, [r6, #0]
 800fcda:	3302      	addmi	r3, #2
 800fcdc:	6033      	strmi	r3, [r6, #0]
 800fcde:	6825      	ldr	r5, [r4, #0]
 800fce0:	f015 0506 	ands.w	r5, r5, #6
 800fce4:	d106      	bne.n	800fcf4 <_printf_common+0x48>
 800fce6:	f104 0a19 	add.w	sl, r4, #25
 800fcea:	68e3      	ldr	r3, [r4, #12]
 800fcec:	6832      	ldr	r2, [r6, #0]
 800fcee:	1a9b      	subs	r3, r3, r2
 800fcf0:	42ab      	cmp	r3, r5
 800fcf2:	dc26      	bgt.n	800fd42 <_printf_common+0x96>
 800fcf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fcf8:	1e13      	subs	r3, r2, #0
 800fcfa:	6822      	ldr	r2, [r4, #0]
 800fcfc:	bf18      	it	ne
 800fcfe:	2301      	movne	r3, #1
 800fd00:	0692      	lsls	r2, r2, #26
 800fd02:	d42b      	bmi.n	800fd5c <_printf_common+0xb0>
 800fd04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd08:	4649      	mov	r1, r9
 800fd0a:	4638      	mov	r0, r7
 800fd0c:	47c0      	blx	r8
 800fd0e:	3001      	adds	r0, #1
 800fd10:	d01e      	beq.n	800fd50 <_printf_common+0xa4>
 800fd12:	6823      	ldr	r3, [r4, #0]
 800fd14:	68e5      	ldr	r5, [r4, #12]
 800fd16:	6832      	ldr	r2, [r6, #0]
 800fd18:	f003 0306 	and.w	r3, r3, #6
 800fd1c:	2b04      	cmp	r3, #4
 800fd1e:	bf08      	it	eq
 800fd20:	1aad      	subeq	r5, r5, r2
 800fd22:	68a3      	ldr	r3, [r4, #8]
 800fd24:	6922      	ldr	r2, [r4, #16]
 800fd26:	bf0c      	ite	eq
 800fd28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd2c:	2500      	movne	r5, #0
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	bfc4      	itt	gt
 800fd32:	1a9b      	subgt	r3, r3, r2
 800fd34:	18ed      	addgt	r5, r5, r3
 800fd36:	2600      	movs	r6, #0
 800fd38:	341a      	adds	r4, #26
 800fd3a:	42b5      	cmp	r5, r6
 800fd3c:	d11a      	bne.n	800fd74 <_printf_common+0xc8>
 800fd3e:	2000      	movs	r0, #0
 800fd40:	e008      	b.n	800fd54 <_printf_common+0xa8>
 800fd42:	2301      	movs	r3, #1
 800fd44:	4652      	mov	r2, sl
 800fd46:	4649      	mov	r1, r9
 800fd48:	4638      	mov	r0, r7
 800fd4a:	47c0      	blx	r8
 800fd4c:	3001      	adds	r0, #1
 800fd4e:	d103      	bne.n	800fd58 <_printf_common+0xac>
 800fd50:	f04f 30ff 	mov.w	r0, #4294967295
 800fd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd58:	3501      	adds	r5, #1
 800fd5a:	e7c6      	b.n	800fcea <_printf_common+0x3e>
 800fd5c:	18e1      	adds	r1, r4, r3
 800fd5e:	1c5a      	adds	r2, r3, #1
 800fd60:	2030      	movs	r0, #48	; 0x30
 800fd62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd66:	4422      	add	r2, r4
 800fd68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd70:	3302      	adds	r3, #2
 800fd72:	e7c7      	b.n	800fd04 <_printf_common+0x58>
 800fd74:	2301      	movs	r3, #1
 800fd76:	4622      	mov	r2, r4
 800fd78:	4649      	mov	r1, r9
 800fd7a:	4638      	mov	r0, r7
 800fd7c:	47c0      	blx	r8
 800fd7e:	3001      	adds	r0, #1
 800fd80:	d0e6      	beq.n	800fd50 <_printf_common+0xa4>
 800fd82:	3601      	adds	r6, #1
 800fd84:	e7d9      	b.n	800fd3a <_printf_common+0x8e>
	...

0800fd88 <_printf_i>:
 800fd88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd8c:	7e0f      	ldrb	r7, [r1, #24]
 800fd8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd90:	2f78      	cmp	r7, #120	; 0x78
 800fd92:	4691      	mov	r9, r2
 800fd94:	4680      	mov	r8, r0
 800fd96:	460c      	mov	r4, r1
 800fd98:	469a      	mov	sl, r3
 800fd9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd9e:	d807      	bhi.n	800fdb0 <_printf_i+0x28>
 800fda0:	2f62      	cmp	r7, #98	; 0x62
 800fda2:	d80a      	bhi.n	800fdba <_printf_i+0x32>
 800fda4:	2f00      	cmp	r7, #0
 800fda6:	f000 80d8 	beq.w	800ff5a <_printf_i+0x1d2>
 800fdaa:	2f58      	cmp	r7, #88	; 0x58
 800fdac:	f000 80a3 	beq.w	800fef6 <_printf_i+0x16e>
 800fdb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fdb8:	e03a      	b.n	800fe30 <_printf_i+0xa8>
 800fdba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fdbe:	2b15      	cmp	r3, #21
 800fdc0:	d8f6      	bhi.n	800fdb0 <_printf_i+0x28>
 800fdc2:	a101      	add	r1, pc, #4	; (adr r1, 800fdc8 <_printf_i+0x40>)
 800fdc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fdc8:	0800fe21 	.word	0x0800fe21
 800fdcc:	0800fe35 	.word	0x0800fe35
 800fdd0:	0800fdb1 	.word	0x0800fdb1
 800fdd4:	0800fdb1 	.word	0x0800fdb1
 800fdd8:	0800fdb1 	.word	0x0800fdb1
 800fddc:	0800fdb1 	.word	0x0800fdb1
 800fde0:	0800fe35 	.word	0x0800fe35
 800fde4:	0800fdb1 	.word	0x0800fdb1
 800fde8:	0800fdb1 	.word	0x0800fdb1
 800fdec:	0800fdb1 	.word	0x0800fdb1
 800fdf0:	0800fdb1 	.word	0x0800fdb1
 800fdf4:	0800ff41 	.word	0x0800ff41
 800fdf8:	0800fe65 	.word	0x0800fe65
 800fdfc:	0800ff23 	.word	0x0800ff23
 800fe00:	0800fdb1 	.word	0x0800fdb1
 800fe04:	0800fdb1 	.word	0x0800fdb1
 800fe08:	0800ff63 	.word	0x0800ff63
 800fe0c:	0800fdb1 	.word	0x0800fdb1
 800fe10:	0800fe65 	.word	0x0800fe65
 800fe14:	0800fdb1 	.word	0x0800fdb1
 800fe18:	0800fdb1 	.word	0x0800fdb1
 800fe1c:	0800ff2b 	.word	0x0800ff2b
 800fe20:	682b      	ldr	r3, [r5, #0]
 800fe22:	1d1a      	adds	r2, r3, #4
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	602a      	str	r2, [r5, #0]
 800fe28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe30:	2301      	movs	r3, #1
 800fe32:	e0a3      	b.n	800ff7c <_printf_i+0x1f4>
 800fe34:	6820      	ldr	r0, [r4, #0]
 800fe36:	6829      	ldr	r1, [r5, #0]
 800fe38:	0606      	lsls	r6, r0, #24
 800fe3a:	f101 0304 	add.w	r3, r1, #4
 800fe3e:	d50a      	bpl.n	800fe56 <_printf_i+0xce>
 800fe40:	680e      	ldr	r6, [r1, #0]
 800fe42:	602b      	str	r3, [r5, #0]
 800fe44:	2e00      	cmp	r6, #0
 800fe46:	da03      	bge.n	800fe50 <_printf_i+0xc8>
 800fe48:	232d      	movs	r3, #45	; 0x2d
 800fe4a:	4276      	negs	r6, r6
 800fe4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe50:	485e      	ldr	r0, [pc, #376]	; (800ffcc <_printf_i+0x244>)
 800fe52:	230a      	movs	r3, #10
 800fe54:	e019      	b.n	800fe8a <_printf_i+0x102>
 800fe56:	680e      	ldr	r6, [r1, #0]
 800fe58:	602b      	str	r3, [r5, #0]
 800fe5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe5e:	bf18      	it	ne
 800fe60:	b236      	sxthne	r6, r6
 800fe62:	e7ef      	b.n	800fe44 <_printf_i+0xbc>
 800fe64:	682b      	ldr	r3, [r5, #0]
 800fe66:	6820      	ldr	r0, [r4, #0]
 800fe68:	1d19      	adds	r1, r3, #4
 800fe6a:	6029      	str	r1, [r5, #0]
 800fe6c:	0601      	lsls	r1, r0, #24
 800fe6e:	d501      	bpl.n	800fe74 <_printf_i+0xec>
 800fe70:	681e      	ldr	r6, [r3, #0]
 800fe72:	e002      	b.n	800fe7a <_printf_i+0xf2>
 800fe74:	0646      	lsls	r6, r0, #25
 800fe76:	d5fb      	bpl.n	800fe70 <_printf_i+0xe8>
 800fe78:	881e      	ldrh	r6, [r3, #0]
 800fe7a:	4854      	ldr	r0, [pc, #336]	; (800ffcc <_printf_i+0x244>)
 800fe7c:	2f6f      	cmp	r7, #111	; 0x6f
 800fe7e:	bf0c      	ite	eq
 800fe80:	2308      	moveq	r3, #8
 800fe82:	230a      	movne	r3, #10
 800fe84:	2100      	movs	r1, #0
 800fe86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe8a:	6865      	ldr	r5, [r4, #4]
 800fe8c:	60a5      	str	r5, [r4, #8]
 800fe8e:	2d00      	cmp	r5, #0
 800fe90:	bfa2      	ittt	ge
 800fe92:	6821      	ldrge	r1, [r4, #0]
 800fe94:	f021 0104 	bicge.w	r1, r1, #4
 800fe98:	6021      	strge	r1, [r4, #0]
 800fe9a:	b90e      	cbnz	r6, 800fea0 <_printf_i+0x118>
 800fe9c:	2d00      	cmp	r5, #0
 800fe9e:	d04d      	beq.n	800ff3c <_printf_i+0x1b4>
 800fea0:	4615      	mov	r5, r2
 800fea2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fea6:	fb03 6711 	mls	r7, r3, r1, r6
 800feaa:	5dc7      	ldrb	r7, [r0, r7]
 800feac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800feb0:	4637      	mov	r7, r6
 800feb2:	42bb      	cmp	r3, r7
 800feb4:	460e      	mov	r6, r1
 800feb6:	d9f4      	bls.n	800fea2 <_printf_i+0x11a>
 800feb8:	2b08      	cmp	r3, #8
 800feba:	d10b      	bne.n	800fed4 <_printf_i+0x14c>
 800febc:	6823      	ldr	r3, [r4, #0]
 800febe:	07de      	lsls	r6, r3, #31
 800fec0:	d508      	bpl.n	800fed4 <_printf_i+0x14c>
 800fec2:	6923      	ldr	r3, [r4, #16]
 800fec4:	6861      	ldr	r1, [r4, #4]
 800fec6:	4299      	cmp	r1, r3
 800fec8:	bfde      	ittt	le
 800feca:	2330      	movle	r3, #48	; 0x30
 800fecc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fed0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fed4:	1b52      	subs	r2, r2, r5
 800fed6:	6122      	str	r2, [r4, #16]
 800fed8:	f8cd a000 	str.w	sl, [sp]
 800fedc:	464b      	mov	r3, r9
 800fede:	aa03      	add	r2, sp, #12
 800fee0:	4621      	mov	r1, r4
 800fee2:	4640      	mov	r0, r8
 800fee4:	f7ff fee2 	bl	800fcac <_printf_common>
 800fee8:	3001      	adds	r0, #1
 800feea:	d14c      	bne.n	800ff86 <_printf_i+0x1fe>
 800feec:	f04f 30ff 	mov.w	r0, #4294967295
 800fef0:	b004      	add	sp, #16
 800fef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fef6:	4835      	ldr	r0, [pc, #212]	; (800ffcc <_printf_i+0x244>)
 800fef8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fefc:	6829      	ldr	r1, [r5, #0]
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	f851 6b04 	ldr.w	r6, [r1], #4
 800ff04:	6029      	str	r1, [r5, #0]
 800ff06:	061d      	lsls	r5, r3, #24
 800ff08:	d514      	bpl.n	800ff34 <_printf_i+0x1ac>
 800ff0a:	07df      	lsls	r7, r3, #31
 800ff0c:	bf44      	itt	mi
 800ff0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ff12:	6023      	strmi	r3, [r4, #0]
 800ff14:	b91e      	cbnz	r6, 800ff1e <_printf_i+0x196>
 800ff16:	6823      	ldr	r3, [r4, #0]
 800ff18:	f023 0320 	bic.w	r3, r3, #32
 800ff1c:	6023      	str	r3, [r4, #0]
 800ff1e:	2310      	movs	r3, #16
 800ff20:	e7b0      	b.n	800fe84 <_printf_i+0xfc>
 800ff22:	6823      	ldr	r3, [r4, #0]
 800ff24:	f043 0320 	orr.w	r3, r3, #32
 800ff28:	6023      	str	r3, [r4, #0]
 800ff2a:	2378      	movs	r3, #120	; 0x78
 800ff2c:	4828      	ldr	r0, [pc, #160]	; (800ffd0 <_printf_i+0x248>)
 800ff2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff32:	e7e3      	b.n	800fefc <_printf_i+0x174>
 800ff34:	0659      	lsls	r1, r3, #25
 800ff36:	bf48      	it	mi
 800ff38:	b2b6      	uxthmi	r6, r6
 800ff3a:	e7e6      	b.n	800ff0a <_printf_i+0x182>
 800ff3c:	4615      	mov	r5, r2
 800ff3e:	e7bb      	b.n	800feb8 <_printf_i+0x130>
 800ff40:	682b      	ldr	r3, [r5, #0]
 800ff42:	6826      	ldr	r6, [r4, #0]
 800ff44:	6961      	ldr	r1, [r4, #20]
 800ff46:	1d18      	adds	r0, r3, #4
 800ff48:	6028      	str	r0, [r5, #0]
 800ff4a:	0635      	lsls	r5, r6, #24
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	d501      	bpl.n	800ff54 <_printf_i+0x1cc>
 800ff50:	6019      	str	r1, [r3, #0]
 800ff52:	e002      	b.n	800ff5a <_printf_i+0x1d2>
 800ff54:	0670      	lsls	r0, r6, #25
 800ff56:	d5fb      	bpl.n	800ff50 <_printf_i+0x1c8>
 800ff58:	8019      	strh	r1, [r3, #0]
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	6123      	str	r3, [r4, #16]
 800ff5e:	4615      	mov	r5, r2
 800ff60:	e7ba      	b.n	800fed8 <_printf_i+0x150>
 800ff62:	682b      	ldr	r3, [r5, #0]
 800ff64:	1d1a      	adds	r2, r3, #4
 800ff66:	602a      	str	r2, [r5, #0]
 800ff68:	681d      	ldr	r5, [r3, #0]
 800ff6a:	6862      	ldr	r2, [r4, #4]
 800ff6c:	2100      	movs	r1, #0
 800ff6e:	4628      	mov	r0, r5
 800ff70:	f7f0 f9be 	bl	80002f0 <memchr>
 800ff74:	b108      	cbz	r0, 800ff7a <_printf_i+0x1f2>
 800ff76:	1b40      	subs	r0, r0, r5
 800ff78:	6060      	str	r0, [r4, #4]
 800ff7a:	6863      	ldr	r3, [r4, #4]
 800ff7c:	6123      	str	r3, [r4, #16]
 800ff7e:	2300      	movs	r3, #0
 800ff80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff84:	e7a8      	b.n	800fed8 <_printf_i+0x150>
 800ff86:	6923      	ldr	r3, [r4, #16]
 800ff88:	462a      	mov	r2, r5
 800ff8a:	4649      	mov	r1, r9
 800ff8c:	4640      	mov	r0, r8
 800ff8e:	47d0      	blx	sl
 800ff90:	3001      	adds	r0, #1
 800ff92:	d0ab      	beq.n	800feec <_printf_i+0x164>
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	079b      	lsls	r3, r3, #30
 800ff98:	d413      	bmi.n	800ffc2 <_printf_i+0x23a>
 800ff9a:	68e0      	ldr	r0, [r4, #12]
 800ff9c:	9b03      	ldr	r3, [sp, #12]
 800ff9e:	4298      	cmp	r0, r3
 800ffa0:	bfb8      	it	lt
 800ffa2:	4618      	movlt	r0, r3
 800ffa4:	e7a4      	b.n	800fef0 <_printf_i+0x168>
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	4632      	mov	r2, r6
 800ffaa:	4649      	mov	r1, r9
 800ffac:	4640      	mov	r0, r8
 800ffae:	47d0      	blx	sl
 800ffb0:	3001      	adds	r0, #1
 800ffb2:	d09b      	beq.n	800feec <_printf_i+0x164>
 800ffb4:	3501      	adds	r5, #1
 800ffb6:	68e3      	ldr	r3, [r4, #12]
 800ffb8:	9903      	ldr	r1, [sp, #12]
 800ffba:	1a5b      	subs	r3, r3, r1
 800ffbc:	42ab      	cmp	r3, r5
 800ffbe:	dcf2      	bgt.n	800ffa6 <_printf_i+0x21e>
 800ffc0:	e7eb      	b.n	800ff9a <_printf_i+0x212>
 800ffc2:	2500      	movs	r5, #0
 800ffc4:	f104 0619 	add.w	r6, r4, #25
 800ffc8:	e7f5      	b.n	800ffb6 <_printf_i+0x22e>
 800ffca:	bf00      	nop
 800ffcc:	0801146a 	.word	0x0801146a
 800ffd0:	0801147b 	.word	0x0801147b

0800ffd4 <__swbuf_r>:
 800ffd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd6:	460e      	mov	r6, r1
 800ffd8:	4614      	mov	r4, r2
 800ffda:	4605      	mov	r5, r0
 800ffdc:	b118      	cbz	r0, 800ffe6 <__swbuf_r+0x12>
 800ffde:	6983      	ldr	r3, [r0, #24]
 800ffe0:	b90b      	cbnz	r3, 800ffe6 <__swbuf_r+0x12>
 800ffe2:	f000 f9d9 	bl	8010398 <__sinit>
 800ffe6:	4b21      	ldr	r3, [pc, #132]	; (801006c <__swbuf_r+0x98>)
 800ffe8:	429c      	cmp	r4, r3
 800ffea:	d12b      	bne.n	8010044 <__swbuf_r+0x70>
 800ffec:	686c      	ldr	r4, [r5, #4]
 800ffee:	69a3      	ldr	r3, [r4, #24]
 800fff0:	60a3      	str	r3, [r4, #8]
 800fff2:	89a3      	ldrh	r3, [r4, #12]
 800fff4:	071a      	lsls	r2, r3, #28
 800fff6:	d52f      	bpl.n	8010058 <__swbuf_r+0x84>
 800fff8:	6923      	ldr	r3, [r4, #16]
 800fffa:	b36b      	cbz	r3, 8010058 <__swbuf_r+0x84>
 800fffc:	6923      	ldr	r3, [r4, #16]
 800fffe:	6820      	ldr	r0, [r4, #0]
 8010000:	1ac0      	subs	r0, r0, r3
 8010002:	6963      	ldr	r3, [r4, #20]
 8010004:	b2f6      	uxtb	r6, r6
 8010006:	4283      	cmp	r3, r0
 8010008:	4637      	mov	r7, r6
 801000a:	dc04      	bgt.n	8010016 <__swbuf_r+0x42>
 801000c:	4621      	mov	r1, r4
 801000e:	4628      	mov	r0, r5
 8010010:	f000 f92e 	bl	8010270 <_fflush_r>
 8010014:	bb30      	cbnz	r0, 8010064 <__swbuf_r+0x90>
 8010016:	68a3      	ldr	r3, [r4, #8]
 8010018:	3b01      	subs	r3, #1
 801001a:	60a3      	str	r3, [r4, #8]
 801001c:	6823      	ldr	r3, [r4, #0]
 801001e:	1c5a      	adds	r2, r3, #1
 8010020:	6022      	str	r2, [r4, #0]
 8010022:	701e      	strb	r6, [r3, #0]
 8010024:	6963      	ldr	r3, [r4, #20]
 8010026:	3001      	adds	r0, #1
 8010028:	4283      	cmp	r3, r0
 801002a:	d004      	beq.n	8010036 <__swbuf_r+0x62>
 801002c:	89a3      	ldrh	r3, [r4, #12]
 801002e:	07db      	lsls	r3, r3, #31
 8010030:	d506      	bpl.n	8010040 <__swbuf_r+0x6c>
 8010032:	2e0a      	cmp	r6, #10
 8010034:	d104      	bne.n	8010040 <__swbuf_r+0x6c>
 8010036:	4621      	mov	r1, r4
 8010038:	4628      	mov	r0, r5
 801003a:	f000 f919 	bl	8010270 <_fflush_r>
 801003e:	b988      	cbnz	r0, 8010064 <__swbuf_r+0x90>
 8010040:	4638      	mov	r0, r7
 8010042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010044:	4b0a      	ldr	r3, [pc, #40]	; (8010070 <__swbuf_r+0x9c>)
 8010046:	429c      	cmp	r4, r3
 8010048:	d101      	bne.n	801004e <__swbuf_r+0x7a>
 801004a:	68ac      	ldr	r4, [r5, #8]
 801004c:	e7cf      	b.n	800ffee <__swbuf_r+0x1a>
 801004e:	4b09      	ldr	r3, [pc, #36]	; (8010074 <__swbuf_r+0xa0>)
 8010050:	429c      	cmp	r4, r3
 8010052:	bf08      	it	eq
 8010054:	68ec      	ldreq	r4, [r5, #12]
 8010056:	e7ca      	b.n	800ffee <__swbuf_r+0x1a>
 8010058:	4621      	mov	r1, r4
 801005a:	4628      	mov	r0, r5
 801005c:	f000 f80c 	bl	8010078 <__swsetup_r>
 8010060:	2800      	cmp	r0, #0
 8010062:	d0cb      	beq.n	800fffc <__swbuf_r+0x28>
 8010064:	f04f 37ff 	mov.w	r7, #4294967295
 8010068:	e7ea      	b.n	8010040 <__swbuf_r+0x6c>
 801006a:	bf00      	nop
 801006c:	080114ac 	.word	0x080114ac
 8010070:	080114cc 	.word	0x080114cc
 8010074:	0801148c 	.word	0x0801148c

08010078 <__swsetup_r>:
 8010078:	4b32      	ldr	r3, [pc, #200]	; (8010144 <__swsetup_r+0xcc>)
 801007a:	b570      	push	{r4, r5, r6, lr}
 801007c:	681d      	ldr	r5, [r3, #0]
 801007e:	4606      	mov	r6, r0
 8010080:	460c      	mov	r4, r1
 8010082:	b125      	cbz	r5, 801008e <__swsetup_r+0x16>
 8010084:	69ab      	ldr	r3, [r5, #24]
 8010086:	b913      	cbnz	r3, 801008e <__swsetup_r+0x16>
 8010088:	4628      	mov	r0, r5
 801008a:	f000 f985 	bl	8010398 <__sinit>
 801008e:	4b2e      	ldr	r3, [pc, #184]	; (8010148 <__swsetup_r+0xd0>)
 8010090:	429c      	cmp	r4, r3
 8010092:	d10f      	bne.n	80100b4 <__swsetup_r+0x3c>
 8010094:	686c      	ldr	r4, [r5, #4]
 8010096:	89a3      	ldrh	r3, [r4, #12]
 8010098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801009c:	0719      	lsls	r1, r3, #28
 801009e:	d42c      	bmi.n	80100fa <__swsetup_r+0x82>
 80100a0:	06dd      	lsls	r5, r3, #27
 80100a2:	d411      	bmi.n	80100c8 <__swsetup_r+0x50>
 80100a4:	2309      	movs	r3, #9
 80100a6:	6033      	str	r3, [r6, #0]
 80100a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80100ac:	81a3      	strh	r3, [r4, #12]
 80100ae:	f04f 30ff 	mov.w	r0, #4294967295
 80100b2:	e03e      	b.n	8010132 <__swsetup_r+0xba>
 80100b4:	4b25      	ldr	r3, [pc, #148]	; (801014c <__swsetup_r+0xd4>)
 80100b6:	429c      	cmp	r4, r3
 80100b8:	d101      	bne.n	80100be <__swsetup_r+0x46>
 80100ba:	68ac      	ldr	r4, [r5, #8]
 80100bc:	e7eb      	b.n	8010096 <__swsetup_r+0x1e>
 80100be:	4b24      	ldr	r3, [pc, #144]	; (8010150 <__swsetup_r+0xd8>)
 80100c0:	429c      	cmp	r4, r3
 80100c2:	bf08      	it	eq
 80100c4:	68ec      	ldreq	r4, [r5, #12]
 80100c6:	e7e6      	b.n	8010096 <__swsetup_r+0x1e>
 80100c8:	0758      	lsls	r0, r3, #29
 80100ca:	d512      	bpl.n	80100f2 <__swsetup_r+0x7a>
 80100cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100ce:	b141      	cbz	r1, 80100e2 <__swsetup_r+0x6a>
 80100d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100d4:	4299      	cmp	r1, r3
 80100d6:	d002      	beq.n	80100de <__swsetup_r+0x66>
 80100d8:	4630      	mov	r0, r6
 80100da:	f7fd fcf1 	bl	800dac0 <_free_r>
 80100de:	2300      	movs	r3, #0
 80100e0:	6363      	str	r3, [r4, #52]	; 0x34
 80100e2:	89a3      	ldrh	r3, [r4, #12]
 80100e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100e8:	81a3      	strh	r3, [r4, #12]
 80100ea:	2300      	movs	r3, #0
 80100ec:	6063      	str	r3, [r4, #4]
 80100ee:	6923      	ldr	r3, [r4, #16]
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	89a3      	ldrh	r3, [r4, #12]
 80100f4:	f043 0308 	orr.w	r3, r3, #8
 80100f8:	81a3      	strh	r3, [r4, #12]
 80100fa:	6923      	ldr	r3, [r4, #16]
 80100fc:	b94b      	cbnz	r3, 8010112 <__swsetup_r+0x9a>
 80100fe:	89a3      	ldrh	r3, [r4, #12]
 8010100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010108:	d003      	beq.n	8010112 <__swsetup_r+0x9a>
 801010a:	4621      	mov	r1, r4
 801010c:	4630      	mov	r0, r6
 801010e:	f000 fa05 	bl	801051c <__smakebuf_r>
 8010112:	89a0      	ldrh	r0, [r4, #12]
 8010114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010118:	f010 0301 	ands.w	r3, r0, #1
 801011c:	d00a      	beq.n	8010134 <__swsetup_r+0xbc>
 801011e:	2300      	movs	r3, #0
 8010120:	60a3      	str	r3, [r4, #8]
 8010122:	6963      	ldr	r3, [r4, #20]
 8010124:	425b      	negs	r3, r3
 8010126:	61a3      	str	r3, [r4, #24]
 8010128:	6923      	ldr	r3, [r4, #16]
 801012a:	b943      	cbnz	r3, 801013e <__swsetup_r+0xc6>
 801012c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010130:	d1ba      	bne.n	80100a8 <__swsetup_r+0x30>
 8010132:	bd70      	pop	{r4, r5, r6, pc}
 8010134:	0781      	lsls	r1, r0, #30
 8010136:	bf58      	it	pl
 8010138:	6963      	ldrpl	r3, [r4, #20]
 801013a:	60a3      	str	r3, [r4, #8]
 801013c:	e7f4      	b.n	8010128 <__swsetup_r+0xb0>
 801013e:	2000      	movs	r0, #0
 8010140:	e7f7      	b.n	8010132 <__swsetup_r+0xba>
 8010142:	bf00      	nop
 8010144:	24000074 	.word	0x24000074
 8010148:	080114ac 	.word	0x080114ac
 801014c:	080114cc 	.word	0x080114cc
 8010150:	0801148c 	.word	0x0801148c

08010154 <abort>:
 8010154:	b508      	push	{r3, lr}
 8010156:	2006      	movs	r0, #6
 8010158:	f000 fa48 	bl	80105ec <raise>
 801015c:	2001      	movs	r0, #1
 801015e:	f7f2 ffe1 	bl	8003124 <_exit>
	...

08010164 <__sflush_r>:
 8010164:	898a      	ldrh	r2, [r1, #12]
 8010166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801016a:	4605      	mov	r5, r0
 801016c:	0710      	lsls	r0, r2, #28
 801016e:	460c      	mov	r4, r1
 8010170:	d458      	bmi.n	8010224 <__sflush_r+0xc0>
 8010172:	684b      	ldr	r3, [r1, #4]
 8010174:	2b00      	cmp	r3, #0
 8010176:	dc05      	bgt.n	8010184 <__sflush_r+0x20>
 8010178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801017a:	2b00      	cmp	r3, #0
 801017c:	dc02      	bgt.n	8010184 <__sflush_r+0x20>
 801017e:	2000      	movs	r0, #0
 8010180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010186:	2e00      	cmp	r6, #0
 8010188:	d0f9      	beq.n	801017e <__sflush_r+0x1a>
 801018a:	2300      	movs	r3, #0
 801018c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010190:	682f      	ldr	r7, [r5, #0]
 8010192:	602b      	str	r3, [r5, #0]
 8010194:	d032      	beq.n	80101fc <__sflush_r+0x98>
 8010196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010198:	89a3      	ldrh	r3, [r4, #12]
 801019a:	075a      	lsls	r2, r3, #29
 801019c:	d505      	bpl.n	80101aa <__sflush_r+0x46>
 801019e:	6863      	ldr	r3, [r4, #4]
 80101a0:	1ac0      	subs	r0, r0, r3
 80101a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101a4:	b10b      	cbz	r3, 80101aa <__sflush_r+0x46>
 80101a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101a8:	1ac0      	subs	r0, r0, r3
 80101aa:	2300      	movs	r3, #0
 80101ac:	4602      	mov	r2, r0
 80101ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101b0:	6a21      	ldr	r1, [r4, #32]
 80101b2:	4628      	mov	r0, r5
 80101b4:	47b0      	blx	r6
 80101b6:	1c43      	adds	r3, r0, #1
 80101b8:	89a3      	ldrh	r3, [r4, #12]
 80101ba:	d106      	bne.n	80101ca <__sflush_r+0x66>
 80101bc:	6829      	ldr	r1, [r5, #0]
 80101be:	291d      	cmp	r1, #29
 80101c0:	d82c      	bhi.n	801021c <__sflush_r+0xb8>
 80101c2:	4a2a      	ldr	r2, [pc, #168]	; (801026c <__sflush_r+0x108>)
 80101c4:	40ca      	lsrs	r2, r1
 80101c6:	07d6      	lsls	r6, r2, #31
 80101c8:	d528      	bpl.n	801021c <__sflush_r+0xb8>
 80101ca:	2200      	movs	r2, #0
 80101cc:	6062      	str	r2, [r4, #4]
 80101ce:	04d9      	lsls	r1, r3, #19
 80101d0:	6922      	ldr	r2, [r4, #16]
 80101d2:	6022      	str	r2, [r4, #0]
 80101d4:	d504      	bpl.n	80101e0 <__sflush_r+0x7c>
 80101d6:	1c42      	adds	r2, r0, #1
 80101d8:	d101      	bne.n	80101de <__sflush_r+0x7a>
 80101da:	682b      	ldr	r3, [r5, #0]
 80101dc:	b903      	cbnz	r3, 80101e0 <__sflush_r+0x7c>
 80101de:	6560      	str	r0, [r4, #84]	; 0x54
 80101e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101e2:	602f      	str	r7, [r5, #0]
 80101e4:	2900      	cmp	r1, #0
 80101e6:	d0ca      	beq.n	801017e <__sflush_r+0x1a>
 80101e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101ec:	4299      	cmp	r1, r3
 80101ee:	d002      	beq.n	80101f6 <__sflush_r+0x92>
 80101f0:	4628      	mov	r0, r5
 80101f2:	f7fd fc65 	bl	800dac0 <_free_r>
 80101f6:	2000      	movs	r0, #0
 80101f8:	6360      	str	r0, [r4, #52]	; 0x34
 80101fa:	e7c1      	b.n	8010180 <__sflush_r+0x1c>
 80101fc:	6a21      	ldr	r1, [r4, #32]
 80101fe:	2301      	movs	r3, #1
 8010200:	4628      	mov	r0, r5
 8010202:	47b0      	blx	r6
 8010204:	1c41      	adds	r1, r0, #1
 8010206:	d1c7      	bne.n	8010198 <__sflush_r+0x34>
 8010208:	682b      	ldr	r3, [r5, #0]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d0c4      	beq.n	8010198 <__sflush_r+0x34>
 801020e:	2b1d      	cmp	r3, #29
 8010210:	d001      	beq.n	8010216 <__sflush_r+0xb2>
 8010212:	2b16      	cmp	r3, #22
 8010214:	d101      	bne.n	801021a <__sflush_r+0xb6>
 8010216:	602f      	str	r7, [r5, #0]
 8010218:	e7b1      	b.n	801017e <__sflush_r+0x1a>
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010220:	81a3      	strh	r3, [r4, #12]
 8010222:	e7ad      	b.n	8010180 <__sflush_r+0x1c>
 8010224:	690f      	ldr	r7, [r1, #16]
 8010226:	2f00      	cmp	r7, #0
 8010228:	d0a9      	beq.n	801017e <__sflush_r+0x1a>
 801022a:	0793      	lsls	r3, r2, #30
 801022c:	680e      	ldr	r6, [r1, #0]
 801022e:	bf08      	it	eq
 8010230:	694b      	ldreq	r3, [r1, #20]
 8010232:	600f      	str	r7, [r1, #0]
 8010234:	bf18      	it	ne
 8010236:	2300      	movne	r3, #0
 8010238:	eba6 0807 	sub.w	r8, r6, r7
 801023c:	608b      	str	r3, [r1, #8]
 801023e:	f1b8 0f00 	cmp.w	r8, #0
 8010242:	dd9c      	ble.n	801017e <__sflush_r+0x1a>
 8010244:	6a21      	ldr	r1, [r4, #32]
 8010246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010248:	4643      	mov	r3, r8
 801024a:	463a      	mov	r2, r7
 801024c:	4628      	mov	r0, r5
 801024e:	47b0      	blx	r6
 8010250:	2800      	cmp	r0, #0
 8010252:	dc06      	bgt.n	8010262 <__sflush_r+0xfe>
 8010254:	89a3      	ldrh	r3, [r4, #12]
 8010256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801025a:	81a3      	strh	r3, [r4, #12]
 801025c:	f04f 30ff 	mov.w	r0, #4294967295
 8010260:	e78e      	b.n	8010180 <__sflush_r+0x1c>
 8010262:	4407      	add	r7, r0
 8010264:	eba8 0800 	sub.w	r8, r8, r0
 8010268:	e7e9      	b.n	801023e <__sflush_r+0xda>
 801026a:	bf00      	nop
 801026c:	20400001 	.word	0x20400001

08010270 <_fflush_r>:
 8010270:	b538      	push	{r3, r4, r5, lr}
 8010272:	690b      	ldr	r3, [r1, #16]
 8010274:	4605      	mov	r5, r0
 8010276:	460c      	mov	r4, r1
 8010278:	b913      	cbnz	r3, 8010280 <_fflush_r+0x10>
 801027a:	2500      	movs	r5, #0
 801027c:	4628      	mov	r0, r5
 801027e:	bd38      	pop	{r3, r4, r5, pc}
 8010280:	b118      	cbz	r0, 801028a <_fflush_r+0x1a>
 8010282:	6983      	ldr	r3, [r0, #24]
 8010284:	b90b      	cbnz	r3, 801028a <_fflush_r+0x1a>
 8010286:	f000 f887 	bl	8010398 <__sinit>
 801028a:	4b14      	ldr	r3, [pc, #80]	; (80102dc <_fflush_r+0x6c>)
 801028c:	429c      	cmp	r4, r3
 801028e:	d11b      	bne.n	80102c8 <_fflush_r+0x58>
 8010290:	686c      	ldr	r4, [r5, #4]
 8010292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d0ef      	beq.n	801027a <_fflush_r+0xa>
 801029a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801029c:	07d0      	lsls	r0, r2, #31
 801029e:	d404      	bmi.n	80102aa <_fflush_r+0x3a>
 80102a0:	0599      	lsls	r1, r3, #22
 80102a2:	d402      	bmi.n	80102aa <_fflush_r+0x3a>
 80102a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102a6:	f7ff fba6 	bl	800f9f6 <__retarget_lock_acquire_recursive>
 80102aa:	4628      	mov	r0, r5
 80102ac:	4621      	mov	r1, r4
 80102ae:	f7ff ff59 	bl	8010164 <__sflush_r>
 80102b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102b4:	07da      	lsls	r2, r3, #31
 80102b6:	4605      	mov	r5, r0
 80102b8:	d4e0      	bmi.n	801027c <_fflush_r+0xc>
 80102ba:	89a3      	ldrh	r3, [r4, #12]
 80102bc:	059b      	lsls	r3, r3, #22
 80102be:	d4dd      	bmi.n	801027c <_fflush_r+0xc>
 80102c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102c2:	f7ff fb99 	bl	800f9f8 <__retarget_lock_release_recursive>
 80102c6:	e7d9      	b.n	801027c <_fflush_r+0xc>
 80102c8:	4b05      	ldr	r3, [pc, #20]	; (80102e0 <_fflush_r+0x70>)
 80102ca:	429c      	cmp	r4, r3
 80102cc:	d101      	bne.n	80102d2 <_fflush_r+0x62>
 80102ce:	68ac      	ldr	r4, [r5, #8]
 80102d0:	e7df      	b.n	8010292 <_fflush_r+0x22>
 80102d2:	4b04      	ldr	r3, [pc, #16]	; (80102e4 <_fflush_r+0x74>)
 80102d4:	429c      	cmp	r4, r3
 80102d6:	bf08      	it	eq
 80102d8:	68ec      	ldreq	r4, [r5, #12]
 80102da:	e7da      	b.n	8010292 <_fflush_r+0x22>
 80102dc:	080114ac 	.word	0x080114ac
 80102e0:	080114cc 	.word	0x080114cc
 80102e4:	0801148c 	.word	0x0801148c

080102e8 <std>:
 80102e8:	2300      	movs	r3, #0
 80102ea:	b510      	push	{r4, lr}
 80102ec:	4604      	mov	r4, r0
 80102ee:	e9c0 3300 	strd	r3, r3, [r0]
 80102f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80102f6:	6083      	str	r3, [r0, #8]
 80102f8:	8181      	strh	r1, [r0, #12]
 80102fa:	6643      	str	r3, [r0, #100]	; 0x64
 80102fc:	81c2      	strh	r2, [r0, #14]
 80102fe:	6183      	str	r3, [r0, #24]
 8010300:	4619      	mov	r1, r3
 8010302:	2208      	movs	r2, #8
 8010304:	305c      	adds	r0, #92	; 0x5c
 8010306:	f7fd fbd3 	bl	800dab0 <memset>
 801030a:	4b05      	ldr	r3, [pc, #20]	; (8010320 <std+0x38>)
 801030c:	6263      	str	r3, [r4, #36]	; 0x24
 801030e:	4b05      	ldr	r3, [pc, #20]	; (8010324 <std+0x3c>)
 8010310:	62a3      	str	r3, [r4, #40]	; 0x28
 8010312:	4b05      	ldr	r3, [pc, #20]	; (8010328 <std+0x40>)
 8010314:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010316:	4b05      	ldr	r3, [pc, #20]	; (801032c <std+0x44>)
 8010318:	6224      	str	r4, [r4, #32]
 801031a:	6323      	str	r3, [r4, #48]	; 0x30
 801031c:	bd10      	pop	{r4, pc}
 801031e:	bf00      	nop
 8010320:	08010625 	.word	0x08010625
 8010324:	08010647 	.word	0x08010647
 8010328:	0801067f 	.word	0x0801067f
 801032c:	080106a3 	.word	0x080106a3

08010330 <_cleanup_r>:
 8010330:	4901      	ldr	r1, [pc, #4]	; (8010338 <_cleanup_r+0x8>)
 8010332:	f000 b8af 	b.w	8010494 <_fwalk_reent>
 8010336:	bf00      	nop
 8010338:	08010271 	.word	0x08010271

0801033c <__sfmoreglue>:
 801033c:	b570      	push	{r4, r5, r6, lr}
 801033e:	2268      	movs	r2, #104	; 0x68
 8010340:	1e4d      	subs	r5, r1, #1
 8010342:	4355      	muls	r5, r2
 8010344:	460e      	mov	r6, r1
 8010346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801034a:	f7fd fc25 	bl	800db98 <_malloc_r>
 801034e:	4604      	mov	r4, r0
 8010350:	b140      	cbz	r0, 8010364 <__sfmoreglue+0x28>
 8010352:	2100      	movs	r1, #0
 8010354:	e9c0 1600 	strd	r1, r6, [r0]
 8010358:	300c      	adds	r0, #12
 801035a:	60a0      	str	r0, [r4, #8]
 801035c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010360:	f7fd fba6 	bl	800dab0 <memset>
 8010364:	4620      	mov	r0, r4
 8010366:	bd70      	pop	{r4, r5, r6, pc}

08010368 <__sfp_lock_acquire>:
 8010368:	4801      	ldr	r0, [pc, #4]	; (8010370 <__sfp_lock_acquire+0x8>)
 801036a:	f7ff bb44 	b.w	800f9f6 <__retarget_lock_acquire_recursive>
 801036e:	bf00      	nop
 8010370:	24000995 	.word	0x24000995

08010374 <__sfp_lock_release>:
 8010374:	4801      	ldr	r0, [pc, #4]	; (801037c <__sfp_lock_release+0x8>)
 8010376:	f7ff bb3f 	b.w	800f9f8 <__retarget_lock_release_recursive>
 801037a:	bf00      	nop
 801037c:	24000995 	.word	0x24000995

08010380 <__sinit_lock_acquire>:
 8010380:	4801      	ldr	r0, [pc, #4]	; (8010388 <__sinit_lock_acquire+0x8>)
 8010382:	f7ff bb38 	b.w	800f9f6 <__retarget_lock_acquire_recursive>
 8010386:	bf00      	nop
 8010388:	24000996 	.word	0x24000996

0801038c <__sinit_lock_release>:
 801038c:	4801      	ldr	r0, [pc, #4]	; (8010394 <__sinit_lock_release+0x8>)
 801038e:	f7ff bb33 	b.w	800f9f8 <__retarget_lock_release_recursive>
 8010392:	bf00      	nop
 8010394:	24000996 	.word	0x24000996

08010398 <__sinit>:
 8010398:	b510      	push	{r4, lr}
 801039a:	4604      	mov	r4, r0
 801039c:	f7ff fff0 	bl	8010380 <__sinit_lock_acquire>
 80103a0:	69a3      	ldr	r3, [r4, #24]
 80103a2:	b11b      	cbz	r3, 80103ac <__sinit+0x14>
 80103a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103a8:	f7ff bff0 	b.w	801038c <__sinit_lock_release>
 80103ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80103b0:	6523      	str	r3, [r4, #80]	; 0x50
 80103b2:	4b13      	ldr	r3, [pc, #76]	; (8010400 <__sinit+0x68>)
 80103b4:	4a13      	ldr	r2, [pc, #76]	; (8010404 <__sinit+0x6c>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80103ba:	42a3      	cmp	r3, r4
 80103bc:	bf04      	itt	eq
 80103be:	2301      	moveq	r3, #1
 80103c0:	61a3      	streq	r3, [r4, #24]
 80103c2:	4620      	mov	r0, r4
 80103c4:	f000 f820 	bl	8010408 <__sfp>
 80103c8:	6060      	str	r0, [r4, #4]
 80103ca:	4620      	mov	r0, r4
 80103cc:	f000 f81c 	bl	8010408 <__sfp>
 80103d0:	60a0      	str	r0, [r4, #8]
 80103d2:	4620      	mov	r0, r4
 80103d4:	f000 f818 	bl	8010408 <__sfp>
 80103d8:	2200      	movs	r2, #0
 80103da:	60e0      	str	r0, [r4, #12]
 80103dc:	2104      	movs	r1, #4
 80103de:	6860      	ldr	r0, [r4, #4]
 80103e0:	f7ff ff82 	bl	80102e8 <std>
 80103e4:	68a0      	ldr	r0, [r4, #8]
 80103e6:	2201      	movs	r2, #1
 80103e8:	2109      	movs	r1, #9
 80103ea:	f7ff ff7d 	bl	80102e8 <std>
 80103ee:	68e0      	ldr	r0, [r4, #12]
 80103f0:	2202      	movs	r2, #2
 80103f2:	2112      	movs	r1, #18
 80103f4:	f7ff ff78 	bl	80102e8 <std>
 80103f8:	2301      	movs	r3, #1
 80103fa:	61a3      	str	r3, [r4, #24]
 80103fc:	e7d2      	b.n	80103a4 <__sinit+0xc>
 80103fe:	bf00      	nop
 8010400:	080110c0 	.word	0x080110c0
 8010404:	08010331 	.word	0x08010331

08010408 <__sfp>:
 8010408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040a:	4607      	mov	r7, r0
 801040c:	f7ff ffac 	bl	8010368 <__sfp_lock_acquire>
 8010410:	4b1e      	ldr	r3, [pc, #120]	; (801048c <__sfp+0x84>)
 8010412:	681e      	ldr	r6, [r3, #0]
 8010414:	69b3      	ldr	r3, [r6, #24]
 8010416:	b913      	cbnz	r3, 801041e <__sfp+0x16>
 8010418:	4630      	mov	r0, r6
 801041a:	f7ff ffbd 	bl	8010398 <__sinit>
 801041e:	3648      	adds	r6, #72	; 0x48
 8010420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010424:	3b01      	subs	r3, #1
 8010426:	d503      	bpl.n	8010430 <__sfp+0x28>
 8010428:	6833      	ldr	r3, [r6, #0]
 801042a:	b30b      	cbz	r3, 8010470 <__sfp+0x68>
 801042c:	6836      	ldr	r6, [r6, #0]
 801042e:	e7f7      	b.n	8010420 <__sfp+0x18>
 8010430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010434:	b9d5      	cbnz	r5, 801046c <__sfp+0x64>
 8010436:	4b16      	ldr	r3, [pc, #88]	; (8010490 <__sfp+0x88>)
 8010438:	60e3      	str	r3, [r4, #12]
 801043a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801043e:	6665      	str	r5, [r4, #100]	; 0x64
 8010440:	f7ff fad8 	bl	800f9f4 <__retarget_lock_init_recursive>
 8010444:	f7ff ff96 	bl	8010374 <__sfp_lock_release>
 8010448:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801044c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010450:	6025      	str	r5, [r4, #0]
 8010452:	61a5      	str	r5, [r4, #24]
 8010454:	2208      	movs	r2, #8
 8010456:	4629      	mov	r1, r5
 8010458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801045c:	f7fd fb28 	bl	800dab0 <memset>
 8010460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010464:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010468:	4620      	mov	r0, r4
 801046a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801046c:	3468      	adds	r4, #104	; 0x68
 801046e:	e7d9      	b.n	8010424 <__sfp+0x1c>
 8010470:	2104      	movs	r1, #4
 8010472:	4638      	mov	r0, r7
 8010474:	f7ff ff62 	bl	801033c <__sfmoreglue>
 8010478:	4604      	mov	r4, r0
 801047a:	6030      	str	r0, [r6, #0]
 801047c:	2800      	cmp	r0, #0
 801047e:	d1d5      	bne.n	801042c <__sfp+0x24>
 8010480:	f7ff ff78 	bl	8010374 <__sfp_lock_release>
 8010484:	230c      	movs	r3, #12
 8010486:	603b      	str	r3, [r7, #0]
 8010488:	e7ee      	b.n	8010468 <__sfp+0x60>
 801048a:	bf00      	nop
 801048c:	080110c0 	.word	0x080110c0
 8010490:	ffff0001 	.word	0xffff0001

08010494 <_fwalk_reent>:
 8010494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010498:	4606      	mov	r6, r0
 801049a:	4688      	mov	r8, r1
 801049c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104a0:	2700      	movs	r7, #0
 80104a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104a6:	f1b9 0901 	subs.w	r9, r9, #1
 80104aa:	d505      	bpl.n	80104b8 <_fwalk_reent+0x24>
 80104ac:	6824      	ldr	r4, [r4, #0]
 80104ae:	2c00      	cmp	r4, #0
 80104b0:	d1f7      	bne.n	80104a2 <_fwalk_reent+0xe>
 80104b2:	4638      	mov	r0, r7
 80104b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104b8:	89ab      	ldrh	r3, [r5, #12]
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d907      	bls.n	80104ce <_fwalk_reent+0x3a>
 80104be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104c2:	3301      	adds	r3, #1
 80104c4:	d003      	beq.n	80104ce <_fwalk_reent+0x3a>
 80104c6:	4629      	mov	r1, r5
 80104c8:	4630      	mov	r0, r6
 80104ca:	47c0      	blx	r8
 80104cc:	4307      	orrs	r7, r0
 80104ce:	3568      	adds	r5, #104	; 0x68
 80104d0:	e7e9      	b.n	80104a6 <_fwalk_reent+0x12>

080104d2 <__swhatbuf_r>:
 80104d2:	b570      	push	{r4, r5, r6, lr}
 80104d4:	460e      	mov	r6, r1
 80104d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104da:	2900      	cmp	r1, #0
 80104dc:	b096      	sub	sp, #88	; 0x58
 80104de:	4614      	mov	r4, r2
 80104e0:	461d      	mov	r5, r3
 80104e2:	da08      	bge.n	80104f6 <__swhatbuf_r+0x24>
 80104e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80104e8:	2200      	movs	r2, #0
 80104ea:	602a      	str	r2, [r5, #0]
 80104ec:	061a      	lsls	r2, r3, #24
 80104ee:	d410      	bmi.n	8010512 <__swhatbuf_r+0x40>
 80104f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104f4:	e00e      	b.n	8010514 <__swhatbuf_r+0x42>
 80104f6:	466a      	mov	r2, sp
 80104f8:	f000 f8fa 	bl	80106f0 <_fstat_r>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	dbf1      	blt.n	80104e4 <__swhatbuf_r+0x12>
 8010500:	9a01      	ldr	r2, [sp, #4]
 8010502:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010506:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801050a:	425a      	negs	r2, r3
 801050c:	415a      	adcs	r2, r3
 801050e:	602a      	str	r2, [r5, #0]
 8010510:	e7ee      	b.n	80104f0 <__swhatbuf_r+0x1e>
 8010512:	2340      	movs	r3, #64	; 0x40
 8010514:	2000      	movs	r0, #0
 8010516:	6023      	str	r3, [r4, #0]
 8010518:	b016      	add	sp, #88	; 0x58
 801051a:	bd70      	pop	{r4, r5, r6, pc}

0801051c <__smakebuf_r>:
 801051c:	898b      	ldrh	r3, [r1, #12]
 801051e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010520:	079d      	lsls	r5, r3, #30
 8010522:	4606      	mov	r6, r0
 8010524:	460c      	mov	r4, r1
 8010526:	d507      	bpl.n	8010538 <__smakebuf_r+0x1c>
 8010528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801052c:	6023      	str	r3, [r4, #0]
 801052e:	6123      	str	r3, [r4, #16]
 8010530:	2301      	movs	r3, #1
 8010532:	6163      	str	r3, [r4, #20]
 8010534:	b002      	add	sp, #8
 8010536:	bd70      	pop	{r4, r5, r6, pc}
 8010538:	ab01      	add	r3, sp, #4
 801053a:	466a      	mov	r2, sp
 801053c:	f7ff ffc9 	bl	80104d2 <__swhatbuf_r>
 8010540:	9900      	ldr	r1, [sp, #0]
 8010542:	4605      	mov	r5, r0
 8010544:	4630      	mov	r0, r6
 8010546:	f7fd fb27 	bl	800db98 <_malloc_r>
 801054a:	b948      	cbnz	r0, 8010560 <__smakebuf_r+0x44>
 801054c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010550:	059a      	lsls	r2, r3, #22
 8010552:	d4ef      	bmi.n	8010534 <__smakebuf_r+0x18>
 8010554:	f023 0303 	bic.w	r3, r3, #3
 8010558:	f043 0302 	orr.w	r3, r3, #2
 801055c:	81a3      	strh	r3, [r4, #12]
 801055e:	e7e3      	b.n	8010528 <__smakebuf_r+0xc>
 8010560:	4b0d      	ldr	r3, [pc, #52]	; (8010598 <__smakebuf_r+0x7c>)
 8010562:	62b3      	str	r3, [r6, #40]	; 0x28
 8010564:	89a3      	ldrh	r3, [r4, #12]
 8010566:	6020      	str	r0, [r4, #0]
 8010568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801056c:	81a3      	strh	r3, [r4, #12]
 801056e:	9b00      	ldr	r3, [sp, #0]
 8010570:	6163      	str	r3, [r4, #20]
 8010572:	9b01      	ldr	r3, [sp, #4]
 8010574:	6120      	str	r0, [r4, #16]
 8010576:	b15b      	cbz	r3, 8010590 <__smakebuf_r+0x74>
 8010578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801057c:	4630      	mov	r0, r6
 801057e:	f000 f8c9 	bl	8010714 <_isatty_r>
 8010582:	b128      	cbz	r0, 8010590 <__smakebuf_r+0x74>
 8010584:	89a3      	ldrh	r3, [r4, #12]
 8010586:	f023 0303 	bic.w	r3, r3, #3
 801058a:	f043 0301 	orr.w	r3, r3, #1
 801058e:	81a3      	strh	r3, [r4, #12]
 8010590:	89a0      	ldrh	r0, [r4, #12]
 8010592:	4305      	orrs	r5, r0
 8010594:	81a5      	strh	r5, [r4, #12]
 8010596:	e7cd      	b.n	8010534 <__smakebuf_r+0x18>
 8010598:	08010331 	.word	0x08010331

0801059c <_raise_r>:
 801059c:	291f      	cmp	r1, #31
 801059e:	b538      	push	{r3, r4, r5, lr}
 80105a0:	4604      	mov	r4, r0
 80105a2:	460d      	mov	r5, r1
 80105a4:	d904      	bls.n	80105b0 <_raise_r+0x14>
 80105a6:	2316      	movs	r3, #22
 80105a8:	6003      	str	r3, [r0, #0]
 80105aa:	f04f 30ff 	mov.w	r0, #4294967295
 80105ae:	bd38      	pop	{r3, r4, r5, pc}
 80105b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80105b2:	b112      	cbz	r2, 80105ba <_raise_r+0x1e>
 80105b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105b8:	b94b      	cbnz	r3, 80105ce <_raise_r+0x32>
 80105ba:	4620      	mov	r0, r4
 80105bc:	f000 f830 	bl	8010620 <_getpid_r>
 80105c0:	462a      	mov	r2, r5
 80105c2:	4601      	mov	r1, r0
 80105c4:	4620      	mov	r0, r4
 80105c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105ca:	f000 b817 	b.w	80105fc <_kill_r>
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d00a      	beq.n	80105e8 <_raise_r+0x4c>
 80105d2:	1c59      	adds	r1, r3, #1
 80105d4:	d103      	bne.n	80105de <_raise_r+0x42>
 80105d6:	2316      	movs	r3, #22
 80105d8:	6003      	str	r3, [r0, #0]
 80105da:	2001      	movs	r0, #1
 80105dc:	e7e7      	b.n	80105ae <_raise_r+0x12>
 80105de:	2400      	movs	r4, #0
 80105e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80105e4:	4628      	mov	r0, r5
 80105e6:	4798      	blx	r3
 80105e8:	2000      	movs	r0, #0
 80105ea:	e7e0      	b.n	80105ae <_raise_r+0x12>

080105ec <raise>:
 80105ec:	4b02      	ldr	r3, [pc, #8]	; (80105f8 <raise+0xc>)
 80105ee:	4601      	mov	r1, r0
 80105f0:	6818      	ldr	r0, [r3, #0]
 80105f2:	f7ff bfd3 	b.w	801059c <_raise_r>
 80105f6:	bf00      	nop
 80105f8:	24000074 	.word	0x24000074

080105fc <_kill_r>:
 80105fc:	b538      	push	{r3, r4, r5, lr}
 80105fe:	4d07      	ldr	r5, [pc, #28]	; (801061c <_kill_r+0x20>)
 8010600:	2300      	movs	r3, #0
 8010602:	4604      	mov	r4, r0
 8010604:	4608      	mov	r0, r1
 8010606:	4611      	mov	r1, r2
 8010608:	602b      	str	r3, [r5, #0]
 801060a:	f7f2 fd7b 	bl	8003104 <_kill>
 801060e:	1c43      	adds	r3, r0, #1
 8010610:	d102      	bne.n	8010618 <_kill_r+0x1c>
 8010612:	682b      	ldr	r3, [r5, #0]
 8010614:	b103      	cbz	r3, 8010618 <_kill_r+0x1c>
 8010616:	6023      	str	r3, [r4, #0]
 8010618:	bd38      	pop	{r3, r4, r5, pc}
 801061a:	bf00      	nop
 801061c:	24000990 	.word	0x24000990

08010620 <_getpid_r>:
 8010620:	f7f2 bd68 	b.w	80030f4 <_getpid>

08010624 <__sread>:
 8010624:	b510      	push	{r4, lr}
 8010626:	460c      	mov	r4, r1
 8010628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801062c:	f000 f894 	bl	8010758 <_read_r>
 8010630:	2800      	cmp	r0, #0
 8010632:	bfab      	itete	ge
 8010634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010636:	89a3      	ldrhlt	r3, [r4, #12]
 8010638:	181b      	addge	r3, r3, r0
 801063a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801063e:	bfac      	ite	ge
 8010640:	6563      	strge	r3, [r4, #84]	; 0x54
 8010642:	81a3      	strhlt	r3, [r4, #12]
 8010644:	bd10      	pop	{r4, pc}

08010646 <__swrite>:
 8010646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801064a:	461f      	mov	r7, r3
 801064c:	898b      	ldrh	r3, [r1, #12]
 801064e:	05db      	lsls	r3, r3, #23
 8010650:	4605      	mov	r5, r0
 8010652:	460c      	mov	r4, r1
 8010654:	4616      	mov	r6, r2
 8010656:	d505      	bpl.n	8010664 <__swrite+0x1e>
 8010658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801065c:	2302      	movs	r3, #2
 801065e:	2200      	movs	r2, #0
 8010660:	f000 f868 	bl	8010734 <_lseek_r>
 8010664:	89a3      	ldrh	r3, [r4, #12]
 8010666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801066a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801066e:	81a3      	strh	r3, [r4, #12]
 8010670:	4632      	mov	r2, r6
 8010672:	463b      	mov	r3, r7
 8010674:	4628      	mov	r0, r5
 8010676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801067a:	f000 b817 	b.w	80106ac <_write_r>

0801067e <__sseek>:
 801067e:	b510      	push	{r4, lr}
 8010680:	460c      	mov	r4, r1
 8010682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010686:	f000 f855 	bl	8010734 <_lseek_r>
 801068a:	1c43      	adds	r3, r0, #1
 801068c:	89a3      	ldrh	r3, [r4, #12]
 801068e:	bf15      	itete	ne
 8010690:	6560      	strne	r0, [r4, #84]	; 0x54
 8010692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801069a:	81a3      	strheq	r3, [r4, #12]
 801069c:	bf18      	it	ne
 801069e:	81a3      	strhne	r3, [r4, #12]
 80106a0:	bd10      	pop	{r4, pc}

080106a2 <__sclose>:
 80106a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106a6:	f000 b813 	b.w	80106d0 <_close_r>
	...

080106ac <_write_r>:
 80106ac:	b538      	push	{r3, r4, r5, lr}
 80106ae:	4d07      	ldr	r5, [pc, #28]	; (80106cc <_write_r+0x20>)
 80106b0:	4604      	mov	r4, r0
 80106b2:	4608      	mov	r0, r1
 80106b4:	4611      	mov	r1, r2
 80106b6:	2200      	movs	r2, #0
 80106b8:	602a      	str	r2, [r5, #0]
 80106ba:	461a      	mov	r2, r3
 80106bc:	f7f2 fd59 	bl	8003172 <_write>
 80106c0:	1c43      	adds	r3, r0, #1
 80106c2:	d102      	bne.n	80106ca <_write_r+0x1e>
 80106c4:	682b      	ldr	r3, [r5, #0]
 80106c6:	b103      	cbz	r3, 80106ca <_write_r+0x1e>
 80106c8:	6023      	str	r3, [r4, #0]
 80106ca:	bd38      	pop	{r3, r4, r5, pc}
 80106cc:	24000990 	.word	0x24000990

080106d0 <_close_r>:
 80106d0:	b538      	push	{r3, r4, r5, lr}
 80106d2:	4d06      	ldr	r5, [pc, #24]	; (80106ec <_close_r+0x1c>)
 80106d4:	2300      	movs	r3, #0
 80106d6:	4604      	mov	r4, r0
 80106d8:	4608      	mov	r0, r1
 80106da:	602b      	str	r3, [r5, #0]
 80106dc:	f7f2 fd65 	bl	80031aa <_close>
 80106e0:	1c43      	adds	r3, r0, #1
 80106e2:	d102      	bne.n	80106ea <_close_r+0x1a>
 80106e4:	682b      	ldr	r3, [r5, #0]
 80106e6:	b103      	cbz	r3, 80106ea <_close_r+0x1a>
 80106e8:	6023      	str	r3, [r4, #0]
 80106ea:	bd38      	pop	{r3, r4, r5, pc}
 80106ec:	24000990 	.word	0x24000990

080106f0 <_fstat_r>:
 80106f0:	b538      	push	{r3, r4, r5, lr}
 80106f2:	4d07      	ldr	r5, [pc, #28]	; (8010710 <_fstat_r+0x20>)
 80106f4:	2300      	movs	r3, #0
 80106f6:	4604      	mov	r4, r0
 80106f8:	4608      	mov	r0, r1
 80106fa:	4611      	mov	r1, r2
 80106fc:	602b      	str	r3, [r5, #0]
 80106fe:	f7f2 fd60 	bl	80031c2 <_fstat>
 8010702:	1c43      	adds	r3, r0, #1
 8010704:	d102      	bne.n	801070c <_fstat_r+0x1c>
 8010706:	682b      	ldr	r3, [r5, #0]
 8010708:	b103      	cbz	r3, 801070c <_fstat_r+0x1c>
 801070a:	6023      	str	r3, [r4, #0]
 801070c:	bd38      	pop	{r3, r4, r5, pc}
 801070e:	bf00      	nop
 8010710:	24000990 	.word	0x24000990

08010714 <_isatty_r>:
 8010714:	b538      	push	{r3, r4, r5, lr}
 8010716:	4d06      	ldr	r5, [pc, #24]	; (8010730 <_isatty_r+0x1c>)
 8010718:	2300      	movs	r3, #0
 801071a:	4604      	mov	r4, r0
 801071c:	4608      	mov	r0, r1
 801071e:	602b      	str	r3, [r5, #0]
 8010720:	f7f2 fd5f 	bl	80031e2 <_isatty>
 8010724:	1c43      	adds	r3, r0, #1
 8010726:	d102      	bne.n	801072e <_isatty_r+0x1a>
 8010728:	682b      	ldr	r3, [r5, #0]
 801072a:	b103      	cbz	r3, 801072e <_isatty_r+0x1a>
 801072c:	6023      	str	r3, [r4, #0]
 801072e:	bd38      	pop	{r3, r4, r5, pc}
 8010730:	24000990 	.word	0x24000990

08010734 <_lseek_r>:
 8010734:	b538      	push	{r3, r4, r5, lr}
 8010736:	4d07      	ldr	r5, [pc, #28]	; (8010754 <_lseek_r+0x20>)
 8010738:	4604      	mov	r4, r0
 801073a:	4608      	mov	r0, r1
 801073c:	4611      	mov	r1, r2
 801073e:	2200      	movs	r2, #0
 8010740:	602a      	str	r2, [r5, #0]
 8010742:	461a      	mov	r2, r3
 8010744:	f7f2 fd58 	bl	80031f8 <_lseek>
 8010748:	1c43      	adds	r3, r0, #1
 801074a:	d102      	bne.n	8010752 <_lseek_r+0x1e>
 801074c:	682b      	ldr	r3, [r5, #0]
 801074e:	b103      	cbz	r3, 8010752 <_lseek_r+0x1e>
 8010750:	6023      	str	r3, [r4, #0]
 8010752:	bd38      	pop	{r3, r4, r5, pc}
 8010754:	24000990 	.word	0x24000990

08010758 <_read_r>:
 8010758:	b538      	push	{r3, r4, r5, lr}
 801075a:	4d07      	ldr	r5, [pc, #28]	; (8010778 <_read_r+0x20>)
 801075c:	4604      	mov	r4, r0
 801075e:	4608      	mov	r0, r1
 8010760:	4611      	mov	r1, r2
 8010762:	2200      	movs	r2, #0
 8010764:	602a      	str	r2, [r5, #0]
 8010766:	461a      	mov	r2, r3
 8010768:	f7f2 fce6 	bl	8003138 <_read>
 801076c:	1c43      	adds	r3, r0, #1
 801076e:	d102      	bne.n	8010776 <_read_r+0x1e>
 8010770:	682b      	ldr	r3, [r5, #0]
 8010772:	b103      	cbz	r3, 8010776 <_read_r+0x1e>
 8010774:	6023      	str	r3, [r4, #0]
 8010776:	bd38      	pop	{r3, r4, r5, pc}
 8010778:	24000990 	.word	0x24000990

0801077c <checkint>:
 801077c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010780:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010784:	429a      	cmp	r2, r3
 8010786:	b570      	push	{r4, r5, r6, lr}
 8010788:	dd2a      	ble.n	80107e0 <checkint+0x64>
 801078a:	f240 4333 	movw	r3, #1075	; 0x433
 801078e:	429a      	cmp	r2, r3
 8010790:	dc24      	bgt.n	80107dc <checkint+0x60>
 8010792:	1a9b      	subs	r3, r3, r2
 8010794:	f1a3 0620 	sub.w	r6, r3, #32
 8010798:	f04f 32ff 	mov.w	r2, #4294967295
 801079c:	fa02 f403 	lsl.w	r4, r2, r3
 80107a0:	fa02 f606 	lsl.w	r6, r2, r6
 80107a4:	f1c3 0520 	rsb	r5, r3, #32
 80107a8:	fa22 f505 	lsr.w	r5, r2, r5
 80107ac:	4334      	orrs	r4, r6
 80107ae:	432c      	orrs	r4, r5
 80107b0:	409a      	lsls	r2, r3
 80107b2:	ea20 0202 	bic.w	r2, r0, r2
 80107b6:	ea21 0404 	bic.w	r4, r1, r4
 80107ba:	4322      	orrs	r2, r4
 80107bc:	f1a3 0420 	sub.w	r4, r3, #32
 80107c0:	f1c3 0220 	rsb	r2, r3, #32
 80107c4:	d10c      	bne.n	80107e0 <checkint+0x64>
 80107c6:	40d8      	lsrs	r0, r3
 80107c8:	fa01 f302 	lsl.w	r3, r1, r2
 80107cc:	4318      	orrs	r0, r3
 80107ce:	40e1      	lsrs	r1, r4
 80107d0:	4308      	orrs	r0, r1
 80107d2:	f000 0001 	and.w	r0, r0, #1
 80107d6:	f1d0 0002 	rsbs	r0, r0, #2
 80107da:	bd70      	pop	{r4, r5, r6, pc}
 80107dc:	2002      	movs	r0, #2
 80107de:	e7fc      	b.n	80107da <checkint+0x5e>
 80107e0:	2000      	movs	r0, #0
 80107e2:	e7fa      	b.n	80107da <checkint+0x5e>
 80107e4:	0000      	movs	r0, r0
	...

080107e8 <pow>:
 80107e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107ec:	ee10 4a90 	vmov	r4, s1
 80107f0:	ed2d 8b0a 	vpush	{d8-d12}
 80107f4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80107f8:	ee11 7a90 	vmov	r7, s3
 80107fc:	f10a 32ff 	add.w	r2, sl, #4294967295
 8010800:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8010804:	429a      	cmp	r2, r3
 8010806:	ee10 6a10 	vmov	r6, s0
 801080a:	ee11 0a10 	vmov	r0, s2
 801080e:	b086      	sub	sp, #24
 8010810:	46d4      	mov	ip, sl
 8010812:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8010816:	d806      	bhi.n	8010826 <pow+0x3e>
 8010818:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801081c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010820:	2b7f      	cmp	r3, #127	; 0x7f
 8010822:	f240 8156 	bls.w	8010ad2 <pow+0x2ea>
 8010826:	1802      	adds	r2, r0, r0
 8010828:	eb47 0107 	adc.w	r1, r7, r7
 801082c:	f06f 0e01 	mvn.w	lr, #1
 8010830:	f112 39ff 	adds.w	r9, r2, #4294967295
 8010834:	f141 38ff 	adc.w	r8, r1, #4294967295
 8010838:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801083c:	45ce      	cmp	lr, r9
 801083e:	eb73 0808 	sbcs.w	r8, r3, r8
 8010842:	d23f      	bcs.n	80108c4 <pow+0xdc>
 8010844:	ea52 0301 	orrs.w	r3, r2, r1
 8010848:	f04f 0300 	mov.w	r3, #0
 801084c:	d10c      	bne.n	8010868 <pow+0x80>
 801084e:	19b6      	adds	r6, r6, r6
 8010850:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8010854:	4164      	adcs	r4, r4
 8010856:	42b3      	cmp	r3, r6
 8010858:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801085c:	41a3      	sbcs	r3, r4
 801085e:	f0c0 808c 	bcc.w	801097a <pow+0x192>
 8010862:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010866:	e028      	b.n	80108ba <pow+0xd2>
 8010868:	4da3      	ldr	r5, [pc, #652]	; (8010af8 <pow+0x310>)
 801086a:	42ac      	cmp	r4, r5
 801086c:	bf08      	it	eq
 801086e:	429e      	cmpeq	r6, r3
 8010870:	d107      	bne.n	8010882 <pow+0x9a>
 8010872:	1800      	adds	r0, r0, r0
 8010874:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8010878:	417f      	adcs	r7, r7
 801087a:	4283      	cmp	r3, r0
 801087c:	4b9f      	ldr	r3, [pc, #636]	; (8010afc <pow+0x314>)
 801087e:	41bb      	sbcs	r3, r7
 8010880:	e7ed      	b.n	801085e <pow+0x76>
 8010882:	19b6      	adds	r6, r6, r6
 8010884:	489e      	ldr	r0, [pc, #632]	; (8010b00 <pow+0x318>)
 8010886:	4164      	adcs	r4, r4
 8010888:	42b3      	cmp	r3, r6
 801088a:	eb70 0504 	sbcs.w	r5, r0, r4
 801088e:	d374      	bcc.n	801097a <pow+0x192>
 8010890:	4281      	cmp	r1, r0
 8010892:	bf08      	it	eq
 8010894:	429a      	cmpeq	r2, r3
 8010896:	d170      	bne.n	801097a <pow+0x192>
 8010898:	4a9a      	ldr	r2, [pc, #616]	; (8010b04 <pow+0x31c>)
 801089a:	4294      	cmp	r4, r2
 801089c:	bf08      	it	eq
 801089e:	429e      	cmpeq	r6, r3
 80108a0:	d0df      	beq.n	8010862 <pow+0x7a>
 80108a2:	4294      	cmp	r4, r2
 80108a4:	ea6f 0707 	mvn.w	r7, r7
 80108a8:	bf34      	ite	cc
 80108aa:	2400      	movcc	r4, #0
 80108ac:	2401      	movcs	r4, #1
 80108ae:	0fff      	lsrs	r7, r7, #31
 80108b0:	42bc      	cmp	r4, r7
 80108b2:	f040 81d9 	bne.w	8010c68 <pow+0x480>
 80108b6:	ee21 0b01 	vmul.f64	d0, d1, d1
 80108ba:	b006      	add	sp, #24
 80108bc:	ecbd 8b0a 	vpop	{d8-d12}
 80108c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108c4:	eb16 0806 	adds.w	r8, r6, r6
 80108c8:	eb44 0904 	adc.w	r9, r4, r4
 80108cc:	f118 31ff 	adds.w	r1, r8, #4294967295
 80108d0:	f169 0200 	sbc.w	r2, r9, #0
 80108d4:	458e      	cmp	lr, r1
 80108d6:	4193      	sbcs	r3, r2
 80108d8:	d223      	bcs.n	8010922 <pow+0x13a>
 80108da:	ee20 0b00 	vmul.f64	d0, d0, d0
 80108de:	2c00      	cmp	r4, #0
 80108e0:	da12      	bge.n	8010908 <pow+0x120>
 80108e2:	4639      	mov	r1, r7
 80108e4:	f7ff ff4a 	bl	801077c <checkint>
 80108e8:	2801      	cmp	r0, #1
 80108ea:	d10d      	bne.n	8010908 <pow+0x120>
 80108ec:	eeb1 0b40 	vneg.f64	d0, d0
 80108f0:	ea58 0309 	orrs.w	r3, r8, r9
 80108f4:	d10a      	bne.n	801090c <pow+0x124>
 80108f6:	2f00      	cmp	r7, #0
 80108f8:	dadf      	bge.n	80108ba <pow+0xd2>
 80108fa:	b006      	add	sp, #24
 80108fc:	ecbd 8b0a 	vpop	{d8-d12}
 8010900:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010904:	f000 bb50 	b.w	8010fa8 <__math_divzero>
 8010908:	2000      	movs	r0, #0
 801090a:	e7f1      	b.n	80108f0 <pow+0x108>
 801090c:	2f00      	cmp	r7, #0
 801090e:	dad4      	bge.n	80108ba <pow+0xd2>
 8010910:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010914:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010918:	ed8d 7b00 	vstr	d7, [sp]
 801091c:	ed9d 0b00 	vldr	d0, [sp]
 8010920:	e7cb      	b.n	80108ba <pow+0xd2>
 8010922:	2c00      	cmp	r4, #0
 8010924:	da2c      	bge.n	8010980 <pow+0x198>
 8010926:	4639      	mov	r1, r7
 8010928:	f7ff ff28 	bl	801077c <checkint>
 801092c:	b930      	cbnz	r0, 801093c <pow+0x154>
 801092e:	b006      	add	sp, #24
 8010930:	ecbd 8b0a 	vpop	{d8-d12}
 8010934:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010938:	f000 bb4e 	b.w	8010fd8 <__math_invalid>
 801093c:	2801      	cmp	r0, #1
 801093e:	bf14      	ite	ne
 8010940:	2000      	movne	r0, #0
 8010942:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010946:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801094a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801094e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8010952:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010956:	2b7f      	cmp	r3, #127	; 0x7f
 8010958:	d92d      	bls.n	80109b6 <pow+0x1ce>
 801095a:	4b67      	ldr	r3, [pc, #412]	; (8010af8 <pow+0x310>)
 801095c:	2000      	movs	r0, #0
 801095e:	429c      	cmp	r4, r3
 8010960:	bf08      	it	eq
 8010962:	4286      	cmpeq	r6, r0
 8010964:	f43f af7d 	beq.w	8010862 <pow+0x7a>
 8010968:	f240 31bd 	movw	r1, #957	; 0x3bd
 801096c:	428a      	cmp	r2, r1
 801096e:	d80c      	bhi.n	801098a <pow+0x1a2>
 8010970:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010974:	42b0      	cmp	r0, r6
 8010976:	41a3      	sbcs	r3, r4
 8010978:	d204      	bcs.n	8010984 <pow+0x19c>
 801097a:	ee31 0b00 	vadd.f64	d0, d1, d0
 801097e:	e79c      	b.n	80108ba <pow+0xd2>
 8010980:	2000      	movs	r0, #0
 8010982:	e7e4      	b.n	801094e <pow+0x166>
 8010984:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010988:	e797      	b.n	80108ba <pow+0xd2>
 801098a:	2e01      	cmp	r6, #1
 801098c:	eb74 0303 	sbcs.w	r3, r4, r3
 8010990:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010994:	bf34      	ite	cc
 8010996:	2301      	movcc	r3, #1
 8010998:	2300      	movcs	r3, #0
 801099a:	4295      	cmp	r5, r2
 801099c:	bf8c      	ite	hi
 801099e:	2500      	movhi	r5, #0
 80109a0:	2501      	movls	r5, #1
 80109a2:	42ab      	cmp	r3, r5
 80109a4:	f000 809d 	beq.w	8010ae2 <pow+0x2fa>
 80109a8:	b006      	add	sp, #24
 80109aa:	ecbd 8b0a 	vpop	{d8-d12}
 80109ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109b2:	f000 baf1 	b.w	8010f98 <__math_oflow>
 80109b6:	f1bc 0f00 	cmp.w	ip, #0
 80109ba:	d10b      	bne.n	80109d4 <pow+0x1ec>
 80109bc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010af0 <pow+0x308>
 80109c0:	ee20 7b07 	vmul.f64	d7, d0, d7
 80109c4:	ec53 2b17 	vmov	r2, r3, d7
 80109c8:	ee17 6a10 	vmov	r6, s14
 80109cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80109d0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80109d4:	4b4c      	ldr	r3, [pc, #304]	; (8010b08 <pow+0x320>)
 80109d6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80109da:	4423      	add	r3, r4
 80109dc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80109e0:	1519      	asrs	r1, r3, #20
 80109e2:	0d1b      	lsrs	r3, r3, #20
 80109e4:	051b      	lsls	r3, r3, #20
 80109e6:	eba4 0903 	sub.w	r9, r4, r3
 80109ea:	4b48      	ldr	r3, [pc, #288]	; (8010b0c <pow+0x324>)
 80109ec:	ee04 1a10 	vmov	s8, r1
 80109f0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80109f4:	f1b6 0800 	subs.w	r8, r6, #0
 80109f8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80109fc:	ec49 8b15 	vmov	d5, r8, r9
 8010a00:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8010a04:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010a08:	ed93 7b00 	vldr	d7, [r3]
 8010a0c:	ed93 5b02 	vldr	d5, [r3, #8]
 8010a10:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8010a14:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010a18:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010a1c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010a20:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8010a24:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010a28:	ed93 5b04 	vldr	d5, [r3, #16]
 8010a2c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010a30:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010a34:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010a38:	ed93 4b08 	vldr	d4, [r3, #32]
 8010a3c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010a40:	eeb0 9b40 	vmov.f64	d9, d0
 8010a44:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010a48:	ed93 5b06 	vldr	d5, [r3, #24]
 8010a4c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010a50:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010a54:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010a58:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010a5c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010a60:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010a64:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010a68:	ee3a ab00 	vadd.f64	d10, d10, d0
 8010a6c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010a70:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010a74:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8010a78:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8010a7c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010a80:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010a84:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010a88:	eeab ab05 	vfma.f64	d10, d11, d5
 8010a8c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8010a90:	ee21 7b06 	vmul.f64	d7, d1, d6
 8010a94:	ee17 3a90 	vmov	r3, s15
 8010a98:	eeb0 5b47 	vmov.f64	d5, d7
 8010a9c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8010aa0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8010aa4:	18b2      	adds	r2, r6, r2
 8010aa6:	2a3e      	cmp	r2, #62	; 0x3e
 8010aa8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8010aac:	ee38 8b46 	vsub.f64	d8, d8, d6
 8010ab0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8010ab4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8010ab8:	d92b      	bls.n	8010b12 <pow+0x32a>
 8010aba:	2a00      	cmp	r2, #0
 8010abc:	da0b      	bge.n	8010ad6 <pow+0x2ee>
 8010abe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010ac2:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	f43f aef7 	beq.w	80108ba <pow+0xd2>
 8010acc:	eeb1 0b40 	vneg.f64	d0, d0
 8010ad0:	e6f3      	b.n	80108ba <pow+0xd2>
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	e77e      	b.n	80109d4 <pow+0x1ec>
 8010ad6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010ada:	d919      	bls.n	8010b10 <pow+0x328>
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	f6bf af63 	bge.w	80109a8 <pow+0x1c0>
 8010ae2:	b006      	add	sp, #24
 8010ae4:	ecbd 8b0a 	vpop	{d8-d12}
 8010ae8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aec:	f000 ba4c 	b.w	8010f88 <__math_uflow>
 8010af0:	00000000 	.word	0x00000000
 8010af4:	43300000 	.word	0x43300000
 8010af8:	3ff00000 	.word	0x3ff00000
 8010afc:	fff00000 	.word	0xfff00000
 8010b00:	ffe00000 	.word	0xffe00000
 8010b04:	7fe00000 	.word	0x7fe00000
 8010b08:	c0196aab 	.word	0xc0196aab
 8010b0c:	080114f0 	.word	0x080114f0
 8010b10:	2600      	movs	r6, #0
 8010b12:	495d      	ldr	r1, [pc, #372]	; (8010c88 <pow+0x4a0>)
 8010b14:	ed91 4b02 	vldr	d4, [r1, #8]
 8010b18:	ed91 3b00 	vldr	d3, [r1]
 8010b1c:	eeb0 6b44 	vmov.f64	d6, d4
 8010b20:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010b24:	ee16 5a10 	vmov	r5, s12
 8010b28:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010b2c:	ed91 4b04 	vldr	d4, [r1, #16]
 8010b30:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010b34:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010b38:	eeb0 0b47 	vmov.f64	d0, d7
 8010b3c:	ed91 7b06 	vldr	d7, [r1, #24]
 8010b40:	18dc      	adds	r4, r3, r3
 8010b42:	f104 030f 	add.w	r3, r4, #15
 8010b46:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010b4a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010b4e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8010b52:	ee35 0b00 	vadd.f64	d0, d5, d0
 8010b56:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010b5a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010b5e:	ed91 5b08 	vldr	d5, [r1, #32]
 8010b62:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010b66:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010b6a:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010b6e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8010b72:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010b76:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010b7a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8010b7e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8010b82:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8010b86:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010b8a:	1940      	adds	r0, r0, r5
 8010b8c:	2700      	movs	r7, #0
 8010b8e:	eb17 020c 	adds.w	r2, r7, ip
 8010b92:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8010b96:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010b9a:	2e00      	cmp	r6, #0
 8010b9c:	d15f      	bne.n	8010c5e <pow+0x476>
 8010b9e:	42bd      	cmp	r5, r7
 8010ba0:	db13      	blt.n	8010bca <pow+0x3e2>
 8010ba2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8010ba6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8010baa:	4610      	mov	r0, r2
 8010bac:	ec41 0b10 	vmov	d0, r0, r1
 8010bb0:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010bb4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010c70 <pow+0x488>
 8010bb8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010bbc:	b006      	add	sp, #24
 8010bbe:	ecbd 8b0a 	vpop	{d8-d12}
 8010bc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bc6:	f000 ba1f 	b.w	8011008 <__math_check_oflow>
 8010bca:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010bce:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8010bd2:	4610      	mov	r0, r2
 8010bd4:	ec41 0b15 	vmov	d5, r0, r1
 8010bd8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010bdc:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010be0:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010be4:	eeb0 3bc7 	vabs.f64	d3, d7
 8010be8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010c78 <pow+0x490>
 8010bf4:	d52a      	bpl.n	8010c4c <pow+0x464>
 8010bf6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010bfa:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c02:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010c06:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010c0a:	bf48      	it	mi
 8010c0c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010c10:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010c14:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010c18:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010c1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010c20:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010c24:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010c28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c30:	d104      	bne.n	8010c3c <pow+0x454>
 8010c32:	4632      	mov	r2, r6
 8010c34:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010c38:	ec43 2b17 	vmov	d7, r2, r3
 8010c3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010c40:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c44:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010c48:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010c4c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010c50:	b006      	add	sp, #24
 8010c52:	ecbd 8b0a 	vpop	{d8-d12}
 8010c56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c5a:	f000 b9cc 	b.w	8010ff6 <__math_check_uflow>
 8010c5e:	ec43 2b10 	vmov	d0, r2, r3
 8010c62:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010c66:	e628      	b.n	80108ba <pow+0xd2>
 8010c68:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010c80 <pow+0x498>
 8010c6c:	e625      	b.n	80108ba <pow+0xd2>
 8010c6e:	bf00      	nop
 8010c70:	00000000 	.word	0x00000000
 8010c74:	7f000000 	.word	0x7f000000
 8010c78:	00000000 	.word	0x00000000
 8010c7c:	00100000 	.word	0x00100000
	...
 8010c88:	08012538 	.word	0x08012538

08010c8c <asin>:
 8010c8c:	b508      	push	{r3, lr}
 8010c8e:	ed2d 8b04 	vpush	{d8-d9}
 8010c92:	eeb0 8b40 	vmov.f64	d8, d0
 8010c96:	f000 f847 	bl	8010d28 <__ieee754_asin>
 8010c9a:	eeb4 8b48 	vcmp.f64	d8, d8
 8010c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca2:	eeb0 9b40 	vmov.f64	d9, d0
 8010ca6:	d615      	bvs.n	8010cd4 <asin+0x48>
 8010ca8:	eeb0 0b48 	vmov.f64	d0, d8
 8010cac:	f000 f9c0 	bl	8011030 <fabs>
 8010cb0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010cb4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cbc:	dd0a      	ble.n	8010cd4 <asin+0x48>
 8010cbe:	f7fc febd 	bl	800da3c <__errno>
 8010cc2:	ecbd 8b04 	vpop	{d8-d9}
 8010cc6:	2321      	movs	r3, #33	; 0x21
 8010cc8:	6003      	str	r3, [r0, #0]
 8010cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010cce:	4804      	ldr	r0, [pc, #16]	; (8010ce0 <asin+0x54>)
 8010cd0:	f7fe be36 	b.w	800f940 <nan>
 8010cd4:	eeb0 0b49 	vmov.f64	d0, d9
 8010cd8:	ecbd 8b04 	vpop	{d8-d9}
 8010cdc:	bd08      	pop	{r3, pc}
 8010cde:	bf00      	nop
 8010ce0:	08011357 	.word	0x08011357
 8010ce4:	00000000 	.word	0x00000000

08010ce8 <sqrt>:
 8010ce8:	b508      	push	{r3, lr}
 8010cea:	ed2d 8b04 	vpush	{d8-d9}
 8010cee:	eeb0 8b40 	vmov.f64	d8, d0
 8010cf2:	f000 f927 	bl	8010f44 <__ieee754_sqrt>
 8010cf6:	eeb4 8b48 	vcmp.f64	d8, d8
 8010cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfe:	d60c      	bvs.n	8010d1a <sqrt+0x32>
 8010d00:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8010d20 <sqrt+0x38>
 8010d04:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d0c:	d505      	bpl.n	8010d1a <sqrt+0x32>
 8010d0e:	f7fc fe95 	bl	800da3c <__errno>
 8010d12:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010d16:	2321      	movs	r3, #33	; 0x21
 8010d18:	6003      	str	r3, [r0, #0]
 8010d1a:	ecbd 8b04 	vpop	{d8-d9}
 8010d1e:	bd08      	pop	{r3, pc}
	...

08010d28 <__ieee754_asin>:
 8010d28:	b538      	push	{r3, r4, r5, lr}
 8010d2a:	ee10 5a90 	vmov	r5, s1
 8010d2e:	4b82      	ldr	r3, [pc, #520]	; (8010f38 <__ieee754_asin+0x210>)
 8010d30:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010d34:	429c      	cmp	r4, r3
 8010d36:	ed2d 8b06 	vpush	{d8-d10}
 8010d3a:	dd19      	ble.n	8010d70 <__ieee754_asin+0x48>
 8010d3c:	ee10 3a10 	vmov	r3, s0
 8010d40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010d44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010d48:	4323      	orrs	r3, r4
 8010d4a:	d10c      	bne.n	8010d66 <__ieee754_asin+0x3e>
 8010d4c:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8010ec0 <__ieee754_asin+0x198>
 8010d50:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8010ec8 <__ieee754_asin+0x1a0>
 8010d54:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010d58:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010d5c:	eeb0 0b47 	vmov.f64	d0, d7
 8010d60:	ecbd 8b06 	vpop	{d8-d10}
 8010d64:	bd38      	pop	{r3, r4, r5, pc}
 8010d66:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010d6a:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8010d6e:	e7f7      	b.n	8010d60 <__ieee754_asin+0x38>
 8010d70:	4b72      	ldr	r3, [pc, #456]	; (8010f3c <__ieee754_asin+0x214>)
 8010d72:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8010d76:	429c      	cmp	r4, r3
 8010d78:	dc0b      	bgt.n	8010d92 <__ieee754_asin+0x6a>
 8010d7a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8010d7e:	da52      	bge.n	8010e26 <__ieee754_asin+0xfe>
 8010d80:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8010ed0 <__ieee754_asin+0x1a8>
 8010d84:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010d88:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8010d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d90:	dce6      	bgt.n	8010d60 <__ieee754_asin+0x38>
 8010d92:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8010d96:	f000 f94b 	bl	8011030 <fabs>
 8010d9a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8010ed8 <__ieee754_asin+0x1b0>
 8010d9e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010da2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010da6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010ee0 <__ieee754_asin+0x1b8>
 8010daa:	eeb0 0b48 	vmov.f64	d0, d8
 8010dae:	eea8 6b07 	vfma.f64	d6, d8, d7
 8010db2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010ee8 <__ieee754_asin+0x1c0>
 8010db6:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010dba:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8010ef0 <__ieee754_asin+0x1c8>
 8010dbe:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8010ef8 <__ieee754_asin+0x1d0>
 8010dc2:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010dc6:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8010f00 <__ieee754_asin+0x1d8>
 8010dca:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010dce:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010f08 <__ieee754_asin+0x1e0>
 8010dd2:	eea7 ab08 	vfma.f64	d10, d7, d8
 8010dd6:	ee2a ab08 	vmul.f64	d10, d10, d8
 8010dda:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010f10 <__ieee754_asin+0x1e8>
 8010dde:	eea8 7b06 	vfma.f64	d7, d8, d6
 8010de2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8010f18 <__ieee754_asin+0x1f0>
 8010de6:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010dea:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010f20 <__ieee754_asin+0x1f8>
 8010dee:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010df2:	eea7 9b08 	vfma.f64	d9, d7, d8
 8010df6:	f000 f8a5 	bl	8010f44 <__ieee754_sqrt>
 8010dfa:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8010dfe:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8010e02:	4b4f      	ldr	r3, [pc, #316]	; (8010f40 <__ieee754_asin+0x218>)
 8010e04:	429c      	cmp	r4, r3
 8010e06:	dd3d      	ble.n	8010e84 <__ieee754_asin+0x15c>
 8010e08:	eea0 0b05 	vfma.f64	d0, d0, d5
 8010e0c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8010f28 <__ieee754_asin+0x200>
 8010e10:	eea0 7b04 	vfma.f64	d7, d0, d4
 8010e14:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8010ec8 <__ieee754_asin+0x1a0>
 8010e18:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010e1c:	2d00      	cmp	r5, #0
 8010e1e:	bfd8      	it	le
 8010e20:	eeb1 0b40 	vnegle.f64	d0, d0
 8010e24:	e79c      	b.n	8010d60 <__ieee754_asin+0x38>
 8010e26:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010ed8 <__ieee754_asin+0x1b0>
 8010e2a:	ee20 7b00 	vmul.f64	d7, d0, d0
 8010e2e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8010ee0 <__ieee754_asin+0x1b8>
 8010e32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010e36:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010ee8 <__ieee754_asin+0x1c0>
 8010e3a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010e3e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8010ef0 <__ieee754_asin+0x1c8>
 8010e42:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010e46:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8010f00 <__ieee754_asin+0x1d8>
 8010e4a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010e4e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8010ef8 <__ieee754_asin+0x1d0>
 8010e52:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8010f08 <__ieee754_asin+0x1e0>
 8010e56:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010e5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010e5e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010f10 <__ieee754_asin+0x1e8>
 8010e62:	eea7 5b04 	vfma.f64	d5, d7, d4
 8010e66:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8010f18 <__ieee754_asin+0x1f0>
 8010e6a:	eea5 4b07 	vfma.f64	d4, d5, d7
 8010e6e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010f20 <__ieee754_asin+0x1f8>
 8010e72:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010e76:	eea5 9b07 	vfma.f64	d9, d5, d7
 8010e7a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8010e7e:	eea0 0b07 	vfma.f64	d0, d0, d7
 8010e82:	e76d      	b.n	8010d60 <__ieee754_asin+0x38>
 8010e84:	ec53 2b10 	vmov	r2, r3, d0
 8010e88:	2200      	movs	r2, #0
 8010e8a:	ec43 2b16 	vmov	d6, r2, r3
 8010e8e:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010e92:	eea6 8b46 	vfms.f64	d8, d6, d6
 8010e96:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8010e9a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8010ec0 <__ieee754_asin+0x198>
 8010e9e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010ea2:	eea3 7b44 	vfms.f64	d7, d3, d4
 8010ea6:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8010eaa:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8010f30 <__ieee754_asin+0x208>
 8010eae:	eeb0 0b45 	vmov.f64	d0, d5
 8010eb2:	eea6 0b44 	vfms.f64	d0, d6, d4
 8010eb6:	ee37 0b40 	vsub.f64	d0, d7, d0
 8010eba:	ee35 0b40 	vsub.f64	d0, d5, d0
 8010ebe:	e7ad      	b.n	8010e1c <__ieee754_asin+0xf4>
 8010ec0:	33145c07 	.word	0x33145c07
 8010ec4:	3c91a626 	.word	0x3c91a626
 8010ec8:	54442d18 	.word	0x54442d18
 8010ecc:	3ff921fb 	.word	0x3ff921fb
 8010ed0:	8800759c 	.word	0x8800759c
 8010ed4:	7e37e43c 	.word	0x7e37e43c
 8010ed8:	0dfdf709 	.word	0x0dfdf709
 8010edc:	3f023de1 	.word	0x3f023de1
 8010ee0:	7501b288 	.word	0x7501b288
 8010ee4:	3f49efe0 	.word	0x3f49efe0
 8010ee8:	b5688f3b 	.word	0xb5688f3b
 8010eec:	bfa48228 	.word	0xbfa48228
 8010ef0:	0e884455 	.word	0x0e884455
 8010ef4:	3fc9c155 	.word	0x3fc9c155
 8010ef8:	55555555 	.word	0x55555555
 8010efc:	3fc55555 	.word	0x3fc55555
 8010f00:	03eb6f7d 	.word	0x03eb6f7d
 8010f04:	bfd4d612 	.word	0xbfd4d612
 8010f08:	b12e9282 	.word	0xb12e9282
 8010f0c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010f10:	1b8d0159 	.word	0x1b8d0159
 8010f14:	bfe6066c 	.word	0xbfe6066c
 8010f18:	9c598ac8 	.word	0x9c598ac8
 8010f1c:	40002ae5 	.word	0x40002ae5
 8010f20:	1c8a2d4b 	.word	0x1c8a2d4b
 8010f24:	c0033a27 	.word	0xc0033a27
 8010f28:	33145c07 	.word	0x33145c07
 8010f2c:	bc91a626 	.word	0xbc91a626
 8010f30:	54442d18 	.word	0x54442d18
 8010f34:	3fe921fb 	.word	0x3fe921fb
 8010f38:	3fefffff 	.word	0x3fefffff
 8010f3c:	3fdfffff 	.word	0x3fdfffff
 8010f40:	3fef3332 	.word	0x3fef3332

08010f44 <__ieee754_sqrt>:
 8010f44:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010f48:	4770      	bx	lr

08010f4a <with_errno>:
 8010f4a:	b513      	push	{r0, r1, r4, lr}
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	ed8d 0b00 	vstr	d0, [sp]
 8010f52:	f7fc fd73 	bl	800da3c <__errno>
 8010f56:	ed9d 0b00 	vldr	d0, [sp]
 8010f5a:	6004      	str	r4, [r0, #0]
 8010f5c:	b002      	add	sp, #8
 8010f5e:	bd10      	pop	{r4, pc}

08010f60 <xflow>:
 8010f60:	b082      	sub	sp, #8
 8010f62:	b158      	cbz	r0, 8010f7c <xflow+0x1c>
 8010f64:	eeb1 7b40 	vneg.f64	d7, d0
 8010f68:	ed8d 7b00 	vstr	d7, [sp]
 8010f6c:	ed9d 7b00 	vldr	d7, [sp]
 8010f70:	2022      	movs	r0, #34	; 0x22
 8010f72:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010f76:	b002      	add	sp, #8
 8010f78:	f7ff bfe7 	b.w	8010f4a <with_errno>
 8010f7c:	eeb0 7b40 	vmov.f64	d7, d0
 8010f80:	e7f2      	b.n	8010f68 <xflow+0x8>
 8010f82:	0000      	movs	r0, r0
 8010f84:	0000      	movs	r0, r0
	...

08010f88 <__math_uflow>:
 8010f88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010f90 <__math_uflow+0x8>
 8010f8c:	f7ff bfe8 	b.w	8010f60 <xflow>
 8010f90:	00000000 	.word	0x00000000
 8010f94:	10000000 	.word	0x10000000

08010f98 <__math_oflow>:
 8010f98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010fa0 <__math_oflow+0x8>
 8010f9c:	f7ff bfe0 	b.w	8010f60 <xflow>
 8010fa0:	00000000 	.word	0x00000000
 8010fa4:	70000000 	.word	0x70000000

08010fa8 <__math_divzero>:
 8010fa8:	b082      	sub	sp, #8
 8010faa:	2800      	cmp	r0, #0
 8010fac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010fb0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010fb4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010fb8:	ed8d 7b00 	vstr	d7, [sp]
 8010fbc:	ed9d 0b00 	vldr	d0, [sp]
 8010fc0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010fd0 <__math_divzero+0x28>
 8010fc4:	2022      	movs	r0, #34	; 0x22
 8010fc6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8010fca:	b002      	add	sp, #8
 8010fcc:	f7ff bfbd 	b.w	8010f4a <with_errno>
	...

08010fd8 <__math_invalid>:
 8010fd8:	eeb0 7b40 	vmov.f64	d7, d0
 8010fdc:	eeb4 7b47 	vcmp.f64	d7, d7
 8010fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010fe8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8010fec:	d602      	bvs.n	8010ff4 <__math_invalid+0x1c>
 8010fee:	2021      	movs	r0, #33	; 0x21
 8010ff0:	f7ff bfab 	b.w	8010f4a <with_errno>
 8010ff4:	4770      	bx	lr

08010ff6 <__math_check_uflow>:
 8010ff6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ffe:	d102      	bne.n	8011006 <__math_check_uflow+0x10>
 8011000:	2022      	movs	r0, #34	; 0x22
 8011002:	f7ff bfa2 	b.w	8010f4a <with_errno>
 8011006:	4770      	bx	lr

08011008 <__math_check_oflow>:
 8011008:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011028 <__math_check_oflow+0x20>
 801100c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011010:	eeb4 7b46 	vcmp.f64	d7, d6
 8011014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011018:	dd02      	ble.n	8011020 <__math_check_oflow+0x18>
 801101a:	2022      	movs	r0, #34	; 0x22
 801101c:	f7ff bf95 	b.w	8010f4a <with_errno>
 8011020:	4770      	bx	lr
 8011022:	bf00      	nop
 8011024:	f3af 8000 	nop.w
 8011028:	ffffffff 	.word	0xffffffff
 801102c:	7fefffff 	.word	0x7fefffff

08011030 <fabs>:
 8011030:	ec51 0b10 	vmov	r0, r1, d0
 8011034:	ee10 2a10 	vmov	r2, s0
 8011038:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801103c:	ec43 2b10 	vmov	d0, r2, r3
 8011040:	4770      	bx	lr
	...

08011044 <_init>:
 8011044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011046:	bf00      	nop
 8011048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801104a:	bc08      	pop	{r3}
 801104c:	469e      	mov	lr, r3
 801104e:	4770      	bx	lr

08011050 <_fini>:
 8011050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011052:	bf00      	nop
 8011054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011056:	bc08      	pop	{r3}
 8011058:	469e      	mov	lr, r3
 801105a:	4770      	bx	lr
