
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f4c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  080121f0  080121f0  000221f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014018  08014018  0003028c  2**0
                  CONTENTS
  4 .ARM          00000008  08014018  08014018  00024018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014020  08014020  0003028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014020  08014020  00024020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014024  08014024  00024024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  24000000  08014028  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000abc  24000290  080142b4  00030290  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000d4c  080142b4  00030d4c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0e0  00000000  00000000  000302ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a9  00000000  00000000  0004c39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0004f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  00050b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050d8  00000000  00000000  00051d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c692  00000000  00000000  00056dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001652cd  00000000  00000000  0007346a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d8737  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006258  00000000  00000000  001d8788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000290 	.word	0x24000290
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080121d4 	.word	0x080121d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000294 	.word	0x24000294
 80002dc:	080121d4 	.word	0x080121d4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b74      	ldr	r3, [pc, #464]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a72      	ldr	r2, [pc, #456]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b70      	ldr	r3, [pc, #448]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b6c      	ldr	r3, [pc, #432]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a6b      	ldr	r2, [pc, #428]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b68      	ldr	r3, [pc, #416]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b65      	ldr	r3, [pc, #404]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a63      	ldr	r2, [pc, #396]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b61      	ldr	r3, [pc, #388]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a5c      	ldr	r2, [pc, #368]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b59      	ldr	r3, [pc, #356]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b56      	ldr	r3, [pc, #344]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a54      	ldr	r2, [pc, #336]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b52      	ldr	r3, [pc, #328]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a4d      	ldr	r2, [pc, #308]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a45      	ldr	r2, [pc, #276]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b6a:	483f      	ldr	r0, [pc, #252]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000b6c:	f007 f950 	bl	8007e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2170      	movs	r1, #112	; 0x70
 8000b74:	483d      	ldr	r0, [pc, #244]	; (8000c6c <MX_GPIO_Init+0x1f0>)
 8000b76:	f007 f94b 	bl	8007e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8000b7a:	233f      	movs	r3, #63	; 0x3f
 8000b7c:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4838      	ldr	r0, [pc, #224]	; (8000c70 <MX_GPIO_Init+0x1f4>)
 8000b90:	f006 ff76 	bl	8007a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482f      	ldr	r0, [pc, #188]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000bac:	f006 ff68 	bl	8007a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000bb0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4827      	ldr	r0, [pc, #156]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000bca:	f006 ff59 	bl	8007a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8000bce:	2370      	movs	r3, #112	; 0x70
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4821      	ldr	r0, [pc, #132]	; (8000c6c <MX_GPIO_Init+0x1f0>)
 8000be6:	f006 ff4b 	bl	8007a80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	2006      	movs	r0, #6
 8000bf0:	f006 f99f 	bl	8006f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bf4:	2006      	movs	r0, #6
 8000bf6:	f006 f9b6 	bl	8006f66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f006 f997 	bl	8006f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c04:	2007      	movs	r0, #7
 8000c06:	f006 f9ae 	bl	8006f66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2008      	movs	r0, #8
 8000c10:	f006 f98f 	bl	8006f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c14:	2008      	movs	r0, #8
 8000c16:	f006 f9a6 	bl	8006f66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	2009      	movs	r0, #9
 8000c20:	f006 f987 	bl	8006f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c24:	2009      	movs	r0, #9
 8000c26:	f006 f99e 	bl	8006f66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	200a      	movs	r0, #10
 8000c30:	f006 f97f 	bl	8006f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c34:	200a      	movs	r0, #10
 8000c36:	f006 f996 	bl	8006f66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	2017      	movs	r0, #23
 8000c40:	f006 f977 	bl	8006f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c44:	2017      	movs	r0, #23
 8000c46:	f006 f98e 	bl	8006f66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	2028      	movs	r0, #40	; 0x28
 8000c50:	f006 f96f 	bl	8006f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c54:	2028      	movs	r0, #40	; 0x28
 8000c56:	f006 f986 	bl	8006f66 <HAL_NVIC_EnableIRQ>

}
 8000c5a:	bf00      	nop
 8000c5c:	3730      	adds	r7, #48	; 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	58024400 	.word	0x58024400
 8000c68:	58020800 	.word	0x58020800
 8000c6c:	58020c00 	.word	0x58020c00
 8000c70:	58021000 	.word	0x58021000
 8000c74:	00000000 	.word	0x00000000

08000c78 <homingAprox>:
#include "homing.h"
uint8_t homeOk;			//Flag de aproximacion de homing
double rpm;


void homingAprox(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	homeOk = 0;
 8000c7e:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <homingAprox+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);//Apago interrupcion input capture motor 1
 8000c84:	2100      	movs	r1, #0
 8000c86:	4821      	ldr	r0, [pc, #132]	; (8000d0c <homingAprox+0x94>)
 8000c88:	f00a f9a0 	bl	800afcc <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);//Apago interrupcion input capture motor 2
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4820      	ldr	r0, [pc, #128]	; (8000d10 <homingAprox+0x98>)
 8000c90:	f00a f99c 	bl	800afcc <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);//Apago interrupcion input capture motor 3
 8000c94:	2100      	movs	r1, #0
 8000c96:	481f      	ldr	r0, [pc, #124]	; (8000d14 <homingAprox+0x9c>)
 8000c98:	f00a f998 	bl	800afcc <HAL_TIM_IC_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000c9c:	2006      	movs	r0, #6
 8000c9e:	f006 f970 	bl	8006f82 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f006 f96d 	bl	8006f82 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000ca8:	2008      	movs	r0, #8
 8000caa:	f006 f96a 	bl	8006f82 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000cae:	2009      	movs	r0, #9
 8000cb0:	f006 f967 	bl	8006f82 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f006 f964 	bl	8006f82 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000cba:	2017      	movs	r0, #23
 8000cbc:	f006 f961 	bl	8006f82 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);//Set direccion con la misma convencion que motor.c
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc6:	4814      	ldr	r0, [pc, #80]	; (8000d18 <homingAprox+0xa0>)
 8000cc8:	f007 f8a2 	bl	8007e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd2:	4811      	ldr	r0, [pc, #68]	; (8000d18 <homingAprox+0xa0>)
 8000cd4:	f007 f89c 	bl	8007e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	480e      	ldr	r0, [pc, #56]	; (8000d18 <homingAprox+0xa0>)
 8000ce0:	f007 f896 	bl	8007e10 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000ce4:	2014      	movs	r0, #20
 8000ce6:	f005 fff5 	bl	8006cd4 <HAL_Delay>
	rpm = 0.1;
 8000cea:	490c      	ldr	r1, [pc, #48]	; (8000d1c <homingAprox+0xa4>)
 8000cec:	a304      	add	r3, pc, #16	; (adr r3, 8000d00 <homingAprox+0x88>)
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf2:	e9c1 2300 	strd	r2, r3, [r1]
	uint32_t hom = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]


	while (homeOk == 0) {
 8000cfa:	e18c      	b.n	8001016 <homingAprox+0x39e>
 8000cfc:	f3af 8000 	nop.w
 8000d00:	9999999a 	.word	0x9999999a
 8000d04:	3fb99999 	.word	0x3fb99999
 8000d08:	240002ac 	.word	0x240002ac
 8000d0c:	240004b4 	.word	0x240004b4
 8000d10:	24000500 	.word	0x24000500
 8000d14:	2400054c 	.word	0x2400054c
 8000d18:	58020800 	.word	0x58020800
 8000d1c:	240002b0 	.word	0x240002b0
		if(rpm<=4){
 8000d20:	4bcb      	ldr	r3, [pc, #812]	; (8001050 <homingAprox+0x3d8>)
 8000d22:	ed93 7b00 	vldr	d7, [r3]
 8000d26:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000d2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d32:	d809      	bhi.n	8000d48 <homingAprox+0xd0>
			rpm = rpm + 0.001;
 8000d34:	4bc6      	ldr	r3, [pc, #792]	; (8001050 <homingAprox+0x3d8>)
 8000d36:	ed93 7b00 	vldr	d7, [r3]
 8000d3a:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8001038 <homingAprox+0x3c0>
 8000d3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d42:	4bc3      	ldr	r3, [pc, #780]	; (8001050 <homingAprox+0x3d8>)
 8000d44:	ed83 7b00 	vstr	d7, [r3]
		//TIM12->CNT=0;




		periodoM[0]=(uint32_t)(((Fcl * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 8000d48:	4bc2      	ldr	r3, [pc, #776]	; (8001054 <homingAprox+0x3dc>)
 8000d4a:	ed93 7b00 	vldr	d7, [r3]
 8000d4e:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8001040 <homingAprox+0x3c8>
 8000d52:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000d56:	4bc0      	ldr	r3, [pc, #768]	; (8001058 <homingAprox+0x3e0>)
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d62:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d66:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000d6a:	4bb9      	ldr	r3, [pc, #740]	; (8001050 <homingAprox+0x3d8>)
 8000d6c:	ed93 7b00 	vldr	d7, [r3]
 8000d70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d74:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8001048 <homingAprox+0x3d0>
 8000d78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d90:	4bb2      	ldr	r3, [pc, #712]	; (800105c <homingAprox+0x3e4>)
 8000d92:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1]=(uint32_t)(((Fcl * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8000d96:	4baf      	ldr	r3, [pc, #700]	; (8001054 <homingAprox+0x3dc>)
 8000d98:	ed93 7b00 	vldr	d7, [r3]
 8000d9c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001040 <homingAprox+0x3c8>
 8000da0:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000da4:	4bae      	ldr	r3, [pc, #696]	; (8001060 <homingAprox+0x3e8>)
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000db0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000db4:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000db8:	4ba5      	ldr	r3, [pc, #660]	; (8001050 <homingAprox+0x3d8>)
 8000dba:	ed93 7b00 	vldr	d7, [r3]
 8000dbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dc2:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001048 <homingAprox+0x3d0>
 8000dc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000dca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dd6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dda:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dde:	4b9f      	ldr	r3, [pc, #636]	; (800105c <homingAprox+0x3e4>)
 8000de0:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2]=(uint32_t)(((Fcl * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 8000de4:	4b9b      	ldr	r3, [pc, #620]	; (8001054 <homingAprox+0x3dc>)
 8000de6:	ed93 7b00 	vldr	d7, [r3]
 8000dea:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8001040 <homingAprox+0x3c8>
 8000dee:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000df2:	4b9c      	ldr	r3, [pc, #624]	; (8001064 <homingAprox+0x3ec>)
 8000df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df6:	ee07 3a90 	vmov	s15, r3
 8000dfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dfe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e02:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000e06:	4b92      	ldr	r3, [pc, #584]	; (8001050 <homingAprox+0x3d8>)
 8000e08:	ed93 7b00 	vldr	d7, [r3]
 8000e0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e10:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8001048 <homingAprox+0x3d0>
 8000e14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e28:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e2c:	4b8b      	ldr	r3, [pc, #556]	; (800105c <homingAprox+0x3e4>)
 8000e2e:	ed83 7b04 	vstr	d7, [r3, #16]


		if (TIM12->CNT > periodoM[0]) {
 8000e32:	4b89      	ldr	r3, [pc, #548]	; (8001058 <homingAprox+0x3e0>)
 8000e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e36:	ee07 3a90 	vmov	s15, r3
 8000e3a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000e3e:	4b87      	ldr	r3, [pc, #540]	; (800105c <homingAprox+0x3e4>)
 8000e40:	ed93 7b00 	vldr	d7, [r3]
 8000e44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4c:	dd0c      	ble.n	8000e68 <homingAprox+0x1f0>
					TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8000e4e:	4b83      	ldr	r3, [pc, #524]	; (800105c <homingAprox+0x3e4>)
 8000e50:	ed93 7b00 	vldr	d7, [r3]
 8000e54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e5c:	4b7e      	ldr	r3, [pc, #504]	; (8001058 <homingAprox+0x3e0>)
 8000e5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e62:	ee17 2a90 	vmov	r2, s15
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM13->CNT > periodoM[1]) {
 8000e68:	4b7d      	ldr	r3, [pc, #500]	; (8001060 <homingAprox+0x3e8>)
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000e74:	4b79      	ldr	r3, [pc, #484]	; (800105c <homingAprox+0x3e4>)
 8000e76:	ed93 7b02 	vldr	d7, [r3, #8]
 8000e7a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	dd0c      	ble.n	8000e9e <homingAprox+0x226>
					TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8000e84:	4b75      	ldr	r3, [pc, #468]	; (800105c <homingAprox+0x3e4>)
 8000e86:	ed93 7b02 	vldr	d7, [r3, #8]
 8000e8a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e92:	4b73      	ldr	r3, [pc, #460]	; (8001060 <homingAprox+0x3e8>)
 8000e94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e98:	ee17 2a90 	vmov	r2, s15
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM14->CNT > periodoM[2]) {
 8000e9e:	4b71      	ldr	r3, [pc, #452]	; (8001064 <homingAprox+0x3ec>)
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000eaa:	4b6c      	ldr	r3, [pc, #432]	; (800105c <homingAprox+0x3e4>)
 8000eac:	ed93 7b04 	vldr	d7, [r3, #16]
 8000eb0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb8:	dd0c      	ble.n	8000ed4 <homingAprox+0x25c>
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8000eba:	4b68      	ldr	r3, [pc, #416]	; (800105c <homingAprox+0x3e4>)
 8000ebc:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ec0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ec4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ec8:	4b66      	ldr	r3, [pc, #408]	; (8001064 <homingAprox+0x3ec>)
 8000eca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ece:	ee17 2a90 	vmov	r2, s15
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
		}

		TIM12->ARR =periodoM[0];
 8000ed4:	4b61      	ldr	r3, [pc, #388]	; (800105c <homingAprox+0x3e4>)
 8000ed6:	ed93 7b00 	vldr	d7, [r3]
 8000eda:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <homingAprox+0x3e0>)
 8000edc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ee0:	ee17 2a90 	vmov	r2, s15
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000ee6:	4b5c      	ldr	r3, [pc, #368]	; (8001058 <homingAprox+0x3e0>)
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ef2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ef6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000efa:	4b57      	ldr	r3, [pc, #348]	; (8001058 <homingAprox+0x3e0>)
 8000efc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f00:	ee17 2a90 	vmov	r2, s15
 8000f04:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->ARR =periodoM[1];
 8000f06:	4b55      	ldr	r3, [pc, #340]	; (800105c <homingAprox+0x3e4>)
 8000f08:	ed93 7b02 	vldr	d7, [r3, #8]
 8000f0c:	4b54      	ldr	r3, [pc, #336]	; (8001060 <homingAprox+0x3e8>)
 8000f0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f12:	ee17 2a90 	vmov	r2, s15
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000f18:	4b51      	ldr	r3, [pc, #324]	; (8001060 <homingAprox+0x3e8>)
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f24:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f2c:	4b4c      	ldr	r3, [pc, #304]	; (8001060 <homingAprox+0x3e8>)
 8000f2e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f32:	ee17 2a90 	vmov	r2, s15
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->ARR =periodoM[2];
 8000f38:	4b48      	ldr	r3, [pc, #288]	; (800105c <homingAprox+0x3e4>)
 8000f3a:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f3e:	4b49      	ldr	r3, [pc, #292]	; (8001064 <homingAprox+0x3ec>)
 8000f40:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f44:	ee17 2a90 	vmov	r2, s15
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000f4a:	4b46      	ldr	r3, [pc, #280]	; (8001064 <homingAprox+0x3ec>)
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f5e:	4b41      	ldr	r3, [pc, #260]	; (8001064 <homingAprox+0x3ec>)
 8000f60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f64:	ee17 2a90 	vmov	r2, s15
 8000f68:	635a      	str	r2, [r3, #52]	; 0x34


		if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	483e      	ldr	r0, [pc, #248]	; (8001068 <homingAprox+0x3f0>)
 8000f6e:	f006 ff37 	bl	8007de0 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00d      	beq.n	8000f94 <homingAprox+0x31c>
 8000f78:	2104      	movs	r1, #4
 8000f7a:	483b      	ldr	r0, [pc, #236]	; (8001068 <homingAprox+0x3f0>)
 8000f7c:	f006 ff30 	bl	8007de0 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <homingAprox+0x31c>
 8000f86:	2110      	movs	r1, #16
 8000f88:	4837      	ldr	r0, [pc, #220]	; (8001068 <homingAprox+0x3f0>)
 8000f8a:	f006 ff29 	bl	8007de0 <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d126      	bne.n	8000fe2 <homingAprox+0x36a>
			HAL_Delay(30);
 8000f94:	201e      	movs	r0, #30
 8000f96:	f005 fe9d 	bl	8006cd4 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4832      	ldr	r0, [pc, #200]	; (8001068 <homingAprox+0x3f0>)
 8000f9e:	f006 ff1f 	bl	8007de0 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00d      	beq.n	8000fc4 <homingAprox+0x34c>
 8000fa8:	2104      	movs	r1, #4
 8000faa:	482f      	ldr	r0, [pc, #188]	; (8001068 <homingAprox+0x3f0>)
 8000fac:	f006 ff18 	bl	8007de0 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d006      	beq.n	8000fc4 <homingAprox+0x34c>
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	482b      	ldr	r0, [pc, #172]	; (8001068 <homingAprox+0x3f0>)
 8000fba:	f006 ff11 	bl	8007de0 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10e      	bne.n	8000fe2 <homingAprox+0x36a>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4829      	ldr	r0, [pc, #164]	; (800106c <homingAprox+0x3f4>)
 8000fc8:	f009 fdb8 	bl	800ab3c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4828      	ldr	r0, [pc, #160]	; (8001070 <homingAprox+0x3f8>)
 8000fd0:	f009 fdb4 	bl	800ab3c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4827      	ldr	r0, [pc, #156]	; (8001074 <homingAprox+0x3fc>)
 8000fd8:	f009 fdb0 	bl	800ab3c <HAL_TIM_PWM_Stop>
				homeOk = 1;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <homingAprox+0x400>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(hom==0){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d113      	bne.n	8001010 <homingAprox+0x398>
			hom=1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart3, "hola k ace\n\r", 12, 100);
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	220c      	movs	r2, #12
 8000ff0:	4922      	ldr	r1, [pc, #136]	; (800107c <homingAprox+0x404>)
 8000ff2:	4823      	ldr	r0, [pc, #140]	; (8001080 <homingAprox+0x408>)
 8000ff4:	f00b fae8 	bl	800c5c8 <HAL_UART_Transmit>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	481c      	ldr	r0, [pc, #112]	; (800106c <homingAprox+0x3f4>)
 8000ffc:	f009 fc90 	bl	800a920 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001000:	2100      	movs	r1, #0
 8001002:	481b      	ldr	r0, [pc, #108]	; (8001070 <homingAprox+0x3f8>)
 8001004:	f009 fc8c 	bl	800a920 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001008:	2100      	movs	r1, #0
 800100a:	481a      	ldr	r0, [pc, #104]	; (8001074 <homingAprox+0x3fc>)
 800100c:	f009 fc88 	bl	800a920 <HAL_TIM_PWM_Start>
		}
		HAL_Delay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f005 fe5f 	bl	8006cd4 <HAL_Delay>
	while (homeOk == 0) {
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <homingAprox+0x400>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f43f ae80 	beq.w	8000d20 <homingAprox+0xa8>
	}
	HAL_UART_Transmit(&huart3, "Fin_Aprox\n\r", 11, 100);
 8001020:	2364      	movs	r3, #100	; 0x64
 8001022:	220b      	movs	r2, #11
 8001024:	4917      	ldr	r1, [pc, #92]	; (8001084 <homingAprox+0x40c>)
 8001026:	4816      	ldr	r0, [pc, #88]	; (8001080 <homingAprox+0x408>)
 8001028:	f00b face 	bl	800c5c8 <HAL_UART_Transmit>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	e029      	b.n	8001088 <homingAprox+0x410>
 8001034:	f3af 8000 	nop.w
 8001038:	d2f1a9fc 	.word	0xd2f1a9fc
 800103c:	3f50624d 	.word	0x3f50624d
 8001040:	00000000 	.word	0x00000000
 8001044:	404e0000 	.word	0x404e0000
 8001048:	00000000 	.word	0x00000000
 800104c:	40c2c000 	.word	0x40c2c000
 8001050:	240002b0 	.word	0x240002b0
 8001054:	24000000 	.word	0x24000000
 8001058:	40001800 	.word	0x40001800
 800105c:	240003e0 	.word	0x240003e0
 8001060:	40001c00 	.word	0x40001c00
 8001064:	40002000 	.word	0x40002000
 8001068:	58021000 	.word	0x58021000
 800106c:	240005e4 	.word	0x240005e4
 8001070:	24000630 	.word	0x24000630
 8001074:	2400067c 	.word	0x2400067c
 8001078:	240002ac 	.word	0x240002ac
 800107c:	080121f0 	.word	0x080121f0
 8001080:	24000ca8 	.word	0x24000ca8
 8001084:	08012200 	.word	0x08012200
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	0000      	movs	r0, r0
	...

08001090 <homingArm1>:

void homingArm1(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	double flagEndStop=0;
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 80010a2:	2100      	movs	r1, #0
 80010a4:	4862      	ldr	r0, [pc, #392]	; (8001230 <homingArm1+0x1a0>)
 80010a6:	f009 fd49 	bl	800ab3c <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 80010aa:	4962      	ldr	r1, [pc, #392]	; (8001234 <homingArm1+0x1a4>)
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b61      	ldr	r3, [pc, #388]	; (8001238 <homingArm1+0x1a8>)
 80010b2:	e9c1 2300 	strd	r2, r3, [r1]
	TIM12->ARR = ((Fcl * 60) / (rpm * ((TIM12->PSC) + 1) * 9600)) - 1;
 80010b6:	4b61      	ldr	r3, [pc, #388]	; (800123c <homingArm1+0x1ac>)
 80010b8:	ed93 7b00 	vldr	d7, [r3]
 80010bc:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8001220 <homingArm1+0x190>
 80010c0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80010c4:	4b5e      	ldr	r3, [pc, #376]	; (8001240 <homingArm1+0x1b0>)
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	3301      	adds	r3, #1
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010d2:	4b58      	ldr	r3, [pc, #352]	; (8001234 <homingArm1+0x1a4>)
 80010d4:	ed93 7b00 	vldr	d7, [r3]
 80010d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010dc:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8001228 <homingArm1+0x198>
 80010e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80010ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <homingArm1+0x1b0>)
 80010f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010f6:	ee17 2a90 	vmov	r2, s15
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM12->CCR1 = (TIM12->ARR) / 2;
 80010fc:	4b50      	ldr	r3, [pc, #320]	; (8001240 <homingArm1+0x1b0>)
 80010fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001100:	4a4f      	ldr	r2, [pc, #316]	; (8001240 <homingArm1+0x1b0>)
 8001102:	085b      	lsrs	r3, r3, #1
 8001104:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 8001106:	2101      	movs	r1, #1
 8001108:	484e      	ldr	r0, [pc, #312]	; (8001244 <homingArm1+0x1b4>)
 800110a:	f006 fe69 	bl	8007de0 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d114      	bne.n	800113e <homingArm1+0xae>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 8001114:	e00c      	b.n	8001130 <homingArm1+0xa0>
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111c:	484a      	ldr	r0, [pc, #296]	; (8001248 <homingArm1+0x1b8>)
 800111e:	f006 fe77 	bl	8007e10 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001122:	2100      	movs	r1, #0
 8001124:	4842      	ldr	r0, [pc, #264]	; (8001230 <homingArm1+0x1a0>)
 8001126:	f009 fbfb 	bl	800a920 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 800112a:	201e      	movs	r0, #30
 800112c:	f005 fdd2 	bl	8006cd4 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 8001130:	2101      	movs	r1, #1
 8001132:	4844      	ldr	r0, [pc, #272]	; (8001244 <homingArm1+0x1b4>)
 8001134:	f006 fe54 	bl	8007de0 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0eb      	beq.n	8001116 <homingArm1+0x86>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001144:	4840      	ldr	r0, [pc, #256]	; (8001248 <homingArm1+0x1b8>)
 8001146:	f006 fe63 	bl	8007e10 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800114a:	2100      	movs	r1, #0
 800114c:	4838      	ldr	r0, [pc, #224]	; (8001230 <homingArm1+0x1a0>)
 800114e:	f009 fbe7 	bl	800a920 <HAL_TIM_PWM_Start>
	homeOk = 0;
 8001152:	4b3e      	ldr	r3, [pc, #248]	; (800124c <homingArm1+0x1bc>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8001158:	e056      	b.n	8001208 <homingArm1+0x178>
		if (flagEndStop==0 && !(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 800115a:	ed97 7b00 	vldr	d7, [r7]
 800115e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	d121      	bne.n	80011ac <homingArm1+0x11c>
 8001168:	2101      	movs	r1, #1
 800116a:	4836      	ldr	r0, [pc, #216]	; (8001244 <homingArm1+0x1b4>)
 800116c:	f006 fe38 	bl	8007de0 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d11a      	bne.n	80011ac <homingArm1+0x11c>
			HAL_Delay(30);		//Para filtrar transitorio
 8001176:	201e      	movs	r0, #30
 8001178:	f005 fdac 	bl	8006cd4 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin))) {
 800117c:	2101      	movs	r1, #1
 800117e:	4831      	ldr	r0, [pc, #196]	; (8001244 <homingArm1+0x1b4>)
 8001180:	f006 fe2e 	bl	8007de0 <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d110      	bne.n	80011ac <homingArm1+0x11c>
				HAL_UART_Transmit(&huart3, "EndStop1_Pulsado\n\r", 18, 100);
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	2212      	movs	r2, #18
 800118e:	4930      	ldr	r1, [pc, #192]	; (8001250 <homingArm1+0x1c0>)
 8001190:	4830      	ldr	r0, [pc, #192]	; (8001254 <homingArm1+0x1c4>)
 8001192:	f00b fa19 	bl	800c5c8 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	482a      	ldr	r0, [pc, #168]	; (8001248 <homingArm1+0x1b8>)
 800119e:	f006 fe37 	bl	8007e10 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <homingArm1+0x1c8>)
 80011a8:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop==1 && HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 80011ac:	ed97 7b00 	vldr	d7, [r7]
 80011b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80011b4:	eeb4 7b46 	vcmp.f64	d7, d6
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	d124      	bne.n	8001208 <homingArm1+0x178>
 80011be:	2101      	movs	r1, #1
 80011c0:	4820      	ldr	r0, [pc, #128]	; (8001244 <homingArm1+0x1b4>)
 80011c2:	f006 fe0d 	bl	8007de0 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d01d      	beq.n	8001208 <homingArm1+0x178>
			HAL_Delay(30);		//Para filtrar transitorio
 80011cc:	201e      	movs	r0, #30
 80011ce:	f005 fd81 	bl	8006cd4 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 80011d2:	2101      	movs	r1, #1
 80011d4:	481b      	ldr	r0, [pc, #108]	; (8001244 <homingArm1+0x1b4>)
 80011d6:	f006 fe03 	bl	8007de0 <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <homingArm1+0x178>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 80011e0:	2100      	movs	r1, #0
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <homingArm1+0x1a0>)
 80011e4:	f009 fcaa 	bl	800ab3c <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3, "FinArm1\n\r", 9, 100);
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	2209      	movs	r2, #9
 80011ec:	491b      	ldr	r1, [pc, #108]	; (800125c <homingArm1+0x1cc>)
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <homingArm1+0x1c4>)
 80011f0:	f00b f9ea 	bl	800c5c8 <HAL_UART_Transmit>
				titha1 = 0;
 80011f4:	491a      	ldr	r1, [pc, #104]	; (8001260 <homingArm1+0x1d0>)
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <homingArm1+0x1bc>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <homingArm1+0x1bc>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0a4      	beq.n	800115a <homingArm1+0xca>
			}
		}
	}
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	f3af 8000 	nop.w
 8001220:	00000000 	.word	0x00000000
 8001224:	404e0000 	.word	0x404e0000
 8001228:	00000000 	.word	0x00000000
 800122c:	40c2c000 	.word	0x40c2c000
 8001230:	240005e4 	.word	0x240005e4
 8001234:	240002b0 	.word	0x240002b0
 8001238:	3fe00000 	.word	0x3fe00000
 800123c:	24000000 	.word	0x24000000
 8001240:	40001800 	.word	0x40001800
 8001244:	58021000 	.word	0x58021000
 8001248:	58020800 	.word	0x58020800
 800124c:	240002ac 	.word	0x240002ac
 8001250:	0801220c 	.word	0x0801220c
 8001254:	24000ca8 	.word	0x24000ca8
 8001258:	3ff00000 	.word	0x3ff00000
 800125c:	08012220 	.word	0x08012220
 8001260:	240002e0 	.word	0x240002e0
 8001264:	00000000 	.word	0x00000000

08001268 <homingArm2>:

void homingArm2(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 800127a:	2100      	movs	r1, #0
 800127c:	4874      	ldr	r0, [pc, #464]	; (8001450 <homingArm2+0x1e8>)
 800127e:	f009 fc5d 	bl	800ab3c <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8001282:	4974      	ldr	r1, [pc, #464]	; (8001454 <homingArm2+0x1ec>)
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b73      	ldr	r3, [pc, #460]	; (8001458 <homingArm2+0x1f0>)
 800128a:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = ((Fcl * 60) / (rpm * ((TIM13->PSC) + 1) * 9600)) - 1;
 800128e:	4b73      	ldr	r3, [pc, #460]	; (800145c <homingArm2+0x1f4>)
 8001290:	ed93 7b00 	vldr	d7, [r3]
 8001294:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8001440 <homingArm2+0x1d8>
 8001298:	ee27 5b06 	vmul.f64	d5, d7, d6
 800129c:	4b70      	ldr	r3, [pc, #448]	; (8001460 <homingArm2+0x1f8>)
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	3301      	adds	r3, #1
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80012aa:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <homingArm2+0x1ec>)
 80012ac:	ed93 7b00 	vldr	d7, [r3]
 80012b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012b4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8001448 <homingArm2+0x1e0>
 80012b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80012c0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80012c8:	4b65      	ldr	r3, [pc, #404]	; (8001460 <homingArm2+0x1f8>)
 80012ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012ce:	ee17 2a90 	vmov	r2, s15
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 80012d4:	4b62      	ldr	r3, [pc, #392]	; (8001460 <homingArm2+0x1f8>)
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	4a61      	ldr	r2, [pc, #388]	; (8001460 <homingArm2+0x1f8>)
 80012da:	085b      	lsrs	r3, r3, #1
 80012dc:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 80012de:	2104      	movs	r1, #4
 80012e0:	4860      	ldr	r0, [pc, #384]	; (8001464 <homingArm2+0x1fc>)
 80012e2:	f006 fd7d 	bl	8007de0 <HAL_GPIO_ReadPin>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d114      	bne.n	8001316 <homingArm2+0xae>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 80012ec:	e00c      	b.n	8001308 <homingArm2+0xa0>
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f4:	485c      	ldr	r0, [pc, #368]	; (8001468 <homingArm2+0x200>)
 80012f6:	f006 fd8b 	bl	8007e10 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80012fa:	2100      	movs	r1, #0
 80012fc:	4854      	ldr	r0, [pc, #336]	; (8001450 <homingArm2+0x1e8>)
 80012fe:	f009 fb0f 	bl	800a920 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 8001302:	201e      	movs	r0, #30
 8001304:	f005 fce6 	bl	8006cd4 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 8001308:	2104      	movs	r1, #4
 800130a:	4856      	ldr	r0, [pc, #344]	; (8001464 <homingArm2+0x1fc>)
 800130c:	f006 fd68 	bl	8007de0 <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0eb      	beq.n	80012ee <homingArm2+0x86>
		}

	}
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8001316:	2100      	movs	r1, #0
 8001318:	484d      	ldr	r0, [pc, #308]	; (8001450 <homingArm2+0x1e8>)
 800131a:	f009 fc0f 	bl	800ab3c <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 800131e:	494d      	ldr	r1, [pc, #308]	; (8001454 <homingArm2+0x1ec>)
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <homingArm2+0x1f0>)
 8001326:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = ((Fcl * 60) / (rpm * ((TIM13->PSC) + 1) * 9600)) - 1;
 800132a:	4b4c      	ldr	r3, [pc, #304]	; (800145c <homingArm2+0x1f4>)
 800132c:	ed93 7b00 	vldr	d7, [r3]
 8001330:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8001440 <homingArm2+0x1d8>
 8001334:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001338:	4b49      	ldr	r3, [pc, #292]	; (8001460 <homingArm2+0x1f8>)
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	3301      	adds	r3, #1
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001346:	4b43      	ldr	r3, [pc, #268]	; (8001454 <homingArm2+0x1ec>)
 8001348:	ed93 7b00 	vldr	d7, [r3]
 800134c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001350:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001448 <homingArm2+0x1e0>
 8001354:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001358:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800135c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001360:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001364:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <homingArm2+0x1f8>)
 8001366:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 8001370:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <homingArm2+0x1f8>)
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	4a3a      	ldr	r2, [pc, #232]	; (8001460 <homingArm2+0x1f8>)
 8001376:	085b      	lsrs	r3, r3, #1
 8001378:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001380:	4839      	ldr	r0, [pc, #228]	; (8001468 <homingArm2+0x200>)
 8001382:	f006 fd45 	bl	8007e10 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001386:	2100      	movs	r1, #0
 8001388:	4831      	ldr	r0, [pc, #196]	; (8001450 <homingArm2+0x1e8>)
 800138a:	f009 fac9 	bl	800a920 <HAL_TIM_PWM_Start>
	homeOk = 0;
 800138e:	4b37      	ldr	r3, [pc, #220]	; (800146c <homingArm2+0x204>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8001394:	e049      	b.n	800142a <homingArm2+0x1c2>
		if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 8001396:	2104      	movs	r1, #4
 8001398:	4832      	ldr	r0, [pc, #200]	; (8001464 <homingArm2+0x1fc>)
 800139a:	f006 fd21 	bl	8007de0 <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d114      	bne.n	80013ce <homingArm2+0x166>
			HAL_Delay(30);		//Para filtrar transitorio
 80013a4:	201e      	movs	r0, #30
 80013a6:	f005 fc95 	bl	8006cd4 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin))) {
 80013aa:	2104      	movs	r1, #4
 80013ac:	482d      	ldr	r0, [pc, #180]	; (8001464 <homingArm2+0x1fc>)
 80013ae:	f006 fd17 	bl	8007de0 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10a      	bne.n	80013ce <homingArm2+0x166>
				HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013be:	482a      	ldr	r0, [pc, #168]	; (8001468 <homingArm2+0x200>)
 80013c0:	f006 fd26 	bl	8007e10 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b29      	ldr	r3, [pc, #164]	; (8001470 <homingArm2+0x208>)
 80013ca:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 80013ce:	ed97 7b00 	vldr	d7, [r7]
 80013d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80013d6:	eeb4 7b46 	vcmp.f64	d7, d6
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d124      	bne.n	800142a <homingArm2+0x1c2>
 80013e0:	2104      	movs	r1, #4
 80013e2:	4820      	ldr	r0, [pc, #128]	; (8001464 <homingArm2+0x1fc>)
 80013e4:	f006 fcfc 	bl	8007de0 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d01d      	beq.n	800142a <homingArm2+0x1c2>
			HAL_Delay(30);		//Para filtrar transitorio
 80013ee:	201e      	movs	r0, #30
 80013f0:	f005 fc70 	bl	8006cd4 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 80013f4:	2104      	movs	r1, #4
 80013f6:	481b      	ldr	r0, [pc, #108]	; (8001464 <homingArm2+0x1fc>)
 80013f8:	f006 fcf2 	bl	8007de0 <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d013      	beq.n	800142a <homingArm2+0x1c2>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8001402:	2100      	movs	r1, #0
 8001404:	4812      	ldr	r0, [pc, #72]	; (8001450 <homingArm2+0x1e8>)
 8001406:	f009 fb99 	bl	800ab3c <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3, "FinArm2\n\r", 9, 100);
 800140a:	2364      	movs	r3, #100	; 0x64
 800140c:	2209      	movs	r2, #9
 800140e:	4919      	ldr	r1, [pc, #100]	; (8001474 <homingArm2+0x20c>)
 8001410:	4819      	ldr	r0, [pc, #100]	; (8001478 <homingArm2+0x210>)
 8001412:	f00b f8d9 	bl	800c5c8 <HAL_UART_Transmit>
				titha2 = 0;
 8001416:	4919      	ldr	r1, [pc, #100]	; (800147c <homingArm2+0x214>)
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <homingArm2+0x204>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <homingArm2+0x204>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0b1      	beq.n	8001396 <homingArm2+0x12e>
			}
		}
	}
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	f3af 8000 	nop.w
 8001440:	00000000 	.word	0x00000000
 8001444:	404e0000 	.word	0x404e0000
 8001448:	00000000 	.word	0x00000000
 800144c:	40c2c000 	.word	0x40c2c000
 8001450:	24000630 	.word	0x24000630
 8001454:	240002b0 	.word	0x240002b0
 8001458:	3fe00000 	.word	0x3fe00000
 800145c:	24000000 	.word	0x24000000
 8001460:	40001c00 	.word	0x40001c00
 8001464:	58021000 	.word	0x58021000
 8001468:	58020800 	.word	0x58020800
 800146c:	240002ac 	.word	0x240002ac
 8001470:	3ff00000 	.word	0x3ff00000
 8001474:	0801222c 	.word	0x0801222c
 8001478:	24000ca8 	.word	0x24000ca8
 800147c:	240002e8 	.word	0x240002e8

08001480 <homingArm3>:

void homingArm3(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8001492:	2100      	movs	r1, #0
 8001494:	4860      	ldr	r0, [pc, #384]	; (8001618 <homingArm3+0x198>)
 8001496:	f009 fb51 	bl	800ab3c <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 800149a:	4960      	ldr	r1, [pc, #384]	; (800161c <homingArm3+0x19c>)
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b5f      	ldr	r3, [pc, #380]	; (8001620 <homingArm3+0x1a0>)
 80014a2:	e9c1 2300 	strd	r2, r3, [r1]
	TIM14->ARR = ((Fcl * 60) / (rpm * ((TIM14->PSC) + 1) * 9600)) - 1;
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <homingArm3+0x1a4>)
 80014a8:	ed93 7b00 	vldr	d7, [r3]
 80014ac:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001608 <homingArm3+0x188>
 80014b0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80014b4:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <homingArm3+0x1a8>)
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	3301      	adds	r3, #1
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80014c2:	4b56      	ldr	r3, [pc, #344]	; (800161c <homingArm3+0x19c>)
 80014c4:	ed93 7b00 	vldr	d7, [r3]
 80014c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014cc:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8001610 <homingArm3+0x190>
 80014d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80014dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80014e0:	4b51      	ldr	r3, [pc, #324]	; (8001628 <homingArm3+0x1a8>)
 80014e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014e6:	ee17 2a90 	vmov	r2, s15
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->CCR1 = (TIM14->ARR) / 2;
 80014ec:	4b4e      	ldr	r3, [pc, #312]	; (8001628 <homingArm3+0x1a8>)
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <homingArm3+0x1a8>)
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 80014f6:	2110      	movs	r1, #16
 80014f8:	484c      	ldr	r0, [pc, #304]	; (800162c <homingArm3+0x1ac>)
 80014fa:	f006 fc71 	bl	8007de0 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d114      	bne.n	800152e <homingArm3+0xae>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 8001504:	e00c      	b.n	8001520 <homingArm3+0xa0>
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800150c:	4848      	ldr	r0, [pc, #288]	; (8001630 <homingArm3+0x1b0>)
 800150e:	f006 fc7f 	bl	8007e10 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001512:	2100      	movs	r1, #0
 8001514:	4840      	ldr	r0, [pc, #256]	; (8001618 <homingArm3+0x198>)
 8001516:	f009 fa03 	bl	800a920 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 800151a:	201e      	movs	r0, #30
 800151c:	f005 fbda 	bl	8006cd4 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 8001520:	2110      	movs	r1, #16
 8001522:	4842      	ldr	r0, [pc, #264]	; (800162c <homingArm3+0x1ac>)
 8001524:	f006 fc5c 	bl	8007de0 <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0eb      	beq.n	8001506 <homingArm3+0x86>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001534:	483e      	ldr	r0, [pc, #248]	; (8001630 <homingArm3+0x1b0>)
 8001536:	f006 fc6b 	bl	8007e10 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800153a:	2100      	movs	r1, #0
 800153c:	4836      	ldr	r0, [pc, #216]	; (8001618 <homingArm3+0x198>)
 800153e:	f009 f9ef 	bl	800a920 <HAL_TIM_PWM_Start>
	homeOk = 0;
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <homingArm3+0x1b4>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8001548:	e049      	b.n	80015de <homingArm3+0x15e>
		if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 800154a:	2110      	movs	r1, #16
 800154c:	4837      	ldr	r0, [pc, #220]	; (800162c <homingArm3+0x1ac>)
 800154e:	f006 fc47 	bl	8007de0 <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d114      	bne.n	8001582 <homingArm3+0x102>
			HAL_Delay(30);		//Para filtrar transitorio
 8001558:	201e      	movs	r0, #30
 800155a:	f005 fbbb 	bl	8006cd4 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 800155e:	2110      	movs	r1, #16
 8001560:	4832      	ldr	r0, [pc, #200]	; (800162c <homingArm3+0x1ac>)
 8001562:	f006 fc3d 	bl	8007de0 <HAL_GPIO_ReadPin>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10a      	bne.n	8001582 <homingArm3+0x102>
				HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001572:	482f      	ldr	r0, [pc, #188]	; (8001630 <homingArm3+0x1b0>)
 8001574:	f006 fc4c 	bl	8007e10 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <homingArm3+0x1b8>)
 800157e:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 8001582:	ed97 7b00 	vldr	d7, [r7]
 8001586:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800158a:	eeb4 7b46 	vcmp.f64	d7, d6
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	d124      	bne.n	80015de <homingArm3+0x15e>
 8001594:	2110      	movs	r1, #16
 8001596:	4825      	ldr	r0, [pc, #148]	; (800162c <homingArm3+0x1ac>)
 8001598:	f006 fc22 	bl	8007de0 <HAL_GPIO_ReadPin>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01d      	beq.n	80015de <homingArm3+0x15e>
			HAL_Delay(30);		//Para filtrar transitorio
 80015a2:	201e      	movs	r0, #30
 80015a4:	f005 fb96 	bl	8006cd4 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 80015a8:	2110      	movs	r1, #16
 80015aa:	4820      	ldr	r0, [pc, #128]	; (800162c <homingArm3+0x1ac>)
 80015ac:	f006 fc18 	bl	8007de0 <HAL_GPIO_ReadPin>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d013      	beq.n	80015de <homingArm3+0x15e>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 80015b6:	2100      	movs	r1, #0
 80015b8:	4817      	ldr	r0, [pc, #92]	; (8001618 <homingArm3+0x198>)
 80015ba:	f009 fabf 	bl	800ab3c <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3, "FinArm3\n\r", 9, 100);
 80015be:	2364      	movs	r3, #100	; 0x64
 80015c0:	2209      	movs	r2, #9
 80015c2:	491e      	ldr	r1, [pc, #120]	; (800163c <homingArm3+0x1bc>)
 80015c4:	481e      	ldr	r0, [pc, #120]	; (8001640 <homingArm3+0x1c0>)
 80015c6:	f00a ffff 	bl	800c5c8 <HAL_UART_Transmit>
				titha3 = 0;
 80015ca:	491e      	ldr	r1, [pc, #120]	; (8001644 <homingArm3+0x1c4>)
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <homingArm3+0x1b4>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <homingArm3+0x1b4>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0b1      	beq.n	800154a <homingArm3+0xca>
			}
		}
	}
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 80015e6:	2100      	movs	r1, #0
 80015e8:	4817      	ldr	r0, [pc, #92]	; (8001648 <homingArm3+0x1c8>)
 80015ea:	f009 fb9f 	bl	800ad2c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 80015ee:	2100      	movs	r1, #0
 80015f0:	4816      	ldr	r0, [pc, #88]	; (800164c <homingArm3+0x1cc>)
 80015f2:	f009 fb9b 	bl	800ad2c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 80015f6:	2100      	movs	r1, #0
 80015f8:	4815      	ldr	r0, [pc, #84]	; (8001650 <homingArm3+0x1d0>)
 80015fa:	f009 fb97 	bl	800ad2c <HAL_TIM_IC_Start_IT>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior*/
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	00000000 	.word	0x00000000
 800160c:	404e0000 	.word	0x404e0000
 8001610:	00000000 	.word	0x00000000
 8001614:	40c2c000 	.word	0x40c2c000
 8001618:	2400067c 	.word	0x2400067c
 800161c:	240002b0 	.word	0x240002b0
 8001620:	3fe00000 	.word	0x3fe00000
 8001624:	24000000 	.word	0x24000000
 8001628:	40002000 	.word	0x40002000
 800162c:	58021000 	.word	0x58021000
 8001630:	58020800 	.word	0x58020800
 8001634:	240002ac 	.word	0x240002ac
 8001638:	3ff00000 	.word	0x3ff00000
 800163c:	08012238 	.word	0x08012238
 8001640:	24000ca8 	.word	0x24000ca8
 8001644:	240002f0 	.word	0x240002f0
 8001648:	240004b4 	.word	0x240004b4
 800164c:	24000500 	.word	0x24000500
 8001650:	2400054c 	.word	0x2400054c

08001654 <interpretaComando>:


float auxM;
uint8_t auxString[10];

void interpretaComando(void){
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 800165a:	4bb5      	ldr	r3, [pc, #724]	; (8001930 <interpretaComando+0x2dc>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3b48      	subs	r3, #72	; 0x48
 8001660:	2b2a      	cmp	r3, #42	; 0x2a
 8001662:	f200 8230 	bhi.w	8001ac6 <interpretaComando+0x472>
 8001666:	a201      	add	r2, pc, #4	; (adr r2, 800166c <interpretaComando+0x18>)
 8001668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166c:	08001a5b 	.word	0x08001a5b
 8001670:	08001ac7 	.word	0x08001ac7
 8001674:	08001ac7 	.word	0x08001ac7
 8001678:	08001ac7 	.word	0x08001ac7
 800167c:	08001ac7 	.word	0x08001ac7
 8001680:	08001719 	.word	0x08001719
 8001684:	08001ac7 	.word	0x08001ac7
 8001688:	08001ac7 	.word	0x08001ac7
 800168c:	08001847 	.word	0x08001847
 8001690:	08001ac7 	.word	0x08001ac7
 8001694:	08001ab9 	.word	0x08001ab9
 8001698:	08001ac7 	.word	0x08001ac7
 800169c:	08001ac7 	.word	0x08001ac7
 80016a0:	08001ac7 	.word	0x08001ac7
 80016a4:	08001ac7 	.word	0x08001ac7
 80016a8:	08001ac7 	.word	0x08001ac7
 80016ac:	08001ac7 	.word	0x08001ac7
 80016b0:	08001ac7 	.word	0x08001ac7
 80016b4:	08001ac7 	.word	0x08001ac7
 80016b8:	08001ac7 	.word	0x08001ac7
 80016bc:	08001ac7 	.word	0x08001ac7
 80016c0:	08001ac7 	.word	0x08001ac7
 80016c4:	08001ac7 	.word	0x08001ac7
 80016c8:	08001ac7 	.word	0x08001ac7
 80016cc:	08001ac7 	.word	0x08001ac7
 80016d0:	08001ac7 	.word	0x08001ac7
 80016d4:	08001ac7 	.word	0x08001ac7
 80016d8:	08001ac7 	.word	0x08001ac7
 80016dc:	08001ac7 	.word	0x08001ac7
 80016e0:	08001ac7 	.word	0x08001ac7
 80016e4:	08001ac7 	.word	0x08001ac7
 80016e8:	08001ac7 	.word	0x08001ac7
 80016ec:	08001a5b 	.word	0x08001a5b
 80016f0:	08001ac7 	.word	0x08001ac7
 80016f4:	08001ac7 	.word	0x08001ac7
 80016f8:	08001ac7 	.word	0x08001ac7
 80016fc:	08001ac7 	.word	0x08001ac7
 8001700:	08001719 	.word	0x08001719
 8001704:	08001ac7 	.word	0x08001ac7
 8001708:	08001ac7 	.word	0x08001ac7
 800170c:	08001847 	.word	0x08001847
 8001710:	08001ac7 	.word	0x08001ac7
 8001714:	08001ab9 	.word	0x08001ab9
	case 'M':						//:M(motor) + numero de motor (1. 2. 3) + Angulo de 0 a 90
	case 'm':
		switch(rx_buffer[1]){
 8001718:	4b85      	ldr	r3, [pc, #532]	; (8001930 <interpretaComando+0x2dc>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	2b33      	cmp	r3, #51	; 0x33
 800171e:	d062      	beq.n	80017e6 <interpretaComando+0x192>
 8001720:	2b33      	cmp	r3, #51	; 0x33
 8001722:	f300 8088 	bgt.w	8001836 <interpretaComando+0x1e2>
 8001726:	2b31      	cmp	r3, #49	; 0x31
 8001728:	d002      	beq.n	8001730 <interpretaComando+0xdc>
 800172a:	2b32      	cmp	r3, #50	; 0x32
 800172c:	d033      	beq.n	8001796 <interpretaComando+0x142>
 800172e:	e082      	b.n	8001836 <interpretaComando+0x1e2>
		case '1':
			HAL_UART_Transmit(&huart3, "Motor1\n\r", 8, 100);
 8001730:	2364      	movs	r3, #100	; 0x64
 8001732:	2208      	movs	r2, #8
 8001734:	497f      	ldr	r1, [pc, #508]	; (8001934 <interpretaComando+0x2e0>)
 8001736:	4880      	ldr	r0, [pc, #512]	; (8001938 <interpretaComando+0x2e4>)
 8001738:	f00a ff46 	bl	800c5c8 <HAL_UART_Transmit>
			auxM =  strtod(&rx_buffer[2], NULL);
 800173c:	2100      	movs	r1, #0
 800173e:	487f      	ldr	r0, [pc, #508]	; (800193c <interpretaComando+0x2e8>)
 8001740:	f00e f860 	bl	800f804 <strtod>
 8001744:	eeb0 7b40 	vmov.f64	d7, d0
 8001748:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800174c:	4b7c      	ldr	r3, [pc, #496]	; (8001940 <interpretaComando+0x2ec>)
 800174e:	edc3 7a00 	vstr	s15, [r3]
			if(auxM>=0 && auxM<=90){  // verificacion de limites articulares
 8001752:	4b7b      	ldr	r3, [pc, #492]	; (8001940 <interpretaComando+0x2ec>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	db12      	blt.n	8001788 <interpretaComando+0x134>
 8001762:	4b77      	ldr	r3, [pc, #476]	; (8001940 <interpretaComando+0x2ec>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001944 <interpretaComando+0x2f0>
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	d808      	bhi.n	8001788 <interpretaComando+0x134>
				titha1 = auxM;
 8001776:	4b72      	ldr	r3, [pc, #456]	; (8001940 <interpretaComando+0x2ec>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001780:	4b71      	ldr	r3, [pc, #452]	; (8001948 <interpretaComando+0x2f4>)
 8001782:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
			}
			break;
 8001786:	e05d      	b.n	8001844 <interpretaComando+0x1f0>
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	220a      	movs	r2, #10
 800178c:	496f      	ldr	r1, [pc, #444]	; (800194c <interpretaComando+0x2f8>)
 800178e:	486a      	ldr	r0, [pc, #424]	; (8001938 <interpretaComando+0x2e4>)
 8001790:	f00a ff1a 	bl	800c5c8 <HAL_UART_Transmit>
			break;
 8001794:	e056      	b.n	8001844 <interpretaComando+0x1f0>
		case '2':
			HAL_UART_Transmit(&huart3, "Motor2\n\r", 8, 100);
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	2208      	movs	r2, #8
 800179a:	496d      	ldr	r1, [pc, #436]	; (8001950 <interpretaComando+0x2fc>)
 800179c:	4866      	ldr	r0, [pc, #408]	; (8001938 <interpretaComando+0x2e4>)
 800179e:	f00a ff13 	bl	800c5c8 <HAL_UART_Transmit>
			if(auxM>=0 && auxM<=90){  // verificacion de limites articulares
 80017a2:	4b67      	ldr	r3, [pc, #412]	; (8001940 <interpretaComando+0x2ec>)
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	db12      	blt.n	80017d8 <interpretaComando+0x184>
 80017b2:	4b63      	ldr	r3, [pc, #396]	; (8001940 <interpretaComando+0x2ec>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001944 <interpretaComando+0x2f0>
 80017bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c4:	d808      	bhi.n	80017d8 <interpretaComando+0x184>
				titha2 = auxM;
 80017c6:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <interpretaComando+0x2ec>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017d0:	4b60      	ldr	r3, [pc, #384]	; (8001954 <interpretaComando+0x300>)
 80017d2:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
			}
			break;
 80017d6:	e035      	b.n	8001844 <interpretaComando+0x1f0>
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
 80017d8:	2364      	movs	r3, #100	; 0x64
 80017da:	220a      	movs	r2, #10
 80017dc:	495b      	ldr	r1, [pc, #364]	; (800194c <interpretaComando+0x2f8>)
 80017de:	4856      	ldr	r0, [pc, #344]	; (8001938 <interpretaComando+0x2e4>)
 80017e0:	f00a fef2 	bl	800c5c8 <HAL_UART_Transmit>
			break;
 80017e4:	e02e      	b.n	8001844 <interpretaComando+0x1f0>
		case '3':
			HAL_UART_Transmit(&huart3, "Motor3\n\r", 8, 100);
 80017e6:	2364      	movs	r3, #100	; 0x64
 80017e8:	2208      	movs	r2, #8
 80017ea:	495b      	ldr	r1, [pc, #364]	; (8001958 <interpretaComando+0x304>)
 80017ec:	4852      	ldr	r0, [pc, #328]	; (8001938 <interpretaComando+0x2e4>)
 80017ee:	f00a feeb 	bl	800c5c8 <HAL_UART_Transmit>
			if(auxM>=0 && auxM<=90){   // verificacion de limites articulares
 80017f2:	4b53      	ldr	r3, [pc, #332]	; (8001940 <interpretaComando+0x2ec>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	db12      	blt.n	8001828 <interpretaComando+0x1d4>
 8001802:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <interpretaComando+0x2ec>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001944 <interpretaComando+0x2f0>
 800180c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	d808      	bhi.n	8001828 <interpretaComando+0x1d4>
				titha3 = auxM;
 8001816:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <interpretaComando+0x2ec>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001820:	4b4e      	ldr	r3, [pc, #312]	; (800195c <interpretaComando+0x308>)
 8001822:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
			}
			break;
 8001826:	e00d      	b.n	8001844 <interpretaComando+0x1f0>
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
 8001828:	2364      	movs	r3, #100	; 0x64
 800182a:	220a      	movs	r2, #10
 800182c:	4947      	ldr	r1, [pc, #284]	; (800194c <interpretaComando+0x2f8>)
 800182e:	4842      	ldr	r0, [pc, #264]	; (8001938 <interpretaComando+0x2e4>)
 8001830:	f00a feca 	bl	800c5c8 <HAL_UART_Transmit>
			break;
 8001834:	e006      	b.n	8001844 <interpretaComando+0x1f0>
		default:
			HAL_UART_Transmit(&huart3, "ErrorMotor\n\r", 12, 100);
 8001836:	2364      	movs	r3, #100	; 0x64
 8001838:	220c      	movs	r2, #12
 800183a:	4949      	ldr	r1, [pc, #292]	; (8001960 <interpretaComando+0x30c>)
 800183c:	483e      	ldr	r0, [pc, #248]	; (8001938 <interpretaComando+0x2e4>)
 800183e:	f00a fec3 	bl	800c5c8 <HAL_UART_Transmit>
			break;
 8001842:	bf00      	nop
		}
		break;
 8001844:	e146      	b.n	8001ad4 <interpretaComando+0x480>
	case 'P':												//:Px0.1 y0.1 z-0.5 \0 (Eje, valor, espacio, Eje, valor, espacio, Eje, valor, espacio)
	case 'p':
		HAL_UART_Transmit(&huart3, "Punto\n\r", 7, 100);
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	2207      	movs	r2, #7
 800184a:	4946      	ldr	r1, [pc, #280]	; (8001964 <interpretaComando+0x310>)
 800184c:	483a      	ldr	r0, [pc, #232]	; (8001938 <interpretaComando+0x2e4>)
 800184e:	f00a febb 	bl	800c5c8 <HAL_UART_Transmit>
		flagErrorEndStop = 0;
 8001852:	4945      	ldr	r1, [pc, #276]	; (8001968 <interpretaComando+0x314>)
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 8001868:	e0d9      	b.n	8001a1e <interpretaComando+0x3ca>
			if(rx_buffer[i] == 'x'){
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	4a30      	ldr	r2, [pc, #192]	; (8001930 <interpretaComando+0x2dc>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	2b78      	cmp	r3, #120	; 0x78
 8001872:	d135      	bne.n	80018e0 <interpretaComando+0x28c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001874:	e00c      	b.n	8001890 <interpretaComando+0x23c>
					auxString[j] = rx_buffer[i+1];
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	7bbb      	ldrb	r3, [r7, #14]
 800187c:	492c      	ldr	r1, [pc, #176]	; (8001930 <interpretaComando+0x2dc>)
 800187e:	5c89      	ldrb	r1, [r1, r2]
 8001880:	4a3a      	ldr	r2, [pc, #232]	; (800196c <interpretaComando+0x318>)
 8001882:	54d1      	strb	r1, [r2, r3]
					j++;
 8001884:	7bbb      	ldrb	r3, [r7, #14]
 8001886:	3301      	adds	r3, #1
 8001888:	73bb      	strb	r3, [r7, #14]
					i++;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	3301      	adds	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	3301      	adds	r3, #1
 8001894:	4a26      	ldr	r2, [pc, #152]	; (8001930 <interpretaComando+0x2dc>)
 8001896:	5cd3      	ldrb	r3, [r2, r3]
 8001898:	2b20      	cmp	r3, #32
 800189a:	d1ec      	bne.n	8001876 <interpretaComando+0x222>
				}
				Pxfin = strtod(&auxString[0], NULL);
 800189c:	2100      	movs	r1, #0
 800189e:	4833      	ldr	r0, [pc, #204]	; (800196c <interpretaComando+0x318>)
 80018a0:	f00d ffb0 	bl	800f804 <strtod>
 80018a4:	eeb0 7b40 	vmov.f64	d7, d0
 80018a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <interpretaComando+0x31c>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]
				for (int k = 0; k <= 10; k++) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	e007      	b.n	80018c8 <interpretaComando+0x274>
					auxString[k] = 0;
 80018b8:	4a2c      	ldr	r2, [pc, #176]	; (800196c <interpretaComando+0x318>)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	4413      	add	r3, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3301      	adds	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b0a      	cmp	r3, #10
 80018cc:	ddf4      	ble.n	80018b8 <interpretaComando+0x264>
				}
				j=0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, "PuntoX_ok\n\r", 11, 100);
 80018d2:	2364      	movs	r3, #100	; 0x64
 80018d4:	220b      	movs	r2, #11
 80018d6:	4927      	ldr	r1, [pc, #156]	; (8001974 <interpretaComando+0x320>)
 80018d8:	4817      	ldr	r0, [pc, #92]	; (8001938 <interpretaComando+0x2e4>)
 80018da:	f00a fe75 	bl	800c5c8 <HAL_UART_Transmit>
 80018de:	e09b      	b.n	8001a18 <interpretaComando+0x3c4>
			}
			else if(rx_buffer[i] == 'y'){
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <interpretaComando+0x2dc>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	2b79      	cmp	r3, #121	; 0x79
 80018e8:	d15c      	bne.n	80019a4 <interpretaComando+0x350>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80018ea:	e00c      	b.n	8001906 <interpretaComando+0x2b2>
					auxString[j] = rx_buffer[i+1];
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	7bbb      	ldrb	r3, [r7, #14]
 80018f2:	490f      	ldr	r1, [pc, #60]	; (8001930 <interpretaComando+0x2dc>)
 80018f4:	5c89      	ldrb	r1, [r1, r2]
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <interpretaComando+0x318>)
 80018f8:	54d1      	strb	r1, [r2, r3]
					j++;
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
 80018fc:	3301      	adds	r3, #1
 80018fe:	73bb      	strb	r3, [r7, #14]
					i++;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	3301      	adds	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3301      	adds	r3, #1
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <interpretaComando+0x2dc>)
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	2b20      	cmp	r3, #32
 8001910:	d1ec      	bne.n	80018ec <interpretaComando+0x298>
				}
				Pyfin = strtod(&auxString[0], NULL);
 8001912:	2100      	movs	r1, #0
 8001914:	4815      	ldr	r0, [pc, #84]	; (800196c <interpretaComando+0x318>)
 8001916:	f00d ff75 	bl	800f804 <strtod>
 800191a:	eeb0 7b40 	vmov.f64	d7, d0
 800191e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <interpretaComando+0x324>)
 8001924:	edc3 7a00 	vstr	s15, [r3]
				for (int k = 0; k <= 10; k++) {
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	e02e      	b.n	800198c <interpretaComando+0x338>
 800192e:	bf00      	nop
 8001930:	24000374 	.word	0x24000374
 8001934:	08012244 	.word	0x08012244
 8001938:	24000ca8 	.word	0x24000ca8
 800193c:	24000376 	.word	0x24000376
 8001940:	240002b8 	.word	0x240002b8
 8001944:	42b40000 	.word	0x42b40000
 8001948:	240002e0 	.word	0x240002e0
 800194c:	08012250 	.word	0x08012250
 8001950:	0801225c 	.word	0x0801225c
 8001954:	240002e8 	.word	0x240002e8
 8001958:	08012268 	.word	0x08012268
 800195c:	240002f0 	.word	0x240002f0
 8001960:	08012274 	.word	0x08012274
 8001964:	08012284 	.word	0x08012284
 8001968:	24000400 	.word	0x24000400
 800196c:	240002bc 	.word	0x240002bc
 8001970:	24000304 	.word	0x24000304
 8001974:	0801228c 	.word	0x0801228c
 8001978:	24000308 	.word	0x24000308
					auxString[k] = 0;
 800197c:	4a57      	ldr	r2, [pc, #348]	; (8001adc <interpretaComando+0x488>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3301      	adds	r3, #1
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b0a      	cmp	r3, #10
 8001990:	ddf4      	ble.n	800197c <interpretaComando+0x328>
				}
				j=0;
 8001992:	2300      	movs	r3, #0
 8001994:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, "PuntoY_ok\n\r", 11, 100);
 8001996:	2364      	movs	r3, #100	; 0x64
 8001998:	220b      	movs	r2, #11
 800199a:	4951      	ldr	r1, [pc, #324]	; (8001ae0 <interpretaComando+0x48c>)
 800199c:	4851      	ldr	r0, [pc, #324]	; (8001ae4 <interpretaComando+0x490>)
 800199e:	f00a fe13 	bl	800c5c8 <HAL_UART_Transmit>
 80019a2:	e039      	b.n	8001a18 <interpretaComando+0x3c4>
			}
			else if(rx_buffer[i] == 'z'){
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	4a50      	ldr	r2, [pc, #320]	; (8001ae8 <interpretaComando+0x494>)
 80019a8:	5cd3      	ldrb	r3, [r2, r3]
 80019aa:	2b7a      	cmp	r3, #122	; 0x7a
 80019ac:	d134      	bne.n	8001a18 <interpretaComando+0x3c4>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80019ae:	e00c      	b.n	80019ca <interpretaComando+0x376>
					auxString[j] = rx_buffer[i+1];
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	7bbb      	ldrb	r3, [r7, #14]
 80019b6:	494c      	ldr	r1, [pc, #304]	; (8001ae8 <interpretaComando+0x494>)
 80019b8:	5c89      	ldrb	r1, [r1, r2]
 80019ba:	4a48      	ldr	r2, [pc, #288]	; (8001adc <interpretaComando+0x488>)
 80019bc:	54d1      	strb	r1, [r2, r3]
					j++;
 80019be:	7bbb      	ldrb	r3, [r7, #14]
 80019c0:	3301      	adds	r3, #1
 80019c2:	73bb      	strb	r3, [r7, #14]
					i++;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	3301      	adds	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	3301      	adds	r3, #1
 80019ce:	4a46      	ldr	r2, [pc, #280]	; (8001ae8 <interpretaComando+0x494>)
 80019d0:	5cd3      	ldrb	r3, [r2, r3]
 80019d2:	2b20      	cmp	r3, #32
 80019d4:	d1ec      	bne.n	80019b0 <interpretaComando+0x35c>
				}
				Pzfin = strtod(&auxString[0], NULL);
 80019d6:	2100      	movs	r1, #0
 80019d8:	4840      	ldr	r0, [pc, #256]	; (8001adc <interpretaComando+0x488>)
 80019da:	f00d ff13 	bl	800f804 <strtod>
 80019de:	eeb0 7b40 	vmov.f64	d7, d0
 80019e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <interpretaComando+0x498>)
 80019e8:	edc3 7a00 	vstr	s15, [r3]
				for (int k = 0; k <= 10; k++) {
 80019ec:	2300      	movs	r3, #0
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	e007      	b.n	8001a02 <interpretaComando+0x3ae>
					auxString[k] = 0;
 80019f2:	4a3a      	ldr	r2, [pc, #232]	; (8001adc <interpretaComando+0x488>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b0a      	cmp	r3, #10
 8001a06:	ddf4      	ble.n	80019f2 <interpretaComando+0x39e>
				}
				j=0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, "PuntoZ_ok\n\r", 11, 100);
 8001a0c:	2364      	movs	r3, #100	; 0x64
 8001a0e:	220b      	movs	r2, #11
 8001a10:	4937      	ldr	r1, [pc, #220]	; (8001af0 <interpretaComando+0x49c>)
 8001a12:	4834      	ldr	r0, [pc, #208]	; (8001ae4 <interpretaComando+0x490>)
 8001a14:	f00a fdd8 	bl	800c5c8 <HAL_UART_Transmit>
			}
			i++;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	4a31      	ldr	r2, [pc, #196]	; (8001ae8 <interpretaComando+0x494>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f af20 	bne.w	800186a <interpretaComando+0x216>
		}
		cinematicaInversa(Pxfin, Pyfin, Pzfin);
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <interpretaComando+0x4a0>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <interpretaComando+0x4a4>)
 8001a36:	edd3 6a00 	vldr	s13, [r3]
 8001a3a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <interpretaComando+0x498>)
 8001a40:	edd3 5a00 	vldr	s11, [r3]
 8001a44:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001a48:	eeb0 2b45 	vmov.f64	d2, d5
 8001a4c:	eeb0 1b46 	vmov.f64	d1, d6
 8001a50:	eeb0 0b47 	vmov.f64	d0, d7
 8001a54:	f003 f934 	bl	8004cc0 <cinematicaInversa>
		break;
 8001a58:	e03c      	b.n	8001ad4 <interpretaComando+0x480>
	case 'H':
	case 'h':
		HAL_UART_Transmit(&huart3, "Homing\n\r", 8, 100);
 8001a5a:	2364      	movs	r3, #100	; 0x64
 8001a5c:	2208      	movs	r2, #8
 8001a5e:	4927      	ldr	r1, [pc, #156]	; (8001afc <interpretaComando+0x4a8>)
 8001a60:	4820      	ldr	r0, [pc, #128]	; (8001ae4 <interpretaComando+0x490>)
 8001a62:	f00a fdb1 	bl	800c5c8 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET); //activo Enable
 8001a66:	2200      	movs	r2, #0
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4825      	ldr	r0, [pc, #148]	; (8001b00 <interpretaComando+0x4ac>)
 8001a6c:	f006 f9d0 	bl	8007e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2120      	movs	r1, #32
 8001a74:	4822      	ldr	r0, [pc, #136]	; (8001b00 <interpretaComando+0x4ac>)
 8001a76:	f006 f9cb 	bl	8007e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2140      	movs	r1, #64	; 0x40
 8001a7e:	4820      	ldr	r0, [pc, #128]	; (8001b00 <interpretaComando+0x4ac>)
 8001a80:	f006 f9c6 	bl	8007e10 <HAL_GPIO_WritePin>
		homingAprox();
 8001a84:	f7ff f8f8 	bl	8000c78 <homingAprox>
		homingArm1();
 8001a88:	f7ff fb02 	bl	8001090 <homingArm1>
		homingArm2();
 8001a8c:	f7ff fbec 	bl	8001268 <homingArm2>
		homingArm3();
 8001a90:	f7ff fcf6 	bl	8001480 <homingArm3>
		Pxini=0;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <interpretaComando+0x4b0>)
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
		Pyini=0;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <interpretaComando+0x4b4>)
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
		Pzini = -0.334658034417224;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <interpretaComando+0x4b8>)
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <interpretaComando+0x4bc>)
 8001aa8:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, "Fin_Homing\n\r", 12, 100);
 8001aaa:	2364      	movs	r3, #100	; 0x64
 8001aac:	220c      	movs	r2, #12
 8001aae:	4919      	ldr	r1, [pc, #100]	; (8001b14 <interpretaComando+0x4c0>)
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <interpretaComando+0x490>)
 8001ab2:	f00a fd89 	bl	800c5c8 <HAL_UART_Transmit>

		break;
 8001ab6:	e00d      	b.n	8001ad4 <interpretaComando+0x480>
	case 'R':			//Set RPM
	case 'r':
		HAL_UART_Transmit(&huart3, "RPM\n\r", 5, 100);
 8001ab8:	2364      	movs	r3, #100	; 0x64
 8001aba:	2205      	movs	r2, #5
 8001abc:	4916      	ldr	r1, [pc, #88]	; (8001b18 <interpretaComando+0x4c4>)
 8001abe:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <interpretaComando+0x490>)
 8001ac0:	f00a fd82 	bl	800c5c8 <HAL_UART_Transmit>
		break;
 8001ac4:	e006      	b.n	8001ad4 <interpretaComando+0x480>
	default:
		HAL_UART_Transmit(&huart3, "Nada\n\r", 6, 100);
 8001ac6:	2364      	movs	r3, #100	; 0x64
 8001ac8:	2206      	movs	r2, #6
 8001aca:	4914      	ldr	r1, [pc, #80]	; (8001b1c <interpretaComando+0x4c8>)
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <interpretaComando+0x490>)
 8001ace:	f00a fd7b 	bl	800c5c8 <HAL_UART_Transmit>
		break;
 8001ad2:	bf00      	nop
	}
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	240002bc 	.word	0x240002bc
 8001ae0:	08012298 	.word	0x08012298
 8001ae4:	24000ca8 	.word	0x24000ca8
 8001ae8:	24000374 	.word	0x24000374
 8001aec:	2400030c 	.word	0x2400030c
 8001af0:	080122a4 	.word	0x080122a4
 8001af4:	24000304 	.word	0x24000304
 8001af8:	24000308 	.word	0x24000308
 8001afc:	080122b0 	.word	0x080122b0
 8001b00:	58020c00 	.word	0x58020c00
 8001b04:	240002f8 	.word	0x240002f8
 8001b08:	240002fc 	.word	0x240002fc
 8001b0c:	24000300 	.word	0x24000300
 8001b10:	beab584c 	.word	0xbeab584c
 8001b14:	080122bc 	.word	0x080122bc
 8001b18:	080122cc 	.word	0x080122cc
 8001b1c:	080122d4 	.word	0x080122d4

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	ed2d 8b02 	vpush	{d8}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b28:	f005 f842 	bl	8006bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f978 	bl	8001e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b30:	f7fe ffa4 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b34:	f001 fab4 	bl	80030a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b38:	f001 fb22 	bl	8003180 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b3c:	f001 fb92 	bl	8003264 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001b40:	f004 fe94 	bl	800686c <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8001b44:	f001 fc50 	bl	80033e8 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001b48:	f001 fcb2 	bl	80034b0 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001b4c:	f001 fd00 	bl	8003550 <MX_TIM14_Init>
  MX_TIM5_Init();
 8001b50:	f001 fbfa 	bl	8003348 <MX_TIM5_Init>
  MX_TIM15_Init();
 8001b54:	f001 fd4c 	bl	80035f0 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8001b58:	f004 fdf0 	bl	800673c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b5c:	f004 fe3a 	bl	80067d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, data, sizeof(data), 100);
 8001b60:	2364      	movs	r3, #100	; 0x64
 8001b62:	2207      	movs	r2, #7
 8001b64:	498c      	ldr	r1, [pc, #560]	; (8001d98 <main+0x278>)
 8001b66:	488d      	ldr	r0, [pc, #564]	; (8001d9c <main+0x27c>)
 8001b68:	f00a fd2e 	bl	800c5c8 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	498c      	ldr	r1, [pc, #560]	; (8001da0 <main+0x280>)
 8001b70:	488a      	ldr	r0, [pc, #552]	; (8001d9c <main+0x27c>)
 8001b72:	f00a fdbf 	bl	800c6f4 <HAL_UART_Receive_IT>


	HAL_TIM_Base_Start(&htim12);
 8001b76:	488b      	ldr	r0, [pc, #556]	; (8001da4 <main+0x284>)
 8001b78:	f008 fd32 	bl	800a5e0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8001b7c:	488a      	ldr	r0, [pc, #552]	; (8001da8 <main+0x288>)
 8001b7e:	f008 fd2f 	bl	800a5e0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8001b82:	488a      	ldr	r0, [pc, #552]	; (8001dac <main+0x28c>)
 8001b84:	f008 fd2c 	bl	800a5e0 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4889      	ldr	r0, [pc, #548]	; (8001db0 <main+0x290>)
 8001b8c:	f009 f8ce 	bl	800ad2c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 8001b90:	2100      	movs	r1, #0
 8001b92:	4888      	ldr	r0, [pc, #544]	; (8001db4 <main+0x294>)
 8001b94:	f009 f8ca 	bl	800ad2c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4887      	ldr	r0, [pc, #540]	; (8001db8 <main+0x298>)
 8001b9c:	f009 f8c6 	bl	800ad2c <HAL_TIM_IC_Start_IT>
	HAL_UART_Transmit(&huart3, "Ejemplo :px0 y0 z-0.8 \nr", 24, 100);
 8001ba0:	2364      	movs	r3, #100	; 0x64
 8001ba2:	2218      	movs	r2, #24
 8001ba4:	4985      	ldr	r1, [pc, #532]	; (8001dbc <main+0x29c>)
 8001ba6:	487d      	ldr	r0, [pc, #500]	; (8001d9c <main+0x27c>)
 8001ba8:	f00a fd0e 	bl	800c5c8 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (FlagButton == 1) {
 8001bac:	4b84      	ldr	r3, [pc, #528]	; (8001dc0 <main+0x2a0>)
 8001bae:	ed93 7b00 	vldr	d7, [r3]
 8001bb2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001bb6:	eeb4 7b46 	vcmp.f64	d7, d6
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d1f5      	bne.n	8001bac <main+0x8c>
			FlagButton = 0;
 8001bc0:	497f      	ldr	r1, [pc, #508]	; (8001dc0 <main+0x2a0>)
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9c1 2300 	strd	r2, r3, [r1]
			distancia = sqrt(pow(Pxfin - Pxini, 2) + pow(Pyfin - Pyini, 2) + pow(Pzfin - Pzini, 2));
 8001bce:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <main+0x2a4>)
 8001bd0:	ed93 7a00 	vldr	s14, [r3]
 8001bd4:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <main+0x2a8>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001be2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001be6:	eeb0 0b47 	vmov.f64	d0, d7
 8001bea:	f00f fec5 	bl	8011978 <pow>
 8001bee:	eeb0 8b40 	vmov.f64	d8, d0
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <main+0x2ac>)
 8001bf4:	ed93 7a00 	vldr	s14, [r3]
 8001bf8:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <main+0x2b0>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c06:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c0a:	eeb0 0b47 	vmov.f64	d0, d7
 8001c0e:	f00f feb3 	bl	8011978 <pow>
 8001c12:	eeb0 7b40 	vmov.f64	d7, d0
 8001c16:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001c1a:	4b6e      	ldr	r3, [pc, #440]	; (8001dd4 <main+0x2b4>)
 8001c1c:	ed93 7a00 	vldr	s14, [r3]
 8001c20:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <main+0x2b8>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c2e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c32:	eeb0 0b47 	vmov.f64	d0, d7
 8001c36:	f00f fe9f 	bl	8011978 <pow>
 8001c3a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c3e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001c42:	eeb0 0b47 	vmov.f64	d0, d7
 8001c46:	f010 f917 	bl	8011e78 <sqrt>
 8001c4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c52:	4b62      	ldr	r3, [pc, #392]	; (8001ddc <main+0x2bc>)
 8001c54:	edc3 7a00 	vstr	s15, [r3]
			vDirector[0] = (Pxfin - Pxini) / distancia;	//Vector director en X
 8001c58:	4b5a      	ldr	r3, [pc, #360]	; (8001dc4 <main+0x2a4>)
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	4b5a      	ldr	r3, [pc, #360]	; (8001dc8 <main+0x2a8>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c68:	4b5c      	ldr	r3, [pc, #368]	; (8001ddc <main+0x2bc>)
 8001c6a:	ed93 7a00 	vldr	s14, [r3]
 8001c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c72:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <main+0x2c0>)
 8001c74:	edc3 7a00 	vstr	s15, [r3]
			vDirector[1] = (Pyfin - Pyini) / distancia;	//Vector director en Y
 8001c78:	4b54      	ldr	r3, [pc, #336]	; (8001dcc <main+0x2ac>)
 8001c7a:	ed93 7a00 	vldr	s14, [r3]
 8001c7e:	4b54      	ldr	r3, [pc, #336]	; (8001dd0 <main+0x2b0>)
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c88:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <main+0x2bc>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c92:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <main+0x2c0>)
 8001c94:	edc3 7a01 	vstr	s15, [r3, #4]
			vDirector[2] = (Pzfin - Pzini) / distancia;	//Vector director en Z
 8001c98:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <main+0x2b4>)
 8001c9a:	ed93 7a00 	vldr	s14, [r3]
 8001c9e:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <main+0x2b8>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ca8:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <main+0x2bc>)
 8001caa:	ed93 7a00 	vldr	s14, [r3]
 8001cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb2:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <main+0x2c0>)
 8001cb4:	edc3 7a02 	vstr	s15, [r3, #8]
			configStepMotor1(titha1);
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <main+0x2c4>)
 8001cba:	ed93 7b00 	vldr	d7, [r3]
 8001cbe:	eeb0 0b47 	vmov.f64	d0, d7
 8001cc2:	f000 fb95 	bl	80023f0 <configStepMotor1>
			configStepMotor2(titha2);
 8001cc6:	4b48      	ldr	r3, [pc, #288]	; (8001de8 <main+0x2c8>)
 8001cc8:	ed93 7b00 	vldr	d7, [r3]
 8001ccc:	eeb0 0b47 	vmov.f64	d0, d7
 8001cd0:	f000 fc4e 	bl	8002570 <configStepMotor2>
			configStepMotor3(titha3);
 8001cd4:	4b45      	ldr	r3, [pc, #276]	; (8001dec <main+0x2cc>)
 8001cd6:	ed93 7b00 	vldr	d7, [r3]
 8001cda:	eeb0 0b47 	vmov.f64	d0, d7
 8001cde:	f000 fd07 	bl	80026f0 <configStepMotor3>
			inicializarTrayectoria(0, distancia, 0, 0, 0.4, 4, 1); //(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <main+0x2bc>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cf0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001cf4:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8001d88 <main+0x268>
 8001cf8:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8001d90 <main+0x270>
 8001cfc:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8001d90 <main+0x270>
 8001d00:	eeb0 1b47 	vmov.f64	d1, d7
 8001d04:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001d90 <main+0x270>
 8001d08:	f001 fe9e 	bl	8003a48 <inicializarTrayectoria>
			FlagTiempo = 0;
 8001d0c:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <main+0x2d0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
			FlagTrayectoM1 = 0;
 8001d12:	4938      	ldr	r1, [pc, #224]	; (8001df4 <main+0x2d4>)
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM2 = 0;
 8001d20:	4935      	ldr	r1, [pc, #212]	; (8001df8 <main+0x2d8>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM3 = 0;
 8001d2e:	4933      	ldr	r1, [pc, #204]	; (8001dfc <main+0x2dc>)
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9c1 2300 	strd	r2, r3, [r1]
			Start=1;
 8001d3c:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <main+0x2e0>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
			rpm1 = 0;
 8001d42:	4930      	ldr	r1, [pc, #192]	; (8001e04 <main+0x2e4>)
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9c1 2300 	strd	r2, r3, [r1]
			rpm2 = 0;
 8001d50:	492d      	ldr	r1, [pc, #180]	; (8001e08 <main+0x2e8>)
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	e9c1 2300 	strd	r2, r3, [r1]
			rpm3 = 0;
 8001d5e:	492b      	ldr	r1, [pc, #172]	; (8001e0c <main+0x2ec>)
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9c1 2300 	strd	r2, r3, [r1]
			mandalemecha = 1;
 8001d6c:	4928      	ldr	r1, [pc, #160]	; (8001e10 <main+0x2f0>)
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <main+0x2f4>)
 8001d74:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_TIM_Base_Start(&htim5);
 8001d78:	4827      	ldr	r0, [pc, #156]	; (8001e18 <main+0x2f8>)
 8001d7a:	f008 fc31 	bl	800a5e0 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 8001d7e:	4827      	ldr	r0, [pc, #156]	; (8001e1c <main+0x2fc>)
 8001d80:	f008 fcc6 	bl	800a710 <HAL_TIM_Base_Start_IT>
		if (FlagButton == 1) {
 8001d84:	e712      	b.n	8001bac <main+0x8c>
 8001d86:	bf00      	nop
 8001d88:	9999999a 	.word	0x9999999a
 8001d8c:	3fd99999 	.word	0x3fd99999
	...
 8001d98:	24000008 	.word	0x24000008
 8001d9c:	24000ca8 	.word	0x24000ca8
 8001da0:	24000392 	.word	0x24000392
 8001da4:	240005e4 	.word	0x240005e4
 8001da8:	24000630 	.word	0x24000630
 8001dac:	2400067c 	.word	0x2400067c
 8001db0:	240004b4 	.word	0x240004b4
 8001db4:	24000500 	.word	0x24000500
 8001db8:	2400054c 	.word	0x2400054c
 8001dbc:	080122dc 	.word	0x080122dc
 8001dc0:	240003f8 	.word	0x240003f8
 8001dc4:	24000304 	.word	0x24000304
 8001dc8:	240002f8 	.word	0x240002f8
 8001dcc:	24000308 	.word	0x24000308
 8001dd0:	240002fc 	.word	0x240002fc
 8001dd4:	2400030c 	.word	0x2400030c
 8001dd8:	24000300 	.word	0x24000300
 8001ddc:	24000310 	.word	0x24000310
 8001de0:	24000314 	.word	0x24000314
 8001de4:	240002e0 	.word	0x240002e0
 8001de8:	240002e8 	.word	0x240002e8
 8001dec:	240002f0 	.word	0x240002f0
 8001df0:	24000394 	.word	0x24000394
 8001df4:	240003b8 	.word	0x240003b8
 8001df8:	240003c0 	.word	0x240003c0
 8001dfc:	24000010 	.word	0x24000010
 8001e00:	24000450 	.word	0x24000450
 8001e04:	24000408 	.word	0x24000408
 8001e08:	24000410 	.word	0x24000410
 8001e0c:	24000418 	.word	0x24000418
 8001e10:	24000458 	.word	0x24000458
 8001e14:	3ff00000 	.word	0x3ff00000
 8001e18:	24000598 	.word	0x24000598
 8001e1c:	240006c8 	.word	0x240006c8

08001e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b09c      	sub	sp, #112	; 0x70
 8001e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2a:	224c      	movs	r2, #76	; 0x4c
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f00c ff10 	bl	800ec54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2220      	movs	r2, #32
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f00c ff0a 	bl	800ec54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e40:	2002      	movs	r0, #2
 8001e42:	f006 f819 	bl	8007e78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <SystemClock_Config+0xf4>)
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	4a31      	ldr	r2, [pc, #196]	; (8001f14 <SystemClock_Config+0xf4>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <SystemClock_Config+0xf4>)
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <SystemClock_Config+0xf8>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e68:	4a2b      	ldr	r2, [pc, #172]	; (8001f18 <SystemClock_Config+0xf8>)
 8001e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <SystemClock_Config+0xf8>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e7c:	bf00      	nop
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <SystemClock_Config+0xf8>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8a:	d1f8      	bne.n	8001e7e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001e90:	2301      	movs	r3, #1
 8001e92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e94:	2340      	movs	r3, #64	; 0x40
 8001e96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001ea4:	2310      	movs	r3, #16
 8001ea6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f006 f811 	bl	8007eec <HAL_RCC_OscConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001ed0:	f000 fa86 	bl	80023e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed4:	233f      	movs	r3, #63	; 0x3f
 8001ed6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ee8:	2340      	movs	r3, #64	; 0x40
 8001eea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4618      	mov	r0, r3
 8001efc:	f006 fc24 	bl	8008748 <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001f06:	f000 fa6b 	bl	80023e0 <Error_Handler>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3770      	adds	r7, #112	; 0x70
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	58000400 	.word	0x58000400
 8001f18:	58024800 	.word	0x58024800

08001f1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f2c:	d106      	bne.n	8001f3c <HAL_GPIO_EXTI_Callback+0x20>
	case BUTTON_Pin:
		FlagButton = 1;
 8001f2e:	4907      	ldr	r1, [pc, #28]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x30>)
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_GPIO_EXTI_Callback+0x34>)
 8001f36:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8001f3a:	e000      	b.n	8001f3e <HAL_GPIO_EXTI_Callback+0x22>
		 HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);	//Apago el PWM del motor 3
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/
	default:

		break;
 8001f3c:	bf00      	nop
	}

}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	240003f8 	.word	0x240003f8
 8001f50:	3ff00000 	.word	0x3ff00000

08001f54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a28      	ldr	r2, [pc, #160]	; (8002004 <HAL_UART_RxCpltCallback+0xb0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d13d      	bne.n	8001fe2 <HAL_UART_RxCpltCallback+0x8e>
		char dato;
		dato = rx_data;
 8001f66:	4b28      	ldr	r3, [pc, #160]	; (8002008 <HAL_UART_RxCpltCallback+0xb4>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b3a      	cmp	r3, #58	; 0x3a
 8001f70:	d006      	beq.n	8001f80 <HAL_UART_RxCpltCallback+0x2c>
 8001f72:	2b3a      	cmp	r3, #58	; 0x3a
 8001f74:	dc26      	bgt.n	8001fc4 <HAL_UART_RxCpltCallback+0x70>
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d009      	beq.n	8001f8e <HAL_UART_RxCpltCallback+0x3a>
 8001f7a:	2b0d      	cmp	r3, #13
 8001f7c:	d012      	beq.n	8001fa4 <HAL_UART_RxCpltCallback+0x50>
 8001f7e:	e021      	b.n	8001fc4 <HAL_UART_RxCpltCallback+0x70>
		case ':':
			rx_index = 0;
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <HAL_UART_RxCpltCallback+0xb8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_UART_RxCpltCallback+0xbc>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
			break;
 8001f8c:	e030      	b.n	8001ff0 <HAL_UART_RxCpltCallback+0x9c>
		case 8:
			if (rx_index > 0) {
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	; (800200c <HAL_UART_RxCpltCallback+0xb8>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d027      	beq.n	8001fe6 <HAL_UART_RxCpltCallback+0x92>
				rx_index--;
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_UART_RxCpltCallback+0xb8>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_UART_RxCpltCallback+0xb8>)
 8001fa0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001fa2:	e020      	b.n	8001fe6 <HAL_UART_RxCpltCallback+0x92>
		case '\r':
			if (cm0 == 1) {
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_UART_RxCpltCallback+0xbc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d11e      	bne.n	8001fea <HAL_UART_RxCpltCallback+0x96>
				rx_buffer[rx_index] = 0;
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_UART_RxCpltCallback+0xb8>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_UART_RxCpltCallback+0xc0>)
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8001fb8:	f7ff fb4c 	bl	8001654 <interpretaComando>
				cm0 = 0;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_UART_RxCpltCallback+0xbc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001fc2:	e012      	b.n	8001fea <HAL_UART_RxCpltCallback+0x96>
		default:
			if (rx_index < 30) {
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_UART_RxCpltCallback+0xb8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b1d      	cmp	r3, #29
 8001fca:	d810      	bhi.n	8001fee <HAL_UART_RxCpltCallback+0x9a>
				rx_buffer[rx_index++] = dato;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_UART_RxCpltCallback+0xb8>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	b2d1      	uxtb	r1, r2
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_UART_RxCpltCallback+0xb8>)
 8001fd6:	7011      	strb	r1, [r2, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_UART_RxCpltCallback+0xc0>)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	5453      	strb	r3, [r2, r1]
			}
			break;
 8001fe0:	e005      	b.n	8001fee <HAL_UART_RxCpltCallback+0x9a>
		}
	}
 8001fe2:	bf00      	nop
 8001fe4:	e004      	b.n	8001ff0 <HAL_UART_RxCpltCallback+0x9c>
			break;
 8001fe6:	bf00      	nop
 8001fe8:	e002      	b.n	8001ff0 <HAL_UART_RxCpltCallback+0x9c>
			break;
 8001fea:	bf00      	nop
 8001fec:	e000      	b.n	8001ff0 <HAL_UART_RxCpltCallback+0x9c>
			break;
 8001fee:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4905      	ldr	r1, [pc, #20]	; (8002008 <HAL_UART_RxCpltCallback+0xb4>)
 8001ff4:	4808      	ldr	r0, [pc, #32]	; (8002018 <HAL_UART_RxCpltCallback+0xc4>)
 8001ff6:	f00a fb7d 	bl	800c6f4 <HAL_UART_Receive_IT>
}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40004800 	.word	0x40004800
 8002008:	24000392 	.word	0x24000392
 800200c:	24000370 	.word	0x24000370
 8002010:	24000393 	.word	0x24000393
 8002014:	24000374 	.word	0x24000374
 8002018:	24000ca8 	.word	0x24000ca8

0800201c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	__NOP();
 8002024:	bf00      	nop
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002044:	d116      	bne.n	8002074 <HAL_TIM_IC_CaptureCallback+0x40>
		if (pMotor1 == numStep1) {
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d10a      	bne.n	8002068 <HAL_TIM_IC_CaptureCallback+0x34>
			HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1); //Apago el PWM del motor 1
 8002052:	2100      	movs	r1, #0
 8002054:	4827      	ldr	r0, [pc, #156]	; (80020f4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002056:	f008 fd71 	bl	800ab3c <HAL_TIM_PWM_Stop>
			FlagTrayectoM1 = 1;
 800205a:	4927      	ldr	r1, [pc, #156]	; (80020f8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002062:	e9c1 2300 	strd	r2, r3, [r1]
		} else {
			pMotor3++;
		}

	}
}
 8002066:	e03c      	b.n	80020e2 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor1++;
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_TIM_IC_CaptureCallback+0xb8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002070:	6013      	str	r3, [r2, #0]
}
 8002072:	e036      	b.n	80020e2 <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM3) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a21      	ldr	r2, [pc, #132]	; (8002100 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d116      	bne.n	80020ac <HAL_TIM_IC_CaptureCallback+0x78>
		if (pMotor2 == numStep2) {
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d10a      	bne.n	80020a0 <HAL_TIM_IC_CaptureCallback+0x6c>
			HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);//Apago el PWM del motor 1
 800208a:	2100      	movs	r1, #0
 800208c:	481f      	ldr	r0, [pc, #124]	; (800210c <HAL_TIM_IC_CaptureCallback+0xd8>)
 800208e:	f008 fd55 	bl	800ab3c <HAL_TIM_PWM_Stop>
			FlagTrayectoM2 = 1;
 8002092:	491f      	ldr	r1, [pc, #124]	; (8002110 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800209a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800209e:	e020      	b.n	80020e2 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor2++;
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80020a8:	6013      	str	r3, [r2, #0]
}
 80020aa:	e01a      	b.n	80020e2 <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM4) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a18      	ldr	r2, [pc, #96]	; (8002114 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d115      	bne.n	80020e2 <HAL_TIM_IC_CaptureCallback+0xae>
		if (pMotor3 == numStep3) {
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_TIM_IC_CaptureCallback+0xe8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d10a      	bne.n	80020d8 <HAL_TIM_IC_CaptureCallback+0xa4>
			HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);//Apago el PWM del motor 1
 80020c2:	2100      	movs	r1, #0
 80020c4:	4816      	ldr	r0, [pc, #88]	; (8002120 <HAL_TIM_IC_CaptureCallback+0xec>)
 80020c6:	f008 fd39 	bl	800ab3c <HAL_TIM_PWM_Stop>
			FlagTrayectoM3 = 1;
 80020ca:	4916      	ldr	r1, [pc, #88]	; (8002124 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_TIM_IC_CaptureCallback+0xc8>)
 80020d2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80020d6:	e004      	b.n	80020e2 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor3++;
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80020e0:	6013      	str	r3, [r2, #0]
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	240002c8 	.word	0x240002c8
 80020f0:	240002d4 	.word	0x240002d4
 80020f4:	240005e4 	.word	0x240005e4
 80020f8:	240003b8 	.word	0x240003b8
 80020fc:	3ff00000 	.word	0x3ff00000
 8002100:	40000400 	.word	0x40000400
 8002104:	240002cc 	.word	0x240002cc
 8002108:	240002d8 	.word	0x240002d8
 800210c:	24000630 	.word	0x24000630
 8002110:	240003c0 	.word	0x240003c0
 8002114:	40000800 	.word	0x40000800
 8002118:	240002d0 	.word	0x240002d0
 800211c:	240002dc 	.word	0x240002dc
 8002120:	2400067c 	.word	0x2400067c
 8002124:	24000010 	.word	0x24000010

08002128 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	if (htim == &htim15) {  //Timer que actualiza curva de velocidad
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a91      	ldr	r2, [pc, #580]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002134:	4293      	cmp	r3, r2
 8002136:	f040 8110 	bne.w	800235a <HAL_TIM_PeriodElapsedCallback+0x232>
		if (FlagTrayectoM1 == 1 && FlagTrayectoM2 == 1 && FlagTrayectoM3 == 1) {
 800213a:	4b90      	ldr	r3, [pc, #576]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800213c:	ed93 7b00 	vldr	d7, [r3]
 8002140:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002144:	eeb4 7b46 	vcmp.f64	d7, d6
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	d12d      	bne.n	80021aa <HAL_TIM_PeriodElapsedCallback+0x82>
 800214e:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002150:	ed93 7b00 	vldr	d7, [r3]
 8002154:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002158:	eeb4 7b46 	vcmp.f64	d7, d6
 800215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002160:	d123      	bne.n	80021aa <HAL_TIM_PeriodElapsedCallback+0x82>
 8002162:	4b88      	ldr	r3, [pc, #544]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002164:	ed93 7b00 	vldr	d7, [r3]
 8002168:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800216c:	eeb4 7b46 	vcmp.f64	d7, d6
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	d119      	bne.n	80021aa <HAL_TIM_PeriodElapsedCallback+0x82>
			HAL_TIM_Base_Stop_IT(&htim15);
 8002176:	4880      	ldr	r0, [pc, #512]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002178:	f008 fb42 	bl	800a800 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 800217c:	4882      	ldr	r0, [pc, #520]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800217e:	f008 fa9f 	bl	800a6c0 <HAL_TIM_Base_Stop>
			Pxini = Pxfin;
 8002182:	4b82      	ldr	r3, [pc, #520]	; (800238c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a82      	ldr	r2, [pc, #520]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002188:	6013      	str	r3, [r2, #0]
			Pyini = Pyfin;
 800218a:	4b82      	ldr	r3, [pc, #520]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a82      	ldr	r2, [pc, #520]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002190:	6013      	str	r3, [r2, #0]
			Pzini = Pzfin;
 8002192:	4b82      	ldr	r3, [pc, #520]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a82      	ldr	r2, [pc, #520]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002198:	6013      	str	r3, [r2, #0]
			mandalemecha = 0;
 800219a:	4982      	ldr	r1, [pc, #520]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
			}
		}
	}
}
 80021a8:	e0d7      	b.n	800235a <HAL_TIM_PeriodElapsedCallback+0x232>
			if (!FlagTiempo) {
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <HAL_TIM_PeriodElapsedCallback+0x96>
				FlagTiempo = 1;
 80021b2:	4b7d      	ldr	r3, [pc, #500]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
				TIM5->CNT = 0;	// comienzo a contabilizar el tiempo recien acá
 80021b8:	4b7c      	ldr	r3, [pc, #496]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x284>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
			Tiempo = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / 64000000.0));
 80021be:	4b7b      	ldr	r3, [pc, #492]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x284>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80021ca:	4b78      	ldr	r3, [pc, #480]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x284>)
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	3301      	adds	r3, #1
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80021d8:	ed9f 4b63 	vldr	d4, [pc, #396]	; 8002368 <HAL_TIM_PeriodElapsedCallback+0x240>
 80021dc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80021e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021e4:	4b72      	ldr	r3, [pc, #456]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80021e6:	ed83 7b00 	vstr	d7, [r3]
			obtenerVelCurva(Tiempo);
 80021ea:	4b71      	ldr	r3, [pc, #452]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80021ec:	ed93 7b00 	vldr	d7, [r3]
 80021f0:	eeb0 0b47 	vmov.f64	d0, d7
 80021f4:	f002 f9ce 	bl	8004594 <obtenerVelCurva>
			Recta3D[0] = Pxini + X * vDirector[0];
 80021f8:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002202:	4b6c      	ldr	r3, [pc, #432]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800220c:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800220e:	ed93 7b00 	vldr	d7, [r3]
 8002212:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002216:	ee36 7b07 	vadd.f64	d7, d6, d7
 800221a:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800221c:	ed83 7b00 	vstr	d7, [r3]
			Recta3D[1] = Pyini + X * vDirector[1];
 8002220:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800222a:	4b62      	ldr	r3, [pc, #392]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800222c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002230:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002234:	4b60      	ldr	r3, [pc, #384]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002236:	ed93 7b00 	vldr	d7, [r3]
 800223a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800223e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002242:	4b5e      	ldr	r3, [pc, #376]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002244:	ed83 7b02 	vstr	d7, [r3, #8]
			Recta3D[2] = Pzini + X * vDirector[2];
 8002248:	4b55      	ldr	r3, [pc, #340]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002252:	4b58      	ldr	r3, [pc, #352]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002254:	edd3 7a02 	vldr	s15, [r3, #8]
 8002258:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800225c:	4b56      	ldr	r3, [pc, #344]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800225e:	ed93 7b00 	vldr	d7, [r3]
 8002262:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002266:	ee36 7b07 	vadd.f64	d7, d6, d7
 800226a:	4b54      	ldr	r3, [pc, #336]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800226c:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3D[0] = 0 + DX * vDirector[0];
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800227a:	4b51      	ldr	r3, [pc, #324]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800227c:	ed93 7b00 	vldr	d7, [r3]
 8002280:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002284:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002370 <HAL_TIM_PeriodElapsedCallback+0x248>
 8002288:	ee37 7b06 	vadd.f64	d7, d7, d6
 800228c:	4b4d      	ldr	r3, [pc, #308]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800228e:	ed83 7b00 	vstr	d7, [r3]
			dRecta3D[1] = 0 + DX * vDirector[1];
 8002292:	4b48      	ldr	r3, [pc, #288]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002294:	edd3 7a01 	vldr	s15, [r3, #4]
 8002298:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800229c:	4b48      	ldr	r3, [pc, #288]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800229e:	ed93 7b00 	vldr	d7, [r3]
 80022a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80022a6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8002370 <HAL_TIM_PeriodElapsedCallback+0x248>
 80022aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022ae:	4b45      	ldr	r3, [pc, #276]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80022b0:	ed83 7b02 	vstr	d7, [r3, #8]
			dRecta3D[2] = 0 + DX * vDirector[2];
 80022b4:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80022b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80022ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80022be:	4b40      	ldr	r3, [pc, #256]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80022c0:	ed93 7b00 	vldr	d7, [r3]
 80022c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80022c8:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8002370 <HAL_TIM_PeriodElapsedCallback+0x248>
 80022cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022d0:	4b3c      	ldr	r3, [pc, #240]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80022d2:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3DZ=dRecta3D[2];
 80022d6:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80022d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022dc:	493a      	ldr	r1, [pc, #232]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80022de:	e9c1 2300 	strd	r2, r3, [r1]
			jacobianoInverso(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
 80022e2:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80022e4:	ed93 7b00 	vldr	d7, [r3]
 80022e8:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80022ea:	ed93 6b02 	vldr	d6, [r3, #8]
 80022ee:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80022f0:	ed93 2b04 	vldr	d2, [r3, #16]
 80022f4:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80022f6:	ed93 3b00 	vldr	d3, [r3]
 80022fa:	4b30      	ldr	r3, [pc, #192]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80022fc:	ed93 4b02 	vldr	d4, [r3, #8]
 8002300:	4b2e      	ldr	r3, [pc, #184]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002302:	ed93 5b04 	vldr	d5, [r3, #16]
 8002306:	eeb0 1b46 	vmov.f64	d1, d6
 800230a:	eeb0 0b47 	vmov.f64	d0, d7
 800230e:	f003 fc43 	bl	8005b98 <jacobianoInverso>
			SetPerfilTimers(omega[0], omega[1], omega[2]);
 8002312:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002314:	ed93 7b00 	vldr	d7, [r3]
 8002318:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800231a:	ed93 6b02 	vldr	d6, [r3, #8]
 800231e:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002320:	ed93 5b04 	vldr	d5, [r3, #16]
 8002324:	eeb0 2b45 	vmov.f64	d2, d5
 8002328:	eeb0 1b46 	vmov.f64	d1, d6
 800232c:	eeb0 0b47 	vmov.f64	d0, d7
 8002330:	f003 ff5a 	bl	80061e8 <SetPerfilTimers>
			if(Start==1){
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d10e      	bne.n	800235a <HAL_TIM_PeriodElapsedCallback+0x232>
				Start=0;
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);	// Activar generacion de pwm
 8002342:	2100      	movs	r1, #0
 8002344:	4823      	ldr	r0, [pc, #140]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002346:	f008 faeb 	bl	800a920 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
 800234a:	2100      	movs	r1, #0
 800234c:	4822      	ldr	r0, [pc, #136]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800234e:	f008 fae7 	bl	800a920 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
 8002352:	2100      	movs	r1, #0
 8002354:	4821      	ldr	r0, [pc, #132]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002356:	f008 fae3 	bl	800a920 <HAL_TIM_PWM_Start>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	f3af 8000 	nop.w
 8002368:	00000000 	.word	0x00000000
 800236c:	418e8480 	.word	0x418e8480
	...
 8002378:	240006c8 	.word	0x240006c8
 800237c:	240003b8 	.word	0x240003b8
 8002380:	240003c0 	.word	0x240003c0
 8002384:	24000010 	.word	0x24000010
 8002388:	24000598 	.word	0x24000598
 800238c:	24000304 	.word	0x24000304
 8002390:	240002f8 	.word	0x240002f8
 8002394:	24000308 	.word	0x24000308
 8002398:	240002fc 	.word	0x240002fc
 800239c:	2400030c 	.word	0x2400030c
 80023a0:	24000300 	.word	0x24000300
 80023a4:	24000458 	.word	0x24000458
 80023a8:	24000394 	.word	0x24000394
 80023ac:	40000c00 	.word	0x40000c00
 80023b0:	24000398 	.word	0x24000398
 80023b4:	24000314 	.word	0x24000314
 80023b8:	240003a0 	.word	0x240003a0
 80023bc:	24000320 	.word	0x24000320
 80023c0:	240003a8 	.word	0x240003a8
 80023c4:	24000338 	.word	0x24000338
 80023c8:	24000460 	.word	0x24000460
 80023cc:	24000350 	.word	0x24000350
 80023d0:	24000450 	.word	0x24000450
 80023d4:	240005e4 	.word	0x240005e4
 80023d8:	24000630 	.word	0x24000630
 80023dc:	2400067c 	.word	0x2400067c

080023e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <configStepMotor1>:
double remanente3;
double Periodo;		//periodo de timer PWM
//double ErrorPeriodo;
//double ErrorAcumuladoPeriodo[3];

void configStepMotor1(double angulo) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor1 = 0;
 80023fa:	4b53      	ldr	r3, [pc, #332]	; (8002548 <configStepMotor1+0x158>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual1) {
 8002400:	4b52      	ldr	r3, [pc, #328]	; (800254c <configStepMotor1+0x15c>)
 8002402:	ed93 7b00 	vldr	d7, [r3]
 8002406:	ed97 6b00 	vldr	d6, [r7]
 800240a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002412:	db22      	blt.n	800245a <configStepMotor1+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Inf_GPIO_Port, E_EndStop1_Inf_Pin))){
 8002414:	2102      	movs	r1, #2
 8002416:	484e      	ldr	r0, [pc, #312]	; (8002550 <configStepMotor1+0x160>)
 8002418:	f005 fce2 	bl	8007de0 <HAL_GPIO_ReadPin>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <configStepMotor1+0x40>
			flagErrorEndStop = 1;
 8002422:	494c      	ldr	r1, [pc, #304]	; (8002554 <configStepMotor1+0x164>)
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <configStepMotor1+0x168>)
 800242a:	e9c1 2300 	strd	r2, r3, [r1]
 800242e:	e036      	b.n	800249e <configStepMotor1+0xae>
		} else {
			anguloDif = angulo - anguloActual1;	//Calculo cuantos grados se tiene que mover.
 8002430:	4b46      	ldr	r3, [pc, #280]	; (800254c <configStepMotor1+0x15c>)
 8002432:	ed93 7b00 	vldr	d7, [r3]
 8002436:	ed97 6b00 	vldr	d6, [r7]
 800243a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800243e:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8002442:	4942      	ldr	r1, [pc, #264]	; (800254c <configStepMotor1+0x15c>)
 8002444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002448:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET); //Antihorario visto de frente
 800244c:	2201      	movs	r2, #1
 800244e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002452:	4842      	ldr	r0, [pc, #264]	; (800255c <configStepMotor1+0x16c>)
 8002454:	f005 fcdc 	bl	8007e10 <HAL_GPIO_WritePin>
 8002458:	e021      	b.n	800249e <configStepMotor1+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 800245a:	2101      	movs	r1, #1
 800245c:	483c      	ldr	r0, [pc, #240]	; (8002550 <configStepMotor1+0x160>)
 800245e:	f005 fcbf 	bl	8007de0 <HAL_GPIO_ReadPin>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <configStepMotor1+0x86>
			flagErrorEndStop = 1;
 8002468:	493a      	ldr	r1, [pc, #232]	; (8002554 <configStepMotor1+0x164>)
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b3a      	ldr	r3, [pc, #232]	; (8002558 <configStepMotor1+0x168>)
 8002470:	e9c1 2300 	strd	r2, r3, [r1]
 8002474:	e013      	b.n	800249e <configStepMotor1+0xae>
		} else {
			anguloDif = anguloActual1 - angulo;	//Calculo cuantos grados se tiene que mover.
 8002476:	4b35      	ldr	r3, [pc, #212]	; (800254c <configStepMotor1+0x15c>)
 8002478:	ed93 6b00 	vldr	d6, [r3]
 800247c:	ed97 7b00 	vldr	d7, [r7]
 8002480:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002484:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8002488:	4930      	ldr	r1, [pc, #192]	; (800254c <configStepMotor1+0x15c>)
 800248a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800248e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET); // Horario visto de frente
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002498:	4830      	ldr	r0, [pc, #192]	; (800255c <configStepMotor1+0x16c>)
 800249a:	f005 fcb9 	bl	8007e10 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep1 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 800249e:	ed97 7b02 	vldr	d7, [r7, #8]
 80024a2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8002538 <configStepMotor1+0x148>
 80024a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024aa:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80024ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024b2:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8002540 <configStepMotor1+0x150>
 80024b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <configStepMotor1+0x170>)
 80024bc:	ed83 7b00 	vstr	d7, [r3]
	numStep1 = (uint32_t) calculoStep1;	// cuando pasa la unidad lo sumo al numero de pasos para
 80024c0:	4b27      	ldr	r3, [pc, #156]	; (8002560 <configStepMotor1+0x170>)
 80024c2:	ed93 7b00 	vldr	d7, [r3]
 80024c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024ca:	ee17 2a90 	vmov	r2, s15
 80024ce:	4b25      	ldr	r3, [pc, #148]	; (8002564 <configStepMotor1+0x174>)
 80024d0:	601a      	str	r2, [r3, #0]
	remanente1 = remanente1 + (calculoStep1 - numStep1);// que el error no se amplifique.
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <configStepMotor1+0x170>)
 80024d4:	ed93 6b00 	vldr	d6, [r3]
 80024d8:	4b22      	ldr	r3, [pc, #136]	; (8002564 <configStepMotor1+0x174>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80024e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80024e8:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <configStepMotor1+0x178>)
 80024ea:	ed93 7b00 	vldr	d7, [r3]
 80024ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <configStepMotor1+0x178>)
 80024f4:	ed83 7b00 	vstr	d7, [r3]
	if (remanente1 >= 1) {
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <configStepMotor1+0x178>)
 80024fa:	ed93 7b00 	vldr	d7, [r3]
 80024fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002502:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	da00      	bge.n	800250e <configStepMotor1+0x11e>
		remanente1 = remanente1 - 1;
		numStep1 = numStep1 + 1;
	}
}
 800250c:	e00e      	b.n	800252c <configStepMotor1+0x13c>
		remanente1 = remanente1 - 1;
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <configStepMotor1+0x178>)
 8002510:	ed93 7b00 	vldr	d7, [r3]
 8002514:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002518:	ee37 7b46 	vsub.f64	d7, d7, d6
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <configStepMotor1+0x178>)
 800251e:	ed83 7b00 	vstr	d7, [r3]
		numStep1 = numStep1 + 1;
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <configStepMotor1+0x174>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3301      	adds	r3, #1
 8002528:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <configStepMotor1+0x174>)
 800252a:	6013      	str	r3, [r2, #0]
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	f3af 8000 	nop.w
 8002538:	00000000 	.word	0x00000000
 800253c:	40990000 	.word	0x40990000
 8002540:	00000000 	.word	0x00000000
 8002544:	40768000 	.word	0x40768000
 8002548:	240002c8 	.word	0x240002c8
 800254c:	24000468 	.word	0x24000468
 8002550:	58021000 	.word	0x58021000
 8002554:	24000400 	.word	0x24000400
 8002558:	3ff00000 	.word	0x3ff00000
 800255c:	58020800 	.word	0x58020800
 8002560:	24000480 	.word	0x24000480
 8002564:	240002d4 	.word	0x240002d4
 8002568:	24000498 	.word	0x24000498
 800256c:	00000000 	.word	0x00000000

08002570 <configStepMotor2>:

void configStepMotor2(double angulo) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor2 = 0;
 800257a:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <configStepMotor2+0x158>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual2) {
 8002580:	4b52      	ldr	r3, [pc, #328]	; (80026cc <configStepMotor2+0x15c>)
 8002582:	ed93 7b00 	vldr	d7, [r3]
 8002586:	ed97 6b00 	vldr	d6, [r7]
 800258a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002592:	db22      	blt.n	80025da <configStepMotor2+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Inf_GPIO_Port, E_EndStop2_Inf_Pin))){
 8002594:	2108      	movs	r1, #8
 8002596:	484e      	ldr	r0, [pc, #312]	; (80026d0 <configStepMotor2+0x160>)
 8002598:	f005 fc22 	bl	8007de0 <HAL_GPIO_ReadPin>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <configStepMotor2+0x40>
			flagErrorEndStop = 1;
 80025a2:	494c      	ldr	r1, [pc, #304]	; (80026d4 <configStepMotor2+0x164>)
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <configStepMotor2+0x168>)
 80025aa:	e9c1 2300 	strd	r2, r3, [r1]
 80025ae:	e036      	b.n	800261e <configStepMotor2+0xae>
		} else {
			anguloDif = angulo - anguloActual2;	//Calculo cuantos grados se tiene que mover.
 80025b0:	4b46      	ldr	r3, [pc, #280]	; (80026cc <configStepMotor2+0x15c>)
 80025b2:	ed93 7b00 	vldr	d7, [r3]
 80025b6:	ed97 6b00 	vldr	d6, [r7]
 80025ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80025be:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 80025c2:	4942      	ldr	r1, [pc, #264]	; (80026cc <configStepMotor2+0x15c>)
 80025c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025c8:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET); // VERIFICAR SENTIDO DE GIRO
 80025cc:	2201      	movs	r2, #1
 80025ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025d2:	4842      	ldr	r0, [pc, #264]	; (80026dc <configStepMotor2+0x16c>)
 80025d4:	f005 fc1c 	bl	8007e10 <HAL_GPIO_WritePin>
 80025d8:	e021      	b.n	800261e <configStepMotor2+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 80025da:	2104      	movs	r1, #4
 80025dc:	483c      	ldr	r0, [pc, #240]	; (80026d0 <configStepMotor2+0x160>)
 80025de:	f005 fbff 	bl	8007de0 <HAL_GPIO_ReadPin>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <configStepMotor2+0x86>
			flagErrorEndStop = 1;
 80025e8:	493a      	ldr	r1, [pc, #232]	; (80026d4 <configStepMotor2+0x164>)
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <configStepMotor2+0x168>)
 80025f0:	e9c1 2300 	strd	r2, r3, [r1]
 80025f4:	e013      	b.n	800261e <configStepMotor2+0xae>
		} else {
			anguloDif = anguloActual2 - angulo;	//Calculo cuantos grados se tiene que mover.
 80025f6:	4b35      	ldr	r3, [pc, #212]	; (80026cc <configStepMotor2+0x15c>)
 80025f8:	ed93 6b00 	vldr	d6, [r3]
 80025fc:	ed97 7b00 	vldr	d7, [r7]
 8002600:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002604:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 8002608:	4930      	ldr	r1, [pc, #192]	; (80026cc <configStepMotor2+0x15c>)
 800260a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800260e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET); // VERIFICAR SENTIDO DE GIRO
 8002612:	2200      	movs	r2, #0
 8002614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002618:	4830      	ldr	r0, [pc, #192]	; (80026dc <configStepMotor2+0x16c>)
 800261a:	f005 fbf9 	bl	8007e10 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep2 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 800261e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002622:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80026b8 <configStepMotor2+0x148>
 8002626:	ee27 7b06 	vmul.f64	d7, d7, d6
 800262a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800262e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002632:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80026c0 <configStepMotor2+0x150>
 8002636:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <configStepMotor2+0x170>)
 800263c:	ed83 7b00 	vstr	d7, [r3]
	numStep2 = (uint32_t) calculoStep2;	// cuando pasa la unidad lo sumo al numero de pasos para
 8002640:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <configStepMotor2+0x170>)
 8002642:	ed93 7b00 	vldr	d7, [r3]
 8002646:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800264a:	ee17 2a90 	vmov	r2, s15
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <configStepMotor2+0x174>)
 8002650:	601a      	str	r2, [r3, #0]
	remanente2 = remanente2 + (calculoStep2 - numStep2);// que el error no se amplifique.
 8002652:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <configStepMotor2+0x170>)
 8002654:	ed93 6b00 	vldr	d6, [r3]
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <configStepMotor2+0x174>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002664:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <configStepMotor2+0x178>)
 800266a:	ed93 7b00 	vldr	d7, [r3]
 800266e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <configStepMotor2+0x178>)
 8002674:	ed83 7b00 	vstr	d7, [r3]
	if (remanente2 >= 1) {
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <configStepMotor2+0x178>)
 800267a:	ed93 7b00 	vldr	d7, [r3]
 800267e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002682:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268a:	da00      	bge.n	800268e <configStepMotor2+0x11e>
		remanente2 = remanente2 - 1;
		numStep2 = numStep2 + 1;
	}
}
 800268c:	e00e      	b.n	80026ac <configStepMotor2+0x13c>
		remanente2 = remanente2 - 1;
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <configStepMotor2+0x178>)
 8002690:	ed93 7b00 	vldr	d7, [r3]
 8002694:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002698:	ee37 7b46 	vsub.f64	d7, d7, d6
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <configStepMotor2+0x178>)
 800269e:	ed83 7b00 	vstr	d7, [r3]
		numStep2 = numStep2 + 1;
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <configStepMotor2+0x174>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <configStepMotor2+0x174>)
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	f3af 8000 	nop.w
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40990000 	.word	0x40990000
 80026c0:	00000000 	.word	0x00000000
 80026c4:	40768000 	.word	0x40768000
 80026c8:	240002cc 	.word	0x240002cc
 80026cc:	24000470 	.word	0x24000470
 80026d0:	58021000 	.word	0x58021000
 80026d4:	24000400 	.word	0x24000400
 80026d8:	3ff00000 	.word	0x3ff00000
 80026dc:	58020800 	.word	0x58020800
 80026e0:	24000488 	.word	0x24000488
 80026e4:	240002d8 	.word	0x240002d8
 80026e8:	240004a0 	.word	0x240004a0
 80026ec:	00000000 	.word	0x00000000

080026f0 <configStepMotor3>:

void configStepMotor3(double angulo) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor3 = 0;
 80026fa:	4b53      	ldr	r3, [pc, #332]	; (8002848 <configStepMotor3+0x158>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual3) {
 8002700:	4b52      	ldr	r3, [pc, #328]	; (800284c <configStepMotor3+0x15c>)
 8002702:	ed93 7b00 	vldr	d7, [r3]
 8002706:	ed97 6b00 	vldr	d6, [r7]
 800270a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002712:	db22      	blt.n	800275a <configStepMotor3+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 8002714:	2120      	movs	r1, #32
 8002716:	484e      	ldr	r0, [pc, #312]	; (8002850 <configStepMotor3+0x160>)
 8002718:	f005 fb62 	bl	8007de0 <HAL_GPIO_ReadPin>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <configStepMotor3+0x40>
			flagErrorEndStop = 1;
 8002722:	494c      	ldr	r1, [pc, #304]	; (8002854 <configStepMotor3+0x164>)
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b4b      	ldr	r3, [pc, #300]	; (8002858 <configStepMotor3+0x168>)
 800272a:	e9c1 2300 	strd	r2, r3, [r1]
 800272e:	e036      	b.n	800279e <configStepMotor3+0xae>
		} else {
			anguloDif = angulo - anguloActual3;	//Calculo cuantos grados se tiene que mover.
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <configStepMotor3+0x15c>)
 8002732:	ed93 7b00 	vldr	d7, [r3]
 8002736:	ed97 6b00 	vldr	d6, [r7]
 800273a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800273e:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8002742:	4942      	ldr	r1, [pc, #264]	; (800284c <configStepMotor3+0x15c>)
 8002744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002748:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET); // Brazo Baja (Antihorario)
 800274c:	2201      	movs	r2, #1
 800274e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002752:	4842      	ldr	r0, [pc, #264]	; (800285c <configStepMotor3+0x16c>)
 8002754:	f005 fb5c 	bl	8007e10 <HAL_GPIO_WritePin>
 8002758:	e021      	b.n	800279e <configStepMotor3+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 800275a:	2120      	movs	r1, #32
 800275c:	483c      	ldr	r0, [pc, #240]	; (8002850 <configStepMotor3+0x160>)
 800275e:	f005 fb3f 	bl	8007de0 <HAL_GPIO_ReadPin>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d106      	bne.n	8002776 <configStepMotor3+0x86>
					flagErrorEndStop = 1;
 8002768:	493a      	ldr	r1, [pc, #232]	; (8002854 <configStepMotor3+0x164>)
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <configStepMotor3+0x168>)
 8002770:	e9c1 2300 	strd	r2, r3, [r1]
 8002774:	e013      	b.n	800279e <configStepMotor3+0xae>
		} else {
			anguloDif = anguloActual3 - angulo;	//Calculo cuantos grados se tiene que mover.
 8002776:	4b35      	ldr	r3, [pc, #212]	; (800284c <configStepMotor3+0x15c>)
 8002778:	ed93 6b00 	vldr	d6, [r3]
 800277c:	ed97 7b00 	vldr	d7, [r7]
 8002780:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002784:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8002788:	4930      	ldr	r1, [pc, #192]	; (800284c <configStepMotor3+0x15c>)
 800278a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800278e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET); // Brazo Sube (Horario)
 8002792:	2200      	movs	r2, #0
 8002794:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002798:	4830      	ldr	r0, [pc, #192]	; (800285c <configStepMotor3+0x16c>)
 800279a:	f005 fb39 	bl	8007e10 <HAL_GPIO_WritePin>
		}
	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep3 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 800279e:	ed97 7b02 	vldr	d7, [r7, #8]
 80027a2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8002838 <configStepMotor3+0x148>
 80027a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80027aa:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80027ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80027b2:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8002840 <configStepMotor3+0x150>
 80027b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80027ba:	4b29      	ldr	r3, [pc, #164]	; (8002860 <configStepMotor3+0x170>)
 80027bc:	ed83 7b00 	vstr	d7, [r3]
	numStep3 = (uint32_t) calculoStep3;	// cuando pasa la unidad lo sumo al numero de pasos para
 80027c0:	4b27      	ldr	r3, [pc, #156]	; (8002860 <configStepMotor3+0x170>)
 80027c2:	ed93 7b00 	vldr	d7, [r3]
 80027c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80027ca:	ee17 2a90 	vmov	r2, s15
 80027ce:	4b25      	ldr	r3, [pc, #148]	; (8002864 <configStepMotor3+0x174>)
 80027d0:	601a      	str	r2, [r3, #0]
	remanente3 = remanente3 + (calculoStep3 - numStep3);// que el error no se amplifique.
 80027d2:	4b23      	ldr	r3, [pc, #140]	; (8002860 <configStepMotor3+0x170>)
 80027d4:	ed93 6b00 	vldr	d6, [r3]
 80027d8:	4b22      	ldr	r3, [pc, #136]	; (8002864 <configStepMotor3+0x174>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80027e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80027e8:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <configStepMotor3+0x178>)
 80027ea:	ed93 7b00 	vldr	d7, [r3]
 80027ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <configStepMotor3+0x178>)
 80027f4:	ed83 7b00 	vstr	d7, [r3]
	if (remanente3 >= 1) {
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <configStepMotor3+0x178>)
 80027fa:	ed93 7b00 	vldr	d7, [r3]
 80027fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002802:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280a:	da00      	bge.n	800280e <configStepMotor3+0x11e>
		remanente3 = remanente3 - 1;
		numStep3 = numStep3 + 1;
	}
}
 800280c:	e00e      	b.n	800282c <configStepMotor3+0x13c>
		remanente3 = remanente3 - 1;
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <configStepMotor3+0x178>)
 8002810:	ed93 7b00 	vldr	d7, [r3]
 8002814:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002818:	ee37 7b46 	vsub.f64	d7, d7, d6
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <configStepMotor3+0x178>)
 800281e:	ed83 7b00 	vstr	d7, [r3]
		numStep3 = numStep3 + 1;
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <configStepMotor3+0x174>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <configStepMotor3+0x174>)
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	f3af 8000 	nop.w
 8002838:	00000000 	.word	0x00000000
 800283c:	40990000 	.word	0x40990000
 8002840:	00000000 	.word	0x00000000
 8002844:	40768000 	.word	0x40768000
 8002848:	240002d0 	.word	0x240002d0
 800284c:	24000478 	.word	0x24000478
 8002850:	58021000 	.word	0x58021000
 8002854:	24000400 	.word	0x24000400
 8002858:	3ff00000 	.word	0x3ff00000
 800285c:	58020800 	.word	0x58020800
 8002860:	24000490 	.word	0x24000490
 8002864:	240002dc 	.word	0x240002dc
 8002868:	240004a8 	.word	0x240004a8

0800286c <transpuesta>:
 *      Author: EliasC
 */

#include <operaciones.h>

array2D transpuesta(double Maux[3][3]) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b096      	sub	sp, #88	; 0x58
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
	array2D MTaux;
	for (int i = 0; i < 3; ++i) {
 8002876:	2300      	movs	r3, #0
 8002878:	657b      	str	r3, [r7, #84]	; 0x54
 800287a:	e024      	b.n	80028c6 <transpuesta+0x5a>
		for (int j = 0; j < 3; ++j) {
 800287c:	2300      	movs	r3, #0
 800287e:	653b      	str	r3, [r7, #80]	; 0x50
 8002880:	e01b      	b.n	80028ba <transpuesta+0x4e>
			MTaux.m[j][i] = Maux[i][j];	//transpuesta de la matriz l2 JP=[l21';l22';l23'];
 8002882:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	461a      	mov	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	441a      	add	r2, r3
 8002892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800289c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	3358      	adds	r3, #88	; 0x58
 80028ac:	443b      	add	r3, r7
 80028ae:	3b50      	subs	r3, #80	; 0x50
 80028b0:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < 3; ++j) {
 80028b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b6:	3301      	adds	r3, #1
 80028b8:	653b      	str	r3, [r7, #80]	; 0x50
 80028ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028bc:	2b02      	cmp	r3, #2
 80028be:	dde0      	ble.n	8002882 <transpuesta+0x16>
	for (int i = 0; i < 3; ++i) {
 80028c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c2:	3301      	adds	r3, #1
 80028c4:	657b      	str	r3, [r7, #84]	; 0x54
 80028c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	ddd7      	ble.n	800287c <transpuesta+0x10>
		}
	}
	return MTaux;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f107 0308 	add.w	r3, r7, #8
 80028d4:	2248      	movs	r2, #72	; 0x48
 80028d6:	4619      	mov	r1, r3
 80028d8:	f00c f9ae 	bl	800ec38 <memcpy>
}
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	3758      	adds	r7, #88	; 0x58
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <productDot>:

double productDot(double VectA[], double VectB[]) {
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
	double dotaux = 0;
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e016      	b.n	800292e <productDot+0x4a>
		dotaux = dotaux + VectA[i] * VectB[i];
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	ed93 6b00 	vldr	d6, [r3]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	4413      	add	r3, r2
 8002914:	ed93 7b00 	vldr	d7, [r3]
 8002918:	ee26 7b07 	vmul.f64	d7, d6, d7
 800291c:	ed97 6b04 	vldr	d6, [r7, #16]
 8002920:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002924:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3301      	adds	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b02      	cmp	r3, #2
 8002932:	dde5      	ble.n	8002900 <productDot+0x1c>
	}
	return dotaux;
 8002934:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002938:	ec43 2b17 	vmov	d7, r2, r3
}
 800293c:	eeb0 0b47 	vmov.f64	d0, d7
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <determinante>:

double determinante(double Maux[3][3]) {
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
	double det;
	det = Maux[0][0] * Maux[1][1] * Maux[2][2]; // + Maux[0][1] * Maux[1][2] * Maux[2][0] + Maux[1][0] * Maux[2][1] * Maux[0][2] - Maux[2][0] * Maux[1][1] * Maux[0][2] - Maux[1][0] * Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[1][2] * Maux[0][0];
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	ed93 6b00 	vldr	d6, [r3]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3318      	adds	r3, #24
 800295c:	ed93 7b02 	vldr	d7, [r3, #8]
 8002960:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3330      	adds	r3, #48	; 0x30
 8002968:	ed93 7b04 	vldr	d7, [r3, #16]
 800296c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002970:	ed87 7b02 	vstr	d7, [r7, #8]
	return det;
 8002974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002978:	ec43 2b17 	vmov	d7, r2, r3
}
 800297c:	eeb0 0b47 	vmov.f64	d0, d7
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <adjunta>:

array2D adjunta(double Maux[3][3]) {
 800298a:	b580      	push	{r7, lr}
 800298c:	b094      	sub	sp, #80	; 0x50
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
	array2D adj;
	adj.m[0][0] = Maux[1][1] * Maux[2][2] - Maux[2][1] * Maux[1][2];
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	3318      	adds	r3, #24
 8002998:	ed93 6b02 	vldr	d6, [r3, #8]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	3330      	adds	r3, #48	; 0x30
 80029a0:	ed93 7b04 	vldr	d7, [r3, #16]
 80029a4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	3330      	adds	r3, #48	; 0x30
 80029ac:	ed93 5b02 	vldr	d5, [r3, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	3318      	adds	r3, #24
 80029b4:	ed93 7b04 	vldr	d7, [r3, #16]
 80029b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80029bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80029c0:	ed87 7b02 	vstr	d7, [r7, #8]
	adj.m[0][1] = Maux[1][0] * Maux[2][2] - Maux[2][0] * Maux[1][2];
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	3318      	adds	r3, #24
 80029c8:	ed93 6b00 	vldr	d6, [r3]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	3330      	adds	r3, #48	; 0x30
 80029d0:	ed93 7b04 	vldr	d7, [r3, #16]
 80029d4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	3330      	adds	r3, #48	; 0x30
 80029dc:	ed93 5b00 	vldr	d5, [r3]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	3318      	adds	r3, #24
 80029e4:	ed93 7b04 	vldr	d7, [r3, #16]
 80029e8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80029ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80029f0:	ed87 7b04 	vstr	d7, [r7, #16]
	adj.m[0][2] = Maux[1][0] * Maux[2][1] - Maux[2][0] * Maux[1][1];
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	3318      	adds	r3, #24
 80029f8:	ed93 6b00 	vldr	d6, [r3]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	3330      	adds	r3, #48	; 0x30
 8002a00:	ed93 7b02 	vldr	d7, [r3, #8]
 8002a04:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	3330      	adds	r3, #48	; 0x30
 8002a0c:	ed93 5b00 	vldr	d5, [r3]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	3318      	adds	r3, #24
 8002a14:	ed93 7b02 	vldr	d7, [r3, #8]
 8002a18:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a20:	ed87 7b06 	vstr	d7, [r7, #24]
	adj.m[1][0] = Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[0][2];
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	ed93 6b02 	vldr	d6, [r3, #8]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	3330      	adds	r3, #48	; 0x30
 8002a2e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a32:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	3330      	adds	r3, #48	; 0x30
 8002a3a:	ed93 5b02 	vldr	d5, [r3, #8]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a4c:	ed87 7b08 	vstr	d7, [r7, #32]
	adj.m[1][1] = Maux[0][0] * Maux[2][2] - Maux[2][0] * Maux[0][2];
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	ed93 6b00 	vldr	d6, [r3]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	3330      	adds	r3, #48	; 0x30
 8002a5a:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	3330      	adds	r3, #48	; 0x30
 8002a66:	ed93 5b00 	vldr	d5, [r3]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a70:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a74:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a78:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	adj.m[1][2] = Maux[0][0] * Maux[2][1] - Maux[2][0] * Maux[0][1];
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	ed93 6b00 	vldr	d6, [r3]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	3330      	adds	r3, #48	; 0x30
 8002a86:	ed93 7b02 	vldr	d7, [r3, #8]
 8002a8a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	3330      	adds	r3, #48	; 0x30
 8002a92:	ed93 5b00 	vldr	d5, [r3]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	ed93 7b02 	vldr	d7, [r3, #8]
 8002a9c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002aa0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002aa4:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	adj.m[2][0] = Maux[0][1] * Maux[1][2] - Maux[1][1] * Maux[0][2];
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	ed93 6b02 	vldr	d6, [r3, #8]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	3318      	adds	r3, #24
 8002ab2:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ab6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	3318      	adds	r3, #24
 8002abe:	ed93 5b02 	vldr	d5, [r3, #8]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ac8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002acc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ad0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	adj.m[2][1] = Maux[0][0] * Maux[1][2] - Maux[1][0] * Maux[0][2];
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	ed93 6b00 	vldr	d6, [r3]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	3318      	adds	r3, #24
 8002ade:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ae2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	3318      	adds	r3, #24
 8002aea:	ed93 5b00 	vldr	d5, [r3]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	ed93 7b04 	vldr	d7, [r3, #16]
 8002af4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002af8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002afc:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	adj.m[2][2] = Maux[0][0] * Maux[1][1] - Maux[1][0] * Maux[0][1];
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	ed93 6b00 	vldr	d6, [r3]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	3318      	adds	r3, #24
 8002b0a:	ed93 7b02 	vldr	d7, [r3, #8]
 8002b0e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	3318      	adds	r3, #24
 8002b16:	ed93 5b00 	vldr	d5, [r3]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	ed93 7b02 	vldr	d7, [r3, #8]
 8002b20:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b28:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	return adj;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f107 0308 	add.w	r3, r7, #8
 8002b34:	2248      	movs	r2, #72	; 0x48
 8002b36:	4619      	mov	r1, r3
 8002b38:	f00c f87e 	bl	800ec38 <memcpy>
}
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	3750      	adds	r7, #80	; 0x50
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <inversa>:

array2D inversa(double A[3][3]) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0bc      	sub	sp, #240	; 0xf0
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002b4c:	64b9      	str	r1, [r7, #72]	; 0x48
	array2D Minv;
	array2D Maux;
	double det;
	Maux = adjunta(A);
 8002b4e:	463b      	mov	r3, r7
 8002b50:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff19 	bl	800298a <adjunta>
 8002b58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b5c:	4639      	mov	r1, r7
 8002b5e:	2248      	movs	r2, #72	; 0x48
 8002b60:	4618      	mov	r0, r3
 8002b62:	f00c f869 	bl	800ec38 <memcpy>
	Maux = transpuesta(Maux.m);
 8002b66:	463b      	mov	r3, r7
 8002b68:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fe7c 	bl	800286c <transpuesta>
 8002b74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b78:	4639      	mov	r1, r7
 8002b7a:	2248      	movs	r2, #72	; 0x48
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f00c f85b 	bl	800ec38 <memcpy>
	det = determinante(A);
 8002b82:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b84:	f7ff fee1 	bl	800294a <determinante>
 8002b88:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	for (int i = 0; i < 3; ++i) {
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002b92:	e035      	b.n	8002c00 <inversa+0xbc>
		for (int j = 0; j < 3; ++j) {
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b9a:	e028      	b.n	8002bee <inversa+0xaa>
			Minv.m[i][j] = (1 / det) * Maux.m[i][j];
 8002b9c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002ba0:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8002ba4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002ba8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	33f0      	adds	r3, #240	; 0xf0
 8002bbc:	443b      	add	r3, r7
 8002bbe:	3ba0      	subs	r3, #160	; 0xa0
 8002bc0:	ed93 7b00 	vldr	d7, [r3]
 8002bc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002bc8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	33f0      	adds	r3, #240	; 0xf0
 8002bdc:	443b      	add	r3, r7
 8002bde:	3b58      	subs	r3, #88	; 0x58
 8002be0:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; ++j) {
 8002be4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002be8:	3301      	adds	r3, #1
 8002bea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	ddd2      	ble.n	8002b9c <inversa+0x58>
	for (int i = 0; i < 3; ++i) {
 8002bf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	ddc5      	ble.n	8002b94 <inversa+0x50>
		}
	}
	return Minv;
 8002c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c10:	2248      	movs	r2, #72	; 0x48
 8002c12:	4619      	mov	r1, r3
 8002c14:	f00c f810 	bl	800ec38 <memcpy>
}
 8002c18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002c1a:	37f0      	adds	r7, #240	; 0xf0
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <productMatriz>:

array2D productMatriz(double MatrizA[3][3], double MatrizB[3][3]) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b09c      	sub	sp, #112	; 0x70
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
	array2D producto;

	for (int k = 0; k < 3; ++k) {
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c30:	e04b      	b.n	8002cca <productMatriz+0xaa>
		for (int i = 0; i < 3; ++i) {
 8002c32:	2300      	movs	r3, #0
 8002c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c36:	e042      	b.n	8002cbe <productMatriz+0x9e>
			double suma = 0;
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8002c44:	2300      	movs	r3, #0
 8002c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c48:	e024      	b.n	8002c94 <productMatriz+0x74>
				suma += MatrizA[i][j] * MatrizB[j][k];
 8002c4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	441a      	add	r2, r3
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	ed93 6b00 	vldr	d6, [r3]
 8002c64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	441a      	add	r2, r3
 8002c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	ed93 7b00 	vldr	d7, [r3]
 8002c7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c82:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8002c86:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c8a:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8002c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c90:	3301      	adds	r3, #1
 8002c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	ddd7      	ble.n	8002c4a <productMatriz+0x2a>
			}
			producto.m[i][k] = suma;
 8002c9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	3370      	adds	r3, #112	; 0x70
 8002caa:	443b      	add	r3, r7
 8002cac:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8002cb0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002cb4:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8002cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cba:	3301      	adds	r3, #1
 8002cbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	ddb9      	ble.n	8002c38 <productMatriz+0x18>
	for (int k = 0; k < 3; ++k) {
 8002cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	ddb0      	ble.n	8002c32 <productMatriz+0x12>
		}
	}
	return producto;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f107 0310 	add.w	r3, r7, #16
 8002cd8:	2248      	movs	r2, #72	; 0x48
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f00b ffac 	bl	800ec38 <memcpy>
}
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	3770      	adds	r7, #112	; 0x70
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_MspInit+0x44>)
 8002cf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <HAL_MspInit+0x44>)
 8002cf6:	f043 0302 	orr.w	r3, r3, #2
 8002cfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_MspInit+0x44>)
 8002d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002d0c:	2005      	movs	r0, #5
 8002d0e:	f004 f905 	bl	8006f1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2101      	movs	r1, #1
 8002d16:	2051      	movs	r0, #81	; 0x51
 8002d18:	f004 f90b 	bl	8006f32 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002d1c:	2051      	movs	r0, #81	; 0x51
 8002d1e:	f004 f922 	bl	8006f66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	58024400 	.word	0x58024400

08002d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d42:	e7fe      	b.n	8002d42 <HardFault_Handler+0x4>

08002d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <MemManage_Handler+0x4>

08002d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4e:	e7fe      	b.n	8002d4e <BusFault_Handler+0x4>

08002d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <UsageFault_Handler+0x4>

08002d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d84:	f003 ff86 	bl	8006c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8002d90:	2001      	movs	r0, #1
 8002d92:	f005 f856 	bl	8007e42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8002d9e:	2002      	movs	r0, #2
 8002da0:	f005 f84f 	bl	8007e42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8002dac:	2004      	movs	r0, #4
 8002dae:	f005 f848 	bl	8007e42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8002dba:	2008      	movs	r0, #8
 8002dbc:	f005 f841 	bl	8007e42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8002dc8:	2010      	movs	r0, #16
 8002dca:	f005 f83a 	bl	8007e42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8002dd6:	2020      	movs	r0, #32
 8002dd8:	f005 f833 	bl	8007e42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <TIM2_IRQHandler+0x10>)
 8002de6:	f008 f9af 	bl	800b148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	240004b4 	.word	0x240004b4

08002df4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <TIM3_IRQHandler+0x10>)
 8002dfa:	f008 f9a5 	bl	800b148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	24000500 	.word	0x24000500

08002e08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <TIM4_IRQHandler+0x10>)
 8002e0e:	f008 f99b 	bl	800b148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2400054c 	.word	0x2400054c

08002e1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <USART3_IRQHandler+0x10>)
 8002e22:	f009 fcbd 	bl	800c7a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	24000ca8 	.word	0x24000ca8

08002e30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8002e34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e38:	f005 f803 	bl	8007e42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <TIM15_IRQHandler+0x10>)
 8002e56:	f008 f977 	bl	800b148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	240006c8 	.word	0x240006c8

08002e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
	return 1;
 8002e68:	2301      	movs	r3, #1
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <_kill>:

int _kill(int pid, int sig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e7e:	f00b feb1 	bl	800ebe4 <__errno>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2216      	movs	r2, #22
 8002e86:	601a      	str	r2, [r3, #0]
	return -1;
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <_exit>:

void _exit (int status)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ffe7 	bl	8002e74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ea6:	e7fe      	b.n	8002ea6 <_exit+0x12>

08002ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	e00a      	b.n	8002ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eba:	f3af 8000 	nop.w
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	60ba      	str	r2, [r7, #8]
 8002ec6:	b2ca      	uxtb	r2, r1
 8002ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dbf0      	blt.n	8002eba <_read+0x12>
	}

return len;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	e009      	b.n	8002f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	60ba      	str	r2, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	3301      	adds	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	dbf1      	blt.n	8002ef4 <_write+0x12>
	}
	return len;
 8002f10:	687b      	ldr	r3, [r7, #4]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <_close>:

int _close(int file)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
	return -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f42:	605a      	str	r2, [r3, #4]
	return 0;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <_isatty>:

int _isatty(int file)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
	return 1;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
	return 0;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <_sbrk+0x50>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <_sbrk+0x16>
		heap_end = &end;
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <_sbrk+0x50>)
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <_sbrk+0x54>)
 8002f98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <_sbrk+0x50>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <_sbrk+0x50>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	466a      	mov	r2, sp
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d907      	bls.n	8002fbe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002fae:	f00b fe19 	bl	800ebe4 <__errno>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	220c      	movs	r2, #12
 8002fb6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbc:	e006      	b.n	8002fcc <_sbrk+0x48>
	}

	heap_end += incr;
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <_sbrk+0x50>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4a03      	ldr	r2, [pc, #12]	; (8002fd4 <_sbrk+0x50>)
 8002fc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002fca:	68fb      	ldr	r3, [r7, #12]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	240004b0 	.word	0x240004b0
 8002fd8:	24000d50 	.word	0x24000d50

08002fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002fe0:	4b29      	ldr	r3, [pc, #164]	; (8003088 <SystemInit+0xac>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	4a28      	ldr	r2, [pc, #160]	; (8003088 <SystemInit+0xac>)
 8002fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ff0:	4b26      	ldr	r3, [pc, #152]	; (800308c <SystemInit+0xb0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <SystemInit+0xb0>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ffc:	4b23      	ldr	r3, [pc, #140]	; (800308c <SystemInit+0xb0>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003002:	4b22      	ldr	r3, [pc, #136]	; (800308c <SystemInit+0xb0>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4921      	ldr	r1, [pc, #132]	; (800308c <SystemInit+0xb0>)
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <SystemInit+0xb4>)
 800300a:	4013      	ands	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800300e:	4b1f      	ldr	r3, [pc, #124]	; (800308c <SystemInit+0xb0>)
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <SystemInit+0xb0>)
 8003016:	2200      	movs	r2, #0
 8003018:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <SystemInit+0xb0>)
 800301c:	2200      	movs	r2, #0
 800301e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <SystemInit+0xb0>)
 8003022:	2200      	movs	r2, #0
 8003024:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <SystemInit+0xb0>)
 8003028:	2200      	movs	r2, #0
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800302c:	4b17      	ldr	r3, [pc, #92]	; (800308c <SystemInit+0xb0>)
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <SystemInit+0xb0>)
 8003034:	2200      	movs	r2, #0
 8003036:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <SystemInit+0xb0>)
 800303a:	2200      	movs	r2, #0
 800303c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <SystemInit+0xb0>)
 8003040:	2200      	movs	r2, #0
 8003042:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <SystemInit+0xb0>)
 8003046:	2200      	movs	r2, #0
 8003048:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <SystemInit+0xb0>)
 800304c:	2200      	movs	r2, #0
 800304e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <SystemInit+0xb0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0d      	ldr	r2, [pc, #52]	; (800308c <SystemInit+0xb0>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <SystemInit+0xb0>)
 800305e:	2200      	movs	r2, #0
 8003060:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <SystemInit+0xb8>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <SystemInit+0xbc>)
 8003068:	4013      	ands	r3, r2
 800306a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800306e:	d202      	bcs.n	8003076 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <SystemInit+0xc0>)
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SystemInit+0xac>)
 8003078:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800307c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000ed00 	.word	0xe000ed00
 800308c:	58024400 	.word	0x58024400
 8003090:	eaf6ed7f 	.word	0xeaf6ed7f
 8003094:	5c001000 	.word	0x5c001000
 8003098:	ffff0000 	.word	0xffff0000
 800309c:	51008108 	.word	0x51008108

080030a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	; 0x30
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030a6:	f107 0320 	add.w	r3, r7, #32
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	605a      	str	r2, [r3, #4]
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <MX_TIM2_Init+0xdc>)
 80030ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <MX_TIM2_Init+0xdc>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030da:	4b28      	ldr	r3, [pc, #160]	; (800317c <MX_TIM2_Init+0xdc>)
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80030e0:	4b26      	ldr	r3, [pc, #152]	; (800317c <MX_TIM2_Init+0xdc>)
 80030e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e8:	4b24      	ldr	r3, [pc, #144]	; (800317c <MX_TIM2_Init+0xdc>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ee:	4b23      	ldr	r3, [pc, #140]	; (800317c <MX_TIM2_Init+0xdc>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030f4:	4821      	ldr	r0, [pc, #132]	; (800317c <MX_TIM2_Init+0xdc>)
 80030f6:	f007 fa1b 	bl	800a530 <HAL_TIM_Base_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003100:	f7ff f96e 	bl	80023e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003108:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800310a:	f107 0320 	add.w	r3, r7, #32
 800310e:	4619      	mov	r1, r3
 8003110:	481a      	ldr	r0, [pc, #104]	; (800317c <MX_TIM2_Init+0xdc>)
 8003112:	f008 fae9 	bl	800b6e8 <HAL_TIM_ConfigClockSource>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800311c:	f7ff f960 	bl	80023e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003120:	4816      	ldr	r0, [pc, #88]	; (800317c <MX_TIM2_Init+0xdc>)
 8003122:	f007 fda1 	bl	800ac68 <HAL_TIM_IC_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800312c:	f7ff f958 	bl	80023e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4619      	mov	r1, r3
 800313e:	480f      	ldr	r0, [pc, #60]	; (800317c <MX_TIM2_Init+0xdc>)
 8003140:	f009 f946 	bl	800c3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800314a:	f7ff f949 	bl	80023e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003152:	2301      	movs	r3, #1
 8003154:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	2200      	movs	r2, #0
 8003162:	4619      	mov	r1, r3
 8003164:	4805      	ldr	r0, [pc, #20]	; (800317c <MX_TIM2_Init+0xdc>)
 8003166:	f008 f90e 	bl	800b386 <HAL_TIM_IC_ConfigChannel>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003170:	f7ff f936 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003174:	bf00      	nop
 8003176:	3730      	adds	r7, #48	; 0x30
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	240004b4 	.word	0x240004b4

08003180 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08c      	sub	sp, #48	; 0x30
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003186:	f107 0320 	add.w	r3, r7, #32
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	609a      	str	r2, [r3, #8]
 8003192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <MX_TIM3_Init+0xdc>)
 80031ae:	4a2c      	ldr	r2, [pc, #176]	; (8003260 <MX_TIM3_Init+0xe0>)
 80031b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80031b2:	4b2a      	ldr	r3, [pc, #168]	; (800325c <MX_TIM3_Init+0xdc>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <MX_TIM3_Init+0xdc>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80031be:	4b27      	ldr	r3, [pc, #156]	; (800325c <MX_TIM3_Init+0xdc>)
 80031c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031c6:	4b25      	ldr	r3, [pc, #148]	; (800325c <MX_TIM3_Init+0xdc>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031cc:	4b23      	ldr	r3, [pc, #140]	; (800325c <MX_TIM3_Init+0xdc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031d2:	4822      	ldr	r0, [pc, #136]	; (800325c <MX_TIM3_Init+0xdc>)
 80031d4:	f007 f9ac 	bl	800a530 <HAL_TIM_Base_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80031de:	f7ff f8ff 	bl	80023e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80031e8:	f107 0320 	add.w	r3, r7, #32
 80031ec:	4619      	mov	r1, r3
 80031ee:	481b      	ldr	r0, [pc, #108]	; (800325c <MX_TIM3_Init+0xdc>)
 80031f0:	f008 fa7a 	bl	800b6e8 <HAL_TIM_ConfigClockSource>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80031fa:	f7ff f8f1 	bl	80023e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80031fe:	4817      	ldr	r0, [pc, #92]	; (800325c <MX_TIM3_Init+0xdc>)
 8003200:	f007 fd32 	bl	800ac68 <HAL_TIM_IC_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800320a:	f7ff f8e9 	bl	80023e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	4619      	mov	r1, r3
 800321c:	480f      	ldr	r0, [pc, #60]	; (800325c <MX_TIM3_Init+0xdc>)
 800321e:	f009 f8d7 	bl	800c3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8003228:	f7ff f8da 	bl	80023e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800322c:	2300      	movs	r3, #0
 800322e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003230:	2301      	movs	r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800323c:	1d3b      	adds	r3, r7, #4
 800323e:	2200      	movs	r2, #0
 8003240:	4619      	mov	r1, r3
 8003242:	4806      	ldr	r0, [pc, #24]	; (800325c <MX_TIM3_Init+0xdc>)
 8003244:	f008 f89f 	bl	800b386 <HAL_TIM_IC_ConfigChannel>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800324e:	f7ff f8c7 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003252:	bf00      	nop
 8003254:	3730      	adds	r7, #48	; 0x30
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	24000500 	.word	0x24000500
 8003260:	40000400 	.word	0x40000400

08003264 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08c      	sub	sp, #48	; 0x30
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800326a:	f107 0320 	add.w	r3, r7, #32
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003290:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <MX_TIM4_Init+0xdc>)
 8003292:	4a2c      	ldr	r2, [pc, #176]	; (8003344 <MX_TIM4_Init+0xe0>)
 8003294:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003296:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <MX_TIM4_Init+0xdc>)
 8003298:	2200      	movs	r2, #0
 800329a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329c:	4b28      	ldr	r3, [pc, #160]	; (8003340 <MX_TIM4_Init+0xdc>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80032a2:	4b27      	ldr	r3, [pc, #156]	; (8003340 <MX_TIM4_Init+0xdc>)
 80032a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032aa:	4b25      	ldr	r3, [pc, #148]	; (8003340 <MX_TIM4_Init+0xdc>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b0:	4b23      	ldr	r3, [pc, #140]	; (8003340 <MX_TIM4_Init+0xdc>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80032b6:	4822      	ldr	r0, [pc, #136]	; (8003340 <MX_TIM4_Init+0xdc>)
 80032b8:	f007 f93a 	bl	800a530 <HAL_TIM_Base_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80032c2:	f7ff f88d 	bl	80023e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80032cc:	f107 0320 	add.w	r3, r7, #32
 80032d0:	4619      	mov	r1, r3
 80032d2:	481b      	ldr	r0, [pc, #108]	; (8003340 <MX_TIM4_Init+0xdc>)
 80032d4:	f008 fa08 	bl	800b6e8 <HAL_TIM_ConfigClockSource>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80032de:	f7ff f87f 	bl	80023e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80032e2:	4817      	ldr	r0, [pc, #92]	; (8003340 <MX_TIM4_Init+0xdc>)
 80032e4:	f007 fcc0 	bl	800ac68 <HAL_TIM_IC_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80032ee:	f7ff f877 	bl	80023e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032fa:	f107 0314 	add.w	r3, r7, #20
 80032fe:	4619      	mov	r1, r3
 8003300:	480f      	ldr	r0, [pc, #60]	; (8003340 <MX_TIM4_Init+0xdc>)
 8003302:	f009 f865 	bl	800c3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800330c:	f7ff f868 	bl	80023e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003310:	2300      	movs	r3, #0
 8003312:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003314:	2301      	movs	r3, #1
 8003316:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003320:	1d3b      	adds	r3, r7, #4
 8003322:	2200      	movs	r2, #0
 8003324:	4619      	mov	r1, r3
 8003326:	4806      	ldr	r0, [pc, #24]	; (8003340 <MX_TIM4_Init+0xdc>)
 8003328:	f008 f82d 	bl	800b386 <HAL_TIM_IC_ConfigChannel>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8003332:	f7ff f855 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003336:	bf00      	nop
 8003338:	3730      	adds	r7, #48	; 0x30
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	2400054c 	.word	0x2400054c
 8003344:	40000800 	.word	0x40000800

08003348 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800334e:	f107 0310 	add.w	r3, r7, #16
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800335c:	1d3b      	adds	r3, r7, #4
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003366:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <MX_TIM5_Init+0x98>)
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <MX_TIM5_Init+0x9c>)
 800336a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64000-1;
 800336c:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <MX_TIM5_Init+0x98>)
 800336e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003372:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <MX_TIM5_Init+0x98>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <MX_TIM5_Init+0x98>)
 800337c:	f04f 32ff 	mov.w	r2, #4294967295
 8003380:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <MX_TIM5_Init+0x98>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <MX_TIM5_Init+0x98>)
 800338a:	2200      	movs	r2, #0
 800338c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800338e:	4814      	ldr	r0, [pc, #80]	; (80033e0 <MX_TIM5_Init+0x98>)
 8003390:	f007 f8ce 	bl	800a530 <HAL_TIM_Base_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800339a:	f7ff f821 	bl	80023e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800339e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80033a4:	f107 0310 	add.w	r3, r7, #16
 80033a8:	4619      	mov	r1, r3
 80033aa:	480d      	ldr	r0, [pc, #52]	; (80033e0 <MX_TIM5_Init+0x98>)
 80033ac:	f008 f99c 	bl	800b6e8 <HAL_TIM_ConfigClockSource>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80033b6:	f7ff f813 	bl	80023e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4806      	ldr	r0, [pc, #24]	; (80033e0 <MX_TIM5_Init+0x98>)
 80033c8:	f009 f802 	bl	800c3d0 <HAL_TIMEx_MasterConfigSynchronization>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80033d2:	f7ff f805 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80033d6:	bf00      	nop
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	24000598 	.word	0x24000598
 80033e4:	40000c00 	.word	0x40000c00

080033e8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08c      	sub	sp, #48	; 0x30
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ee:	f107 0320 	add.w	r3, r7, #32
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	611a      	str	r2, [r3, #16]
 800340a:	615a      	str	r2, [r3, #20]
 800340c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800340e:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <MX_TIM12_Init+0xc0>)
 8003410:	4a26      	ldr	r2, [pc, #152]	; (80034ac <MX_TIM12_Init+0xc4>)
 8003412:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 500-1;
 8003414:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <MX_TIM12_Init+0xc0>)
 8003416:	f240 12f3 	movw	r2, #499	; 0x1f3
 800341a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800341c:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <MX_TIM12_Init+0xc0>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 40000;
 8003422:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <MX_TIM12_Init+0xc0>)
 8003424:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003428:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800342a:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <MX_TIM12_Init+0xc0>)
 800342c:	2200      	movs	r2, #0
 800342e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <MX_TIM12_Init+0xc0>)
 8003432:	2200      	movs	r2, #0
 8003434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003436:	481c      	ldr	r0, [pc, #112]	; (80034a8 <MX_TIM12_Init+0xc0>)
 8003438:	f007 f87a 	bl	800a530 <HAL_TIM_Base_Init>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8003442:	f7fe ffcd 	bl	80023e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800344a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800344c:	f107 0320 	add.w	r3, r7, #32
 8003450:	4619      	mov	r1, r3
 8003452:	4815      	ldr	r0, [pc, #84]	; (80034a8 <MX_TIM12_Init+0xc0>)
 8003454:	f008 f948 	bl	800b6e8 <HAL_TIM_ConfigClockSource>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 800345e:	f7fe ffbf 	bl	80023e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003462:	4811      	ldr	r0, [pc, #68]	; (80034a8 <MX_TIM12_Init+0xc0>)
 8003464:	f007 f9fb 	bl	800a85e <HAL_TIM_PWM_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800346e:	f7fe ffb7 	bl	80023e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003472:	2360      	movs	r3, #96	; 0x60
 8003474:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 8003476:	f644 6320 	movw	r3, #20000	; 0x4e20
 800347a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	2200      	movs	r2, #0
 8003488:	4619      	mov	r1, r3
 800348a:	4807      	ldr	r0, [pc, #28]	; (80034a8 <MX_TIM12_Init+0xc0>)
 800348c:	f008 f818 	bl	800b4c0 <HAL_TIM_PWM_ConfigChannel>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8003496:	f7fe ffa3 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800349a:	4803      	ldr	r0, [pc, #12]	; (80034a8 <MX_TIM12_Init+0xc0>)
 800349c:	f000 fa44 	bl	8003928 <HAL_TIM_MspPostInit>

}
 80034a0:	bf00      	nop
 80034a2:	3730      	adds	r7, #48	; 0x30
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	240005e4 	.word	0x240005e4
 80034ac:	40001800 	.word	0x40001800

080034b0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80034b6:	1d3b      	adds	r3, r7, #4
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
 80034c4:	615a      	str	r2, [r3, #20]
 80034c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <MX_TIM13_Init+0x98>)
 80034ca:	4a20      	ldr	r2, [pc, #128]	; (800354c <MX_TIM13_Init+0x9c>)
 80034cc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 500-1;
 80034ce:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <MX_TIM13_Init+0x98>)
 80034d0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80034d4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <MX_TIM13_Init+0x98>)
 80034d8:	2200      	movs	r2, #0
 80034da:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 40000;
 80034dc:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <MX_TIM13_Init+0x98>)
 80034de:	f649 4240 	movw	r2, #40000	; 0x9c40
 80034e2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <MX_TIM13_Init+0x98>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <MX_TIM13_Init+0x98>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80034f0:	4815      	ldr	r0, [pc, #84]	; (8003548 <MX_TIM13_Init+0x98>)
 80034f2:	f007 f81d 	bl	800a530 <HAL_TIM_Base_Init>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 80034fc:	f7fe ff70 	bl	80023e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003500:	4811      	ldr	r0, [pc, #68]	; (8003548 <MX_TIM13_Init+0x98>)
 8003502:	f007 f9ac 	bl	800a85e <HAL_TIM_PWM_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 800350c:	f7fe ff68 	bl	80023e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003510:	2360      	movs	r3, #96	; 0x60
 8003512:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 8003514:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003518:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	2200      	movs	r2, #0
 8003526:	4619      	mov	r1, r3
 8003528:	4807      	ldr	r0, [pc, #28]	; (8003548 <MX_TIM13_Init+0x98>)
 800352a:	f007 ffc9 	bl	800b4c0 <HAL_TIM_PWM_ConfigChannel>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8003534:	f7fe ff54 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003538:	4803      	ldr	r0, [pc, #12]	; (8003548 <MX_TIM13_Init+0x98>)
 800353a:	f000 f9f5 	bl	8003928 <HAL_TIM_MspPostInit>

}
 800353e:	bf00      	nop
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	24000630 	.word	0x24000630
 800354c:	40001c00 	.word	0x40001c00

08003550 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	611a      	str	r2, [r3, #16]
 8003564:	615a      	str	r2, [r3, #20]
 8003566:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003568:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <MX_TIM14_Init+0x98>)
 800356a:	4a20      	ldr	r2, [pc, #128]	; (80035ec <MX_TIM14_Init+0x9c>)
 800356c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 500-1;
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <MX_TIM14_Init+0x98>)
 8003570:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003574:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003576:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <MX_TIM14_Init+0x98>)
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 40000;
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <MX_TIM14_Init+0x98>)
 800357e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003582:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003584:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <MX_TIM14_Init+0x98>)
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800358a:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <MX_TIM14_Init+0x98>)
 800358c:	2200      	movs	r2, #0
 800358e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003590:	4815      	ldr	r0, [pc, #84]	; (80035e8 <MX_TIM14_Init+0x98>)
 8003592:	f006 ffcd 	bl	800a530 <HAL_TIM_Base_Init>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 800359c:	f7fe ff20 	bl	80023e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80035a0:	4811      	ldr	r0, [pc, #68]	; (80035e8 <MX_TIM14_Init+0x98>)
 80035a2:	f007 f95c 	bl	800a85e <HAL_TIM_PWM_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80035ac:	f7fe ff18 	bl	80023e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035b0:	2360      	movs	r3, #96	; 0x60
 80035b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 80035b4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80035b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	2200      	movs	r2, #0
 80035c6:	4619      	mov	r1, r3
 80035c8:	4807      	ldr	r0, [pc, #28]	; (80035e8 <MX_TIM14_Init+0x98>)
 80035ca:	f007 ff79 	bl	800b4c0 <HAL_TIM_PWM_ConfigChannel>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80035d4:	f7fe ff04 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80035d8:	4803      	ldr	r0, [pc, #12]	; (80035e8 <MX_TIM14_Init+0x98>)
 80035da:	f000 f9a5 	bl	8003928 <HAL_TIM_MspPostInit>

}
 80035de:	bf00      	nop
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	2400067c 	.word	0x2400067c
 80035ec:	40002000 	.word	0x40002000

080035f0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035f6:	f107 0310 	add.w	r3, r7, #16
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800360e:	4b1f      	ldr	r3, [pc, #124]	; (800368c <MX_TIM15_Init+0x9c>)
 8003610:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <MX_TIM15_Init+0xa0>)
 8003612:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <MX_TIM15_Init+0x9c>)
 8003616:	2201      	movs	r2, #1
 8003618:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361a:	4b1c      	ldr	r3, [pc, #112]	; (800368c <MX_TIM15_Init+0x9c>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <MX_TIM15_Init+0x9c>)
 8003622:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003626:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003628:	4b18      	ldr	r3, [pc, #96]	; (800368c <MX_TIM15_Init+0x9c>)
 800362a:	2200      	movs	r2, #0
 800362c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800362e:	4b17      	ldr	r3, [pc, #92]	; (800368c <MX_TIM15_Init+0x9c>)
 8003630:	2200      	movs	r2, #0
 8003632:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003634:	4b15      	ldr	r3, [pc, #84]	; (800368c <MX_TIM15_Init+0x9c>)
 8003636:	2200      	movs	r2, #0
 8003638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800363a:	4814      	ldr	r0, [pc, #80]	; (800368c <MX_TIM15_Init+0x9c>)
 800363c:	f006 ff78 	bl	800a530 <HAL_TIM_Base_Init>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003646:	f7fe fecb 	bl	80023e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800364a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800364e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003650:	f107 0310 	add.w	r3, r7, #16
 8003654:	4619      	mov	r1, r3
 8003656:	480d      	ldr	r0, [pc, #52]	; (800368c <MX_TIM15_Init+0x9c>)
 8003658:	f008 f846 	bl	800b6e8 <HAL_TIM_ConfigClockSource>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8003662:	f7fe febd 	bl	80023e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4806      	ldr	r0, [pc, #24]	; (800368c <MX_TIM15_Init+0x9c>)
 8003674:	f008 feac 	bl	800c3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800367e:	f7fe feaf 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003682:	bf00      	nop
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	240006c8 	.word	0x240006c8
 8003690:	40014000 	.word	0x40014000

08003694 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b092      	sub	sp, #72	; 0x48
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b4:	d136      	bne.n	8003724 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036b6:	4b92      	ldr	r3, [pc, #584]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80036b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036bc:	4a90      	ldr	r2, [pc, #576]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036c6:	4b8e      	ldr	r3, [pc, #568]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80036c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d4:	4b8a      	ldr	r3, [pc, #552]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80036d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036da:	4a89      	ldr	r2, [pc, #548]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036e4:	4b86      	ldr	r3, [pc, #536]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80036e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = E_CountPap1_Pin;
 80036f2:	2320      	movs	r3, #32
 80036f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f6:	2302      	movs	r3, #2
 80036f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036fa:	2302      	movs	r3, #2
 80036fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fe:	2300      	movs	r3, #0
 8003700:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003702:	2301      	movs	r3, #1
 8003704:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPap1_GPIO_Port, &GPIO_InitStruct);
 8003706:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800370a:	4619      	mov	r1, r3
 800370c:	487d      	ldr	r0, [pc, #500]	; (8003904 <HAL_TIM_Base_MspInit+0x270>)
 800370e:	f004 f9b7 	bl	8007a80 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	2101      	movs	r1, #1
 8003716:	201c      	movs	r0, #28
 8003718:	f003 fc0b 	bl	8006f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800371c:	201c      	movs	r0, #28
 800371e:	f003 fc22 	bl	8006f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003722:	e0e8      	b.n	80038f6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a77      	ldr	r2, [pc, #476]	; (8003908 <HAL_TIM_Base_MspInit+0x274>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d136      	bne.n	800379c <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800372e:	4b74      	ldr	r3, [pc, #464]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 8003730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003734:	4a72      	ldr	r2, [pc, #456]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 8003736:	f043 0302 	orr.w	r3, r3, #2
 800373a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800373e:	4b70      	ldr	r3, [pc, #448]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 8003740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374c:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 800374e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003752:	4a6b      	ldr	r2, [pc, #428]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 800375e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = E_CountPaP2_Pin;
 800376a:	2340      	movs	r3, #64	; 0x40
 800376c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003772:	2302      	movs	r3, #2
 8003774:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	2300      	movs	r3, #0
 8003778:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800377a:	2302      	movs	r3, #2
 800377c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP2_GPIO_Port, &GPIO_InitStruct);
 800377e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003782:	4619      	mov	r1, r3
 8003784:	485f      	ldr	r0, [pc, #380]	; (8003904 <HAL_TIM_Base_MspInit+0x270>)
 8003786:	f004 f97b 	bl	8007a80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	2101      	movs	r1, #1
 800378e:	201d      	movs	r0, #29
 8003790:	f003 fbcf 	bl	8006f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003794:	201d      	movs	r0, #29
 8003796:	f003 fbe6 	bl	8006f66 <HAL_NVIC_EnableIRQ>
}
 800379a:	e0ac      	b.n	80038f6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a5a      	ldr	r2, [pc, #360]	; (800390c <HAL_TIM_Base_MspInit+0x278>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d137      	bne.n	8003816 <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037a6:	4b56      	ldr	r3, [pc, #344]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80037a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ac:	4a54      	ldr	r2, [pc, #336]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037b6:	4b52      	ldr	r3, [pc, #328]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80037b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	623b      	str	r3, [r7, #32]
 80037c2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037c4:	4b4e      	ldr	r3, [pc, #312]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80037c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ca:	4a4d      	ldr	r2, [pc, #308]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80037cc:	f043 0308 	orr.w	r3, r3, #8
 80037d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037d4:	4b4a      	ldr	r3, [pc, #296]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80037d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = E_CountPaP3_Pin;
 80037e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e8:	2302      	movs	r3, #2
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037ec:	2302      	movs	r3, #2
 80037ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f0:	2300      	movs	r3, #0
 80037f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037f4:	2302      	movs	r3, #2
 80037f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP3_GPIO_Port, &GPIO_InitStruct);
 80037f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037fc:	4619      	mov	r1, r3
 80037fe:	4844      	ldr	r0, [pc, #272]	; (8003910 <HAL_TIM_Base_MspInit+0x27c>)
 8003800:	f004 f93e 	bl	8007a80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003804:	2200      	movs	r2, #0
 8003806:	2101      	movs	r1, #1
 8003808:	201e      	movs	r0, #30
 800380a:	f003 fb92 	bl	8006f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800380e:	201e      	movs	r0, #30
 8003810:	f003 fba9 	bl	8006f66 <HAL_NVIC_EnableIRQ>
}
 8003814:	e06f      	b.n	80038f6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a3e      	ldr	r2, [pc, #248]	; (8003914 <HAL_TIM_Base_MspInit+0x280>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10f      	bne.n	8003840 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003820:	4b37      	ldr	r3, [pc, #220]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 8003822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003826:	4a36      	ldr	r2, [pc, #216]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 8003828:	f043 0308 	orr.w	r3, r3, #8
 800382c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003830:	4b33      	ldr	r3, [pc, #204]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 8003832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	69bb      	ldr	r3, [r7, #24]
}
 800383e:	e05a      	b.n	80038f6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a34      	ldr	r2, [pc, #208]	; (8003918 <HAL_TIM_Base_MspInit+0x284>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10f      	bne.n	800386a <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800384a:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 800384c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003850:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 8003852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003856:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800385a:	4b29      	ldr	r3, [pc, #164]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 800385c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	697b      	ldr	r3, [r7, #20]
}
 8003868:	e045      	b.n	80038f6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a2b      	ldr	r2, [pc, #172]	; (800391c <HAL_TIM_Base_MspInit+0x288>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d10f      	bne.n	8003894 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 8003876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800387a:	4a21      	ldr	r2, [pc, #132]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 800387c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003880:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003884:	4b1e      	ldr	r3, [pc, #120]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 8003886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
}
 8003892:	e030      	b.n	80038f6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a21      	ldr	r2, [pc, #132]	; (8003920 <HAL_TIM_Base_MspInit+0x28c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d10f      	bne.n	80038be <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800389e:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80038a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a4:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80038a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ae:	4b14      	ldr	r3, [pc, #80]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80038b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
}
 80038bc:	e01b      	b.n	80038f6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a18      	ldr	r2, [pc, #96]	; (8003924 <HAL_TIM_Base_MspInit+0x290>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d116      	bne.n	80038f6 <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80038c8:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80038ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ce:	4a0c      	ldr	r2, [pc, #48]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038d8:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_TIM_Base_MspInit+0x26c>)
 80038da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 80038e6:	2200      	movs	r2, #0
 80038e8:	2101      	movs	r1, #1
 80038ea:	2074      	movs	r0, #116	; 0x74
 80038ec:	f003 fb21 	bl	8006f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80038f0:	2074      	movs	r0, #116	; 0x74
 80038f2:	f003 fb38 	bl	8006f66 <HAL_NVIC_EnableIRQ>
}
 80038f6:	bf00      	nop
 80038f8:	3748      	adds	r7, #72	; 0x48
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	58024400 	.word	0x58024400
 8003904:	58020000 	.word	0x58020000
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	58020c00 	.word	0x58020c00
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40001800 	.word	0x40001800
 800391c:	40001c00 	.word	0x40001c00
 8003920:	40002000 	.word	0x40002000
 8003924:	40014000 	.word	0x40014000

08003928 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a39      	ldr	r2, [pc, #228]	; (8003a2c <HAL_TIM_MspPostInit+0x104>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d120      	bne.n	800398c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394a:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <HAL_TIM_MspPostInit+0x108>)
 800394c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003950:	4a37      	ldr	r2, [pc, #220]	; (8003a30 <HAL_TIM_MspPostInit+0x108>)
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800395a:	4b35      	ldr	r3, [pc, #212]	; (8003a30 <HAL_TIM_MspPostInit+0x108>)
 800395c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8003968:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800396c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	2302      	movs	r3, #2
 8003970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003972:	2302      	movs	r3, #2
 8003974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800397a:	2302      	movs	r3, #2
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 800397e:	f107 0314 	add.w	r3, r7, #20
 8003982:	4619      	mov	r1, r3
 8003984:	482b      	ldr	r0, [pc, #172]	; (8003a34 <HAL_TIM_MspPostInit+0x10c>)
 8003986:	f004 f87b 	bl	8007a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800398a:	e04a      	b.n	8003a22 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <HAL_TIM_MspPostInit+0x110>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d120      	bne.n	80039d8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003996:	4b26      	ldr	r3, [pc, #152]	; (8003a30 <HAL_TIM_MspPostInit+0x108>)
 8003998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800399c:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <HAL_TIM_MspPostInit+0x108>)
 800399e:	f043 0320 	orr.w	r3, r3, #32
 80039a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039a6:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <HAL_TIM_MspPostInit+0x108>)
 80039a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 80039b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ba:	2302      	movs	r3, #2
 80039bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039be:	2302      	movs	r3, #2
 80039c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c2:	2300      	movs	r3, #0
 80039c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80039c6:	2309      	movs	r3, #9
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	4619      	mov	r1, r3
 80039d0:	481a      	ldr	r0, [pc, #104]	; (8003a3c <HAL_TIM_MspPostInit+0x114>)
 80039d2:	f004 f855 	bl	8007a80 <HAL_GPIO_Init>
}
 80039d6:	e024      	b.n	8003a22 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <HAL_TIM_MspPostInit+0x118>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d11f      	bne.n	8003a22 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <HAL_TIM_MspPostInit+0x108>)
 80039e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e8:	4a11      	ldr	r2, [pc, #68]	; (8003a30 <HAL_TIM_MspPostInit+0x108>)
 80039ea:	f043 0320 	orr.w	r3, r3, #32
 80039ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <HAL_TIM_MspPostInit+0x108>)
 80039f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8003a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a06:	2302      	movs	r3, #2
 8003a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003a12:	2309      	movs	r3, #9
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 8003a16:	f107 0314 	add.w	r3, r7, #20
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4807      	ldr	r0, [pc, #28]	; (8003a3c <HAL_TIM_MspPostInit+0x114>)
 8003a1e:	f004 f82f 	bl	8007a80 <HAL_GPIO_Init>
}
 8003a22:	bf00      	nop
 8003a24:	3728      	adds	r7, #40	; 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40001800 	.word	0x40001800
 8003a30:	58024400 	.word	0x58024400
 8003a34:	58020400 	.word	0x58020400
 8003a38:	40001c00 	.word	0x40001c00
 8003a3c:	58021400 	.word	0x58021400
 8003a40:	40002000 	.word	0x40002000
 8003a44:	00000000 	.word	0x00000000

08003a48 <inicializarTrayectoria>:
double Vm, VfHip1, VfHip3;
double tfHip1, tiHip2, tfHip2, tiHip3, tfHip3, tiHip4, TiempoTotX, tfHip4;
double DVHip, Aaux1, ViHip2, XiHip2, Aaux, XiHip3, ViHip4, XiHip4;


void inicializarTrayectoria(double XiHip1, double XfHip4, double V0Hip, double Vf, double Vmax, double Amax, double Jerk) {	//(Vinicio , Vfin , Vmaxima, Amaxima, jerk)
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	ed2d 8b04 	vpush	{d8-d9}
 8003a4e:	b090      	sub	sp, #64	; 0x40
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8003a56:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8003a5a:	ed87 2b08 	vstr	d2, [r7, #32]
 8003a5e:	ed87 3b06 	vstr	d3, [r7, #24]
 8003a62:	ed87 4b04 	vstr	d4, [r7, #16]
 8003a66:	ed87 5b02 	vstr	d5, [r7, #8]
 8003a6a:	ed87 6b00 	vstr	d6, [r7]

	if (XfHip4 < XiHip1) {
 8003a6e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8003a72:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003a76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	d519      	bpl.n	8003ab4 <inicializarTrayectoria+0x6c>
		Ai = -Amax;
 8003a80:	ed97 7b02 	vldr	d7, [r7, #8]
 8003a84:	eeb1 7b47 	vneg.f64	d7, d7
 8003a88:	4b7e      	ldr	r3, [pc, #504]	; (8003c84 <inicializarTrayectoria+0x23c>)
 8003a8a:	ed83 7b00 	vstr	d7, [r3]
		Af = +Amax;
 8003a8e:	497e      	ldr	r1, [pc, #504]	; (8003c88 <inicializarTrayectoria+0x240>)
 8003a90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a94:	e9c1 2300 	strd	r2, r3, [r1]
		Vm = -Vmax;
 8003a98:	ed97 7b04 	vldr	d7, [r7, #16]
 8003a9c:	eeb1 7b47 	vneg.f64	d7, d7
 8003aa0:	4b7a      	ldr	r3, [pc, #488]	; (8003c8c <inicializarTrayectoria+0x244>)
 8003aa2:	ed83 7b00 	vstr	d7, [r3]
		Jerk = -Jerk;
 8003aa6:	ed97 7b00 	vldr	d7, [r7]
 8003aaa:	eeb1 7b47 	vneg.f64	d7, d7
 8003aae:	ed87 7b00 	vstr	d7, [r7]
 8003ab2:	e019      	b.n	8003ae8 <inicializarTrayectoria+0xa0>
	} else if (XfHip4 > XiHip1) {
 8003ab4:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8003ab8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003abc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac4:	dd10      	ble.n	8003ae8 <inicializarTrayectoria+0xa0>
		Ai = Amax;
 8003ac6:	496f      	ldr	r1, [pc, #444]	; (8003c84 <inicializarTrayectoria+0x23c>)
 8003ac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003acc:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8003ad0:	ed97 7b02 	vldr	d7, [r7, #8]
 8003ad4:	eeb1 7b47 	vneg.f64	d7, d7
 8003ad8:	4b6b      	ldr	r3, [pc, #428]	; (8003c88 <inicializarTrayectoria+0x240>)
 8003ada:	ed83 7b00 	vstr	d7, [r3]
		Vm = Vmax;
 8003ade:	496b      	ldr	r1, [pc, #428]	; (8003c8c <inicializarTrayectoria+0x244>)
 8003ae0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ae4:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (V0Hip > Vmax) {
 8003ae8:	ed97 6b08 	vldr	d6, [r7, #32]
 8003aec:	ed97 7b04 	vldr	d7, [r7, #16]
 8003af0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af8:	dd0b      	ble.n	8003b12 <inicializarTrayectoria+0xca>
		Ai = -Amax;
 8003afa:	ed97 7b02 	vldr	d7, [r7, #8]
 8003afe:	eeb1 7b47 	vneg.f64	d7, d7
 8003b02:	4b60      	ldr	r3, [pc, #384]	; (8003c84 <inicializarTrayectoria+0x23c>)
 8003b04:	ed83 7b00 	vstr	d7, [r3]
		Af = Amax;
 8003b08:	495f      	ldr	r1, [pc, #380]	; (8003c88 <inicializarTrayectoria+0x240>)
 8003b0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b0e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (Vf > Vmax) {
 8003b12:	ed97 6b06 	vldr	d6, [r7, #24]
 8003b16:	ed97 7b04 	vldr	d7, [r7, #16]
 8003b1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b22:	dd0b      	ble.n	8003b3c <inicializarTrayectoria+0xf4>
		Ai = Amax;
 8003b24:	4957      	ldr	r1, [pc, #348]	; (8003c84 <inicializarTrayectoria+0x23c>)
 8003b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b2a:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8003b2e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003b32:	eeb1 7b47 	vneg.f64	d7, d7
 8003b36:	4b54      	ldr	r3, [pc, #336]	; (8003c88 <inicializarTrayectoria+0x240>)
 8003b38:	ed83 7b00 	vstr	d7, [r3]
	}

	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003b42:	f000 bd05 	b.w	8004550 <inicializarTrayectoria+0xb08>
		DVHip = (Ai * Ai) / (2 * Jerk) * 2;
 8003b46:	4b4f      	ldr	r3, [pc, #316]	; (8003c84 <inicializarTrayectoria+0x23c>)
 8003b48:	ed93 6b00 	vldr	d6, [r3]
 8003b4c:	4b4d      	ldr	r3, [pc, #308]	; (8003c84 <inicializarTrayectoria+0x23c>)
 8003b4e:	ed93 7b00 	vldr	d7, [r3]
 8003b52:	ee26 5b07 	vmul.f64	d5, d6, d7
 8003b56:	ed97 7b00 	vldr	d7, [r7]
 8003b5a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003b5e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003b62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003b66:	4b4a      	ldr	r3, [pc, #296]	; (8003c90 <inicializarTrayectoria+0x248>)
 8003b68:	ed83 7b00 	vstr	d7, [r3]

		if (fabs(DVHip) > fabs(Vm - V0Hip)) { // Para cuando la velocidad inicial es muy cercana a la maxima
 8003b6c:	4b48      	ldr	r3, [pc, #288]	; (8003c90 <inicializarTrayectoria+0x248>)
 8003b6e:	ed93 7b00 	vldr	d7, [r3]
 8003b72:	eeb0 6bc7 	vabs.f64	d6, d7
 8003b76:	4b45      	ldr	r3, [pc, #276]	; (8003c8c <inicializarTrayectoria+0x244>)
 8003b78:	ed93 5b00 	vldr	d5, [r3]
 8003b7c:	ed97 7b08 	vldr	d7, [r7, #32]
 8003b80:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003b84:	eeb0 7bc7 	vabs.f64	d7, d7
 8003b88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b90:	dd35      	ble.n	8003bfe <inicializarTrayectoria+0x1b6>
			if (fabs(Vm - V0Hip) != 0) {
 8003b92:	4b3e      	ldr	r3, [pc, #248]	; (8003c8c <inicializarTrayectoria+0x244>)
 8003b94:	ed93 6b00 	vldr	d6, [r3]
 8003b98:	ed97 7b08 	vldr	d7, [r7, #32]
 8003b9c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ba0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba8:	d029      	beq.n	8003bfe <inicializarTrayectoria+0x1b6>
				Aaux1 = ((Ai) / fabs(Ai)) * sqrt(fabs(Vm - V0Hip) * fabs(Jerk));
 8003baa:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <inicializarTrayectoria+0x23c>)
 8003bac:	ed93 6b00 	vldr	d6, [r3]
 8003bb0:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <inicializarTrayectoria+0x23c>)
 8003bb2:	ed93 7b00 	vldr	d7, [r3]
 8003bb6:	eeb0 7bc7 	vabs.f64	d7, d7
 8003bba:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8003bbe:	4b33      	ldr	r3, [pc, #204]	; (8003c8c <inicializarTrayectoria+0x244>)
 8003bc0:	ed93 6b00 	vldr	d6, [r3]
 8003bc4:	ed97 7b08 	vldr	d7, [r7, #32]
 8003bc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003bcc:	eeb0 6bc7 	vabs.f64	d6, d7
 8003bd0:	ed97 7b00 	vldr	d7, [r7]
 8003bd4:	eeb0 7bc7 	vabs.f64	d7, d7
 8003bd8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003bdc:	eeb0 0b47 	vmov.f64	d0, d7
 8003be0:	f00e f94a 	bl	8011e78 <sqrt>
 8003be4:	eeb0 7b40 	vmov.f64	d7, d0
 8003be8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003bec:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <inicializarTrayectoria+0x24c>)
 8003bee:	ed83 7b00 	vstr	d7, [r3]
				Ai = Aaux1;
 8003bf2:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <inicializarTrayectoria+0x24c>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	4922      	ldr	r1, [pc, #136]	; (8003c84 <inicializarTrayectoria+0x23c>)
 8003bfa:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}

		if (fabs(Vm - V0Hip) == 0) { // Para cuando la velocidad inicial es igual a la maxima
 8003bfe:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <inicializarTrayectoria+0x244>)
 8003c00:	ed93 6b00 	vldr	d6, [r3]
 8003c04:	ed97 7b08 	vldr	d7, [r7, #32]
 8003c08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c14:	d150      	bne.n	8003cb8 <inicializarTrayectoria+0x270>
			a3Hip1 = 0;
 8003c16:	4920      	ldr	r1, [pc, #128]	; (8003c98 <inicializarTrayectoria+0x250>)
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9c1 2300 	strd	r2, r3, [r1]
			a2Hip1 = 0;
 8003c24:	491d      	ldr	r1, [pc, #116]	; (8003c9c <inicializarTrayectoria+0x254>)
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9c1 2300 	strd	r2, r3, [r1]
			a1Hip1 = 0;
 8003c32:	491b      	ldr	r1, [pc, #108]	; (8003ca0 <inicializarTrayectoria+0x258>)
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip1 = 0;
 8003c40:	4918      	ldr	r1, [pc, #96]	; (8003ca4 <inicializarTrayectoria+0x25c>)
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = 0;
 8003c4e:	4916      	ldr	r1, [pc, #88]	; (8003ca8 <inicializarTrayectoria+0x260>)
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip2 = 0;
 8003c5c:	4913      	ldr	r1, [pc, #76]	; (8003cac <inicializarTrayectoria+0x264>)
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip2 = 0;
 8003c6a:	4911      	ldr	r1, [pc, #68]	; (8003cb0 <inicializarTrayectoria+0x268>)
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = XiHip1;
 8003c78:	490e      	ldr	r1, [pc, #56]	; (8003cb4 <inicializarTrayectoria+0x26c>)
 8003c7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c7e:	e9c1 2300 	strd	r2, r3, [r1]
 8003c82:	e195      	b.n	8003fb0 <inicializarTrayectoria+0x568>
 8003c84:	24000a48 	.word	0x24000a48
 8003c88:	24000a50 	.word	0x24000a50
 8003c8c:	24000af8 	.word	0x24000af8
 8003c90:	24000b50 	.word	0x24000b50
 8003c94:	24000b58 	.word	0x24000b58
 8003c98:	24000a70 	.word	0x24000a70
 8003c9c:	24000a68 	.word	0x24000a68
 8003ca0:	24000a60 	.word	0x24000a60
 8003ca4:	24000a58 	.word	0x24000a58
 8003ca8:	24000b10 	.word	0x24000b10
 8003cac:	24000b18 	.word	0x24000b18
 8003cb0:	24000b20 	.word	0x24000b20
 8003cb4:	24000ae0 	.word	0x24000ae0
		} else {
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 1
			a3Hip1 = (Jerk / 6);
 8003cb8:	ed97 6b00 	vldr	d6, [r7]
 8003cbc:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8003cc0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003cc4:	4bcf      	ldr	r3, [pc, #828]	; (8004004 <inicializarTrayectoria+0x5bc>)
 8003cc6:	ed83 7b00 	vstr	d7, [r3]
			a2Hip1 = 0;
 8003cca:	49cf      	ldr	r1, [pc, #828]	; (8004008 <inicializarTrayectoria+0x5c0>)
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = ((Ai / (6 * a3Hip1)));
 8003cd8:	4bcc      	ldr	r3, [pc, #816]	; (800400c <inicializarTrayectoria+0x5c4>)
 8003cda:	ed93 5b00 	vldr	d5, [r3]
 8003cde:	4bc9      	ldr	r3, [pc, #804]	; (8004004 <inicializarTrayectoria+0x5bc>)
 8003ce0:	ed93 7b00 	vldr	d7, [r3]
 8003ce4:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8003ce8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003cec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003cf0:	4bc7      	ldr	r3, [pc, #796]	; (8004010 <inicializarTrayectoria+0x5c8>)
 8003cf2:	ed83 7b00 	vstr	d7, [r3]
			a1Hip1 = V0Hip;
 8003cf6:	49c7      	ldr	r1, [pc, #796]	; (8004014 <inicializarTrayectoria+0x5cc>)
 8003cf8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cfc:	e9c1 2300 	strd	r2, r3, [r1]
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8003d00:	4bc1      	ldr	r3, [pc, #772]	; (8004008 <inicializarTrayectoria+0x5c0>)
 8003d02:	ed93 7b00 	vldr	d7, [r3]
 8003d06:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003d0a:	4bc1      	ldr	r3, [pc, #772]	; (8004010 <inicializarTrayectoria+0x5c8>)
 8003d0c:	ed93 7b00 	vldr	d7, [r3]
 8003d10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003d14:	4bbf      	ldr	r3, [pc, #764]	; (8004014 <inicializarTrayectoria+0x5cc>)
 8003d16:	ed93 7b00 	vldr	d7, [r3]
 8003d1a:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 3 * a3Hip1 * pow(tfHip1, 2);
 8003d1e:	4bb9      	ldr	r3, [pc, #740]	; (8004004 <inicializarTrayectoria+0x5bc>)
 8003d20:	ed93 7b00 	vldr	d7, [r3]
 8003d24:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003d28:	ee27 9b06 	vmul.f64	d9, d7, d6
 8003d2c:	4bb8      	ldr	r3, [pc, #736]	; (8004010 <inicializarTrayectoria+0x5c8>)
 8003d2e:	ed93 7b00 	vldr	d7, [r3]
 8003d32:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003d36:	eeb0 0b47 	vmov.f64	d0, d7
 8003d3a:	f00d fe1d 	bl	8011978 <pow>
 8003d3e:	eeb0 7b40 	vmov.f64	d7, d0
 8003d42:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003d46:	ee38 7b07 	vadd.f64	d7, d8, d7
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8003d4a:	4bb3      	ldr	r3, [pc, #716]	; (8004018 <inicializarTrayectoria+0x5d0>)
 8003d4c:	ed83 7b00 	vstr	d7, [r3]
			a0Hip1 = XiHip1;
 8003d50:	49b2      	ldr	r1, [pc, #712]	; (800401c <inicializarTrayectoria+0x5d4>)
 8003d52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d56:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8003d5a:	4bae      	ldr	r3, [pc, #696]	; (8004014 <inicializarTrayectoria+0x5cc>)
 8003d5c:	ed93 6b00 	vldr	d6, [r3]
 8003d60:	4bab      	ldr	r3, [pc, #684]	; (8004010 <inicializarTrayectoria+0x5c8>)
 8003d62:	ed93 7b00 	vldr	d7, [r3]
 8003d66:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003d6a:	4bac      	ldr	r3, [pc, #688]	; (800401c <inicializarTrayectoria+0x5d4>)
 8003d6c:	ed93 7b00 	vldr	d7, [r3]
 8003d70:	ee36 8b07 	vadd.f64	d8, d6, d7
 8003d74:	4ba6      	ldr	r3, [pc, #664]	; (8004010 <inicializarTrayectoria+0x5c8>)
 8003d76:	ed93 7b00 	vldr	d7, [r3]
 8003d7a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003d7e:	eeb0 0b47 	vmov.f64	d0, d7
 8003d82:	f00d fdf9 	bl	8011978 <pow>
 8003d86:	eeb0 6b40 	vmov.f64	d6, d0
 8003d8a:	4b9f      	ldr	r3, [pc, #636]	; (8004008 <inicializarTrayectoria+0x5c0>)
 8003d8c:	ed93 7b00 	vldr	d7, [r3]
 8003d90:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d94:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip1 * pow(tfHip1, 3);
 8003d98:	4b9d      	ldr	r3, [pc, #628]	; (8004010 <inicializarTrayectoria+0x5c8>)
 8003d9a:	ed93 7b00 	vldr	d7, [r3]
 8003d9e:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8003da2:	eeb0 0b47 	vmov.f64	d0, d7
 8003da6:	f00d fde7 	bl	8011978 <pow>
 8003daa:	eeb0 6b40 	vmov.f64	d6, d0
 8003dae:	4b95      	ldr	r3, [pc, #596]	; (8004004 <inicializarTrayectoria+0x5bc>)
 8003db0:	ed93 7b00 	vldr	d7, [r3]
 8003db4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003db8:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8003dbc:	4b98      	ldr	r3, [pc, #608]	; (8004020 <inicializarTrayectoria+0x5d8>)
 8003dbe:	ed83 7b00 	vstr	d7, [r3]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 1
			a3Hip2 = (-Jerk / 6);
 8003dc2:	ed97 7b00 	vldr	d7, [r7]
 8003dc6:	eeb1 6b47 	vneg.f64	d6, d7
 8003dca:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8003dce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003dd2:	4b94      	ldr	r3, [pc, #592]	; (8004024 <inicializarTrayectoria+0x5dc>)
 8003dd4:	ed83 7b00 	vstr	d7, [r3]
			a2Hip2 = Ai / 2;
 8003dd8:	4b8c      	ldr	r3, [pc, #560]	; (800400c <inicializarTrayectoria+0x5c4>)
 8003dda:	ed93 6b00 	vldr	d6, [r3]
 8003dde:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003de2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003de6:	4b90      	ldr	r3, [pc, #576]	; (8004028 <inicializarTrayectoria+0x5e0>)
 8003de8:	ed83 7b00 	vstr	d7, [r3]
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8003dec:	4b8f      	ldr	r3, [pc, #572]	; (800402c <inicializarTrayectoria+0x5e4>)
 8003dee:	ed93 6b00 	vldr	d6, [r3]
 8003df2:	4b8d      	ldr	r3, [pc, #564]	; (8004028 <inicializarTrayectoria+0x5e0>)
 8003df4:	ed93 7b00 	vldr	d7, [r3]
 8003df8:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003dfc:	4b83      	ldr	r3, [pc, #524]	; (800400c <inicializarTrayectoria+0x5c4>)
 8003dfe:	ed93 3b00 	vldr	d3, [r3]
 8003e02:	ed97 4b00 	vldr	d4, [r7]
 8003e06:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003e0a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e0e:	ee36 6b47 	vsub.f64	d6, d6, d7
					- 3 * a3Hip2 * (Ai / Jerk) * (Ai / Jerk);
 8003e12:	4b84      	ldr	r3, [pc, #528]	; (8004024 <inicializarTrayectoria+0x5dc>)
 8003e14:	ed93 7b00 	vldr	d7, [r3]
 8003e18:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003e1c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003e20:	4b7a      	ldr	r3, [pc, #488]	; (800400c <inicializarTrayectoria+0x5c4>)
 8003e22:	ed93 3b00 	vldr	d3, [r3]
 8003e26:	ed97 4b00 	vldr	d4, [r7]
 8003e2a:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003e2e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003e32:	4b76      	ldr	r3, [pc, #472]	; (800400c <inicializarTrayectoria+0x5c4>)
 8003e34:	ed93 3b00 	vldr	d3, [r3]
 8003e38:	ed97 4b00 	vldr	d4, [r7]
 8003e3c:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003e40:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e44:	ee36 7b47 	vsub.f64	d7, d6, d7
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8003e48:	4b79      	ldr	r3, [pc, #484]	; (8004030 <inicializarTrayectoria+0x5e8>)
 8003e4a:	ed83 7b00 	vstr	d7, [r3]
			tiHip2 = ((ViHip2 - VfHip1) / Ai) + tfHip1;
 8003e4e:	4b78      	ldr	r3, [pc, #480]	; (8004030 <inicializarTrayectoria+0x5e8>)
 8003e50:	ed93 6b00 	vldr	d6, [r3]
 8003e54:	4b70      	ldr	r3, [pc, #448]	; (8004018 <inicializarTrayectoria+0x5d0>)
 8003e56:	ed93 7b00 	vldr	d7, [r3]
 8003e5a:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003e5e:	4b6b      	ldr	r3, [pc, #428]	; (800400c <inicializarTrayectoria+0x5c4>)
 8003e60:	ed93 7b00 	vldr	d7, [r3]
 8003e64:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003e68:	4b69      	ldr	r3, [pc, #420]	; (8004010 <inicializarTrayectoria+0x5c8>)
 8003e6a:	ed93 7b00 	vldr	d7, [r3]
 8003e6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e72:	4b70      	ldr	r3, [pc, #448]	; (8004034 <inicializarTrayectoria+0x5ec>)
 8003e74:	ed83 7b00 	vstr	d7, [r3]
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8003e78:	4b64      	ldr	r3, [pc, #400]	; (800400c <inicializarTrayectoria+0x5c4>)
 8003e7a:	ed93 7b00 	vldr	d7, [r3]
 8003e7e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8003e82:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8003e86:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <inicializarTrayectoria+0x5e8>)
 8003e88:	ed93 6b00 	vldr	d6, [r3]
 8003e8c:	4b62      	ldr	r3, [pc, #392]	; (8004018 <inicializarTrayectoria+0x5d0>)
 8003e8e:	ed93 7b00 	vldr	d7, [r3]
 8003e92:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003e96:	4b5d      	ldr	r3, [pc, #372]	; (800400c <inicializarTrayectoria+0x5c4>)
 8003e98:	ed93 7b00 	vldr	d7, [r3]
 8003e9c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8003ea0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003ea4:	eeb0 0b45 	vmov.f64	d0, d5
 8003ea8:	f00d fd66 	bl	8011978 <pow>
 8003eac:	eeb0 7b40 	vmov.f64	d7, d0
 8003eb0:	ee28 6b07 	vmul.f64	d6, d8, d7
 8003eb4:	4b5a      	ldr	r3, [pc, #360]	; (8004020 <inicializarTrayectoria+0x5d8>)
 8003eb6:	ed93 7b00 	vldr	d7, [r3]
 8003eba:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ VfHip1 * ((ViHip2 - VfHip1) / Ai);    //x=(Cte/2)*t^2+Vi*t
 8003ebe:	4b5c      	ldr	r3, [pc, #368]	; (8004030 <inicializarTrayectoria+0x5e8>)
 8003ec0:	ed93 5b00 	vldr	d5, [r3]
 8003ec4:	4b54      	ldr	r3, [pc, #336]	; (8004018 <inicializarTrayectoria+0x5d0>)
 8003ec6:	ed93 7b00 	vldr	d7, [r3]
 8003eca:	ee35 4b47 	vsub.f64	d4, d5, d7
 8003ece:	4b4f      	ldr	r3, [pc, #316]	; (800400c <inicializarTrayectoria+0x5c4>)
 8003ed0:	ed93 7b00 	vldr	d7, [r3]
 8003ed4:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8003ed8:	4b4f      	ldr	r3, [pc, #316]	; (8004018 <inicializarTrayectoria+0x5d0>)
 8003eda:	ed93 7b00 	vldr	d7, [r3]
 8003ede:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ee2:	ee36 7b07 	vadd.f64	d7, d6, d7
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8003ee6:	4b54      	ldr	r3, [pc, #336]	; (8004038 <inicializarTrayectoria+0x5f0>)
 8003ee8:	ed83 7b00 	vstr	d7, [r3]
					//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 2
			tfHip2 = fabs(Ai / (-Jerk)) + tiHip2;
 8003eec:	4b47      	ldr	r3, [pc, #284]	; (800400c <inicializarTrayectoria+0x5c4>)
 8003eee:	ed93 7b00 	vldr	d7, [r3]
 8003ef2:	eeb1 5b47 	vneg.f64	d5, d7
 8003ef6:	ed97 6b00 	vldr	d6, [r7]
 8003efa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003efe:	eeb0 6bc7 	vabs.f64	d6, d7
 8003f02:	4b4c      	ldr	r3, [pc, #304]	; (8004034 <inicializarTrayectoria+0x5ec>)
 8003f04:	ed93 7b00 	vldr	d7, [r3]
 8003f08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f0c:	4b4b      	ldr	r3, [pc, #300]	; (800403c <inicializarTrayectoria+0x5f4>)
 8003f0e:	ed83 7b00 	vstr	d7, [r3]
			a1Hip2 = ViHip2;
 8003f12:	4b47      	ldr	r3, [pc, #284]	; (8004030 <inicializarTrayectoria+0x5e8>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	4949      	ldr	r1, [pc, #292]	; (8004040 <inicializarTrayectoria+0x5f8>)
 8003f1a:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip2 = XiHip2;
 8003f1e:	4b46      	ldr	r3, [pc, #280]	; (8004038 <inicializarTrayectoria+0x5f0>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	4947      	ldr	r1, [pc, #284]	; (8004044 <inicializarTrayectoria+0x5fc>)
 8003f26:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 8003f2a:	4b44      	ldr	r3, [pc, #272]	; (800403c <inicializarTrayectoria+0x5f4>)
 8003f2c:	ed93 6b00 	vldr	d6, [r3]
 8003f30:	4b40      	ldr	r3, [pc, #256]	; (8004034 <inicializarTrayectoria+0x5ec>)
 8003f32:	ed93 7b00 	vldr	d7, [r3]
 8003f36:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003f3a:	4b41      	ldr	r3, [pc, #260]	; (8004040 <inicializarTrayectoria+0x5f8>)
 8003f3c:	ed93 7b00 	vldr	d7, [r3]
 8003f40:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003f44:	4b3f      	ldr	r3, [pc, #252]	; (8004044 <inicializarTrayectoria+0x5fc>)
 8003f46:	ed93 7b00 	vldr	d7, [r3]
 8003f4a:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ a2Hip2 * pow((tfHip2 - tiHip2), 2.0)
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <inicializarTrayectoria+0x5f4>)
 8003f50:	ed93 6b00 	vldr	d6, [r3]
 8003f54:	4b37      	ldr	r3, [pc, #220]	; (8004034 <inicializarTrayectoria+0x5ec>)
 8003f56:	ed93 7b00 	vldr	d7, [r3]
 8003f5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003f5e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003f62:	eeb0 0b47 	vmov.f64	d0, d7
 8003f66:	f00d fd07 	bl	8011978 <pow>
 8003f6a:	eeb0 6b40 	vmov.f64	d6, d0
 8003f6e:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <inicializarTrayectoria+0x5e0>)
 8003f70:	ed93 7b00 	vldr	d7, [r3]
 8003f74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003f78:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip2 * pow((tfHip2 - tiHip2), 3.0);
 8003f7c:	4b2f      	ldr	r3, [pc, #188]	; (800403c <inicializarTrayectoria+0x5f4>)
 8003f7e:	ed93 6b00 	vldr	d6, [r3]
 8003f82:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <inicializarTrayectoria+0x5ec>)
 8003f84:	ed93 7b00 	vldr	d7, [r3]
 8003f88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003f8c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8003f90:	eeb0 0b47 	vmov.f64	d0, d7
 8003f94:	f00d fcf0 	bl	8011978 <pow>
 8003f98:	eeb0 6b40 	vmov.f64	d6, d0
 8003f9c:	4b21      	ldr	r3, [pc, #132]	; (8004024 <inicializarTrayectoria+0x5dc>)
 8003f9e:	ed93 7b00 	vldr	d7, [r3]
 8003fa2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003fa6:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 8003faa:	4b27      	ldr	r3, [pc, #156]	; (8004048 <inicializarTrayectoria+0x600>)
 8003fac:	ed83 7b00 	vstr	d7, [r3]
		}

		// Condiciones borde:    Se calcula de adelante hacia atras
		DVHip = pow(Af, 2) / (2 * Jerk) * 2;
 8003fb0:	4b26      	ldr	r3, [pc, #152]	; (800404c <inicializarTrayectoria+0x604>)
 8003fb2:	ed93 7b00 	vldr	d7, [r3]
 8003fb6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003fba:	eeb0 0b47 	vmov.f64	d0, d7
 8003fbe:	f00d fcdb 	bl	8011978 <pow>
 8003fc2:	eeb0 5b40 	vmov.f64	d5, d0
 8003fc6:	ed97 7b00 	vldr	d7, [r7]
 8003fca:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003fce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003fd2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003fd6:	4b1e      	ldr	r3, [pc, #120]	; (8004050 <inicializarTrayectoria+0x608>)
 8003fd8:	ed83 7b00 	vstr	d7, [r3]
		if (fabs(DVHip) > fabs(Vm - Vf)) { // Para cuando la velocidad final es muy cercana a la maxima
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <inicializarTrayectoria+0x608>)
 8003fde:	ed93 7b00 	vldr	d7, [r3]
 8003fe2:	eeb0 6bc7 	vabs.f64	d6, d7
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <inicializarTrayectoria+0x5e4>)
 8003fe8:	ed93 5b00 	vldr	d5, [r3]
 8003fec:	ed97 7b06 	vldr	d7, [r7, #24]
 8003ff0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003ff4:	eeb0 7bc7 	vabs.f64	d7, d7
 8003ff8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004000:	dd5e      	ble.n	80040c0 <inicializarTrayectoria+0x678>
 8004002:	e027      	b.n	8004054 <inicializarTrayectoria+0x60c>
 8004004:	24000a70 	.word	0x24000a70
 8004008:	24000a68 	.word	0x24000a68
 800400c:	24000a48 	.word	0x24000a48
 8004010:	24000b10 	.word	0x24000b10
 8004014:	24000a60 	.word	0x24000a60
 8004018:	24000b00 	.word	0x24000b00
 800401c:	24000a58 	.word	0x24000a58
 8004020:	24000ad8 	.word	0x24000ad8
 8004024:	24000a90 	.word	0x24000a90
 8004028:	24000a88 	.word	0x24000a88
 800402c:	24000af8 	.word	0x24000af8
 8004030:	24000b60 	.word	0x24000b60
 8004034:	24000b18 	.word	0x24000b18
 8004038:	24000b68 	.word	0x24000b68
 800403c:	24000b20 	.word	0x24000b20
 8004040:	24000a80 	.word	0x24000a80
 8004044:	24000a78 	.word	0x24000a78
 8004048:	24000ae0 	.word	0x24000ae0
 800404c:	24000a50 	.word	0x24000a50
 8004050:	24000b50 	.word	0x24000b50
			if (fabs(Vm - Vf) != 0) {
 8004054:	4b34      	ldr	r3, [pc, #208]	; (8004128 <inicializarTrayectoria+0x6e0>)
 8004056:	ed93 6b00 	vldr	d6, [r3]
 800405a:	ed97 7b06 	vldr	d7, [r7, #24]
 800405e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004062:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406a:	d029      	beq.n	80040c0 <inicializarTrayectoria+0x678>
				Aaux = ((Af) / fabs(Af)) * sqrt(fabs(Vm - Vf) * fabs(Jerk));
 800406c:	4b2f      	ldr	r3, [pc, #188]	; (800412c <inicializarTrayectoria+0x6e4>)
 800406e:	ed93 6b00 	vldr	d6, [r3]
 8004072:	4b2e      	ldr	r3, [pc, #184]	; (800412c <inicializarTrayectoria+0x6e4>)
 8004074:	ed93 7b00 	vldr	d7, [r3]
 8004078:	eeb0 7bc7 	vabs.f64	d7, d7
 800407c:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8004080:	4b29      	ldr	r3, [pc, #164]	; (8004128 <inicializarTrayectoria+0x6e0>)
 8004082:	ed93 6b00 	vldr	d6, [r3]
 8004086:	ed97 7b06 	vldr	d7, [r7, #24]
 800408a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800408e:	eeb0 6bc7 	vabs.f64	d6, d7
 8004092:	ed97 7b00 	vldr	d7, [r7]
 8004096:	eeb0 7bc7 	vabs.f64	d7, d7
 800409a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800409e:	eeb0 0b47 	vmov.f64	d0, d7
 80040a2:	f00d fee9 	bl	8011e78 <sqrt>
 80040a6:	eeb0 7b40 	vmov.f64	d7, d0
 80040aa:	ee28 7b07 	vmul.f64	d7, d8, d7
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <inicializarTrayectoria+0x6e8>)
 80040b0:	ed83 7b00 	vstr	d7, [r3]
				Af = Aaux;
 80040b4:	4b1e      	ldr	r3, [pc, #120]	; (8004130 <inicializarTrayectoria+0x6e8>)
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	491c      	ldr	r1, [pc, #112]	; (800412c <inicializarTrayectoria+0x6e4>)
 80040bc:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		if (fabs(Vm - Vf) == 0) { // Para cuando la velocidad final es igual a la maxima
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <inicializarTrayectoria+0x6e0>)
 80040c2:	ed93 6b00 	vldr	d6, [r3]
 80040c6:	ed97 7b06 	vldr	d7, [r7, #24]
 80040ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80040ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80040d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d6:	d139      	bne.n	800414c <inicializarTrayectoria+0x704>
			VfHip3 = Vf;
 80040d8:	4916      	ldr	r1, [pc, #88]	; (8004134 <inicializarTrayectoria+0x6ec>)
 80040da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040de:	e9c1 2300 	strd	r2, r3, [r1]
			XiHip3 = XfHip4;
 80040e2:	4915      	ldr	r1, [pc, #84]	; (8004138 <inicializarTrayectoria+0x6f0>)
 80040e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040e8:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 80040ec:	4b12      	ldr	r3, [pc, #72]	; (8004138 <inicializarTrayectoria+0x6f0>)
 80040ee:	ed93 6b00 	vldr	d6, [r3]
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <inicializarTrayectoria+0x6f4>)
 80040f4:	ed93 7b00 	vldr	d7, [r3]
 80040f8:	ee36 5b47 	vsub.f64	d5, d6, d7
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <inicializarTrayectoria+0x6e0>)
 80040fe:	ed93 6b00 	vldr	d6, [r3]
 8004102:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004106:	eeb0 6bc7 	vabs.f64	d6, d7
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <inicializarTrayectoria+0x6f8>)
 800410c:	ed93 7b00 	vldr	d7, [r3]
 8004110:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <inicializarTrayectoria+0x6fc>)
 8004116:	ed83 7b00 	vstr	d7, [r3]
			TiempoTotX = tiHip3;
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <inicializarTrayectoria+0x6fc>)
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	4909      	ldr	r1, [pc, #36]	; (8004148 <inicializarTrayectoria+0x700>)
 8004122:	e9c1 2300 	strd	r2, r3, [r1]
 8004126:	e18b      	b.n	8004440 <inicializarTrayectoria+0x9f8>
 8004128:	24000af8 	.word	0x24000af8
 800412c:	24000a50 	.word	0x24000a50
 8004130:	24000b70 	.word	0x24000b70
 8004134:	24000b08 	.word	0x24000b08
 8004138:	24000af0 	.word	0x24000af0
 800413c:	24000ae0 	.word	0x24000ae0
 8004140:	24000b20 	.word	0x24000b20
 8004144:	24000b28 	.word	0x24000b28
 8004148:	24000b40 	.word	0x24000b40
		} else {
			ViHip4 = pow(Af, 2) / (2 * Jerk) + Vf;
 800414c:	4bc7      	ldr	r3, [pc, #796]	; (800446c <inicializarTrayectoria+0xa24>)
 800414e:	ed93 7b00 	vldr	d7, [r3]
 8004152:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004156:	eeb0 0b47 	vmov.f64	d0, d7
 800415a:	f00d fc0d 	bl	8011978 <pow>
 800415e:	eeb0 5b40 	vmov.f64	d5, d0
 8004162:	ed97 7b00 	vldr	d7, [r7]
 8004166:	ee37 7b07 	vadd.f64	d7, d7, d7
 800416a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800416e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004172:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004176:	4bbe      	ldr	r3, [pc, #760]	; (8004470 <inicializarTrayectoria+0xa28>)
 8004178:	ed83 7b00 	vstr	d7, [r3]
			XiHip4 =
					XfHip4
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 800417c:	4bbb      	ldr	r3, [pc, #748]	; (800446c <inicializarTrayectoria+0xa24>)
 800417e:	ed93 7b00 	vldr	d7, [r3]
 8004182:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004186:	eeb0 0b47 	vmov.f64	d0, d7
 800418a:	f00d fbf5 	bl	8011978 <pow>
 800418e:	eeb0 8b40 	vmov.f64	d8, d0
 8004192:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004196:	ed97 0b00 	vldr	d0, [r7]
 800419a:	f00d fbed 	bl	8011978 <pow>
 800419e:	eeb0 7b40 	vmov.f64	d7, d0
 80041a2:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80041a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80041aa:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80041ae:	eeb0 6bc7 	vabs.f64	d6, d7
									* ((ViHip4) / fabs(ViHip4))
 80041b2:	4baf      	ldr	r3, [pc, #700]	; (8004470 <inicializarTrayectoria+0xa28>)
 80041b4:	ed93 4b00 	vldr	d4, [r3]
 80041b8:	4bad      	ldr	r3, [pc, #692]	; (8004470 <inicializarTrayectoria+0xa28>)
 80041ba:	ed93 7b00 	vldr	d7, [r3]
 80041be:	eeb0 5bc7 	vabs.f64	d5, d7
 80041c2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80041c6:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ Vf * (fabs(Af / Jerk)));
 80041ca:	4ba8      	ldr	r3, [pc, #672]	; (800446c <inicializarTrayectoria+0xa24>)
 80041cc:	ed93 4b00 	vldr	d4, [r3]
 80041d0:	ed97 5b00 	vldr	d5, [r7]
 80041d4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80041d8:	eeb0 5bc7 	vabs.f64	d5, d7
 80041dc:	ed97 7b06 	vldr	d7, [r7, #24]
 80041e0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80041e4:	ee36 7b07 	vadd.f64	d7, d6, d7
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 80041e8:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80041ec:	ee36 7b47 	vsub.f64	d7, d6, d7
			XiHip4 =
 80041f0:	4ba0      	ldr	r3, [pc, #640]	; (8004474 <inicializarTrayectoria+0xa2c>)
 80041f2:	ed83 7b00 	vstr	d7, [r3]
			VfHip3 = Vm - pow(Af, 2) / (2 * (Jerk));
 80041f6:	4ba0      	ldr	r3, [pc, #640]	; (8004478 <inicializarTrayectoria+0xa30>)
 80041f8:	ed93 8b00 	vldr	d8, [r3]
 80041fc:	4b9b      	ldr	r3, [pc, #620]	; (800446c <inicializarTrayectoria+0xa24>)
 80041fe:	ed93 7b00 	vldr	d7, [r3]
 8004202:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004206:	eeb0 0b47 	vmov.f64	d0, d7
 800420a:	f00d fbb5 	bl	8011978 <pow>
 800420e:	eeb0 5b40 	vmov.f64	d5, d0
 8004212:	ed97 7b00 	vldr	d7, [r7]
 8004216:	ee37 6b07 	vadd.f64	d6, d7, d7
 800421a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800421e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004222:	4b96      	ldr	r3, [pc, #600]	; (800447c <inicializarTrayectoria+0xa34>)
 8004224:	ed83 7b00 	vstr	d7, [r3]
			XfHip3 = XiHip4
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 8004228:	4b92      	ldr	r3, [pc, #584]	; (8004474 <inicializarTrayectoria+0xa2c>)
 800422a:	ed93 8b00 	vldr	d8, [r3]
 800422e:	4b90      	ldr	r3, [pc, #576]	; (8004470 <inicializarTrayectoria+0xa28>)
 8004230:	ed93 5b00 	vldr	d5, [r3]
 8004234:	4b8e      	ldr	r3, [pc, #568]	; (8004470 <inicializarTrayectoria+0xa28>)
 8004236:	ed93 7b00 	vldr	d7, [r3]
 800423a:	eeb0 7bc7 	vabs.f64	d7, d7
 800423e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004242:	4b8a      	ldr	r3, [pc, #552]	; (800446c <inicializarTrayectoria+0xa24>)
 8004244:	ed93 7b00 	vldr	d7, [r3]
 8004248:	eeb0 5bc7 	vabs.f64	d5, d7
 800424c:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004250:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004254:	ee26 9b07 	vmul.f64	d9, d6, d7
							* pow(((ViHip4 - VfHip3) / Af), 2)
 8004258:	4b85      	ldr	r3, [pc, #532]	; (8004470 <inicializarTrayectoria+0xa28>)
 800425a:	ed93 6b00 	vldr	d6, [r3]
 800425e:	4b87      	ldr	r3, [pc, #540]	; (800447c <inicializarTrayectoria+0xa34>)
 8004260:	ed93 7b00 	vldr	d7, [r3]
 8004264:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004268:	4b80      	ldr	r3, [pc, #512]	; (800446c <inicializarTrayectoria+0xa24>)
 800426a:	ed93 7b00 	vldr	d7, [r3]
 800426e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004272:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004276:	eeb0 0b45 	vmov.f64	d0, d5
 800427a:	f00d fb7d 	bl	8011978 <pow>
 800427e:	eeb0 7b40 	vmov.f64	d7, d0
 8004282:	ee29 6b07 	vmul.f64	d6, d9, d7
							+ ViHip4 * ((ViHip4 - VfHip3) / Af));
 8004286:	4b7a      	ldr	r3, [pc, #488]	; (8004470 <inicializarTrayectoria+0xa28>)
 8004288:	ed93 5b00 	vldr	d5, [r3]
 800428c:	4b7b      	ldr	r3, [pc, #492]	; (800447c <inicializarTrayectoria+0xa34>)
 800428e:	ed93 7b00 	vldr	d7, [r3]
 8004292:	ee35 4b47 	vsub.f64	d4, d5, d7
 8004296:	4b75      	ldr	r3, [pc, #468]	; (800446c <inicializarTrayectoria+0xa24>)
 8004298:	ed93 7b00 	vldr	d7, [r3]
 800429c:	ee84 5b07 	vdiv.f64	d5, d4, d7
 80042a0:	4b73      	ldr	r3, [pc, #460]	; (8004470 <inicializarTrayectoria+0xa28>)
 80042a2:	ed93 7b00 	vldr	d7, [r3]
 80042a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80042aa:	ee36 7b07 	vadd.f64	d7, d6, d7
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 80042ae:	ee38 7b47 	vsub.f64	d7, d8, d7
			XfHip3 = XiHip4
 80042b2:	4b73      	ldr	r3, [pc, #460]	; (8004480 <inicializarTrayectoria+0xa38>)
 80042b4:	ed83 7b00 	vstr	d7, [r3]
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 80042b8:	4b6c      	ldr	r3, [pc, #432]	; (800446c <inicializarTrayectoria+0xa24>)
 80042ba:	ed93 5b00 	vldr	d5, [r3]
 80042be:	ed97 7b00 	vldr	d7, [r7]
 80042c2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80042c6:	4b6c      	ldr	r3, [pc, #432]	; (8004478 <inicializarTrayectoria+0xa30>)
 80042c8:	ed93 7b00 	vldr	d7, [r3]
 80042cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80042d0:	4b6b      	ldr	r3, [pc, #428]	; (8004480 <inicializarTrayectoria+0xa38>)
 80042d2:	ed93 7b00 	vldr	d7, [r3]
 80042d6:	ee36 8b07 	vadd.f64	d8, d6, d7
					- (pow(Af, 3) / (6 * (pow(-Jerk, 2))));
 80042da:	4b64      	ldr	r3, [pc, #400]	; (800446c <inicializarTrayectoria+0xa24>)
 80042dc:	ed93 7b00 	vldr	d7, [r3]
 80042e0:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80042e4:	eeb0 0b47 	vmov.f64	d0, d7
 80042e8:	f00d fb46 	bl	8011978 <pow>
 80042ec:	eeb0 9b40 	vmov.f64	d9, d0
 80042f0:	ed97 7b00 	vldr	d7, [r7]
 80042f4:	eeb1 7b47 	vneg.f64	d7, d7
 80042f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80042fc:	eeb0 0b47 	vmov.f64	d0, d7
 8004300:	f00d fb3a 	bl	8011978 <pow>
 8004304:	eeb0 7b40 	vmov.f64	d7, d0
 8004308:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800430c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004310:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8004314:	ee38 7b47 	vsub.f64	d7, d8, d7
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 8004318:	4b5a      	ldr	r3, [pc, #360]	; (8004484 <inicializarTrayectoria+0xa3c>)
 800431a:	ed83 7b00 	vstr	d7, [r3]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 800431e:	4b59      	ldr	r3, [pc, #356]	; (8004484 <inicializarTrayectoria+0xa3c>)
 8004320:	ed93 6b00 	vldr	d6, [r3]
 8004324:	4b58      	ldr	r3, [pc, #352]	; (8004488 <inicializarTrayectoria+0xa40>)
 8004326:	ed93 7b00 	vldr	d7, [r3]
 800432a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800432e:	4b52      	ldr	r3, [pc, #328]	; (8004478 <inicializarTrayectoria+0xa30>)
 8004330:	ed93 6b00 	vldr	d6, [r3]
 8004334:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004338:	eeb0 6bc7 	vabs.f64	d6, d7
 800433c:	4b53      	ldr	r3, [pc, #332]	; (800448c <inicializarTrayectoria+0xa44>)
 800433e:	ed93 7b00 	vldr	d7, [r3]
 8004342:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004346:	4b52      	ldr	r3, [pc, #328]	; (8004490 <inicializarTrayectoria+0xa48>)
 8004348:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 3
			a3Hip3 = (-Jerk / 6);
 800434c:	ed97 7b00 	vldr	d7, [r7]
 8004350:	eeb1 6b47 	vneg.f64	d6, d7
 8004354:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004358:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800435c:	4b4d      	ldr	r3, [pc, #308]	; (8004494 <inicializarTrayectoria+0xa4c>)
 800435e:	ed83 7b00 	vstr	d7, [r3]
			a2Hip3 = 0;
 8004362:	494d      	ldr	r1, [pc, #308]	; (8004498 <inicializarTrayectoria+0xa50>)
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip3 = (Af / (-Jerk)) + tiHip3;
 8004370:	4b3e      	ldr	r3, [pc, #248]	; (800446c <inicializarTrayectoria+0xa24>)
 8004372:	ed93 7b00 	vldr	d7, [r3]
 8004376:	eeb1 5b47 	vneg.f64	d5, d7
 800437a:	ed97 7b00 	vldr	d7, [r7]
 800437e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004382:	4b43      	ldr	r3, [pc, #268]	; (8004490 <inicializarTrayectoria+0xa48>)
 8004384:	ed93 7b00 	vldr	d7, [r3]
 8004388:	ee36 7b07 	vadd.f64	d7, d6, d7
 800438c:	4b43      	ldr	r3, [pc, #268]	; (800449c <inicializarTrayectoria+0xa54>)
 800438e:	ed83 7b00 	vstr	d7, [r3]
			a1Hip3 = Vm;
 8004392:	4b39      	ldr	r3, [pc, #228]	; (8004478 <inicializarTrayectoria+0xa30>)
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	4941      	ldr	r1, [pc, #260]	; (80044a0 <inicializarTrayectoria+0xa58>)
 800439a:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip3 = XiHip3;
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <inicializarTrayectoria+0xa3c>)
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	493f      	ldr	r1, [pc, #252]	; (80044a4 <inicializarTrayectoria+0xa5c>)
 80043a6:	e9c1 2300 	strd	r2, r3, [r1]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 2
			tiHip4 = ((ViHip4 - VfHip3) / Af) + tfHip3;
 80043aa:	4b31      	ldr	r3, [pc, #196]	; (8004470 <inicializarTrayectoria+0xa28>)
 80043ac:	ed93 6b00 	vldr	d6, [r3]
 80043b0:	4b32      	ldr	r3, [pc, #200]	; (800447c <inicializarTrayectoria+0xa34>)
 80043b2:	ed93 7b00 	vldr	d7, [r3]
 80043b6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80043ba:	4b2c      	ldr	r3, [pc, #176]	; (800446c <inicializarTrayectoria+0xa24>)
 80043bc:	ed93 7b00 	vldr	d7, [r3]
 80043c0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80043c4:	4b35      	ldr	r3, [pc, #212]	; (800449c <inicializarTrayectoria+0xa54>)
 80043c6:	ed93 7b00 	vldr	d7, [r3]
 80043ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <inicializarTrayectoria+0xa60>)
 80043d0:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 4
			a3Hip4 = Jerk / 6;
 80043d4:	ed97 6b00 	vldr	d6, [r7]
 80043d8:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80043dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80043e0:	4b32      	ldr	r3, [pc, #200]	; (80044ac <inicializarTrayectoria+0xa64>)
 80043e2:	ed83 7b00 	vstr	d7, [r3]
			a2Hip4 = Af / 2;
 80043e6:	4b21      	ldr	r3, [pc, #132]	; (800446c <inicializarTrayectoria+0xa24>)
 80043e8:	ed93 6b00 	vldr	d6, [r3]
 80043ec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80043f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80043f4:	4b2e      	ldr	r3, [pc, #184]	; (80044b0 <inicializarTrayectoria+0xa68>)
 80043f6:	ed83 7b00 	vstr	d7, [r3]
			tfHip4 = fabs(Af / Jerk) + tiHip4;
 80043fa:	4b1c      	ldr	r3, [pc, #112]	; (800446c <inicializarTrayectoria+0xa24>)
 80043fc:	ed93 5b00 	vldr	d5, [r3]
 8004400:	ed97 6b00 	vldr	d6, [r7]
 8004404:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004408:	eeb0 6bc7 	vabs.f64	d6, d7
 800440c:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <inicializarTrayectoria+0xa60>)
 800440e:	ed93 7b00 	vldr	d7, [r3]
 8004412:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004416:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <inicializarTrayectoria+0xa6c>)
 8004418:	ed83 7b00 	vstr	d7, [r3]
			a1Hip4 = ViHip4;
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <inicializarTrayectoria+0xa28>)
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	4925      	ldr	r1, [pc, #148]	; (80044b8 <inicializarTrayectoria+0xa70>)
 8004424:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip4 = XiHip4;
 8004428:	4b12      	ldr	r3, [pc, #72]	; (8004474 <inicializarTrayectoria+0xa2c>)
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	4923      	ldr	r1, [pc, #140]	; (80044bc <inicializarTrayectoria+0xa74>)
 8004430:	e9c1 2300 	strd	r2, r3, [r1]
			TiempoTotX = tfHip4;
 8004434:	4b1f      	ldr	r3, [pc, #124]	; (80044b4 <inicializarTrayectoria+0xa6c>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	4921      	ldr	r1, [pc, #132]	; (80044c0 <inicializarTrayectoria+0xa78>)
 800443c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (XiHip1 < XfHip4) {      // Por si va en un sentido o en el otro
 8004440:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004444:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004448:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800444c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004450:	d553      	bpl.n	80044fa <inicializarTrayectoria+0xab2>
			if (XiHip3 < XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <inicializarTrayectoria+0xa3c>)
 8004454:	ed93 6b00 	vldr	d6, [r3]
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <inicializarTrayectoria+0xa40>)
 800445a:	ed93 7b00 	vldr	d7, [r3]
 800445e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004466:	d42d      	bmi.n	80044c4 <inicializarTrayectoria+0xa7c>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8004468:	e077      	b.n	800455a <inicializarTrayectoria+0xb12>
 800446a:	bf00      	nop
 800446c:	24000a50 	.word	0x24000a50
 8004470:	24000b78 	.word	0x24000b78
 8004474:	24000b80 	.word	0x24000b80
 8004478:	24000af8 	.word	0x24000af8
 800447c:	24000b08 	.word	0x24000b08
 8004480:	24000ae8 	.word	0x24000ae8
 8004484:	24000af0 	.word	0x24000af0
 8004488:	24000ae0 	.word	0x24000ae0
 800448c:	24000b20 	.word	0x24000b20
 8004490:	24000b28 	.word	0x24000b28
 8004494:	24000ab0 	.word	0x24000ab0
 8004498:	24000aa8 	.word	0x24000aa8
 800449c:	24000b30 	.word	0x24000b30
 80044a0:	24000aa0 	.word	0x24000aa0
 80044a4:	24000a98 	.word	0x24000a98
 80044a8:	24000b38 	.word	0x24000b38
 80044ac:	24000ad0 	.word	0x24000ad0
 80044b0:	24000ac8 	.word	0x24000ac8
 80044b4:	24000b48 	.word	0x24000b48
 80044b8:	24000ac0 	.word	0x24000ac0
 80044bc:	24000ab8 	.word	0x24000ab8
 80044c0:	24000b40 	.word	0x24000b40
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 80044c4:	4b2e      	ldr	r3, [pc, #184]	; (8004580 <inicializarTrayectoria+0xb38>)
 80044c6:	ed93 6b00 	vldr	d6, [r3]
 80044ca:	ed97 7b04 	vldr	d7, [r7, #16]
 80044ce:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8004578 <inicializarTrayectoria+0xb30>
 80044d2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80044d6:	4b2a      	ldr	r3, [pc, #168]	; (8004580 <inicializarTrayectoria+0xb38>)
 80044d8:	ed93 3b00 	vldr	d3, [r3]
 80044dc:	4b28      	ldr	r3, [pc, #160]	; (8004580 <inicializarTrayectoria+0xb38>)
 80044de:	ed93 7b00 	vldr	d7, [r3]
 80044e2:	eeb0 4bc7 	vabs.f64	d4, d7
 80044e6:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80044ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80044ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80044f2:	4b23      	ldr	r3, [pc, #140]	; (8004580 <inicializarTrayectoria+0xb38>)
 80044f4:	ed83 7b00 	vstr	d7, [r3]
 80044f8:	e025      	b.n	8004546 <inicializarTrayectoria+0xafe>
			}
		} else {
			if (XiHip3 > XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 80044fa:	4b22      	ldr	r3, [pc, #136]	; (8004584 <inicializarTrayectoria+0xb3c>)
 80044fc:	ed93 6b00 	vldr	d6, [r3]
 8004500:	4b21      	ldr	r3, [pc, #132]	; (8004588 <inicializarTrayectoria+0xb40>)
 8004502:	ed93 7b00 	vldr	d7, [r3]
 8004506:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450e:	dc00      	bgt.n	8004512 <inicializarTrayectoria+0xaca>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8004510:	e023      	b.n	800455a <inicializarTrayectoria+0xb12>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 8004512:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <inicializarTrayectoria+0xb38>)
 8004514:	ed93 6b00 	vldr	d6, [r3]
 8004518:	ed97 7b04 	vldr	d7, [r7, #16]
 800451c:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8004578 <inicializarTrayectoria+0xb30>
 8004520:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004524:	4b16      	ldr	r3, [pc, #88]	; (8004580 <inicializarTrayectoria+0xb38>)
 8004526:	ed93 3b00 	vldr	d3, [r3]
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <inicializarTrayectoria+0xb38>)
 800452c:	ed93 7b00 	vldr	d7, [r3]
 8004530:	eeb0 4bc7 	vabs.f64	d4, d7
 8004534:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004538:	ee25 7b07 	vmul.f64	d7, d5, d7
 800453c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004540:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <inicializarTrayectoria+0xb38>)
 8004542:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 8004546:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800454a:	3301      	adds	r3, #1
 800454c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004550:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004554:	2b63      	cmp	r3, #99	; 0x63
 8004556:	f67f aaf6 	bls.w	8003b46 <inicializarTrayectoria+0xfe>
			}
		}
	}
	TiempoTotal = tfHip4;
 800455a:	4b0c      	ldr	r3, [pc, #48]	; (800458c <inicializarTrayectoria+0xb44>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	490b      	ldr	r1, [pc, #44]	; (8004590 <inicializarTrayectoria+0xb48>)
 8004562:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004566:	bf00      	nop
 8004568:	3740      	adds	r7, #64	; 0x40
 800456a:	46bd      	mov	sp, r7
 800456c:	ecbd 8b04 	vpop	{d8-d9}
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	f3af 8000 	nop.w
 8004578:	47ae147b 	.word	0x47ae147b
 800457c:	3f847ae1 	.word	0x3f847ae1
 8004580:	24000af8 	.word	0x24000af8
 8004584:	24000af0 	.word	0x24000af0
 8004588:	24000ae0 	.word	0x24000ae0
 800458c:	24000b48 	.word	0x24000b48
 8004590:	24000368 	.word	0x24000368

08004594 <obtenerVelCurva>:

void obtenerVelCurva(double t) {
 8004594:	b580      	push	{r7, lr}
 8004596:	ed2d 8b04 	vpush	{d8-d9}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	ed87 0b00 	vstr	d0, [r7]
	/*   -----------------------------------------------------------------------
	 * 	 Funcion que devuelve la velocidad de la trayectoria en un instante dado
	 *	 Entrada: tiempo actual,
	 *	 Salida:  velocidad lineal en m/s en el instante de tiempo t
	 -----------------------------------------------------------------------*/
	if (t <= tfHip1) {                                      // Hiperbola 1
 80045a2:	4bc3      	ldr	r3, [pc, #780]	; (80048b0 <obtenerVelCurva+0x31c>)
 80045a4:	ed93 7b00 	vldr	d7, [r3]
 80045a8:	ed97 6b00 	vldr	d6, [r7]
 80045ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80045b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b4:	d866      	bhi.n	8004684 <obtenerVelCurva+0xf0>
		X = a0Hip1 + a1Hip1 * t + a2Hip1 * pow(t, 2) + a3Hip1 * pow(t, 3);
 80045b6:	4bbf      	ldr	r3, [pc, #764]	; (80048b4 <obtenerVelCurva+0x320>)
 80045b8:	ed93 6b00 	vldr	d6, [r3]
 80045bc:	ed97 7b00 	vldr	d7, [r7]
 80045c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80045c4:	4bbc      	ldr	r3, [pc, #752]	; (80048b8 <obtenerVelCurva+0x324>)
 80045c6:	ed93 7b00 	vldr	d7, [r3]
 80045ca:	ee36 8b07 	vadd.f64	d8, d6, d7
 80045ce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80045d2:	ed97 0b00 	vldr	d0, [r7]
 80045d6:	f00d f9cf 	bl	8011978 <pow>
 80045da:	eeb0 6b40 	vmov.f64	d6, d0
 80045de:	4bb7      	ldr	r3, [pc, #732]	; (80048bc <obtenerVelCurva+0x328>)
 80045e0:	ed93 7b00 	vldr	d7, [r3]
 80045e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80045e8:	ee38 8b07 	vadd.f64	d8, d8, d7
 80045ec:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80045f0:	ed97 0b00 	vldr	d0, [r7]
 80045f4:	f00d f9c0 	bl	8011978 <pow>
 80045f8:	eeb0 6b40 	vmov.f64	d6, d0
 80045fc:	4bb0      	ldr	r3, [pc, #704]	; (80048c0 <obtenerVelCurva+0x32c>)
 80045fe:	ed93 7b00 	vldr	d7, [r3]
 8004602:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004606:	ee38 7b07 	vadd.f64	d7, d8, d7
 800460a:	4bae      	ldr	r3, [pc, #696]	; (80048c4 <obtenerVelCurva+0x330>)
 800460c:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip1 + 2.0 * a2Hip1 * t + 3 * a3Hip1 * pow(t, 2);
 8004610:	4baa      	ldr	r3, [pc, #680]	; (80048bc <obtenerVelCurva+0x328>)
 8004612:	ed93 7b00 	vldr	d7, [r3]
 8004616:	ee37 6b07 	vadd.f64	d6, d7, d7
 800461a:	ed97 7b00 	vldr	d7, [r7]
 800461e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004622:	4ba4      	ldr	r3, [pc, #656]	; (80048b4 <obtenerVelCurva+0x320>)
 8004624:	ed93 7b00 	vldr	d7, [r3]
 8004628:	ee36 8b07 	vadd.f64	d8, d6, d7
 800462c:	4ba4      	ldr	r3, [pc, #656]	; (80048c0 <obtenerVelCurva+0x32c>)
 800462e:	ed93 7b00 	vldr	d7, [r3]
 8004632:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004636:	ee27 9b06 	vmul.f64	d9, d7, d6
 800463a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800463e:	ed97 0b00 	vldr	d0, [r7]
 8004642:	f00d f999 	bl	8011978 <pow>
 8004646:	eeb0 7b40 	vmov.f64	d7, d0
 800464a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800464e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004652:	4b9d      	ldr	r3, [pc, #628]	; (80048c8 <obtenerVelCurva+0x334>)
 8004654:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip1 + 6 * a3Hip1 * t;
 8004658:	4b98      	ldr	r3, [pc, #608]	; (80048bc <obtenerVelCurva+0x328>)
 800465a:	ed93 7b00 	vldr	d7, [r3]
 800465e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004662:	4b97      	ldr	r3, [pc, #604]	; (80048c0 <obtenerVelCurva+0x32c>)
 8004664:	ed93 7b00 	vldr	d7, [r3]
 8004668:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800466c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004670:	ed97 7b00 	vldr	d7, [r7]
 8004674:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004678:	ee36 7b07 	vadd.f64	d7, d6, d7
 800467c:	4b93      	ldr	r3, [pc, #588]	; (80048cc <obtenerVelCurva+0x338>)
 800467e:	ed83 7b00 	vstr	d7, [r3]
		X = 0;
		DX = 0;
		DDX = 0;
	}

}
 8004682:	e30e      	b.n	8004ca2 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip2)) {                              // Parabola 1
 8004684:	4b92      	ldr	r3, [pc, #584]	; (80048d0 <obtenerVelCurva+0x33c>)
 8004686:	ed93 7b00 	vldr	d7, [r3]
 800468a:	ed97 6b00 	vldr	d6, [r7]
 800468e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004696:	d848      	bhi.n	800472a <obtenerVelCurva+0x196>
		X = (Ai / 2) * pow((t - tfHip1), 2) + VfHip1 * (t - tfHip1) + XfHip1;
 8004698:	4b8e      	ldr	r3, [pc, #568]	; (80048d4 <obtenerVelCurva+0x340>)
 800469a:	ed93 7b00 	vldr	d7, [r3]
 800469e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80046a2:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80046a6:	4b82      	ldr	r3, [pc, #520]	; (80048b0 <obtenerVelCurva+0x31c>)
 80046a8:	ed93 7b00 	vldr	d7, [r3]
 80046ac:	ed97 6b00 	vldr	d6, [r7]
 80046b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80046b4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80046b8:	eeb0 0b47 	vmov.f64	d0, d7
 80046bc:	f00d f95c 	bl	8011978 <pow>
 80046c0:	eeb0 7b40 	vmov.f64	d7, d0
 80046c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80046c8:	4b79      	ldr	r3, [pc, #484]	; (80048b0 <obtenerVelCurva+0x31c>)
 80046ca:	ed93 7b00 	vldr	d7, [r3]
 80046ce:	ed97 5b00 	vldr	d5, [r7]
 80046d2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80046d6:	4b80      	ldr	r3, [pc, #512]	; (80048d8 <obtenerVelCurva+0x344>)
 80046d8:	ed93 7b00 	vldr	d7, [r3]
 80046dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80046e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80046e4:	4b7d      	ldr	r3, [pc, #500]	; (80048dc <obtenerVelCurva+0x348>)
 80046e6:	ed93 7b00 	vldr	d7, [r3]
 80046ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046ee:	4b75      	ldr	r3, [pc, #468]	; (80048c4 <obtenerVelCurva+0x330>)
 80046f0:	ed83 7b00 	vstr	d7, [r3]
		DX = Ai * (t - tfHip1) + VfHip1;
 80046f4:	4b6e      	ldr	r3, [pc, #440]	; (80048b0 <obtenerVelCurva+0x31c>)
 80046f6:	ed93 7b00 	vldr	d7, [r3]
 80046fa:	ed97 6b00 	vldr	d6, [r7]
 80046fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004702:	4b74      	ldr	r3, [pc, #464]	; (80048d4 <obtenerVelCurva+0x340>)
 8004704:	ed93 7b00 	vldr	d7, [r3]
 8004708:	ee26 6b07 	vmul.f64	d6, d6, d7
 800470c:	4b72      	ldr	r3, [pc, #456]	; (80048d8 <obtenerVelCurva+0x344>)
 800470e:	ed93 7b00 	vldr	d7, [r3]
 8004712:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004716:	4b6c      	ldr	r3, [pc, #432]	; (80048c8 <obtenerVelCurva+0x334>)
 8004718:	ed83 7b00 	vstr	d7, [r3]
		DDX = Ai;
 800471c:	4b6d      	ldr	r3, [pc, #436]	; (80048d4 <obtenerVelCurva+0x340>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	496a      	ldr	r1, [pc, #424]	; (80048cc <obtenerVelCurva+0x338>)
 8004724:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004728:	e2bb      	b.n	8004ca2 <obtenerVelCurva+0x70e>
	} else if (t <= (tfHip2)) {                            // Hiperbola 2
 800472a:	4b6d      	ldr	r3, [pc, #436]	; (80048e0 <obtenerVelCurva+0x34c>)
 800472c:	ed93 7b00 	vldr	d7, [r3]
 8004730:	ed97 6b00 	vldr	d6, [r7]
 8004734:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473c:	f200 808b 	bhi.w	8004856 <obtenerVelCurva+0x2c2>
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 8004740:	4b63      	ldr	r3, [pc, #396]	; (80048d0 <obtenerVelCurva+0x33c>)
 8004742:	ed93 7b00 	vldr	d7, [r3]
 8004746:	ed97 6b00 	vldr	d6, [r7]
 800474a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800474e:	4b65      	ldr	r3, [pc, #404]	; (80048e4 <obtenerVelCurva+0x350>)
 8004750:	ed93 7b00 	vldr	d7, [r3]
 8004754:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004758:	4b63      	ldr	r3, [pc, #396]	; (80048e8 <obtenerVelCurva+0x354>)
 800475a:	ed93 7b00 	vldr	d7, [r3]
 800475e:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004762:	4b5b      	ldr	r3, [pc, #364]	; (80048d0 <obtenerVelCurva+0x33c>)
 8004764:	ed93 7b00 	vldr	d7, [r3]
 8004768:	ed97 6b00 	vldr	d6, [r7]
 800476c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004770:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004774:	eeb0 0b47 	vmov.f64	d0, d7
 8004778:	f00d f8fe 	bl	8011978 <pow>
 800477c:	eeb0 6b40 	vmov.f64	d6, d0
 8004780:	4b5a      	ldr	r3, [pc, #360]	; (80048ec <obtenerVelCurva+0x358>)
 8004782:	ed93 7b00 	vldr	d7, [r3]
 8004786:	ee26 7b07 	vmul.f64	d7, d6, d7
 800478a:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip2 * pow((t - tiHip2), 3);
 800478e:	4b50      	ldr	r3, [pc, #320]	; (80048d0 <obtenerVelCurva+0x33c>)
 8004790:	ed93 7b00 	vldr	d7, [r3]
 8004794:	ed97 6b00 	vldr	d6, [r7]
 8004798:	ee36 7b47 	vsub.f64	d7, d6, d7
 800479c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80047a0:	eeb0 0b47 	vmov.f64	d0, d7
 80047a4:	f00d f8e8 	bl	8011978 <pow>
 80047a8:	eeb0 6b40 	vmov.f64	d6, d0
 80047ac:	4b50      	ldr	r3, [pc, #320]	; (80048f0 <obtenerVelCurva+0x35c>)
 80047ae:	ed93 7b00 	vldr	d7, [r3]
 80047b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80047b6:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 80047ba:	4b42      	ldr	r3, [pc, #264]	; (80048c4 <obtenerVelCurva+0x330>)
 80047bc:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 80047c0:	4b4a      	ldr	r3, [pc, #296]	; (80048ec <obtenerVelCurva+0x358>)
 80047c2:	ed93 7b00 	vldr	d7, [r3]
 80047c6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80047ca:	4b41      	ldr	r3, [pc, #260]	; (80048d0 <obtenerVelCurva+0x33c>)
 80047cc:	ed93 7b00 	vldr	d7, [r3]
 80047d0:	ed97 5b00 	vldr	d5, [r7]
 80047d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80047d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80047dc:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <obtenerVelCurva+0x350>)
 80047de:	ed93 7b00 	vldr	d7, [r3]
 80047e2:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip2 * pow((t - tiHip2), 2);
 80047e6:	4b42      	ldr	r3, [pc, #264]	; (80048f0 <obtenerVelCurva+0x35c>)
 80047e8:	ed93 7b00 	vldr	d7, [r3]
 80047ec:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80047f0:	ee27 9b06 	vmul.f64	d9, d7, d6
 80047f4:	4b36      	ldr	r3, [pc, #216]	; (80048d0 <obtenerVelCurva+0x33c>)
 80047f6:	ed93 7b00 	vldr	d7, [r3]
 80047fa:	ed97 6b00 	vldr	d6, [r7]
 80047fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004802:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004806:	eeb0 0b47 	vmov.f64	d0, d7
 800480a:	f00d f8b5 	bl	8011978 <pow>
 800480e:	eeb0 7b40 	vmov.f64	d7, d0
 8004812:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004816:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 800481a:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <obtenerVelCurva+0x334>)
 800481c:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip2 + 6 * a3Hip2 * (t - tiHip2);
 8004820:	4b32      	ldr	r3, [pc, #200]	; (80048ec <obtenerVelCurva+0x358>)
 8004822:	ed93 7b00 	vldr	d7, [r3]
 8004826:	ee37 6b07 	vadd.f64	d6, d7, d7
 800482a:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <obtenerVelCurva+0x35c>)
 800482c:	ed93 7b00 	vldr	d7, [r3]
 8004830:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004834:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <obtenerVelCurva+0x33c>)
 800483a:	ed93 7b00 	vldr	d7, [r3]
 800483e:	ed97 4b00 	vldr	d4, [r7]
 8004842:	ee34 7b47 	vsub.f64	d7, d4, d7
 8004846:	ee25 7b07 	vmul.f64	d7, d5, d7
 800484a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800484e:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <obtenerVelCurva+0x338>)
 8004850:	ed83 7b00 	vstr	d7, [r3]
}
 8004854:	e225      	b.n	8004ca2 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip3)) {                              // Recta
 8004856:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <obtenerVelCurva+0x360>)
 8004858:	ed93 7b00 	vldr	d7, [r3]
 800485c:	ed97 6b00 	vldr	d6, [r7]
 8004860:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004868:	d84a      	bhi.n	8004900 <obtenerVelCurva+0x36c>
		X = Vm * (t - tfHip2) + XfHip2;
 800486a:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <obtenerVelCurva+0x34c>)
 800486c:	ed93 7b00 	vldr	d7, [r3]
 8004870:	ed97 6b00 	vldr	d6, [r7]
 8004874:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004878:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <obtenerVelCurva+0x364>)
 800487a:	ed93 7b00 	vldr	d7, [r3]
 800487e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <obtenerVelCurva+0x368>)
 8004884:	ed93 7b00 	vldr	d7, [r3]
 8004888:	ee36 7b07 	vadd.f64	d7, d6, d7
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <obtenerVelCurva+0x330>)
 800488e:	ed83 7b00 	vstr	d7, [r3]
		DX = Vm;
 8004892:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <obtenerVelCurva+0x364>)
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	490b      	ldr	r1, [pc, #44]	; (80048c8 <obtenerVelCurva+0x334>)
 800489a:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 800489e:	490b      	ldr	r1, [pc, #44]	; (80048cc <obtenerVelCurva+0x338>)
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80048ac:	e1f9      	b.n	8004ca2 <obtenerVelCurva+0x70e>
 80048ae:	bf00      	nop
 80048b0:	24000b10 	.word	0x24000b10
 80048b4:	24000a60 	.word	0x24000a60
 80048b8:	24000a58 	.word	0x24000a58
 80048bc:	24000a68 	.word	0x24000a68
 80048c0:	24000a70 	.word	0x24000a70
 80048c4:	240003a0 	.word	0x240003a0
 80048c8:	240003a8 	.word	0x240003a8
 80048cc:	240003b0 	.word	0x240003b0
 80048d0:	24000b18 	.word	0x24000b18
 80048d4:	24000a48 	.word	0x24000a48
 80048d8:	24000b00 	.word	0x24000b00
 80048dc:	24000ad8 	.word	0x24000ad8
 80048e0:	24000b20 	.word	0x24000b20
 80048e4:	24000a80 	.word	0x24000a80
 80048e8:	24000a78 	.word	0x24000a78
 80048ec:	24000a88 	.word	0x24000a88
 80048f0:	24000a90 	.word	0x24000a90
 80048f4:	24000b28 	.word	0x24000b28
 80048f8:	24000af8 	.word	0x24000af8
 80048fc:	24000ae0 	.word	0x24000ae0
	} else if (t <= (tfHip3)) {                            // Hiperbola 3
 8004900:	4bcb      	ldr	r3, [pc, #812]	; (8004c30 <obtenerVelCurva+0x69c>)
 8004902:	ed93 7b00 	vldr	d7, [r3]
 8004906:	ed97 6b00 	vldr	d6, [r7]
 800490a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800490e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004912:	f200 808b 	bhi.w	8004a2c <obtenerVelCurva+0x498>
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8004916:	4bc7      	ldr	r3, [pc, #796]	; (8004c34 <obtenerVelCurva+0x6a0>)
 8004918:	ed93 7b00 	vldr	d7, [r3]
 800491c:	ed97 6b00 	vldr	d6, [r7]
 8004920:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004924:	4bc4      	ldr	r3, [pc, #784]	; (8004c38 <obtenerVelCurva+0x6a4>)
 8004926:	ed93 7b00 	vldr	d7, [r3]
 800492a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800492e:	4bc3      	ldr	r3, [pc, #780]	; (8004c3c <obtenerVelCurva+0x6a8>)
 8004930:	ed93 7b00 	vldr	d7, [r3]
 8004934:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004938:	4bbe      	ldr	r3, [pc, #760]	; (8004c34 <obtenerVelCurva+0x6a0>)
 800493a:	ed93 7b00 	vldr	d7, [r3]
 800493e:	ed97 6b00 	vldr	d6, [r7]
 8004942:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004946:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800494a:	eeb0 0b47 	vmov.f64	d0, d7
 800494e:	f00d f813 	bl	8011978 <pow>
 8004952:	eeb0 6b40 	vmov.f64	d6, d0
 8004956:	4bba      	ldr	r3, [pc, #744]	; (8004c40 <obtenerVelCurva+0x6ac>)
 8004958:	ed93 7b00 	vldr	d7, [r3]
 800495c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004960:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip3 * pow((t - tiHip3), 3);
 8004964:	4bb3      	ldr	r3, [pc, #716]	; (8004c34 <obtenerVelCurva+0x6a0>)
 8004966:	ed93 7b00 	vldr	d7, [r3]
 800496a:	ed97 6b00 	vldr	d6, [r7]
 800496e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004972:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004976:	eeb0 0b47 	vmov.f64	d0, d7
 800497a:	f00c fffd 	bl	8011978 <pow>
 800497e:	eeb0 6b40 	vmov.f64	d6, d0
 8004982:	4bb0      	ldr	r3, [pc, #704]	; (8004c44 <obtenerVelCurva+0x6b0>)
 8004984:	ed93 7b00 	vldr	d7, [r3]
 8004988:	ee26 7b07 	vmul.f64	d7, d6, d7
 800498c:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8004990:	4bad      	ldr	r3, [pc, #692]	; (8004c48 <obtenerVelCurva+0x6b4>)
 8004992:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8004996:	4baa      	ldr	r3, [pc, #680]	; (8004c40 <obtenerVelCurva+0x6ac>)
 8004998:	ed93 7b00 	vldr	d7, [r3]
 800499c:	ee37 6b07 	vadd.f64	d6, d7, d7
 80049a0:	4ba4      	ldr	r3, [pc, #656]	; (8004c34 <obtenerVelCurva+0x6a0>)
 80049a2:	ed93 7b00 	vldr	d7, [r3]
 80049a6:	ed97 5b00 	vldr	d5, [r7]
 80049aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80049ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 80049b2:	4ba1      	ldr	r3, [pc, #644]	; (8004c38 <obtenerVelCurva+0x6a4>)
 80049b4:	ed93 7b00 	vldr	d7, [r3]
 80049b8:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip3 * pow((t - tiHip3), 2);
 80049bc:	4ba1      	ldr	r3, [pc, #644]	; (8004c44 <obtenerVelCurva+0x6b0>)
 80049be:	ed93 7b00 	vldr	d7, [r3]
 80049c2:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80049c6:	ee27 9b06 	vmul.f64	d9, d7, d6
 80049ca:	4b9a      	ldr	r3, [pc, #616]	; (8004c34 <obtenerVelCurva+0x6a0>)
 80049cc:	ed93 7b00 	vldr	d7, [r3]
 80049d0:	ed97 6b00 	vldr	d6, [r7]
 80049d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80049d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80049dc:	eeb0 0b47 	vmov.f64	d0, d7
 80049e0:	f00c ffca 	bl	8011978 <pow>
 80049e4:	eeb0 7b40 	vmov.f64	d7, d0
 80049e8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80049ec:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 80049f0:	4b96      	ldr	r3, [pc, #600]	; (8004c4c <obtenerVelCurva+0x6b8>)
 80049f2:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip3 + 6 * a3Hip3 * (t - tiHip3);
 80049f6:	4b92      	ldr	r3, [pc, #584]	; (8004c40 <obtenerVelCurva+0x6ac>)
 80049f8:	ed93 7b00 	vldr	d7, [r3]
 80049fc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004a00:	4b90      	ldr	r3, [pc, #576]	; (8004c44 <obtenerVelCurva+0x6b0>)
 8004a02:	ed93 7b00 	vldr	d7, [r3]
 8004a06:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004a0a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004a0e:	4b89      	ldr	r3, [pc, #548]	; (8004c34 <obtenerVelCurva+0x6a0>)
 8004a10:	ed93 7b00 	vldr	d7, [r3]
 8004a14:	ed97 4b00 	vldr	d4, [r7]
 8004a18:	ee34 7b47 	vsub.f64	d7, d4, d7
 8004a1c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004a20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a24:	4b8a      	ldr	r3, [pc, #552]	; (8004c50 <obtenerVelCurva+0x6bc>)
 8004a26:	ed83 7b00 	vstr	d7, [r3]
}
 8004a2a:	e13a      	b.n	8004ca2 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip4)) {                            // Parabola 2
 8004a2c:	4b89      	ldr	r3, [pc, #548]	; (8004c54 <obtenerVelCurva+0x6c0>)
 8004a2e:	ed93 7b00 	vldr	d7, [r3]
 8004a32:	ed97 6b00 	vldr	d6, [r7]
 8004a36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	d848      	bhi.n	8004ad2 <obtenerVelCurva+0x53e>
		X = (Af / 2) * pow((t - tfHip3), 2) + VfHip3 * (t - tfHip3) + XfHip3;
 8004a40:	4b85      	ldr	r3, [pc, #532]	; (8004c58 <obtenerVelCurva+0x6c4>)
 8004a42:	ed93 7b00 	vldr	d7, [r3]
 8004a46:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8004a4a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8004a4e:	4b78      	ldr	r3, [pc, #480]	; (8004c30 <obtenerVelCurva+0x69c>)
 8004a50:	ed93 7b00 	vldr	d7, [r3]
 8004a54:	ed97 6b00 	vldr	d6, [r7]
 8004a58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a5c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004a60:	eeb0 0b47 	vmov.f64	d0, d7
 8004a64:	f00c ff88 	bl	8011978 <pow>
 8004a68:	eeb0 7b40 	vmov.f64	d7, d0
 8004a6c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8004a70:	4b6f      	ldr	r3, [pc, #444]	; (8004c30 <obtenerVelCurva+0x69c>)
 8004a72:	ed93 7b00 	vldr	d7, [r3]
 8004a76:	ed97 5b00 	vldr	d5, [r7]
 8004a7a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004a7e:	4b77      	ldr	r3, [pc, #476]	; (8004c5c <obtenerVelCurva+0x6c8>)
 8004a80:	ed93 7b00 	vldr	d7, [r3]
 8004a84:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004a88:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004a8c:	4b74      	ldr	r3, [pc, #464]	; (8004c60 <obtenerVelCurva+0x6cc>)
 8004a8e:	ed93 7b00 	vldr	d7, [r3]
 8004a92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a96:	4b6c      	ldr	r3, [pc, #432]	; (8004c48 <obtenerVelCurva+0x6b4>)
 8004a98:	ed83 7b00 	vstr	d7, [r3]
		DX = Af * (t - tfHip3) + VfHip3;
 8004a9c:	4b64      	ldr	r3, [pc, #400]	; (8004c30 <obtenerVelCurva+0x69c>)
 8004a9e:	ed93 7b00 	vldr	d7, [r3]
 8004aa2:	ed97 6b00 	vldr	d6, [r7]
 8004aa6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004aaa:	4b6b      	ldr	r3, [pc, #428]	; (8004c58 <obtenerVelCurva+0x6c4>)
 8004aac:	ed93 7b00 	vldr	d7, [r3]
 8004ab0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004ab4:	4b69      	ldr	r3, [pc, #420]	; (8004c5c <obtenerVelCurva+0x6c8>)
 8004ab6:	ed93 7b00 	vldr	d7, [r3]
 8004aba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004abe:	4b63      	ldr	r3, [pc, #396]	; (8004c4c <obtenerVelCurva+0x6b8>)
 8004ac0:	ed83 7b00 	vstr	d7, [r3]
		DDX = Af;
 8004ac4:	4b64      	ldr	r3, [pc, #400]	; (8004c58 <obtenerVelCurva+0x6c4>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	4961      	ldr	r1, [pc, #388]	; (8004c50 <obtenerVelCurva+0x6bc>)
 8004acc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004ad0:	e0e7      	b.n	8004ca2 <obtenerVelCurva+0x70e>
	} else if (t <= TiempoTotX) {                               // Hiperbola 4
 8004ad2:	4b64      	ldr	r3, [pc, #400]	; (8004c64 <obtenerVelCurva+0x6d0>)
 8004ad4:	ed93 7b00 	vldr	d7, [r3]
 8004ad8:	ed97 6b00 	vldr	d6, [r7]
 8004adc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae4:	f200 808b 	bhi.w	8004bfe <obtenerVelCurva+0x66a>
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8004ae8:	4b5a      	ldr	r3, [pc, #360]	; (8004c54 <obtenerVelCurva+0x6c0>)
 8004aea:	ed93 7b00 	vldr	d7, [r3]
 8004aee:	ed97 6b00 	vldr	d6, [r7]
 8004af2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004af6:	4b5c      	ldr	r3, [pc, #368]	; (8004c68 <obtenerVelCurva+0x6d4>)
 8004af8:	ed93 7b00 	vldr	d7, [r3]
 8004afc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b00:	4b5a      	ldr	r3, [pc, #360]	; (8004c6c <obtenerVelCurva+0x6d8>)
 8004b02:	ed93 7b00 	vldr	d7, [r3]
 8004b06:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004b0a:	4b52      	ldr	r3, [pc, #328]	; (8004c54 <obtenerVelCurva+0x6c0>)
 8004b0c:	ed93 7b00 	vldr	d7, [r3]
 8004b10:	ed97 6b00 	vldr	d6, [r7]
 8004b14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b18:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004b1c:	eeb0 0b47 	vmov.f64	d0, d7
 8004b20:	f00c ff2a 	bl	8011978 <pow>
 8004b24:	eeb0 6b40 	vmov.f64	d6, d0
 8004b28:	4b51      	ldr	r3, [pc, #324]	; (8004c70 <obtenerVelCurva+0x6dc>)
 8004b2a:	ed93 7b00 	vldr	d7, [r3]
 8004b2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b32:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip4 * pow((t - tiHip4), 3);
 8004b36:	4b47      	ldr	r3, [pc, #284]	; (8004c54 <obtenerVelCurva+0x6c0>)
 8004b38:	ed93 7b00 	vldr	d7, [r3]
 8004b3c:	ed97 6b00 	vldr	d6, [r7]
 8004b40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b44:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004b48:	eeb0 0b47 	vmov.f64	d0, d7
 8004b4c:	f00c ff14 	bl	8011978 <pow>
 8004b50:	eeb0 6b40 	vmov.f64	d6, d0
 8004b54:	4b47      	ldr	r3, [pc, #284]	; (8004c74 <obtenerVelCurva+0x6e0>)
 8004b56:	ed93 7b00 	vldr	d7, [r3]
 8004b5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b5e:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8004b62:	4b39      	ldr	r3, [pc, #228]	; (8004c48 <obtenerVelCurva+0x6b4>)
 8004b64:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8004b68:	4b41      	ldr	r3, [pc, #260]	; (8004c70 <obtenerVelCurva+0x6dc>)
 8004b6a:	ed93 7b00 	vldr	d7, [r3]
 8004b6e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004b72:	4b38      	ldr	r3, [pc, #224]	; (8004c54 <obtenerVelCurva+0x6c0>)
 8004b74:	ed93 7b00 	vldr	d7, [r3]
 8004b78:	ed97 5b00 	vldr	d5, [r7]
 8004b7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004b80:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b84:	4b38      	ldr	r3, [pc, #224]	; (8004c68 <obtenerVelCurva+0x6d4>)
 8004b86:	ed93 7b00 	vldr	d7, [r3]
 8004b8a:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip4 * pow((t - tiHip4), 2);
 8004b8e:	4b39      	ldr	r3, [pc, #228]	; (8004c74 <obtenerVelCurva+0x6e0>)
 8004b90:	ed93 7b00 	vldr	d7, [r3]
 8004b94:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004b98:	ee27 9b06 	vmul.f64	d9, d7, d6
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <obtenerVelCurva+0x6c0>)
 8004b9e:	ed93 7b00 	vldr	d7, [r3]
 8004ba2:	ed97 6b00 	vldr	d6, [r7]
 8004ba6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004baa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004bae:	eeb0 0b47 	vmov.f64	d0, d7
 8004bb2:	f00c fee1 	bl	8011978 <pow>
 8004bb6:	eeb0 7b40 	vmov.f64	d7, d0
 8004bba:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004bbe:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <obtenerVelCurva+0x6b8>)
 8004bc4:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip4 + 6.0 * a3Hip4 * (t - tiHip4);
 8004bc8:	4b29      	ldr	r3, [pc, #164]	; (8004c70 <obtenerVelCurva+0x6dc>)
 8004bca:	ed93 7b00 	vldr	d7, [r3]
 8004bce:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004bd2:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <obtenerVelCurva+0x6e0>)
 8004bd4:	ed93 7b00 	vldr	d7, [r3]
 8004bd8:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004bdc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004be0:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <obtenerVelCurva+0x6c0>)
 8004be2:	ed93 7b00 	vldr	d7, [r3]
 8004be6:	ed97 4b00 	vldr	d4, [r7]
 8004bea:	ee34 7b47 	vsub.f64	d7, d4, d7
 8004bee:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004bf2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004bf6:	4b16      	ldr	r3, [pc, #88]	; (8004c50 <obtenerVelCurva+0x6bc>)
 8004bf8:	ed83 7b00 	vstr	d7, [r3]
}
 8004bfc:	e051      	b.n	8004ca2 <obtenerVelCurva+0x70e>
	} else if (t > TiempoTotX) {                               // Tiempo extra
 8004bfe:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <obtenerVelCurva+0x6d0>)
 8004c00:	ed93 7b00 	vldr	d7, [r3]
 8004c04:	ed97 6b00 	vldr	d6, [r7]
 8004c08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c10:	dd32      	ble.n	8004c78 <obtenerVelCurva+0x6e4>
		DX = 0;
 8004c12:	490e      	ldr	r1, [pc, #56]	; (8004c4c <obtenerVelCurva+0x6b8>)
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8004c20:	490b      	ldr	r1, [pc, #44]	; (8004c50 <obtenerVelCurva+0x6bc>)
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004c2e:	e038      	b.n	8004ca2 <obtenerVelCurva+0x70e>
 8004c30:	24000b30 	.word	0x24000b30
 8004c34:	24000b28 	.word	0x24000b28
 8004c38:	24000aa0 	.word	0x24000aa0
 8004c3c:	24000a98 	.word	0x24000a98
 8004c40:	24000aa8 	.word	0x24000aa8
 8004c44:	24000ab0 	.word	0x24000ab0
 8004c48:	240003a0 	.word	0x240003a0
 8004c4c:	240003a8 	.word	0x240003a8
 8004c50:	240003b0 	.word	0x240003b0
 8004c54:	24000b38 	.word	0x24000b38
 8004c58:	24000a50 	.word	0x24000a50
 8004c5c:	24000b08 	.word	0x24000b08
 8004c60:	24000ae8 	.word	0x24000ae8
 8004c64:	24000b40 	.word	0x24000b40
 8004c68:	24000ac0 	.word	0x24000ac0
 8004c6c:	24000ab8 	.word	0x24000ab8
 8004c70:	24000ac8 	.word	0x24000ac8
 8004c74:	24000ad0 	.word	0x24000ad0
		X = 0;
 8004c78:	490d      	ldr	r1, [pc, #52]	; (8004cb0 <obtenerVelCurva+0x71c>)
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	e9c1 2300 	strd	r2, r3, [r1]
		DX = 0;
 8004c86:	490b      	ldr	r1, [pc, #44]	; (8004cb4 <obtenerVelCurva+0x720>)
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8004c94:	4908      	ldr	r1, [pc, #32]	; (8004cb8 <obtenerVelCurva+0x724>)
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004ca2:	bf00      	nop
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	ecbd 8b04 	vpop	{d8-d9}
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	240003a0 	.word	0x240003a0
 8004cb4:	240003a8 	.word	0x240003a8
 8004cb8:	240003b0 	.word	0x240003b0
 8004cbc:	00000000 	.word	0x00000000

08004cc0 <cinematicaInversa>:

void cinematicaInversa(double Pxaux, double Pyaux, double Pzaux) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	ed2d 8b04 	vpush	{d8-d9}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	ed87 0b04 	vstr	d0, [r7, #16]
 8004cce:	ed87 1b02 	vstr	d1, [r7, #8]
 8004cd2:	ed87 2b00 	vstr	d2, [r7]

	A1 = 1.0 + pow(((-2.0  * (R + (Pyaux - r))) / (2 * Pzaux)), 2);
 8004cd6:	ed97 7b02 	vldr	d7, [r7, #8]
 8004cda:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8005098 <cinematicaInversa+0x3d8>
 8004cde:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ce2:	ed9f 6bef 	vldr	d6, [pc, #956]	; 80050a0 <cinematicaInversa+0x3e0>
 8004ce6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004cea:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8004cee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004cf2:	ed97 7b00 	vldr	d7, [r7]
 8004cf6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004cfa:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004cfe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004d02:	eeb0 0b45 	vmov.f64	d0, d5
 8004d06:	f00c fe37 	bl	8011978 <pow>
 8004d0a:	eeb0 7b40 	vmov.f64	d7, d0
 8004d0e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004d12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d16:	4bfa      	ldr	r3, [pc, #1000]	; (8005100 <cinematicaInversa+0x440>)
 8004d18:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * c30 + 2.0 * R * s30 - 2.0 * sqrt(3) * (Pxaux + r * c30) - 2.0 * (Pyaux + r * s30)) / (2.0 * Pzaux)), 2.0);
 8004d1c:	ed97 7b04 	vldr	d7, [r7, #16]
 8004d20:	ed9f 6be1 	vldr	d6, [pc, #900]	; 80050a8 <cinematicaInversa+0x3e8>
 8004d24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d28:	ed9f 6be1 	vldr	d6, [pc, #900]	; 80050b0 <cinematicaInversa+0x3f0>
 8004d2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d30:	ed9f 6be1 	vldr	d6, [pc, #900]	; 80050b8 <cinematicaInversa+0x3f8>
 8004d34:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d38:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d3c:	ed9f 5be0 	vldr	d5, [pc, #896]	; 80050c0 <cinematicaInversa+0x400>
 8004d40:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004d44:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d48:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d4c:	ed97 7b00 	vldr	d7, [r7]
 8004d50:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d54:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004d58:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004d5c:	eeb0 0b45 	vmov.f64	d0, d5
 8004d60:	f00c fe0a 	bl	8011978 <pow>
 8004d64:	eeb0 7b40 	vmov.f64	d7, d0
 8004d68:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004d6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d70:	4be4      	ldr	r3, [pc, #912]	; (8005104 <cinematicaInversa+0x444>)
 8004d72:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2.0 * Pzaux)), 2.0);
 8004d76:	ed97 7b04 	vldr	d7, [r7, #16]
 8004d7a:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 80050a8 <cinematicaInversa+0x3e8>
 8004d7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d82:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 80050b0 <cinematicaInversa+0x3f0>
 8004d86:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004d8a:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d8e:	ed9f 5bcc 	vldr	d5, [pc, #816]	; 80050c0 <cinematicaInversa+0x400>
 8004d92:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004d96:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d9e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80050c8 <cinematicaInversa+0x408>
 8004da2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004da6:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 80050a0 <cinematicaInversa+0x3e0>
 8004daa:	ee37 6b06 	vadd.f64	d6, d7, d6
 8004dae:	ed97 7b00 	vldr	d7, [r7]
 8004db2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004db6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004dba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004dbe:	eeb0 0b45 	vmov.f64	d0, d5
 8004dc2:	f00c fdd9 	bl	8011978 <pow>
 8004dc6:	eeb0 7b40 	vmov.f64	d7, d0
 8004dca:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004dce:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004dd2:	4bcd      	ldr	r3, [pc, #820]	; (8005108 <cinematicaInversa+0x448>)
 8004dd4:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (Pyaux - r))) / (2.0 * Pzaux)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((Pyaux - r), 2.0) + pow(Pzaux, 2.0) - pow(L2, 2.0) + pow(Pxaux, 2)) / (2 * Pzaux)));
 8004dd8:	ed97 7b02 	vldr	d7, [r7, #8]
 8004ddc:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8005098 <cinematicaInversa+0x3d8>
 8004de0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004de4:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80050a0 <cinematicaInversa+0x3e0>
 8004de8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004dec:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8004df0:	ee27 5b06 	vmul.f64	d5, d7, d6
 8004df4:	ed97 7b00 	vldr	d7, [r7]
 8004df8:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004dfc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004e00:	ee37 8b07 	vadd.f64	d8, d7, d7
 8004e04:	ed97 7b02 	vldr	d7, [r7, #8]
 8004e08:	ed9f 6ba3 	vldr	d6, [pc, #652]	; 8005098 <cinematicaInversa+0x3d8>
 8004e0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e10:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e14:	eeb0 0b47 	vmov.f64	d0, d7
 8004e18:	f00c fdae 	bl	8011978 <pow>
 8004e1c:	eeb0 7b40 	vmov.f64	d7, d0
 8004e20:	ed9f 6bab 	vldr	d6, [pc, #684]	; 80050d0 <cinematicaInversa+0x410>
 8004e24:	ee37 9b06 	vadd.f64	d9, d7, d6
 8004e28:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e2c:	ed97 0b00 	vldr	d0, [r7]
 8004e30:	f00c fda2 	bl	8011978 <pow>
 8004e34:	eeb0 7b40 	vmov.f64	d7, d0
 8004e38:	ee39 7b07 	vadd.f64	d7, d9, d7
 8004e3c:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 80050d8 <cinematicaInversa+0x418>
 8004e40:	ee37 9b46 	vsub.f64	d9, d7, d6
 8004e44:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e48:	ed97 0b04 	vldr	d0, [r7, #16]
 8004e4c:	f00c fd94 	bl	8011978 <pow>
 8004e50:	eeb0 7b40 	vmov.f64	d7, d0
 8004e54:	ee39 5b07 	vadd.f64	d5, d9, d7
 8004e58:	ed97 7b00 	vldr	d7, [r7]
 8004e5c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004e60:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004e64:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004e68:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 80050e0 <cinematicaInversa+0x420>
 8004e6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e70:	4ba6      	ldr	r3, [pc, #664]	; (800510c <cinematicaInversa+0x44c>)
 8004e72:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * c30 - 2.0 * R * s30 + 2.0 * (((2.0 * sqrt(3) * R * c30 + 2.0 * R * s30)	+ (-2 * sqrt(3) * (Pxaux + r * c30)	- 2.0 * (Pyaux + r * s30))) / (2 * Pzaux)) * ((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2 * Pzaux));
 8004e76:	ed97 7b04 	vldr	d7, [r7, #16]
 8004e7a:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 80050a8 <cinematicaInversa+0x3e8>
 8004e7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e82:	ed9f 6b99 	vldr	d6, [pc, #612]	; 80050e8 <cinematicaInversa+0x428>
 8004e86:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004e8a:	ed97 7b02 	vldr	d7, [r7, #8]
 8004e8e:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 80050c0 <cinematicaInversa+0x400>
 8004e92:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004e96:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004e9e:	ed9f 6b86 	vldr	d6, [pc, #536]	; 80050b8 <cinematicaInversa+0x3f8>
 8004ea2:	ee37 5b06 	vadd.f64	d5, d7, d6
 8004ea6:	ed97 7b00 	vldr	d7, [r7]
 8004eaa:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004eae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004eb2:	ee37 8b07 	vadd.f64	d8, d7, d7
 8004eb6:	ed97 7b04 	vldr	d7, [r7, #16]
 8004eba:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 80050a8 <cinematicaInversa+0x3e8>
 8004ebe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ec2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004ec6:	eeb0 0b47 	vmov.f64	d0, d7
 8004eca:	f00c fd55 	bl	8011978 <pow>
 8004ece:	eeb0 7b40 	vmov.f64	d7, d0
 8004ed2:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 80050d0 <cinematicaInversa+0x410>
 8004ed6:	ee37 9b06 	vadd.f64	d9, d7, d6
 8004eda:	ed97 7b02 	vldr	d7, [r7, #8]
 8004ede:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80050c0 <cinematicaInversa+0x400>
 8004ee2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ee6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004eea:	eeb0 0b47 	vmov.f64	d0, d7
 8004eee:	f00c fd43 	bl	8011978 <pow>
 8004ef2:	eeb0 7b40 	vmov.f64	d7, d0
 8004ef6:	ee39 9b07 	vadd.f64	d9, d9, d7
 8004efa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004efe:	ed97 0b00 	vldr	d0, [r7]
 8004f02:	f00c fd39 	bl	8011978 <pow>
 8004f06:	eeb0 7b40 	vmov.f64	d7, d0
 8004f0a:	ee39 7b07 	vadd.f64	d7, d9, d7
 8004f0e:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80050d8 <cinematicaInversa+0x418>
 8004f12:	ee37 5b46 	vsub.f64	d5, d7, d6
 8004f16:	ed97 7b00 	vldr	d7, [r7]
 8004f1a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004f1e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004f22:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004f26:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80050b8 <cinematicaInversa+0x3f8>
 8004f2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f2e:	4b78      	ldr	r3, [pc, #480]	; (8005110 <cinematicaInversa+0x450>)
 8004f30:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * c150 - 2.0 * R * s150 + 2.0 * ((2.0 * sqrt(3) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2 * Pzaux)) * ((pow((Pxaux + r * c150), 2) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux));
 8004f34:	ed97 7b04 	vldr	d7, [r7, #16]
 8004f38:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80050a8 <cinematicaInversa+0x3e8>
 8004f3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f40:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80050b0 <cinematicaInversa+0x3f0>
 8004f44:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004f48:	ed97 7b02 	vldr	d7, [r7, #8]
 8004f4c:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 80050c0 <cinematicaInversa+0x400>
 8004f50:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004f54:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f5c:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80050c8 <cinematicaInversa+0x408>
 8004f60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f64:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80050a0 <cinematicaInversa+0x3e0>
 8004f68:	ee37 5b06 	vadd.f64	d5, d7, d6
 8004f6c:	ed97 7b00 	vldr	d7, [r7]
 8004f70:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004f74:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004f78:	ee37 8b07 	vadd.f64	d8, d7, d7
 8004f7c:	ed97 7b04 	vldr	d7, [r7, #16]
 8004f80:	ed9f 6b49 	vldr	d6, [pc, #292]	; 80050a8 <cinematicaInversa+0x3e8>
 8004f84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f88:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f8c:	eeb0 0b47 	vmov.f64	d0, d7
 8004f90:	f00c fcf2 	bl	8011978 <pow>
 8004f94:	eeb0 9b40 	vmov.f64	d9, d0
 8004f98:	ed97 7b02 	vldr	d7, [r7, #8]
 8004f9c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 80050c0 <cinematicaInversa+0x400>
 8004fa0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004fa4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004fa8:	eeb0 0b47 	vmov.f64	d0, d7
 8004fac:	f00c fce4 	bl	8011978 <pow>
 8004fb0:	eeb0 7b40 	vmov.f64	d7, d0
 8004fb4:	ee39 9b07 	vadd.f64	d9, d9, d7
 8004fb8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004fbc:	ed97 0b00 	vldr	d0, [r7]
 8004fc0:	f00c fcda 	bl	8011978 <pow>
 8004fc4:	eeb0 7b40 	vmov.f64	d7, d0
 8004fc8:	ee39 7b07 	vadd.f64	d7, d9, d7
 8004fcc:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80050d8 <cinematicaInversa+0x418>
 8004fd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004fd4:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80050f0 <cinematicaInversa+0x430>
 8004fd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004fdc:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80050f8 <cinematicaInversa+0x438>
 8004fe0:	ee37 5b06 	vadd.f64	d5, d7, d6
 8004fe4:	ed97 7b00 	vldr	d7, [r7]
 8004fe8:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004fec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004ff0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004ff4:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80050b8 <cinematicaInversa+0x3f8>
 8004ff8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ffc:	4b45      	ldr	r3, [pc, #276]	; (8005114 <cinematicaInversa+0x454>)
 8004ffe:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((Pyaux - r), 2) + pow(Pzaux, 2) - pow(L2, 2) + pow(Pxaux, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux)), 2) - pow(L1, 2) + pow(R, 2));
 8005002:	ed97 7b02 	vldr	d7, [r7, #8]
 8005006:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8005098 <cinematicaInversa+0x3d8>
 800500a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800500e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005012:	eeb0 0b47 	vmov.f64	d0, d7
 8005016:	f00c fcaf 	bl	8011978 <pow>
 800501a:	eeb0 8b40 	vmov.f64	d8, d0
 800501e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005022:	ed97 0b00 	vldr	d0, [r7]
 8005026:	f00c fca7 	bl	8011978 <pow>
 800502a:	eeb0 7b40 	vmov.f64	d7, d0
 800502e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005032:	ed9f 6b29 	vldr	d6, [pc, #164]	; 80050d8 <cinematicaInversa+0x418>
 8005036:	ee37 8b46 	vsub.f64	d8, d7, d6
 800503a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800503e:	ed97 0b04 	vldr	d0, [r7, #16]
 8005042:	f00c fc99 	bl	8011978 <pow>
 8005046:	eeb0 7b40 	vmov.f64	d7, d0
 800504a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800504e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80050f0 <cinematicaInversa+0x430>
 8005052:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005056:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80050f8 <cinematicaInversa+0x438>
 800505a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800505e:	ed97 7b00 	vldr	d7, [r7]
 8005062:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005066:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800506a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800506e:	eeb0 0b45 	vmov.f64	d0, d5
 8005072:	f00c fc81 	bl	8011978 <pow>
 8005076:	eeb0 7b40 	vmov.f64	d7, d0
 800507a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80050f8 <cinematicaInversa+0x438>
 800507e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005082:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 80050f0 <cinematicaInversa+0x430>
 8005086:	ee37 7b06 	vadd.f64	d7, d7, d6
 800508a:	4b23      	ldr	r3, [pc, #140]	; (8005118 <cinematicaInversa+0x458>)
 800508c:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2.0 * Pzaux)), 2.0);
 8005090:	ed97 7b04 	vldr	d7, [r7, #16]
 8005094:	e042      	b.n	800511c <cinematicaInversa+0x45c>
 8005096:	bf00      	nop
 8005098:	1eb851ec 	.word	0x1eb851ec
 800509c:	3fb1eb85 	.word	0x3fb1eb85
 80050a0:	24dd2f1b 	.word	0x24dd2f1b
 80050a4:	3fc58106 	.word	0x3fc58106
 80050a8:	5625749b 	.word	0x5625749b
 80050ac:	3faf09d1 	.word	0x3faf09d1
 80050b0:	e8584caa 	.word	0xe8584caa
 80050b4:	400bb67a 	.word	0x400bb67a
 80050b8:	24dd2f1d 	.word	0x24dd2f1d
 80050bc:	3fe58106 	.word	0x3fe58106
 80050c0:	1eb851ec 	.word	0x1eb851ec
 80050c4:	3fa1eb85 	.word	0x3fa1eb85
 80050c8:	9ba5e356 	.word	0x9ba5e356
 80050cc:	3fe020c4 	.word	0x3fe020c4
 80050d0:	3532e7b5 	.word	0x3532e7b5
 80050d4:	3fc0de09 	.word	0x3fc0de09
 80050d8:	70a3d70a 	.word	0x70a3d70a
 80050dc:	3fd70a3d 	.word	0x3fd70a3d
 80050e0:	24dd2f1b 	.word	0x24dd2f1b
 80050e4:	3fd58106 	.word	0x3fd58106
 80050e8:	e8584caa 	.word	0xe8584caa
 80050ec:	c00bb67a 	.word	0xc00bb67a
 80050f0:	93d96639 	.word	0x93d96639
 80050f4:	3f9ce6c0 	.word	0x3f9ce6c0
 80050f8:	47ae147c 	.word	0x47ae147c
 80050fc:	3fc47ae1 	.word	0x3fc47ae1
 8005100:	24000718 	.word	0x24000718
 8005104:	24000760 	.word	0x24000760
 8005108:	240007a8 	.word	0x240007a8
 800510c:	24000720 	.word	0x24000720
 8005110:	24000768 	.word	0x24000768
 8005114:	240007b0 	.word	0x240007b0
 8005118:	24000728 	.word	0x24000728
 800511c:	ed9f 6be4 	vldr	d6, [pc, #912]	; 80054b0 <cinematicaInversa+0x7f0>
 8005120:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005124:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005128:	eeb0 0b47 	vmov.f64	d0, d7
 800512c:	f00c fc24 	bl	8011978 <pow>
 8005130:	eeb0 7b40 	vmov.f64	d7, d0
 8005134:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80054b8 <cinematicaInversa+0x7f8>
 8005138:	ee37 8b06 	vadd.f64	d8, d7, d6
 800513c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005140:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 80054c0 <cinematicaInversa+0x800>
 8005144:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005148:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800514c:	eeb0 0b47 	vmov.f64	d0, d7
 8005150:	f00c fc12 	bl	8011978 <pow>
 8005154:	eeb0 7b40 	vmov.f64	d7, d0
 8005158:	ee38 8b07 	vadd.f64	d8, d8, d7
 800515c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005160:	ed97 0b00 	vldr	d0, [r7]
 8005164:	f00c fc08 	bl	8011978 <pow>
 8005168:	eeb0 7b40 	vmov.f64	d7, d0
 800516c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005170:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 80054c8 <cinematicaInversa+0x808>
 8005174:	ee37 6b46 	vsub.f64	d6, d7, d6
 8005178:	ed97 7b00 	vldr	d7, [r7]
 800517c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005180:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005184:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005188:	eeb0 0b45 	vmov.f64	d0, d5
 800518c:	f00c fbf4 	bl	8011978 <pow>
 8005190:	eeb0 7b40 	vmov.f64	d7, d0
 8005194:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 80054b8 <cinematicaInversa+0x7f8>
 8005198:	ee37 7b46 	vsub.f64	d7, d7, d6
 800519c:	4bd2      	ldr	r3, [pc, #840]	; (80054e8 <cinematicaInversa+0x828>)
 800519e:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((Pxaux + r * c150), 2) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * Pzaux)), 2.0);
 80051a2:	ed97 7b04 	vldr	d7, [r7, #16]
 80051a6:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 80054b0 <cinematicaInversa+0x7f0>
 80051aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051ae:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051b2:	eeb0 0b47 	vmov.f64	d0, d7
 80051b6:	f00c fbdf 	bl	8011978 <pow>
 80051ba:	eeb0 8b40 	vmov.f64	d8, d0
 80051be:	ed97 7b02 	vldr	d7, [r7, #8]
 80051c2:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 80054c0 <cinematicaInversa+0x800>
 80051c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051ca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051ce:	eeb0 0b47 	vmov.f64	d0, d7
 80051d2:	f00c fbd1 	bl	8011978 <pow>
 80051d6:	eeb0 7b40 	vmov.f64	d7, d0
 80051da:	ee38 8b07 	vadd.f64	d8, d8, d7
 80051de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051e2:	ed97 0b00 	vldr	d0, [r7]
 80051e6:	f00c fbc7 	bl	8011978 <pow>
 80051ea:	eeb0 7b40 	vmov.f64	d7, d0
 80051ee:	ee38 7b07 	vadd.f64	d7, d8, d7
 80051f2:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80054c8 <cinematicaInversa+0x808>
 80051f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051fa:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80054d0 <cinematicaInversa+0x810>
 80051fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005202:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80054d8 <cinematicaInversa+0x818>
 8005206:	ee37 6b06 	vadd.f64	d6, d7, d6
 800520a:	ed97 7b00 	vldr	d7, [r7]
 800520e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005212:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005216:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800521a:	eeb0 0b45 	vmov.f64	d0, d5
 800521e:	f00c fbab 	bl	8011978 <pow>
 8005222:	eeb0 7b40 	vmov.f64	d7, d0
 8005226:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80054b8 <cinematicaInversa+0x7f8>
 800522a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800522e:	4baf      	ldr	r3, [pc, #700]	; (80054ec <cinematicaInversa+0x82c>)
 8005230:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8005234:	4bae      	ldr	r3, [pc, #696]	; (80054f0 <cinematicaInversa+0x830>)
 8005236:	ed93 7b00 	vldr	d7, [r3]
 800523a:	eeb1 8b47 	vneg.f64	d8, d7
 800523e:	4bac      	ldr	r3, [pc, #688]	; (80054f0 <cinematicaInversa+0x830>)
 8005240:	ed93 7b00 	vldr	d7, [r3]
 8005244:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005248:	eeb0 0b47 	vmov.f64	d0, d7
 800524c:	f00c fb94 	bl	8011978 <pow>
 8005250:	eeb0 5b40 	vmov.f64	d5, d0
 8005254:	4ba7      	ldr	r3, [pc, #668]	; (80054f4 <cinematicaInversa+0x834>)
 8005256:	ed93 7b00 	vldr	d7, [r3]
 800525a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800525e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005262:	4ba5      	ldr	r3, [pc, #660]	; (80054f8 <cinematicaInversa+0x838>)
 8005264:	ed93 7b00 	vldr	d7, [r3]
 8005268:	ee26 7b07 	vmul.f64	d7, d6, d7
 800526c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005270:	eeb0 0b47 	vmov.f64	d0, d7
 8005274:	f00c fe00 	bl	8011e78 <sqrt>
 8005278:	eeb0 7b40 	vmov.f64	d7, d0
 800527c:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005280:	4b9c      	ldr	r3, [pc, #624]	; (80054f4 <cinematicaInversa+0x834>)
 8005282:	ed93 7b00 	vldr	d7, [r3]
 8005286:	ee37 6b07 	vadd.f64	d6, d7, d7
 800528a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800528e:	4b9b      	ldr	r3, [pc, #620]	; (80054fc <cinematicaInversa+0x83c>)
 8005290:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8005294:	4b96      	ldr	r3, [pc, #600]	; (80054f0 <cinematicaInversa+0x830>)
 8005296:	ed93 7b00 	vldr	d7, [r3]
 800529a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800529e:	eeb0 0b47 	vmov.f64	d0, d7
 80052a2:	f00c fb69 	bl	8011978 <pow>
 80052a6:	eeb0 5b40 	vmov.f64	d5, d0
 80052aa:	4b92      	ldr	r3, [pc, #584]	; (80054f4 <cinematicaInversa+0x834>)
 80052ac:	ed93 7b00 	vldr	d7, [r3]
 80052b0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80052b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80052b8:	4b8f      	ldr	r3, [pc, #572]	; (80054f8 <cinematicaInversa+0x838>)
 80052ba:	ed93 7b00 	vldr	d7, [r3]
 80052be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80052c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80052c6:	eeb0 0b47 	vmov.f64	d0, d7
 80052ca:	f00c fdd5 	bl	8011e78 <sqrt>
 80052ce:	eeb0 6b40 	vmov.f64	d6, d0
 80052d2:	4b87      	ldr	r3, [pc, #540]	; (80054f0 <cinematicaInversa+0x830>)
 80052d4:	ed93 7b00 	vldr	d7, [r3]
 80052d8:	ee36 5b47 	vsub.f64	d5, d6, d7
 80052dc:	4b85      	ldr	r3, [pc, #532]	; (80054f4 <cinematicaInversa+0x834>)
 80052de:	ed93 7b00 	vldr	d7, [r3]
 80052e2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80052e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80052ea:	4b85      	ldr	r3, [pc, #532]	; (8005500 <cinematicaInversa+0x840>)
 80052ec:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80052f0:	4b84      	ldr	r3, [pc, #528]	; (8005504 <cinematicaInversa+0x844>)
 80052f2:	ed93 7b00 	vldr	d7, [r3]
 80052f6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80052fa:	eeb0 0b47 	vmov.f64	d0, d7
 80052fe:	f00c fb3b 	bl	8011978 <pow>
 8005302:	eeb0 5b40 	vmov.f64	d5, d0
 8005306:	4b80      	ldr	r3, [pc, #512]	; (8005508 <cinematicaInversa+0x848>)
 8005308:	ed93 7b00 	vldr	d7, [r3]
 800530c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005310:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005314:	4b74      	ldr	r3, [pc, #464]	; (80054e8 <cinematicaInversa+0x828>)
 8005316:	ed93 7b00 	vldr	d7, [r3]
 800531a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800531e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005322:	eeb0 0b47 	vmov.f64	d0, d7
 8005326:	f00c fda7 	bl	8011e78 <sqrt>
 800532a:	eeb0 6b40 	vmov.f64	d6, d0
 800532e:	4b75      	ldr	r3, [pc, #468]	; (8005504 <cinematicaInversa+0x844>)
 8005330:	ed93 7b00 	vldr	d7, [r3]
 8005334:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005338:	4b73      	ldr	r3, [pc, #460]	; (8005508 <cinematicaInversa+0x848>)
 800533a:	ed93 7b00 	vldr	d7, [r3]
 800533e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005342:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005346:	4b71      	ldr	r3, [pc, #452]	; (800550c <cinematicaInversa+0x84c>)
 8005348:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 800534c:	4b6d      	ldr	r3, [pc, #436]	; (8005504 <cinematicaInversa+0x844>)
 800534e:	ed93 7b00 	vldr	d7, [r3]
 8005352:	eeb1 8b47 	vneg.f64	d8, d7
 8005356:	4b6b      	ldr	r3, [pc, #428]	; (8005504 <cinematicaInversa+0x844>)
 8005358:	ed93 7b00 	vldr	d7, [r3]
 800535c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005360:	eeb0 0b47 	vmov.f64	d0, d7
 8005364:	f00c fb08 	bl	8011978 <pow>
 8005368:	eeb0 5b40 	vmov.f64	d5, d0
 800536c:	4b66      	ldr	r3, [pc, #408]	; (8005508 <cinematicaInversa+0x848>)
 800536e:	ed93 7b00 	vldr	d7, [r3]
 8005372:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005376:	ee27 6b06 	vmul.f64	d6, d7, d6
 800537a:	4b5b      	ldr	r3, [pc, #364]	; (80054e8 <cinematicaInversa+0x828>)
 800537c:	ed93 7b00 	vldr	d7, [r3]
 8005380:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005384:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005388:	eeb0 0b47 	vmov.f64	d0, d7
 800538c:	f00c fd74 	bl	8011e78 <sqrt>
 8005390:	eeb0 7b40 	vmov.f64	d7, d0
 8005394:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005398:	4b5b      	ldr	r3, [pc, #364]	; (8005508 <cinematicaInversa+0x848>)
 800539a:	ed93 7b00 	vldr	d7, [r3]
 800539e:	ee37 6b07 	vadd.f64	d6, d7, d7
 80053a2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80053a6:	4b5a      	ldr	r3, [pc, #360]	; (8005510 <cinematicaInversa+0x850>)
 80053a8:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 80053ac:	4b59      	ldr	r3, [pc, #356]	; (8005514 <cinematicaInversa+0x854>)
 80053ae:	ed93 7b00 	vldr	d7, [r3]
 80053b2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80053b6:	eeb0 0b47 	vmov.f64	d0, d7
 80053ba:	f00c fadd 	bl	8011978 <pow>
 80053be:	eeb0 5b40 	vmov.f64	d5, d0
 80053c2:	4b55      	ldr	r3, [pc, #340]	; (8005518 <cinematicaInversa+0x858>)
 80053c4:	ed93 7b00 	vldr	d7, [r3]
 80053c8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80053cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80053d0:	4b46      	ldr	r3, [pc, #280]	; (80054ec <cinematicaInversa+0x82c>)
 80053d2:	ed93 7b00 	vldr	d7, [r3]
 80053d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80053da:	ee35 7b47 	vsub.f64	d7, d5, d7
 80053de:	eeb0 0b47 	vmov.f64	d0, d7
 80053e2:	f00c fd49 	bl	8011e78 <sqrt>
 80053e6:	eeb0 6b40 	vmov.f64	d6, d0
 80053ea:	4b4a      	ldr	r3, [pc, #296]	; (8005514 <cinematicaInversa+0x854>)
 80053ec:	ed93 7b00 	vldr	d7, [r3]
 80053f0:	ee36 5b47 	vsub.f64	d5, d6, d7
 80053f4:	4b48      	ldr	r3, [pc, #288]	; (8005518 <cinematicaInversa+0x858>)
 80053f6:	ed93 7b00 	vldr	d7, [r3]
 80053fa:	ee37 6b07 	vadd.f64	d6, d7, d7
 80053fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005402:	4b46      	ldr	r3, [pc, #280]	; (800551c <cinematicaInversa+0x85c>)
 8005404:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8005408:	4b42      	ldr	r3, [pc, #264]	; (8005514 <cinematicaInversa+0x854>)
 800540a:	ed93 7b00 	vldr	d7, [r3]
 800540e:	eeb1 8b47 	vneg.f64	d8, d7
 8005412:	4b40      	ldr	r3, [pc, #256]	; (8005514 <cinematicaInversa+0x854>)
 8005414:	ed93 7b00 	vldr	d7, [r3]
 8005418:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800541c:	eeb0 0b47 	vmov.f64	d0, d7
 8005420:	f00c faaa 	bl	8011978 <pow>
 8005424:	eeb0 5b40 	vmov.f64	d5, d0
 8005428:	4b3b      	ldr	r3, [pc, #236]	; (8005518 <cinematicaInversa+0x858>)
 800542a:	ed93 7b00 	vldr	d7, [r3]
 800542e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005432:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005436:	4b2d      	ldr	r3, [pc, #180]	; (80054ec <cinematicaInversa+0x82c>)
 8005438:	ed93 7b00 	vldr	d7, [r3]
 800543c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005440:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005444:	eeb0 0b47 	vmov.f64	d0, d7
 8005448:	f00c fd16 	bl	8011e78 <sqrt>
 800544c:	eeb0 7b40 	vmov.f64	d7, d0
 8005450:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005454:	4b30      	ldr	r3, [pc, #192]	; (8005518 <cinematicaInversa+0x858>)
 8005456:	ed93 7b00 	vldr	d7, [r3]
 800545a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800545e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005462:	4b2f      	ldr	r3, [pc, #188]	; (8005520 <cinematicaInversa+0x860>)
 8005464:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8005468:	492e      	ldr	r1, [pc, #184]	; (8005524 <cinematicaInversa+0x864>)
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	e9c1 2300 	strd	r2, r3, [r1]
	XJ1_2 = 0;
 8005476:	492c      	ldr	r1, [pc, #176]	; (8005528 <cinematicaInversa+0x868>)
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8005484:	4b21      	ldr	r3, [pc, #132]	; (800550c <cinematicaInversa+0x84c>)
 8005486:	ed93 7b00 	vldr	d7, [r3]
 800548a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80054e0 <cinematicaInversa+0x820>
 800548e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005492:	4b26      	ldr	r3, [pc, #152]	; (800552c <cinematicaInversa+0x86c>)
 8005494:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <cinematicaInversa+0x850>)
 800549a:	ed93 7b00 	vldr	d7, [r3]
 800549e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80054e0 <cinematicaInversa+0x820>
 80054a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80054a6:	4b22      	ldr	r3, [pc, #136]	; (8005530 <cinematicaInversa+0x870>)
 80054a8:	ed83 7b00 	vstr	d7, [r3]
 80054ac:	e042      	b.n	8005534 <cinematicaInversa+0x874>
 80054ae:	bf00      	nop
 80054b0:	5625749b 	.word	0x5625749b
 80054b4:	3faf09d1 	.word	0x3faf09d1
 80054b8:	3532e7b5 	.word	0x3532e7b5
 80054bc:	3fc0de09 	.word	0x3fc0de09
 80054c0:	1eb851ec 	.word	0x1eb851ec
 80054c4:	3fa1eb85 	.word	0x3fa1eb85
 80054c8:	70a3d70a 	.word	0x70a3d70a
 80054cc:	3fd70a3d 	.word	0x3fd70a3d
 80054d0:	93d96639 	.word	0x93d96639
 80054d4:	3f9ce6c0 	.word	0x3f9ce6c0
 80054d8:	47ae147c 	.word	0x47ae147c
 80054dc:	3fc47ae1 	.word	0x3fc47ae1
 80054e0:	e8584caa 	.word	0xe8584caa
 80054e4:	3ffbb67a 	.word	0x3ffbb67a
 80054e8:	24000770 	.word	0x24000770
 80054ec:	240007b8 	.word	0x240007b8
 80054f0:	24000720 	.word	0x24000720
 80054f4:	24000718 	.word	0x24000718
 80054f8:	24000728 	.word	0x24000728
 80054fc:	24000740 	.word	0x24000740
 8005500:	24000748 	.word	0x24000748
 8005504:	24000768 	.word	0x24000768
 8005508:	24000760 	.word	0x24000760
 800550c:	24000788 	.word	0x24000788
 8005510:	24000790 	.word	0x24000790
 8005514:	240007b0 	.word	0x240007b0
 8005518:	240007a8 	.word	0x240007a8
 800551c:	240007d0 	.word	0x240007d0
 8005520:	240007d8 	.word	0x240007d8
 8005524:	24000730 	.word	0x24000730
 8005528:	24000738 	.word	0x24000738
 800552c:	24000778 	.word	0x24000778
 8005530:	24000780 	.word	0x24000780
	XJ3_1 = -sqrt(3) * YJ3_1;
 8005534:	4bf6      	ldr	r3, [pc, #984]	; (8005910 <cinematicaInversa+0xc50>)
 8005536:	ed93 7b00 	vldr	d7, [r3]
 800553a:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 80058a8 <cinematicaInversa+0xbe8>
 800553e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005542:	4bf4      	ldr	r3, [pc, #976]	; (8005914 <cinematicaInversa+0xc54>)
 8005544:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8005548:	4bf3      	ldr	r3, [pc, #972]	; (8005918 <cinematicaInversa+0xc58>)
 800554a:	ed93 7b00 	vldr	d7, [r3]
 800554e:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 80058a8 <cinematicaInversa+0xbe8>
 8005552:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005556:	4bf1      	ldr	r3, [pc, #964]	; (800591c <cinematicaInversa+0xc5c>)
 8005558:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (Pyaux - r))) / (2 * Pzaux))) + ((pow((Pyaux - r), 2) + pow(Pzaux, 2) - pow(L2, 2) + pow(Pxaux, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux)));
 800555c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005560:	ed9f 6bd3 	vldr	d6, [pc, #844]	; 80058b0 <cinematicaInversa+0xbf0>
 8005564:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005568:	ed9f 6bd3 	vldr	d6, [pc, #844]	; 80058b8 <cinematicaInversa+0xbf8>
 800556c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005570:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8005574:	ee27 5b06 	vmul.f64	d5, d7, d6
 8005578:	ed97 7b00 	vldr	d7, [r7]
 800557c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005580:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005584:	4be6      	ldr	r3, [pc, #920]	; (8005920 <cinematicaInversa+0xc60>)
 8005586:	ed93 7b00 	vldr	d7, [r3]
 800558a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800558e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005592:	ed9f 6bc7 	vldr	d6, [pc, #796]	; 80058b0 <cinematicaInversa+0xbf0>
 8005596:	ee37 7b46 	vsub.f64	d7, d7, d6
 800559a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800559e:	eeb0 0b47 	vmov.f64	d0, d7
 80055a2:	f00c f9e9 	bl	8011978 <pow>
 80055a6:	eeb0 9b40 	vmov.f64	d9, d0
 80055aa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055ae:	ed97 0b00 	vldr	d0, [r7]
 80055b2:	f00c f9e1 	bl	8011978 <pow>
 80055b6:	eeb0 7b40 	vmov.f64	d7, d0
 80055ba:	ee39 7b07 	vadd.f64	d7, d9, d7
 80055be:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 80058c0 <cinematicaInversa+0xc00>
 80055c2:	ee37 9b46 	vsub.f64	d9, d7, d6
 80055c6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055ca:	ed97 0b04 	vldr	d0, [r7, #16]
 80055ce:	f00c f9d3 	bl	8011978 <pow>
 80055d2:	eeb0 7b40 	vmov.f64	d7, d0
 80055d6:	ee39 7b07 	vadd.f64	d7, d9, d7
 80055da:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 80058c8 <cinematicaInversa+0xc08>
 80055de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055e2:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 80058d0 <cinematicaInversa+0xc10>
 80055e6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80055ea:	ed97 7b00 	vldr	d7, [r7]
 80055ee:	ee37 6b07 	vadd.f64	d6, d7, d7
 80055f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80055f6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80055fa:	4bca      	ldr	r3, [pc, #808]	; (8005924 <cinematicaInversa+0xc64>)
 80055fc:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (Pyaux - r))) / (2 * Pzaux))) + ((pow((Pyaux - r), 2) + pow(Pzaux, 2) - pow(L2, 2) + pow(Pxaux, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux)));
 8005600:	ed97 7b02 	vldr	d7, [r7, #8]
 8005604:	ed9f 6baa 	vldr	d6, [pc, #680]	; 80058b0 <cinematicaInversa+0xbf0>
 8005608:	ee37 7b46 	vsub.f64	d7, d7, d6
 800560c:	ed9f 6baa 	vldr	d6, [pc, #680]	; 80058b8 <cinematicaInversa+0xbf8>
 8005610:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005614:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8005618:	ee27 5b06 	vmul.f64	d5, d7, d6
 800561c:	ed97 7b00 	vldr	d7, [r7]
 8005620:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005624:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005628:	4bbf      	ldr	r3, [pc, #764]	; (8005928 <cinematicaInversa+0xc68>)
 800562a:	ed93 7b00 	vldr	d7, [r3]
 800562e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005632:	ed97 7b02 	vldr	d7, [r7, #8]
 8005636:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 80058b0 <cinematicaInversa+0xbf0>
 800563a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800563e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005642:	eeb0 0b47 	vmov.f64	d0, d7
 8005646:	f00c f997 	bl	8011978 <pow>
 800564a:	eeb0 9b40 	vmov.f64	d9, d0
 800564e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005652:	ed97 0b00 	vldr	d0, [r7]
 8005656:	f00c f98f 	bl	8011978 <pow>
 800565a:	eeb0 7b40 	vmov.f64	d7, d0
 800565e:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005662:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80058c0 <cinematicaInversa+0xc00>
 8005666:	ee37 9b46 	vsub.f64	d9, d7, d6
 800566a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800566e:	ed97 0b04 	vldr	d0, [r7, #16]
 8005672:	f00c f981 	bl	8011978 <pow>
 8005676:	eeb0 7b40 	vmov.f64	d7, d0
 800567a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800567e:	ed9f 6b92 	vldr	d6, [pc, #584]	; 80058c8 <cinematicaInversa+0xc08>
 8005682:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005686:	ed9f 6b92 	vldr	d6, [pc, #584]	; 80058d0 <cinematicaInversa+0xc10>
 800568a:	ee37 5b06 	vadd.f64	d5, d7, d6
 800568e:	ed97 7b00 	vldr	d7, [r7]
 8005692:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005696:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800569a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800569e:	4ba3      	ldr	r3, [pc, #652]	; (800592c <cinematicaInversa+0xc6c>)
 80056a0:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * c30 + 2.0 * R * s30) + (-2 * sqrt(3) * (Pxaux + r * c30) - 2.0 * (Pyaux + r * s30))) / (2 * Pzaux)) + ((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2 * Pzaux));
 80056a4:	ed97 7b04 	vldr	d7, [r7, #16]
 80056a8:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 80058d8 <cinematicaInversa+0xc18>
 80056ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056b0:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 80058e0 <cinematicaInversa+0xc20>
 80056b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80056b8:	ed97 7b02 	vldr	d7, [r7, #8]
 80056bc:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 80058e8 <cinematicaInversa+0xc28>
 80056c0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80056c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80056c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80056cc:	ed9f 6b88 	vldr	d6, [pc, #544]	; 80058f0 <cinematicaInversa+0xc30>
 80056d0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80056d4:	ed97 7b00 	vldr	d7, [r7]
 80056d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80056dc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80056e0:	4b93      	ldr	r3, [pc, #588]	; (8005930 <cinematicaInversa+0xc70>)
 80056e2:	ed93 7b00 	vldr	d7, [r3]
 80056e6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80056ea:	ed97 7b04 	vldr	d7, [r7, #16]
 80056ee:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80058d8 <cinematicaInversa+0xc18>
 80056f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056f6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80056fa:	eeb0 0b47 	vmov.f64	d0, d7
 80056fe:	f00c f93b 	bl	8011978 <pow>
 8005702:	eeb0 7b40 	vmov.f64	d7, d0
 8005706:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80058f8 <cinematicaInversa+0xc38>
 800570a:	ee37 9b06 	vadd.f64	d9, d7, d6
 800570e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005712:	ed9f 6b75 	vldr	d6, [pc, #468]	; 80058e8 <cinematicaInversa+0xc28>
 8005716:	ee37 7b06 	vadd.f64	d7, d7, d6
 800571a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800571e:	eeb0 0b47 	vmov.f64	d0, d7
 8005722:	f00c f929 	bl	8011978 <pow>
 8005726:	eeb0 7b40 	vmov.f64	d7, d0
 800572a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800572e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005732:	ed97 0b00 	vldr	d0, [r7]
 8005736:	f00c f91f 	bl	8011978 <pow>
 800573a:	eeb0 7b40 	vmov.f64	d7, d0
 800573e:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005742:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 80058c0 <cinematicaInversa+0xc00>
 8005746:	ee37 5b46 	vsub.f64	d5, d7, d6
 800574a:	ed97 7b00 	vldr	d7, [r7]
 800574e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005752:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005756:	ee38 7b07 	vadd.f64	d7, d8, d7
 800575a:	4b76      	ldr	r3, [pc, #472]	; (8005934 <cinematicaInversa+0xc74>)
 800575c:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * c30 + 2.0 * R * s30) + (-2 * sqrt(3) * (Pxaux + r * c30) - 2.0 * (Pyaux + r * s30))) / (2 * Pzaux)) + ((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2 * Pzaux));
 8005760:	ed97 7b04 	vldr	d7, [r7, #16]
 8005764:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80058d8 <cinematicaInversa+0xc18>
 8005768:	ee37 7b06 	vadd.f64	d7, d7, d6
 800576c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80058e0 <cinematicaInversa+0xc20>
 8005770:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005774:	ed97 7b02 	vldr	d7, [r7, #8]
 8005778:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 80058e8 <cinematicaInversa+0xc28>
 800577c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8005780:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005784:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005788:	ed9f 6b59 	vldr	d6, [pc, #356]	; 80058f0 <cinematicaInversa+0xc30>
 800578c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8005790:	ed97 7b00 	vldr	d7, [r7]
 8005794:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005798:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800579c:	4b66      	ldr	r3, [pc, #408]	; (8005938 <cinematicaInversa+0xc78>)
 800579e:	ed93 7b00 	vldr	d7, [r3]
 80057a2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80057a6:	ed97 7b04 	vldr	d7, [r7, #16]
 80057aa:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80058d8 <cinematicaInversa+0xc18>
 80057ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80057b2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80057b6:	eeb0 0b47 	vmov.f64	d0, d7
 80057ba:	f00c f8dd 	bl	8011978 <pow>
 80057be:	eeb0 7b40 	vmov.f64	d7, d0
 80057c2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80058f8 <cinematicaInversa+0xc38>
 80057c6:	ee37 9b06 	vadd.f64	d9, d7, d6
 80057ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80057ce:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80058e8 <cinematicaInversa+0xc28>
 80057d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80057d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80057da:	eeb0 0b47 	vmov.f64	d0, d7
 80057de:	f00c f8cb 	bl	8011978 <pow>
 80057e2:	eeb0 7b40 	vmov.f64	d7, d0
 80057e6:	ee39 9b07 	vadd.f64	d9, d9, d7
 80057ea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80057ee:	ed97 0b00 	vldr	d0, [r7]
 80057f2:	f00c f8c1 	bl	8011978 <pow>
 80057f6:	eeb0 7b40 	vmov.f64	d7, d0
 80057fa:	ee39 7b07 	vadd.f64	d7, d9, d7
 80057fe:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80058c0 <cinematicaInversa+0xc00>
 8005802:	ee37 5b46 	vsub.f64	d5, d7, d6
 8005806:	ed97 7b00 	vldr	d7, [r7]
 800580a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800580e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005812:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005816:	4b49      	ldr	r3, [pc, #292]	; (800593c <cinematicaInversa+0xc7c>)
 8005818:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2.0 * Pzaux)) + ((pow((Pxaux + r * c150), 2.0) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux));
 800581c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005820:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80058d8 <cinematicaInversa+0xc18>
 8005824:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005828:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8005900 <cinematicaInversa+0xc40>
 800582c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005830:	ed97 7b02 	vldr	d7, [r7, #8]
 8005834:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80058e8 <cinematicaInversa+0xc28>
 8005838:	ee37 7b05 	vadd.f64	d7, d7, d5
 800583c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005840:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005844:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8005908 <cinematicaInversa+0xc48>
 8005848:	ee37 7b06 	vadd.f64	d7, d7, d6
 800584c:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80058b8 <cinematicaInversa+0xbf8>
 8005850:	ee37 5b06 	vadd.f64	d5, d7, d6
 8005854:	ed97 7b00 	vldr	d7, [r7]
 8005858:	ee37 7b07 	vadd.f64	d7, d7, d7
 800585c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005860:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <cinematicaInversa+0xc50>)
 8005862:	ed93 7b00 	vldr	d7, [r3]
 8005866:	ee26 8b07 	vmul.f64	d8, d6, d7
 800586a:	ed97 7b04 	vldr	d7, [r7, #16]
 800586e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80058d8 <cinematicaInversa+0xc18>
 8005872:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005876:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800587a:	eeb0 0b47 	vmov.f64	d0, d7
 800587e:	f00c f87b 	bl	8011978 <pow>
 8005882:	eeb0 9b40 	vmov.f64	d9, d0
 8005886:	ed97 7b02 	vldr	d7, [r7, #8]
 800588a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80058e8 <cinematicaInversa+0xc28>
 800588e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005892:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005896:	eeb0 0b47 	vmov.f64	d0, d7
 800589a:	f00c f86d 	bl	8011978 <pow>
 800589e:	eeb0 7b40 	vmov.f64	d7, d0
 80058a2:	ee39 9b07 	vadd.f64	d9, d9, d7
 80058a6:	e04b      	b.n	8005940 <cinematicaInversa+0xc80>
 80058a8:	e8584caa 	.word	0xe8584caa
 80058ac:	bffbb67a 	.word	0xbffbb67a
 80058b0:	1eb851ec 	.word	0x1eb851ec
 80058b4:	3fb1eb85 	.word	0x3fb1eb85
 80058b8:	24dd2f1b 	.word	0x24dd2f1b
 80058bc:	3fc58106 	.word	0x3fc58106
 80058c0:	70a3d70a 	.word	0x70a3d70a
 80058c4:	3fd70a3d 	.word	0x3fd70a3d
 80058c8:	93d96639 	.word	0x93d96639
 80058cc:	3f9ce6c0 	.word	0x3f9ce6c0
 80058d0:	47ae147c 	.word	0x47ae147c
 80058d4:	3fc47ae1 	.word	0x3fc47ae1
 80058d8:	5625749b 	.word	0x5625749b
 80058dc:	3faf09d1 	.word	0x3faf09d1
 80058e0:	e8584caa 	.word	0xe8584caa
 80058e4:	c00bb67a 	.word	0xc00bb67a
 80058e8:	1eb851ec 	.word	0x1eb851ec
 80058ec:	3fa1eb85 	.word	0x3fa1eb85
 80058f0:	24dd2f1d 	.word	0x24dd2f1d
 80058f4:	3fe58106 	.word	0x3fe58106
 80058f8:	3532e7b5 	.word	0x3532e7b5
 80058fc:	3fc0de09 	.word	0x3fc0de09
 8005900:	e8584caa 	.word	0xe8584caa
 8005904:	400bb67a 	.word	0x400bb67a
 8005908:	9ba5e356 	.word	0x9ba5e356
 800590c:	3fe020c4 	.word	0x3fe020c4
 8005910:	240007d0 	.word	0x240007d0
 8005914:	240007c0 	.word	0x240007c0
 8005918:	240007d8 	.word	0x240007d8
 800591c:	240007c8 	.word	0x240007c8
 8005920:	24000740 	.word	0x24000740
 8005924:	24000750 	.word	0x24000750
 8005928:	24000748 	.word	0x24000748
 800592c:	24000758 	.word	0x24000758
 8005930:	24000788 	.word	0x24000788
 8005934:	24000798 	.word	0x24000798
 8005938:	24000790 	.word	0x24000790
 800593c:	240007a0 	.word	0x240007a0
 8005940:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005944:	ed97 0b00 	vldr	d0, [r7]
 8005948:	f00c f816 	bl	8011978 <pow>
 800594c:	eeb0 7b40 	vmov.f64	d7, d0
 8005950:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005954:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8005b20 <cinematicaInversa+0xe60>
 8005958:	ee37 7b46 	vsub.f64	d7, d7, d6
 800595c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8005b28 <cinematicaInversa+0xe68>
 8005960:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005964:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8005b30 <cinematicaInversa+0xe70>
 8005968:	ee37 5b06 	vadd.f64	d5, d7, d6
 800596c:	ed97 7b00 	vldr	d7, [r7]
 8005970:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005974:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005978:	ee38 7b07 	vadd.f64	d7, d8, d7
 800597c:	4b7e      	ldr	r3, [pc, #504]	; (8005b78 <cinematicaInversa+0xeb8>)
 800597e:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2.0 * Pzaux)) + ((pow((Pxaux + r * c150), 2.0) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux));
 8005982:	ed97 7b04 	vldr	d7, [r7, #16]
 8005986:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8005b38 <cinematicaInversa+0xe78>
 800598a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800598e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8005b40 <cinematicaInversa+0xe80>
 8005992:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005996:	ed97 7b02 	vldr	d7, [r7, #8]
 800599a:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8005b48 <cinematicaInversa+0xe88>
 800599e:	ee37 7b05 	vadd.f64	d7, d7, d5
 80059a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80059a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059aa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8005b50 <cinematicaInversa+0xe90>
 80059ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059b2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8005b58 <cinematicaInversa+0xe98>
 80059b6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80059ba:	ed97 7b00 	vldr	d7, [r7]
 80059be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80059c2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80059c6:	4b6d      	ldr	r3, [pc, #436]	; (8005b7c <cinematicaInversa+0xebc>)
 80059c8:	ed93 7b00 	vldr	d7, [r3]
 80059cc:	ee26 8b07 	vmul.f64	d8, d6, d7
 80059d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80059d4:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8005b38 <cinematicaInversa+0xe78>
 80059d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80059dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059e0:	eeb0 0b47 	vmov.f64	d0, d7
 80059e4:	f00b ffc8 	bl	8011978 <pow>
 80059e8:	eeb0 9b40 	vmov.f64	d9, d0
 80059ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80059f0:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8005b48 <cinematicaInversa+0xe88>
 80059f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059fc:	eeb0 0b47 	vmov.f64	d0, d7
 8005a00:	f00b ffba 	bl	8011978 <pow>
 8005a04:	eeb0 7b40 	vmov.f64	d7, d0
 8005a08:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005a0c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a10:	ed97 0b00 	vldr	d0, [r7]
 8005a14:	f00b ffb0 	bl	8011978 <pow>
 8005a18:	eeb0 7b40 	vmov.f64	d7, d0
 8005a1c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005a20:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8005b20 <cinematicaInversa+0xe60>
 8005a24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a28:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8005b28 <cinematicaInversa+0xe68>
 8005a2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a30:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8005b30 <cinematicaInversa+0xe70>
 8005a34:	ee37 5b06 	vadd.f64	d5, d7, d6
 8005a38:	ed97 7b00 	vldr	d7, [r7]
 8005a3c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005a40:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005a44:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005a48:	4b4d      	ldr	r3, [pc, #308]	; (8005b80 <cinematicaInversa+0xec0>)
 8005a4a:	ed83 7b00 	vstr	d7, [r3]

	titha1 = -1.0 * asin(ZJ1_1 / L1);
 8005a4e:	4b4d      	ldr	r3, [pc, #308]	; (8005b84 <cinematicaInversa+0xec4>)
 8005a50:	ed93 7b00 	vldr	d7, [r3]
 8005a54:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8005b60 <cinematicaInversa+0xea0>
 8005a58:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8005a5c:	eeb0 0b46 	vmov.f64	d0, d6
 8005a60:	f00c f9dc 	bl	8011e1c <asin>
 8005a64:	eeb0 7b40 	vmov.f64	d7, d0
 8005a68:	eeb1 7b47 	vneg.f64	d7, d7
 8005a6c:	4b46      	ldr	r3, [pc, #280]	; (8005b88 <cinematicaInversa+0xec8>)
 8005a6e:	ed83 7b00 	vstr	d7, [r3]
	titha1 = titha1 * RAD_TO_DEG;
 8005a72:	4b45      	ldr	r3, [pc, #276]	; (8005b88 <cinematicaInversa+0xec8>)
 8005a74:	ed93 7b00 	vldr	d7, [r3]
 8005a78:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8005b68 <cinematicaInversa+0xea8>
 8005a7c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005a80:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8005b70 <cinematicaInversa+0xeb0>
 8005a84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005a88:	4b3f      	ldr	r3, [pc, #252]	; (8005b88 <cinematicaInversa+0xec8>)
 8005a8a:	ed83 7b00 	vstr	d7, [r3]
	titha2 = -1.0 * asin(ZJ2_1 / L1);
 8005a8e:	4b3f      	ldr	r3, [pc, #252]	; (8005b8c <cinematicaInversa+0xecc>)
 8005a90:	ed93 7b00 	vldr	d7, [r3]
 8005a94:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8005b60 <cinematicaInversa+0xea0>
 8005a98:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8005a9c:	eeb0 0b46 	vmov.f64	d0, d6
 8005aa0:	f00c f9bc 	bl	8011e1c <asin>
 8005aa4:	eeb0 7b40 	vmov.f64	d7, d0
 8005aa8:	eeb1 7b47 	vneg.f64	d7, d7
 8005aac:	4b38      	ldr	r3, [pc, #224]	; (8005b90 <cinematicaInversa+0xed0>)
 8005aae:	ed83 7b00 	vstr	d7, [r3]
	titha2 = titha2 * RAD_TO_DEG;
 8005ab2:	4b37      	ldr	r3, [pc, #220]	; (8005b90 <cinematicaInversa+0xed0>)
 8005ab4:	ed93 7b00 	vldr	d7, [r3]
 8005ab8:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8005b68 <cinematicaInversa+0xea8>
 8005abc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005ac0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8005b70 <cinematicaInversa+0xeb0>
 8005ac4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005ac8:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <cinematicaInversa+0xed0>)
 8005aca:	ed83 7b00 	vstr	d7, [r3]
	titha3 = -1.0 * asin(ZJ3_1 / L1);
 8005ace:	4b2a      	ldr	r3, [pc, #168]	; (8005b78 <cinematicaInversa+0xeb8>)
 8005ad0:	ed93 7b00 	vldr	d7, [r3]
 8005ad4:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8005b60 <cinematicaInversa+0xea0>
 8005ad8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8005adc:	eeb0 0b46 	vmov.f64	d0, d6
 8005ae0:	f00c f99c 	bl	8011e1c <asin>
 8005ae4:	eeb0 7b40 	vmov.f64	d7, d0
 8005ae8:	eeb1 7b47 	vneg.f64	d7, d7
 8005aec:	4b29      	ldr	r3, [pc, #164]	; (8005b94 <cinematicaInversa+0xed4>)
 8005aee:	ed83 7b00 	vstr	d7, [r3]
	titha3 = titha3 * RAD_TO_DEG;
 8005af2:	4b28      	ldr	r3, [pc, #160]	; (8005b94 <cinematicaInversa+0xed4>)
 8005af4:	ed93 7b00 	vldr	d7, [r3]
 8005af8:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8005b68 <cinematicaInversa+0xea8>
 8005afc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b00:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8005b70 <cinematicaInversa+0xeb0>
 8005b04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b08:	4b22      	ldr	r3, [pc, #136]	; (8005b94 <cinematicaInversa+0xed4>)
 8005b0a:	ed83 7b00 	vstr	d7, [r3]
}
 8005b0e:	bf00      	nop
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	ecbd 8b04 	vpop	{d8-d9}
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	f3af 8000 	nop.w
 8005b20:	70a3d70a 	.word	0x70a3d70a
 8005b24:	3fd70a3d 	.word	0x3fd70a3d
 8005b28:	93d96639 	.word	0x93d96639
 8005b2c:	3f9ce6c0 	.word	0x3f9ce6c0
 8005b30:	47ae147c 	.word	0x47ae147c
 8005b34:	3fc47ae1 	.word	0x3fc47ae1
 8005b38:	5625749b 	.word	0x5625749b
 8005b3c:	3faf09d1 	.word	0x3faf09d1
 8005b40:	e8584caa 	.word	0xe8584caa
 8005b44:	400bb67a 	.word	0x400bb67a
 8005b48:	1eb851ec 	.word	0x1eb851ec
 8005b4c:	3fa1eb85 	.word	0x3fa1eb85
 8005b50:	9ba5e356 	.word	0x9ba5e356
 8005b54:	3fe020c4 	.word	0x3fe020c4
 8005b58:	24dd2f1b 	.word	0x24dd2f1b
 8005b5c:	3fc58106 	.word	0x3fc58106
 8005b60:	9999999a 	.word	0x9999999a
 8005b64:	3fd99999 	.word	0x3fd99999
 8005b68:	00000000 	.word	0x00000000
 8005b6c:	40668000 	.word	0x40668000
 8005b70:	54442eea 	.word	0x54442eea
 8005b74:	400921fb 	.word	0x400921fb
 8005b78:	240007e0 	.word	0x240007e0
 8005b7c:	240007d8 	.word	0x240007d8
 8005b80:	240007e8 	.word	0x240007e8
 8005b84:	24000750 	.word	0x24000750
 8005b88:	240002e0 	.word	0x240002e0
 8005b8c:	24000798 	.word	0x24000798
 8005b90:	240002e8 	.word	0x240002e8
 8005b94:	240002f0 	.word	0x240002f0

08005b98 <jacobianoInverso>:


void jacobianoInverso(double Vxaux, double Vyaux, double Vzaux, double Pxaux, double Pyaux, double Pzaux) {
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b0ad      	sub	sp, #180	; 0xb4
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
 8005ba2:	ed87 1b1a 	vstr	d1, [r7, #104]	; 0x68
 8005ba6:	ed87 2b18 	vstr	d2, [r7, #96]	; 0x60
 8005baa:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
 8005bae:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 8005bb2:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
	 * 	 Funcion que devuelve la velocidad angular de cada motor
	 *	 Entrada: Velocidad en (x,y,z) y Posicion en (x,y,z)
	 *	 Salida:  Velocidad angular en rad/s
	 	 -----------------------------------------------------------------------*/

	double Vaux[3] = { Vxaux, Vyaux, Vzaux };
 8005bb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005bba:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8005bbe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005bc2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8005bc6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005bca:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	E1[0] = Pxaux + 0;
 8005bce:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005bd2:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8005ee0 <jacobianoInverso+0x348>
 8005bd6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005bda:	4bc9      	ldr	r3, [pc, #804]	; (8005f00 <jacobianoInverso+0x368>)
 8005bdc:	ed83 7b00 	vstr	d7, [r3]
	E1[1] = Pyaux - 0.07;
 8005be0:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005be4:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8005ee8 <jacobianoInverso+0x350>
 8005be8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005bec:	4bc4      	ldr	r3, [pc, #784]	; (8005f00 <jacobianoInverso+0x368>)
 8005bee:	ed83 7b02 	vstr	d7, [r3, #8]
	E1[2] = Pzaux;
 8005bf2:	49c3      	ldr	r1, [pc, #780]	; (8005f00 <jacobianoInverso+0x368>)
 8005bf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bf8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E2[0] = Pxaux + 0.060621778264911;
 8005bfc:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005c00:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8005ef0 <jacobianoInverso+0x358>
 8005c04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c08:	4bbe      	ldr	r3, [pc, #760]	; (8005f04 <jacobianoInverso+0x36c>)
 8005c0a:	ed83 7b00 	vstr	d7, [r3]
	E2[1] = Pyaux + 0.035;
 8005c0e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005c12:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8005ef8 <jacobianoInverso+0x360>
 8005c16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c1a:	4bba      	ldr	r3, [pc, #744]	; (8005f04 <jacobianoInverso+0x36c>)
 8005c1c:	ed83 7b02 	vstr	d7, [r3, #8]
	E2[2] = Pzaux;
 8005c20:	49b8      	ldr	r1, [pc, #736]	; (8005f04 <jacobianoInverso+0x36c>)
 8005c22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c26:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E3[0] = Pxaux - 0.060621778264911;
 8005c2a:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005c2e:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8005ef0 <jacobianoInverso+0x358>
 8005c32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c36:	4bb4      	ldr	r3, [pc, #720]	; (8005f08 <jacobianoInverso+0x370>)
 8005c38:	ed83 7b00 	vstr	d7, [r3]
	E3[1] = Pyaux + 0.035;
 8005c3c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005c40:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005ef8 <jacobianoInverso+0x360>
 8005c44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c48:	4baf      	ldr	r3, [pc, #700]	; (8005f08 <jacobianoInverso+0x370>)
 8005c4a:	ed83 7b02 	vstr	d7, [r3, #8]
	E3[2] = Pzaux;
 8005c4e:	49ae      	ldr	r1, [pc, #696]	; (8005f08 <jacobianoInverso+0x370>)
 8005c50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c54:	e9c1 2304 	strd	r2, r3, [r1, #16]

	l1[0][0] = XJ1_1 - F1[0];//l11=[(XJ1(1)-F1(1,1));(YJ1(1)-F1(1,2));(ZJ1(1)-F1(1,3))];
 8005c58:	4bac      	ldr	r3, [pc, #688]	; (8005f0c <jacobianoInverso+0x374>)
 8005c5a:	ed93 6b00 	vldr	d6, [r3]
 8005c5e:	4bac      	ldr	r3, [pc, #688]	; (8005f10 <jacobianoInverso+0x378>)
 8005c60:	ed93 7b00 	vldr	d7, [r3]
 8005c64:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c68:	4baa      	ldr	r3, [pc, #680]	; (8005f14 <jacobianoInverso+0x37c>)
 8005c6a:	ed83 7b00 	vstr	d7, [r3]
	l1[0][1] = YJ1_1 - F1[1];
 8005c6e:	4baa      	ldr	r3, [pc, #680]	; (8005f18 <jacobianoInverso+0x380>)
 8005c70:	ed93 6b00 	vldr	d6, [r3]
 8005c74:	4ba6      	ldr	r3, [pc, #664]	; (8005f10 <jacobianoInverso+0x378>)
 8005c76:	ed93 7b02 	vldr	d7, [r3, #8]
 8005c7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c7e:	4ba5      	ldr	r3, [pc, #660]	; (8005f14 <jacobianoInverso+0x37c>)
 8005c80:	ed83 7b02 	vstr	d7, [r3, #8]
	l1[0][2] = ZJ1_1 - F1[2];
 8005c84:	4ba5      	ldr	r3, [pc, #660]	; (8005f1c <jacobianoInverso+0x384>)
 8005c86:	ed93 6b00 	vldr	d6, [r3]
 8005c8a:	4ba1      	ldr	r3, [pc, #644]	; (8005f10 <jacobianoInverso+0x378>)
 8005c8c:	ed93 7b04 	vldr	d7, [r3, #16]
 8005c90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c94:	4b9f      	ldr	r3, [pc, #636]	; (8005f14 <jacobianoInverso+0x37c>)
 8005c96:	ed83 7b04 	vstr	d7, [r3, #16]
	l1[1][0] = XJ2_1 - F2[0];//l12=[(XJ2(1)-F2(1,1));(YJ2(1)-F2(1,2));(ZJ2(1)-F2(1,3))];
 8005c9a:	4ba1      	ldr	r3, [pc, #644]	; (8005f20 <jacobianoInverso+0x388>)
 8005c9c:	ed93 6b00 	vldr	d6, [r3]
 8005ca0:	4ba0      	ldr	r3, [pc, #640]	; (8005f24 <jacobianoInverso+0x38c>)
 8005ca2:	ed93 7b00 	vldr	d7, [r3]
 8005ca6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005caa:	4b9a      	ldr	r3, [pc, #616]	; (8005f14 <jacobianoInverso+0x37c>)
 8005cac:	ed83 7b06 	vstr	d7, [r3, #24]
	l1[1][1] = YJ2_1 - F2[1];
 8005cb0:	4b9d      	ldr	r3, [pc, #628]	; (8005f28 <jacobianoInverso+0x390>)
 8005cb2:	ed93 6b00 	vldr	d6, [r3]
 8005cb6:	4b9b      	ldr	r3, [pc, #620]	; (8005f24 <jacobianoInverso+0x38c>)
 8005cb8:	ed93 7b02 	vldr	d7, [r3, #8]
 8005cbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005cc0:	4b94      	ldr	r3, [pc, #592]	; (8005f14 <jacobianoInverso+0x37c>)
 8005cc2:	ed83 7b08 	vstr	d7, [r3, #32]
	l1[1][2] = ZJ2_1 - F2[2];
 8005cc6:	4b99      	ldr	r3, [pc, #612]	; (8005f2c <jacobianoInverso+0x394>)
 8005cc8:	ed93 6b00 	vldr	d6, [r3]
 8005ccc:	4b95      	ldr	r3, [pc, #596]	; (8005f24 <jacobianoInverso+0x38c>)
 8005cce:	ed93 7b04 	vldr	d7, [r3, #16]
 8005cd2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005cd6:	4b8f      	ldr	r3, [pc, #572]	; (8005f14 <jacobianoInverso+0x37c>)
 8005cd8:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l1[2][0] = XJ3_1 - F3[0];//l13=[(XJ3(1)-F3(1,1));(YJ3(1)-F3(1,2));(ZJ3(1)-F3(1,3))];
 8005cdc:	4b94      	ldr	r3, [pc, #592]	; (8005f30 <jacobianoInverso+0x398>)
 8005cde:	ed93 6b00 	vldr	d6, [r3]
 8005ce2:	4b94      	ldr	r3, [pc, #592]	; (8005f34 <jacobianoInverso+0x39c>)
 8005ce4:	ed93 7b00 	vldr	d7, [r3]
 8005ce8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005cec:	4b89      	ldr	r3, [pc, #548]	; (8005f14 <jacobianoInverso+0x37c>)
 8005cee:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l1[2][1] = YJ3_1 - F3[1];
 8005cf2:	4b91      	ldr	r3, [pc, #580]	; (8005f38 <jacobianoInverso+0x3a0>)
 8005cf4:	ed93 6b00 	vldr	d6, [r3]
 8005cf8:	4b8e      	ldr	r3, [pc, #568]	; (8005f34 <jacobianoInverso+0x39c>)
 8005cfa:	ed93 7b02 	vldr	d7, [r3, #8]
 8005cfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d02:	4b84      	ldr	r3, [pc, #528]	; (8005f14 <jacobianoInverso+0x37c>)
 8005d04:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l1[2][2] = ZJ3_1 - F3[2];
 8005d08:	4b8c      	ldr	r3, [pc, #560]	; (8005f3c <jacobianoInverso+0x3a4>)
 8005d0a:	ed93 6b00 	vldr	d6, [r3]
 8005d0e:	4b89      	ldr	r3, [pc, #548]	; (8005f34 <jacobianoInverso+0x39c>)
 8005d10:	ed93 7b04 	vldr	d7, [r3, #16]
 8005d14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d18:	4b7e      	ldr	r3, [pc, #504]	; (8005f14 <jacobianoInverso+0x37c>)
 8005d1a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	l2[0][0] = E1[0] - XJ1_1;//l21=[(E1(1,1)-XJ1(1));(E1(1,2)-YJ1(1));(E1(1,3)-ZJ1(1))];
 8005d1e:	4b78      	ldr	r3, [pc, #480]	; (8005f00 <jacobianoInverso+0x368>)
 8005d20:	ed93 6b00 	vldr	d6, [r3]
 8005d24:	4b79      	ldr	r3, [pc, #484]	; (8005f0c <jacobianoInverso+0x374>)
 8005d26:	ed93 7b00 	vldr	d7, [r3]
 8005d2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d2e:	4b84      	ldr	r3, [pc, #528]	; (8005f40 <jacobianoInverso+0x3a8>)
 8005d30:	ed83 7b00 	vstr	d7, [r3]
	l2[1][0] = E1[1] - YJ1_1;
 8005d34:	4b72      	ldr	r3, [pc, #456]	; (8005f00 <jacobianoInverso+0x368>)
 8005d36:	ed93 6b02 	vldr	d6, [r3, #8]
 8005d3a:	4b77      	ldr	r3, [pc, #476]	; (8005f18 <jacobianoInverso+0x380>)
 8005d3c:	ed93 7b00 	vldr	d7, [r3]
 8005d40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d44:	4b7e      	ldr	r3, [pc, #504]	; (8005f40 <jacobianoInverso+0x3a8>)
 8005d46:	ed83 7b06 	vstr	d7, [r3, #24]
	l2[2][0] = E1[2] - ZJ1_1;
 8005d4a:	4b6d      	ldr	r3, [pc, #436]	; (8005f00 <jacobianoInverso+0x368>)
 8005d4c:	ed93 6b04 	vldr	d6, [r3, #16]
 8005d50:	4b72      	ldr	r3, [pc, #456]	; (8005f1c <jacobianoInverso+0x384>)
 8005d52:	ed93 7b00 	vldr	d7, [r3]
 8005d56:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d5a:	4b79      	ldr	r3, [pc, #484]	; (8005f40 <jacobianoInverso+0x3a8>)
 8005d5c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l2[0][1] = E2[0] - XJ2_1;//l22=[(E2(1,1)-XJ2(1));(E2(1,2)-YJ2(1));(E2(1,3)-ZJ2(1))];
 8005d60:	4b68      	ldr	r3, [pc, #416]	; (8005f04 <jacobianoInverso+0x36c>)
 8005d62:	ed93 6b00 	vldr	d6, [r3]
 8005d66:	4b6e      	ldr	r3, [pc, #440]	; (8005f20 <jacobianoInverso+0x388>)
 8005d68:	ed93 7b00 	vldr	d7, [r3]
 8005d6c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d70:	4b73      	ldr	r3, [pc, #460]	; (8005f40 <jacobianoInverso+0x3a8>)
 8005d72:	ed83 7b02 	vstr	d7, [r3, #8]
	l2[1][1] = E2[1] - YJ2_1;
 8005d76:	4b63      	ldr	r3, [pc, #396]	; (8005f04 <jacobianoInverso+0x36c>)
 8005d78:	ed93 6b02 	vldr	d6, [r3, #8]
 8005d7c:	4b6a      	ldr	r3, [pc, #424]	; (8005f28 <jacobianoInverso+0x390>)
 8005d7e:	ed93 7b00 	vldr	d7, [r3]
 8005d82:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d86:	4b6e      	ldr	r3, [pc, #440]	; (8005f40 <jacobianoInverso+0x3a8>)
 8005d88:	ed83 7b08 	vstr	d7, [r3, #32]
	l2[2][1] = E2[2] - ZJ2_1;
 8005d8c:	4b5d      	ldr	r3, [pc, #372]	; (8005f04 <jacobianoInverso+0x36c>)
 8005d8e:	ed93 6b04 	vldr	d6, [r3, #16]
 8005d92:	4b66      	ldr	r3, [pc, #408]	; (8005f2c <jacobianoInverso+0x394>)
 8005d94:	ed93 7b00 	vldr	d7, [r3]
 8005d98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d9c:	4b68      	ldr	r3, [pc, #416]	; (8005f40 <jacobianoInverso+0x3a8>)
 8005d9e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l2[0][2] = E3[0] - XJ3_1;//l23=[(E3(1,1)-XJ3(1));(E3(1,2)-YJ3(1));(E3(1,3)-ZJ3(1))];
 8005da2:	4b59      	ldr	r3, [pc, #356]	; (8005f08 <jacobianoInverso+0x370>)
 8005da4:	ed93 6b00 	vldr	d6, [r3]
 8005da8:	4b61      	ldr	r3, [pc, #388]	; (8005f30 <jacobianoInverso+0x398>)
 8005daa:	ed93 7b00 	vldr	d7, [r3]
 8005dae:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005db2:	4b63      	ldr	r3, [pc, #396]	; (8005f40 <jacobianoInverso+0x3a8>)
 8005db4:	ed83 7b04 	vstr	d7, [r3, #16]
	l2[1][2] = E3[1] - YJ3_1;
 8005db8:	4b53      	ldr	r3, [pc, #332]	; (8005f08 <jacobianoInverso+0x370>)
 8005dba:	ed93 6b02 	vldr	d6, [r3, #8]
 8005dbe:	4b5e      	ldr	r3, [pc, #376]	; (8005f38 <jacobianoInverso+0x3a0>)
 8005dc0:	ed93 7b00 	vldr	d7, [r3]
 8005dc4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005dc8:	4b5d      	ldr	r3, [pc, #372]	; (8005f40 <jacobianoInverso+0x3a8>)
 8005dca:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l2[2][2] = E3[2] - ZJ3_1;
 8005dce:	4b4e      	ldr	r3, [pc, #312]	; (8005f08 <jacobianoInverso+0x370>)
 8005dd0:	ed93 6b04 	vldr	d6, [r3, #16]
 8005dd4:	4b59      	ldr	r3, [pc, #356]	; (8005f3c <jacobianoInverso+0x3a4>)
 8005dd6:	ed93 7b00 	vldr	d7, [r3]
 8005dda:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005dde:	4b58      	ldr	r3, [pc, #352]	; (8005f40 <jacobianoInverso+0x3a8>)
 8005de0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	Jcd = transpuesta(l2);				//Jacobiano de la cinematica directa
 8005de4:	4c57      	ldr	r4, [pc, #348]	; (8005f44 <jacobianoInverso+0x3ac>)
 8005de6:	463b      	mov	r3, r7
 8005de8:	4955      	ldr	r1, [pc, #340]	; (8005f40 <jacobianoInverso+0x3a8>)
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fc fd3e 	bl	800286c <transpuesta>
 8005df0:	4620      	mov	r0, r4
 8005df2:	463b      	mov	r3, r7
 8005df4:	2248      	movs	r2, #72	; 0x48
 8005df6:	4619      	mov	r1, r3
 8005df8:	f008 ff1e 	bl	800ec38 <memcpy>

	cross_P1[0] = SA1[1] * l1[0][2] - SA1[2] * l1[0][1];//Producto Cruz entre vectores
 8005dfc:	4b52      	ldr	r3, [pc, #328]	; (8005f48 <jacobianoInverso+0x3b0>)
 8005dfe:	ed93 6b02 	vldr	d6, [r3, #8]
 8005e02:	4b44      	ldr	r3, [pc, #272]	; (8005f14 <jacobianoInverso+0x37c>)
 8005e04:	ed93 7b04 	vldr	d7, [r3, #16]
 8005e08:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005e0c:	4b4e      	ldr	r3, [pc, #312]	; (8005f48 <jacobianoInverso+0x3b0>)
 8005e0e:	ed93 5b04 	vldr	d5, [r3, #16]
 8005e12:	4b40      	ldr	r3, [pc, #256]	; (8005f14 <jacobianoInverso+0x37c>)
 8005e14:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e18:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005e1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e20:	4b4a      	ldr	r3, [pc, #296]	; (8005f4c <jacobianoInverso+0x3b4>)
 8005e22:	ed83 7b00 	vstr	d7, [r3]
	cross_P1[1] = SA1[2] * l1[0][0] - SA1[0] * l1[0][2];
 8005e26:	4b48      	ldr	r3, [pc, #288]	; (8005f48 <jacobianoInverso+0x3b0>)
 8005e28:	ed93 6b04 	vldr	d6, [r3, #16]
 8005e2c:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <jacobianoInverso+0x37c>)
 8005e2e:	ed93 7b00 	vldr	d7, [r3]
 8005e32:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005e36:	4b44      	ldr	r3, [pc, #272]	; (8005f48 <jacobianoInverso+0x3b0>)
 8005e38:	ed93 5b00 	vldr	d5, [r3]
 8005e3c:	4b35      	ldr	r3, [pc, #212]	; (8005f14 <jacobianoInverso+0x37c>)
 8005e3e:	ed93 7b04 	vldr	d7, [r3, #16]
 8005e42:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005e46:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e4a:	4b40      	ldr	r3, [pc, #256]	; (8005f4c <jacobianoInverso+0x3b4>)
 8005e4c:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P1[2] = SA1[0] * l1[0][1] - SA1[1] * l1[0][0];
 8005e50:	4b3d      	ldr	r3, [pc, #244]	; (8005f48 <jacobianoInverso+0x3b0>)
 8005e52:	ed93 6b00 	vldr	d6, [r3]
 8005e56:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <jacobianoInverso+0x37c>)
 8005e58:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e5c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005e60:	4b39      	ldr	r3, [pc, #228]	; (8005f48 <jacobianoInverso+0x3b0>)
 8005e62:	ed93 5b02 	vldr	d5, [r3, #8]
 8005e66:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <jacobianoInverso+0x37c>)
 8005e68:	ed93 7b00 	vldr	d7, [r3]
 8005e6c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005e70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e74:	4b35      	ldr	r3, [pc, #212]	; (8005f4c <jacobianoInverso+0x3b4>)
 8005e76:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P2[0] = SA2[1] * l1[1][2] - SA2[2] * l1[1][1];//vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]
 8005e7a:	4b35      	ldr	r3, [pc, #212]	; (8005f50 <jacobianoInverso+0x3b8>)
 8005e7c:	ed93 6b02 	vldr	d6, [r3, #8]
 8005e80:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <jacobianoInverso+0x37c>)
 8005e82:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005e86:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005e8a:	4b31      	ldr	r3, [pc, #196]	; (8005f50 <jacobianoInverso+0x3b8>)
 8005e8c:	ed93 5b04 	vldr	d5, [r3, #16]
 8005e90:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <jacobianoInverso+0x37c>)
 8005e92:	ed93 7b08 	vldr	d7, [r3, #32]
 8005e96:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005e9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e9e:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <jacobianoInverso+0x3bc>)
 8005ea0:	ed83 7b00 	vstr	d7, [r3]
	cross_P2[1] = SA2[2] * l1[1][0] - SA2[0] * l1[1][2];//vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]
 8005ea4:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <jacobianoInverso+0x3b8>)
 8005ea6:	ed93 6b04 	vldr	d6, [r3, #16]
 8005eaa:	4b1a      	ldr	r3, [pc, #104]	; (8005f14 <jacobianoInverso+0x37c>)
 8005eac:	ed93 7b06 	vldr	d7, [r3, #24]
 8005eb0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005eb4:	4b26      	ldr	r3, [pc, #152]	; (8005f50 <jacobianoInverso+0x3b8>)
 8005eb6:	ed93 5b00 	vldr	d5, [r3]
 8005eba:	4b16      	ldr	r3, [pc, #88]	; (8005f14 <jacobianoInverso+0x37c>)
 8005ebc:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005ec0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005ec4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ec8:	4b22      	ldr	r3, [pc, #136]	; (8005f54 <jacobianoInverso+0x3bc>)
 8005eca:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P2[2] = SA2[0] * l1[1][1] - SA2[1] * l1[1][0];//vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]
 8005ece:	4b20      	ldr	r3, [pc, #128]	; (8005f50 <jacobianoInverso+0x3b8>)
 8005ed0:	ed93 6b00 	vldr	d6, [r3]
 8005ed4:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <jacobianoInverso+0x37c>)
 8005ed6:	ed93 7b08 	vldr	d7, [r3, #32]
 8005eda:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005ede:	e03b      	b.n	8005f58 <jacobianoInverso+0x3c0>
	...
 8005ee8:	1eb851ec 	.word	0x1eb851ec
 8005eec:	3fb1eb85 	.word	0x3fb1eb85
 8005ef0:	562574c0 	.word	0x562574c0
 8005ef4:	3faf09d1 	.word	0x3faf09d1
 8005ef8:	1eb851ec 	.word	0x1eb851ec
 8005efc:	3fa1eb85 	.word	0x3fa1eb85
 8005f00:	240007f0 	.word	0x240007f0
 8005f04:	24000808 	.word	0x24000808
 8005f08:	24000820 	.word	0x24000820
 8005f0c:	24000730 	.word	0x24000730
 8005f10:	24000020 	.word	0x24000020
 8005f14:	24000838 	.word	0x24000838
 8005f18:	24000740 	.word	0x24000740
 8005f1c:	24000750 	.word	0x24000750
 8005f20:	24000778 	.word	0x24000778
 8005f24:	24000038 	.word	0x24000038
 8005f28:	24000788 	.word	0x24000788
 8005f2c:	24000798 	.word	0x24000798
 8005f30:	240007c0 	.word	0x240007c0
 8005f34:	24000050 	.word	0x24000050
 8005f38:	240007d0 	.word	0x240007d0
 8005f3c:	240007e0 	.word	0x240007e0
 8005f40:	24000880 	.word	0x24000880
 8005f44:	240008c8 	.word	0x240008c8
 8005f48:	24000068 	.word	0x24000068
 8005f4c:	240009e8 	.word	0x240009e8
 8005f50:	24000080 	.word	0x24000080
 8005f54:	24000a00 	.word	0x24000a00
 8005f58:	4b92      	ldr	r3, [pc, #584]	; (80061a4 <jacobianoInverso+0x60c>)
 8005f5a:	ed93 5b02 	vldr	d5, [r3, #8]
 8005f5e:	4b92      	ldr	r3, [pc, #584]	; (80061a8 <jacobianoInverso+0x610>)
 8005f60:	ed93 7b06 	vldr	d7, [r3, #24]
 8005f64:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f6c:	4b8f      	ldr	r3, [pc, #572]	; (80061ac <jacobianoInverso+0x614>)
 8005f6e:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P3[0] = SA3[1] * l1[2][2] - SA3[2] * l1[2][1];
 8005f72:	4b8f      	ldr	r3, [pc, #572]	; (80061b0 <jacobianoInverso+0x618>)
 8005f74:	ed93 6b02 	vldr	d6, [r3, #8]
 8005f78:	4b8b      	ldr	r3, [pc, #556]	; (80061a8 <jacobianoInverso+0x610>)
 8005f7a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8005f7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f82:	4b8b      	ldr	r3, [pc, #556]	; (80061b0 <jacobianoInverso+0x618>)
 8005f84:	ed93 5b04 	vldr	d5, [r3, #16]
 8005f88:	4b87      	ldr	r3, [pc, #540]	; (80061a8 <jacobianoInverso+0x610>)
 8005f8a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8005f8e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f96:	4b87      	ldr	r3, [pc, #540]	; (80061b4 <jacobianoInverso+0x61c>)
 8005f98:	ed83 7b00 	vstr	d7, [r3]
	cross_P3[1] = SA3[2] * l1[2][0] - SA3[0] * l1[2][2];
 8005f9c:	4b84      	ldr	r3, [pc, #528]	; (80061b0 <jacobianoInverso+0x618>)
 8005f9e:	ed93 6b04 	vldr	d6, [r3, #16]
 8005fa2:	4b81      	ldr	r3, [pc, #516]	; (80061a8 <jacobianoInverso+0x610>)
 8005fa4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005fa8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005fac:	4b80      	ldr	r3, [pc, #512]	; (80061b0 <jacobianoInverso+0x618>)
 8005fae:	ed93 5b00 	vldr	d5, [r3]
 8005fb2:	4b7d      	ldr	r3, [pc, #500]	; (80061a8 <jacobianoInverso+0x610>)
 8005fb4:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8005fb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005fbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fc0:	4b7c      	ldr	r3, [pc, #496]	; (80061b4 <jacobianoInverso+0x61c>)
 8005fc2:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P3[2] = SA3[0] * l1[2][1] - SA3[1] * l1[2][0];
 8005fc6:	4b7a      	ldr	r3, [pc, #488]	; (80061b0 <jacobianoInverso+0x618>)
 8005fc8:	ed93 6b00 	vldr	d6, [r3]
 8005fcc:	4b76      	ldr	r3, [pc, #472]	; (80061a8 <jacobianoInverso+0x610>)
 8005fce:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8005fd2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005fd6:	4b76      	ldr	r3, [pc, #472]	; (80061b0 <jacobianoInverso+0x618>)
 8005fd8:	ed93 5b02 	vldr	d5, [r3, #8]
 8005fdc:	4b72      	ldr	r3, [pc, #456]	; (80061a8 <jacobianoInverso+0x610>)
 8005fde:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005fe2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005fe6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fea:	4b72      	ldr	r3, [pc, #456]	; (80061b4 <jacobianoInverso+0x61c>)
 8005fec:	ed83 7b04 	vstr	d7, [r3, #16]

	dot[0] = productDot(cross_P1, Jcd.m[0]);			//Producto Punto
 8005ff0:	4971      	ldr	r1, [pc, #452]	; (80061b8 <jacobianoInverso+0x620>)
 8005ff2:	4872      	ldr	r0, [pc, #456]	; (80061bc <jacobianoInverso+0x624>)
 8005ff4:	f7fc fc76 	bl	80028e4 <productDot>
 8005ff8:	eeb0 7b40 	vmov.f64	d7, d0
 8005ffc:	4b70      	ldr	r3, [pc, #448]	; (80061c0 <jacobianoInverso+0x628>)
 8005ffe:	ed83 7b00 	vstr	d7, [r3]
	dot[1] = productDot(cross_P2, Jcd.m[1]);
 8006002:	4970      	ldr	r1, [pc, #448]	; (80061c4 <jacobianoInverso+0x62c>)
 8006004:	4869      	ldr	r0, [pc, #420]	; (80061ac <jacobianoInverso+0x614>)
 8006006:	f7fc fc6d 	bl	80028e4 <productDot>
 800600a:	eeb0 7b40 	vmov.f64	d7, d0
 800600e:	4b6c      	ldr	r3, [pc, #432]	; (80061c0 <jacobianoInverso+0x628>)
 8006010:	ed83 7b02 	vstr	d7, [r3, #8]
	dot[2] = productDot(cross_P3, Jcd.m[2]);
 8006014:	496c      	ldr	r1, [pc, #432]	; (80061c8 <jacobianoInverso+0x630>)
 8006016:	4867      	ldr	r0, [pc, #412]	; (80061b4 <jacobianoInverso+0x61c>)
 8006018:	f7fc fc64 	bl	80028e4 <productDot>
 800601c:	eeb0 7b40 	vmov.f64	d7, d0
 8006020:	4b67      	ldr	r3, [pc, #412]	; (80061c0 <jacobianoInverso+0x628>)
 8006022:	ed83 7b04 	vstr	d7, [r3, #16]

	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8006026:	2300      	movs	r3, #0
 8006028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800602c:	e03d      	b.n	80060aa <jacobianoInverso+0x512>
		for (int j = 0; j < 3; ++j) {
 800602e:	2300      	movs	r3, #0
 8006030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006034:	e030      	b.n	8006098 <jacobianoInverso+0x500>
			if (i == j) {
 8006036:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800603a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800603e:	429a      	cmp	r2, r3
 8006040:	d114      	bne.n	800606c <jacobianoInverso+0x4d4>
				Jci[i][j] = dot[i];
 8006042:	4a5f      	ldr	r2, [pc, #380]	; (80061c0 <jacobianoInverso+0x628>)
 8006044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	4413      	add	r3, r2
 800604c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006050:	4c5e      	ldr	r4, [pc, #376]	; (80061cc <jacobianoInverso+0x634>)
 8006052:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006056:	4613      	mov	r3, r2
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	4413      	add	r3, r2
 800605c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006060:	4413      	add	r3, r2
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4423      	add	r3, r4
 8006066:	e9c3 0100 	strd	r0, r1, [r3]
 800606a:	e010      	b.n	800608e <jacobianoInverso+0x4f6>
			} else {
				Jci[i][j] = 0;
 800606c:	4957      	ldr	r1, [pc, #348]	; (80061cc <jacobianoInverso+0x634>)
 800606e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006072:	4613      	mov	r3, r2
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	4413      	add	r3, r2
 8006078:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800607c:	4413      	add	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	4419      	add	r1, r3
 8006082:	f04f 0200 	mov.w	r2, #0
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; ++j) {
 800608e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006092:	3301      	adds	r3, #1
 8006094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800609c:	2b02      	cmp	r3, #2
 800609e:	ddca      	ble.n	8006036 <jacobianoInverso+0x49e>
	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 80060a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a4:	3301      	adds	r3, #1
 80060a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	ddbd      	ble.n	800602e <jacobianoInverso+0x496>
			}
		}
	}

	Jci_inv = inversa(Jci);
 80060b2:	4c47      	ldr	r4, [pc, #284]	; (80061d0 <jacobianoInverso+0x638>)
 80060b4:	463b      	mov	r3, r7
 80060b6:	4945      	ldr	r1, [pc, #276]	; (80061cc <jacobianoInverso+0x634>)
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fc fd43 	bl	8002b44 <inversa>
 80060be:	4620      	mov	r0, r4
 80060c0:	463b      	mov	r3, r7
 80060c2:	2248      	movs	r2, #72	; 0x48
 80060c4:	4619      	mov	r1, r3
 80060c6:	f008 fdb7 	bl	800ec38 <memcpy>
	Jinv = productMatriz(Jcd.m,Jci_inv.m);	//Jacobiano Inverso
 80060ca:	4c42      	ldr	r4, [pc, #264]	; (80061d4 <jacobianoInverso+0x63c>)
 80060cc:	463b      	mov	r3, r7
 80060ce:	4a40      	ldr	r2, [pc, #256]	; (80061d0 <jacobianoInverso+0x638>)
 80060d0:	4939      	ldr	r1, [pc, #228]	; (80061b8 <jacobianoInverso+0x620>)
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fc fda4 	bl	8002c20 <productMatriz>
 80060d8:	4620      	mov	r0, r4
 80060da:	463b      	mov	r3, r7
 80060dc:	2248      	movs	r2, #72	; 0x48
 80060de:	4619      	mov	r1, r3
 80060e0:	f008 fdaa 	bl	800ec38 <memcpy>

	for (int i = 0; i < 3; ++i) {
 80060e4:	2300      	movs	r3, #0
 80060e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060ea:	e041      	b.n	8006170 <jacobianoInverso+0x5d8>
		double sum = 0;
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 80060f8:	2300      	movs	r3, #0
 80060fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060fe:	e025      	b.n	800614c <jacobianoInverso+0x5b4>
			sum += sum + Jinv.m[i][j] * Vaux[j];
 8006100:	4934      	ldr	r1, [pc, #208]	; (80061d4 <jacobianoInverso+0x63c>)
 8006102:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006106:	4613      	mov	r3, r2
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	4413      	add	r3, r2
 800610c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006110:	4413      	add	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	440b      	add	r3, r1
 8006116:	ed93 6b00 	vldr	d6, [r3]
 800611a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	33b0      	adds	r3, #176	; 0xb0
 8006122:	443b      	add	r3, r7
 8006124:	3b38      	subs	r3, #56	; 0x38
 8006126:	ed93 7b00 	vldr	d7, [r3]
 800612a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800612e:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8006132:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006136:	ed97 6b26 	vldr	d6, [r7, #152]	; 0x98
 800613a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800613e:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 8006142:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006146:	3301      	adds	r3, #1
 8006148:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800614c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006150:	2b02      	cmp	r3, #2
 8006152:	ddd5      	ble.n	8006100 <jacobianoInverso+0x568>
		}
		omega[i] = sum;
 8006154:	4a20      	ldr	r2, [pc, #128]	; (80061d8 <jacobianoInverso+0x640>)
 8006156:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	18d1      	adds	r1, r2, r3
 800615e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006162:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; ++i) {
 8006166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800616a:	3301      	adds	r3, #1
 800616c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006170:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006174:	2b02      	cmp	r3, #2
 8006176:	ddb9      	ble.n	80060ec <jacobianoInverso+0x554>
	}
	omega1 = omega[0];
 8006178:	4b17      	ldr	r3, [pc, #92]	; (80061d8 <jacobianoInverso+0x640>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	4917      	ldr	r1, [pc, #92]	; (80061dc <jacobianoInverso+0x644>)
 8006180:	e9c1 2300 	strd	r2, r3, [r1]
	omega2 = omega[1];
 8006184:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <jacobianoInverso+0x640>)
 8006186:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800618a:	4915      	ldr	r1, [pc, #84]	; (80061e0 <jacobianoInverso+0x648>)
 800618c:	e9c1 2300 	strd	r2, r3, [r1]
	omega3 = omega[2];
 8006190:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <jacobianoInverso+0x640>)
 8006192:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006196:	4913      	ldr	r1, [pc, #76]	; (80061e4 <jacobianoInverso+0x64c>)
 8006198:	e9c1 2300 	strd	r2, r3, [r1]

}
 800619c:	bf00      	nop
 800619e:	37b4      	adds	r7, #180	; 0xb4
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd90      	pop	{r4, r7, pc}
 80061a4:	24000080 	.word	0x24000080
 80061a8:	24000838 	.word	0x24000838
 80061ac:	24000a00 	.word	0x24000a00
 80061b0:	24000098 	.word	0x24000098
 80061b4:	24000a18 	.word	0x24000a18
 80061b8:	240008c8 	.word	0x240008c8
 80061bc:	240009e8 	.word	0x240009e8
 80061c0:	24000a30 	.word	0x24000a30
 80061c4:	240008e0 	.word	0x240008e0
 80061c8:	240008f8 	.word	0x240008f8
 80061cc:	24000910 	.word	0x24000910
 80061d0:	24000958 	.word	0x24000958
 80061d4:	240009a0 	.word	0x240009a0
 80061d8:	24000350 	.word	0x24000350
 80061dc:	240003c8 	.word	0x240003c8
 80061e0:	240003d0 	.word	0x240003d0
 80061e4:	240003d8 	.word	0x240003d8

080061e8 <SetPerfilTimers>:

void SetPerfilTimers(double omeg1, double omeg2, double omeg3) {	// velAng en rpm
 80061e8:	b480      	push	{r7}
 80061ea:	b089      	sub	sp, #36	; 0x24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	ed87 0b04 	vstr	d0, [r7, #16]
 80061f2:	ed87 1b02 	vstr	d1, [r7, #8]
 80061f6:	ed87 2b00 	vstr	d2, [r7]
	 *   Funcion que configura el PWM del timer 12,13 14, para que el motor vaya a la
	 *   velocidad deseada.
	 *   Entrada: velocidad Angular de cada eslabon, en rad/s.
	 ----------------------------------------------------------------------- */

		rpm1 = (omeg1*((60.00)/(2.00*pi)));
 80061fa:	ed97 7b04 	vldr	d7, [r7, #16]
 80061fe:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8006450 <SetPerfilTimers+0x268>
 8006202:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006206:	4b9a      	ldr	r3, [pc, #616]	; (8006470 <SetPerfilTimers+0x288>)
 8006208:	ed83 7b00 	vstr	d7, [r3]
		rpm2 = (omeg2*((60.00)/(2.00*pi)));
 800620c:	ed97 7b02 	vldr	d7, [r7, #8]
 8006210:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8006450 <SetPerfilTimers+0x268>
 8006214:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006218:	4b96      	ldr	r3, [pc, #600]	; (8006474 <SetPerfilTimers+0x28c>)
 800621a:	ed83 7b00 	vstr	d7, [r3]
		rpm3 = (omeg3*((60.00)/(2.00*pi)));
 800621e:	ed97 7b00 	vldr	d7, [r7]
 8006222:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8006450 <SetPerfilTimers+0x268>
 8006226:	ee27 7b06 	vmul.f64	d7, d7, d6
 800622a:	4b93      	ldr	r3, [pc, #588]	; (8006478 <SetPerfilTimers+0x290>)
 800622c:	ed83 7b00 	vstr	d7, [r3]
		if(rpm1<=0.1){
 8006230:	4b8f      	ldr	r3, [pc, #572]	; (8006470 <SetPerfilTimers+0x288>)
 8006232:	ed93 7b00 	vldr	d7, [r3]
 8006236:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8006458 <SetPerfilTimers+0x270>
 800623a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800623e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006242:	d805      	bhi.n	8006250 <SetPerfilTimers+0x68>
			rpm1=0.1;
 8006244:	498a      	ldr	r1, [pc, #552]	; (8006470 <SetPerfilTimers+0x288>)
 8006246:	a384      	add	r3, pc, #528	; (adr r3, 8006458 <SetPerfilTimers+0x270>)
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm2<=0.1){
 8006250:	4b88      	ldr	r3, [pc, #544]	; (8006474 <SetPerfilTimers+0x28c>)
 8006252:	ed93 7b00 	vldr	d7, [r3]
 8006256:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8006458 <SetPerfilTimers+0x270>
 800625a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800625e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006262:	d805      	bhi.n	8006270 <SetPerfilTimers+0x88>
			rpm2=0.1;
 8006264:	4983      	ldr	r1, [pc, #524]	; (8006474 <SetPerfilTimers+0x28c>)
 8006266:	a37c      	add	r3, pc, #496	; (adr r3, 8006458 <SetPerfilTimers+0x270>)
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm3<=0.1){
 8006270:	4b81      	ldr	r3, [pc, #516]	; (8006478 <SetPerfilTimers+0x290>)
 8006272:	ed93 7b00 	vldr	d7, [r3]
 8006276:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8006458 <SetPerfilTimers+0x270>
 800627a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800627e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006282:	d805      	bhi.n	8006290 <SetPerfilTimers+0xa8>
			rpm3=0.1;
 8006284:	497c      	ldr	r1, [pc, #496]	; (8006478 <SetPerfilTimers+0x290>)
 8006286:	a374      	add	r3, pc, #464	; (adr r3, 8006458 <SetPerfilTimers+0x270>)
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	e9c1 2300 	strd	r2, r3, [r1]
		}


		periodoM[0] = (((Fcl * 60.00) / ((double)rpm1 * ((double)(TIM12->PSC) + 1.00) * 9600.00)) - 1.00);	//Fpwm = 64M / ((ARR+1)*(PSC+1)
 8006290:	4b7a      	ldr	r3, [pc, #488]	; (800647c <SetPerfilTimers+0x294>)
 8006292:	ed93 7b00 	vldr	d7, [r3]
 8006296:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8006460 <SetPerfilTimers+0x278>
 800629a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800629e:	4b78      	ldr	r3, [pc, #480]	; (8006480 <SetPerfilTimers+0x298>)
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80062aa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80062ae:	ee37 6b06 	vadd.f64	d6, d7, d6
 80062b2:	4b6f      	ldr	r3, [pc, #444]	; (8006470 <SetPerfilTimers+0x288>)
 80062b4:	ed93 7b00 	vldr	d7, [r3]
 80062b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80062bc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006468 <SetPerfilTimers+0x280>
 80062c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80062c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80062c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80062cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80062d0:	4b6c      	ldr	r3, [pc, #432]	; (8006484 <SetPerfilTimers+0x29c>)
 80062d2:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1] = (((Fcl * 60.00) / ((double)rpm2 * ((double)(TIM13->PSC) + 1.00) * 9600.00)) - 1.00);
 80062d6:	4b69      	ldr	r3, [pc, #420]	; (800647c <SetPerfilTimers+0x294>)
 80062d8:	ed93 7b00 	vldr	d7, [r3]
 80062dc:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8006460 <SetPerfilTimers+0x278>
 80062e0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80062e4:	4b68      	ldr	r3, [pc, #416]	; (8006488 <SetPerfilTimers+0x2a0>)
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	ee07 3a90 	vmov	s15, r3
 80062ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80062f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80062f4:	ee37 6b06 	vadd.f64	d6, d7, d6
 80062f8:	4b5e      	ldr	r3, [pc, #376]	; (8006474 <SetPerfilTimers+0x28c>)
 80062fa:	ed93 7b00 	vldr	d7, [r3]
 80062fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006302:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8006468 <SetPerfilTimers+0x280>
 8006306:	ee27 6b06 	vmul.f64	d6, d7, d6
 800630a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800630e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006312:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006316:	4b5b      	ldr	r3, [pc, #364]	; (8006484 <SetPerfilTimers+0x29c>)
 8006318:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2] = (((Fcl * 60.00) / ((double)rpm3 * ((double)(TIM14->PSC) + 1.00) * 9600.00)) - 1.00);
 800631c:	4b57      	ldr	r3, [pc, #348]	; (800647c <SetPerfilTimers+0x294>)
 800631e:	ed93 7b00 	vldr	d7, [r3]
 8006322:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8006460 <SetPerfilTimers+0x278>
 8006326:	ee27 5b06 	vmul.f64	d5, d7, d6
 800632a:	4b58      	ldr	r3, [pc, #352]	; (800648c <SetPerfilTimers+0x2a4>)
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006336:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800633a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800633e:	4b4e      	ldr	r3, [pc, #312]	; (8006478 <SetPerfilTimers+0x290>)
 8006340:	ed93 7b00 	vldr	d7, [r3]
 8006344:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006348:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8006468 <SetPerfilTimers+0x280>
 800634c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006350:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006354:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006358:	ee37 7b46 	vsub.f64	d7, d7, d6
 800635c:	4b49      	ldr	r3, [pc, #292]	; (8006484 <SetPerfilTimers+0x29c>)
 800635e:	ed83 7b04 	vstr	d7, [r3, #16]


		// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo --------------
		for (int i = 0; i < 3; ++i) {
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	e0b0      	b.n	80064ca <SetPerfilTimers+0x2e2>
			ErrorPeriodo[i] = periodoM[i] - (double) ((int32_t) periodoM[i]);
 8006368:	4a46      	ldr	r2, [pc, #280]	; (8006484 <SetPerfilTimers+0x29c>)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	ed93 6b00 	vldr	d6, [r3]
 8006374:	4a43      	ldr	r2, [pc, #268]	; (8006484 <SetPerfilTimers+0x29c>)
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	4413      	add	r3, r2
 800637c:	ed93 7b00 	vldr	d7, [r3]
 8006380:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006384:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006388:	ee36 7b47 	vsub.f64	d7, d6, d7
 800638c:	4a40      	ldr	r2, [pc, #256]	; (8006490 <SetPerfilTimers+0x2a8>)
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	4413      	add	r3, r2
 8006394:	ed83 7b00 	vstr	d7, [r3]
			ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] + ErrorPeriodo[i];
 8006398:	4a3e      	ldr	r2, [pc, #248]	; (8006494 <SetPerfilTimers+0x2ac>)
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	4413      	add	r3, r2
 80063a0:	ed93 6b00 	vldr	d6, [r3]
 80063a4:	4a3a      	ldr	r2, [pc, #232]	; (8006490 <SetPerfilTimers+0x2a8>)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4413      	add	r3, r2
 80063ac:	ed93 7b00 	vldr	d7, [r3]
 80063b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80063b4:	4a37      	ldr	r2, [pc, #220]	; (8006494 <SetPerfilTimers+0x2ac>)
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	4413      	add	r3, r2
 80063bc:	ed83 7b00 	vstr	d7, [r3]
			if (ErrorAcumuladoPeriodo[i] > 1) {
 80063c0:	4a34      	ldr	r2, [pc, #208]	; (8006494 <SetPerfilTimers+0x2ac>)
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	4413      	add	r3, r2
 80063c8:	ed93 7b00 	vldr	d7, [r3]
 80063cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80063d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80063d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d8:	dd1f      	ble.n	800641a <SetPerfilTimers+0x232>
				periodoM[i] = periodoM[i] + 1;
 80063da:	4a2a      	ldr	r2, [pc, #168]	; (8006484 <SetPerfilTimers+0x29c>)
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	ed93 7b00 	vldr	d7, [r3]
 80063e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80063ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80063ee:	4a25      	ldr	r2, [pc, #148]	; (8006484 <SetPerfilTimers+0x29c>)
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	4413      	add	r3, r2
 80063f6:	ed83 7b00 	vstr	d7, [r3]
				ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] - 1;
 80063fa:	4a26      	ldr	r2, [pc, #152]	; (8006494 <SetPerfilTimers+0x2ac>)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4413      	add	r3, r2
 8006402:	ed93 7b00 	vldr	d7, [r3]
 8006406:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800640a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800640e:	4a21      	ldr	r2, [pc, #132]	; (8006494 <SetPerfilTimers+0x2ac>)
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	4413      	add	r3, r2
 8006416:	ed83 7b00 	vstr	d7, [r3]
			}
			if (periodoM[i] < 2) {
 800641a:	4a1a      	ldr	r2, [pc, #104]	; (8006484 <SetPerfilTimers+0x29c>)
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	4413      	add	r3, r2
 8006422:	ed93 7b00 	vldr	d7, [r3]
 8006426:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800642a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800642e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006432:	d531      	bpl.n	8006498 <SetPerfilTimers+0x2b0>
				periodoM[i] = 0; // velocidad lineal de 10.000mm/s !!!
 8006434:	4a13      	ldr	r2, [pc, #76]	; (8006484 <SetPerfilTimers+0x29c>)
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	18d1      	adds	r1, r2, r3
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	e9c1 2300 	strd	r2, r3, [r1]
 8006448:	e03c      	b.n	80064c4 <SetPerfilTimers+0x2dc>
 800644a:	bf00      	nop
 800644c:	f3af 8000 	nop.w
 8006450:	66ed2a99 	.word	0x66ed2a99
 8006454:	4023193d 	.word	0x4023193d
 8006458:	9999999a 	.word	0x9999999a
 800645c:	3fb99999 	.word	0x3fb99999
 8006460:	00000000 	.word	0x00000000
 8006464:	404e0000 	.word	0x404e0000
 8006468:	00000000 	.word	0x00000000
 800646c:	40c2c000 	.word	0x40c2c000
 8006470:	24000408 	.word	0x24000408
 8006474:	24000410 	.word	0x24000410
 8006478:	24000418 	.word	0x24000418
 800647c:	24000000 	.word	0x24000000
 8006480:	40001800 	.word	0x40001800
 8006484:	240003e0 	.word	0x240003e0
 8006488:	40001c00 	.word	0x40001c00
 800648c:	40002000 	.word	0x40002000
 8006490:	24000420 	.word	0x24000420
 8006494:	24000438 	.word	0x24000438
			}

			else if (periodoM[i] > pow(2, 16)) { 		// desborde de timer 32 bits
 8006498:	4a9f      	ldr	r2, [pc, #636]	; (8006718 <SetPerfilTimers+0x530>)
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	4413      	add	r3, r2
 80064a0:	ed93 7b00 	vldr	d7, [r3]
 80064a4:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8006700 <SetPerfilTimers+0x518>
 80064a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80064ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b0:	dd08      	ble.n	80064c4 <SetPerfilTimers+0x2dc>
				periodoM[i] = pow(2, 16);
 80064b2:	4a99      	ldr	r2, [pc, #612]	; (8006718 <SetPerfilTimers+0x530>)
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	18d1      	adds	r1, r2, r3
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	4b97      	ldr	r3, [pc, #604]	; (800671c <SetPerfilTimers+0x534>)
 80064c0:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	3301      	adds	r3, #1
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	f77f af4b 	ble.w	8006368 <SetPerfilTimers+0x180>
			}
		}

			periodoM[0]=(uint32_t)(((Fcl * 60.0) / (rpm1 * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 80064d2:	4b93      	ldr	r3, [pc, #588]	; (8006720 <SetPerfilTimers+0x538>)
 80064d4:	ed93 7b00 	vldr	d7, [r3]
 80064d8:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8006708 <SetPerfilTimers+0x520>
 80064dc:	ee27 5b06 	vmul.f64	d5, d7, d6
 80064e0:	4b90      	ldr	r3, [pc, #576]	; (8006724 <SetPerfilTimers+0x53c>)
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	ee07 3a90 	vmov	s15, r3
 80064e8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80064ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80064f0:	ee37 6b06 	vadd.f64	d6, d7, d6
 80064f4:	4b8c      	ldr	r3, [pc, #560]	; (8006728 <SetPerfilTimers+0x540>)
 80064f6:	ed93 7b00 	vldr	d7, [r3]
 80064fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80064fe:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8006710 <SetPerfilTimers+0x528>
 8006502:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006506:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800650a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800650e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006512:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006516:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800651a:	4b7f      	ldr	r3, [pc, #508]	; (8006718 <SetPerfilTimers+0x530>)
 800651c:	ed83 7b00 	vstr	d7, [r3]
			periodoM[1]=(uint32_t)(((Fcl * 60.0) / (rpm2 * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8006520:	4b7f      	ldr	r3, [pc, #508]	; (8006720 <SetPerfilTimers+0x538>)
 8006522:	ed93 7b00 	vldr	d7, [r3]
 8006526:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8006708 <SetPerfilTimers+0x520>
 800652a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800652e:	4b7f      	ldr	r3, [pc, #508]	; (800672c <SetPerfilTimers+0x544>)
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800653a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800653e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006542:	4b7b      	ldr	r3, [pc, #492]	; (8006730 <SetPerfilTimers+0x548>)
 8006544:	ed93 7b00 	vldr	d7, [r3]
 8006548:	ee26 7b07 	vmul.f64	d7, d6, d7
 800654c:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8006710 <SetPerfilTimers+0x528>
 8006550:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006554:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006558:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800655c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006560:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006564:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006568:	4b6b      	ldr	r3, [pc, #428]	; (8006718 <SetPerfilTimers+0x530>)
 800656a:	ed83 7b02 	vstr	d7, [r3, #8]
			periodoM[2]=(uint32_t)(((Fcl * 60.0) / (rpm3 * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 800656e:	4b6c      	ldr	r3, [pc, #432]	; (8006720 <SetPerfilTimers+0x538>)
 8006570:	ed93 7b00 	vldr	d7, [r3]
 8006574:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8006708 <SetPerfilTimers+0x520>
 8006578:	ee27 5b06 	vmul.f64	d5, d7, d6
 800657c:	4b6d      	ldr	r3, [pc, #436]	; (8006734 <SetPerfilTimers+0x54c>)
 800657e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006580:	ee07 3a90 	vmov	s15, r3
 8006584:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006588:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800658c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006590:	4b69      	ldr	r3, [pc, #420]	; (8006738 <SetPerfilTimers+0x550>)
 8006592:	ed93 7b00 	vldr	d7, [r3]
 8006596:	ee26 7b07 	vmul.f64	d7, d6, d7
 800659a:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8006710 <SetPerfilTimers+0x528>
 800659e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065a2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80065a6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80065ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80065b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065b6:	4b58      	ldr	r3, [pc, #352]	; (8006718 <SetPerfilTimers+0x530>)
 80065b8:	ed83 7b04 	vstr	d7, [r3, #16]


			if (TIM12->CNT > periodoM[0]) {
 80065bc:	4b59      	ldr	r3, [pc, #356]	; (8006724 <SetPerfilTimers+0x53c>)
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	ee07 3a90 	vmov	s15, r3
 80065c4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80065c8:	4b53      	ldr	r3, [pc, #332]	; (8006718 <SetPerfilTimers+0x530>)
 80065ca:	ed93 7b00 	vldr	d7, [r3]
 80065ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d6:	dd0c      	ble.n	80065f2 <SetPerfilTimers+0x40a>
						TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80065d8:	4b4f      	ldr	r3, [pc, #316]	; (8006718 <SetPerfilTimers+0x530>)
 80065da:	ed93 7b00 	vldr	d7, [r3]
 80065de:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80065e6:	4b4f      	ldr	r3, [pc, #316]	; (8006724 <SetPerfilTimers+0x53c>)
 80065e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80065ec:	ee17 2a90 	vmov	r2, s15
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM13->CNT > periodoM[1]) {
 80065f2:	4b4e      	ldr	r3, [pc, #312]	; (800672c <SetPerfilTimers+0x544>)
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80065fe:	4b46      	ldr	r3, [pc, #280]	; (8006718 <SetPerfilTimers+0x530>)
 8006600:	ed93 7b02 	vldr	d7, [r3, #8]
 8006604:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660c:	dd0c      	ble.n	8006628 <SetPerfilTimers+0x440>
						TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 800660e:	4b42      	ldr	r3, [pc, #264]	; (8006718 <SetPerfilTimers+0x530>)
 8006610:	ed93 7b02 	vldr	d7, [r3, #8]
 8006614:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006618:	ee37 7b46 	vsub.f64	d7, d7, d6
 800661c:	4b43      	ldr	r3, [pc, #268]	; (800672c <SetPerfilTimers+0x544>)
 800661e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006622:	ee17 2a90 	vmov	r2, s15
 8006626:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM14->CNT > periodoM[2]) {
 8006628:	4b42      	ldr	r3, [pc, #264]	; (8006734 <SetPerfilTimers+0x54c>)
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006634:	4b38      	ldr	r3, [pc, #224]	; (8006718 <SetPerfilTimers+0x530>)
 8006636:	ed93 7b04 	vldr	d7, [r3, #16]
 800663a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800663e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006642:	dd0c      	ble.n	800665e <SetPerfilTimers+0x476>
						TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8006644:	4b34      	ldr	r3, [pc, #208]	; (8006718 <SetPerfilTimers+0x530>)
 8006646:	ed93 7b04 	vldr	d7, [r3, #16]
 800664a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800664e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006652:	4b38      	ldr	r3, [pc, #224]	; (8006734 <SetPerfilTimers+0x54c>)
 8006654:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006658:	ee17 2a90 	vmov	r2, s15
 800665c:	625a      	str	r2, [r3, #36]	; 0x24
			}

			TIM12->ARR =periodoM[0];
 800665e:	4b2e      	ldr	r3, [pc, #184]	; (8006718 <SetPerfilTimers+0x530>)
 8006660:	ed93 7b00 	vldr	d7, [r3]
 8006664:	4b2f      	ldr	r3, [pc, #188]	; (8006724 <SetPerfilTimers+0x53c>)
 8006666:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800666a:	ee17 2a90 	vmov	r2, s15
 800666e:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8006670:	4b2c      	ldr	r3, [pc, #176]	; (8006724 <SetPerfilTimers+0x53c>)
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	ee07 3a90 	vmov	s15, r3
 8006678:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800667c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006680:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006684:	4b27      	ldr	r3, [pc, #156]	; (8006724 <SetPerfilTimers+0x53c>)
 8006686:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800668a:	ee17 2a90 	vmov	r2, s15
 800668e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->ARR =periodoM[1];
 8006690:	4b21      	ldr	r3, [pc, #132]	; (8006718 <SetPerfilTimers+0x530>)
 8006692:	ed93 7b02 	vldr	d7, [r3, #8]
 8006696:	4b25      	ldr	r3, [pc, #148]	; (800672c <SetPerfilTimers+0x544>)
 8006698:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800669c:	ee17 2a90 	vmov	r2, s15
 80066a0:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 80066a2:	4b22      	ldr	r3, [pc, #136]	; (800672c <SetPerfilTimers+0x544>)
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80066ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80066b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066b6:	4b1d      	ldr	r3, [pc, #116]	; (800672c <SetPerfilTimers+0x544>)
 80066b8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066bc:	ee17 2a90 	vmov	r2, s15
 80066c0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM14->ARR =periodoM[2];
 80066c2:	4b15      	ldr	r3, [pc, #84]	; (8006718 <SetPerfilTimers+0x530>)
 80066c4:	ed93 7b04 	vldr	d7, [r3, #16]
 80066c8:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <SetPerfilTimers+0x54c>)
 80066ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066ce:	ee17 2a90 	vmov	r2, s15
 80066d2:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80066d4:	4b17      	ldr	r3, [pc, #92]	; (8006734 <SetPerfilTimers+0x54c>)
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80066e0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80066e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066e8:	4b12      	ldr	r3, [pc, #72]	; (8006734 <SetPerfilTimers+0x54c>)
 80066ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066ee:	ee17 2a90 	vmov	r2, s15
 80066f2:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->CNT = Periodo[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		if (TIM14->CNT > Periodo[2]) {
			TIM14->CNT = Periodo[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}*/
}
 80066f4:	bf00      	nop
 80066f6:	3724      	adds	r7, #36	; 0x24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	00000000 	.word	0x00000000
 8006704:	40f00000 	.word	0x40f00000
 8006708:	00000000 	.word	0x00000000
 800670c:	404e0000 	.word	0x404e0000
 8006710:	00000000 	.word	0x00000000
 8006714:	40c2c000 	.word	0x40c2c000
 8006718:	240003e0 	.word	0x240003e0
 800671c:	40f00000 	.word	0x40f00000
 8006720:	24000000 	.word	0x24000000
 8006724:	40001800 	.word	0x40001800
 8006728:	24000408 	.word	0x24000408
 800672c:	40001c00 	.word	0x40001c00
 8006730:	24000410 	.word	0x24000410
 8006734:	40002000 	.word	0x40002000
 8006738:	24000418 	.word	0x24000418

0800673c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006740:	4b22      	ldr	r3, [pc, #136]	; (80067cc <MX_USART1_UART_Init+0x90>)
 8006742:	4a23      	ldr	r2, [pc, #140]	; (80067d0 <MX_USART1_UART_Init+0x94>)
 8006744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006746:	4b21      	ldr	r3, [pc, #132]	; (80067cc <MX_USART1_UART_Init+0x90>)
 8006748:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800674c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800674e:	4b1f      	ldr	r3, [pc, #124]	; (80067cc <MX_USART1_UART_Init+0x90>)
 8006750:	2200      	movs	r2, #0
 8006752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006754:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <MX_USART1_UART_Init+0x90>)
 8006756:	2200      	movs	r2, #0
 8006758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800675a:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <MX_USART1_UART_Init+0x90>)
 800675c:	2200      	movs	r2, #0
 800675e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006760:	4b1a      	ldr	r3, [pc, #104]	; (80067cc <MX_USART1_UART_Init+0x90>)
 8006762:	220c      	movs	r2, #12
 8006764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006766:	4b19      	ldr	r3, [pc, #100]	; (80067cc <MX_USART1_UART_Init+0x90>)
 8006768:	2200      	movs	r2, #0
 800676a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800676c:	4b17      	ldr	r3, [pc, #92]	; (80067cc <MX_USART1_UART_Init+0x90>)
 800676e:	2200      	movs	r2, #0
 8006770:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006772:	4b16      	ldr	r3, [pc, #88]	; (80067cc <MX_USART1_UART_Init+0x90>)
 8006774:	2200      	movs	r2, #0
 8006776:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006778:	4b14      	ldr	r3, [pc, #80]	; (80067cc <MX_USART1_UART_Init+0x90>)
 800677a:	2200      	movs	r2, #0
 800677c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <MX_USART1_UART_Init+0x90>)
 8006780:	2200      	movs	r2, #0
 8006782:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006784:	4811      	ldr	r0, [pc, #68]	; (80067cc <MX_USART1_UART_Init+0x90>)
 8006786:	f005 fecf 	bl	800c528 <HAL_UART_Init>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006790:	f7fb fe26 	bl	80023e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006794:	2100      	movs	r1, #0
 8006796:	480d      	ldr	r0, [pc, #52]	; (80067cc <MX_USART1_UART_Init+0x90>)
 8006798:	f008 f959 	bl	800ea4e <HAL_UARTEx_SetTxFifoThreshold>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80067a2:	f7fb fe1d 	bl	80023e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80067a6:	2100      	movs	r1, #0
 80067a8:	4808      	ldr	r0, [pc, #32]	; (80067cc <MX_USART1_UART_Init+0x90>)
 80067aa:	f008 f98e 	bl	800eaca <HAL_UARTEx_SetRxFifoThreshold>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80067b4:	f7fb fe14 	bl	80023e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80067b8:	4804      	ldr	r0, [pc, #16]	; (80067cc <MX_USART1_UART_Init+0x90>)
 80067ba:	f008 f90f 	bl	800e9dc <HAL_UARTEx_DisableFifoMode>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80067c4:	f7fb fe0c 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80067c8:	bf00      	nop
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	24000b88 	.word	0x24000b88
 80067d0:	40011000 	.word	0x40011000

080067d4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80067d8:	4b22      	ldr	r3, [pc, #136]	; (8006864 <MX_USART2_UART_Init+0x90>)
 80067da:	4a23      	ldr	r2, [pc, #140]	; (8006868 <MX_USART2_UART_Init+0x94>)
 80067dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80067de:	4b21      	ldr	r3, [pc, #132]	; (8006864 <MX_USART2_UART_Init+0x90>)
 80067e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80067e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80067e6:	4b1f      	ldr	r3, [pc, #124]	; (8006864 <MX_USART2_UART_Init+0x90>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80067ec:	4b1d      	ldr	r3, [pc, #116]	; (8006864 <MX_USART2_UART_Init+0x90>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80067f2:	4b1c      	ldr	r3, [pc, #112]	; (8006864 <MX_USART2_UART_Init+0x90>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80067f8:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <MX_USART2_UART_Init+0x90>)
 80067fa:	220c      	movs	r2, #12
 80067fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067fe:	4b19      	ldr	r3, [pc, #100]	; (8006864 <MX_USART2_UART_Init+0x90>)
 8006800:	2200      	movs	r2, #0
 8006802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006804:	4b17      	ldr	r3, [pc, #92]	; (8006864 <MX_USART2_UART_Init+0x90>)
 8006806:	2200      	movs	r2, #0
 8006808:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800680a:	4b16      	ldr	r3, [pc, #88]	; (8006864 <MX_USART2_UART_Init+0x90>)
 800680c:	2200      	movs	r2, #0
 800680e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006810:	4b14      	ldr	r3, [pc, #80]	; (8006864 <MX_USART2_UART_Init+0x90>)
 8006812:	2200      	movs	r2, #0
 8006814:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006816:	4b13      	ldr	r3, [pc, #76]	; (8006864 <MX_USART2_UART_Init+0x90>)
 8006818:	2200      	movs	r2, #0
 800681a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800681c:	4811      	ldr	r0, [pc, #68]	; (8006864 <MX_USART2_UART_Init+0x90>)
 800681e:	f005 fe83 	bl	800c528 <HAL_UART_Init>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006828:	f7fb fdda 	bl	80023e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800682c:	2100      	movs	r1, #0
 800682e:	480d      	ldr	r0, [pc, #52]	; (8006864 <MX_USART2_UART_Init+0x90>)
 8006830:	f008 f90d 	bl	800ea4e <HAL_UARTEx_SetTxFifoThreshold>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800683a:	f7fb fdd1 	bl	80023e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800683e:	2100      	movs	r1, #0
 8006840:	4808      	ldr	r0, [pc, #32]	; (8006864 <MX_USART2_UART_Init+0x90>)
 8006842:	f008 f942 	bl	800eaca <HAL_UARTEx_SetRxFifoThreshold>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800684c:	f7fb fdc8 	bl	80023e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006850:	4804      	ldr	r0, [pc, #16]	; (8006864 <MX_USART2_UART_Init+0x90>)
 8006852:	f008 f8c3 	bl	800e9dc <HAL_UARTEx_DisableFifoMode>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800685c:	f7fb fdc0 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006860:	bf00      	nop
 8006862:	bd80      	pop	{r7, pc}
 8006864:	24000c18 	.word	0x24000c18
 8006868:	40004400 	.word	0x40004400

0800686c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006870:	4b22      	ldr	r3, [pc, #136]	; (80068fc <MX_USART3_UART_Init+0x90>)
 8006872:	4a23      	ldr	r2, [pc, #140]	; (8006900 <MX_USART3_UART_Init+0x94>)
 8006874:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006876:	4b21      	ldr	r3, [pc, #132]	; (80068fc <MX_USART3_UART_Init+0x90>)
 8006878:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800687c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800687e:	4b1f      	ldr	r3, [pc, #124]	; (80068fc <MX_USART3_UART_Init+0x90>)
 8006880:	2200      	movs	r2, #0
 8006882:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006884:	4b1d      	ldr	r3, [pc, #116]	; (80068fc <MX_USART3_UART_Init+0x90>)
 8006886:	2200      	movs	r2, #0
 8006888:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800688a:	4b1c      	ldr	r3, [pc, #112]	; (80068fc <MX_USART3_UART_Init+0x90>)
 800688c:	2200      	movs	r2, #0
 800688e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006890:	4b1a      	ldr	r3, [pc, #104]	; (80068fc <MX_USART3_UART_Init+0x90>)
 8006892:	220c      	movs	r2, #12
 8006894:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006896:	4b19      	ldr	r3, [pc, #100]	; (80068fc <MX_USART3_UART_Init+0x90>)
 8006898:	2200      	movs	r2, #0
 800689a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800689c:	4b17      	ldr	r3, [pc, #92]	; (80068fc <MX_USART3_UART_Init+0x90>)
 800689e:	2200      	movs	r2, #0
 80068a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068a2:	4b16      	ldr	r3, [pc, #88]	; (80068fc <MX_USART3_UART_Init+0x90>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80068a8:	4b14      	ldr	r3, [pc, #80]	; (80068fc <MX_USART3_UART_Init+0x90>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068ae:	4b13      	ldr	r3, [pc, #76]	; (80068fc <MX_USART3_UART_Init+0x90>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80068b4:	4811      	ldr	r0, [pc, #68]	; (80068fc <MX_USART3_UART_Init+0x90>)
 80068b6:	f005 fe37 	bl	800c528 <HAL_UART_Init>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80068c0:	f7fb fd8e 	bl	80023e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068c4:	2100      	movs	r1, #0
 80068c6:	480d      	ldr	r0, [pc, #52]	; (80068fc <MX_USART3_UART_Init+0x90>)
 80068c8:	f008 f8c1 	bl	800ea4e <HAL_UARTEx_SetTxFifoThreshold>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80068d2:	f7fb fd85 	bl	80023e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068d6:	2100      	movs	r1, #0
 80068d8:	4808      	ldr	r0, [pc, #32]	; (80068fc <MX_USART3_UART_Init+0x90>)
 80068da:	f008 f8f6 	bl	800eaca <HAL_UARTEx_SetRxFifoThreshold>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80068e4:	f7fb fd7c 	bl	80023e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80068e8:	4804      	ldr	r0, [pc, #16]	; (80068fc <MX_USART3_UART_Init+0x90>)
 80068ea:	f008 f877 	bl	800e9dc <HAL_UARTEx_DisableFifoMode>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80068f4:	f7fb fd74 	bl	80023e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80068f8:	bf00      	nop
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	24000ca8 	.word	0x24000ca8
 8006900:	40004800 	.word	0x40004800

08006904 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b0be      	sub	sp, #248	; 0xf8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800690c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	605a      	str	r2, [r3, #4]
 8006916:	609a      	str	r2, [r3, #8]
 8006918:	60da      	str	r2, [r3, #12]
 800691a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800691c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006920:	22bc      	movs	r2, #188	; 0xbc
 8006922:	2100      	movs	r1, #0
 8006924:	4618      	mov	r0, r3
 8006926:	f008 f995 	bl	800ec54 <memset>
  if(uartHandle->Instance==USART1)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a84      	ldr	r2, [pc, #528]	; (8006b40 <HAL_UART_MspInit+0x23c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d168      	bne.n	8006a06 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006934:	2301      	movs	r3, #1
 8006936:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006938:	2300      	movs	r3, #0
 800693a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800693e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006942:	4618      	mov	r0, r3
 8006944:	f002 fa8c 	bl	8008e60 <HAL_RCCEx_PeriphCLKConfig>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800694e:	f7fb fd47 	bl	80023e0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006952:	4b7c      	ldr	r3, [pc, #496]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006958:	4a7a      	ldr	r2, [pc, #488]	; (8006b44 <HAL_UART_MspInit+0x240>)
 800695a:	f043 0310 	orr.w	r3, r3, #16
 800695e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006962:	4b78      	ldr	r3, [pc, #480]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006970:	4b74      	ldr	r3, [pc, #464]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006976:	4a73      	ldr	r2, [pc, #460]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006978:	f043 0302 	orr.w	r3, r3, #2
 800697c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006980:	4b70      	ldr	r3, [pc, #448]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	623b      	str	r3, [r7, #32]
 800698c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800698e:	4b6d      	ldr	r3, [pc, #436]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006994:	4a6b      	ldr	r2, [pc, #428]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006996:	f043 0301 	orr.w	r3, r3, #1
 800699a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800699e:	4b69      	ldr	r3, [pc, #420]	; (8006b44 <HAL_UART_MspInit+0x240>)
 80069a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 80069ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b4:	2302      	movs	r3, #2
 80069b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80069c6:	2304      	movs	r3, #4
 80069c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 80069cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80069d0:	4619      	mov	r1, r3
 80069d2:	485d      	ldr	r0, [pc, #372]	; (8006b48 <HAL_UART_MspInit+0x244>)
 80069d4:	f001 f854 	bl	8007a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 80069d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e0:	2302      	movs	r3, #2
 80069e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ec:	2300      	movs	r3, #0
 80069ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80069f2:	2307      	movs	r3, #7
 80069f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 80069f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80069fc:	4619      	mov	r1, r3
 80069fe:	4853      	ldr	r0, [pc, #332]	; (8006b4c <HAL_UART_MspInit+0x248>)
 8006a00:	f001 f83e 	bl	8007a80 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006a04:	e097      	b.n	8006b36 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a51      	ldr	r2, [pc, #324]	; (8006b50 <HAL_UART_MspInit+0x24c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d142      	bne.n	8006a96 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006a10:	2302      	movs	r3, #2
 8006a12:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006a14:	2300      	movs	r3, #0
 8006a16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f002 fa1e 	bl	8008e60 <HAL_RCCEx_PeriphCLKConfig>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8006a2a:	f7fb fcd9 	bl	80023e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a2e:	4b45      	ldr	r3, [pc, #276]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a34:	4a43      	ldr	r2, [pc, #268]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a3e:	4b41      	ldr	r3, [pc, #260]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006a40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a4c:	4b3d      	ldr	r3, [pc, #244]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a52:	4a3c      	ldr	r2, [pc, #240]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006a54:	f043 0301 	orr.w	r3, r3, #1
 8006a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a5c:	4b39      	ldr	r3, [pc, #228]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a70:	2302      	movs	r3, #2
 8006a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006a82:	2307      	movs	r3, #7
 8006a84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	482f      	ldr	r0, [pc, #188]	; (8006b4c <HAL_UART_MspInit+0x248>)
 8006a90:	f000 fff6 	bl	8007a80 <HAL_GPIO_Init>
}
 8006a94:	e04f      	b.n	8006b36 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a2e      	ldr	r2, [pc, #184]	; (8006b54 <HAL_UART_MspInit+0x250>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d14a      	bne.n	8006b36 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f002 f9d6 	bl	8008e60 <HAL_RCCEx_PeriphCLKConfig>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8006aba:	f7fb fc91 	bl	80023e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006abe:	4b21      	ldr	r3, [pc, #132]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ac4:	4a1f      	ldr	r2, [pc, #124]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006ace:	4b1d      	ldr	r3, [pc, #116]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006adc:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ae2:	4a18      	ldr	r2, [pc, #96]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006ae4:	f043 0308 	orr.w	r3, r3, #8
 8006ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006aec:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <HAL_UART_MspInit+0x240>)
 8006aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8006afa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b02:	2302      	movs	r3, #2
 8006b04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006b14:	2307      	movs	r3, #7
 8006b16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b1e:	4619      	mov	r1, r3
 8006b20:	480d      	ldr	r0, [pc, #52]	; (8006b58 <HAL_UART_MspInit+0x254>)
 8006b22:	f000 ffad 	bl	8007a80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8006b26:	2201      	movs	r2, #1
 8006b28:	2101      	movs	r1, #1
 8006b2a:	2027      	movs	r0, #39	; 0x27
 8006b2c:	f000 fa01 	bl	8006f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006b30:	2027      	movs	r0, #39	; 0x27
 8006b32:	f000 fa18 	bl	8006f66 <HAL_NVIC_EnableIRQ>
}
 8006b36:	bf00      	nop
 8006b38:	37f8      	adds	r7, #248	; 0xf8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	40011000 	.word	0x40011000
 8006b44:	58024400 	.word	0x58024400
 8006b48:	58020400 	.word	0x58020400
 8006b4c:	58020000 	.word	0x58020000
 8006b50:	40004400 	.word	0x40004400
 8006b54:	40004800 	.word	0x40004800
 8006b58:	58020c00 	.word	0x58020c00

08006b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006b60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006b62:	e003      	b.n	8006b6c <LoopCopyDataInit>

08006b64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006b64:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006b66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006b68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006b6a:	3104      	adds	r1, #4

08006b6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006b6c:	480b      	ldr	r0, [pc, #44]	; (8006b9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006b6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006b70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006b72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006b74:	d3f6      	bcc.n	8006b64 <CopyDataInit>
  ldr  r2, =_sbss
 8006b76:	4a0b      	ldr	r2, [pc, #44]	; (8006ba4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006b78:	e002      	b.n	8006b80 <LoopFillZerobss>

08006b7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006b7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006b7c:	f842 3b04 	str.w	r3, [r2], #4

08006b80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006b80:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006b82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006b84:	d3f9      	bcc.n	8006b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006b86:	f7fc fa29 	bl	8002fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b8a:	f008 f831 	bl	800ebf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b8e:	f7fa ffc7 	bl	8001b20 <main>
  bx  lr    
 8006b92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006b94:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006b98:	08014028 	.word	0x08014028
  ldr  r0, =_sdata
 8006b9c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006ba0:	2400028c 	.word	0x2400028c
  ldr  r2, =_sbss
 8006ba4:	24000290 	.word	0x24000290
  ldr  r3, = _ebss
 8006ba8:	24000d4c 	.word	0x24000d4c

08006bac <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006bac:	e7fe      	b.n	8006bac <ADC3_IRQHandler>
	...

08006bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bb6:	2003      	movs	r0, #3
 8006bb8:	f000 f9b0 	bl	8006f1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006bbc:	f001 ff7a 	bl	8008ab4 <HAL_RCC_GetSysClockFreq>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4b15      	ldr	r3, [pc, #84]	; (8006c18 <HAL_Init+0x68>)
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	4913      	ldr	r1, [pc, #76]	; (8006c1c <HAL_Init+0x6c>)
 8006bce:	5ccb      	ldrb	r3, [r1, r3]
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bda:	4b0f      	ldr	r3, [pc, #60]	; (8006c18 <HAL_Init+0x68>)
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	4a0e      	ldr	r2, [pc, #56]	; (8006c1c <HAL_Init+0x6c>)
 8006be4:	5cd3      	ldrb	r3, [r2, r3]
 8006be6:	f003 031f 	and.w	r3, r3, #31
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf0:	4a0b      	ldr	r2, [pc, #44]	; (8006c20 <HAL_Init+0x70>)
 8006bf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bf4:	4a0b      	ldr	r2, [pc, #44]	; (8006c24 <HAL_Init+0x74>)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	f000 f814 	bl	8006c28 <HAL_InitTick>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e002      	b.n	8006c10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006c0a:	f7fc f86d 	bl	8002ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	080122f8 	.word	0x080122f8
 8006c20:	2400001c 	.word	0x2400001c
 8006c24:	24000018 	.word	0x24000018

08006c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006c30:	4b15      	ldr	r3, [pc, #84]	; (8006c88 <HAL_InitTick+0x60>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e021      	b.n	8006c80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006c3c:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <HAL_InitTick+0x64>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <HAL_InitTick+0x60>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	4619      	mov	r1, r3
 8006c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 f9a3 	bl	8006f9e <HAL_SYSTICK_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e00e      	b.n	8006c80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b0f      	cmp	r3, #15
 8006c66:	d80a      	bhi.n	8006c7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c68:	2200      	movs	r2, #0
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c70:	f000 f95f 	bl	8006f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c74:	4a06      	ldr	r2, [pc, #24]	; (8006c90 <HAL_InitTick+0x68>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e000      	b.n	8006c80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	240000b4 	.word	0x240000b4
 8006c8c:	24000018 	.word	0x24000018
 8006c90:	240000b0 	.word	0x240000b0

08006c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_IncTick+0x20>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <HAL_IncTick+0x24>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	4a04      	ldr	r2, [pc, #16]	; (8006cb8 <HAL_IncTick+0x24>)
 8006ca6:	6013      	str	r3, [r2, #0]
}
 8006ca8:	bf00      	nop
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	240000b4 	.word	0x240000b4
 8006cb8:	24000d38 	.word	0x24000d38

08006cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8006cc0:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <HAL_GetTick+0x14>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	24000d38 	.word	0x24000d38

08006cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006cdc:	f7ff ffee 	bl	8006cbc <HAL_GetTick>
 8006ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cec:	d005      	beq.n	8006cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cee:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <HAL_Delay+0x44>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006cfa:	bf00      	nop
 8006cfc:	f7ff ffde 	bl	8006cbc <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d8f7      	bhi.n	8006cfc <HAL_Delay+0x28>
  {
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	240000b4 	.word	0x240000b4

08006d1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <HAL_GetREVID+0x14>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	0c1b      	lsrs	r3, r3, #16
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	5c001000 	.word	0x5c001000

08006d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d44:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <__NVIC_SetPriorityGrouping+0x40>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d50:	4013      	ands	r3, r2
 8006d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <__NVIC_SetPriorityGrouping+0x44>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d62:	4a04      	ldr	r2, [pc, #16]	; (8006d74 <__NVIC_SetPriorityGrouping+0x40>)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	60d3      	str	r3, [r2, #12]
}
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	e000ed00 	.word	0xe000ed00
 8006d78:	05fa0000 	.word	0x05fa0000

08006d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <__NVIC_GetPriorityGrouping+0x18>)
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	0a1b      	lsrs	r3, r3, #8
 8006d86:	f003 0307 	and.w	r3, r3, #7
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	e000ed00 	.word	0xe000ed00

08006d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	db0b      	blt.n	8006dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006daa:	88fb      	ldrh	r3, [r7, #6]
 8006dac:	f003 021f 	and.w	r2, r3, #31
 8006db0:	4907      	ldr	r1, [pc, #28]	; (8006dd0 <__NVIC_EnableIRQ+0x38>)
 8006db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	2001      	movs	r0, #1
 8006dba:	fa00 f202 	lsl.w	r2, r0, r2
 8006dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	e000e100 	.word	0xe000e100

08006dd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	db12      	blt.n	8006e0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	f003 021f 	and.w	r2, r3, #31
 8006dec:	490a      	ldr	r1, [pc, #40]	; (8006e18 <__NVIC_DisableIRQ+0x44>)
 8006dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	2001      	movs	r0, #1
 8006df6:	fa00 f202 	lsl.w	r2, r0, r2
 8006dfa:	3320      	adds	r3, #32
 8006dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e00:	f3bf 8f4f 	dsb	sy
}
 8006e04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e06:	f3bf 8f6f 	isb	sy
}
 8006e0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	e000e100 	.word	0xe000e100

08006e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	6039      	str	r1, [r7, #0]
 8006e26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	db0a      	blt.n	8006e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	490c      	ldr	r1, [pc, #48]	; (8006e68 <__NVIC_SetPriority+0x4c>)
 8006e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e3a:	0112      	lsls	r2, r2, #4
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	440b      	add	r3, r1
 8006e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e44:	e00a      	b.n	8006e5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	4908      	ldr	r1, [pc, #32]	; (8006e6c <__NVIC_SetPriority+0x50>)
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	3b04      	subs	r3, #4
 8006e54:	0112      	lsls	r2, r2, #4
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	440b      	add	r3, r1
 8006e5a:	761a      	strb	r2, [r3, #24]
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	e000e100 	.word	0xe000e100
 8006e6c:	e000ed00 	.word	0xe000ed00

08006e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b089      	sub	sp, #36	; 0x24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f1c3 0307 	rsb	r3, r3, #7
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	bf28      	it	cs
 8006e8e:	2304      	movcs	r3, #4
 8006e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	3304      	adds	r3, #4
 8006e96:	2b06      	cmp	r3, #6
 8006e98:	d902      	bls.n	8006ea0 <NVIC_EncodePriority+0x30>
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	3b03      	subs	r3, #3
 8006e9e:	e000      	b.n	8006ea2 <NVIC_EncodePriority+0x32>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	43da      	mvns	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	401a      	ands	r2, r3
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec2:	43d9      	mvns	r1, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ec8:	4313      	orrs	r3, r2
         );
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3724      	adds	r7, #36	; 0x24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
	...

08006ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ee8:	d301      	bcc.n	8006eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006eea:	2301      	movs	r3, #1
 8006eec:	e00f      	b.n	8006f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006eee:	4a0a      	ldr	r2, [pc, #40]	; (8006f18 <SysTick_Config+0x40>)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ef6:	210f      	movs	r1, #15
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	f7ff ff8e 	bl	8006e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <SysTick_Config+0x40>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f06:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <SysTick_Config+0x40>)
 8006f08:	2207      	movs	r2, #7
 8006f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	e000e010 	.word	0xe000e010

08006f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff ff05 	bl	8006d34 <__NVIC_SetPriorityGrouping>
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	4603      	mov	r3, r0
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f40:	f7ff ff1c 	bl	8006d7c <__NVIC_GetPriorityGrouping>
 8006f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	6978      	ldr	r0, [r7, #20]
 8006f4c:	f7ff ff90 	bl	8006e70 <NVIC_EncodePriority>
 8006f50:	4602      	mov	r2, r0
 8006f52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f56:	4611      	mov	r1, r2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff ff5f 	bl	8006e1c <__NVIC_SetPriority>
}
 8006f5e:	bf00      	nop
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff ff0f 	bl	8006d98 <__NVIC_EnableIRQ>
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	4603      	mov	r3, r0
 8006f8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff ff1f 	bl	8006dd4 <__NVIC_DisableIRQ>
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff ff96 	bl	8006ed8 <SysTick_Config>
 8006fac:	4603      	mov	r3, r0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006fc0:	f7ff fe7c 	bl	8006cbc <HAL_GetTick>
 8006fc4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e2dc      	b.n	800758a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d008      	beq.n	8006fee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2280      	movs	r2, #128	; 0x80
 8006fe0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e2cd      	b.n	800758a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a76      	ldr	r2, [pc, #472]	; (80071cc <HAL_DMA_Abort+0x214>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d04a      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a74      	ldr	r2, [pc, #464]	; (80071d0 <HAL_DMA_Abort+0x218>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d045      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a73      	ldr	r2, [pc, #460]	; (80071d4 <HAL_DMA_Abort+0x21c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d040      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a71      	ldr	r2, [pc, #452]	; (80071d8 <HAL_DMA_Abort+0x220>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d03b      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a70      	ldr	r2, [pc, #448]	; (80071dc <HAL_DMA_Abort+0x224>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d036      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a6e      	ldr	r2, [pc, #440]	; (80071e0 <HAL_DMA_Abort+0x228>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d031      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a6d      	ldr	r2, [pc, #436]	; (80071e4 <HAL_DMA_Abort+0x22c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d02c      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a6b      	ldr	r2, [pc, #428]	; (80071e8 <HAL_DMA_Abort+0x230>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d027      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a6a      	ldr	r2, [pc, #424]	; (80071ec <HAL_DMA_Abort+0x234>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d022      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a68      	ldr	r2, [pc, #416]	; (80071f0 <HAL_DMA_Abort+0x238>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d01d      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a67      	ldr	r2, [pc, #412]	; (80071f4 <HAL_DMA_Abort+0x23c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d018      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a65      	ldr	r2, [pc, #404]	; (80071f8 <HAL_DMA_Abort+0x240>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a64      	ldr	r2, [pc, #400]	; (80071fc <HAL_DMA_Abort+0x244>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00e      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a62      	ldr	r2, [pc, #392]	; (8007200 <HAL_DMA_Abort+0x248>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d009      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a61      	ldr	r2, [pc, #388]	; (8007204 <HAL_DMA_Abort+0x24c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d004      	beq.n	800708e <HAL_DMA_Abort+0xd6>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a5f      	ldr	r2, [pc, #380]	; (8007208 <HAL_DMA_Abort+0x250>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d101      	bne.n	8007092 <HAL_DMA_Abort+0xda>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <HAL_DMA_Abort+0xdc>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d013      	beq.n	80070c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 021e 	bic.w	r2, r2, #30
 80070a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e00a      	b.n	80070d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 020e 	bic.w	r2, r2, #14
 80070ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a3c      	ldr	r2, [pc, #240]	; (80071cc <HAL_DMA_Abort+0x214>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d072      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a3a      	ldr	r2, [pc, #232]	; (80071d0 <HAL_DMA_Abort+0x218>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d06d      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a39      	ldr	r2, [pc, #228]	; (80071d4 <HAL_DMA_Abort+0x21c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d068      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a37      	ldr	r2, [pc, #220]	; (80071d8 <HAL_DMA_Abort+0x220>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d063      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a36      	ldr	r2, [pc, #216]	; (80071dc <HAL_DMA_Abort+0x224>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d05e      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a34      	ldr	r2, [pc, #208]	; (80071e0 <HAL_DMA_Abort+0x228>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d059      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a33      	ldr	r2, [pc, #204]	; (80071e4 <HAL_DMA_Abort+0x22c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d054      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a31      	ldr	r2, [pc, #196]	; (80071e8 <HAL_DMA_Abort+0x230>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d04f      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a30      	ldr	r2, [pc, #192]	; (80071ec <HAL_DMA_Abort+0x234>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d04a      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a2e      	ldr	r2, [pc, #184]	; (80071f0 <HAL_DMA_Abort+0x238>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d045      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a2d      	ldr	r2, [pc, #180]	; (80071f4 <HAL_DMA_Abort+0x23c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d040      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a2b      	ldr	r2, [pc, #172]	; (80071f8 <HAL_DMA_Abort+0x240>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d03b      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a2a      	ldr	r2, [pc, #168]	; (80071fc <HAL_DMA_Abort+0x244>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d036      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a28      	ldr	r2, [pc, #160]	; (8007200 <HAL_DMA_Abort+0x248>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d031      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a27      	ldr	r2, [pc, #156]	; (8007204 <HAL_DMA_Abort+0x24c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d02c      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a25      	ldr	r2, [pc, #148]	; (8007208 <HAL_DMA_Abort+0x250>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d027      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a24      	ldr	r2, [pc, #144]	; (800720c <HAL_DMA_Abort+0x254>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d022      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a22      	ldr	r2, [pc, #136]	; (8007210 <HAL_DMA_Abort+0x258>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d01d      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a21      	ldr	r2, [pc, #132]	; (8007214 <HAL_DMA_Abort+0x25c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d018      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a1f      	ldr	r2, [pc, #124]	; (8007218 <HAL_DMA_Abort+0x260>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d013      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1e      	ldr	r2, [pc, #120]	; (800721c <HAL_DMA_Abort+0x264>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00e      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1c      	ldr	r2, [pc, #112]	; (8007220 <HAL_DMA_Abort+0x268>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d009      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a1b      	ldr	r2, [pc, #108]	; (8007224 <HAL_DMA_Abort+0x26c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d004      	beq.n	80071c6 <HAL_DMA_Abort+0x20e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a19      	ldr	r2, [pc, #100]	; (8007228 <HAL_DMA_Abort+0x270>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d132      	bne.n	800722c <HAL_DMA_Abort+0x274>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e031      	b.n	800722e <HAL_DMA_Abort+0x276>
 80071ca:	bf00      	nop
 80071cc:	40020010 	.word	0x40020010
 80071d0:	40020028 	.word	0x40020028
 80071d4:	40020040 	.word	0x40020040
 80071d8:	40020058 	.word	0x40020058
 80071dc:	40020070 	.word	0x40020070
 80071e0:	40020088 	.word	0x40020088
 80071e4:	400200a0 	.word	0x400200a0
 80071e8:	400200b8 	.word	0x400200b8
 80071ec:	40020410 	.word	0x40020410
 80071f0:	40020428 	.word	0x40020428
 80071f4:	40020440 	.word	0x40020440
 80071f8:	40020458 	.word	0x40020458
 80071fc:	40020470 	.word	0x40020470
 8007200:	40020488 	.word	0x40020488
 8007204:	400204a0 	.word	0x400204a0
 8007208:	400204b8 	.word	0x400204b8
 800720c:	58025408 	.word	0x58025408
 8007210:	5802541c 	.word	0x5802541c
 8007214:	58025430 	.word	0x58025430
 8007218:	58025444 	.word	0x58025444
 800721c:	58025458 	.word	0x58025458
 8007220:	5802546c 	.word	0x5802546c
 8007224:	58025480 	.word	0x58025480
 8007228:	58025494 	.word	0x58025494
 800722c:	2300      	movs	r3, #0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d007      	beq.n	8007242 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007240:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a6d      	ldr	r2, [pc, #436]	; (80073fc <HAL_DMA_Abort+0x444>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d04a      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a6b      	ldr	r2, [pc, #428]	; (8007400 <HAL_DMA_Abort+0x448>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d045      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a6a      	ldr	r2, [pc, #424]	; (8007404 <HAL_DMA_Abort+0x44c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d040      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a68      	ldr	r2, [pc, #416]	; (8007408 <HAL_DMA_Abort+0x450>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d03b      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a67      	ldr	r2, [pc, #412]	; (800740c <HAL_DMA_Abort+0x454>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d036      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a65      	ldr	r2, [pc, #404]	; (8007410 <HAL_DMA_Abort+0x458>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d031      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a64      	ldr	r2, [pc, #400]	; (8007414 <HAL_DMA_Abort+0x45c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d02c      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a62      	ldr	r2, [pc, #392]	; (8007418 <HAL_DMA_Abort+0x460>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d027      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a61      	ldr	r2, [pc, #388]	; (800741c <HAL_DMA_Abort+0x464>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d022      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a5f      	ldr	r2, [pc, #380]	; (8007420 <HAL_DMA_Abort+0x468>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01d      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a5e      	ldr	r2, [pc, #376]	; (8007424 <HAL_DMA_Abort+0x46c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d018      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a5c      	ldr	r2, [pc, #368]	; (8007428 <HAL_DMA_Abort+0x470>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d013      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a5b      	ldr	r2, [pc, #364]	; (800742c <HAL_DMA_Abort+0x474>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00e      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a59      	ldr	r2, [pc, #356]	; (8007430 <HAL_DMA_Abort+0x478>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d009      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a58      	ldr	r2, [pc, #352]	; (8007434 <HAL_DMA_Abort+0x47c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_DMA_Abort+0x32a>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a56      	ldr	r2, [pc, #344]	; (8007438 <HAL_DMA_Abort+0x480>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d108      	bne.n	80072f4 <HAL_DMA_Abort+0x33c>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e007      	b.n	8007304 <HAL_DMA_Abort+0x34c>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0201 	bic.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007304:	e013      	b.n	800732e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007306:	f7ff fcd9 	bl	8006cbc <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b05      	cmp	r3, #5
 8007312:	d90c      	bls.n	800732e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2203      	movs	r2, #3
 800731e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e12d      	b.n	800758a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e5      	bne.n	8007306 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a2f      	ldr	r2, [pc, #188]	; (80073fc <HAL_DMA_Abort+0x444>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d04a      	beq.n	80073da <HAL_DMA_Abort+0x422>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a2d      	ldr	r2, [pc, #180]	; (8007400 <HAL_DMA_Abort+0x448>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d045      	beq.n	80073da <HAL_DMA_Abort+0x422>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a2c      	ldr	r2, [pc, #176]	; (8007404 <HAL_DMA_Abort+0x44c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d040      	beq.n	80073da <HAL_DMA_Abort+0x422>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a2a      	ldr	r2, [pc, #168]	; (8007408 <HAL_DMA_Abort+0x450>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d03b      	beq.n	80073da <HAL_DMA_Abort+0x422>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a29      	ldr	r2, [pc, #164]	; (800740c <HAL_DMA_Abort+0x454>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d036      	beq.n	80073da <HAL_DMA_Abort+0x422>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a27      	ldr	r2, [pc, #156]	; (8007410 <HAL_DMA_Abort+0x458>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d031      	beq.n	80073da <HAL_DMA_Abort+0x422>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a26      	ldr	r2, [pc, #152]	; (8007414 <HAL_DMA_Abort+0x45c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d02c      	beq.n	80073da <HAL_DMA_Abort+0x422>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a24      	ldr	r2, [pc, #144]	; (8007418 <HAL_DMA_Abort+0x460>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d027      	beq.n	80073da <HAL_DMA_Abort+0x422>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a23      	ldr	r2, [pc, #140]	; (800741c <HAL_DMA_Abort+0x464>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d022      	beq.n	80073da <HAL_DMA_Abort+0x422>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a21      	ldr	r2, [pc, #132]	; (8007420 <HAL_DMA_Abort+0x468>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d01d      	beq.n	80073da <HAL_DMA_Abort+0x422>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a20      	ldr	r2, [pc, #128]	; (8007424 <HAL_DMA_Abort+0x46c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d018      	beq.n	80073da <HAL_DMA_Abort+0x422>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a1e      	ldr	r2, [pc, #120]	; (8007428 <HAL_DMA_Abort+0x470>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d013      	beq.n	80073da <HAL_DMA_Abort+0x422>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1d      	ldr	r2, [pc, #116]	; (800742c <HAL_DMA_Abort+0x474>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d00e      	beq.n	80073da <HAL_DMA_Abort+0x422>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <HAL_DMA_Abort+0x478>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d009      	beq.n	80073da <HAL_DMA_Abort+0x422>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1a      	ldr	r2, [pc, #104]	; (8007434 <HAL_DMA_Abort+0x47c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d004      	beq.n	80073da <HAL_DMA_Abort+0x422>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a18      	ldr	r2, [pc, #96]	; (8007438 <HAL_DMA_Abort+0x480>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d101      	bne.n	80073de <HAL_DMA_Abort+0x426>
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <HAL_DMA_Abort+0x428>
 80073de:	2300      	movs	r3, #0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d02b      	beq.n	800743c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	223f      	movs	r2, #63	; 0x3f
 80073f4:	409a      	lsls	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	609a      	str	r2, [r3, #8]
 80073fa:	e02a      	b.n	8007452 <HAL_DMA_Abort+0x49a>
 80073fc:	40020010 	.word	0x40020010
 8007400:	40020028 	.word	0x40020028
 8007404:	40020040 	.word	0x40020040
 8007408:	40020058 	.word	0x40020058
 800740c:	40020070 	.word	0x40020070
 8007410:	40020088 	.word	0x40020088
 8007414:	400200a0 	.word	0x400200a0
 8007418:	400200b8 	.word	0x400200b8
 800741c:	40020410 	.word	0x40020410
 8007420:	40020428 	.word	0x40020428
 8007424:	40020440 	.word	0x40020440
 8007428:	40020458 	.word	0x40020458
 800742c:	40020470 	.word	0x40020470
 8007430:	40020488 	.word	0x40020488
 8007434:	400204a0 	.word	0x400204a0
 8007438:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007440:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007446:	f003 031f 	and.w	r3, r3, #31
 800744a:	2201      	movs	r2, #1
 800744c:	409a      	lsls	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a4f      	ldr	r2, [pc, #316]	; (8007594 <HAL_DMA_Abort+0x5dc>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d072      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a4d      	ldr	r2, [pc, #308]	; (8007598 <HAL_DMA_Abort+0x5e0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d06d      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a4c      	ldr	r2, [pc, #304]	; (800759c <HAL_DMA_Abort+0x5e4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d068      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a4a      	ldr	r2, [pc, #296]	; (80075a0 <HAL_DMA_Abort+0x5e8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d063      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a49      	ldr	r2, [pc, #292]	; (80075a4 <HAL_DMA_Abort+0x5ec>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d05e      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a47      	ldr	r2, [pc, #284]	; (80075a8 <HAL_DMA_Abort+0x5f0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d059      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a46      	ldr	r2, [pc, #280]	; (80075ac <HAL_DMA_Abort+0x5f4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d054      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a44      	ldr	r2, [pc, #272]	; (80075b0 <HAL_DMA_Abort+0x5f8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d04f      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a43      	ldr	r2, [pc, #268]	; (80075b4 <HAL_DMA_Abort+0x5fc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d04a      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a41      	ldr	r2, [pc, #260]	; (80075b8 <HAL_DMA_Abort+0x600>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d045      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a40      	ldr	r2, [pc, #256]	; (80075bc <HAL_DMA_Abort+0x604>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d040      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a3e      	ldr	r2, [pc, #248]	; (80075c0 <HAL_DMA_Abort+0x608>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d03b      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a3d      	ldr	r2, [pc, #244]	; (80075c4 <HAL_DMA_Abort+0x60c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d036      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a3b      	ldr	r2, [pc, #236]	; (80075c8 <HAL_DMA_Abort+0x610>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d031      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a3a      	ldr	r2, [pc, #232]	; (80075cc <HAL_DMA_Abort+0x614>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d02c      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a38      	ldr	r2, [pc, #224]	; (80075d0 <HAL_DMA_Abort+0x618>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d027      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a37      	ldr	r2, [pc, #220]	; (80075d4 <HAL_DMA_Abort+0x61c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d022      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a35      	ldr	r2, [pc, #212]	; (80075d8 <HAL_DMA_Abort+0x620>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01d      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a34      	ldr	r2, [pc, #208]	; (80075dc <HAL_DMA_Abort+0x624>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d018      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a32      	ldr	r2, [pc, #200]	; (80075e0 <HAL_DMA_Abort+0x628>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d013      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a31      	ldr	r2, [pc, #196]	; (80075e4 <HAL_DMA_Abort+0x62c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00e      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a2f      	ldr	r2, [pc, #188]	; (80075e8 <HAL_DMA_Abort+0x630>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d009      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a2e      	ldr	r2, [pc, #184]	; (80075ec <HAL_DMA_Abort+0x634>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d004      	beq.n	8007542 <HAL_DMA_Abort+0x58a>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2c      	ldr	r2, [pc, #176]	; (80075f0 <HAL_DMA_Abort+0x638>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d101      	bne.n	8007546 <HAL_DMA_Abort+0x58e>
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <HAL_DMA_Abort+0x590>
 8007546:	2300      	movs	r3, #0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d015      	beq.n	8007578 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007554:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00c      	beq.n	8007578 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800756c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007576:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40020010 	.word	0x40020010
 8007598:	40020028 	.word	0x40020028
 800759c:	40020040 	.word	0x40020040
 80075a0:	40020058 	.word	0x40020058
 80075a4:	40020070 	.word	0x40020070
 80075a8:	40020088 	.word	0x40020088
 80075ac:	400200a0 	.word	0x400200a0
 80075b0:	400200b8 	.word	0x400200b8
 80075b4:	40020410 	.word	0x40020410
 80075b8:	40020428 	.word	0x40020428
 80075bc:	40020440 	.word	0x40020440
 80075c0:	40020458 	.word	0x40020458
 80075c4:	40020470 	.word	0x40020470
 80075c8:	40020488 	.word	0x40020488
 80075cc:	400204a0 	.word	0x400204a0
 80075d0:	400204b8 	.word	0x400204b8
 80075d4:	58025408 	.word	0x58025408
 80075d8:	5802541c 	.word	0x5802541c
 80075dc:	58025430 	.word	0x58025430
 80075e0:	58025444 	.word	0x58025444
 80075e4:	58025458 	.word	0x58025458
 80075e8:	5802546c 	.word	0x5802546c
 80075ec:	58025480 	.word	0x58025480
 80075f0:	58025494 	.word	0x58025494

080075f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e237      	b.n	8007a76 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d004      	beq.n	800761c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2280      	movs	r2, #128	; 0x80
 8007616:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e22c      	b.n	8007a76 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a5c      	ldr	r2, [pc, #368]	; (8007794 <HAL_DMA_Abort_IT+0x1a0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d04a      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a5b      	ldr	r2, [pc, #364]	; (8007798 <HAL_DMA_Abort_IT+0x1a4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d045      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a59      	ldr	r2, [pc, #356]	; (800779c <HAL_DMA_Abort_IT+0x1a8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d040      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a58      	ldr	r2, [pc, #352]	; (80077a0 <HAL_DMA_Abort_IT+0x1ac>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d03b      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a56      	ldr	r2, [pc, #344]	; (80077a4 <HAL_DMA_Abort_IT+0x1b0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d036      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a55      	ldr	r2, [pc, #340]	; (80077a8 <HAL_DMA_Abort_IT+0x1b4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d031      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a53      	ldr	r2, [pc, #332]	; (80077ac <HAL_DMA_Abort_IT+0x1b8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d02c      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a52      	ldr	r2, [pc, #328]	; (80077b0 <HAL_DMA_Abort_IT+0x1bc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d027      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a50      	ldr	r2, [pc, #320]	; (80077b4 <HAL_DMA_Abort_IT+0x1c0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d022      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a4f      	ldr	r2, [pc, #316]	; (80077b8 <HAL_DMA_Abort_IT+0x1c4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d01d      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a4d      	ldr	r2, [pc, #308]	; (80077bc <HAL_DMA_Abort_IT+0x1c8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d018      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a4c      	ldr	r2, [pc, #304]	; (80077c0 <HAL_DMA_Abort_IT+0x1cc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d013      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a4a      	ldr	r2, [pc, #296]	; (80077c4 <HAL_DMA_Abort_IT+0x1d0>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00e      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a49      	ldr	r2, [pc, #292]	; (80077c8 <HAL_DMA_Abort_IT+0x1d4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d009      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a47      	ldr	r2, [pc, #284]	; (80077cc <HAL_DMA_Abort_IT+0x1d8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d004      	beq.n	80076bc <HAL_DMA_Abort_IT+0xc8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a46      	ldr	r2, [pc, #280]	; (80077d0 <HAL_DMA_Abort_IT+0x1dc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d101      	bne.n	80076c0 <HAL_DMA_Abort_IT+0xcc>
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <HAL_DMA_Abort_IT+0xce>
 80076c0:	2300      	movs	r3, #0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 8086 	beq.w	80077d4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2204      	movs	r2, #4
 80076cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a2f      	ldr	r2, [pc, #188]	; (8007794 <HAL_DMA_Abort_IT+0x1a0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d04a      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a2e      	ldr	r2, [pc, #184]	; (8007798 <HAL_DMA_Abort_IT+0x1a4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d045      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a2c      	ldr	r2, [pc, #176]	; (800779c <HAL_DMA_Abort_IT+0x1a8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d040      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a2b      	ldr	r2, [pc, #172]	; (80077a0 <HAL_DMA_Abort_IT+0x1ac>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d03b      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a29      	ldr	r2, [pc, #164]	; (80077a4 <HAL_DMA_Abort_IT+0x1b0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d036      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a28      	ldr	r2, [pc, #160]	; (80077a8 <HAL_DMA_Abort_IT+0x1b4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d031      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a26      	ldr	r2, [pc, #152]	; (80077ac <HAL_DMA_Abort_IT+0x1b8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d02c      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a25      	ldr	r2, [pc, #148]	; (80077b0 <HAL_DMA_Abort_IT+0x1bc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d027      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a23      	ldr	r2, [pc, #140]	; (80077b4 <HAL_DMA_Abort_IT+0x1c0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d022      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a22      	ldr	r2, [pc, #136]	; (80077b8 <HAL_DMA_Abort_IT+0x1c4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d01d      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a20      	ldr	r2, [pc, #128]	; (80077bc <HAL_DMA_Abort_IT+0x1c8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d018      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1f      	ldr	r2, [pc, #124]	; (80077c0 <HAL_DMA_Abort_IT+0x1cc>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d013      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1d      	ldr	r2, [pc, #116]	; (80077c4 <HAL_DMA_Abort_IT+0x1d0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00e      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1c      	ldr	r2, [pc, #112]	; (80077c8 <HAL_DMA_Abort_IT+0x1d4>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d009      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a1a      	ldr	r2, [pc, #104]	; (80077cc <HAL_DMA_Abort_IT+0x1d8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d004      	beq.n	8007770 <HAL_DMA_Abort_IT+0x17c>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a19      	ldr	r2, [pc, #100]	; (80077d0 <HAL_DMA_Abort_IT+0x1dc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d108      	bne.n	8007782 <HAL_DMA_Abort_IT+0x18e>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e178      	b.n	8007a74 <HAL_DMA_Abort_IT+0x480>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0201 	bic.w	r2, r2, #1
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	e16f      	b.n	8007a74 <HAL_DMA_Abort_IT+0x480>
 8007794:	40020010 	.word	0x40020010
 8007798:	40020028 	.word	0x40020028
 800779c:	40020040 	.word	0x40020040
 80077a0:	40020058 	.word	0x40020058
 80077a4:	40020070 	.word	0x40020070
 80077a8:	40020088 	.word	0x40020088
 80077ac:	400200a0 	.word	0x400200a0
 80077b0:	400200b8 	.word	0x400200b8
 80077b4:	40020410 	.word	0x40020410
 80077b8:	40020428 	.word	0x40020428
 80077bc:	40020440 	.word	0x40020440
 80077c0:	40020458 	.word	0x40020458
 80077c4:	40020470 	.word	0x40020470
 80077c8:	40020488 	.word	0x40020488
 80077cc:	400204a0 	.word	0x400204a0
 80077d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 020e 	bic.w	r2, r2, #14
 80077e2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a6c      	ldr	r2, [pc, #432]	; (800799c <HAL_DMA_Abort_IT+0x3a8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d04a      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a6b      	ldr	r2, [pc, #428]	; (80079a0 <HAL_DMA_Abort_IT+0x3ac>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d045      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a69      	ldr	r2, [pc, #420]	; (80079a4 <HAL_DMA_Abort_IT+0x3b0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d040      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a68      	ldr	r2, [pc, #416]	; (80079a8 <HAL_DMA_Abort_IT+0x3b4>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d03b      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a66      	ldr	r2, [pc, #408]	; (80079ac <HAL_DMA_Abort_IT+0x3b8>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d036      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a65      	ldr	r2, [pc, #404]	; (80079b0 <HAL_DMA_Abort_IT+0x3bc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d031      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a63      	ldr	r2, [pc, #396]	; (80079b4 <HAL_DMA_Abort_IT+0x3c0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d02c      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a62      	ldr	r2, [pc, #392]	; (80079b8 <HAL_DMA_Abort_IT+0x3c4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d027      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a60      	ldr	r2, [pc, #384]	; (80079bc <HAL_DMA_Abort_IT+0x3c8>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d022      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a5f      	ldr	r2, [pc, #380]	; (80079c0 <HAL_DMA_Abort_IT+0x3cc>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d01d      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a5d      	ldr	r2, [pc, #372]	; (80079c4 <HAL_DMA_Abort_IT+0x3d0>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d018      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a5c      	ldr	r2, [pc, #368]	; (80079c8 <HAL_DMA_Abort_IT+0x3d4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d013      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a5a      	ldr	r2, [pc, #360]	; (80079cc <HAL_DMA_Abort_IT+0x3d8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d00e      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a59      	ldr	r2, [pc, #356]	; (80079d0 <HAL_DMA_Abort_IT+0x3dc>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d009      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a57      	ldr	r2, [pc, #348]	; (80079d4 <HAL_DMA_Abort_IT+0x3e0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d004      	beq.n	8007884 <HAL_DMA_Abort_IT+0x290>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a56      	ldr	r2, [pc, #344]	; (80079d8 <HAL_DMA_Abort_IT+0x3e4>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d108      	bne.n	8007896 <HAL_DMA_Abort_IT+0x2a2>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0201 	bic.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	e007      	b.n	80078a6 <HAL_DMA_Abort_IT+0x2b2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0201 	bic.w	r2, r2, #1
 80078a4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a3c      	ldr	r2, [pc, #240]	; (800799c <HAL_DMA_Abort_IT+0x3a8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d072      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a3a      	ldr	r2, [pc, #232]	; (80079a0 <HAL_DMA_Abort_IT+0x3ac>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d06d      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a39      	ldr	r2, [pc, #228]	; (80079a4 <HAL_DMA_Abort_IT+0x3b0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d068      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a37      	ldr	r2, [pc, #220]	; (80079a8 <HAL_DMA_Abort_IT+0x3b4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d063      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a36      	ldr	r2, [pc, #216]	; (80079ac <HAL_DMA_Abort_IT+0x3b8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d05e      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a34      	ldr	r2, [pc, #208]	; (80079b0 <HAL_DMA_Abort_IT+0x3bc>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d059      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a33      	ldr	r2, [pc, #204]	; (80079b4 <HAL_DMA_Abort_IT+0x3c0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d054      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a31      	ldr	r2, [pc, #196]	; (80079b8 <HAL_DMA_Abort_IT+0x3c4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d04f      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a30      	ldr	r2, [pc, #192]	; (80079bc <HAL_DMA_Abort_IT+0x3c8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d04a      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a2e      	ldr	r2, [pc, #184]	; (80079c0 <HAL_DMA_Abort_IT+0x3cc>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d045      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a2d      	ldr	r2, [pc, #180]	; (80079c4 <HAL_DMA_Abort_IT+0x3d0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d040      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a2b      	ldr	r2, [pc, #172]	; (80079c8 <HAL_DMA_Abort_IT+0x3d4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d03b      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a2a      	ldr	r2, [pc, #168]	; (80079cc <HAL_DMA_Abort_IT+0x3d8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d036      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a28      	ldr	r2, [pc, #160]	; (80079d0 <HAL_DMA_Abort_IT+0x3dc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d031      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a27      	ldr	r2, [pc, #156]	; (80079d4 <HAL_DMA_Abort_IT+0x3e0>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d02c      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a25      	ldr	r2, [pc, #148]	; (80079d8 <HAL_DMA_Abort_IT+0x3e4>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d027      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a24      	ldr	r2, [pc, #144]	; (80079dc <HAL_DMA_Abort_IT+0x3e8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d022      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a22      	ldr	r2, [pc, #136]	; (80079e0 <HAL_DMA_Abort_IT+0x3ec>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d01d      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a21      	ldr	r2, [pc, #132]	; (80079e4 <HAL_DMA_Abort_IT+0x3f0>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d018      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1f      	ldr	r2, [pc, #124]	; (80079e8 <HAL_DMA_Abort_IT+0x3f4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <HAL_DMA_Abort_IT+0x3f8>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00e      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1c      	ldr	r2, [pc, #112]	; (80079f0 <HAL_DMA_Abort_IT+0x3fc>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d009      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1b      	ldr	r2, [pc, #108]	; (80079f4 <HAL_DMA_Abort_IT+0x400>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d004      	beq.n	8007996 <HAL_DMA_Abort_IT+0x3a2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a19      	ldr	r2, [pc, #100]	; (80079f8 <HAL_DMA_Abort_IT+0x404>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d132      	bne.n	80079fc <HAL_DMA_Abort_IT+0x408>
 8007996:	2301      	movs	r3, #1
 8007998:	e031      	b.n	80079fe <HAL_DMA_Abort_IT+0x40a>
 800799a:	bf00      	nop
 800799c:	40020010 	.word	0x40020010
 80079a0:	40020028 	.word	0x40020028
 80079a4:	40020040 	.word	0x40020040
 80079a8:	40020058 	.word	0x40020058
 80079ac:	40020070 	.word	0x40020070
 80079b0:	40020088 	.word	0x40020088
 80079b4:	400200a0 	.word	0x400200a0
 80079b8:	400200b8 	.word	0x400200b8
 80079bc:	40020410 	.word	0x40020410
 80079c0:	40020428 	.word	0x40020428
 80079c4:	40020440 	.word	0x40020440
 80079c8:	40020458 	.word	0x40020458
 80079cc:	40020470 	.word	0x40020470
 80079d0:	40020488 	.word	0x40020488
 80079d4:	400204a0 	.word	0x400204a0
 80079d8:	400204b8 	.word	0x400204b8
 80079dc:	58025408 	.word	0x58025408
 80079e0:	5802541c 	.word	0x5802541c
 80079e4:	58025430 	.word	0x58025430
 80079e8:	58025444 	.word	0x58025444
 80079ec:	58025458 	.word	0x58025458
 80079f0:	5802546c 	.word	0x5802546c
 80079f4:	58025480 	.word	0x58025480
 80079f8:	58025494 	.word	0x58025494
 80079fc:	2300      	movs	r3, #0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d028      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1c:	f003 031f 	and.w	r3, r3, #31
 8007a20:	2201      	movs	r2, #1
 8007a22:	409a      	lsls	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00c      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop

08007a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b089      	sub	sp, #36	; 0x24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007a8e:	4b89      	ldr	r3, [pc, #548]	; (8007cb4 <HAL_GPIO_Init+0x234>)
 8007a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a92:	e194      	b.n	8007dbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	2101      	movs	r1, #1
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 8186 	beq.w	8007db8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f003 0303 	and.w	r3, r3, #3
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d005      	beq.n	8007ac4 <HAL_GPIO_Init+0x44>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f003 0303 	and.w	r3, r3, #3
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d130      	bne.n	8007b26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	2203      	movs	r2, #3
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007afa:	2201      	movs	r2, #1
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	fa02 f303 	lsl.w	r3, r2, r3
 8007b02:	43db      	mvns	r3, r3
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	4013      	ands	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	091b      	lsrs	r3, r3, #4
 8007b10:	f003 0201 	and.w	r2, r3, #1
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d017      	beq.n	8007b62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	2203      	movs	r2, #3
 8007b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b42:	43db      	mvns	r3, r3
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	4013      	ands	r3, r2
 8007b48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	689a      	ldr	r2, [r3, #8]
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	fa02 f303 	lsl.w	r3, r2, r3
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d123      	bne.n	8007bb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	08da      	lsrs	r2, r3, #3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	3208      	adds	r2, #8
 8007b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	220f      	movs	r2, #15
 8007b86:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8a:	43db      	mvns	r3, r3
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	691a      	ldr	r2, [r3, #16]
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	f003 0307 	and.w	r3, r3, #7
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	08da      	lsrs	r2, r3, #3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3208      	adds	r2, #8
 8007bb0:	69b9      	ldr	r1, [r7, #24]
 8007bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	005b      	lsls	r3, r3, #1
 8007bc0:	2203      	movs	r2, #3
 8007bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc6:	43db      	mvns	r3, r3
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f003 0203 	and.w	r2, r3, #3
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80e0 	beq.w	8007db8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bf8:	4b2f      	ldr	r3, [pc, #188]	; (8007cb8 <HAL_GPIO_Init+0x238>)
 8007bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bfe:	4a2e      	ldr	r2, [pc, #184]	; (8007cb8 <HAL_GPIO_Init+0x238>)
 8007c00:	f043 0302 	orr.w	r3, r3, #2
 8007c04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007c08:	4b2b      	ldr	r3, [pc, #172]	; (8007cb8 <HAL_GPIO_Init+0x238>)
 8007c0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c16:	4a29      	ldr	r2, [pc, #164]	; (8007cbc <HAL_GPIO_Init+0x23c>)
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	089b      	lsrs	r3, r3, #2
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	220f      	movs	r2, #15
 8007c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c32:	43db      	mvns	r3, r3
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	4013      	ands	r3, r2
 8007c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a20      	ldr	r2, [pc, #128]	; (8007cc0 <HAL_GPIO_Init+0x240>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d052      	beq.n	8007ce8 <HAL_GPIO_Init+0x268>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a1f      	ldr	r2, [pc, #124]	; (8007cc4 <HAL_GPIO_Init+0x244>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d031      	beq.n	8007cae <HAL_GPIO_Init+0x22e>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a1e      	ldr	r2, [pc, #120]	; (8007cc8 <HAL_GPIO_Init+0x248>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d02b      	beq.n	8007caa <HAL_GPIO_Init+0x22a>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a1d      	ldr	r2, [pc, #116]	; (8007ccc <HAL_GPIO_Init+0x24c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d025      	beq.n	8007ca6 <HAL_GPIO_Init+0x226>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a1c      	ldr	r2, [pc, #112]	; (8007cd0 <HAL_GPIO_Init+0x250>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d01f      	beq.n	8007ca2 <HAL_GPIO_Init+0x222>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a1b      	ldr	r2, [pc, #108]	; (8007cd4 <HAL_GPIO_Init+0x254>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d019      	beq.n	8007c9e <HAL_GPIO_Init+0x21e>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a1a      	ldr	r2, [pc, #104]	; (8007cd8 <HAL_GPIO_Init+0x258>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d013      	beq.n	8007c9a <HAL_GPIO_Init+0x21a>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a19      	ldr	r2, [pc, #100]	; (8007cdc <HAL_GPIO_Init+0x25c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00d      	beq.n	8007c96 <HAL_GPIO_Init+0x216>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a18      	ldr	r2, [pc, #96]	; (8007ce0 <HAL_GPIO_Init+0x260>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d007      	beq.n	8007c92 <HAL_GPIO_Init+0x212>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a17      	ldr	r2, [pc, #92]	; (8007ce4 <HAL_GPIO_Init+0x264>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d101      	bne.n	8007c8e <HAL_GPIO_Init+0x20e>
 8007c8a:	2309      	movs	r3, #9
 8007c8c:	e02d      	b.n	8007cea <HAL_GPIO_Init+0x26a>
 8007c8e:	230a      	movs	r3, #10
 8007c90:	e02b      	b.n	8007cea <HAL_GPIO_Init+0x26a>
 8007c92:	2308      	movs	r3, #8
 8007c94:	e029      	b.n	8007cea <HAL_GPIO_Init+0x26a>
 8007c96:	2307      	movs	r3, #7
 8007c98:	e027      	b.n	8007cea <HAL_GPIO_Init+0x26a>
 8007c9a:	2306      	movs	r3, #6
 8007c9c:	e025      	b.n	8007cea <HAL_GPIO_Init+0x26a>
 8007c9e:	2305      	movs	r3, #5
 8007ca0:	e023      	b.n	8007cea <HAL_GPIO_Init+0x26a>
 8007ca2:	2304      	movs	r3, #4
 8007ca4:	e021      	b.n	8007cea <HAL_GPIO_Init+0x26a>
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e01f      	b.n	8007cea <HAL_GPIO_Init+0x26a>
 8007caa:	2302      	movs	r3, #2
 8007cac:	e01d      	b.n	8007cea <HAL_GPIO_Init+0x26a>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e01b      	b.n	8007cea <HAL_GPIO_Init+0x26a>
 8007cb2:	bf00      	nop
 8007cb4:	58000080 	.word	0x58000080
 8007cb8:	58024400 	.word	0x58024400
 8007cbc:	58000400 	.word	0x58000400
 8007cc0:	58020000 	.word	0x58020000
 8007cc4:	58020400 	.word	0x58020400
 8007cc8:	58020800 	.word	0x58020800
 8007ccc:	58020c00 	.word	0x58020c00
 8007cd0:	58021000 	.word	0x58021000
 8007cd4:	58021400 	.word	0x58021400
 8007cd8:	58021800 	.word	0x58021800
 8007cdc:	58021c00 	.word	0x58021c00
 8007ce0:	58022000 	.word	0x58022000
 8007ce4:	58022400 	.word	0x58022400
 8007ce8:	2300      	movs	r3, #0
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	f002 0203 	and.w	r2, r2, #3
 8007cf0:	0092      	lsls	r2, r2, #2
 8007cf2:	4093      	lsls	r3, r2
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007cfa:	4938      	ldr	r1, [pc, #224]	; (8007ddc <HAL_GPIO_Init+0x35c>)
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	089b      	lsrs	r3, r3, #2
 8007d00:	3302      	adds	r3, #2
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	43db      	mvns	r3, r3
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	4013      	ands	r3, r2
 8007d18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	4013      	ands	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	43db      	mvns	r3, r3
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	4013      	ands	r3, r2
 8007d72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	69ba      	ldr	r2, [r7, #24]
 8007d8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	43db      	mvns	r3, r3
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f47f ae63 	bne.w	8007a94 <HAL_GPIO_Init+0x14>
  }
}
 8007dce:	bf00      	nop
 8007dd0:	bf00      	nop
 8007dd2:	3724      	adds	r7, #36	; 0x24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	58000400 	.word	0x58000400

08007de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	691a      	ldr	r2, [r3, #16]
 8007df0:	887b      	ldrh	r3, [r7, #2]
 8007df2:	4013      	ands	r3, r2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	73fb      	strb	r3, [r7, #15]
 8007dfc:	e001      	b.n	8007e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	807b      	strh	r3, [r7, #2]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e20:	787b      	ldrb	r3, [r7, #1]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e26:	887a      	ldrh	r2, [r7, #2]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007e2c:	e003      	b.n	8007e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e2e:	887b      	ldrh	r3, [r7, #2]
 8007e30:	041a      	lsls	r2, r3, #16
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	619a      	str	r2, [r3, #24]
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	4603      	mov	r3, r0
 8007e4a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d008      	beq.n	8007e6e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e60:	88fb      	ldrh	r3, [r7, #6]
 8007e62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fa f857 	bl	8001f1c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e80:	4b19      	ldr	r3, [pc, #100]	; (8007ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d00a      	beq.n	8007ea2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e8c:	4b16      	ldr	r3, [pc, #88]	; (8007ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f003 0307 	and.w	r3, r3, #7
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d001      	beq.n	8007e9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e01f      	b.n	8007ede <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e01d      	b.n	8007ede <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007ea2:	4b11      	ldr	r3, [pc, #68]	; (8007ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f023 0207 	bic.w	r2, r3, #7
 8007eaa:	490f      	ldr	r1, [pc, #60]	; (8007ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007eb2:	f7fe ff03 	bl	8006cbc <HAL_GetTick>
 8007eb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007eb8:	e009      	b.n	8007ece <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007eba:	f7fe feff 	bl	8006cbc <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ec8:	d901      	bls.n	8007ece <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e007      	b.n	8007ede <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ece:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eda:	d1ee      	bne.n	8007eba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	58024800 	.word	0x58024800

08007eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08c      	sub	sp, #48	; 0x30
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d102      	bne.n	8007f00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	f000 bc1d 	b.w	800873a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 8087 	beq.w	800801c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f0e:	4b99      	ldr	r3, [pc, #612]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f18:	4b96      	ldr	r3, [pc, #600]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	2b10      	cmp	r3, #16
 8007f22:	d007      	beq.n	8007f34 <HAL_RCC_OscConfig+0x48>
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	2b18      	cmp	r3, #24
 8007f28:	d110      	bne.n	8007f4c <HAL_RCC_OscConfig+0x60>
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	f003 0303 	and.w	r3, r3, #3
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d10b      	bne.n	8007f4c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f34:	4b8f      	ldr	r3, [pc, #572]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d06c      	beq.n	800801a <HAL_RCC_OscConfig+0x12e>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d168      	bne.n	800801a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e3f6      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f54:	d106      	bne.n	8007f64 <HAL_RCC_OscConfig+0x78>
 8007f56:	4b87      	ldr	r3, [pc, #540]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a86      	ldr	r2, [pc, #536]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	e02e      	b.n	8007fc2 <HAL_RCC_OscConfig+0xd6>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10c      	bne.n	8007f86 <HAL_RCC_OscConfig+0x9a>
 8007f6c:	4b81      	ldr	r3, [pc, #516]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a80      	ldr	r2, [pc, #512]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	4b7e      	ldr	r3, [pc, #504]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a7d      	ldr	r2, [pc, #500]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	e01d      	b.n	8007fc2 <HAL_RCC_OscConfig+0xd6>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f8e:	d10c      	bne.n	8007faa <HAL_RCC_OscConfig+0xbe>
 8007f90:	4b78      	ldr	r3, [pc, #480]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a77      	ldr	r2, [pc, #476]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	4b75      	ldr	r3, [pc, #468]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a74      	ldr	r2, [pc, #464]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fa6:	6013      	str	r3, [r2, #0]
 8007fa8:	e00b      	b.n	8007fc2 <HAL_RCC_OscConfig+0xd6>
 8007faa:	4b72      	ldr	r3, [pc, #456]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a71      	ldr	r2, [pc, #452]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	4b6f      	ldr	r3, [pc, #444]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a6e      	ldr	r2, [pc, #440]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d013      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fca:	f7fe fe77 	bl	8006cbc <HAL_GetTick>
 8007fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fd0:	e008      	b.n	8007fe4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fd2:	f7fe fe73 	bl	8006cbc <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b64      	cmp	r3, #100	; 0x64
 8007fde:	d901      	bls.n	8007fe4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e3aa      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fe4:	4b63      	ldr	r3, [pc, #396]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0f0      	beq.n	8007fd2 <HAL_RCC_OscConfig+0xe6>
 8007ff0:	e014      	b.n	800801c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff2:	f7fe fe63 	bl	8006cbc <HAL_GetTick>
 8007ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ff8:	e008      	b.n	800800c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ffa:	f7fe fe5f 	bl	8006cbc <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	2b64      	cmp	r3, #100	; 0x64
 8008006:	d901      	bls.n	800800c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e396      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800800c:	4b59      	ldr	r3, [pc, #356]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1f0      	bne.n	8007ffa <HAL_RCC_OscConfig+0x10e>
 8008018:	e000      	b.n	800801c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800801a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 80cb 	beq.w	80081c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800802a:	4b52      	ldr	r3, [pc, #328]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008032:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008034:	4b4f      	ldr	r3, [pc, #316]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d007      	beq.n	8008050 <HAL_RCC_OscConfig+0x164>
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	2b18      	cmp	r3, #24
 8008044:	d156      	bne.n	80080f4 <HAL_RCC_OscConfig+0x208>
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	f003 0303 	and.w	r3, r3, #3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d151      	bne.n	80080f4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008050:	4b48      	ldr	r3, [pc, #288]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b00      	cmp	r3, #0
 800805a:	d005      	beq.n	8008068 <HAL_RCC_OscConfig+0x17c>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e368      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008068:	4b42      	ldr	r3, [pc, #264]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f023 0219 	bic.w	r2, r3, #25
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	493f      	ldr	r1, [pc, #252]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8008076:	4313      	orrs	r3, r2
 8008078:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800807a:	f7fe fe1f 	bl	8006cbc <HAL_GetTick>
 800807e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008080:	e008      	b.n	8008094 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008082:	f7fe fe1b 	bl	8006cbc <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d901      	bls.n	8008094 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e352      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008094:	4b37      	ldr	r3, [pc, #220]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0f0      	beq.n	8008082 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080a0:	f7fe fe3c 	bl	8006d1c <HAL_GetREVID>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d817      	bhi.n	80080de <HAL_RCC_OscConfig+0x1f2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b40      	cmp	r3, #64	; 0x40
 80080b4:	d108      	bne.n	80080c8 <HAL_RCC_OscConfig+0x1dc>
 80080b6:	4b2f      	ldr	r3, [pc, #188]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80080be:	4a2d      	ldr	r2, [pc, #180]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 80080c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080c6:	e07b      	b.n	80081c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080c8:	4b2a      	ldr	r3, [pc, #168]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	031b      	lsls	r3, r3, #12
 80080d6:	4927      	ldr	r1, [pc, #156]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080dc:	e070      	b.n	80081c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080de:	4b25      	ldr	r3, [pc, #148]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	061b      	lsls	r3, r3, #24
 80080ec:	4921      	ldr	r1, [pc, #132]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080f2:	e065      	b.n	80081c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d048      	beq.n	800818e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080fc:	4b1d      	ldr	r3, [pc, #116]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f023 0219 	bic.w	r2, r3, #25
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	491a      	ldr	r1, [pc, #104]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 800810a:	4313      	orrs	r3, r2
 800810c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810e:	f7fe fdd5 	bl	8006cbc <HAL_GetTick>
 8008112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008116:	f7fe fdd1 	bl	8006cbc <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e308      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008128:	4b12      	ldr	r3, [pc, #72]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008134:	f7fe fdf2 	bl	8006d1c <HAL_GetREVID>
 8008138:	4603      	mov	r3, r0
 800813a:	f241 0203 	movw	r2, #4099	; 0x1003
 800813e:	4293      	cmp	r3, r2
 8008140:	d81a      	bhi.n	8008178 <HAL_RCC_OscConfig+0x28c>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	2b40      	cmp	r3, #64	; 0x40
 8008148:	d108      	bne.n	800815c <HAL_RCC_OscConfig+0x270>
 800814a:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008152:	4a08      	ldr	r2, [pc, #32]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 8008154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008158:	6053      	str	r3, [r2, #4]
 800815a:	e031      	b.n	80081c0 <HAL_RCC_OscConfig+0x2d4>
 800815c:	4b05      	ldr	r3, [pc, #20]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	031b      	lsls	r3, r3, #12
 800816a:	4902      	ldr	r1, [pc, #8]	; (8008174 <HAL_RCC_OscConfig+0x288>)
 800816c:	4313      	orrs	r3, r2
 800816e:	604b      	str	r3, [r1, #4]
 8008170:	e026      	b.n	80081c0 <HAL_RCC_OscConfig+0x2d4>
 8008172:	bf00      	nop
 8008174:	58024400 	.word	0x58024400
 8008178:	4b9a      	ldr	r3, [pc, #616]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	061b      	lsls	r3, r3, #24
 8008186:	4997      	ldr	r1, [pc, #604]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 8008188:	4313      	orrs	r3, r2
 800818a:	604b      	str	r3, [r1, #4]
 800818c:	e018      	b.n	80081c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800818e:	4b95      	ldr	r3, [pc, #596]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a94      	ldr	r2, [pc, #592]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 8008194:	f023 0301 	bic.w	r3, r3, #1
 8008198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800819a:	f7fe fd8f 	bl	8006cbc <HAL_GetTick>
 800819e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80081a0:	e008      	b.n	80081b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081a2:	f7fe fd8b 	bl	8006cbc <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e2c2      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80081b4:	4b8b      	ldr	r3, [pc, #556]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1f0      	bne.n	80081a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0310 	and.w	r3, r3, #16
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 80a9 	beq.w	8008320 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081ce:	4b85      	ldr	r3, [pc, #532]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081d8:	4b82      	ldr	r3, [pc, #520]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d007      	beq.n	80081f4 <HAL_RCC_OscConfig+0x308>
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	2b18      	cmp	r3, #24
 80081e8:	d13a      	bne.n	8008260 <HAL_RCC_OscConfig+0x374>
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f003 0303 	and.w	r3, r3, #3
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d135      	bne.n	8008260 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081f4:	4b7b      	ldr	r3, [pc, #492]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d005      	beq.n	800820c <HAL_RCC_OscConfig+0x320>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	2b80      	cmp	r3, #128	; 0x80
 8008206:	d001      	beq.n	800820c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e296      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800820c:	f7fe fd86 	bl	8006d1c <HAL_GetREVID>
 8008210:	4603      	mov	r3, r0
 8008212:	f241 0203 	movw	r2, #4099	; 0x1003
 8008216:	4293      	cmp	r3, r2
 8008218:	d817      	bhi.n	800824a <HAL_RCC_OscConfig+0x35e>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	2b20      	cmp	r3, #32
 8008220:	d108      	bne.n	8008234 <HAL_RCC_OscConfig+0x348>
 8008222:	4b70      	ldr	r3, [pc, #448]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800822a:	4a6e      	ldr	r2, [pc, #440]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 800822c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008230:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008232:	e075      	b.n	8008320 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008234:	4b6b      	ldr	r3, [pc, #428]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	069b      	lsls	r3, r3, #26
 8008242:	4968      	ldr	r1, [pc, #416]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 8008244:	4313      	orrs	r3, r2
 8008246:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008248:	e06a      	b.n	8008320 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800824a:	4b66      	ldr	r3, [pc, #408]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	061b      	lsls	r3, r3, #24
 8008258:	4962      	ldr	r1, [pc, #392]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 800825a:	4313      	orrs	r3, r2
 800825c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800825e:	e05f      	b.n	8008320 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d042      	beq.n	80082ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008268:	4b5e      	ldr	r3, [pc, #376]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a5d      	ldr	r2, [pc, #372]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 800826e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008274:	f7fe fd22 	bl	8006cbc <HAL_GetTick>
 8008278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800827a:	e008      	b.n	800828e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800827c:	f7fe fd1e 	bl	8006cbc <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b02      	cmp	r3, #2
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e255      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800828e:	4b55      	ldr	r3, [pc, #340]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0f0      	beq.n	800827c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800829a:	f7fe fd3f 	bl	8006d1c <HAL_GetREVID>
 800829e:	4603      	mov	r3, r0
 80082a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d817      	bhi.n	80082d8 <HAL_RCC_OscConfig+0x3ec>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	d108      	bne.n	80082c2 <HAL_RCC_OscConfig+0x3d6>
 80082b0:	4b4c      	ldr	r3, [pc, #304]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80082b8:	4a4a      	ldr	r2, [pc, #296]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80082ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082be:	6053      	str	r3, [r2, #4]
 80082c0:	e02e      	b.n	8008320 <HAL_RCC_OscConfig+0x434>
 80082c2:	4b48      	ldr	r3, [pc, #288]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	069b      	lsls	r3, r3, #26
 80082d0:	4944      	ldr	r1, [pc, #272]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	604b      	str	r3, [r1, #4]
 80082d6:	e023      	b.n	8008320 <HAL_RCC_OscConfig+0x434>
 80082d8:	4b42      	ldr	r3, [pc, #264]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	061b      	lsls	r3, r3, #24
 80082e6:	493f      	ldr	r1, [pc, #252]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60cb      	str	r3, [r1, #12]
 80082ec:	e018      	b.n	8008320 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80082ee:	4b3d      	ldr	r3, [pc, #244]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a3c      	ldr	r2, [pc, #240]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80082f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082fa:	f7fe fcdf 	bl	8006cbc <HAL_GetTick>
 80082fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008300:	e008      	b.n	8008314 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008302:	f7fe fcdb 	bl	8006cbc <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d901      	bls.n	8008314 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e212      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008314:	4b33      	ldr	r3, [pc, #204]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1f0      	bne.n	8008302 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0308 	and.w	r3, r3, #8
 8008328:	2b00      	cmp	r3, #0
 800832a:	d036      	beq.n	800839a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d019      	beq.n	8008368 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008334:	4b2b      	ldr	r3, [pc, #172]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 8008336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008338:	4a2a      	ldr	r2, [pc, #168]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 800833a:	f043 0301 	orr.w	r3, r3, #1
 800833e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008340:	f7fe fcbc 	bl	8006cbc <HAL_GetTick>
 8008344:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008346:	e008      	b.n	800835a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008348:	f7fe fcb8 	bl	8006cbc <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b02      	cmp	r3, #2
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e1ef      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800835a:	4b22      	ldr	r3, [pc, #136]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 800835c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0f0      	beq.n	8008348 <HAL_RCC_OscConfig+0x45c>
 8008366:	e018      	b.n	800839a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008368:	4b1e      	ldr	r3, [pc, #120]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 800836a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800836c:	4a1d      	ldr	r2, [pc, #116]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 800836e:	f023 0301 	bic.w	r3, r3, #1
 8008372:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008374:	f7fe fca2 	bl	8006cbc <HAL_GetTick>
 8008378:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800837a:	e008      	b.n	800838e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800837c:	f7fe fc9e 	bl	8006cbc <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	2b02      	cmp	r3, #2
 8008388:	d901      	bls.n	800838e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e1d5      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800838e:	4b15      	ldr	r3, [pc, #84]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 8008390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1f0      	bne.n	800837c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0320 	and.w	r3, r3, #32
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d039      	beq.n	800841a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d01c      	beq.n	80083e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80083ae:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a0c      	ldr	r2, [pc, #48]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80083b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083ba:	f7fe fc7f 	bl	8006cbc <HAL_GetTick>
 80083be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083c0:	e008      	b.n	80083d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80083c2:	f7fe fc7b 	bl	8006cbc <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d901      	bls.n	80083d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e1b2      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083d4:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <HAL_RCC_OscConfig+0x4f8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0f0      	beq.n	80083c2 <HAL_RCC_OscConfig+0x4d6>
 80083e0:	e01b      	b.n	800841a <HAL_RCC_OscConfig+0x52e>
 80083e2:	bf00      	nop
 80083e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083e8:	4b9b      	ldr	r3, [pc, #620]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a9a      	ldr	r2, [pc, #616]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80083ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083f4:	f7fe fc62 	bl	8006cbc <HAL_GetTick>
 80083f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083fa:	e008      	b.n	800840e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80083fc:	f7fe fc5e 	bl	8006cbc <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	2b02      	cmp	r3, #2
 8008408:	d901      	bls.n	800840e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e195      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800840e:	4b92      	ldr	r3, [pc, #584]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1f0      	bne.n	80083fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0304 	and.w	r3, r3, #4
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 8081 	beq.w	800852a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008428:	4b8c      	ldr	r3, [pc, #560]	; (800865c <HAL_RCC_OscConfig+0x770>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a8b      	ldr	r2, [pc, #556]	; (800865c <HAL_RCC_OscConfig+0x770>)
 800842e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008432:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008434:	f7fe fc42 	bl	8006cbc <HAL_GetTick>
 8008438:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800843a:	e008      	b.n	800844e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800843c:	f7fe fc3e 	bl	8006cbc <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b64      	cmp	r3, #100	; 0x64
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e175      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800844e:	4b83      	ldr	r3, [pc, #524]	; (800865c <HAL_RCC_OscConfig+0x770>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0f0      	beq.n	800843c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d106      	bne.n	8008470 <HAL_RCC_OscConfig+0x584>
 8008462:	4b7d      	ldr	r3, [pc, #500]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008466:	4a7c      	ldr	r2, [pc, #496]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008468:	f043 0301 	orr.w	r3, r3, #1
 800846c:	6713      	str	r3, [r2, #112]	; 0x70
 800846e:	e02d      	b.n	80084cc <HAL_RCC_OscConfig+0x5e0>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10c      	bne.n	8008492 <HAL_RCC_OscConfig+0x5a6>
 8008478:	4b77      	ldr	r3, [pc, #476]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 800847a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847c:	4a76      	ldr	r2, [pc, #472]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 800847e:	f023 0301 	bic.w	r3, r3, #1
 8008482:	6713      	str	r3, [r2, #112]	; 0x70
 8008484:	4b74      	ldr	r3, [pc, #464]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008488:	4a73      	ldr	r2, [pc, #460]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 800848a:	f023 0304 	bic.w	r3, r3, #4
 800848e:	6713      	str	r3, [r2, #112]	; 0x70
 8008490:	e01c      	b.n	80084cc <HAL_RCC_OscConfig+0x5e0>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2b05      	cmp	r3, #5
 8008498:	d10c      	bne.n	80084b4 <HAL_RCC_OscConfig+0x5c8>
 800849a:	4b6f      	ldr	r3, [pc, #444]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 800849c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849e:	4a6e      	ldr	r2, [pc, #440]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80084a0:	f043 0304 	orr.w	r3, r3, #4
 80084a4:	6713      	str	r3, [r2, #112]	; 0x70
 80084a6:	4b6c      	ldr	r3, [pc, #432]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80084a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084aa:	4a6b      	ldr	r2, [pc, #428]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80084ac:	f043 0301 	orr.w	r3, r3, #1
 80084b0:	6713      	str	r3, [r2, #112]	; 0x70
 80084b2:	e00b      	b.n	80084cc <HAL_RCC_OscConfig+0x5e0>
 80084b4:	4b68      	ldr	r3, [pc, #416]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80084b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b8:	4a67      	ldr	r2, [pc, #412]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80084ba:	f023 0301 	bic.w	r3, r3, #1
 80084be:	6713      	str	r3, [r2, #112]	; 0x70
 80084c0:	4b65      	ldr	r3, [pc, #404]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80084c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c4:	4a64      	ldr	r2, [pc, #400]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80084c6:	f023 0304 	bic.w	r3, r3, #4
 80084ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d015      	beq.n	8008500 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d4:	f7fe fbf2 	bl	8006cbc <HAL_GetTick>
 80084d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084da:	e00a      	b.n	80084f2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084dc:	f7fe fbee 	bl	8006cbc <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d901      	bls.n	80084f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e123      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084f2:	4b59      	ldr	r3, [pc, #356]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80084f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0ee      	beq.n	80084dc <HAL_RCC_OscConfig+0x5f0>
 80084fe:	e014      	b.n	800852a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008500:	f7fe fbdc 	bl	8006cbc <HAL_GetTick>
 8008504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008506:	e00a      	b.n	800851e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008508:	f7fe fbd8 	bl	8006cbc <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	f241 3288 	movw	r2, #5000	; 0x1388
 8008516:	4293      	cmp	r3, r2
 8008518:	d901      	bls.n	800851e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e10d      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800851e:	4b4e      	ldr	r3, [pc, #312]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1ee      	bne.n	8008508 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 8102 	beq.w	8008738 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008534:	4b48      	ldr	r3, [pc, #288]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800853c:	2b18      	cmp	r3, #24
 800853e:	f000 80bd 	beq.w	80086bc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b02      	cmp	r3, #2
 8008548:	f040 809e 	bne.w	8008688 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800854c:	4b42      	ldr	r3, [pc, #264]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a41      	ldr	r2, [pc, #260]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008558:	f7fe fbb0 	bl	8006cbc <HAL_GetTick>
 800855c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008560:	f7fe fbac 	bl	8006cbc <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e0e3      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008572:	4b39      	ldr	r3, [pc, #228]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1f0      	bne.n	8008560 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800857e:	4b36      	ldr	r3, [pc, #216]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008582:	4b37      	ldr	r3, [pc, #220]	; (8008660 <HAL_RCC_OscConfig+0x774>)
 8008584:	4013      	ands	r3, r2
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800858e:	0112      	lsls	r2, r2, #4
 8008590:	430a      	orrs	r2, r1
 8008592:	4931      	ldr	r1, [pc, #196]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008594:	4313      	orrs	r3, r2
 8008596:	628b      	str	r3, [r1, #40]	; 0x28
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859c:	3b01      	subs	r3, #1
 800859e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a6:	3b01      	subs	r3, #1
 80085a8:	025b      	lsls	r3, r3, #9
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	431a      	orrs	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	3b01      	subs	r3, #1
 80085b4:	041b      	lsls	r3, r3, #16
 80085b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80085ba:	431a      	orrs	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c0:	3b01      	subs	r3, #1
 80085c2:	061b      	lsls	r3, r3, #24
 80085c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085c8:	4923      	ldr	r1, [pc, #140]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80085ce:	4b22      	ldr	r3, [pc, #136]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	4a21      	ldr	r2, [pc, #132]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085da:	4b1f      	ldr	r3, [pc, #124]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80085dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085de:	4b21      	ldr	r3, [pc, #132]	; (8008664 <HAL_RCC_OscConfig+0x778>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80085e6:	00d2      	lsls	r2, r2, #3
 80085e8:	491b      	ldr	r1, [pc, #108]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80085ee:	4b1a      	ldr	r3, [pc, #104]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	f023 020c 	bic.w	r2, r3, #12
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	4917      	ldr	r1, [pc, #92]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008600:	4b15      	ldr	r3, [pc, #84]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	f023 0202 	bic.w	r2, r3, #2
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860c:	4912      	ldr	r1, [pc, #72]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 800860e:	4313      	orrs	r3, r2
 8008610:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008612:	4b11      	ldr	r3, [pc, #68]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008616:	4a10      	ldr	r2, [pc, #64]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800861c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800861e:	4b0e      	ldr	r3, [pc, #56]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	4a0d      	ldr	r2, [pc, #52]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800862a:	4b0b      	ldr	r3, [pc, #44]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	4a0a      	ldr	r2, [pc, #40]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008636:	4b08      	ldr	r3, [pc, #32]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863a:	4a07      	ldr	r2, [pc, #28]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 800863c:	f043 0301 	orr.w	r3, r3, #1
 8008640:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008642:	4b05      	ldr	r3, [pc, #20]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a04      	ldr	r2, [pc, #16]	; (8008658 <HAL_RCC_OscConfig+0x76c>)
 8008648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800864c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864e:	f7fe fb35 	bl	8006cbc <HAL_GetTick>
 8008652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008654:	e011      	b.n	800867a <HAL_RCC_OscConfig+0x78e>
 8008656:	bf00      	nop
 8008658:	58024400 	.word	0x58024400
 800865c:	58024800 	.word	0x58024800
 8008660:	fffffc0c 	.word	0xfffffc0c
 8008664:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008668:	f7fe fb28 	bl	8006cbc <HAL_GetTick>
 800866c:	4602      	mov	r2, r0
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	2b02      	cmp	r3, #2
 8008674:	d901      	bls.n	800867a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e05f      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800867a:	4b32      	ldr	r3, [pc, #200]	; (8008744 <HAL_RCC_OscConfig+0x858>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0f0      	beq.n	8008668 <HAL_RCC_OscConfig+0x77c>
 8008686:	e057      	b.n	8008738 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008688:	4b2e      	ldr	r3, [pc, #184]	; (8008744 <HAL_RCC_OscConfig+0x858>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a2d      	ldr	r2, [pc, #180]	; (8008744 <HAL_RCC_OscConfig+0x858>)
 800868e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008694:	f7fe fb12 	bl	8006cbc <HAL_GetTick>
 8008698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800869a:	e008      	b.n	80086ae <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800869c:	f7fe fb0e 	bl	8006cbc <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e045      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086ae:	4b25      	ldr	r3, [pc, #148]	; (8008744 <HAL_RCC_OscConfig+0x858>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1f0      	bne.n	800869c <HAL_RCC_OscConfig+0x7b0>
 80086ba:	e03d      	b.n	8008738 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80086bc:	4b21      	ldr	r3, [pc, #132]	; (8008744 <HAL_RCC_OscConfig+0x858>)
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80086c2:	4b20      	ldr	r3, [pc, #128]	; (8008744 <HAL_RCC_OscConfig+0x858>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d031      	beq.n	8008734 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f003 0203 	and.w	r2, r3, #3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086da:	429a      	cmp	r2, r3
 80086dc:	d12a      	bne.n	8008734 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	091b      	lsrs	r3, r3, #4
 80086e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d122      	bne.n	8008734 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d11a      	bne.n	8008734 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	0a5b      	lsrs	r3, r3, #9
 8008702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800870c:	429a      	cmp	r2, r3
 800870e:	d111      	bne.n	8008734 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	0c1b      	lsrs	r3, r3, #16
 8008714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800871e:	429a      	cmp	r2, r3
 8008720:	d108      	bne.n	8008734 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	0e1b      	lsrs	r3, r3, #24
 8008726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008730:	429a      	cmp	r2, r3
 8008732:	d001      	beq.n	8008738 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e000      	b.n	800873a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3730      	adds	r7, #48	; 0x30
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	58024400 	.word	0x58024400

08008748 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e19c      	b.n	8008a96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800875c:	4b8a      	ldr	r3, [pc, #552]	; (8008988 <HAL_RCC_ClockConfig+0x240>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 030f 	and.w	r3, r3, #15
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d910      	bls.n	800878c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800876a:	4b87      	ldr	r3, [pc, #540]	; (8008988 <HAL_RCC_ClockConfig+0x240>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f023 020f 	bic.w	r2, r3, #15
 8008772:	4985      	ldr	r1, [pc, #532]	; (8008988 <HAL_RCC_ClockConfig+0x240>)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	4313      	orrs	r3, r2
 8008778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800877a:	4b83      	ldr	r3, [pc, #524]	; (8008988 <HAL_RCC_ClockConfig+0x240>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 030f 	and.w	r3, r3, #15
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	429a      	cmp	r2, r3
 8008786:	d001      	beq.n	800878c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e184      	b.n	8008a96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0304 	and.w	r3, r3, #4
 8008794:	2b00      	cmp	r3, #0
 8008796:	d010      	beq.n	80087ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691a      	ldr	r2, [r3, #16]
 800879c:	4b7b      	ldr	r3, [pc, #492]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d908      	bls.n	80087ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087a8:	4b78      	ldr	r3, [pc, #480]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	4975      	ldr	r1, [pc, #468]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d010      	beq.n	80087e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	4b70      	ldr	r3, [pc, #448]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d908      	bls.n	80087e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087d6:	4b6d      	ldr	r3, [pc, #436]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	496a      	ldr	r1, [pc, #424]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0310 	and.w	r3, r3, #16
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d010      	beq.n	8008816 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	699a      	ldr	r2, [r3, #24]
 80087f8:	4b64      	ldr	r3, [pc, #400]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008800:	429a      	cmp	r2, r3
 8008802:	d908      	bls.n	8008816 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008804:	4b61      	ldr	r3, [pc, #388]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	495e      	ldr	r1, [pc, #376]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 8008812:	4313      	orrs	r3, r2
 8008814:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b00      	cmp	r3, #0
 8008820:	d010      	beq.n	8008844 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	69da      	ldr	r2, [r3, #28]
 8008826:	4b59      	ldr	r3, [pc, #356]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800882e:	429a      	cmp	r2, r3
 8008830:	d908      	bls.n	8008844 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008832:	4b56      	ldr	r3, [pc, #344]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	4953      	ldr	r1, [pc, #332]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 8008840:	4313      	orrs	r3, r2
 8008842:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d010      	beq.n	8008872 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	4b4d      	ldr	r3, [pc, #308]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	f003 030f 	and.w	r3, r3, #15
 800885c:	429a      	cmp	r2, r3
 800885e:	d908      	bls.n	8008872 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008860:	4b4a      	ldr	r3, [pc, #296]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	f023 020f 	bic.w	r2, r3, #15
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	4947      	ldr	r1, [pc, #284]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 800886e:	4313      	orrs	r3, r2
 8008870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d055      	beq.n	800892a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800887e:	4b43      	ldr	r3, [pc, #268]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	4940      	ldr	r1, [pc, #256]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 800888c:	4313      	orrs	r3, r2
 800888e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	2b02      	cmp	r3, #2
 8008896:	d107      	bne.n	80088a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008898:	4b3c      	ldr	r3, [pc, #240]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d121      	bne.n	80088e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e0f6      	b.n	8008a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d107      	bne.n	80088c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088b0:	4b36      	ldr	r3, [pc, #216]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d115      	bne.n	80088e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e0ea      	b.n	8008a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d107      	bne.n	80088d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80088c8:	4b30      	ldr	r3, [pc, #192]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d109      	bne.n	80088e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e0de      	b.n	8008a96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088d8:	4b2c      	ldr	r3, [pc, #176]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e0d6      	b.n	8008a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80088e8:	4b28      	ldr	r3, [pc, #160]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	f023 0207 	bic.w	r2, r3, #7
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	4925      	ldr	r1, [pc, #148]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088fa:	f7fe f9df 	bl	8006cbc <HAL_GetTick>
 80088fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008900:	e00a      	b.n	8008918 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008902:	f7fe f9db 	bl	8006cbc <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008910:	4293      	cmp	r3, r2
 8008912:	d901      	bls.n	8008918 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e0be      	b.n	8008a96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008918:	4b1c      	ldr	r3, [pc, #112]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	429a      	cmp	r2, r3
 8008928:	d1eb      	bne.n	8008902 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d010      	beq.n	8008958 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	4b14      	ldr	r3, [pc, #80]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	429a      	cmp	r2, r3
 8008944:	d208      	bcs.n	8008958 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008946:	4b11      	ldr	r3, [pc, #68]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	f023 020f 	bic.w	r2, r3, #15
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	490e      	ldr	r1, [pc, #56]	; (800898c <HAL_RCC_ClockConfig+0x244>)
 8008954:	4313      	orrs	r3, r2
 8008956:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008958:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <HAL_RCC_ClockConfig+0x240>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 030f 	and.w	r3, r3, #15
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d214      	bcs.n	8008990 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008966:	4b08      	ldr	r3, [pc, #32]	; (8008988 <HAL_RCC_ClockConfig+0x240>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f023 020f 	bic.w	r2, r3, #15
 800896e:	4906      	ldr	r1, [pc, #24]	; (8008988 <HAL_RCC_ClockConfig+0x240>)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	4313      	orrs	r3, r2
 8008974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008976:	4b04      	ldr	r3, [pc, #16]	; (8008988 <HAL_RCC_ClockConfig+0x240>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 030f 	and.w	r3, r3, #15
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	429a      	cmp	r2, r3
 8008982:	d005      	beq.n	8008990 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e086      	b.n	8008a96 <HAL_RCC_ClockConfig+0x34e>
 8008988:	52002000 	.word	0x52002000
 800898c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	d010      	beq.n	80089be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	691a      	ldr	r2, [r3, #16]
 80089a0:	4b3f      	ldr	r3, [pc, #252]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d208      	bcs.n	80089be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089ac:	4b3c      	ldr	r3, [pc, #240]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	4939      	ldr	r1, [pc, #228]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0308 	and.w	r3, r3, #8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d010      	beq.n	80089ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	695a      	ldr	r2, [r3, #20]
 80089ce:	4b34      	ldr	r3, [pc, #208]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d208      	bcs.n	80089ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089da:	4b31      	ldr	r3, [pc, #196]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	492e      	ldr	r1, [pc, #184]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0310 	and.w	r3, r3, #16
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d010      	beq.n	8008a1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699a      	ldr	r2, [r3, #24]
 80089fc:	4b28      	ldr	r3, [pc, #160]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d208      	bcs.n	8008a1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a08:	4b25      	ldr	r3, [pc, #148]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	4922      	ldr	r1, [pc, #136]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0320 	and.w	r3, r3, #32
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d010      	beq.n	8008a48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	69da      	ldr	r2, [r3, #28]
 8008a2a:	4b1d      	ldr	r3, [pc, #116]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d208      	bcs.n	8008a48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008a36:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	4917      	ldr	r1, [pc, #92]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008a48:	f000 f834 	bl	8008ab4 <HAL_RCC_GetSysClockFreq>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	4b14      	ldr	r3, [pc, #80]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	0a1b      	lsrs	r3, r3, #8
 8008a54:	f003 030f 	and.w	r3, r3, #15
 8008a58:	4912      	ldr	r1, [pc, #72]	; (8008aa4 <HAL_RCC_ClockConfig+0x35c>)
 8008a5a:	5ccb      	ldrb	r3, [r1, r3]
 8008a5c:	f003 031f 	and.w	r3, r3, #31
 8008a60:	fa22 f303 	lsr.w	r3, r2, r3
 8008a64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a66:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <HAL_RCC_ClockConfig+0x358>)
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	f003 030f 	and.w	r3, r3, #15
 8008a6e:	4a0d      	ldr	r2, [pc, #52]	; (8008aa4 <HAL_RCC_ClockConfig+0x35c>)
 8008a70:	5cd3      	ldrb	r3, [r2, r3]
 8008a72:	f003 031f 	and.w	r3, r3, #31
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7c:	4a0a      	ldr	r2, [pc, #40]	; (8008aa8 <HAL_RCC_ClockConfig+0x360>)
 8008a7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a80:	4a0a      	ldr	r2, [pc, #40]	; (8008aac <HAL_RCC_ClockConfig+0x364>)
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008a86:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <HAL_RCC_ClockConfig+0x368>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe f8cc 	bl	8006c28 <HAL_InitTick>
 8008a90:	4603      	mov	r3, r0
 8008a92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	58024400 	.word	0x58024400
 8008aa4:	080122f8 	.word	0x080122f8
 8008aa8:	2400001c 	.word	0x2400001c
 8008aac:	24000018 	.word	0x24000018
 8008ab0:	240000b0 	.word	0x240000b0

08008ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b089      	sub	sp, #36	; 0x24
 8008ab8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008aba:	4bb3      	ldr	r3, [pc, #716]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ac2:	2b18      	cmp	r3, #24
 8008ac4:	f200 8155 	bhi.w	8008d72 <HAL_RCC_GetSysClockFreq+0x2be>
 8008ac8:	a201      	add	r2, pc, #4	; (adr r2, 8008ad0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ace:	bf00      	nop
 8008ad0:	08008b35 	.word	0x08008b35
 8008ad4:	08008d73 	.word	0x08008d73
 8008ad8:	08008d73 	.word	0x08008d73
 8008adc:	08008d73 	.word	0x08008d73
 8008ae0:	08008d73 	.word	0x08008d73
 8008ae4:	08008d73 	.word	0x08008d73
 8008ae8:	08008d73 	.word	0x08008d73
 8008aec:	08008d73 	.word	0x08008d73
 8008af0:	08008b5b 	.word	0x08008b5b
 8008af4:	08008d73 	.word	0x08008d73
 8008af8:	08008d73 	.word	0x08008d73
 8008afc:	08008d73 	.word	0x08008d73
 8008b00:	08008d73 	.word	0x08008d73
 8008b04:	08008d73 	.word	0x08008d73
 8008b08:	08008d73 	.word	0x08008d73
 8008b0c:	08008d73 	.word	0x08008d73
 8008b10:	08008b61 	.word	0x08008b61
 8008b14:	08008d73 	.word	0x08008d73
 8008b18:	08008d73 	.word	0x08008d73
 8008b1c:	08008d73 	.word	0x08008d73
 8008b20:	08008d73 	.word	0x08008d73
 8008b24:	08008d73 	.word	0x08008d73
 8008b28:	08008d73 	.word	0x08008d73
 8008b2c:	08008d73 	.word	0x08008d73
 8008b30:	08008b67 	.word	0x08008b67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b34:	4b94      	ldr	r3, [pc, #592]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0320 	and.w	r3, r3, #32
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d009      	beq.n	8008b54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b40:	4b91      	ldr	r3, [pc, #580]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	08db      	lsrs	r3, r3, #3
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	4a90      	ldr	r2, [pc, #576]	; (8008d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008b52:	e111      	b.n	8008d78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008b54:	4b8d      	ldr	r3, [pc, #564]	; (8008d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b56:	61bb      	str	r3, [r7, #24]
    break;
 8008b58:	e10e      	b.n	8008d78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008b5a:	4b8d      	ldr	r3, [pc, #564]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b5c:	61bb      	str	r3, [r7, #24]
    break;
 8008b5e:	e10b      	b.n	8008d78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008b60:	4b8c      	ldr	r3, [pc, #560]	; (8008d94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008b62:	61bb      	str	r3, [r7, #24]
    break;
 8008b64:	e108      	b.n	8008d78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b66:	4b88      	ldr	r3, [pc, #544]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008b70:	4b85      	ldr	r3, [pc, #532]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	091b      	lsrs	r3, r3, #4
 8008b76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008b7c:	4b82      	ldr	r3, [pc, #520]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008b86:	4b80      	ldr	r3, [pc, #512]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8a:	08db      	lsrs	r3, r3, #3
 8008b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	fb02 f303 	mul.w	r3, r2, r3
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f000 80e1 	beq.w	8008d6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	f000 8083 	beq.w	8008cb8 <HAL_RCC_GetSysClockFreq+0x204>
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	f200 80a1 	bhi.w	8008cfc <HAL_RCC_GetSysClockFreq+0x248>
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x114>
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d056      	beq.n	8008c74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008bc6:	e099      	b.n	8008cfc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bc8:	4b6f      	ldr	r3, [pc, #444]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0320 	and.w	r3, r3, #32
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d02d      	beq.n	8008c30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bd4:	4b6c      	ldr	r3, [pc, #432]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	08db      	lsrs	r3, r3, #3
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	4a6b      	ldr	r2, [pc, #428]	; (8008d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
 8008be4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	ee07 3a90 	vmov	s15, r3
 8008bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfe:	4b62      	ldr	r3, [pc, #392]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008c2e:	e087      	b.n	8008d40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008d9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c42:	4b51      	ldr	r3, [pc, #324]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c72:	e065      	b.n	8008d40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008da0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c86:	4b40      	ldr	r3, [pc, #256]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cb6:	e043      	b.n	8008d40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008da4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cca:	4b2f      	ldr	r3, [pc, #188]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cfa:	e021      	b.n	8008d40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008da0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0e:	4b1e      	ldr	r3, [pc, #120]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008d40:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d44:	0a5b      	lsrs	r3, r3, #9
 8008d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	ee07 3a90 	vmov	s15, r3
 8008d54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d64:	ee17 3a90 	vmov	r3, s15
 8008d68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008d6a:	e005      	b.n	8008d78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
    break;
 8008d70:	e002      	b.n	8008d78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008d72:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d74:	61bb      	str	r3, [r7, #24]
    break;
 8008d76:	bf00      	nop
  }

  return sysclockfreq;
 8008d78:	69bb      	ldr	r3, [r7, #24]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3724      	adds	r7, #36	; 0x24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	03d09000 	.word	0x03d09000
 8008d90:	003d0900 	.word	0x003d0900
 8008d94:	017d7840 	.word	0x017d7840
 8008d98:	46000000 	.word	0x46000000
 8008d9c:	4c742400 	.word	0x4c742400
 8008da0:	4a742400 	.word	0x4a742400
 8008da4:	4bbebc20 	.word	0x4bbebc20

08008da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008dae:	f7ff fe81 	bl	8008ab4 <HAL_RCC_GetSysClockFreq>
 8008db2:	4602      	mov	r2, r0
 8008db4:	4b10      	ldr	r3, [pc, #64]	; (8008df8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	0a1b      	lsrs	r3, r3, #8
 8008dba:	f003 030f 	and.w	r3, r3, #15
 8008dbe:	490f      	ldr	r1, [pc, #60]	; (8008dfc <HAL_RCC_GetHCLKFreq+0x54>)
 8008dc0:	5ccb      	ldrb	r3, [r1, r3]
 8008dc2:	f003 031f 	and.w	r3, r3, #31
 8008dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008dcc:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	f003 030f 	and.w	r3, r3, #15
 8008dd4:	4a09      	ldr	r2, [pc, #36]	; (8008dfc <HAL_RCC_GetHCLKFreq+0x54>)
 8008dd6:	5cd3      	ldrb	r3, [r2, r3]
 8008dd8:	f003 031f 	and.w	r3, r3, #31
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	fa22 f303 	lsr.w	r3, r2, r3
 8008de2:	4a07      	ldr	r2, [pc, #28]	; (8008e00 <HAL_RCC_GetHCLKFreq+0x58>)
 8008de4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008de6:	4a07      	ldr	r2, [pc, #28]	; (8008e04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008dec:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <HAL_RCC_GetHCLKFreq+0x58>)
 8008dee:	681b      	ldr	r3, [r3, #0]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	58024400 	.word	0x58024400
 8008dfc:	080122f8 	.word	0x080122f8
 8008e00:	2400001c 	.word	0x2400001c
 8008e04:	24000018 	.word	0x24000018

08008e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008e0c:	f7ff ffcc 	bl	8008da8 <HAL_RCC_GetHCLKFreq>
 8008e10:	4602      	mov	r2, r0
 8008e12:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	091b      	lsrs	r3, r3, #4
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	4904      	ldr	r1, [pc, #16]	; (8008e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e1e:	5ccb      	ldrb	r3, [r1, r3]
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	58024400 	.word	0x58024400
 8008e30:	080122f8 	.word	0x080122f8

08008e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008e38:	f7ff ffb6 	bl	8008da8 <HAL_RCC_GetHCLKFreq>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	0a1b      	lsrs	r3, r3, #8
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	4904      	ldr	r1, [pc, #16]	; (8008e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e4a:	5ccb      	ldrb	r3, [r1, r3]
 8008e4c:	f003 031f 	and.w	r3, r3, #31
 8008e50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	58024400 	.word	0x58024400
 8008e5c:	080122f8 	.word	0x080122f8

08008e60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e68:	2300      	movs	r3, #0
 8008e6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d03f      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e84:	d02a      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008e86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e8a:	d824      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e90:	d018      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e96:	d81e      	bhi.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ea0:	d007      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008ea2:	e018      	b.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea4:	4ba3      	ldr	r3, [pc, #652]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea8:	4aa2      	ldr	r2, [pc, #648]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008eb0:	e015      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	2102      	movs	r1, #2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f001 f9d5 	bl	800a268 <RCCEx_PLL2_Config>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ec2:	e00c      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3324      	adds	r3, #36	; 0x24
 8008ec8:	2102      	movs	r1, #2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f001 fa7e 	bl	800a3cc <RCCEx_PLL3_Config>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ed4:	e003      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8008eda:	e000      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d109      	bne.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008ee4:	4b93      	ldr	r3, [pc, #588]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ef0:	4990      	ldr	r1, [pc, #576]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	650b      	str	r3, [r1, #80]	; 0x50
 8008ef6:	e001      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d03d      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d826      	bhi.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008f10:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f16:	bf00      	nop
 8008f18:	08008f2d 	.word	0x08008f2d
 8008f1c:	08008f3b 	.word	0x08008f3b
 8008f20:	08008f4d 	.word	0x08008f4d
 8008f24:	08008f65 	.word	0x08008f65
 8008f28:	08008f65 	.word	0x08008f65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f2c:	4b81      	ldr	r3, [pc, #516]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f30:	4a80      	ldr	r2, [pc, #512]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f38:	e015      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 f991 	bl	800a268 <RCCEx_PLL2_Config>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f4a:	e00c      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3324      	adds	r3, #36	; 0x24
 8008f50:	2100      	movs	r1, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f001 fa3a 	bl	800a3cc <RCCEx_PLL3_Config>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f5c:	e003      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	75fb      	strb	r3, [r7, #23]
      break;
 8008f62:	e000      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d109      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f6c:	4b71      	ldr	r3, [pc, #452]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f70:	f023 0207 	bic.w	r2, r3, #7
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f78:	496e      	ldr	r1, [pc, #440]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	650b      	str	r3, [r1, #80]	; 0x50
 8008f7e:	e001      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d042      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f98:	d02b      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f9e:	d825      	bhi.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008fa0:	2bc0      	cmp	r3, #192	; 0xc0
 8008fa2:	d028      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008fa4:	2bc0      	cmp	r3, #192	; 0xc0
 8008fa6:	d821      	bhi.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008fa8:	2b80      	cmp	r3, #128	; 0x80
 8008faa:	d016      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008fac:	2b80      	cmp	r3, #128	; 0x80
 8008fae:	d81d      	bhi.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008fb4:	2b40      	cmp	r3, #64	; 0x40
 8008fb6:	d007      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008fb8:	e018      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fba:	4b5e      	ldr	r3, [pc, #376]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbe:	4a5d      	ldr	r2, [pc, #372]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008fc6:	e017      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 f94a 	bl	800a268 <RCCEx_PLL2_Config>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008fd8:	e00e      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	3324      	adds	r3, #36	; 0x24
 8008fde:	2100      	movs	r1, #0
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f001 f9f3 	bl	800a3cc <RCCEx_PLL3_Config>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008fea:	e005      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	75fb      	strb	r3, [r7, #23]
      break;
 8008ff0:	e002      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008ff2:	bf00      	nop
 8008ff4:	e000      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d109      	bne.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008ffe:	4b4d      	ldr	r3, [pc, #308]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009002:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900a:	494a      	ldr	r1, [pc, #296]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800900c:	4313      	orrs	r3, r2
 800900e:	650b      	str	r3, [r1, #80]	; 0x50
 8009010:	e001      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800901e:	2b00      	cmp	r3, #0
 8009020:	d049      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009028:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800902c:	d030      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800902e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009032:	d82a      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009034:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009038:	d02c      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800903a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800903e:	d824      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009044:	d018      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800904a:	d81e      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009054:	d007      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009056:	e018      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009058:	4b36      	ldr	r3, [pc, #216]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	4a35      	ldr	r2, [pc, #212]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800905e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009064:	e017      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3304      	adds	r3, #4
 800906a:	2100      	movs	r1, #0
 800906c:	4618      	mov	r0, r3
 800906e:	f001 f8fb 	bl	800a268 <RCCEx_PLL2_Config>
 8009072:	4603      	mov	r3, r0
 8009074:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009076:	e00e      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3324      	adds	r3, #36	; 0x24
 800907c:	2100      	movs	r1, #0
 800907e:	4618      	mov	r0, r3
 8009080:	f001 f9a4 	bl	800a3cc <RCCEx_PLL3_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009088:	e005      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	75fb      	strb	r3, [r7, #23]
      break;
 800908e:	e002      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009090:	bf00      	nop
 8009092:	e000      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10a      	bne.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800909c:	4b25      	ldr	r3, [pc, #148]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800909e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80090aa:	4922      	ldr	r1, [pc, #136]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	658b      	str	r3, [r1, #88]	; 0x58
 80090b0:	e001      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d04b      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090cc:	d030      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80090ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090d2:	d82a      	bhi.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80090d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090d8:	d02e      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80090da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090de:	d824      	bhi.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80090e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090e4:	d018      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80090e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090ea:	d81e      	bhi.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80090f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090f4:	d007      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80090f6:	e018      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090f8:	4b0e      	ldr	r3, [pc, #56]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	4a0d      	ldr	r2, [pc, #52]	; (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009102:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009104:	e019      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	3304      	adds	r3, #4
 800910a:	2100      	movs	r1, #0
 800910c:	4618      	mov	r0, r3
 800910e:	f001 f8ab 	bl	800a268 <RCCEx_PLL2_Config>
 8009112:	4603      	mov	r3, r0
 8009114:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009116:	e010      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3324      	adds	r3, #36	; 0x24
 800911c:	2100      	movs	r1, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f001 f954 	bl	800a3cc <RCCEx_PLL3_Config>
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009128:	e007      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	75fb      	strb	r3, [r7, #23]
      break;
 800912e:	e004      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009130:	bf00      	nop
 8009132:	e002      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009134:	58024400 	.word	0x58024400
      break;
 8009138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009140:	4b99      	ldr	r3, [pc, #612]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009144:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800914e:	4996      	ldr	r1, [pc, #600]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009150:	4313      	orrs	r3, r2
 8009152:	658b      	str	r3, [r1, #88]	; 0x58
 8009154:	e001      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009156:	7dfb      	ldrb	r3, [r7, #23]
 8009158:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d032      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916a:	2b30      	cmp	r3, #48	; 0x30
 800916c:	d01c      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800916e:	2b30      	cmp	r3, #48	; 0x30
 8009170:	d817      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009172:	2b20      	cmp	r3, #32
 8009174:	d00c      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009176:	2b20      	cmp	r3, #32
 8009178:	d813      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800917a:	2b00      	cmp	r3, #0
 800917c:	d016      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800917e:	2b10      	cmp	r3, #16
 8009180:	d10f      	bne.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009182:	4b89      	ldr	r3, [pc, #548]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009186:	4a88      	ldr	r2, [pc, #544]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800918c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800918e:	e00e      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3304      	adds	r3, #4
 8009194:	2102      	movs	r1, #2
 8009196:	4618      	mov	r0, r3
 8009198:	f001 f866 	bl	800a268 <RCCEx_PLL2_Config>
 800919c:	4603      	mov	r3, r0
 800919e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80091a0:	e005      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	75fb      	strb	r3, [r7, #23]
      break;
 80091a6:	e002      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80091a8:	bf00      	nop
 80091aa:	e000      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80091ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d109      	bne.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80091b4:	4b7c      	ldr	r3, [pc, #496]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c0:	4979      	ldr	r1, [pc, #484]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80091c6:	e001      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c8:	7dfb      	ldrb	r3, [r7, #23]
 80091ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d047      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091e0:	d030      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80091e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091e6:	d82a      	bhi.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80091e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091ec:	d02c      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80091ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091f2:	d824      	bhi.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80091f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091f8:	d018      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80091fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091fe:	d81e      	bhi.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009208:	d007      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800920a:	e018      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800920c:	4b66      	ldr	r3, [pc, #408]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	4a65      	ldr	r2, [pc, #404]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009218:	e017      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	3304      	adds	r3, #4
 800921e:	2100      	movs	r1, #0
 8009220:	4618      	mov	r0, r3
 8009222:	f001 f821 	bl	800a268 <RCCEx_PLL2_Config>
 8009226:	4603      	mov	r3, r0
 8009228:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800922a:	e00e      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3324      	adds	r3, #36	; 0x24
 8009230:	2100      	movs	r1, #0
 8009232:	4618      	mov	r0, r3
 8009234:	f001 f8ca 	bl	800a3cc <RCCEx_PLL3_Config>
 8009238:	4603      	mov	r3, r0
 800923a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800923c:	e005      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	75fb      	strb	r3, [r7, #23]
      break;
 8009242:	e002      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009244:	bf00      	nop
 8009246:	e000      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d109      	bne.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009250:	4b55      	ldr	r3, [pc, #340]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009254:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800925c:	4952      	ldr	r1, [pc, #328]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800925e:	4313      	orrs	r3, r2
 8009260:	650b      	str	r3, [r1, #80]	; 0x50
 8009262:	e001      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d049      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800927c:	d02e      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800927e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009282:	d828      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009284:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009288:	d02a      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800928a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800928e:	d822      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009290:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009294:	d026      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009296:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800929a:	d81c      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800929c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092a0:	d010      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80092a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092a6:	d816      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d01d      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80092ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092b0:	d111      	bne.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3304      	adds	r3, #4
 80092b6:	2101      	movs	r1, #1
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 ffd5 	bl	800a268 <RCCEx_PLL2_Config>
 80092be:	4603      	mov	r3, r0
 80092c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80092c2:	e012      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3324      	adds	r3, #36	; 0x24
 80092c8:	2101      	movs	r1, #1
 80092ca:	4618      	mov	r0, r3
 80092cc:	f001 f87e 	bl	800a3cc <RCCEx_PLL3_Config>
 80092d0:	4603      	mov	r3, r0
 80092d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80092d4:	e009      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	75fb      	strb	r3, [r7, #23]
      break;
 80092da:	e006      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092dc:	bf00      	nop
 80092de:	e004      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092e0:	bf00      	nop
 80092e2:	e002      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092e4:	bf00      	nop
 80092e6:	e000      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d109      	bne.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80092f0:	4b2d      	ldr	r3, [pc, #180]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092fc:	492a      	ldr	r1, [pc, #168]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	650b      	str	r3, [r1, #80]	; 0x50
 8009302:	e001      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009304:	7dfb      	ldrb	r3, [r7, #23]
 8009306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d04d      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800931a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800931e:	d02e      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009324:	d828      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800932a:	d02a      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800932c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009330:	d822      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009332:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009336:	d026      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009338:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800933c:	d81c      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800933e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009342:	d010      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009348:	d816      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d01d      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800934e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009352:	d111      	bne.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3304      	adds	r3, #4
 8009358:	2101      	movs	r1, #1
 800935a:	4618      	mov	r0, r3
 800935c:	f000 ff84 	bl	800a268 <RCCEx_PLL2_Config>
 8009360:	4603      	mov	r3, r0
 8009362:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009364:	e012      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3324      	adds	r3, #36	; 0x24
 800936a:	2101      	movs	r1, #1
 800936c:	4618      	mov	r0, r3
 800936e:	f001 f82d 	bl	800a3cc <RCCEx_PLL3_Config>
 8009372:	4603      	mov	r3, r0
 8009374:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009376:	e009      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	75fb      	strb	r3, [r7, #23]
      break;
 800937c:	e006      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800937e:	bf00      	nop
 8009380:	e004      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009382:	bf00      	nop
 8009384:	e002      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009386:	bf00      	nop
 8009388:	e000      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800938a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800938c:	7dfb      	ldrb	r3, [r7, #23]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10c      	bne.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009392:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009396:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093a0:	4901      	ldr	r1, [pc, #4]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	658b      	str	r3, [r1, #88]	; 0x58
 80093a6:	e003      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80093a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d02f      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c4:	d00e      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80093c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ca:	d814      	bhi.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d015      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80093d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093d4:	d10f      	bne.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093d6:	4baf      	ldr	r3, [pc, #700]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80093d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093da:	4aae      	ldr	r2, [pc, #696]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80093dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80093e2:	e00c      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3304      	adds	r3, #4
 80093e8:	2101      	movs	r1, #1
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 ff3c 	bl	800a268 <RCCEx_PLL2_Config>
 80093f0:	4603      	mov	r3, r0
 80093f2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80093f4:	e003      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	75fb      	strb	r3, [r7, #23]
      break;
 80093fa:	e000      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80093fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d109      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009404:	4ba3      	ldr	r3, [pc, #652]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009408:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009410:	49a0      	ldr	r1, [pc, #640]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009412:	4313      	orrs	r3, r2
 8009414:	650b      	str	r3, [r1, #80]	; 0x50
 8009416:	e001      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d032      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800942c:	2b03      	cmp	r3, #3
 800942e:	d81b      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009430:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009436:	bf00      	nop
 8009438:	0800946f 	.word	0x0800946f
 800943c:	08009449 	.word	0x08009449
 8009440:	08009457 	.word	0x08009457
 8009444:	0800946f 	.word	0x0800946f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009448:	4b92      	ldr	r3, [pc, #584]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	4a91      	ldr	r2, [pc, #580]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800944e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009452:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009454:	e00c      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	3304      	adds	r3, #4
 800945a:	2102      	movs	r1, #2
 800945c:	4618      	mov	r0, r3
 800945e:	f000 ff03 	bl	800a268 <RCCEx_PLL2_Config>
 8009462:	4603      	mov	r3, r0
 8009464:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009466:	e003      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	75fb      	strb	r3, [r7, #23]
      break;
 800946c:	e000      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800946e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d109      	bne.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009476:	4b87      	ldr	r3, [pc, #540]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800947a:	f023 0203 	bic.w	r2, r3, #3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009482:	4984      	ldr	r1, [pc, #528]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009484:	4313      	orrs	r3, r2
 8009486:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009488:	e001      	b.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 8086 	beq.w	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800949c:	4b7e      	ldr	r3, [pc, #504]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a7d      	ldr	r2, [pc, #500]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80094a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094a8:	f7fd fc08 	bl	8006cbc <HAL_GetTick>
 80094ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094ae:	e009      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094b0:	f7fd fc04 	bl	8006cbc <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	2b64      	cmp	r3, #100	; 0x64
 80094bc:	d902      	bls.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	75fb      	strb	r3, [r7, #23]
        break;
 80094c2:	e005      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094c4:	4b74      	ldr	r3, [pc, #464]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0ef      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d166      	bne.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80094d6:	4b6f      	ldr	r3, [pc, #444]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094e0:	4053      	eors	r3, r2
 80094e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d013      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094ea:	4b6a      	ldr	r3, [pc, #424]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80094f4:	4b67      	ldr	r3, [pc, #412]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f8:	4a66      	ldr	r2, [pc, #408]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009500:	4b64      	ldr	r3, [pc, #400]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009504:	4a63      	ldr	r2, [pc, #396]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800950a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800950c:	4a61      	ldr	r2, [pc, #388]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800951c:	d115      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800951e:	f7fd fbcd 	bl	8006cbc <HAL_GetTick>
 8009522:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009524:	e00b      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009526:	f7fd fbc9 	bl	8006cbc <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	f241 3288 	movw	r2, #5000	; 0x1388
 8009534:	4293      	cmp	r3, r2
 8009536:	d902      	bls.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	75fb      	strb	r3, [r7, #23]
            break;
 800953c:	e005      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800953e:	4b55      	ldr	r3, [pc, #340]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0ed      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d126      	bne.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800955a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800955e:	d10d      	bne.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009560:	4b4c      	ldr	r3, [pc, #304]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800956e:	0919      	lsrs	r1, r3, #4
 8009570:	4b4a      	ldr	r3, [pc, #296]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009572:	400b      	ands	r3, r1
 8009574:	4947      	ldr	r1, [pc, #284]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009576:	4313      	orrs	r3, r2
 8009578:	610b      	str	r3, [r1, #16]
 800957a:	e005      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800957c:	4b45      	ldr	r3, [pc, #276]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	4a44      	ldr	r2, [pc, #272]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009582:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009586:	6113      	str	r3, [r2, #16]
 8009588:	4b42      	ldr	r3, [pc, #264]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800958a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009596:	493f      	ldr	r1, [pc, #252]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009598:	4313      	orrs	r3, r2
 800959a:	670b      	str	r3, [r1, #112]	; 0x70
 800959c:	e004      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	75bb      	strb	r3, [r7, #22]
 80095a2:	e001      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 8085 	beq.w	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ba:	2b28      	cmp	r3, #40	; 0x28
 80095bc:	d866      	bhi.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80095be:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80095c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c4:	080096a1 	.word	0x080096a1
 80095c8:	0800968d 	.word	0x0800968d
 80095cc:	0800968d 	.word	0x0800968d
 80095d0:	0800968d 	.word	0x0800968d
 80095d4:	0800968d 	.word	0x0800968d
 80095d8:	0800968d 	.word	0x0800968d
 80095dc:	0800968d 	.word	0x0800968d
 80095e0:	0800968d 	.word	0x0800968d
 80095e4:	08009669 	.word	0x08009669
 80095e8:	0800968d 	.word	0x0800968d
 80095ec:	0800968d 	.word	0x0800968d
 80095f0:	0800968d 	.word	0x0800968d
 80095f4:	0800968d 	.word	0x0800968d
 80095f8:	0800968d 	.word	0x0800968d
 80095fc:	0800968d 	.word	0x0800968d
 8009600:	0800968d 	.word	0x0800968d
 8009604:	0800967b 	.word	0x0800967b
 8009608:	0800968d 	.word	0x0800968d
 800960c:	0800968d 	.word	0x0800968d
 8009610:	0800968d 	.word	0x0800968d
 8009614:	0800968d 	.word	0x0800968d
 8009618:	0800968d 	.word	0x0800968d
 800961c:	0800968d 	.word	0x0800968d
 8009620:	0800968d 	.word	0x0800968d
 8009624:	080096a1 	.word	0x080096a1
 8009628:	0800968d 	.word	0x0800968d
 800962c:	0800968d 	.word	0x0800968d
 8009630:	0800968d 	.word	0x0800968d
 8009634:	0800968d 	.word	0x0800968d
 8009638:	0800968d 	.word	0x0800968d
 800963c:	0800968d 	.word	0x0800968d
 8009640:	0800968d 	.word	0x0800968d
 8009644:	080096a1 	.word	0x080096a1
 8009648:	0800968d 	.word	0x0800968d
 800964c:	0800968d 	.word	0x0800968d
 8009650:	0800968d 	.word	0x0800968d
 8009654:	0800968d 	.word	0x0800968d
 8009658:	0800968d 	.word	0x0800968d
 800965c:	0800968d 	.word	0x0800968d
 8009660:	0800968d 	.word	0x0800968d
 8009664:	080096a1 	.word	0x080096a1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3304      	adds	r3, #4
 800966c:	2101      	movs	r1, #1
 800966e:	4618      	mov	r0, r3
 8009670:	f000 fdfa 	bl	800a268 <RCCEx_PLL2_Config>
 8009674:	4603      	mov	r3, r0
 8009676:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009678:	e013      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	3324      	adds	r3, #36	; 0x24
 800967e:	2101      	movs	r1, #1
 8009680:	4618      	mov	r0, r3
 8009682:	f000 fea3 	bl	800a3cc <RCCEx_PLL3_Config>
 8009686:	4603      	mov	r3, r0
 8009688:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800968a:	e00a      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	75fb      	strb	r3, [r7, #23]
      break;
 8009690:	e007      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009692:	bf00      	nop
 8009694:	58024400 	.word	0x58024400
 8009698:	58024800 	.word	0x58024800
 800969c:	00ffffcf 	.word	0x00ffffcf
      break;
 80096a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d109      	bne.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80096a8:	4b96      	ldr	r3, [pc, #600]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80096aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096b4:	4993      	ldr	r1, [pc, #588]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	654b      	str	r3, [r1, #84]	; 0x54
 80096ba:	e001      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d038      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096d0:	2b05      	cmp	r3, #5
 80096d2:	d821      	bhi.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80096d4:	a201      	add	r2, pc, #4	; (adr r2, 80096dc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80096d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096da:	bf00      	nop
 80096dc:	0800971f 	.word	0x0800971f
 80096e0:	080096f5 	.word	0x080096f5
 80096e4:	08009707 	.word	0x08009707
 80096e8:	0800971f 	.word	0x0800971f
 80096ec:	0800971f 	.word	0x0800971f
 80096f0:	0800971f 	.word	0x0800971f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3304      	adds	r3, #4
 80096f8:	2101      	movs	r1, #1
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fdb4 	bl	800a268 <RCCEx_PLL2_Config>
 8009700:	4603      	mov	r3, r0
 8009702:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009704:	e00c      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3324      	adds	r3, #36	; 0x24
 800970a:	2101      	movs	r1, #1
 800970c:	4618      	mov	r0, r3
 800970e:	f000 fe5d 	bl	800a3cc <RCCEx_PLL3_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009716:	e003      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	75fb      	strb	r3, [r7, #23]
      break;
 800971c:	e000      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800971e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009720:	7dfb      	ldrb	r3, [r7, #23]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d109      	bne.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009726:	4b77      	ldr	r3, [pc, #476]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800972a:	f023 0207 	bic.w	r2, r3, #7
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009732:	4974      	ldr	r1, [pc, #464]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009734:	4313      	orrs	r3, r2
 8009736:	654b      	str	r3, [r1, #84]	; 0x54
 8009738:	e001      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0304 	and.w	r3, r3, #4
 8009746:	2b00      	cmp	r3, #0
 8009748:	d03a      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009750:	2b05      	cmp	r3, #5
 8009752:	d821      	bhi.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009754:	a201      	add	r2, pc, #4	; (adr r2, 800975c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975a:	bf00      	nop
 800975c:	0800979f 	.word	0x0800979f
 8009760:	08009775 	.word	0x08009775
 8009764:	08009787 	.word	0x08009787
 8009768:	0800979f 	.word	0x0800979f
 800976c:	0800979f 	.word	0x0800979f
 8009770:	0800979f 	.word	0x0800979f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3304      	adds	r3, #4
 8009778:	2101      	movs	r1, #1
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fd74 	bl	800a268 <RCCEx_PLL2_Config>
 8009780:	4603      	mov	r3, r0
 8009782:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009784:	e00c      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	3324      	adds	r3, #36	; 0x24
 800978a:	2101      	movs	r1, #1
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fe1d 	bl	800a3cc <RCCEx_PLL3_Config>
 8009792:	4603      	mov	r3, r0
 8009794:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009796:	e003      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	75fb      	strb	r3, [r7, #23]
      break;
 800979c:	e000      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800979e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097a0:	7dfb      	ldrb	r3, [r7, #23]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10a      	bne.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097a6:	4b57      	ldr	r3, [pc, #348]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80097a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097aa:	f023 0207 	bic.w	r2, r3, #7
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097b4:	4953      	ldr	r1, [pc, #332]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	658b      	str	r3, [r1, #88]	; 0x58
 80097ba:	e001      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0320 	and.w	r3, r3, #32
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d04b      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097d6:	d02e      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80097d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097dc:	d828      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80097de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e2:	d02a      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80097e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e8:	d822      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80097ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097ee:	d026      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80097f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097f4:	d81c      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80097f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097fa:	d010      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80097fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009800:	d816      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d01d      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800980a:	d111      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3304      	adds	r3, #4
 8009810:	2100      	movs	r1, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fd28 	bl	800a268 <RCCEx_PLL2_Config>
 8009818:	4603      	mov	r3, r0
 800981a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800981c:	e012      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3324      	adds	r3, #36	; 0x24
 8009822:	2102      	movs	r1, #2
 8009824:	4618      	mov	r0, r3
 8009826:	f000 fdd1 	bl	800a3cc <RCCEx_PLL3_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800982e:	e009      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	75fb      	strb	r3, [r7, #23]
      break;
 8009834:	e006      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009836:	bf00      	nop
 8009838:	e004      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800983a:	bf00      	nop
 800983c:	e002      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800983e:	bf00      	nop
 8009840:	e000      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10a      	bne.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800984a:	4b2e      	ldr	r3, [pc, #184]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800984c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009858:	492a      	ldr	r1, [pc, #168]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800985a:	4313      	orrs	r3, r2
 800985c:	654b      	str	r3, [r1, #84]	; 0x54
 800985e:	e001      	b.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986c:	2b00      	cmp	r3, #0
 800986e:	d04d      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009876:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800987a:	d02e      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800987c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009880:	d828      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009886:	d02a      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800988c:	d822      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800988e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009892:	d026      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009894:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009898:	d81c      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800989a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800989e:	d010      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80098a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098a4:	d816      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d01d      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80098aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ae:	d111      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3304      	adds	r3, #4
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fcd6 	bl	800a268 <RCCEx_PLL2_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80098c0:	e012      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3324      	adds	r3, #36	; 0x24
 80098c6:	2102      	movs	r1, #2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 fd7f 	bl	800a3cc <RCCEx_PLL3_Config>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80098d2:	e009      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	75fb      	strb	r3, [r7, #23]
      break;
 80098d8:	e006      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80098da:	bf00      	nop
 80098dc:	e004      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80098de:	bf00      	nop
 80098e0:	e002      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80098e2:	bf00      	nop
 80098e4:	e000      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80098e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10c      	bne.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80098ee:	4b05      	ldr	r3, [pc, #20]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098fc:	4901      	ldr	r1, [pc, #4]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	658b      	str	r3, [r1, #88]	; 0x58
 8009902:	e003      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009914:	2b00      	cmp	r3, #0
 8009916:	d04b      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800991e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009922:	d02e      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009924:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009928:	d828      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800992a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800992e:	d02a      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009934:	d822      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009936:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800993a:	d026      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800993c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009940:	d81c      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009946:	d010      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800994c:	d816      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800994e:	2b00      	cmp	r3, #0
 8009950:	d01d      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009956:	d111      	bne.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3304      	adds	r3, #4
 800995c:	2100      	movs	r1, #0
 800995e:	4618      	mov	r0, r3
 8009960:	f000 fc82 	bl	800a268 <RCCEx_PLL2_Config>
 8009964:	4603      	mov	r3, r0
 8009966:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009968:	e012      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	3324      	adds	r3, #36	; 0x24
 800996e:	2102      	movs	r1, #2
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fd2b 	bl	800a3cc <RCCEx_PLL3_Config>
 8009976:	4603      	mov	r3, r0
 8009978:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800997a:	e009      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	75fb      	strb	r3, [r7, #23]
      break;
 8009980:	e006      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009982:	bf00      	nop
 8009984:	e004      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009986:	bf00      	nop
 8009988:	e002      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800998a:	bf00      	nop
 800998c:	e000      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800998e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10a      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009996:	4b9d      	ldr	r3, [pc, #628]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800999a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099a4:	4999      	ldr	r1, [pc, #612]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	658b      	str	r3, [r1, #88]	; 0x58
 80099aa:	e001      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0308 	and.w	r3, r3, #8
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01a      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099c6:	d10a      	bne.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3324      	adds	r3, #36	; 0x24
 80099cc:	2102      	movs	r1, #2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fcfc 	bl	800a3cc <RCCEx_PLL3_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80099de:	4b8b      	ldr	r3, [pc, #556]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ec:	4987      	ldr	r1, [pc, #540]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0310 	and.w	r3, r3, #16
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d01a      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a08:	d10a      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3324      	adds	r3, #36	; 0x24
 8009a0e:	2102      	movs	r1, #2
 8009a10:	4618      	mov	r0, r3
 8009a12:	f000 fcdb 	bl	800a3cc <RCCEx_PLL3_Config>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a20:	4b7a      	ldr	r3, [pc, #488]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a2e:	4977      	ldr	r1, [pc, #476]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d034      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a4a:	d01d      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a50:	d817      	bhi.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a5a:	d009      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009a5c:	e011      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3304      	adds	r3, #4
 8009a62:	2100      	movs	r1, #0
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 fbff 	bl	800a268 <RCCEx_PLL2_Config>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009a6e:	e00c      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3324      	adds	r3, #36	; 0x24
 8009a74:	2102      	movs	r1, #2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fca8 	bl	800a3cc <RCCEx_PLL3_Config>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009a80:	e003      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	75fb      	strb	r3, [r7, #23]
      break;
 8009a86:	e000      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10a      	bne.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a90:	4b5e      	ldr	r3, [pc, #376]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a9e:	495b      	ldr	r1, [pc, #364]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	658b      	str	r3, [r1, #88]	; 0x58
 8009aa4:	e001      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d033      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009abc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ac0:	d01c      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009ac2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ac6:	d816      	bhi.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009acc:	d003      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ad2:	d007      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009ad4:	e00f      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad6:	4b4d      	ldr	r3, [pc, #308]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ada:	4a4c      	ldr	r2, [pc, #304]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009ae2:	e00c      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3324      	adds	r3, #36	; 0x24
 8009ae8:	2101      	movs	r1, #1
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fc6e 	bl	800a3cc <RCCEx_PLL3_Config>
 8009af0:	4603      	mov	r3, r0
 8009af2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009af4:	e003      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	75fb      	strb	r3, [r7, #23]
      break;
 8009afa:	e000      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10a      	bne.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b04:	4b41      	ldr	r3, [pc, #260]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b12:	493e      	ldr	r1, [pc, #248]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	654b      	str	r3, [r1, #84]	; 0x54
 8009b18:	e001      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d029      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b36:	d007      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009b38:	e00f      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b3a:	4b34      	ldr	r3, [pc, #208]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3e:	4a33      	ldr	r2, [pc, #204]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009b46:	e00b      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	2102      	movs	r1, #2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 fb8a 	bl	800a268 <RCCEx_PLL2_Config>
 8009b54:	4603      	mov	r3, r0
 8009b56:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009b58:	e002      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d109      	bne.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b66:	4b29      	ldr	r3, [pc, #164]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b72:	4926      	ldr	r1, [pc, #152]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009b78:	e001      	b.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3324      	adds	r3, #36	; 0x24
 8009b8e:	2102      	movs	r1, #2
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 fc1b 	bl	800a3cc <RCCEx_PLL3_Config>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d033      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bb4:	d017      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bba:	d811      	bhi.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bc0:	d013      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bc6:	d80b      	bhi.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d010      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bd0:	d106      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd2:	4b0e      	ldr	r3, [pc, #56]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	4a0d      	ldr	r2, [pc, #52]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009bde:	e007      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	75fb      	strb	r3, [r7, #23]
      break;
 8009be4:	e004      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009be6:	bf00      	nop
 8009be8:	e002      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009bea:	bf00      	nop
 8009bec:	e000      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10c      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009bf6:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c02:	4902      	ldr	r1, [pc, #8]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	654b      	str	r3, [r1, #84]	; 0x54
 8009c08:	e004      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009c0a:	bf00      	nop
 8009c0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d008      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c20:	4b31      	ldr	r3, [pc, #196]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2c:	492e      	ldr	r1, [pc, #184]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d009      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009c3e:	4b2a      	ldr	r3, [pc, #168]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009c4c:	4926      	ldr	r1, [pc, #152]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d008      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c5e:	4b22      	ldr	r3, [pc, #136]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c6a:	491f      	ldr	r1, [pc, #124]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00d      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c7c:	4b1a      	ldr	r3, [pc, #104]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	4a19      	ldr	r2, [pc, #100]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c86:	6113      	str	r3, [r2, #16]
 8009c88:	4b17      	ldr	r3, [pc, #92]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009c92:	4915      	ldr	r1, [pc, #84]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c94:	4313      	orrs	r3, r2
 8009c96:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	da08      	bge.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ca0:	4b11      	ldr	r3, [pc, #68]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cac:	490e      	ldr	r1, [pc, #56]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d009      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009cbe:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ccc:	4906      	ldr	r1, [pc, #24]	; (8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009cd2:	7dbb      	ldrb	r3, [r7, #22]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d101      	bne.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e000      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	58024400 	.word	0x58024400

08009cec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009cf0:	f7ff f85a 	bl	8008da8 <HAL_RCC_GetHCLKFreq>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	4b06      	ldr	r3, [pc, #24]	; (8009d10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	091b      	lsrs	r3, r3, #4
 8009cfc:	f003 0307 	and.w	r3, r3, #7
 8009d00:	4904      	ldr	r1, [pc, #16]	; (8009d14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009d02:	5ccb      	ldrb	r3, [r1, r3]
 8009d04:	f003 031f 	and.w	r3, r3, #31
 8009d08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	58024400 	.word	0x58024400
 8009d14:	080122f8 	.word	0x080122f8

08009d18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b089      	sub	sp, #36	; 0x24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d20:	4ba1      	ldr	r3, [pc, #644]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009d2a:	4b9f      	ldr	r3, [pc, #636]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2e:	0b1b      	lsrs	r3, r3, #12
 8009d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d36:	4b9c      	ldr	r3, [pc, #624]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	091b      	lsrs	r3, r3, #4
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009d42:	4b99      	ldr	r3, [pc, #612]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d46:	08db      	lsrs	r3, r3, #3
 8009d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	fb02 f303 	mul.w	r3, r2, r3
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 8111 	beq.w	8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	f000 8083 	beq.w	8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	f200 80a1 	bhi.w	8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d003      	beq.n	8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d056      	beq.n	8009e30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d82:	e099      	b.n	8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d84:	4b88      	ldr	r3, [pc, #544]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0320 	and.w	r3, r3, #32
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d02d      	beq.n	8009dec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d90:	4b85      	ldr	r3, [pc, #532]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	08db      	lsrs	r3, r3, #3
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	4a84      	ldr	r2, [pc, #528]	; (8009fac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009da0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	ee07 3a90 	vmov	s15, r3
 8009da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dba:	4b7b      	ldr	r3, [pc, #492]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009dea:	e087      	b.n	8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	ee07 3a90 	vmov	s15, r3
 8009df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dfe:	4b6a      	ldr	r3, [pc, #424]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e12:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e2e:	e065      	b.n	8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	ee07 3a90 	vmov	s15, r3
 8009e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e42:	4b59      	ldr	r3, [pc, #356]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e56:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e72:	e043      	b.n	8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	ee07 3a90 	vmov	s15, r3
 8009e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009fbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e86:	4b48      	ldr	r3, [pc, #288]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eb6:	e021      	b.n	8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	ee07 3a90 	vmov	s15, r3
 8009ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eca:	4b37      	ldr	r3, [pc, #220]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed2:	ee07 3a90 	vmov	s15, r3
 8009ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ede:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009efa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009efc:	4b2a      	ldr	r3, [pc, #168]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f00:	0a5b      	lsrs	r3, r3, #9
 8009f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f22:	ee17 2a90 	vmov	r2, s15
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009f2a:	4b1f      	ldr	r3, [pc, #124]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	0c1b      	lsrs	r3, r3, #16
 8009f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f34:	ee07 3a90 	vmov	s15, r3
 8009f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f50:	ee17 2a90 	vmov	r2, s15
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009f58:	4b13      	ldr	r3, [pc, #76]	; (8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5c:	0e1b      	lsrs	r3, r3, #24
 8009f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f7e:	ee17 2a90 	vmov	r2, s15
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f86:	e008      	b.n	8009f9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	609a      	str	r2, [r3, #8]
}
 8009f9a:	bf00      	nop
 8009f9c:	3724      	adds	r7, #36	; 0x24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	58024400 	.word	0x58024400
 8009fac:	03d09000 	.word	0x03d09000
 8009fb0:	46000000 	.word	0x46000000
 8009fb4:	4c742400 	.word	0x4c742400
 8009fb8:	4a742400 	.word	0x4a742400
 8009fbc:	4bbebc20 	.word	0x4bbebc20

08009fc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b089      	sub	sp, #36	; 0x24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fc8:	4ba1      	ldr	r3, [pc, #644]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fcc:	f003 0303 	and.w	r3, r3, #3
 8009fd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009fd2:	4b9f      	ldr	r3, [pc, #636]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd6:	0d1b      	lsrs	r3, r3, #20
 8009fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fdc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009fde:	4b9c      	ldr	r3, [pc, #624]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	0a1b      	lsrs	r3, r3, #8
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009fea:	4b99      	ldr	r3, [pc, #612]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fee:	08db      	lsrs	r3, r3, #3
 8009ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	fb02 f303 	mul.w	r3, r2, r3
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 8111 	beq.w	800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	2b02      	cmp	r3, #2
 800a012:	f000 8083 	beq.w	800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	f200 80a1 	bhi.w	800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d003      	beq.n	800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d056      	beq.n	800a0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a02a:	e099      	b.n	800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a02c:	4b88      	ldr	r3, [pc, #544]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0320 	and.w	r3, r3, #32
 800a034:	2b00      	cmp	r3, #0
 800a036:	d02d      	beq.n	800a094 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a038:	4b85      	ldr	r3, [pc, #532]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	08db      	lsrs	r3, r3, #3
 800a03e:	f003 0303 	and.w	r3, r3, #3
 800a042:	4a84      	ldr	r2, [pc, #528]	; (800a254 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a044:	fa22 f303 	lsr.w	r3, r2, r3
 800a048:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	ee07 3a90 	vmov	s15, r3
 800a050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	ee07 3a90 	vmov	s15, r3
 800a05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a062:	4b7b      	ldr	r3, [pc, #492]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a06a:	ee07 3a90 	vmov	s15, r3
 800a06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a072:	ed97 6a03 	vldr	s12, [r7, #12]
 800a076:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a08e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a092:	e087      	b.n	800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a25c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0a6:	4b6a      	ldr	r3, [pc, #424]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0d6:	e065      	b.n	800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ea:	4b59      	ldr	r3, [pc, #356]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f2:	ee07 3a90 	vmov	s15, r3
 800a0f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a10a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a10e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a112:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a11a:	e043      	b.n	800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a126:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a264 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a12a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a12e:	4b48      	ldr	r3, [pc, #288]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a13e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a142:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a14a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a14e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a15a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a15e:	e021      	b.n	800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a16e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a172:	4b37      	ldr	r3, [pc, #220]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a17a:	ee07 3a90 	vmov	s15, r3
 800a17e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a182:	ed97 6a03 	vldr	s12, [r7, #12]
 800a186:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a18a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a18e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a19e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a1a4:	4b2a      	ldr	r3, [pc, #168]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a8:	0a5b      	lsrs	r3, r3, #9
 800a1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ae:	ee07 3a90 	vmov	s15, r3
 800a1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ca:	ee17 2a90 	vmov	r2, s15
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a1d2:	4b1f      	ldr	r3, [pc, #124]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d6:	0c1b      	lsrs	r3, r3, #16
 800a1d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1dc:	ee07 3a90 	vmov	s15, r3
 800a1e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1f8:	ee17 2a90 	vmov	r2, s15
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a200:	4b13      	ldr	r3, [pc, #76]	; (800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a204:	0e1b      	lsrs	r3, r3, #24
 800a206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a20a:	ee07 3a90 	vmov	s15, r3
 800a20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a21a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a21e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a226:	ee17 2a90 	vmov	r2, s15
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a22e:	e008      	b.n	800a242 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	609a      	str	r2, [r3, #8]
}
 800a242:	bf00      	nop
 800a244:	3724      	adds	r7, #36	; 0x24
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	58024400 	.word	0x58024400
 800a254:	03d09000 	.word	0x03d09000
 800a258:	46000000 	.word	0x46000000
 800a25c:	4c742400 	.word	0x4c742400
 800a260:	4a742400 	.word	0x4a742400
 800a264:	4bbebc20 	.word	0x4bbebc20

0800a268 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a276:	4b53      	ldr	r3, [pc, #332]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27a:	f003 0303 	and.w	r3, r3, #3
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d101      	bne.n	800a286 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e099      	b.n	800a3ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a286:	4b4f      	ldr	r3, [pc, #316]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a4e      	ldr	r2, [pc, #312]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a28c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a292:	f7fc fd13 	bl	8006cbc <HAL_GetTick>
 800a296:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a298:	e008      	b.n	800a2ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a29a:	f7fc fd0f 	bl	8006cbc <HAL_GetTick>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d901      	bls.n	800a2ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e086      	b.n	800a3ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2ac:	4b45      	ldr	r3, [pc, #276]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1f0      	bne.n	800a29a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a2b8:	4b42      	ldr	r3, [pc, #264]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	031b      	lsls	r3, r3, #12
 800a2c6:	493f      	ldr	r1, [pc, #252]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	628b      	str	r3, [r1, #40]	; 0x28
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	025b      	lsls	r3, r3, #9
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	041b      	lsls	r3, r3, #16
 800a2ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	061b      	lsls	r3, r3, #24
 800a2f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2fc:	4931      	ldr	r1, [pc, #196]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a302:	4b30      	ldr	r3, [pc, #192]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a306:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	492d      	ldr	r1, [pc, #180]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a310:	4313      	orrs	r3, r2
 800a312:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a314:	4b2b      	ldr	r3, [pc, #172]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	f023 0220 	bic.w	r2, r3, #32
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	4928      	ldr	r1, [pc, #160]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a322:	4313      	orrs	r3, r2
 800a324:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a326:	4b27      	ldr	r3, [pc, #156]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32a:	4a26      	ldr	r2, [pc, #152]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a32c:	f023 0310 	bic.w	r3, r3, #16
 800a330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a332:	4b24      	ldr	r3, [pc, #144]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a336:	4b24      	ldr	r3, [pc, #144]	; (800a3c8 <RCCEx_PLL2_Config+0x160>)
 800a338:	4013      	ands	r3, r2
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	69d2      	ldr	r2, [r2, #28]
 800a33e:	00d2      	lsls	r2, r2, #3
 800a340:	4920      	ldr	r1, [pc, #128]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a342:	4313      	orrs	r3, r2
 800a344:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a346:	4b1f      	ldr	r3, [pc, #124]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34a:	4a1e      	ldr	r2, [pc, #120]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a34c:	f043 0310 	orr.w	r3, r3, #16
 800a350:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d106      	bne.n	800a366 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a358:	4b1a      	ldr	r3, [pc, #104]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35c:	4a19      	ldr	r2, [pc, #100]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a35e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a362:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a364:	e00f      	b.n	800a386 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d106      	bne.n	800a37a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a36c:	4b15      	ldr	r3, [pc, #84]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	4a14      	ldr	r2, [pc, #80]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a376:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a378:	e005      	b.n	800a386 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a37a:	4b12      	ldr	r3, [pc, #72]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37e:	4a11      	ldr	r2, [pc, #68]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a380:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a384:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a386:	4b0f      	ldr	r3, [pc, #60]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a0e      	ldr	r2, [pc, #56]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a38c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a392:	f7fc fc93 	bl	8006cbc <HAL_GetTick>
 800a396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a398:	e008      	b.n	800a3ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a39a:	f7fc fc8f 	bl	8006cbc <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d901      	bls.n	800a3ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e006      	b.n	800a3ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3ac:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <RCCEx_PLL2_Config+0x15c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d0f0      	beq.n	800a39a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	58024400 	.word	0x58024400
 800a3c8:	ffff0007 	.word	0xffff0007

0800a3cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3da:	4b53      	ldr	r3, [pc, #332]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3de:	f003 0303 	and.w	r3, r3, #3
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d101      	bne.n	800a3ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e099      	b.n	800a51e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a3ea:	4b4f      	ldr	r3, [pc, #316]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a4e      	ldr	r2, [pc, #312]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a3f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3f6:	f7fc fc61 	bl	8006cbc <HAL_GetTick>
 800a3fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3fc:	e008      	b.n	800a410 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a3fe:	f7fc fc5d 	bl	8006cbc <HAL_GetTick>
 800a402:	4602      	mov	r2, r0
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d901      	bls.n	800a410 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e086      	b.n	800a51e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a410:	4b45      	ldr	r3, [pc, #276]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1f0      	bne.n	800a3fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a41c:	4b42      	ldr	r3, [pc, #264]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a420:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	051b      	lsls	r3, r3, #20
 800a42a:	493f      	ldr	r1, [pc, #252]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a42c:	4313      	orrs	r3, r2
 800a42e:	628b      	str	r3, [r1, #40]	; 0x28
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	3b01      	subs	r3, #1
 800a436:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	3b01      	subs	r3, #1
 800a440:	025b      	lsls	r3, r3, #9
 800a442:	b29b      	uxth	r3, r3
 800a444:	431a      	orrs	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	041b      	lsls	r3, r3, #16
 800a44e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a452:	431a      	orrs	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	3b01      	subs	r3, #1
 800a45a:	061b      	lsls	r3, r3, #24
 800a45c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a460:	4931      	ldr	r1, [pc, #196]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a462:	4313      	orrs	r3, r2
 800a464:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a466:	4b30      	ldr	r3, [pc, #192]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	695b      	ldr	r3, [r3, #20]
 800a472:	492d      	ldr	r1, [pc, #180]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a474:	4313      	orrs	r3, r2
 800a476:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a478:	4b2b      	ldr	r3, [pc, #172]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	4928      	ldr	r1, [pc, #160]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a486:	4313      	orrs	r3, r2
 800a488:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a48a:	4b27      	ldr	r3, [pc, #156]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48e:	4a26      	ldr	r2, [pc, #152]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a496:	4b24      	ldr	r3, [pc, #144]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a49a:	4b24      	ldr	r3, [pc, #144]	; (800a52c <RCCEx_PLL3_Config+0x160>)
 800a49c:	4013      	ands	r3, r2
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	69d2      	ldr	r2, [r2, #28]
 800a4a2:	00d2      	lsls	r2, r2, #3
 800a4a4:	4920      	ldr	r1, [pc, #128]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a4aa:	4b1f      	ldr	r3, [pc, #124]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ae:	4a1e      	ldr	r2, [pc, #120]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a4b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d106      	bne.n	800a4ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a4bc:	4b1a      	ldr	r3, [pc, #104]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c0:	4a19      	ldr	r2, [pc, #100]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a4c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4c8:	e00f      	b.n	800a4ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d106      	bne.n	800a4de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a4d0:	4b15      	ldr	r3, [pc, #84]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d4:	4a14      	ldr	r2, [pc, #80]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a4d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a4da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4dc:	e005      	b.n	800a4ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4de:	4b12      	ldr	r3, [pc, #72]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e2:	4a11      	ldr	r2, [pc, #68]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a4e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a4ea:	4b0f      	ldr	r3, [pc, #60]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a0e      	ldr	r2, [pc, #56]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a4f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4f6:	f7fc fbe1 	bl	8006cbc <HAL_GetTick>
 800a4fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4fc:	e008      	b.n	800a510 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a4fe:	f7fc fbdd 	bl	8006cbc <HAL_GetTick>
 800a502:	4602      	mov	r2, r0
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d901      	bls.n	800a510 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e006      	b.n	800a51e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a510:	4b05      	ldr	r3, [pc, #20]	; (800a528 <RCCEx_PLL3_Config+0x15c>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d0f0      	beq.n	800a4fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	58024400 	.word	0x58024400
 800a52c:	ffff0007 	.word	0xffff0007

0800a530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e049      	b.n	800a5d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d106      	bne.n	800a55c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7f9 f89c 	bl	8003694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3304      	adds	r3, #4
 800a56c:	4619      	mov	r1, r3
 800a56e:	4610      	mov	r0, r2
 800a570:	f001 f9d0 	bl	800b914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3708      	adds	r7, #8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d001      	beq.n	800a5f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e04c      	b.n	800a692 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a26      	ldr	r2, [pc, #152]	; (800a6a0 <HAL_TIM_Base_Start+0xc0>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d022      	beq.n	800a650 <HAL_TIM_Base_Start+0x70>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a612:	d01d      	beq.n	800a650 <HAL_TIM_Base_Start+0x70>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a22      	ldr	r2, [pc, #136]	; (800a6a4 <HAL_TIM_Base_Start+0xc4>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d018      	beq.n	800a650 <HAL_TIM_Base_Start+0x70>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a21      	ldr	r2, [pc, #132]	; (800a6a8 <HAL_TIM_Base_Start+0xc8>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d013      	beq.n	800a650 <HAL_TIM_Base_Start+0x70>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a1f      	ldr	r2, [pc, #124]	; (800a6ac <HAL_TIM_Base_Start+0xcc>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d00e      	beq.n	800a650 <HAL_TIM_Base_Start+0x70>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a1e      	ldr	r2, [pc, #120]	; (800a6b0 <HAL_TIM_Base_Start+0xd0>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d009      	beq.n	800a650 <HAL_TIM_Base_Start+0x70>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a1c      	ldr	r2, [pc, #112]	; (800a6b4 <HAL_TIM_Base_Start+0xd4>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d004      	beq.n	800a650 <HAL_TIM_Base_Start+0x70>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a1b      	ldr	r2, [pc, #108]	; (800a6b8 <HAL_TIM_Base_Start+0xd8>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d115      	bne.n	800a67c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689a      	ldr	r2, [r3, #8]
 800a656:	4b19      	ldr	r3, [pc, #100]	; (800a6bc <HAL_TIM_Base_Start+0xdc>)
 800a658:	4013      	ands	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2b06      	cmp	r3, #6
 800a660:	d015      	beq.n	800a68e <HAL_TIM_Base_Start+0xae>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a668:	d011      	beq.n	800a68e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f042 0201 	orr.w	r2, r2, #1
 800a678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a67a:	e008      	b.n	800a68e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0201 	orr.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	e000      	b.n	800a690 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a68e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	40010000 	.word	0x40010000
 800a6a4:	40000400 	.word	0x40000400
 800a6a8:	40000800 	.word	0x40000800
 800a6ac:	40000c00 	.word	0x40000c00
 800a6b0:	40010400 	.word	0x40010400
 800a6b4:	40001800 	.word	0x40001800
 800a6b8:	40014000 	.word	0x40014000
 800a6bc:	00010007 	.word	0x00010007

0800a6c0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6a1a      	ldr	r2, [r3, #32]
 800a6ce:	f241 1311 	movw	r3, #4369	; 0x1111
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10f      	bne.n	800a6f8 <HAL_TIM_Base_Stop+0x38>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6a1a      	ldr	r2, [r3, #32]
 800a6de:	f240 4344 	movw	r3, #1092	; 0x444
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d107      	bne.n	800a6f8 <HAL_TIM_Base_Stop+0x38>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f022 0201 	bic.w	r2, r2, #1
 800a6f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
	...

0800a710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b01      	cmp	r3, #1
 800a722:	d001      	beq.n	800a728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e054      	b.n	800a7d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2202      	movs	r2, #2
 800a72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68da      	ldr	r2, [r3, #12]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0201 	orr.w	r2, r2, #1
 800a73e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a26      	ldr	r2, [pc, #152]	; (800a7e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d022      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a752:	d01d      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a22      	ldr	r2, [pc, #136]	; (800a7e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d018      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a21      	ldr	r2, [pc, #132]	; (800a7e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d013      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a1f      	ldr	r2, [pc, #124]	; (800a7ec <HAL_TIM_Base_Start_IT+0xdc>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d00e      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a1e      	ldr	r2, [pc, #120]	; (800a7f0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d009      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a1c      	ldr	r2, [pc, #112]	; (800a7f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d004      	beq.n	800a790 <HAL_TIM_Base_Start_IT+0x80>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a1b      	ldr	r2, [pc, #108]	; (800a7f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d115      	bne.n	800a7bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689a      	ldr	r2, [r3, #8]
 800a796:	4b19      	ldr	r3, [pc, #100]	; (800a7fc <HAL_TIM_Base_Start_IT+0xec>)
 800a798:	4013      	ands	r3, r2
 800a79a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b06      	cmp	r3, #6
 800a7a0:	d015      	beq.n	800a7ce <HAL_TIM_Base_Start_IT+0xbe>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7a8:	d011      	beq.n	800a7ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f042 0201 	orr.w	r2, r2, #1
 800a7b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ba:	e008      	b.n	800a7ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f042 0201 	orr.w	r2, r2, #1
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	e000      	b.n	800a7d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	40010000 	.word	0x40010000
 800a7e4:	40000400 	.word	0x40000400
 800a7e8:	40000800 	.word	0x40000800
 800a7ec:	40000c00 	.word	0x40000c00
 800a7f0:	40010400 	.word	0x40010400
 800a7f4:	40001800 	.word	0x40001800
 800a7f8:	40014000 	.word	0x40014000
 800a7fc:	00010007 	.word	0x00010007

0800a800 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68da      	ldr	r2, [r3, #12]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f022 0201 	bic.w	r2, r2, #1
 800a816:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6a1a      	ldr	r2, [r3, #32]
 800a81e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a822:	4013      	ands	r3, r2
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10f      	bne.n	800a848 <HAL_TIM_Base_Stop_IT+0x48>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6a1a      	ldr	r2, [r3, #32]
 800a82e:	f240 4344 	movw	r3, #1092	; 0x444
 800a832:	4013      	ands	r3, r2
 800a834:	2b00      	cmp	r3, #0
 800a836:	d107      	bne.n	800a848 <HAL_TIM_Base_Stop_IT+0x48>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f022 0201 	bic.w	r2, r2, #1
 800a846:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e049      	b.n	800a904 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d106      	bne.n	800a88a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f841 	bl	800a90c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2202      	movs	r2, #2
 800a88e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	3304      	adds	r3, #4
 800a89a:	4619      	mov	r1, r3
 800a89c:	4610      	mov	r0, r2
 800a89e:	f001 f839 	bl	800b914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d109      	bne.n	800a944 <HAL_TIM_PWM_Start+0x24>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b01      	cmp	r3, #1
 800a93a:	bf14      	ite	ne
 800a93c:	2301      	movne	r3, #1
 800a93e:	2300      	moveq	r3, #0
 800a940:	b2db      	uxtb	r3, r3
 800a942:	e03c      	b.n	800a9be <HAL_TIM_PWM_Start+0x9e>
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	2b04      	cmp	r3, #4
 800a948:	d109      	bne.n	800a95e <HAL_TIM_PWM_Start+0x3e>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b01      	cmp	r3, #1
 800a954:	bf14      	ite	ne
 800a956:	2301      	movne	r3, #1
 800a958:	2300      	moveq	r3, #0
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	e02f      	b.n	800a9be <HAL_TIM_PWM_Start+0x9e>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b08      	cmp	r3, #8
 800a962:	d109      	bne.n	800a978 <HAL_TIM_PWM_Start+0x58>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	bf14      	ite	ne
 800a970:	2301      	movne	r3, #1
 800a972:	2300      	moveq	r3, #0
 800a974:	b2db      	uxtb	r3, r3
 800a976:	e022      	b.n	800a9be <HAL_TIM_PWM_Start+0x9e>
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	2b0c      	cmp	r3, #12
 800a97c:	d109      	bne.n	800a992 <HAL_TIM_PWM_Start+0x72>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b01      	cmp	r3, #1
 800a988:	bf14      	ite	ne
 800a98a:	2301      	movne	r3, #1
 800a98c:	2300      	moveq	r3, #0
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	e015      	b.n	800a9be <HAL_TIM_PWM_Start+0x9e>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b10      	cmp	r3, #16
 800a996:	d109      	bne.n	800a9ac <HAL_TIM_PWM_Start+0x8c>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	bf14      	ite	ne
 800a9a4:	2301      	movne	r3, #1
 800a9a6:	2300      	moveq	r3, #0
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	e008      	b.n	800a9be <HAL_TIM_PWM_Start+0x9e>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	bf14      	ite	ne
 800a9b8:	2301      	movne	r3, #1
 800a9ba:	2300      	moveq	r3, #0
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e0a1      	b.n	800ab0a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d104      	bne.n	800a9d6 <HAL_TIM_PWM_Start+0xb6>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9d4:	e023      	b.n	800aa1e <HAL_TIM_PWM_Start+0xfe>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	d104      	bne.n	800a9e6 <HAL_TIM_PWM_Start+0xc6>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9e4:	e01b      	b.n	800aa1e <HAL_TIM_PWM_Start+0xfe>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d104      	bne.n	800a9f6 <HAL_TIM_PWM_Start+0xd6>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9f4:	e013      	b.n	800aa1e <HAL_TIM_PWM_Start+0xfe>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	2b0c      	cmp	r3, #12
 800a9fa:	d104      	bne.n	800aa06 <HAL_TIM_PWM_Start+0xe6>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2202      	movs	r2, #2
 800aa00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa04:	e00b      	b.n	800aa1e <HAL_TIM_PWM_Start+0xfe>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b10      	cmp	r3, #16
 800aa0a:	d104      	bne.n	800aa16 <HAL_TIM_PWM_Start+0xf6>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa14:	e003      	b.n	800aa1e <HAL_TIM_PWM_Start+0xfe>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2202      	movs	r2, #2
 800aa1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2201      	movs	r2, #1
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f001 fcac 	bl	800c384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a38      	ldr	r2, [pc, #224]	; (800ab14 <HAL_TIM_PWM_Start+0x1f4>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d013      	beq.n	800aa5e <HAL_TIM_PWM_Start+0x13e>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a37      	ldr	r2, [pc, #220]	; (800ab18 <HAL_TIM_PWM_Start+0x1f8>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d00e      	beq.n	800aa5e <HAL_TIM_PWM_Start+0x13e>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a35      	ldr	r2, [pc, #212]	; (800ab1c <HAL_TIM_PWM_Start+0x1fc>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d009      	beq.n	800aa5e <HAL_TIM_PWM_Start+0x13e>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a34      	ldr	r2, [pc, #208]	; (800ab20 <HAL_TIM_PWM_Start+0x200>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d004      	beq.n	800aa5e <HAL_TIM_PWM_Start+0x13e>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a32      	ldr	r2, [pc, #200]	; (800ab24 <HAL_TIM_PWM_Start+0x204>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d101      	bne.n	800aa62 <HAL_TIM_PWM_Start+0x142>
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e000      	b.n	800aa64 <HAL_TIM_PWM_Start+0x144>
 800aa62:	2300      	movs	r3, #0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d007      	beq.n	800aa78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a25      	ldr	r2, [pc, #148]	; (800ab14 <HAL_TIM_PWM_Start+0x1f4>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d022      	beq.n	800aac8 <HAL_TIM_PWM_Start+0x1a8>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa8a:	d01d      	beq.n	800aac8 <HAL_TIM_PWM_Start+0x1a8>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a25      	ldr	r2, [pc, #148]	; (800ab28 <HAL_TIM_PWM_Start+0x208>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d018      	beq.n	800aac8 <HAL_TIM_PWM_Start+0x1a8>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a24      	ldr	r2, [pc, #144]	; (800ab2c <HAL_TIM_PWM_Start+0x20c>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d013      	beq.n	800aac8 <HAL_TIM_PWM_Start+0x1a8>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a22      	ldr	r2, [pc, #136]	; (800ab30 <HAL_TIM_PWM_Start+0x210>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00e      	beq.n	800aac8 <HAL_TIM_PWM_Start+0x1a8>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a1a      	ldr	r2, [pc, #104]	; (800ab18 <HAL_TIM_PWM_Start+0x1f8>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d009      	beq.n	800aac8 <HAL_TIM_PWM_Start+0x1a8>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a1e      	ldr	r2, [pc, #120]	; (800ab34 <HAL_TIM_PWM_Start+0x214>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d004      	beq.n	800aac8 <HAL_TIM_PWM_Start+0x1a8>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a16      	ldr	r2, [pc, #88]	; (800ab1c <HAL_TIM_PWM_Start+0x1fc>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d115      	bne.n	800aaf4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	689a      	ldr	r2, [r3, #8]
 800aace:	4b1a      	ldr	r3, [pc, #104]	; (800ab38 <HAL_TIM_PWM_Start+0x218>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2b06      	cmp	r3, #6
 800aad8:	d015      	beq.n	800ab06 <HAL_TIM_PWM_Start+0x1e6>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aae0:	d011      	beq.n	800ab06 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f042 0201 	orr.w	r2, r2, #1
 800aaf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf2:	e008      	b.n	800ab06 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f042 0201 	orr.w	r2, r2, #1
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	e000      	b.n	800ab08 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	40010000 	.word	0x40010000
 800ab18:	40010400 	.word	0x40010400
 800ab1c:	40014000 	.word	0x40014000
 800ab20:	40014400 	.word	0x40014400
 800ab24:	40014800 	.word	0x40014800
 800ab28:	40000400 	.word	0x40000400
 800ab2c:	40000800 	.word	0x40000800
 800ab30:	40000c00 	.word	0x40000c00
 800ab34:	40001800 	.word	0x40001800
 800ab38:	00010007 	.word	0x00010007

0800ab3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	6839      	ldr	r1, [r7, #0]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f001 fc18 	bl	800c384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a3e      	ldr	r2, [pc, #248]	; (800ac54 <HAL_TIM_PWM_Stop+0x118>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d013      	beq.n	800ab86 <HAL_TIM_PWM_Stop+0x4a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a3d      	ldr	r2, [pc, #244]	; (800ac58 <HAL_TIM_PWM_Stop+0x11c>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d00e      	beq.n	800ab86 <HAL_TIM_PWM_Stop+0x4a>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a3b      	ldr	r2, [pc, #236]	; (800ac5c <HAL_TIM_PWM_Stop+0x120>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d009      	beq.n	800ab86 <HAL_TIM_PWM_Stop+0x4a>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a3a      	ldr	r2, [pc, #232]	; (800ac60 <HAL_TIM_PWM_Stop+0x124>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d004      	beq.n	800ab86 <HAL_TIM_PWM_Stop+0x4a>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a38      	ldr	r2, [pc, #224]	; (800ac64 <HAL_TIM_PWM_Stop+0x128>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d101      	bne.n	800ab8a <HAL_TIM_PWM_Stop+0x4e>
 800ab86:	2301      	movs	r3, #1
 800ab88:	e000      	b.n	800ab8c <HAL_TIM_PWM_Stop+0x50>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d017      	beq.n	800abc0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6a1a      	ldr	r2, [r3, #32]
 800ab96:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d10f      	bne.n	800abc0 <HAL_TIM_PWM_Stop+0x84>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	6a1a      	ldr	r2, [r3, #32]
 800aba6:	f240 4344 	movw	r3, #1092	; 0x444
 800abaa:	4013      	ands	r3, r2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d107      	bne.n	800abc0 <HAL_TIM_PWM_Stop+0x84>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800abbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6a1a      	ldr	r2, [r3, #32]
 800abc6:	f241 1311 	movw	r3, #4369	; 0x1111
 800abca:	4013      	ands	r3, r2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10f      	bne.n	800abf0 <HAL_TIM_PWM_Stop+0xb4>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6a1a      	ldr	r2, [r3, #32]
 800abd6:	f240 4344 	movw	r3, #1092	; 0x444
 800abda:	4013      	ands	r3, r2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d107      	bne.n	800abf0 <HAL_TIM_PWM_Stop+0xb4>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f022 0201 	bic.w	r2, r2, #1
 800abee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d104      	bne.n	800ac00 <HAL_TIM_PWM_Stop+0xc4>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abfe:	e023      	b.n	800ac48 <HAL_TIM_PWM_Stop+0x10c>
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2b04      	cmp	r3, #4
 800ac04:	d104      	bne.n	800ac10 <HAL_TIM_PWM_Stop+0xd4>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac0e:	e01b      	b.n	800ac48 <HAL_TIM_PWM_Stop+0x10c>
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2b08      	cmp	r3, #8
 800ac14:	d104      	bne.n	800ac20 <HAL_TIM_PWM_Stop+0xe4>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac1e:	e013      	b.n	800ac48 <HAL_TIM_PWM_Stop+0x10c>
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2b0c      	cmp	r3, #12
 800ac24:	d104      	bne.n	800ac30 <HAL_TIM_PWM_Stop+0xf4>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac2e:	e00b      	b.n	800ac48 <HAL_TIM_PWM_Stop+0x10c>
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2b10      	cmp	r3, #16
 800ac34:	d104      	bne.n	800ac40 <HAL_TIM_PWM_Stop+0x104>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac3e:	e003      	b.n	800ac48 <HAL_TIM_PWM_Stop+0x10c>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	40010000 	.word	0x40010000
 800ac58:	40010400 	.word	0x40010400
 800ac5c:	40014000 	.word	0x40014000
 800ac60:	40014400 	.word	0x40014400
 800ac64:	40014800 	.word	0x40014800

0800ac68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d101      	bne.n	800ac7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e049      	b.n	800ad0e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d106      	bne.n	800ac94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f841 	bl	800ad16 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2202      	movs	r2, #2
 800ac98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3304      	adds	r3, #4
 800aca4:	4619      	mov	r1, r3
 800aca6:	4610      	mov	r0, r2
 800aca8:	f000 fe34 	bl	800b914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ad16:	b480      	push	{r7}
 800ad18:	b083      	sub	sp, #12
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ad1e:	bf00      	nop
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
	...

0800ad2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d104      	bne.n	800ad4a <HAL_TIM_IC_Start_IT+0x1e>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	e023      	b.n	800ad92 <HAL_TIM_IC_Start_IT+0x66>
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	2b04      	cmp	r3, #4
 800ad4e:	d104      	bne.n	800ad5a <HAL_TIM_IC_Start_IT+0x2e>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	e01b      	b.n	800ad92 <HAL_TIM_IC_Start_IT+0x66>
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2b08      	cmp	r3, #8
 800ad5e:	d104      	bne.n	800ad6a <HAL_TIM_IC_Start_IT+0x3e>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	e013      	b.n	800ad92 <HAL_TIM_IC_Start_IT+0x66>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2b0c      	cmp	r3, #12
 800ad6e:	d104      	bne.n	800ad7a <HAL_TIM_IC_Start_IT+0x4e>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	e00b      	b.n	800ad92 <HAL_TIM_IC_Start_IT+0x66>
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	2b10      	cmp	r3, #16
 800ad7e:	d104      	bne.n	800ad8a <HAL_TIM_IC_Start_IT+0x5e>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	e003      	b.n	800ad92 <HAL_TIM_IC_Start_IT+0x66>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d104      	bne.n	800ada4 <HAL_TIM_IC_Start_IT+0x78>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	e013      	b.n	800adcc <HAL_TIM_IC_Start_IT+0xa0>
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	2b04      	cmp	r3, #4
 800ada8:	d104      	bne.n	800adb4 <HAL_TIM_IC_Start_IT+0x88>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	e00b      	b.n	800adcc <HAL_TIM_IC_Start_IT+0xa0>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b08      	cmp	r3, #8
 800adb8:	d104      	bne.n	800adc4 <HAL_TIM_IC_Start_IT+0x98>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	e003      	b.n	800adcc <HAL_TIM_IC_Start_IT+0xa0>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800adce:	7bbb      	ldrb	r3, [r7, #14]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d102      	bne.n	800adda <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800add4:	7b7b      	ldrb	r3, [r7, #13]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d001      	beq.n	800adde <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e0e2      	b.n	800afa4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d104      	bne.n	800adee <HAL_TIM_IC_Start_IT+0xc2>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2202      	movs	r2, #2
 800ade8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adec:	e023      	b.n	800ae36 <HAL_TIM_IC_Start_IT+0x10a>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b04      	cmp	r3, #4
 800adf2:	d104      	bne.n	800adfe <HAL_TIM_IC_Start_IT+0xd2>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2202      	movs	r2, #2
 800adf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800adfc:	e01b      	b.n	800ae36 <HAL_TIM_IC_Start_IT+0x10a>
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b08      	cmp	r3, #8
 800ae02:	d104      	bne.n	800ae0e <HAL_TIM_IC_Start_IT+0xe2>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2202      	movs	r2, #2
 800ae08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae0c:	e013      	b.n	800ae36 <HAL_TIM_IC_Start_IT+0x10a>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b0c      	cmp	r3, #12
 800ae12:	d104      	bne.n	800ae1e <HAL_TIM_IC_Start_IT+0xf2>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2202      	movs	r2, #2
 800ae18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae1c:	e00b      	b.n	800ae36 <HAL_TIM_IC_Start_IT+0x10a>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b10      	cmp	r3, #16
 800ae22:	d104      	bne.n	800ae2e <HAL_TIM_IC_Start_IT+0x102>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2202      	movs	r2, #2
 800ae28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae2c:	e003      	b.n	800ae36 <HAL_TIM_IC_Start_IT+0x10a>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2202      	movs	r2, #2
 800ae32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <HAL_TIM_IC_Start_IT+0x11a>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae44:	e013      	b.n	800ae6e <HAL_TIM_IC_Start_IT+0x142>
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d104      	bne.n	800ae56 <HAL_TIM_IC_Start_IT+0x12a>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae54:	e00b      	b.n	800ae6e <HAL_TIM_IC_Start_IT+0x142>
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	2b08      	cmp	r3, #8
 800ae5a:	d104      	bne.n	800ae66 <HAL_TIM_IC_Start_IT+0x13a>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ae64:	e003      	b.n	800ae6e <HAL_TIM_IC_Start_IT+0x142>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2202      	movs	r2, #2
 800ae6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	2b0c      	cmp	r3, #12
 800ae72:	d841      	bhi.n	800aef8 <HAL_TIM_IC_Start_IT+0x1cc>
 800ae74:	a201      	add	r2, pc, #4	; (adr r2, 800ae7c <HAL_TIM_IC_Start_IT+0x150>)
 800ae76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7a:	bf00      	nop
 800ae7c:	0800aeb1 	.word	0x0800aeb1
 800ae80:	0800aef9 	.word	0x0800aef9
 800ae84:	0800aef9 	.word	0x0800aef9
 800ae88:	0800aef9 	.word	0x0800aef9
 800ae8c:	0800aec3 	.word	0x0800aec3
 800ae90:	0800aef9 	.word	0x0800aef9
 800ae94:	0800aef9 	.word	0x0800aef9
 800ae98:	0800aef9 	.word	0x0800aef9
 800ae9c:	0800aed5 	.word	0x0800aed5
 800aea0:	0800aef9 	.word	0x0800aef9
 800aea4:	0800aef9 	.word	0x0800aef9
 800aea8:	0800aef9 	.word	0x0800aef9
 800aeac:	0800aee7 	.word	0x0800aee7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68da      	ldr	r2, [r3, #12]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f042 0202 	orr.w	r2, r2, #2
 800aebe:	60da      	str	r2, [r3, #12]
      break;
 800aec0:	e01d      	b.n	800aefe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68da      	ldr	r2, [r3, #12]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f042 0204 	orr.w	r2, r2, #4
 800aed0:	60da      	str	r2, [r3, #12]
      break;
 800aed2:	e014      	b.n	800aefe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68da      	ldr	r2, [r3, #12]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f042 0208 	orr.w	r2, r2, #8
 800aee2:	60da      	str	r2, [r3, #12]
      break;
 800aee4:	e00b      	b.n	800aefe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	68da      	ldr	r2, [r3, #12]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f042 0210 	orr.w	r2, r2, #16
 800aef4:	60da      	str	r2, [r3, #12]
      break;
 800aef6:	e002      	b.n	800aefe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	73fb      	strb	r3, [r7, #15]
      break;
 800aefc:	bf00      	nop
  }

  if (status == HAL_OK)
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d14e      	bne.n	800afa2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2201      	movs	r2, #1
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 fa39 	bl	800c384 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a25      	ldr	r2, [pc, #148]	; (800afac <HAL_TIM_IC_Start_IT+0x280>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d022      	beq.n	800af62 <HAL_TIM_IC_Start_IT+0x236>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af24:	d01d      	beq.n	800af62 <HAL_TIM_IC_Start_IT+0x236>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a21      	ldr	r2, [pc, #132]	; (800afb0 <HAL_TIM_IC_Start_IT+0x284>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d018      	beq.n	800af62 <HAL_TIM_IC_Start_IT+0x236>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a1f      	ldr	r2, [pc, #124]	; (800afb4 <HAL_TIM_IC_Start_IT+0x288>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d013      	beq.n	800af62 <HAL_TIM_IC_Start_IT+0x236>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a1e      	ldr	r2, [pc, #120]	; (800afb8 <HAL_TIM_IC_Start_IT+0x28c>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d00e      	beq.n	800af62 <HAL_TIM_IC_Start_IT+0x236>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a1c      	ldr	r2, [pc, #112]	; (800afbc <HAL_TIM_IC_Start_IT+0x290>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d009      	beq.n	800af62 <HAL_TIM_IC_Start_IT+0x236>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a1b      	ldr	r2, [pc, #108]	; (800afc0 <HAL_TIM_IC_Start_IT+0x294>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d004      	beq.n	800af62 <HAL_TIM_IC_Start_IT+0x236>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a19      	ldr	r2, [pc, #100]	; (800afc4 <HAL_TIM_IC_Start_IT+0x298>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d115      	bne.n	800af8e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689a      	ldr	r2, [r3, #8]
 800af68:	4b17      	ldr	r3, [pc, #92]	; (800afc8 <HAL_TIM_IC_Start_IT+0x29c>)
 800af6a:	4013      	ands	r3, r2
 800af6c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2b06      	cmp	r3, #6
 800af72:	d015      	beq.n	800afa0 <HAL_TIM_IC_Start_IT+0x274>
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af7a:	d011      	beq.n	800afa0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f042 0201 	orr.w	r2, r2, #1
 800af8a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af8c:	e008      	b.n	800afa0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f042 0201 	orr.w	r2, r2, #1
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	e000      	b.n	800afa2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afa0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	40010000 	.word	0x40010000
 800afb0:	40000400 	.word	0x40000400
 800afb4:	40000800 	.word	0x40000800
 800afb8:	40000c00 	.word	0x40000c00
 800afbc:	40010400 	.word	0x40010400
 800afc0:	40001800 	.word	0x40001800
 800afc4:	40014000 	.word	0x40014000
 800afc8:	00010007 	.word	0x00010007

0800afcc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afd6:	2300      	movs	r3, #0
 800afd8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2b0c      	cmp	r3, #12
 800afde:	d841      	bhi.n	800b064 <HAL_TIM_IC_Stop_IT+0x98>
 800afe0:	a201      	add	r2, pc, #4	; (adr r2, 800afe8 <HAL_TIM_IC_Stop_IT+0x1c>)
 800afe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe6:	bf00      	nop
 800afe8:	0800b01d 	.word	0x0800b01d
 800afec:	0800b065 	.word	0x0800b065
 800aff0:	0800b065 	.word	0x0800b065
 800aff4:	0800b065 	.word	0x0800b065
 800aff8:	0800b02f 	.word	0x0800b02f
 800affc:	0800b065 	.word	0x0800b065
 800b000:	0800b065 	.word	0x0800b065
 800b004:	0800b065 	.word	0x0800b065
 800b008:	0800b041 	.word	0x0800b041
 800b00c:	0800b065 	.word	0x0800b065
 800b010:	0800b065 	.word	0x0800b065
 800b014:	0800b065 	.word	0x0800b065
 800b018:	0800b053 	.word	0x0800b053
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f022 0202 	bic.w	r2, r2, #2
 800b02a:	60da      	str	r2, [r3, #12]
      break;
 800b02c:	e01d      	b.n	800b06a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68da      	ldr	r2, [r3, #12]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f022 0204 	bic.w	r2, r2, #4
 800b03c:	60da      	str	r2, [r3, #12]
      break;
 800b03e:	e014      	b.n	800b06a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68da      	ldr	r2, [r3, #12]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f022 0208 	bic.w	r2, r2, #8
 800b04e:	60da      	str	r2, [r3, #12]
      break;
 800b050:	e00b      	b.n	800b06a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68da      	ldr	r2, [r3, #12]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f022 0210 	bic.w	r2, r2, #16
 800b060:	60da      	str	r2, [r3, #12]
      break;
 800b062:	e002      	b.n	800b06a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	73fb      	strb	r3, [r7, #15]
      break;
 800b068:	bf00      	nop
  }

  if (status == HAL_OK)
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d166      	bne.n	800b13e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2200      	movs	r2, #0
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	4618      	mov	r0, r3
 800b07a:	f001 f983 	bl	800c384 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	6a1a      	ldr	r2, [r3, #32]
 800b084:	f241 1311 	movw	r3, #4369	; 0x1111
 800b088:	4013      	ands	r3, r2
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10f      	bne.n	800b0ae <HAL_TIM_IC_Stop_IT+0xe2>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	6a1a      	ldr	r2, [r3, #32]
 800b094:	f240 4344 	movw	r3, #1092	; 0x444
 800b098:	4013      	ands	r3, r2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d107      	bne.n	800b0ae <HAL_TIM_IC_Stop_IT+0xe2>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f022 0201 	bic.w	r2, r2, #1
 800b0ac:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d104      	bne.n	800b0be <HAL_TIM_IC_Stop_IT+0xf2>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0bc:	e023      	b.n	800b106 <HAL_TIM_IC_Stop_IT+0x13a>
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d104      	bne.n	800b0ce <HAL_TIM_IC_Stop_IT+0x102>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0cc:	e01b      	b.n	800b106 <HAL_TIM_IC_Stop_IT+0x13a>
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2b08      	cmp	r3, #8
 800b0d2:	d104      	bne.n	800b0de <HAL_TIM_IC_Stop_IT+0x112>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0dc:	e013      	b.n	800b106 <HAL_TIM_IC_Stop_IT+0x13a>
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	2b0c      	cmp	r3, #12
 800b0e2:	d104      	bne.n	800b0ee <HAL_TIM_IC_Stop_IT+0x122>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b0ec:	e00b      	b.n	800b106 <HAL_TIM_IC_Stop_IT+0x13a>
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	2b10      	cmp	r3, #16
 800b0f2:	d104      	bne.n	800b0fe <HAL_TIM_IC_Stop_IT+0x132>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0fc:	e003      	b.n	800b106 <HAL_TIM_IC_Stop_IT+0x13a>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d104      	bne.n	800b116 <HAL_TIM_IC_Stop_IT+0x14a>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b114:	e013      	b.n	800b13e <HAL_TIM_IC_Stop_IT+0x172>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d104      	bne.n	800b126 <HAL_TIM_IC_Stop_IT+0x15a>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b124:	e00b      	b.n	800b13e <HAL_TIM_IC_Stop_IT+0x172>
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2b08      	cmp	r3, #8
 800b12a:	d104      	bne.n	800b136 <HAL_TIM_IC_Stop_IT+0x16a>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b134:	e003      	b.n	800b13e <HAL_TIM_IC_Stop_IT+0x172>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	f003 0302 	and.w	r3, r3, #2
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d122      	bne.n	800b1a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	f003 0302 	and.w	r3, r3, #2
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d11b      	bne.n	800b1a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f06f 0202 	mvn.w	r2, #2
 800b174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	f003 0303 	and.w	r3, r3, #3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7f6 ff52 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 800b190:	e005      	b.n	800b19e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fba0 	bl	800b8d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fba7 	bl	800b8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	f003 0304 	and.w	r3, r3, #4
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	d122      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	d11b      	bne.n	800b1f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f06f 0204 	mvn.w	r2, #4
 800b1c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2202      	movs	r2, #2
 800b1ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7f6 ff28 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 800b1e4:	e005      	b.n	800b1f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fb76 	bl	800b8d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fb7d 	bl	800b8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f003 0308 	and.w	r3, r3, #8
 800b202:	2b08      	cmp	r3, #8
 800b204:	d122      	bne.n	800b24c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f003 0308 	and.w	r3, r3, #8
 800b210:	2b08      	cmp	r3, #8
 800b212:	d11b      	bne.n	800b24c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f06f 0208 	mvn.w	r2, #8
 800b21c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2204      	movs	r2, #4
 800b222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	69db      	ldr	r3, [r3, #28]
 800b22a:	f003 0303 	and.w	r3, r3, #3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7f6 fefe 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 800b238:	e005      	b.n	800b246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fb4c 	bl	800b8d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fb53 	bl	800b8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	f003 0310 	and.w	r3, r3, #16
 800b256:	2b10      	cmp	r3, #16
 800b258:	d122      	bne.n	800b2a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	f003 0310 	and.w	r3, r3, #16
 800b264:	2b10      	cmp	r3, #16
 800b266:	d11b      	bne.n	800b2a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f06f 0210 	mvn.w	r2, #16
 800b270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2208      	movs	r2, #8
 800b276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b282:	2b00      	cmp	r3, #0
 800b284:	d003      	beq.n	800b28e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7f6 fed4 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 800b28c:	e005      	b.n	800b29a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fb22 	bl	800b8d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fb29 	bl	800b8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d10e      	bne.n	800b2cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d107      	bne.n	800b2cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f06f 0201 	mvn.w	r2, #1
 800b2c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7f6 ff2e 	bl	8002128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d6:	2b80      	cmp	r3, #128	; 0x80
 800b2d8:	d10e      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2e4:	2b80      	cmp	r3, #128	; 0x80
 800b2e6:	d107      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f001 f904 	bl	800c500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b306:	d10e      	bne.n	800b326 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b312:	2b80      	cmp	r3, #128	; 0x80
 800b314:	d107      	bne.n	800b326 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b31e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f001 f8f7 	bl	800c514 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b330:	2b40      	cmp	r3, #64	; 0x40
 800b332:	d10e      	bne.n	800b352 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b33e:	2b40      	cmp	r3, #64	; 0x40
 800b340:	d107      	bne.n	800b352 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b34a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fad7 	bl	800b900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	f003 0320 	and.w	r3, r3, #32
 800b35c:	2b20      	cmp	r3, #32
 800b35e:	d10e      	bne.n	800b37e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	f003 0320 	and.w	r3, r3, #32
 800b36a:	2b20      	cmp	r3, #32
 800b36c:	d107      	bne.n	800b37e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f06f 0220 	mvn.w	r2, #32
 800b376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f001 f8b7 	bl	800c4ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b37e:	bf00      	nop
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b086      	sub	sp, #24
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	60f8      	str	r0, [r7, #12]
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d101      	bne.n	800b3a4 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e088      	b.n	800b4b6 <HAL_TIM_IC_ConfigChannel+0x130>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d11b      	bne.n	800b3ea <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6818      	ldr	r0, [r3, #0]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	6819      	ldr	r1, [r3, #0]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	685a      	ldr	r2, [r3, #4]
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	f000 fe17 	bl	800bff4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	699a      	ldr	r2, [r3, #24]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f022 020c 	bic.w	r2, r2, #12
 800b3d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6999      	ldr	r1, [r3, #24]
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	430a      	orrs	r2, r1
 800b3e6:	619a      	str	r2, [r3, #24]
 800b3e8:	e060      	b.n	800b4ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	d11c      	bne.n	800b42a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6818      	ldr	r0, [r3, #0]
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	6819      	ldr	r1, [r3, #0]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	f000 fe9b 	bl	800c13a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	699a      	ldr	r2, [r3, #24]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b412:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6999      	ldr	r1, [r3, #24]
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	021a      	lsls	r2, r3, #8
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	430a      	orrs	r2, r1
 800b426:	619a      	str	r2, [r3, #24]
 800b428:	e040      	b.n	800b4ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2b08      	cmp	r3, #8
 800b42e:	d11b      	bne.n	800b468 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6818      	ldr	r0, [r3, #0]
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	6819      	ldr	r1, [r3, #0]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	f000 fee8 	bl	800c214 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	69da      	ldr	r2, [r3, #28]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f022 020c 	bic.w	r2, r2, #12
 800b452:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	69d9      	ldr	r1, [r3, #28]
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	689a      	ldr	r2, [r3, #8]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	430a      	orrs	r2, r1
 800b464:	61da      	str	r2, [r3, #28]
 800b466:	e021      	b.n	800b4ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b0c      	cmp	r3, #12
 800b46c:	d11c      	bne.n	800b4a8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6818      	ldr	r0, [r3, #0]
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	6819      	ldr	r1, [r3, #0]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	f000 ff05 	bl	800c28c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	69da      	ldr	r2, [r3, #28]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b490:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	69d9      	ldr	r1, [r3, #28]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	021a      	lsls	r2, r3, #8
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	430a      	orrs	r2, r1
 800b4a4:	61da      	str	r2, [r3, #28]
 800b4a6:	e001      	b.n	800b4ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3718      	adds	r7, #24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
	...

0800b4c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d101      	bne.n	800b4de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b4da:	2302      	movs	r3, #2
 800b4dc:	e0ff      	b.n	800b6de <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2b14      	cmp	r3, #20
 800b4ea:	f200 80f0 	bhi.w	800b6ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b4ee:	a201      	add	r2, pc, #4	; (adr r2, 800b4f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f4:	0800b549 	.word	0x0800b549
 800b4f8:	0800b6cf 	.word	0x0800b6cf
 800b4fc:	0800b6cf 	.word	0x0800b6cf
 800b500:	0800b6cf 	.word	0x0800b6cf
 800b504:	0800b589 	.word	0x0800b589
 800b508:	0800b6cf 	.word	0x0800b6cf
 800b50c:	0800b6cf 	.word	0x0800b6cf
 800b510:	0800b6cf 	.word	0x0800b6cf
 800b514:	0800b5cb 	.word	0x0800b5cb
 800b518:	0800b6cf 	.word	0x0800b6cf
 800b51c:	0800b6cf 	.word	0x0800b6cf
 800b520:	0800b6cf 	.word	0x0800b6cf
 800b524:	0800b60b 	.word	0x0800b60b
 800b528:	0800b6cf 	.word	0x0800b6cf
 800b52c:	0800b6cf 	.word	0x0800b6cf
 800b530:	0800b6cf 	.word	0x0800b6cf
 800b534:	0800b64d 	.word	0x0800b64d
 800b538:	0800b6cf 	.word	0x0800b6cf
 800b53c:	0800b6cf 	.word	0x0800b6cf
 800b540:	0800b6cf 	.word	0x0800b6cf
 800b544:	0800b68d 	.word	0x0800b68d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68b9      	ldr	r1, [r7, #8]
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 fa7a 	bl	800ba48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	699a      	ldr	r2, [r3, #24]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f042 0208 	orr.w	r2, r2, #8
 800b562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	699a      	ldr	r2, [r3, #24]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f022 0204 	bic.w	r2, r2, #4
 800b572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6999      	ldr	r1, [r3, #24]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	691a      	ldr	r2, [r3, #16]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	619a      	str	r2, [r3, #24]
      break;
 800b586:	e0a5      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68b9      	ldr	r1, [r7, #8]
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 faea 	bl	800bb68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	699a      	ldr	r2, [r3, #24]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	699a      	ldr	r2, [r3, #24]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6999      	ldr	r1, [r3, #24]
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	021a      	lsls	r2, r3, #8
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	430a      	orrs	r2, r1
 800b5c6:	619a      	str	r2, [r3, #24]
      break;
 800b5c8:	e084      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68b9      	ldr	r1, [r7, #8]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f000 fb53 	bl	800bc7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	69da      	ldr	r2, [r3, #28]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f042 0208 	orr.w	r2, r2, #8
 800b5e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	69da      	ldr	r2, [r3, #28]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f022 0204 	bic.w	r2, r2, #4
 800b5f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	69d9      	ldr	r1, [r3, #28]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	691a      	ldr	r2, [r3, #16]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	430a      	orrs	r2, r1
 800b606:	61da      	str	r2, [r3, #28]
      break;
 800b608:	e064      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68b9      	ldr	r1, [r7, #8]
 800b610:	4618      	mov	r0, r3
 800b612:	f000 fbbb 	bl	800bd8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	69da      	ldr	r2, [r3, #28]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	69da      	ldr	r2, [r3, #28]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	69d9      	ldr	r1, [r3, #28]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	021a      	lsls	r2, r3, #8
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	430a      	orrs	r2, r1
 800b648:	61da      	str	r2, [r3, #28]
      break;
 800b64a:	e043      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68b9      	ldr	r1, [r7, #8]
 800b652:	4618      	mov	r0, r3
 800b654:	f000 fc04 	bl	800be60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f042 0208 	orr.w	r2, r2, #8
 800b666:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f022 0204 	bic.w	r2, r2, #4
 800b676:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	691a      	ldr	r2, [r3, #16]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	430a      	orrs	r2, r1
 800b688:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b68a:	e023      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	68b9      	ldr	r1, [r7, #8]
 800b692:	4618      	mov	r0, r3
 800b694:	f000 fc48 	bl	800bf28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	021a      	lsls	r2, r3, #8
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	430a      	orrs	r2, r1
 800b6ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b6cc:	e002      	b.n	800b6d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b6d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop

0800b6e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d101      	bne.n	800b704 <HAL_TIM_ConfigClockSource+0x1c>
 800b700:	2302      	movs	r3, #2
 800b702:	e0dc      	b.n	800b8be <HAL_TIM_ConfigClockSource+0x1d6>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2202      	movs	r2, #2
 800b710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	4b6a      	ldr	r3, [pc, #424]	; (800b8c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b720:	4013      	ands	r3, r2
 800b722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b72a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a64      	ldr	r2, [pc, #400]	; (800b8cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	f000 80a9 	beq.w	800b892 <HAL_TIM_ConfigClockSource+0x1aa>
 800b740:	4a62      	ldr	r2, [pc, #392]	; (800b8cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b742:	4293      	cmp	r3, r2
 800b744:	f200 80ae 	bhi.w	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b748:	4a61      	ldr	r2, [pc, #388]	; (800b8d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	f000 80a1 	beq.w	800b892 <HAL_TIM_ConfigClockSource+0x1aa>
 800b750:	4a5f      	ldr	r2, [pc, #380]	; (800b8d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b752:	4293      	cmp	r3, r2
 800b754:	f200 80a6 	bhi.w	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b758:	4a5e      	ldr	r2, [pc, #376]	; (800b8d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	f000 8099 	beq.w	800b892 <HAL_TIM_ConfigClockSource+0x1aa>
 800b760:	4a5c      	ldr	r2, [pc, #368]	; (800b8d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b762:	4293      	cmp	r3, r2
 800b764:	f200 809e 	bhi.w	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b768:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b76c:	f000 8091 	beq.w	800b892 <HAL_TIM_ConfigClockSource+0x1aa>
 800b770:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b774:	f200 8096 	bhi.w	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b77c:	f000 8089 	beq.w	800b892 <HAL_TIM_ConfigClockSource+0x1aa>
 800b780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b784:	f200 808e 	bhi.w	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b78c:	d03e      	beq.n	800b80c <HAL_TIM_ConfigClockSource+0x124>
 800b78e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b792:	f200 8087 	bhi.w	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b79a:	f000 8086 	beq.w	800b8aa <HAL_TIM_ConfigClockSource+0x1c2>
 800b79e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7a2:	d87f      	bhi.n	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7a4:	2b70      	cmp	r3, #112	; 0x70
 800b7a6:	d01a      	beq.n	800b7de <HAL_TIM_ConfigClockSource+0xf6>
 800b7a8:	2b70      	cmp	r3, #112	; 0x70
 800b7aa:	d87b      	bhi.n	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7ac:	2b60      	cmp	r3, #96	; 0x60
 800b7ae:	d050      	beq.n	800b852 <HAL_TIM_ConfigClockSource+0x16a>
 800b7b0:	2b60      	cmp	r3, #96	; 0x60
 800b7b2:	d877      	bhi.n	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7b4:	2b50      	cmp	r3, #80	; 0x50
 800b7b6:	d03c      	beq.n	800b832 <HAL_TIM_ConfigClockSource+0x14a>
 800b7b8:	2b50      	cmp	r3, #80	; 0x50
 800b7ba:	d873      	bhi.n	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7bc:	2b40      	cmp	r3, #64	; 0x40
 800b7be:	d058      	beq.n	800b872 <HAL_TIM_ConfigClockSource+0x18a>
 800b7c0:	2b40      	cmp	r3, #64	; 0x40
 800b7c2:	d86f      	bhi.n	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7c4:	2b30      	cmp	r3, #48	; 0x30
 800b7c6:	d064      	beq.n	800b892 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7c8:	2b30      	cmp	r3, #48	; 0x30
 800b7ca:	d86b      	bhi.n	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7cc:	2b20      	cmp	r3, #32
 800b7ce:	d060      	beq.n	800b892 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7d0:	2b20      	cmp	r3, #32
 800b7d2:	d867      	bhi.n	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d05c      	beq.n	800b892 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7d8:	2b10      	cmp	r3, #16
 800b7da:	d05a      	beq.n	800b892 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7dc:	e062      	b.n	800b8a4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6818      	ldr	r0, [r3, #0]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	6899      	ldr	r1, [r3, #8]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	685a      	ldr	r2, [r3, #4]
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	f000 fda9 	bl	800c344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	609a      	str	r2, [r3, #8]
      break;
 800b80a:	e04f      	b.n	800b8ac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6818      	ldr	r0, [r3, #0]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	6899      	ldr	r1, [r3, #8]
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	f000 fd92 	bl	800c344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	689a      	ldr	r2, [r3, #8]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b82e:	609a      	str	r2, [r3, #8]
      break;
 800b830:	e03c      	b.n	800b8ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6818      	ldr	r0, [r3, #0]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	6859      	ldr	r1, [r3, #4]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	461a      	mov	r2, r3
 800b840:	f000 fc4c 	bl	800c0dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2150      	movs	r1, #80	; 0x50
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 fd5c 	bl	800c308 <TIM_ITRx_SetConfig>
      break;
 800b850:	e02c      	b.n	800b8ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6818      	ldr	r0, [r3, #0]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	6859      	ldr	r1, [r3, #4]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	461a      	mov	r2, r3
 800b860:	f000 fca8 	bl	800c1b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2160      	movs	r1, #96	; 0x60
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 fd4c 	bl	800c308 <TIM_ITRx_SetConfig>
      break;
 800b870:	e01c      	b.n	800b8ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6818      	ldr	r0, [r3, #0]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	6859      	ldr	r1, [r3, #4]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	461a      	mov	r2, r3
 800b880:	f000 fc2c 	bl	800c0dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2140      	movs	r1, #64	; 0x40
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fd3c 	bl	800c308 <TIM_ITRx_SetConfig>
      break;
 800b890:	e00c      	b.n	800b8ac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4619      	mov	r1, r3
 800b89c:	4610      	mov	r0, r2
 800b89e:	f000 fd33 	bl	800c308 <TIM_ITRx_SetConfig>
      break;
 800b8a2:	e003      	b.n	800b8ac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b8a8:	e000      	b.n	800b8ac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b8aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	ffceff88 	.word	0xffceff88
 800b8cc:	00100040 	.word	0x00100040
 800b8d0:	00100030 	.word	0x00100030
 800b8d4:	00100020 	.word	0x00100020

0800b8d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8f4:	bf00      	nop
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b908:	bf00      	nop
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a40      	ldr	r2, [pc, #256]	; (800ba28 <TIM_Base_SetConfig+0x114>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d013      	beq.n	800b954 <TIM_Base_SetConfig+0x40>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b932:	d00f      	beq.n	800b954 <TIM_Base_SetConfig+0x40>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a3d      	ldr	r2, [pc, #244]	; (800ba2c <TIM_Base_SetConfig+0x118>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d00b      	beq.n	800b954 <TIM_Base_SetConfig+0x40>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a3c      	ldr	r2, [pc, #240]	; (800ba30 <TIM_Base_SetConfig+0x11c>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d007      	beq.n	800b954 <TIM_Base_SetConfig+0x40>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a3b      	ldr	r2, [pc, #236]	; (800ba34 <TIM_Base_SetConfig+0x120>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d003      	beq.n	800b954 <TIM_Base_SetConfig+0x40>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a3a      	ldr	r2, [pc, #232]	; (800ba38 <TIM_Base_SetConfig+0x124>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d108      	bne.n	800b966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b95a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	4313      	orrs	r3, r2
 800b964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a2f      	ldr	r2, [pc, #188]	; (800ba28 <TIM_Base_SetConfig+0x114>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d01f      	beq.n	800b9ae <TIM_Base_SetConfig+0x9a>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b974:	d01b      	beq.n	800b9ae <TIM_Base_SetConfig+0x9a>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a2c      	ldr	r2, [pc, #176]	; (800ba2c <TIM_Base_SetConfig+0x118>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d017      	beq.n	800b9ae <TIM_Base_SetConfig+0x9a>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4a2b      	ldr	r2, [pc, #172]	; (800ba30 <TIM_Base_SetConfig+0x11c>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d013      	beq.n	800b9ae <TIM_Base_SetConfig+0x9a>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4a2a      	ldr	r2, [pc, #168]	; (800ba34 <TIM_Base_SetConfig+0x120>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d00f      	beq.n	800b9ae <TIM_Base_SetConfig+0x9a>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a29      	ldr	r2, [pc, #164]	; (800ba38 <TIM_Base_SetConfig+0x124>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d00b      	beq.n	800b9ae <TIM_Base_SetConfig+0x9a>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a28      	ldr	r2, [pc, #160]	; (800ba3c <TIM_Base_SetConfig+0x128>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d007      	beq.n	800b9ae <TIM_Base_SetConfig+0x9a>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a27      	ldr	r2, [pc, #156]	; (800ba40 <TIM_Base_SetConfig+0x12c>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d003      	beq.n	800b9ae <TIM_Base_SetConfig+0x9a>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a26      	ldr	r2, [pc, #152]	; (800ba44 <TIM_Base_SetConfig+0x130>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d108      	bne.n	800b9c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4a10      	ldr	r2, [pc, #64]	; (800ba28 <TIM_Base_SetConfig+0x114>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d00f      	beq.n	800ba0c <TIM_Base_SetConfig+0xf8>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a12      	ldr	r2, [pc, #72]	; (800ba38 <TIM_Base_SetConfig+0x124>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d00b      	beq.n	800ba0c <TIM_Base_SetConfig+0xf8>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a11      	ldr	r2, [pc, #68]	; (800ba3c <TIM_Base_SetConfig+0x128>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d007      	beq.n	800ba0c <TIM_Base_SetConfig+0xf8>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a10      	ldr	r2, [pc, #64]	; (800ba40 <TIM_Base_SetConfig+0x12c>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d003      	beq.n	800ba0c <TIM_Base_SetConfig+0xf8>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a0f      	ldr	r2, [pc, #60]	; (800ba44 <TIM_Base_SetConfig+0x130>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d103      	bne.n	800ba14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	691a      	ldr	r2, [r3, #16]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	615a      	str	r2, [r3, #20]
}
 800ba1a:	bf00      	nop
 800ba1c:	3714      	adds	r7, #20
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	40010000 	.word	0x40010000
 800ba2c:	40000400 	.word	0x40000400
 800ba30:	40000800 	.word	0x40000800
 800ba34:	40000c00 	.word	0x40000c00
 800ba38:	40010400 	.word	0x40010400
 800ba3c:	40014000 	.word	0x40014000
 800ba40:	40014400 	.word	0x40014400
 800ba44:	40014800 	.word	0x40014800

0800ba48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a1b      	ldr	r3, [r3, #32]
 800ba56:	f023 0201 	bic.w	r2, r3, #1
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	4b37      	ldr	r3, [pc, #220]	; (800bb50 <TIM_OC1_SetConfig+0x108>)
 800ba74:	4013      	ands	r3, r2
 800ba76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f023 0303 	bic.w	r3, r3, #3
 800ba7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f023 0302 	bic.w	r3, r3, #2
 800ba90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a2d      	ldr	r2, [pc, #180]	; (800bb54 <TIM_OC1_SetConfig+0x10c>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d00f      	beq.n	800bac4 <TIM_OC1_SetConfig+0x7c>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a2c      	ldr	r2, [pc, #176]	; (800bb58 <TIM_OC1_SetConfig+0x110>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d00b      	beq.n	800bac4 <TIM_OC1_SetConfig+0x7c>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a2b      	ldr	r2, [pc, #172]	; (800bb5c <TIM_OC1_SetConfig+0x114>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d007      	beq.n	800bac4 <TIM_OC1_SetConfig+0x7c>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a2a      	ldr	r2, [pc, #168]	; (800bb60 <TIM_OC1_SetConfig+0x118>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d003      	beq.n	800bac4 <TIM_OC1_SetConfig+0x7c>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a29      	ldr	r2, [pc, #164]	; (800bb64 <TIM_OC1_SetConfig+0x11c>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d10c      	bne.n	800bade <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	f023 0308 	bic.w	r3, r3, #8
 800baca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	f023 0304 	bic.w	r3, r3, #4
 800badc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a1c      	ldr	r2, [pc, #112]	; (800bb54 <TIM_OC1_SetConfig+0x10c>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d00f      	beq.n	800bb06 <TIM_OC1_SetConfig+0xbe>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a1b      	ldr	r2, [pc, #108]	; (800bb58 <TIM_OC1_SetConfig+0x110>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d00b      	beq.n	800bb06 <TIM_OC1_SetConfig+0xbe>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a1a      	ldr	r2, [pc, #104]	; (800bb5c <TIM_OC1_SetConfig+0x114>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d007      	beq.n	800bb06 <TIM_OC1_SetConfig+0xbe>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a19      	ldr	r2, [pc, #100]	; (800bb60 <TIM_OC1_SetConfig+0x118>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d003      	beq.n	800bb06 <TIM_OC1_SetConfig+0xbe>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a18      	ldr	r2, [pc, #96]	; (800bb64 <TIM_OC1_SetConfig+0x11c>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d111      	bne.n	800bb2a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	695b      	ldr	r3, [r3, #20]
 800bb1a:	693a      	ldr	r2, [r7, #16]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	68fa      	ldr	r2, [r7, #12]
 800bb34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	685a      	ldr	r2, [r3, #4]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	697a      	ldr	r2, [r7, #20]
 800bb42:	621a      	str	r2, [r3, #32]
}
 800bb44:	bf00      	nop
 800bb46:	371c      	adds	r7, #28
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	fffeff8f 	.word	0xfffeff8f
 800bb54:	40010000 	.word	0x40010000
 800bb58:	40010400 	.word	0x40010400
 800bb5c:	40014000 	.word	0x40014000
 800bb60:	40014400 	.word	0x40014400
 800bb64:	40014800 	.word	0x40014800

0800bb68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	f023 0210 	bic.w	r2, r3, #16
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	4b34      	ldr	r3, [pc, #208]	; (800bc64 <TIM_OC2_SetConfig+0xfc>)
 800bb94:	4013      	ands	r3, r2
 800bb96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	021b      	lsls	r3, r3, #8
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	f023 0320 	bic.w	r3, r3, #32
 800bbb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	011b      	lsls	r3, r3, #4
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4a29      	ldr	r2, [pc, #164]	; (800bc68 <TIM_OC2_SetConfig+0x100>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d003      	beq.n	800bbd0 <TIM_OC2_SetConfig+0x68>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4a28      	ldr	r2, [pc, #160]	; (800bc6c <TIM_OC2_SetConfig+0x104>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d10d      	bne.n	800bbec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	011b      	lsls	r3, r3, #4
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a1e      	ldr	r2, [pc, #120]	; (800bc68 <TIM_OC2_SetConfig+0x100>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d00f      	beq.n	800bc14 <TIM_OC2_SetConfig+0xac>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a1d      	ldr	r2, [pc, #116]	; (800bc6c <TIM_OC2_SetConfig+0x104>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d00b      	beq.n	800bc14 <TIM_OC2_SetConfig+0xac>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a1c      	ldr	r2, [pc, #112]	; (800bc70 <TIM_OC2_SetConfig+0x108>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d007      	beq.n	800bc14 <TIM_OC2_SetConfig+0xac>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a1b      	ldr	r2, [pc, #108]	; (800bc74 <TIM_OC2_SetConfig+0x10c>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d003      	beq.n	800bc14 <TIM_OC2_SetConfig+0xac>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a1a      	ldr	r2, [pc, #104]	; (800bc78 <TIM_OC2_SetConfig+0x110>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d113      	bne.n	800bc3c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	695b      	ldr	r3, [r3, #20]
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	693a      	ldr	r2, [r7, #16]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	621a      	str	r2, [r3, #32]
}
 800bc56:	bf00      	nop
 800bc58:	371c      	adds	r7, #28
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	feff8fff 	.word	0xfeff8fff
 800bc68:	40010000 	.word	0x40010000
 800bc6c:	40010400 	.word	0x40010400
 800bc70:	40014000 	.word	0x40014000
 800bc74:	40014400 	.word	0x40014400
 800bc78:	40014800 	.word	0x40014800

0800bc7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	69db      	ldr	r3, [r3, #28]
 800bca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	4b33      	ldr	r3, [pc, #204]	; (800bd74 <TIM_OC3_SetConfig+0xf8>)
 800bca8:	4013      	ands	r3, r2
 800bcaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f023 0303 	bic.w	r3, r3, #3
 800bcb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bcc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	021b      	lsls	r3, r3, #8
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a28      	ldr	r2, [pc, #160]	; (800bd78 <TIM_OC3_SetConfig+0xfc>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d003      	beq.n	800bce2 <TIM_OC3_SetConfig+0x66>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a27      	ldr	r2, [pc, #156]	; (800bd7c <TIM_OC3_SetConfig+0x100>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d10d      	bne.n	800bcfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	021b      	lsls	r3, r3, #8
 800bcf0:	697a      	ldr	r2, [r7, #20]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bcfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a1d      	ldr	r2, [pc, #116]	; (800bd78 <TIM_OC3_SetConfig+0xfc>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d00f      	beq.n	800bd26 <TIM_OC3_SetConfig+0xaa>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a1c      	ldr	r2, [pc, #112]	; (800bd7c <TIM_OC3_SetConfig+0x100>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d00b      	beq.n	800bd26 <TIM_OC3_SetConfig+0xaa>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4a1b      	ldr	r2, [pc, #108]	; (800bd80 <TIM_OC3_SetConfig+0x104>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d007      	beq.n	800bd26 <TIM_OC3_SetConfig+0xaa>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4a1a      	ldr	r2, [pc, #104]	; (800bd84 <TIM_OC3_SetConfig+0x108>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d003      	beq.n	800bd26 <TIM_OC3_SetConfig+0xaa>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a19      	ldr	r2, [pc, #100]	; (800bd88 <TIM_OC3_SetConfig+0x10c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d113      	bne.n	800bd4e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	011b      	lsls	r3, r3, #4
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	011b      	lsls	r3, r3, #4
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	693a      	ldr	r2, [r7, #16]
 800bd52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	685a      	ldr	r2, [r3, #4]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	697a      	ldr	r2, [r7, #20]
 800bd66:	621a      	str	r2, [r3, #32]
}
 800bd68:	bf00      	nop
 800bd6a:	371c      	adds	r7, #28
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	fffeff8f 	.word	0xfffeff8f
 800bd78:	40010000 	.word	0x40010000
 800bd7c:	40010400 	.word	0x40010400
 800bd80:	40014000 	.word	0x40014000
 800bd84:	40014400 	.word	0x40014400
 800bd88:	40014800 	.word	0x40014800

0800bd8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b087      	sub	sp, #28
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a1b      	ldr	r3, [r3, #32]
 800bd9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	69db      	ldr	r3, [r3, #28]
 800bdb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	4b24      	ldr	r3, [pc, #144]	; (800be48 <TIM_OC4_SetConfig+0xbc>)
 800bdb8:	4013      	ands	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	021b      	lsls	r3, r3, #8
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bdd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	031b      	lsls	r3, r3, #12
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a19      	ldr	r2, [pc, #100]	; (800be4c <TIM_OC4_SetConfig+0xc0>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d00f      	beq.n	800be0c <TIM_OC4_SetConfig+0x80>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a18      	ldr	r2, [pc, #96]	; (800be50 <TIM_OC4_SetConfig+0xc4>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d00b      	beq.n	800be0c <TIM_OC4_SetConfig+0x80>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a17      	ldr	r2, [pc, #92]	; (800be54 <TIM_OC4_SetConfig+0xc8>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d007      	beq.n	800be0c <TIM_OC4_SetConfig+0x80>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a16      	ldr	r2, [pc, #88]	; (800be58 <TIM_OC4_SetConfig+0xcc>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d003      	beq.n	800be0c <TIM_OC4_SetConfig+0x80>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a15      	ldr	r2, [pc, #84]	; (800be5c <TIM_OC4_SetConfig+0xd0>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d109      	bne.n	800be20 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	019b      	lsls	r3, r3, #6
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	685a      	ldr	r2, [r3, #4]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	621a      	str	r2, [r3, #32]
}
 800be3a:	bf00      	nop
 800be3c:	371c      	adds	r7, #28
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	feff8fff 	.word	0xfeff8fff
 800be4c:	40010000 	.word	0x40010000
 800be50:	40010400 	.word	0x40010400
 800be54:	40014000 	.word	0x40014000
 800be58:	40014400 	.word	0x40014400
 800be5c:	40014800 	.word	0x40014800

0800be60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800be60:	b480      	push	{r7}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a1b      	ldr	r3, [r3, #32]
 800be6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a1b      	ldr	r3, [r3, #32]
 800be7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	4b21      	ldr	r3, [pc, #132]	; (800bf10 <TIM_OC5_SetConfig+0xb0>)
 800be8c:	4013      	ands	r3, r2
 800be8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	4313      	orrs	r3, r2
 800be98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bea0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	041b      	lsls	r3, r3, #16
 800bea8:	693a      	ldr	r2, [r7, #16]
 800beaa:	4313      	orrs	r3, r2
 800beac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a18      	ldr	r2, [pc, #96]	; (800bf14 <TIM_OC5_SetConfig+0xb4>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d00f      	beq.n	800bed6 <TIM_OC5_SetConfig+0x76>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a17      	ldr	r2, [pc, #92]	; (800bf18 <TIM_OC5_SetConfig+0xb8>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d00b      	beq.n	800bed6 <TIM_OC5_SetConfig+0x76>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a16      	ldr	r2, [pc, #88]	; (800bf1c <TIM_OC5_SetConfig+0xbc>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d007      	beq.n	800bed6 <TIM_OC5_SetConfig+0x76>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a15      	ldr	r2, [pc, #84]	; (800bf20 <TIM_OC5_SetConfig+0xc0>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d003      	beq.n	800bed6 <TIM_OC5_SetConfig+0x76>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a14      	ldr	r2, [pc, #80]	; (800bf24 <TIM_OC5_SetConfig+0xc4>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d109      	bne.n	800beea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bedc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	695b      	ldr	r3, [r3, #20]
 800bee2:	021b      	lsls	r3, r3, #8
 800bee4:	697a      	ldr	r2, [r7, #20]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	697a      	ldr	r2, [r7, #20]
 800beee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	685a      	ldr	r2, [r3, #4]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	621a      	str	r2, [r3, #32]
}
 800bf04:	bf00      	nop
 800bf06:	371c      	adds	r7, #28
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr
 800bf10:	fffeff8f 	.word	0xfffeff8f
 800bf14:	40010000 	.word	0x40010000
 800bf18:	40010400 	.word	0x40010400
 800bf1c:	40014000 	.word	0x40014000
 800bf20:	40014400 	.word	0x40014400
 800bf24:	40014800 	.word	0x40014800

0800bf28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	4b22      	ldr	r3, [pc, #136]	; (800bfdc <TIM_OC6_SetConfig+0xb4>)
 800bf54:	4013      	ands	r3, r2
 800bf56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	021b      	lsls	r3, r3, #8
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	051b      	lsls	r3, r3, #20
 800bf72:	693a      	ldr	r2, [r7, #16]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4a19      	ldr	r2, [pc, #100]	; (800bfe0 <TIM_OC6_SetConfig+0xb8>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d00f      	beq.n	800bfa0 <TIM_OC6_SetConfig+0x78>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a18      	ldr	r2, [pc, #96]	; (800bfe4 <TIM_OC6_SetConfig+0xbc>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d00b      	beq.n	800bfa0 <TIM_OC6_SetConfig+0x78>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a17      	ldr	r2, [pc, #92]	; (800bfe8 <TIM_OC6_SetConfig+0xc0>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d007      	beq.n	800bfa0 <TIM_OC6_SetConfig+0x78>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a16      	ldr	r2, [pc, #88]	; (800bfec <TIM_OC6_SetConfig+0xc4>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d003      	beq.n	800bfa0 <TIM_OC6_SetConfig+0x78>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a15      	ldr	r2, [pc, #84]	; (800bff0 <TIM_OC6_SetConfig+0xc8>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d109      	bne.n	800bfb4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bfa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	695b      	ldr	r3, [r3, #20]
 800bfac:	029b      	lsls	r3, r3, #10
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	621a      	str	r2, [r3, #32]
}
 800bfce:	bf00      	nop
 800bfd0:	371c      	adds	r7, #28
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	feff8fff 	.word	0xfeff8fff
 800bfe0:	40010000 	.word	0x40010000
 800bfe4:	40010400 	.word	0x40010400
 800bfe8:	40014000 	.word	0x40014000
 800bfec:	40014400 	.word	0x40014400
 800bff0:	40014800 	.word	0x40014800

0800bff4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b087      	sub	sp, #28
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6a1b      	ldr	r3, [r3, #32]
 800c006:	f023 0201 	bic.w	r2, r3, #1
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	699b      	ldr	r3, [r3, #24]
 800c012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	4a28      	ldr	r2, [pc, #160]	; (800c0c0 <TIM_TI1_SetConfig+0xcc>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d01b      	beq.n	800c05a <TIM_TI1_SetConfig+0x66>
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c028:	d017      	beq.n	800c05a <TIM_TI1_SetConfig+0x66>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	4a25      	ldr	r2, [pc, #148]	; (800c0c4 <TIM_TI1_SetConfig+0xd0>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d013      	beq.n	800c05a <TIM_TI1_SetConfig+0x66>
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	4a24      	ldr	r2, [pc, #144]	; (800c0c8 <TIM_TI1_SetConfig+0xd4>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d00f      	beq.n	800c05a <TIM_TI1_SetConfig+0x66>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	4a23      	ldr	r2, [pc, #140]	; (800c0cc <TIM_TI1_SetConfig+0xd8>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d00b      	beq.n	800c05a <TIM_TI1_SetConfig+0x66>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	4a22      	ldr	r2, [pc, #136]	; (800c0d0 <TIM_TI1_SetConfig+0xdc>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d007      	beq.n	800c05a <TIM_TI1_SetConfig+0x66>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	4a21      	ldr	r2, [pc, #132]	; (800c0d4 <TIM_TI1_SetConfig+0xe0>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d003      	beq.n	800c05a <TIM_TI1_SetConfig+0x66>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	4a20      	ldr	r2, [pc, #128]	; (800c0d8 <TIM_TI1_SetConfig+0xe4>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d101      	bne.n	800c05e <TIM_TI1_SetConfig+0x6a>
 800c05a:	2301      	movs	r3, #1
 800c05c:	e000      	b.n	800c060 <TIM_TI1_SetConfig+0x6c>
 800c05e:	2300      	movs	r3, #0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d008      	beq.n	800c076 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	f023 0303 	bic.w	r3, r3, #3
 800c06a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c06c:	697a      	ldr	r2, [r7, #20]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4313      	orrs	r3, r2
 800c072:	617b      	str	r3, [r7, #20]
 800c074:	e003      	b.n	800c07e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	f043 0301 	orr.w	r3, r3, #1
 800c07c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	011b      	lsls	r3, r3, #4
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	697a      	ldr	r2, [r7, #20]
 800c08e:	4313      	orrs	r3, r2
 800c090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	f023 030a 	bic.w	r3, r3, #10
 800c098:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	f003 030a 	and.w	r3, r3, #10
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	621a      	str	r2, [r3, #32]
}
 800c0b2:	bf00      	nop
 800c0b4:	371c      	adds	r7, #28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	40010000 	.word	0x40010000
 800c0c4:	40000400 	.word	0x40000400
 800c0c8:	40000800 	.word	0x40000800
 800c0cc:	40000c00 	.word	0x40000c00
 800c0d0:	40010400 	.word	0x40010400
 800c0d4:	40001800 	.word	0x40001800
 800c0d8:	40014000 	.word	0x40014000

0800c0dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6a1b      	ldr	r3, [r3, #32]
 800c0ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	f023 0201 	bic.w	r2, r3, #1
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	011b      	lsls	r3, r3, #4
 800c10c:	693a      	ldr	r2, [r7, #16]
 800c10e:	4313      	orrs	r3, r2
 800c110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	f023 030a 	bic.w	r3, r3, #10
 800c118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c11a:	697a      	ldr	r2, [r7, #20]
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	4313      	orrs	r3, r2
 800c120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	693a      	ldr	r2, [r7, #16]
 800c126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	621a      	str	r2, [r3, #32]
}
 800c12e:	bf00      	nop
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b087      	sub	sp, #28
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	607a      	str	r2, [r7, #4]
 800c146:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6a1b      	ldr	r3, [r3, #32]
 800c14c:	f023 0210 	bic.w	r2, r3, #16
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	699b      	ldr	r3, [r3, #24]
 800c158:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	021b      	lsls	r3, r3, #8
 800c16c:	697a      	ldr	r2, [r7, #20]
 800c16e:	4313      	orrs	r3, r2
 800c170:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	031b      	lsls	r3, r3, #12
 800c17e:	b29b      	uxth	r3, r3
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	4313      	orrs	r3, r2
 800c184:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c18c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	011b      	lsls	r3, r3, #4
 800c192:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	4313      	orrs	r3, r2
 800c19a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	697a      	ldr	r2, [r7, #20]
 800c1a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	621a      	str	r2, [r3, #32]
}
 800c1a8:	bf00      	nop
 800c1aa:	371c      	adds	r7, #28
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b087      	sub	sp, #28
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6a1b      	ldr	r3, [r3, #32]
 800c1c4:	f023 0210 	bic.w	r2, r3, #16
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6a1b      	ldr	r3, [r3, #32]
 800c1d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c1de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	031b      	lsls	r3, r3, #12
 800c1e4:	697a      	ldr	r2, [r7, #20]
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c1f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	011b      	lsls	r3, r3, #4
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	621a      	str	r2, [r3, #32]
}
 800c208:	bf00      	nop
 800c20a:	371c      	adds	r7, #28
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c214:	b480      	push	{r7}
 800c216:	b087      	sub	sp, #28
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
 800c220:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6a1b      	ldr	r3, [r3, #32]
 800c226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	69db      	ldr	r3, [r3, #28]
 800c232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6a1b      	ldr	r3, [r3, #32]
 800c238:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	f023 0303 	bic.w	r3, r3, #3
 800c240:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c242:	697a      	ldr	r2, [r7, #20]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4313      	orrs	r3, r2
 800c248:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c250:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	011b      	lsls	r3, r3, #4
 800c256:	b2db      	uxtb	r3, r3
 800c258:	697a      	ldr	r2, [r7, #20]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c264:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	021b      	lsls	r3, r3, #8
 800c26a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	4313      	orrs	r3, r2
 800c272:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	693a      	ldr	r2, [r7, #16]
 800c27e:	621a      	str	r2, [r3, #32]
}
 800c280:	bf00      	nop
 800c282:	371c      	adds	r7, #28
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b087      	sub	sp, #28
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6a1b      	ldr	r3, [r3, #32]
 800c29e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	69db      	ldr	r3, [r3, #28]
 800c2aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6a1b      	ldr	r3, [r3, #32]
 800c2b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	021b      	lsls	r3, r3, #8
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c2ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	031b      	lsls	r3, r3, #12
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c2de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	031b      	lsls	r3, r3, #12
 800c2e4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	621a      	str	r2, [r3, #32]
}
 800c2fa:	bf00      	nop
 800c2fc:	371c      	adds	r7, #28
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
	...

0800c308 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	4b09      	ldr	r3, [pc, #36]	; (800c340 <TIM_ITRx_SetConfig+0x38>)
 800c31c:	4013      	ands	r3, r2
 800c31e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	4313      	orrs	r3, r2
 800c326:	f043 0307 	orr.w	r3, r3, #7
 800c32a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	609a      	str	r2, [r3, #8]
}
 800c332:	bf00      	nop
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	ffcfff8f 	.word	0xffcfff8f

0800c344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c344:	b480      	push	{r7}
 800c346:	b087      	sub	sp, #28
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c35e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	021a      	lsls	r2, r3, #8
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	431a      	orrs	r2, r3
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	4313      	orrs	r3, r2
 800c370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	609a      	str	r2, [r3, #8]
}
 800c378:	bf00      	nop
 800c37a:	371c      	adds	r7, #28
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c384:	b480      	push	{r7}
 800c386:	b087      	sub	sp, #28
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	f003 031f 	and.w	r3, r3, #31
 800c396:	2201      	movs	r2, #1
 800c398:	fa02 f303 	lsl.w	r3, r2, r3
 800c39c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6a1a      	ldr	r2, [r3, #32]
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	43db      	mvns	r3, r3
 800c3a6:	401a      	ands	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6a1a      	ldr	r2, [r3, #32]
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	f003 031f 	and.w	r3, r3, #31
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	fa01 f303 	lsl.w	r3, r1, r3
 800c3bc:	431a      	orrs	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	621a      	str	r2, [r3, #32]
}
 800c3c2:	bf00      	nop
 800c3c4:	371c      	adds	r7, #28
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr
	...

0800c3d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d101      	bne.n	800c3e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	e06d      	b.n	800c4c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a30      	ldr	r2, [pc, #192]	; (800c4d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d004      	beq.n	800c41c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a2f      	ldr	r2, [pc, #188]	; (800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d108      	bne.n	800c42e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c422:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c434:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	4313      	orrs	r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a20      	ldr	r2, [pc, #128]	; (800c4d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d022      	beq.n	800c498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c45a:	d01d      	beq.n	800c498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a1d      	ldr	r2, [pc, #116]	; (800c4d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d018      	beq.n	800c498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a1c      	ldr	r2, [pc, #112]	; (800c4dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d013      	beq.n	800c498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a1a      	ldr	r2, [pc, #104]	; (800c4e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d00e      	beq.n	800c498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a15      	ldr	r2, [pc, #84]	; (800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d009      	beq.n	800c498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a16      	ldr	r2, [pc, #88]	; (800c4e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d004      	beq.n	800c498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a15      	ldr	r2, [pc, #84]	; (800c4e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d10c      	bne.n	800c4b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c49e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3714      	adds	r7, #20
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr
 800c4d0:	40010000 	.word	0x40010000
 800c4d4:	40010400 	.word	0x40010400
 800c4d8:	40000400 	.word	0x40000400
 800c4dc:	40000800 	.word	0x40000800
 800c4e0:	40000c00 	.word	0x40000c00
 800c4e4:	40001800 	.word	0x40001800
 800c4e8:	40014000 	.word	0x40014000

0800c4ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4f4:	bf00      	nop
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c508:	bf00      	nop
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c51c:	bf00      	nop
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	e042      	b.n	800c5c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c540:	2b00      	cmp	r3, #0
 800c542:	d106      	bne.n	800c552 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7fa f9d9 	bl	8006904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2224      	movs	r2, #36	; 0x24
 800c556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f022 0201 	bic.w	r2, r2, #1
 800c568:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fccc 	bl	800cf08 <UART_SetConfig>
 800c570:	4603      	mov	r3, r0
 800c572:	2b01      	cmp	r3, #1
 800c574:	d101      	bne.n	800c57a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	e022      	b.n	800c5c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d002      	beq.n	800c588 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f001 fa28 	bl	800d9d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	689a      	ldr	r2, [r3, #8]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c5a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f042 0201 	orr.w	r2, r2, #1
 800c5b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f001 faaf 	bl	800db1c <UART_CheckIdleState>
 800c5be:	4603      	mov	r3, r0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08a      	sub	sp, #40	; 0x28
 800c5cc:	af02      	add	r7, sp, #8
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	603b      	str	r3, [r7, #0]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5de:	2b20      	cmp	r3, #32
 800c5e0:	f040 8083 	bne.w	800c6ea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d002      	beq.n	800c5f0 <HAL_UART_Transmit+0x28>
 800c5ea:	88fb      	ldrh	r3, [r7, #6]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d101      	bne.n	800c5f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e07b      	b.n	800c6ec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d101      	bne.n	800c602 <HAL_UART_Transmit+0x3a>
 800c5fe:	2302      	movs	r3, #2
 800c600:	e074      	b.n	800c6ec <HAL_UART_Transmit+0x124>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2201      	movs	r2, #1
 800c606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2200      	movs	r2, #0
 800c60e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2221      	movs	r2, #33	; 0x21
 800c616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c61a:	f7fa fb4f 	bl	8006cbc <HAL_GetTick>
 800c61e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	88fa      	ldrh	r2, [r7, #6]
 800c624:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	88fa      	ldrh	r2, [r7, #6]
 800c62c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c638:	d108      	bne.n	800c64c <HAL_UART_Transmit+0x84>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d104      	bne.n	800c64c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c642:	2300      	movs	r3, #0
 800c644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	61bb      	str	r3, [r7, #24]
 800c64a:	e003      	b.n	800c654 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c650:	2300      	movs	r3, #0
 800c652:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c65c:	e02c      	b.n	800c6b8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	2200      	movs	r2, #0
 800c666:	2180      	movs	r1, #128	; 0x80
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f001 faa2 	bl	800dbb2 <UART_WaitOnFlagUntilTimeout>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c674:	2303      	movs	r3, #3
 800c676:	e039      	b.n	800c6ec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10b      	bne.n	800c696 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	881b      	ldrh	r3, [r3, #0]
 800c682:	461a      	mov	r2, r3
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c68c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	3302      	adds	r3, #2
 800c692:	61bb      	str	r3, [r7, #24]
 800c694:	e007      	b.n	800c6a6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	781a      	ldrb	r2, [r3, #0]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1cc      	bne.n	800c65e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	2140      	movs	r1, #64	; 0x40
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f001 fa6f 	bl	800dbb2 <UART_WaitOnFlagUntilTimeout>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d001      	beq.n	800c6de <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	e006      	b.n	800c6ec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2220      	movs	r2, #32
 800c6e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	e000      	b.n	800c6ec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c6ea:	2302      	movs	r3, #2
  }
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3720      	adds	r7, #32
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b08a      	sub	sp, #40	; 0x28
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	4613      	mov	r3, r2
 800c700:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c708:	2b20      	cmp	r3, #32
 800c70a:	d142      	bne.n	800c792 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d002      	beq.n	800c718 <HAL_UART_Receive_IT+0x24>
 800c712:	88fb      	ldrh	r3, [r7, #6]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d101      	bne.n	800c71c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	e03b      	b.n	800c794 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c722:	2b01      	cmp	r3, #1
 800c724:	d101      	bne.n	800c72a <HAL_UART_Receive_IT+0x36>
 800c726:	2302      	movs	r3, #2
 800c728:	e034      	b.n	800c794 <HAL_UART_Receive_IT+0xa0>
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2201      	movs	r2, #1
 800c72e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2200      	movs	r2, #0
 800c736:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a17      	ldr	r2, [pc, #92]	; (800c79c <HAL_UART_Receive_IT+0xa8>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d01f      	beq.n	800c782 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d018      	beq.n	800c782 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	e853 3f00 	ldrex	r3, [r3]
 800c75c:	613b      	str	r3, [r7, #16]
   return(result);
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c764:	627b      	str	r3, [r7, #36]	; 0x24
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	461a      	mov	r2, r3
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76e:	623b      	str	r3, [r7, #32]
 800c770:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c772:	69f9      	ldr	r1, [r7, #28]
 800c774:	6a3a      	ldr	r2, [r7, #32]
 800c776:	e841 2300 	strex	r3, r2, [r1]
 800c77a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1e6      	bne.n	800c750 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c782:	88fb      	ldrh	r3, [r7, #6]
 800c784:	461a      	mov	r2, r3
 800c786:	68b9      	ldr	r1, [r7, #8]
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f001 fadb 	bl	800dd44 <UART_Start_Receive_IT>
 800c78e:	4603      	mov	r3, r0
 800c790:	e000      	b.n	800c794 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c792:	2302      	movs	r3, #2
  }
}
 800c794:	4618      	mov	r0, r3
 800c796:	3728      	adds	r7, #40	; 0x28
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	58000c00 	.word	0x58000c00

0800c7a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b0ba      	sub	sp, #232	; 0xe8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	69db      	ldr	r3, [r3, #28]
 800c7ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c7c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c7ca:	f640 030f 	movw	r3, #2063	; 0x80f
 800c7ce:	4013      	ands	r3, r2
 800c7d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c7d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d11b      	bne.n	800c814 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7e0:	f003 0320 	and.w	r3, r3, #32
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d015      	beq.n	800c814 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7ec:	f003 0320 	and.w	r3, r3, #32
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d105      	bne.n	800c800 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c7f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d009      	beq.n	800c814 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c804:	2b00      	cmp	r3, #0
 800c806:	f000 835a 	beq.w	800cebe <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	4798      	blx	r3
      }
      return;
 800c812:	e354      	b.n	800cebe <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 811f 	beq.w	800ca5c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c81e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c822:	4b8b      	ldr	r3, [pc, #556]	; (800ca50 <HAL_UART_IRQHandler+0x2b0>)
 800c824:	4013      	ands	r3, r2
 800c826:	2b00      	cmp	r3, #0
 800c828:	d106      	bne.n	800c838 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c82a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c82e:	4b89      	ldr	r3, [pc, #548]	; (800ca54 <HAL_UART_IRQHandler+0x2b4>)
 800c830:	4013      	ands	r3, r2
 800c832:	2b00      	cmp	r3, #0
 800c834:	f000 8112 	beq.w	800ca5c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b00      	cmp	r3, #0
 800c842:	d011      	beq.n	800c868 <HAL_UART_IRQHandler+0xc8>
 800c844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00b      	beq.n	800c868 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2201      	movs	r2, #1
 800c856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c85e:	f043 0201 	orr.w	r2, r3, #1
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c86c:	f003 0302 	and.w	r3, r3, #2
 800c870:	2b00      	cmp	r3, #0
 800c872:	d011      	beq.n	800c898 <HAL_UART_IRQHandler+0xf8>
 800c874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00b      	beq.n	800c898 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2202      	movs	r2, #2
 800c886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c88e:	f043 0204 	orr.w	r2, r3, #4
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c89c:	f003 0304 	and.w	r3, r3, #4
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d011      	beq.n	800c8c8 <HAL_UART_IRQHandler+0x128>
 800c8a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00b      	beq.n	800c8c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2204      	movs	r2, #4
 800c8b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8be:	f043 0202 	orr.w	r2, r3, #2
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8cc:	f003 0308 	and.w	r3, r3, #8
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d017      	beq.n	800c904 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c8d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8d8:	f003 0320 	and.w	r3, r3, #32
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d105      	bne.n	800c8ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c8e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c8e4:	4b5a      	ldr	r3, [pc, #360]	; (800ca50 <HAL_UART_IRQHandler+0x2b0>)
 800c8e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00b      	beq.n	800c904 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2208      	movs	r2, #8
 800c8f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8fa:	f043 0208 	orr.w	r2, r3, #8
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d012      	beq.n	800c936 <HAL_UART_IRQHandler+0x196>
 800c910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c914:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00c      	beq.n	800c936 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c92c:	f043 0220 	orr.w	r2, r3, #32
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 82c0 	beq.w	800cec2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c946:	f003 0320 	and.w	r3, r3, #32
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d013      	beq.n	800c976 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c94e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c952:	f003 0320 	and.w	r3, r3, #32
 800c956:	2b00      	cmp	r3, #0
 800c958:	d105      	bne.n	800c966 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c95a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c95e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c962:	2b00      	cmp	r3, #0
 800c964:	d007      	beq.n	800c976 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d003      	beq.n	800c976 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c97c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c98a:	2b40      	cmp	r3, #64	; 0x40
 800c98c:	d005      	beq.n	800c99a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c98e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c992:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c996:	2b00      	cmp	r3, #0
 800c998:	d04f      	beq.n	800ca3a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f001 fafc 	bl	800df98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9aa:	2b40      	cmp	r3, #64	; 0x40
 800c9ac:	d141      	bne.n	800ca32 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c9bc:	e853 3f00 	ldrex	r3, [r3]
 800c9c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c9c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c9c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c9da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c9de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c9e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c9ea:	e841 2300 	strex	r3, r2, [r1]
 800c9ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c9f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1d9      	bne.n	800c9ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d013      	beq.n	800ca2a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca06:	4a14      	ldr	r2, [pc, #80]	; (800ca58 <HAL_UART_IRQHandler+0x2b8>)
 800ca08:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fa fdf0 	bl	80075f4 <HAL_DMA_Abort_IT>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d017      	beq.n	800ca4a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ca24:	4610      	mov	r0, r2
 800ca26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca28:	e00f      	b.n	800ca4a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 fa56 	bl	800cedc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca30:	e00b      	b.n	800ca4a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fa52 	bl	800cedc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca38:	e007      	b.n	800ca4a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fa4e 	bl	800cedc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ca48:	e23b      	b.n	800cec2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca4a:	bf00      	nop
    return;
 800ca4c:	e239      	b.n	800cec2 <HAL_UART_IRQHandler+0x722>
 800ca4e:	bf00      	nop
 800ca50:	10000001 	.word	0x10000001
 800ca54:	04000120 	.word	0x04000120
 800ca58:	0800e065 	.word	0x0800e065

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	f040 81ce 	bne.w	800ce02 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ca66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca6a:	f003 0310 	and.w	r3, r3, #16
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f000 81c7 	beq.w	800ce02 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ca74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca78:	f003 0310 	and.w	r3, r3, #16
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f000 81c0 	beq.w	800ce02 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2210      	movs	r2, #16
 800ca88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca94:	2b40      	cmp	r3, #64	; 0x40
 800ca96:	f040 813b 	bne.w	800cd10 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a8b      	ldr	r2, [pc, #556]	; (800ccd0 <HAL_UART_IRQHandler+0x530>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d059      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a89      	ldr	r2, [pc, #548]	; (800ccd4 <HAL_UART_IRQHandler+0x534>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d053      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a87      	ldr	r2, [pc, #540]	; (800ccd8 <HAL_UART_IRQHandler+0x538>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d04d      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a85      	ldr	r2, [pc, #532]	; (800ccdc <HAL_UART_IRQHandler+0x53c>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d047      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a83      	ldr	r2, [pc, #524]	; (800cce0 <HAL_UART_IRQHandler+0x540>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d041      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a81      	ldr	r2, [pc, #516]	; (800cce4 <HAL_UART_IRQHandler+0x544>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d03b      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a7f      	ldr	r2, [pc, #508]	; (800cce8 <HAL_UART_IRQHandler+0x548>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d035      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a7d      	ldr	r2, [pc, #500]	; (800ccec <HAL_UART_IRQHandler+0x54c>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d02f      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a7b      	ldr	r2, [pc, #492]	; (800ccf0 <HAL_UART_IRQHandler+0x550>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d029      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a79      	ldr	r2, [pc, #484]	; (800ccf4 <HAL_UART_IRQHandler+0x554>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d023      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a77      	ldr	r2, [pc, #476]	; (800ccf8 <HAL_UART_IRQHandler+0x558>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d01d      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a75      	ldr	r2, [pc, #468]	; (800ccfc <HAL_UART_IRQHandler+0x55c>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d017      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a73      	ldr	r2, [pc, #460]	; (800cd00 <HAL_UART_IRQHandler+0x560>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d011      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a71      	ldr	r2, [pc, #452]	; (800cd04 <HAL_UART_IRQHandler+0x564>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d00b      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a6f      	ldr	r2, [pc, #444]	; (800cd08 <HAL_UART_IRQHandler+0x568>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d005      	beq.n	800cb5a <HAL_UART_IRQHandler+0x3ba>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a6d      	ldr	r2, [pc, #436]	; (800cd0c <HAL_UART_IRQHandler+0x56c>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d105      	bne.n	800cb66 <HAL_UART_IRQHandler+0x3c6>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	e004      	b.n	800cb70 <HAL_UART_IRQHandler+0x3d0>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cb74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 81a4 	beq.w	800cec6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	f080 819c 	bcs.w	800cec6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cb94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb9c:	69db      	ldr	r3, [r3, #28]
 800cb9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cba2:	f000 8086 	beq.w	800ccb2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cbb2:	e853 3f00 	ldrex	r3, [r3]
 800cbb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cbba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	461a      	mov	r2, r3
 800cbcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cbd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cbd4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cbdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cbe0:	e841 2300 	strex	r3, r2, [r1]
 800cbe4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cbe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1da      	bne.n	800cba6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	3308      	adds	r3, #8
 800cbf6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbfa:	e853 3f00 	ldrex	r3, [r3]
 800cbfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cc00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc02:	f023 0301 	bic.w	r3, r3, #1
 800cc06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	3308      	adds	r3, #8
 800cc10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cc14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cc18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cc1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cc20:	e841 2300 	strex	r3, r2, [r1]
 800cc24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cc26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1e1      	bne.n	800cbf0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	3308      	adds	r3, #8
 800cc32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc36:	e853 3f00 	ldrex	r3, [r3]
 800cc3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cc3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3308      	adds	r3, #8
 800cc4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cc50:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cc52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cc56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc58:	e841 2300 	strex	r3, r2, [r1]
 800cc5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cc5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e3      	bne.n	800cc2c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2220      	movs	r2, #32
 800cc68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc7a:	e853 3f00 	ldrex	r3, [r3]
 800cc7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cc80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc82:	f023 0310 	bic.w	r3, r3, #16
 800cc86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc94:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc9c:	e841 2300 	strex	r3, r2, [r1]
 800cca0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d1e4      	bne.n	800cc72 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fa f983 	bl	8006fb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 f912 	bl	800cef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cccc:	e0fb      	b.n	800cec6 <HAL_UART_IRQHandler+0x726>
 800ccce:	bf00      	nop
 800ccd0:	40020010 	.word	0x40020010
 800ccd4:	40020028 	.word	0x40020028
 800ccd8:	40020040 	.word	0x40020040
 800ccdc:	40020058 	.word	0x40020058
 800cce0:	40020070 	.word	0x40020070
 800cce4:	40020088 	.word	0x40020088
 800cce8:	400200a0 	.word	0x400200a0
 800ccec:	400200b8 	.word	0x400200b8
 800ccf0:	40020410 	.word	0x40020410
 800ccf4:	40020428 	.word	0x40020428
 800ccf8:	40020440 	.word	0x40020440
 800ccfc:	40020458 	.word	0x40020458
 800cd00:	40020470 	.word	0x40020470
 800cd04:	40020488 	.word	0x40020488
 800cd08:	400204a0 	.word	0x400204a0
 800cd0c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f000 80cc 	beq.w	800ceca <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800cd32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f000 80c7 	beq.w	800ceca <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd44:	e853 3f00 	ldrex	r3, [r3]
 800cd48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd5e:	647b      	str	r3, [r7, #68]	; 0x44
 800cd60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd66:	e841 2300 	strex	r3, r2, [r1]
 800cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1e4      	bne.n	800cd3c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3308      	adds	r3, #8
 800cd78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	e853 3f00 	ldrex	r3, [r3]
 800cd80:	623b      	str	r3, [r7, #32]
   return(result);
 800cd82:	6a3a      	ldr	r2, [r7, #32]
 800cd84:	4b54      	ldr	r3, [pc, #336]	; (800ced8 <HAL_UART_IRQHandler+0x738>)
 800cd86:	4013      	ands	r3, r2
 800cd88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	3308      	adds	r3, #8
 800cd92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cd96:	633a      	str	r2, [r7, #48]	; 0x30
 800cd98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd9e:	e841 2300 	strex	r3, r2, [r1]
 800cda2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1e3      	bne.n	800cd72 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2220      	movs	r2, #32
 800cdae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	e853 3f00 	ldrex	r3, [r3]
 800cdca:	60fb      	str	r3, [r7, #12]
   return(result);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f023 0310 	bic.w	r3, r3, #16
 800cdd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	461a      	mov	r2, r3
 800cddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cde0:	61fb      	str	r3, [r7, #28]
 800cde2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde4:	69b9      	ldr	r1, [r7, #24]
 800cde6:	69fa      	ldr	r2, [r7, #28]
 800cde8:	e841 2300 	strex	r3, r2, [r1]
 800cdec:	617b      	str	r3, [r7, #20]
   return(result);
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1e4      	bne.n	800cdbe <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cdf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f878 	bl	800cef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce00:	e063      	b.n	800ceca <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ce02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00e      	beq.n	800ce2c <HAL_UART_IRQHandler+0x68c>
 800ce0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d008      	beq.n	800ce2c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ce22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f001 fdbb 	bl	800e9a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce2a:	e051      	b.n	800ced0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ce2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d014      	beq.n	800ce62 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ce38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d105      	bne.n	800ce50 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ce44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d008      	beq.n	800ce62 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d03a      	beq.n	800cece <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	4798      	blx	r3
    }
    return;
 800ce60:	e035      	b.n	800cece <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ce62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d009      	beq.n	800ce82 <HAL_UART_IRQHandler+0x6e2>
 800ce6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d003      	beq.n	800ce82 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f001 f908 	bl	800e090 <UART_EndTransmit_IT>
    return;
 800ce80:	e026      	b.n	800ced0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ce82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d009      	beq.n	800cea2 <HAL_UART_IRQHandler+0x702>
 800ce8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d003      	beq.n	800cea2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f001 fd94 	bl	800e9c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cea0:	e016      	b.n	800ced0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d010      	beq.n	800ced0 <HAL_UART_IRQHandler+0x730>
 800ceae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	da0c      	bge.n	800ced0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f001 fd7c 	bl	800e9b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cebc:	e008      	b.n	800ced0 <HAL_UART_IRQHandler+0x730>
      return;
 800cebe:	bf00      	nop
 800cec0:	e006      	b.n	800ced0 <HAL_UART_IRQHandler+0x730>
    return;
 800cec2:	bf00      	nop
 800cec4:	e004      	b.n	800ced0 <HAL_UART_IRQHandler+0x730>
      return;
 800cec6:	bf00      	nop
 800cec8:	e002      	b.n	800ced0 <HAL_UART_IRQHandler+0x730>
      return;
 800ceca:	bf00      	nop
 800cecc:	e000      	b.n	800ced0 <HAL_UART_IRQHandler+0x730>
    return;
 800cece:	bf00      	nop
  }
}
 800ced0:	37e8      	adds	r7, #232	; 0xe8
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	effffffe 	.word	0xeffffffe

0800cedc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cee4:	bf00      	nop
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf0c:	b092      	sub	sp, #72	; 0x48
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf12:	2300      	movs	r3, #0
 800cf14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	689a      	ldr	r2, [r3, #8]
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	431a      	orrs	r2, r3
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	695b      	ldr	r3, [r3, #20]
 800cf26:	431a      	orrs	r2, r3
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	69db      	ldr	r3, [r3, #28]
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	4bbe      	ldr	r3, [pc, #760]	; (800d230 <UART_SetConfig+0x328>)
 800cf38:	4013      	ands	r3, r2
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	6812      	ldr	r2, [r2, #0]
 800cf3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf40:	430b      	orrs	r3, r1
 800cf42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	68da      	ldr	r2, [r3, #12]
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	430a      	orrs	r2, r1
 800cf58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	699b      	ldr	r3, [r3, #24]
 800cf5e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4ab3      	ldr	r2, [pc, #716]	; (800d234 <UART_SetConfig+0x32c>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d004      	beq.n	800cf74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf70:	4313      	orrs	r3, r2
 800cf72:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	689a      	ldr	r2, [r3, #8]
 800cf7a:	4baf      	ldr	r3, [pc, #700]	; (800d238 <UART_SetConfig+0x330>)
 800cf7c:	4013      	ands	r3, r2
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	6812      	ldr	r2, [r2, #0]
 800cf82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf84:	430b      	orrs	r3, r1
 800cf86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8e:	f023 010f 	bic.w	r1, r3, #15
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	430a      	orrs	r2, r1
 800cf9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4aa6      	ldr	r2, [pc, #664]	; (800d23c <UART_SetConfig+0x334>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d177      	bne.n	800d098 <UART_SetConfig+0x190>
 800cfa8:	4ba5      	ldr	r3, [pc, #660]	; (800d240 <UART_SetConfig+0x338>)
 800cfaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cfb0:	2b28      	cmp	r3, #40	; 0x28
 800cfb2:	d86d      	bhi.n	800d090 <UART_SetConfig+0x188>
 800cfb4:	a201      	add	r2, pc, #4	; (adr r2, 800cfbc <UART_SetConfig+0xb4>)
 800cfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfba:	bf00      	nop
 800cfbc:	0800d061 	.word	0x0800d061
 800cfc0:	0800d091 	.word	0x0800d091
 800cfc4:	0800d091 	.word	0x0800d091
 800cfc8:	0800d091 	.word	0x0800d091
 800cfcc:	0800d091 	.word	0x0800d091
 800cfd0:	0800d091 	.word	0x0800d091
 800cfd4:	0800d091 	.word	0x0800d091
 800cfd8:	0800d091 	.word	0x0800d091
 800cfdc:	0800d069 	.word	0x0800d069
 800cfe0:	0800d091 	.word	0x0800d091
 800cfe4:	0800d091 	.word	0x0800d091
 800cfe8:	0800d091 	.word	0x0800d091
 800cfec:	0800d091 	.word	0x0800d091
 800cff0:	0800d091 	.word	0x0800d091
 800cff4:	0800d091 	.word	0x0800d091
 800cff8:	0800d091 	.word	0x0800d091
 800cffc:	0800d071 	.word	0x0800d071
 800d000:	0800d091 	.word	0x0800d091
 800d004:	0800d091 	.word	0x0800d091
 800d008:	0800d091 	.word	0x0800d091
 800d00c:	0800d091 	.word	0x0800d091
 800d010:	0800d091 	.word	0x0800d091
 800d014:	0800d091 	.word	0x0800d091
 800d018:	0800d091 	.word	0x0800d091
 800d01c:	0800d079 	.word	0x0800d079
 800d020:	0800d091 	.word	0x0800d091
 800d024:	0800d091 	.word	0x0800d091
 800d028:	0800d091 	.word	0x0800d091
 800d02c:	0800d091 	.word	0x0800d091
 800d030:	0800d091 	.word	0x0800d091
 800d034:	0800d091 	.word	0x0800d091
 800d038:	0800d091 	.word	0x0800d091
 800d03c:	0800d081 	.word	0x0800d081
 800d040:	0800d091 	.word	0x0800d091
 800d044:	0800d091 	.word	0x0800d091
 800d048:	0800d091 	.word	0x0800d091
 800d04c:	0800d091 	.word	0x0800d091
 800d050:	0800d091 	.word	0x0800d091
 800d054:	0800d091 	.word	0x0800d091
 800d058:	0800d091 	.word	0x0800d091
 800d05c:	0800d089 	.word	0x0800d089
 800d060:	2301      	movs	r3, #1
 800d062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d066:	e222      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d068:	2304      	movs	r3, #4
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d06e:	e21e      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d070:	2308      	movs	r3, #8
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d076:	e21a      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d078:	2310      	movs	r3, #16
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d07e:	e216      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d080:	2320      	movs	r3, #32
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d086:	e212      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d088:	2340      	movs	r3, #64	; 0x40
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d08e:	e20e      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d090:	2380      	movs	r3, #128	; 0x80
 800d092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d096:	e20a      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a69      	ldr	r2, [pc, #420]	; (800d244 <UART_SetConfig+0x33c>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d130      	bne.n	800d104 <UART_SetConfig+0x1fc>
 800d0a2:	4b67      	ldr	r3, [pc, #412]	; (800d240 <UART_SetConfig+0x338>)
 800d0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0a6:	f003 0307 	and.w	r3, r3, #7
 800d0aa:	2b05      	cmp	r3, #5
 800d0ac:	d826      	bhi.n	800d0fc <UART_SetConfig+0x1f4>
 800d0ae:	a201      	add	r2, pc, #4	; (adr r2, 800d0b4 <UART_SetConfig+0x1ac>)
 800d0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b4:	0800d0cd 	.word	0x0800d0cd
 800d0b8:	0800d0d5 	.word	0x0800d0d5
 800d0bc:	0800d0dd 	.word	0x0800d0dd
 800d0c0:	0800d0e5 	.word	0x0800d0e5
 800d0c4:	0800d0ed 	.word	0x0800d0ed
 800d0c8:	0800d0f5 	.word	0x0800d0f5
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0d2:	e1ec      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d0d4:	2304      	movs	r3, #4
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0da:	e1e8      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d0dc:	2308      	movs	r3, #8
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0e2:	e1e4      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d0e4:	2310      	movs	r3, #16
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ea:	e1e0      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d0ec:	2320      	movs	r3, #32
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0f2:	e1dc      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d0f4:	2340      	movs	r3, #64	; 0x40
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0fa:	e1d8      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d0fc:	2380      	movs	r3, #128	; 0x80
 800d0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d102:	e1d4      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a4f      	ldr	r2, [pc, #316]	; (800d248 <UART_SetConfig+0x340>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d130      	bne.n	800d170 <UART_SetConfig+0x268>
 800d10e:	4b4c      	ldr	r3, [pc, #304]	; (800d240 <UART_SetConfig+0x338>)
 800d110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d112:	f003 0307 	and.w	r3, r3, #7
 800d116:	2b05      	cmp	r3, #5
 800d118:	d826      	bhi.n	800d168 <UART_SetConfig+0x260>
 800d11a:	a201      	add	r2, pc, #4	; (adr r2, 800d120 <UART_SetConfig+0x218>)
 800d11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d120:	0800d139 	.word	0x0800d139
 800d124:	0800d141 	.word	0x0800d141
 800d128:	0800d149 	.word	0x0800d149
 800d12c:	0800d151 	.word	0x0800d151
 800d130:	0800d159 	.word	0x0800d159
 800d134:	0800d161 	.word	0x0800d161
 800d138:	2300      	movs	r3, #0
 800d13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13e:	e1b6      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d140:	2304      	movs	r3, #4
 800d142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d146:	e1b2      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d148:	2308      	movs	r3, #8
 800d14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d14e:	e1ae      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d150:	2310      	movs	r3, #16
 800d152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d156:	e1aa      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d158:	2320      	movs	r3, #32
 800d15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d15e:	e1a6      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d160:	2340      	movs	r3, #64	; 0x40
 800d162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d166:	e1a2      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d168:	2380      	movs	r3, #128	; 0x80
 800d16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d16e:	e19e      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a35      	ldr	r2, [pc, #212]	; (800d24c <UART_SetConfig+0x344>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d130      	bne.n	800d1dc <UART_SetConfig+0x2d4>
 800d17a:	4b31      	ldr	r3, [pc, #196]	; (800d240 <UART_SetConfig+0x338>)
 800d17c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d17e:	f003 0307 	and.w	r3, r3, #7
 800d182:	2b05      	cmp	r3, #5
 800d184:	d826      	bhi.n	800d1d4 <UART_SetConfig+0x2cc>
 800d186:	a201      	add	r2, pc, #4	; (adr r2, 800d18c <UART_SetConfig+0x284>)
 800d188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18c:	0800d1a5 	.word	0x0800d1a5
 800d190:	0800d1ad 	.word	0x0800d1ad
 800d194:	0800d1b5 	.word	0x0800d1b5
 800d198:	0800d1bd 	.word	0x0800d1bd
 800d19c:	0800d1c5 	.word	0x0800d1c5
 800d1a0:	0800d1cd 	.word	0x0800d1cd
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1aa:	e180      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d1ac:	2304      	movs	r3, #4
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1b2:	e17c      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d1b4:	2308      	movs	r3, #8
 800d1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ba:	e178      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d1bc:	2310      	movs	r3, #16
 800d1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1c2:	e174      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d1c4:	2320      	movs	r3, #32
 800d1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ca:	e170      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d1cc:	2340      	movs	r3, #64	; 0x40
 800d1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1d2:	e16c      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d1d4:	2380      	movs	r3, #128	; 0x80
 800d1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1da:	e168      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a1b      	ldr	r2, [pc, #108]	; (800d250 <UART_SetConfig+0x348>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d142      	bne.n	800d26c <UART_SetConfig+0x364>
 800d1e6:	4b16      	ldr	r3, [pc, #88]	; (800d240 <UART_SetConfig+0x338>)
 800d1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ea:	f003 0307 	and.w	r3, r3, #7
 800d1ee:	2b05      	cmp	r3, #5
 800d1f0:	d838      	bhi.n	800d264 <UART_SetConfig+0x35c>
 800d1f2:	a201      	add	r2, pc, #4	; (adr r2, 800d1f8 <UART_SetConfig+0x2f0>)
 800d1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f8:	0800d211 	.word	0x0800d211
 800d1fc:	0800d219 	.word	0x0800d219
 800d200:	0800d221 	.word	0x0800d221
 800d204:	0800d229 	.word	0x0800d229
 800d208:	0800d255 	.word	0x0800d255
 800d20c:	0800d25d 	.word	0x0800d25d
 800d210:	2300      	movs	r3, #0
 800d212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d216:	e14a      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d218:	2304      	movs	r3, #4
 800d21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d21e:	e146      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d220:	2308      	movs	r3, #8
 800d222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d226:	e142      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d228:	2310      	movs	r3, #16
 800d22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d22e:	e13e      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d230:	cfff69f3 	.word	0xcfff69f3
 800d234:	58000c00 	.word	0x58000c00
 800d238:	11fff4ff 	.word	0x11fff4ff
 800d23c:	40011000 	.word	0x40011000
 800d240:	58024400 	.word	0x58024400
 800d244:	40004400 	.word	0x40004400
 800d248:	40004800 	.word	0x40004800
 800d24c:	40004c00 	.word	0x40004c00
 800d250:	40005000 	.word	0x40005000
 800d254:	2320      	movs	r3, #32
 800d256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25a:	e128      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d25c:	2340      	movs	r3, #64	; 0x40
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d262:	e124      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d264:	2380      	movs	r3, #128	; 0x80
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26a:	e120      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4acb      	ldr	r2, [pc, #812]	; (800d5a0 <UART_SetConfig+0x698>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d176      	bne.n	800d364 <UART_SetConfig+0x45c>
 800d276:	4bcb      	ldr	r3, [pc, #812]	; (800d5a4 <UART_SetConfig+0x69c>)
 800d278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d27a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d27e:	2b28      	cmp	r3, #40	; 0x28
 800d280:	d86c      	bhi.n	800d35c <UART_SetConfig+0x454>
 800d282:	a201      	add	r2, pc, #4	; (adr r2, 800d288 <UART_SetConfig+0x380>)
 800d284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d288:	0800d32d 	.word	0x0800d32d
 800d28c:	0800d35d 	.word	0x0800d35d
 800d290:	0800d35d 	.word	0x0800d35d
 800d294:	0800d35d 	.word	0x0800d35d
 800d298:	0800d35d 	.word	0x0800d35d
 800d29c:	0800d35d 	.word	0x0800d35d
 800d2a0:	0800d35d 	.word	0x0800d35d
 800d2a4:	0800d35d 	.word	0x0800d35d
 800d2a8:	0800d335 	.word	0x0800d335
 800d2ac:	0800d35d 	.word	0x0800d35d
 800d2b0:	0800d35d 	.word	0x0800d35d
 800d2b4:	0800d35d 	.word	0x0800d35d
 800d2b8:	0800d35d 	.word	0x0800d35d
 800d2bc:	0800d35d 	.word	0x0800d35d
 800d2c0:	0800d35d 	.word	0x0800d35d
 800d2c4:	0800d35d 	.word	0x0800d35d
 800d2c8:	0800d33d 	.word	0x0800d33d
 800d2cc:	0800d35d 	.word	0x0800d35d
 800d2d0:	0800d35d 	.word	0x0800d35d
 800d2d4:	0800d35d 	.word	0x0800d35d
 800d2d8:	0800d35d 	.word	0x0800d35d
 800d2dc:	0800d35d 	.word	0x0800d35d
 800d2e0:	0800d35d 	.word	0x0800d35d
 800d2e4:	0800d35d 	.word	0x0800d35d
 800d2e8:	0800d345 	.word	0x0800d345
 800d2ec:	0800d35d 	.word	0x0800d35d
 800d2f0:	0800d35d 	.word	0x0800d35d
 800d2f4:	0800d35d 	.word	0x0800d35d
 800d2f8:	0800d35d 	.word	0x0800d35d
 800d2fc:	0800d35d 	.word	0x0800d35d
 800d300:	0800d35d 	.word	0x0800d35d
 800d304:	0800d35d 	.word	0x0800d35d
 800d308:	0800d34d 	.word	0x0800d34d
 800d30c:	0800d35d 	.word	0x0800d35d
 800d310:	0800d35d 	.word	0x0800d35d
 800d314:	0800d35d 	.word	0x0800d35d
 800d318:	0800d35d 	.word	0x0800d35d
 800d31c:	0800d35d 	.word	0x0800d35d
 800d320:	0800d35d 	.word	0x0800d35d
 800d324:	0800d35d 	.word	0x0800d35d
 800d328:	0800d355 	.word	0x0800d355
 800d32c:	2301      	movs	r3, #1
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d332:	e0bc      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d334:	2304      	movs	r3, #4
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d33a:	e0b8      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d33c:	2308      	movs	r3, #8
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d342:	e0b4      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d344:	2310      	movs	r3, #16
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d34a:	e0b0      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d34c:	2320      	movs	r3, #32
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d352:	e0ac      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d354:	2340      	movs	r3, #64	; 0x40
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d35a:	e0a8      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d35c:	2380      	movs	r3, #128	; 0x80
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d362:	e0a4      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a8f      	ldr	r2, [pc, #572]	; (800d5a8 <UART_SetConfig+0x6a0>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d130      	bne.n	800d3d0 <UART_SetConfig+0x4c8>
 800d36e:	4b8d      	ldr	r3, [pc, #564]	; (800d5a4 <UART_SetConfig+0x69c>)
 800d370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d372:	f003 0307 	and.w	r3, r3, #7
 800d376:	2b05      	cmp	r3, #5
 800d378:	d826      	bhi.n	800d3c8 <UART_SetConfig+0x4c0>
 800d37a:	a201      	add	r2, pc, #4	; (adr r2, 800d380 <UART_SetConfig+0x478>)
 800d37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d380:	0800d399 	.word	0x0800d399
 800d384:	0800d3a1 	.word	0x0800d3a1
 800d388:	0800d3a9 	.word	0x0800d3a9
 800d38c:	0800d3b1 	.word	0x0800d3b1
 800d390:	0800d3b9 	.word	0x0800d3b9
 800d394:	0800d3c1 	.word	0x0800d3c1
 800d398:	2300      	movs	r3, #0
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d39e:	e086      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d3a0:	2304      	movs	r3, #4
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3a6:	e082      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d3a8:	2308      	movs	r3, #8
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ae:	e07e      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d3b0:	2310      	movs	r3, #16
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3b6:	e07a      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d3b8:	2320      	movs	r3, #32
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3be:	e076      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d3c0:	2340      	movs	r3, #64	; 0x40
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3c6:	e072      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d3c8:	2380      	movs	r3, #128	; 0x80
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ce:	e06e      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a75      	ldr	r2, [pc, #468]	; (800d5ac <UART_SetConfig+0x6a4>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d130      	bne.n	800d43c <UART_SetConfig+0x534>
 800d3da:	4b72      	ldr	r3, [pc, #456]	; (800d5a4 <UART_SetConfig+0x69c>)
 800d3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3de:	f003 0307 	and.w	r3, r3, #7
 800d3e2:	2b05      	cmp	r3, #5
 800d3e4:	d826      	bhi.n	800d434 <UART_SetConfig+0x52c>
 800d3e6:	a201      	add	r2, pc, #4	; (adr r2, 800d3ec <UART_SetConfig+0x4e4>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d405 	.word	0x0800d405
 800d3f0:	0800d40d 	.word	0x0800d40d
 800d3f4:	0800d415 	.word	0x0800d415
 800d3f8:	0800d41d 	.word	0x0800d41d
 800d3fc:	0800d425 	.word	0x0800d425
 800d400:	0800d42d 	.word	0x0800d42d
 800d404:	2300      	movs	r3, #0
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40a:	e050      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d40c:	2304      	movs	r3, #4
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d412:	e04c      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d414:	2308      	movs	r3, #8
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d41a:	e048      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d41c:	2310      	movs	r3, #16
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d422:	e044      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d424:	2320      	movs	r3, #32
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d42a:	e040      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d42c:	2340      	movs	r3, #64	; 0x40
 800d42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d432:	e03c      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d434:	2380      	movs	r3, #128	; 0x80
 800d436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43a:	e038      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a5b      	ldr	r2, [pc, #364]	; (800d5b0 <UART_SetConfig+0x6a8>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d130      	bne.n	800d4a8 <UART_SetConfig+0x5a0>
 800d446:	4b57      	ldr	r3, [pc, #348]	; (800d5a4 <UART_SetConfig+0x69c>)
 800d448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d44a:	f003 0307 	and.w	r3, r3, #7
 800d44e:	2b05      	cmp	r3, #5
 800d450:	d826      	bhi.n	800d4a0 <UART_SetConfig+0x598>
 800d452:	a201      	add	r2, pc, #4	; (adr r2, 800d458 <UART_SetConfig+0x550>)
 800d454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d458:	0800d471 	.word	0x0800d471
 800d45c:	0800d479 	.word	0x0800d479
 800d460:	0800d481 	.word	0x0800d481
 800d464:	0800d489 	.word	0x0800d489
 800d468:	0800d491 	.word	0x0800d491
 800d46c:	0800d499 	.word	0x0800d499
 800d470:	2302      	movs	r3, #2
 800d472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d476:	e01a      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d478:	2304      	movs	r3, #4
 800d47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d47e:	e016      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d480:	2308      	movs	r3, #8
 800d482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d486:	e012      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d488:	2310      	movs	r3, #16
 800d48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d48e:	e00e      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d490:	2320      	movs	r3, #32
 800d492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d496:	e00a      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d498:	2340      	movs	r3, #64	; 0x40
 800d49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d49e:	e006      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d4a0:	2380      	movs	r3, #128	; 0x80
 800d4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a6:	e002      	b.n	800d4ae <UART_SetConfig+0x5a6>
 800d4a8:	2380      	movs	r3, #128	; 0x80
 800d4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a3f      	ldr	r2, [pc, #252]	; (800d5b0 <UART_SetConfig+0x6a8>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	f040 80f8 	bne.w	800d6aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d4ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d4be:	2b20      	cmp	r3, #32
 800d4c0:	dc46      	bgt.n	800d550 <UART_SetConfig+0x648>
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	f2c0 8082 	blt.w	800d5cc <UART_SetConfig+0x6c4>
 800d4c8:	3b02      	subs	r3, #2
 800d4ca:	2b1e      	cmp	r3, #30
 800d4cc:	d87e      	bhi.n	800d5cc <UART_SetConfig+0x6c4>
 800d4ce:	a201      	add	r2, pc, #4	; (adr r2, 800d4d4 <UART_SetConfig+0x5cc>)
 800d4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d4:	0800d557 	.word	0x0800d557
 800d4d8:	0800d5cd 	.word	0x0800d5cd
 800d4dc:	0800d55f 	.word	0x0800d55f
 800d4e0:	0800d5cd 	.word	0x0800d5cd
 800d4e4:	0800d5cd 	.word	0x0800d5cd
 800d4e8:	0800d5cd 	.word	0x0800d5cd
 800d4ec:	0800d56f 	.word	0x0800d56f
 800d4f0:	0800d5cd 	.word	0x0800d5cd
 800d4f4:	0800d5cd 	.word	0x0800d5cd
 800d4f8:	0800d5cd 	.word	0x0800d5cd
 800d4fc:	0800d5cd 	.word	0x0800d5cd
 800d500:	0800d5cd 	.word	0x0800d5cd
 800d504:	0800d5cd 	.word	0x0800d5cd
 800d508:	0800d5cd 	.word	0x0800d5cd
 800d50c:	0800d57f 	.word	0x0800d57f
 800d510:	0800d5cd 	.word	0x0800d5cd
 800d514:	0800d5cd 	.word	0x0800d5cd
 800d518:	0800d5cd 	.word	0x0800d5cd
 800d51c:	0800d5cd 	.word	0x0800d5cd
 800d520:	0800d5cd 	.word	0x0800d5cd
 800d524:	0800d5cd 	.word	0x0800d5cd
 800d528:	0800d5cd 	.word	0x0800d5cd
 800d52c:	0800d5cd 	.word	0x0800d5cd
 800d530:	0800d5cd 	.word	0x0800d5cd
 800d534:	0800d5cd 	.word	0x0800d5cd
 800d538:	0800d5cd 	.word	0x0800d5cd
 800d53c:	0800d5cd 	.word	0x0800d5cd
 800d540:	0800d5cd 	.word	0x0800d5cd
 800d544:	0800d5cd 	.word	0x0800d5cd
 800d548:	0800d5cd 	.word	0x0800d5cd
 800d54c:	0800d5bf 	.word	0x0800d5bf
 800d550:	2b40      	cmp	r3, #64	; 0x40
 800d552:	d037      	beq.n	800d5c4 <UART_SetConfig+0x6bc>
 800d554:	e03a      	b.n	800d5cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d556:	f7fc fbc9 	bl	8009cec <HAL_RCCEx_GetD3PCLK1Freq>
 800d55a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d55c:	e03c      	b.n	800d5d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d55e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d562:	4618      	mov	r0, r3
 800d564:	f7fc fbd8 	bl	8009d18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d56c:	e034      	b.n	800d5d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d56e:	f107 0318 	add.w	r3, r7, #24
 800d572:	4618      	mov	r0, r3
 800d574:	f7fc fd24 	bl	8009fc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d57c:	e02c      	b.n	800d5d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d57e:	4b09      	ldr	r3, [pc, #36]	; (800d5a4 <UART_SetConfig+0x69c>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f003 0320 	and.w	r3, r3, #32
 800d586:	2b00      	cmp	r3, #0
 800d588:	d016      	beq.n	800d5b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d58a:	4b06      	ldr	r3, [pc, #24]	; (800d5a4 <UART_SetConfig+0x69c>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	08db      	lsrs	r3, r3, #3
 800d590:	f003 0303 	and.w	r3, r3, #3
 800d594:	4a07      	ldr	r2, [pc, #28]	; (800d5b4 <UART_SetConfig+0x6ac>)
 800d596:	fa22 f303 	lsr.w	r3, r2, r3
 800d59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d59c:	e01c      	b.n	800d5d8 <UART_SetConfig+0x6d0>
 800d59e:	bf00      	nop
 800d5a0:	40011400 	.word	0x40011400
 800d5a4:	58024400 	.word	0x58024400
 800d5a8:	40007800 	.word	0x40007800
 800d5ac:	40007c00 	.word	0x40007c00
 800d5b0:	58000c00 	.word	0x58000c00
 800d5b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d5b8:	4b9d      	ldr	r3, [pc, #628]	; (800d830 <UART_SetConfig+0x928>)
 800d5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5bc:	e00c      	b.n	800d5d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5be:	4b9d      	ldr	r3, [pc, #628]	; (800d834 <UART_SetConfig+0x92c>)
 800d5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5c2:	e009      	b.n	800d5d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5ca:	e005      	b.n	800d5d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d5d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f000 81de 	beq.w	800d99c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e4:	4a94      	ldr	r2, [pc, #592]	; (800d838 <UART_SetConfig+0x930>)
 800d5e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5f2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	685a      	ldr	r2, [r3, #4]
 800d5f8:	4613      	mov	r3, r2
 800d5fa:	005b      	lsls	r3, r3, #1
 800d5fc:	4413      	add	r3, r2
 800d5fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d600:	429a      	cmp	r2, r3
 800d602:	d305      	bcc.n	800d610 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d60a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d903      	bls.n	800d618 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d616:	e1c1      	b.n	800d99c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d61a:	2200      	movs	r2, #0
 800d61c:	60bb      	str	r3, [r7, #8]
 800d61e:	60fa      	str	r2, [r7, #12]
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d624:	4a84      	ldr	r2, [pc, #528]	; (800d838 <UART_SetConfig+0x930>)
 800d626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	2200      	movs	r2, #0
 800d62e:	603b      	str	r3, [r7, #0]
 800d630:	607a      	str	r2, [r7, #4]
 800d632:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d636:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d63a:	f7f3 f865 	bl	8000708 <__aeabi_uldivmod>
 800d63e:	4602      	mov	r2, r0
 800d640:	460b      	mov	r3, r1
 800d642:	4610      	mov	r0, r2
 800d644:	4619      	mov	r1, r3
 800d646:	f04f 0200 	mov.w	r2, #0
 800d64a:	f04f 0300 	mov.w	r3, #0
 800d64e:	020b      	lsls	r3, r1, #8
 800d650:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d654:	0202      	lsls	r2, r0, #8
 800d656:	6979      	ldr	r1, [r7, #20]
 800d658:	6849      	ldr	r1, [r1, #4]
 800d65a:	0849      	lsrs	r1, r1, #1
 800d65c:	2000      	movs	r0, #0
 800d65e:	460c      	mov	r4, r1
 800d660:	4605      	mov	r5, r0
 800d662:	eb12 0804 	adds.w	r8, r2, r4
 800d666:	eb43 0905 	adc.w	r9, r3, r5
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	469a      	mov	sl, r3
 800d672:	4693      	mov	fp, r2
 800d674:	4652      	mov	r2, sl
 800d676:	465b      	mov	r3, fp
 800d678:	4640      	mov	r0, r8
 800d67a:	4649      	mov	r1, r9
 800d67c:	f7f3 f844 	bl	8000708 <__aeabi_uldivmod>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	4613      	mov	r3, r2
 800d686:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d68e:	d308      	bcc.n	800d6a2 <UART_SetConfig+0x79a>
 800d690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d696:	d204      	bcs.n	800d6a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d69e:	60da      	str	r2, [r3, #12]
 800d6a0:	e17c      	b.n	800d99c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d6a8:	e178      	b.n	800d99c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	69db      	ldr	r3, [r3, #28]
 800d6ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6b2:	f040 80c5 	bne.w	800d840 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d6b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d6ba:	2b20      	cmp	r3, #32
 800d6bc:	dc48      	bgt.n	800d750 <UART_SetConfig+0x848>
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	db7b      	blt.n	800d7ba <UART_SetConfig+0x8b2>
 800d6c2:	2b20      	cmp	r3, #32
 800d6c4:	d879      	bhi.n	800d7ba <UART_SetConfig+0x8b2>
 800d6c6:	a201      	add	r2, pc, #4	; (adr r2, 800d6cc <UART_SetConfig+0x7c4>)
 800d6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6cc:	0800d757 	.word	0x0800d757
 800d6d0:	0800d75f 	.word	0x0800d75f
 800d6d4:	0800d7bb 	.word	0x0800d7bb
 800d6d8:	0800d7bb 	.word	0x0800d7bb
 800d6dc:	0800d767 	.word	0x0800d767
 800d6e0:	0800d7bb 	.word	0x0800d7bb
 800d6e4:	0800d7bb 	.word	0x0800d7bb
 800d6e8:	0800d7bb 	.word	0x0800d7bb
 800d6ec:	0800d777 	.word	0x0800d777
 800d6f0:	0800d7bb 	.word	0x0800d7bb
 800d6f4:	0800d7bb 	.word	0x0800d7bb
 800d6f8:	0800d7bb 	.word	0x0800d7bb
 800d6fc:	0800d7bb 	.word	0x0800d7bb
 800d700:	0800d7bb 	.word	0x0800d7bb
 800d704:	0800d7bb 	.word	0x0800d7bb
 800d708:	0800d7bb 	.word	0x0800d7bb
 800d70c:	0800d787 	.word	0x0800d787
 800d710:	0800d7bb 	.word	0x0800d7bb
 800d714:	0800d7bb 	.word	0x0800d7bb
 800d718:	0800d7bb 	.word	0x0800d7bb
 800d71c:	0800d7bb 	.word	0x0800d7bb
 800d720:	0800d7bb 	.word	0x0800d7bb
 800d724:	0800d7bb 	.word	0x0800d7bb
 800d728:	0800d7bb 	.word	0x0800d7bb
 800d72c:	0800d7bb 	.word	0x0800d7bb
 800d730:	0800d7bb 	.word	0x0800d7bb
 800d734:	0800d7bb 	.word	0x0800d7bb
 800d738:	0800d7bb 	.word	0x0800d7bb
 800d73c:	0800d7bb 	.word	0x0800d7bb
 800d740:	0800d7bb 	.word	0x0800d7bb
 800d744:	0800d7bb 	.word	0x0800d7bb
 800d748:	0800d7bb 	.word	0x0800d7bb
 800d74c:	0800d7ad 	.word	0x0800d7ad
 800d750:	2b40      	cmp	r3, #64	; 0x40
 800d752:	d02e      	beq.n	800d7b2 <UART_SetConfig+0x8aa>
 800d754:	e031      	b.n	800d7ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d756:	f7fb fb57 	bl	8008e08 <HAL_RCC_GetPCLK1Freq>
 800d75a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d75c:	e033      	b.n	800d7c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d75e:	f7fb fb69 	bl	8008e34 <HAL_RCC_GetPCLK2Freq>
 800d762:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d764:	e02f      	b.n	800d7c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fc fad4 	bl	8009d18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d774:	e027      	b.n	800d7c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d776:	f107 0318 	add.w	r3, r7, #24
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fc fc20 	bl	8009fc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d784:	e01f      	b.n	800d7c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d786:	4b2d      	ldr	r3, [pc, #180]	; (800d83c <UART_SetConfig+0x934>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f003 0320 	and.w	r3, r3, #32
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d009      	beq.n	800d7a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d792:	4b2a      	ldr	r3, [pc, #168]	; (800d83c <UART_SetConfig+0x934>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	08db      	lsrs	r3, r3, #3
 800d798:	f003 0303 	and.w	r3, r3, #3
 800d79c:	4a24      	ldr	r2, [pc, #144]	; (800d830 <UART_SetConfig+0x928>)
 800d79e:	fa22 f303 	lsr.w	r3, r2, r3
 800d7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7a4:	e00f      	b.n	800d7c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d7a6:	4b22      	ldr	r3, [pc, #136]	; (800d830 <UART_SetConfig+0x928>)
 800d7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7aa:	e00c      	b.n	800d7c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7ac:	4b21      	ldr	r3, [pc, #132]	; (800d834 <UART_SetConfig+0x92c>)
 800d7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7b0:	e009      	b.n	800d7c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7b8:	e005      	b.n	800d7c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d7c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 80e7 	beq.w	800d99c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d2:	4a19      	ldr	r2, [pc, #100]	; (800d838 <UART_SetConfig+0x930>)
 800d7d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7e0:	005a      	lsls	r2, r3, #1
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	085b      	lsrs	r3, r3, #1
 800d7e8:	441a      	add	r2, r3
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f6:	2b0f      	cmp	r3, #15
 800d7f8:	d916      	bls.n	800d828 <UART_SetConfig+0x920>
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d800:	d212      	bcs.n	800d828 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d804:	b29b      	uxth	r3, r3
 800d806:	f023 030f 	bic.w	r3, r3, #15
 800d80a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80e:	085b      	lsrs	r3, r3, #1
 800d810:	b29b      	uxth	r3, r3
 800d812:	f003 0307 	and.w	r3, r3, #7
 800d816:	b29a      	uxth	r2, r3
 800d818:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d81a:	4313      	orrs	r3, r2
 800d81c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d824:	60da      	str	r2, [r3, #12]
 800d826:	e0b9      	b.n	800d99c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d828:	2301      	movs	r3, #1
 800d82a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d82e:	e0b5      	b.n	800d99c <UART_SetConfig+0xa94>
 800d830:	03d09000 	.word	0x03d09000
 800d834:	003d0900 	.word	0x003d0900
 800d838:	08012308 	.word	0x08012308
 800d83c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d840:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d844:	2b20      	cmp	r3, #32
 800d846:	dc49      	bgt.n	800d8dc <UART_SetConfig+0x9d4>
 800d848:	2b00      	cmp	r3, #0
 800d84a:	db7c      	blt.n	800d946 <UART_SetConfig+0xa3e>
 800d84c:	2b20      	cmp	r3, #32
 800d84e:	d87a      	bhi.n	800d946 <UART_SetConfig+0xa3e>
 800d850:	a201      	add	r2, pc, #4	; (adr r2, 800d858 <UART_SetConfig+0x950>)
 800d852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d856:	bf00      	nop
 800d858:	0800d8e3 	.word	0x0800d8e3
 800d85c:	0800d8eb 	.word	0x0800d8eb
 800d860:	0800d947 	.word	0x0800d947
 800d864:	0800d947 	.word	0x0800d947
 800d868:	0800d8f3 	.word	0x0800d8f3
 800d86c:	0800d947 	.word	0x0800d947
 800d870:	0800d947 	.word	0x0800d947
 800d874:	0800d947 	.word	0x0800d947
 800d878:	0800d903 	.word	0x0800d903
 800d87c:	0800d947 	.word	0x0800d947
 800d880:	0800d947 	.word	0x0800d947
 800d884:	0800d947 	.word	0x0800d947
 800d888:	0800d947 	.word	0x0800d947
 800d88c:	0800d947 	.word	0x0800d947
 800d890:	0800d947 	.word	0x0800d947
 800d894:	0800d947 	.word	0x0800d947
 800d898:	0800d913 	.word	0x0800d913
 800d89c:	0800d947 	.word	0x0800d947
 800d8a0:	0800d947 	.word	0x0800d947
 800d8a4:	0800d947 	.word	0x0800d947
 800d8a8:	0800d947 	.word	0x0800d947
 800d8ac:	0800d947 	.word	0x0800d947
 800d8b0:	0800d947 	.word	0x0800d947
 800d8b4:	0800d947 	.word	0x0800d947
 800d8b8:	0800d947 	.word	0x0800d947
 800d8bc:	0800d947 	.word	0x0800d947
 800d8c0:	0800d947 	.word	0x0800d947
 800d8c4:	0800d947 	.word	0x0800d947
 800d8c8:	0800d947 	.word	0x0800d947
 800d8cc:	0800d947 	.word	0x0800d947
 800d8d0:	0800d947 	.word	0x0800d947
 800d8d4:	0800d947 	.word	0x0800d947
 800d8d8:	0800d939 	.word	0x0800d939
 800d8dc:	2b40      	cmp	r3, #64	; 0x40
 800d8de:	d02e      	beq.n	800d93e <UART_SetConfig+0xa36>
 800d8e0:	e031      	b.n	800d946 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8e2:	f7fb fa91 	bl	8008e08 <HAL_RCC_GetPCLK1Freq>
 800d8e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8e8:	e033      	b.n	800d952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d8ea:	f7fb faa3 	bl	8008e34 <HAL_RCC_GetPCLK2Freq>
 800d8ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d8f0:	e02f      	b.n	800d952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fc fa0e 	bl	8009d18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d900:	e027      	b.n	800d952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d902:	f107 0318 	add.w	r3, r7, #24
 800d906:	4618      	mov	r0, r3
 800d908:	f7fc fb5a 	bl	8009fc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d910:	e01f      	b.n	800d952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d912:	4b2d      	ldr	r3, [pc, #180]	; (800d9c8 <UART_SetConfig+0xac0>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f003 0320 	and.w	r3, r3, #32
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d009      	beq.n	800d932 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d91e:	4b2a      	ldr	r3, [pc, #168]	; (800d9c8 <UART_SetConfig+0xac0>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	08db      	lsrs	r3, r3, #3
 800d924:	f003 0303 	and.w	r3, r3, #3
 800d928:	4a28      	ldr	r2, [pc, #160]	; (800d9cc <UART_SetConfig+0xac4>)
 800d92a:	fa22 f303 	lsr.w	r3, r2, r3
 800d92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d930:	e00f      	b.n	800d952 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d932:	4b26      	ldr	r3, [pc, #152]	; (800d9cc <UART_SetConfig+0xac4>)
 800d934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d936:	e00c      	b.n	800d952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d938:	4b25      	ldr	r3, [pc, #148]	; (800d9d0 <UART_SetConfig+0xac8>)
 800d93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d93c:	e009      	b.n	800d952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d93e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d944:	e005      	b.n	800d952 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d946:	2300      	movs	r3, #0
 800d948:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d94a:	2301      	movs	r3, #1
 800d94c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d950:	bf00      	nop
    }

    if (pclk != 0U)
 800d952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d954:	2b00      	cmp	r3, #0
 800d956:	d021      	beq.n	800d99c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95c:	4a1d      	ldr	r2, [pc, #116]	; (800d9d4 <UART_SetConfig+0xacc>)
 800d95e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d962:	461a      	mov	r2, r3
 800d964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d966:	fbb3 f2f2 	udiv	r2, r3, r2
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	085b      	lsrs	r3, r3, #1
 800d970:	441a      	add	r2, r3
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	fbb2 f3f3 	udiv	r3, r2, r3
 800d97a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97e:	2b0f      	cmp	r3, #15
 800d980:	d909      	bls.n	800d996 <UART_SetConfig+0xa8e>
 800d982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d988:	d205      	bcs.n	800d996 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	60da      	str	r2, [r3, #12]
 800d994:	e002      	b.n	800d99c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d9b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3748      	adds	r7, #72	; 0x48
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9c6:	bf00      	nop
 800d9c8:	58024400 	.word	0x58024400
 800d9cc:	03d09000 	.word	0x03d09000
 800d9d0:	003d0900 	.word	0x003d0900
 800d9d4:	08012308 	.word	0x08012308

0800d9d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9e4:	f003 0301 	and.w	r3, r3, #1
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00a      	beq.n	800da02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	430a      	orrs	r2, r1
 800da00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da06:	f003 0302 	and.w	r3, r3, #2
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00a      	beq.n	800da24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	430a      	orrs	r2, r1
 800da22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da28:	f003 0304 	and.w	r3, r3, #4
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d00a      	beq.n	800da46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	430a      	orrs	r2, r1
 800da44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da4a:	f003 0308 	and.w	r3, r3, #8
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d00a      	beq.n	800da68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	430a      	orrs	r2, r1
 800da66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da6c:	f003 0310 	and.w	r3, r3, #16
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00a      	beq.n	800da8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	430a      	orrs	r2, r1
 800da88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da8e:	f003 0320 	and.w	r3, r3, #32
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00a      	beq.n	800daac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	689b      	ldr	r3, [r3, #8]
 800da9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	430a      	orrs	r2, r1
 800daaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d01a      	beq.n	800daee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	430a      	orrs	r2, r1
 800dacc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dad6:	d10a      	bne.n	800daee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	430a      	orrs	r2, r1
 800daec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00a      	beq.n	800db10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	430a      	orrs	r2, r1
 800db0e:	605a      	str	r2, [r3, #4]
  }
}
 800db10:	bf00      	nop
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b086      	sub	sp, #24
 800db20:	af02      	add	r7, sp, #8
 800db22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2200      	movs	r2, #0
 800db28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db2c:	f7f9 f8c6 	bl	8006cbc <HAL_GetTick>
 800db30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f003 0308 	and.w	r3, r3, #8
 800db3c:	2b08      	cmp	r3, #8
 800db3e:	d10e      	bne.n	800db5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2200      	movs	r2, #0
 800db4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 f82f 	bl	800dbb2 <UART_WaitOnFlagUntilTimeout>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d001      	beq.n	800db5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db5a:	2303      	movs	r3, #3
 800db5c:	e025      	b.n	800dbaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f003 0304 	and.w	r3, r3, #4
 800db68:	2b04      	cmp	r3, #4
 800db6a:	d10e      	bne.n	800db8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f819 	bl	800dbb2 <UART_WaitOnFlagUntilTimeout>
 800db80:	4603      	mov	r3, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	d001      	beq.n	800db8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db86:	2303      	movs	r3, #3
 800db88:	e00f      	b.n	800dbaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2220      	movs	r2, #32
 800db8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2220      	movs	r2, #32
 800db96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dba8:	2300      	movs	r3, #0
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b09c      	sub	sp, #112	; 0x70
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	60f8      	str	r0, [r7, #12]
 800dbba:	60b9      	str	r1, [r7, #8]
 800dbbc:	603b      	str	r3, [r7, #0]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbc2:	e0a9      	b.n	800dd18 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbca:	f000 80a5 	beq.w	800dd18 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbce:	f7f9 f875 	bl	8006cbc <HAL_GetTick>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d302      	bcc.n	800dbe4 <UART_WaitOnFlagUntilTimeout+0x32>
 800dbde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d140      	bne.n	800dc66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbec:	e853 3f00 	ldrex	r3, [r3]
 800dbf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dbf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dbf8:	667b      	str	r3, [r7, #100]	; 0x64
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	461a      	mov	r2, r3
 800dc00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc0a:	e841 2300 	strex	r3, r2, [r1]
 800dc0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dc10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d1e6      	bne.n	800dbe4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc20:	e853 3f00 	ldrex	r3, [r3]
 800dc24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc28:	f023 0301 	bic.w	r3, r3, #1
 800dc2c:	663b      	str	r3, [r7, #96]	; 0x60
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	3308      	adds	r3, #8
 800dc34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc36:	64ba      	str	r2, [r7, #72]	; 0x48
 800dc38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc3e:	e841 2300 	strex	r3, r2, [r1]
 800dc42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1e5      	bne.n	800dc16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2220      	movs	r2, #32
 800dc56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dc62:	2303      	movs	r3, #3
 800dc64:	e069      	b.n	800dd3a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f003 0304 	and.w	r3, r3, #4
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d051      	beq.n	800dd18 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	69db      	ldr	r3, [r3, #28]
 800dc7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc82:	d149      	bne.n	800dd18 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	e853 3f00 	ldrex	r3, [r3]
 800dc9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dca2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcac:	637b      	str	r3, [r7, #52]	; 0x34
 800dcae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dcb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcb4:	e841 2300 	strex	r3, r2, [r1]
 800dcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1e6      	bne.n	800dc8e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	3308      	adds	r3, #8
 800dcc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	e853 3f00 	ldrex	r3, [r3]
 800dcce:	613b      	str	r3, [r7, #16]
   return(result);
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	f023 0301 	bic.w	r3, r3, #1
 800dcd6:	66bb      	str	r3, [r7, #104]	; 0x68
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	3308      	adds	r3, #8
 800dcde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dce0:	623a      	str	r2, [r7, #32]
 800dce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce4:	69f9      	ldr	r1, [r7, #28]
 800dce6:	6a3a      	ldr	r2, [r7, #32]
 800dce8:	e841 2300 	strex	r3, r2, [r1]
 800dcec:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcee:	69bb      	ldr	r3, [r7, #24]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d1e5      	bne.n	800dcc0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2220      	movs	r2, #32
 800dcf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2220      	movs	r2, #32
 800dd00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2220      	movs	r2, #32
 800dd08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dd14:	2303      	movs	r3, #3
 800dd16:	e010      	b.n	800dd3a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	69da      	ldr	r2, [r3, #28]
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	4013      	ands	r3, r2
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	bf0c      	ite	eq
 800dd28:	2301      	moveq	r3, #1
 800dd2a:	2300      	movne	r3, #0
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	461a      	mov	r2, r3
 800dd30:	79fb      	ldrb	r3, [r7, #7]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	f43f af46 	beq.w	800dbc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3770      	adds	r7, #112	; 0x70
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
	...

0800dd44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b0a3      	sub	sp, #140	; 0x8c
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	4613      	mov	r3, r2
 800dd50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	68ba      	ldr	r2, [r7, #8]
 800dd56:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	88fa      	ldrh	r2, [r7, #6]
 800dd5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	88fa      	ldrh	r2, [r7, #6]
 800dd64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd76:	d10e      	bne.n	800dd96 <UART_Start_Receive_IT+0x52>
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d105      	bne.n	800dd8c <UART_Start_Receive_IT+0x48>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dd86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dd8a:	e02d      	b.n	800dde8 <UART_Start_Receive_IT+0xa4>
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	22ff      	movs	r2, #255	; 0xff
 800dd90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dd94:	e028      	b.n	800dde8 <UART_Start_Receive_IT+0xa4>
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10d      	bne.n	800ddba <UART_Start_Receive_IT+0x76>
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	691b      	ldr	r3, [r3, #16]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d104      	bne.n	800ddb0 <UART_Start_Receive_IT+0x6c>
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	22ff      	movs	r2, #255	; 0xff
 800ddaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ddae:	e01b      	b.n	800dde8 <UART_Start_Receive_IT+0xa4>
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	227f      	movs	r2, #127	; 0x7f
 800ddb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ddb8:	e016      	b.n	800dde8 <UART_Start_Receive_IT+0xa4>
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ddc2:	d10d      	bne.n	800dde0 <UART_Start_Receive_IT+0x9c>
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d104      	bne.n	800ddd6 <UART_Start_Receive_IT+0x92>
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	227f      	movs	r2, #127	; 0x7f
 800ddd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ddd4:	e008      	b.n	800dde8 <UART_Start_Receive_IT+0xa4>
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	223f      	movs	r2, #63	; 0x3f
 800ddda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ddde:	e003      	b.n	800dde8 <UART_Start_Receive_IT+0xa4>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2200      	movs	r2, #0
 800dde4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2222      	movs	r2, #34	; 0x22
 800ddf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	3308      	adds	r3, #8
 800ddfe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de02:	e853 3f00 	ldrex	r3, [r3]
 800de06:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800de08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de0a:	f043 0301 	orr.w	r3, r3, #1
 800de0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	3308      	adds	r3, #8
 800de18:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800de1c:	673a      	str	r2, [r7, #112]	; 0x70
 800de1e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de20:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800de22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800de24:	e841 2300 	strex	r3, r2, [r1]
 800de28:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800de2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1e3      	bne.n	800ddf8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de38:	d153      	bne.n	800dee2 <UART_Start_Receive_IT+0x19e>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800de40:	88fa      	ldrh	r2, [r7, #6]
 800de42:	429a      	cmp	r2, r3
 800de44:	d34d      	bcc.n	800dee2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de4e:	d107      	bne.n	800de60 <UART_Start_Receive_IT+0x11c>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d103      	bne.n	800de60 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	4a4b      	ldr	r2, [pc, #300]	; (800df88 <UART_Start_Receive_IT+0x244>)
 800de5c:	671a      	str	r2, [r3, #112]	; 0x70
 800de5e:	e002      	b.n	800de66 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	4a4a      	ldr	r2, [pc, #296]	; (800df8c <UART_Start_Receive_IT+0x248>)
 800de64:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2200      	movs	r2, #0
 800de6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	691b      	ldr	r3, [r3, #16]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d01a      	beq.n	800deac <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de7e:	e853 3f00 	ldrex	r3, [r3]
 800de82:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800de84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	461a      	mov	r2, r3
 800de94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de98:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de9a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dea0:	e841 2300 	strex	r3, r2, [r1]
 800dea4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d1e4      	bne.n	800de76 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	3308      	adds	r3, #8
 800deb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deb6:	e853 3f00 	ldrex	r3, [r3]
 800deba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800debc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800debe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dec2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	3308      	adds	r3, #8
 800deca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800decc:	64ba      	str	r2, [r7, #72]	; 0x48
 800dece:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ded2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ded4:	e841 2300 	strex	r3, r2, [r1]
 800ded8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800deda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1e5      	bne.n	800deac <UART_Start_Receive_IT+0x168>
 800dee0:	e04a      	b.n	800df78 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	689b      	ldr	r3, [r3, #8]
 800dee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800deea:	d107      	bne.n	800defc <UART_Start_Receive_IT+0x1b8>
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d103      	bne.n	800defc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	4a26      	ldr	r2, [pc, #152]	; (800df90 <UART_Start_Receive_IT+0x24c>)
 800def8:	671a      	str	r2, [r3, #112]	; 0x70
 800defa:	e002      	b.n	800df02 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	4a25      	ldr	r2, [pc, #148]	; (800df94 <UART_Start_Receive_IT+0x250>)
 800df00:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2200      	movs	r2, #0
 800df06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	691b      	ldr	r3, [r3, #16]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d019      	beq.n	800df46 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	e853 3f00 	ldrex	r3, [r3]
 800df1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df22:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800df26:	677b      	str	r3, [r7, #116]	; 0x74
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	461a      	mov	r2, r3
 800df2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df30:	637b      	str	r3, [r7, #52]	; 0x34
 800df32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df38:	e841 2300 	strex	r3, r2, [r1]
 800df3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800df3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1e6      	bne.n	800df12 <UART_Start_Receive_IT+0x1ce>
 800df44:	e018      	b.n	800df78 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	e853 3f00 	ldrex	r3, [r3]
 800df52:	613b      	str	r3, [r7, #16]
   return(result);
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	f043 0320 	orr.w	r3, r3, #32
 800df5a:	67bb      	str	r3, [r7, #120]	; 0x78
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	461a      	mov	r2, r3
 800df62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df64:	623b      	str	r3, [r7, #32]
 800df66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df68:	69f9      	ldr	r1, [r7, #28]
 800df6a:	6a3a      	ldr	r2, [r7, #32]
 800df6c:	e841 2300 	strex	r3, r2, [r1]
 800df70:	61bb      	str	r3, [r7, #24]
   return(result);
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d1e6      	bne.n	800df46 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	378c      	adds	r7, #140	; 0x8c
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	0800e6a1 	.word	0x0800e6a1
 800df8c:	0800e3a9 	.word	0x0800e3a9
 800df90:	0800e247 	.word	0x0800e247
 800df94:	0800e0e7 	.word	0x0800e0e7

0800df98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df98:	b480      	push	{r7}
 800df9a:	b095      	sub	sp, #84	; 0x54
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa8:	e853 3f00 	ldrex	r3, [r3]
 800dfac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dfb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	461a      	mov	r2, r3
 800dfbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfbe:	643b      	str	r3, [r7, #64]	; 0x40
 800dfc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dfc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dfc6:	e841 2300 	strex	r3, r2, [r1]
 800dfca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1e6      	bne.n	800dfa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	3308      	adds	r3, #8
 800dfd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfda:	6a3b      	ldr	r3, [r7, #32]
 800dfdc:	e853 3f00 	ldrex	r3, [r3]
 800dfe0:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfe2:	69fa      	ldr	r2, [r7, #28]
 800dfe4:	4b1e      	ldr	r3, [pc, #120]	; (800e060 <UART_EndRxTransfer+0xc8>)
 800dfe6:	4013      	ands	r3, r2
 800dfe8:	64bb      	str	r3, [r7, #72]	; 0x48
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	3308      	adds	r3, #8
 800dff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dffa:	e841 2300 	strex	r3, r2, [r1]
 800dffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e002:	2b00      	cmp	r3, #0
 800e004:	d1e5      	bne.n	800dfd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d118      	bne.n	800e040 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	e853 3f00 	ldrex	r3, [r3]
 800e01a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	f023 0310 	bic.w	r3, r3, #16
 800e022:	647b      	str	r3, [r7, #68]	; 0x44
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	461a      	mov	r2, r3
 800e02a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e02c:	61bb      	str	r3, [r7, #24]
 800e02e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e030:	6979      	ldr	r1, [r7, #20]
 800e032:	69ba      	ldr	r2, [r7, #24]
 800e034:	e841 2300 	strex	r3, r2, [r1]
 800e038:	613b      	str	r3, [r7, #16]
   return(result);
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d1e6      	bne.n	800e00e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2220      	movs	r2, #32
 800e044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2200      	movs	r2, #0
 800e052:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e054:	bf00      	nop
 800e056:	3754      	adds	r7, #84	; 0x54
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr
 800e060:	effffffe 	.word	0xeffffffe

0800e064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2200      	movs	r2, #0
 800e076:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f7fe ff2a 	bl	800cedc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e088:	bf00      	nop
 800e08a:	3710      	adds	r7, #16
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b088      	sub	sp, #32
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	e853 3f00 	ldrex	r3, [r3]
 800e0a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0ac:	61fb      	str	r3, [r7, #28]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	61bb      	str	r3, [r7, #24]
 800e0b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ba:	6979      	ldr	r1, [r7, #20]
 800e0bc:	69ba      	ldr	r2, [r7, #24]
 800e0be:	e841 2300 	strex	r3, r2, [r1]
 800e0c2:	613b      	str	r3, [r7, #16]
   return(result);
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1e6      	bne.n	800e098 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2220      	movs	r2, #32
 800e0ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7f3 ff9f 	bl	800201c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0de:	bf00      	nop
 800e0e0:	3720      	adds	r7, #32
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b096      	sub	sp, #88	; 0x58
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e0f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0fe:	2b22      	cmp	r3, #34	; 0x22
 800e100:	f040 8095 	bne.w	800e22e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e10e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e112:	b2d9      	uxtb	r1, r3
 800e114:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e118:	b2da      	uxtb	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e11e:	400a      	ands	r2, r1
 800e120:	b2d2      	uxtb	r2, r2
 800e122:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e128:	1c5a      	adds	r2, r3, #1
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e134:	b29b      	uxth	r3, r3
 800e136:	3b01      	subs	r3, #1
 800e138:	b29a      	uxth	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e146:	b29b      	uxth	r3, r3
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d178      	bne.n	800e23e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e154:	e853 3f00 	ldrex	r3, [r3]
 800e158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e15c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e160:	653b      	str	r3, [r7, #80]	; 0x50
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	461a      	mov	r2, r3
 800e168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e16a:	647b      	str	r3, [r7, #68]	; 0x44
 800e16c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e16e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e172:	e841 2300 	strex	r3, r2, [r1]
 800e176:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d1e6      	bne.n	800e14c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	3308      	adds	r3, #8
 800e184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e188:	e853 3f00 	ldrex	r3, [r3]
 800e18c:	623b      	str	r3, [r7, #32]
   return(result);
 800e18e:	6a3b      	ldr	r3, [r7, #32]
 800e190:	f023 0301 	bic.w	r3, r3, #1
 800e194:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	3308      	adds	r3, #8
 800e19c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e19e:	633a      	str	r2, [r7, #48]	; 0x30
 800e1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1a6:	e841 2300 	strex	r3, r2, [r1]
 800e1aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d1e5      	bne.n	800e17e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2220      	movs	r2, #32
 800e1b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d12e      	bne.n	800e226 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	e853 3f00 	ldrex	r3, [r3]
 800e1da:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f023 0310 	bic.w	r3, r3, #16
 800e1e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1ec:	61fb      	str	r3, [r7, #28]
 800e1ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f0:	69b9      	ldr	r1, [r7, #24]
 800e1f2:	69fa      	ldr	r2, [r7, #28]
 800e1f4:	e841 2300 	strex	r3, r2, [r1]
 800e1f8:	617b      	str	r3, [r7, #20]
   return(result);
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1e6      	bne.n	800e1ce <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	69db      	ldr	r3, [r3, #28]
 800e206:	f003 0310 	and.w	r3, r3, #16
 800e20a:	2b10      	cmp	r3, #16
 800e20c:	d103      	bne.n	800e216 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2210      	movs	r2, #16
 800e214:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e21c:	4619      	mov	r1, r3
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f7fe fe66 	bl	800cef0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e224:	e00b      	b.n	800e23e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7f3 fe94 	bl	8001f54 <HAL_UART_RxCpltCallback>
}
 800e22c:	e007      	b.n	800e23e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	699a      	ldr	r2, [r3, #24]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f042 0208 	orr.w	r2, r2, #8
 800e23c:	619a      	str	r2, [r3, #24]
}
 800e23e:	bf00      	nop
 800e240:	3758      	adds	r7, #88	; 0x58
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b096      	sub	sp, #88	; 0x58
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e254:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e25e:	2b22      	cmp	r3, #34	; 0x22
 800e260:	f040 8095 	bne.w	800e38e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e272:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e274:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e278:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e27c:	4013      	ands	r3, r2
 800e27e:	b29a      	uxth	r2, r3
 800e280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e282:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e288:	1c9a      	adds	r2, r3, #2
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e294:	b29b      	uxth	r3, r3
 800e296:	3b01      	subs	r3, #1
 800e298:	b29a      	uxth	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d178      	bne.n	800e39e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2b4:	e853 3f00 	ldrex	r3, [r3]
 800e2b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e2c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2ca:	643b      	str	r3, [r7, #64]	; 0x40
 800e2cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e2d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e2d2:	e841 2300 	strex	r3, r2, [r1]
 800e2d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1e6      	bne.n	800e2ac <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	3308      	adds	r3, #8
 800e2e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e6:	6a3b      	ldr	r3, [r7, #32]
 800e2e8:	e853 3f00 	ldrex	r3, [r3]
 800e2ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2ee:	69fb      	ldr	r3, [r7, #28]
 800e2f0:	f023 0301 	bic.w	r3, r3, #1
 800e2f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3308      	adds	r3, #8
 800e2fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e300:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e306:	e841 2300 	strex	r3, r2, [r1]
 800e30a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d1e5      	bne.n	800e2de <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2220      	movs	r2, #32
 800e316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2200      	movs	r2, #0
 800e31e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e324:	2b01      	cmp	r3, #1
 800e326:	d12e      	bne.n	800e386 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	e853 3f00 	ldrex	r3, [r3]
 800e33a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	f023 0310 	bic.w	r3, r3, #16
 800e342:	647b      	str	r3, [r7, #68]	; 0x44
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	461a      	mov	r2, r3
 800e34a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e34c:	61bb      	str	r3, [r7, #24]
 800e34e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e350:	6979      	ldr	r1, [r7, #20]
 800e352:	69ba      	ldr	r2, [r7, #24]
 800e354:	e841 2300 	strex	r3, r2, [r1]
 800e358:	613b      	str	r3, [r7, #16]
   return(result);
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d1e6      	bne.n	800e32e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	69db      	ldr	r3, [r3, #28]
 800e366:	f003 0310 	and.w	r3, r3, #16
 800e36a:	2b10      	cmp	r3, #16
 800e36c:	d103      	bne.n	800e376 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2210      	movs	r2, #16
 800e374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e37c:	4619      	mov	r1, r3
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7fe fdb6 	bl	800cef0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e384:	e00b      	b.n	800e39e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f7f3 fde4 	bl	8001f54 <HAL_UART_RxCpltCallback>
}
 800e38c:	e007      	b.n	800e39e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	699a      	ldr	r2, [r3, #24]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f042 0208 	orr.w	r2, r2, #8
 800e39c:	619a      	str	r2, [r3, #24]
}
 800e39e:	bf00      	nop
 800e3a0:	3758      	adds	r7, #88	; 0x58
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
	...

0800e3a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b0a6      	sub	sp, #152	; 0x98
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3b6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	69db      	ldr	r3, [r3, #28]
 800e3c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3de:	2b22      	cmp	r3, #34	; 0x22
 800e3e0:	f040 814d 	bne.w	800e67e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e3ea:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e3ee:	e0f4      	b.n	800e5da <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e3fa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e3fe:	b2d9      	uxtb	r1, r3
 800e400:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e404:	b2da      	uxtb	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e40a:	400a      	ands	r2, r1
 800e40c:	b2d2      	uxtb	r2, r2
 800e40e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e414:	1c5a      	adds	r2, r3, #1
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e420:	b29b      	uxth	r3, r3
 800e422:	3b01      	subs	r3, #1
 800e424:	b29a      	uxth	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	69db      	ldr	r3, [r3, #28]
 800e432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e436:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e43a:	f003 0307 	and.w	r3, r3, #7
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d053      	beq.n	800e4ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e442:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e446:	f003 0301 	and.w	r3, r3, #1
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d011      	beq.n	800e472 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e44e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00b      	beq.n	800e472 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2201      	movs	r2, #1
 800e460:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e468:	f043 0201 	orr.w	r2, r3, #1
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e472:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e476:	f003 0302 	and.w	r3, r3, #2
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d011      	beq.n	800e4a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e47e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e482:	f003 0301 	and.w	r3, r3, #1
 800e486:	2b00      	cmp	r3, #0
 800e488:	d00b      	beq.n	800e4a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2202      	movs	r2, #2
 800e490:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e498:	f043 0204 	orr.w	r2, r3, #4
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4a6:	f003 0304 	and.w	r3, r3, #4
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d011      	beq.n	800e4d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e4ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4b2:	f003 0301 	and.w	r3, r3, #1
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00b      	beq.n	800e4d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	2204      	movs	r2, #4
 800e4c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4c8:	f043 0202 	orr.w	r2, r3, #2
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d006      	beq.n	800e4ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f7fe fcfd 	bl	800cedc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d171      	bne.n	800e5da <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4fe:	e853 3f00 	ldrex	r3, [r3]
 800e502:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e50a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	461a      	mov	r2, r3
 800e514:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e518:	66bb      	str	r3, [r7, #104]	; 0x68
 800e51a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e51c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e51e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e520:	e841 2300 	strex	r3, r2, [r1]
 800e524:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1e4      	bne.n	800e4f6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	3308      	adds	r3, #8
 800e532:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e536:	e853 3f00 	ldrex	r3, [r3]
 800e53a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e53c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e53e:	4b56      	ldr	r3, [pc, #344]	; (800e698 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800e540:	4013      	ands	r3, r2
 800e542:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	3308      	adds	r3, #8
 800e54a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e54c:	657a      	str	r2, [r7, #84]	; 0x54
 800e54e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e550:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e552:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e554:	e841 2300 	strex	r3, r2, [r1]
 800e558:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1e5      	bne.n	800e52c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2220      	movs	r2, #32
 800e564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e572:	2b01      	cmp	r3, #1
 800e574:	d12e      	bne.n	800e5d4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e584:	e853 3f00 	ldrex	r3, [r3]
 800e588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58c:	f023 0310 	bic.w	r3, r3, #16
 800e590:	67bb      	str	r3, [r7, #120]	; 0x78
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	461a      	mov	r2, r3
 800e598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e59a:	643b      	str	r3, [r7, #64]	; 0x40
 800e59c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5a2:	e841 2300 	strex	r3, r2, [r1]
 800e5a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d1e6      	bne.n	800e57c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	69db      	ldr	r3, [r3, #28]
 800e5b4:	f003 0310 	and.w	r3, r3, #16
 800e5b8:	2b10      	cmp	r3, #16
 800e5ba:	d103      	bne.n	800e5c4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2210      	movs	r2, #16
 800e5c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7fe fc8f 	bl	800cef0 <HAL_UARTEx_RxEventCallback>
 800e5d2:	e002      	b.n	800e5da <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7f3 fcbd 	bl	8001f54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e5da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d006      	beq.n	800e5f0 <UART_RxISR_8BIT_FIFOEN+0x248>
 800e5e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e5e6:	f003 0320 	and.w	r3, r3, #32
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f47f af00 	bne.w	800e3f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e5fa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d045      	beq.n	800e68e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e608:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d23e      	bcs.n	800e68e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	3308      	adds	r3, #8
 800e616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e618:	6a3b      	ldr	r3, [r7, #32]
 800e61a:	e853 3f00 	ldrex	r3, [r3]
 800e61e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e620:	69fb      	ldr	r3, [r7, #28]
 800e622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e626:	673b      	str	r3, [r7, #112]	; 0x70
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	3308      	adds	r3, #8
 800e62e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e630:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e638:	e841 2300 	strex	r3, r2, [r1]
 800e63c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e640:	2b00      	cmp	r3, #0
 800e642:	d1e5      	bne.n	800e610 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	4a15      	ldr	r2, [pc, #84]	; (800e69c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e648:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	e853 3f00 	ldrex	r3, [r3]
 800e656:	60bb      	str	r3, [r7, #8]
   return(result);
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	f043 0320 	orr.w	r3, r3, #32
 800e65e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	461a      	mov	r2, r3
 800e666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e668:	61bb      	str	r3, [r7, #24]
 800e66a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66c:	6979      	ldr	r1, [r7, #20]
 800e66e:	69ba      	ldr	r2, [r7, #24]
 800e670:	e841 2300 	strex	r3, r2, [r1]
 800e674:	613b      	str	r3, [r7, #16]
   return(result);
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1e6      	bne.n	800e64a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e67c:	e007      	b.n	800e68e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	699a      	ldr	r2, [r3, #24]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f042 0208 	orr.w	r2, r2, #8
 800e68c:	619a      	str	r2, [r3, #24]
}
 800e68e:	bf00      	nop
 800e690:	3798      	adds	r7, #152	; 0x98
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	effffffe 	.word	0xeffffffe
 800e69c:	0800e0e7 	.word	0x0800e0e7

0800e6a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b0a8      	sub	sp, #160	; 0xa0
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6ae:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	69db      	ldr	r3, [r3, #28]
 800e6b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	689b      	ldr	r3, [r3, #8]
 800e6cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6d6:	2b22      	cmp	r3, #34	; 0x22
 800e6d8:	f040 8151 	bne.w	800e97e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e6e2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6e6:	e0f8      	b.n	800e8da <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ee:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e6fa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e6fe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e702:	4013      	ands	r3, r2
 800e704:	b29a      	uxth	r2, r3
 800e706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e70a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e710:	1c9a      	adds	r2, r3, #2
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	3b01      	subs	r3, #1
 800e720:	b29a      	uxth	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	69db      	ldr	r3, [r3, #28]
 800e72e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e732:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e736:	f003 0307 	and.w	r3, r3, #7
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d053      	beq.n	800e7e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e73e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e742:	f003 0301 	and.w	r3, r3, #1
 800e746:	2b00      	cmp	r3, #0
 800e748:	d011      	beq.n	800e76e <UART_RxISR_16BIT_FIFOEN+0xce>
 800e74a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e74e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00b      	beq.n	800e76e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2201      	movs	r2, #1
 800e75c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e764:	f043 0201 	orr.w	r2, r3, #1
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e76e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e772:	f003 0302 	and.w	r3, r3, #2
 800e776:	2b00      	cmp	r3, #0
 800e778:	d011      	beq.n	800e79e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e77a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e77e:	f003 0301 	and.w	r3, r3, #1
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00b      	beq.n	800e79e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2202      	movs	r2, #2
 800e78c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e794:	f043 0204 	orr.w	r2, r3, #4
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e79e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e7a2:	f003 0304 	and.w	r3, r3, #4
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d011      	beq.n	800e7ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e7aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e7ae:	f003 0301 	and.w	r3, r3, #1
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d00b      	beq.n	800e7ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2204      	movs	r2, #4
 800e7bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7c4:	f043 0202 	orr.w	r2, r3, #2
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d006      	beq.n	800e7e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7fe fb7f 	bl	800cedc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d173      	bne.n	800e8da <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7fa:	e853 3f00 	ldrex	r3, [r3]
 800e7fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	461a      	mov	r2, r3
 800e810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e814:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e816:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e818:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e81a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e81c:	e841 2300 	strex	r3, r2, [r1]
 800e820:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1e4      	bne.n	800e7f2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	3308      	adds	r3, #8
 800e82e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e832:	e853 3f00 	ldrex	r3, [r3]
 800e836:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e83a:	4b57      	ldr	r3, [pc, #348]	; (800e998 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800e83c:	4013      	ands	r3, r2
 800e83e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	3308      	adds	r3, #8
 800e848:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e84c:	65ba      	str	r2, [r7, #88]	; 0x58
 800e84e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e854:	e841 2300 	strex	r3, r2, [r1]
 800e858:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e85a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d1e3      	bne.n	800e828 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2220      	movs	r2, #32
 800e864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e872:	2b01      	cmp	r3, #1
 800e874:	d12e      	bne.n	800e8d4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e884:	e853 3f00 	ldrex	r3, [r3]
 800e888:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e88c:	f023 0310 	bic.w	r3, r3, #16
 800e890:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e89a:	647b      	str	r3, [r7, #68]	; 0x44
 800e89c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e8a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8a2:	e841 2300 	strex	r3, r2, [r1]
 800e8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1e6      	bne.n	800e87c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	69db      	ldr	r3, [r3, #28]
 800e8b4:	f003 0310 	and.w	r3, r3, #16
 800e8b8:	2b10      	cmp	r3, #16
 800e8ba:	d103      	bne.n	800e8c4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2210      	movs	r2, #16
 800e8c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f7fe fb0f 	bl	800cef0 <HAL_UARTEx_RxEventCallback>
 800e8d2:	e002      	b.n	800e8da <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7f3 fb3d 	bl	8001f54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e8da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d006      	beq.n	800e8f0 <UART_RxISR_16BIT_FIFOEN+0x250>
 800e8e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e8e6:	f003 0320 	and.w	r3, r3, #32
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	f47f aefc 	bne.w	800e6e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e8f6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e8fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d045      	beq.n	800e98e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e908:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d23e      	bcs.n	800e98e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	3308      	adds	r3, #8
 800e916:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91a:	e853 3f00 	ldrex	r3, [r3]
 800e91e:	623b      	str	r3, [r7, #32]
   return(result);
 800e920:	6a3b      	ldr	r3, [r7, #32]
 800e922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e926:	677b      	str	r3, [r7, #116]	; 0x74
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	3308      	adds	r3, #8
 800e92e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e930:	633a      	str	r2, [r7, #48]	; 0x30
 800e932:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e934:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e938:	e841 2300 	strex	r3, r2, [r1]
 800e93c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	2b00      	cmp	r3, #0
 800e942:	d1e5      	bne.n	800e910 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4a15      	ldr	r2, [pc, #84]	; (800e99c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e948:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	e853 3f00 	ldrex	r3, [r3]
 800e956:	60fb      	str	r3, [r7, #12]
   return(result);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f043 0320 	orr.w	r3, r3, #32
 800e95e:	673b      	str	r3, [r7, #112]	; 0x70
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	461a      	mov	r2, r3
 800e966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e968:	61fb      	str	r3, [r7, #28]
 800e96a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e96c:	69b9      	ldr	r1, [r7, #24]
 800e96e:	69fa      	ldr	r2, [r7, #28]
 800e970:	e841 2300 	strex	r3, r2, [r1]
 800e974:	617b      	str	r3, [r7, #20]
   return(result);
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d1e6      	bne.n	800e94a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e97c:	e007      	b.n	800e98e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	699a      	ldr	r2, [r3, #24]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f042 0208 	orr.w	r2, r2, #8
 800e98c:	619a      	str	r2, [r3, #24]
}
 800e98e:	bf00      	nop
 800e990:	37a0      	adds	r7, #160	; 0xa0
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	effffffe 	.word	0xeffffffe
 800e99c:	0800e247 	.word	0x0800e247

0800e9a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e9a8:	bf00      	nop
 800e9aa:	370c      	adds	r7, #12
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e9bc:	bf00      	nop
 800e9be:	370c      	adds	r7, #12
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e9d0:	bf00      	nop
 800e9d2:	370c      	adds	r7, #12
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d101      	bne.n	800e9f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	e027      	b.n	800ea42 <HAL_UARTEx_DisableFifoMode+0x66>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2224      	movs	r2, #36	; 0x24
 800e9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f022 0201 	bic.w	r2, r2, #1
 800ea18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ea20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2220      	movs	r2, #32
 800ea34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3714      	adds	r7, #20
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr

0800ea4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b084      	sub	sp, #16
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d101      	bne.n	800ea66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ea62:	2302      	movs	r3, #2
 800ea64:	e02d      	b.n	800eac2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2224      	movs	r2, #36	; 0x24
 800ea72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f022 0201 	bic.w	r2, r2, #1
 800ea8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	689b      	ldr	r3, [r3, #8]
 800ea94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	683a      	ldr	r2, [r7, #0]
 800ea9e:	430a      	orrs	r2, r1
 800eaa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f000 f850 	bl	800eb48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2220      	movs	r2, #32
 800eab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b084      	sub	sp, #16
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d101      	bne.n	800eae2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eade:	2302      	movs	r3, #2
 800eae0:	e02d      	b.n	800eb3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2201      	movs	r2, #1
 800eae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2224      	movs	r2, #36	; 0x24
 800eaee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f022 0201 	bic.w	r2, r2, #1
 800eb08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	683a      	ldr	r2, [r7, #0]
 800eb1a:	430a      	orrs	r2, r1
 800eb1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 f812 	bl	800eb48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2220      	movs	r2, #32
 800eb30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2200      	movs	r2, #0
 800eb38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
	...

0800eb48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d108      	bne.n	800eb6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eb68:	e031      	b.n	800ebce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eb6a:	2310      	movs	r3, #16
 800eb6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eb6e:	2310      	movs	r3, #16
 800eb70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	0e5b      	lsrs	r3, r3, #25
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	f003 0307 	and.w	r3, r3, #7
 800eb80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	0f5b      	lsrs	r3, r3, #29
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	f003 0307 	and.w	r3, r3, #7
 800eb90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb92:	7bbb      	ldrb	r3, [r7, #14]
 800eb94:	7b3a      	ldrb	r2, [r7, #12]
 800eb96:	4911      	ldr	r1, [pc, #68]	; (800ebdc <UARTEx_SetNbDataToProcess+0x94>)
 800eb98:	5c8a      	ldrb	r2, [r1, r2]
 800eb9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eb9e:	7b3a      	ldrb	r2, [r7, #12]
 800eba0:	490f      	ldr	r1, [pc, #60]	; (800ebe0 <UARTEx_SetNbDataToProcess+0x98>)
 800eba2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eba4:	fb93 f3f2 	sdiv	r3, r3, r2
 800eba8:	b29a      	uxth	r2, r3
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebb0:	7bfb      	ldrb	r3, [r7, #15]
 800ebb2:	7b7a      	ldrb	r2, [r7, #13]
 800ebb4:	4909      	ldr	r1, [pc, #36]	; (800ebdc <UARTEx_SetNbDataToProcess+0x94>)
 800ebb6:	5c8a      	ldrb	r2, [r1, r2]
 800ebb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ebbc:	7b7a      	ldrb	r2, [r7, #13]
 800ebbe:	4908      	ldr	r1, [pc, #32]	; (800ebe0 <UARTEx_SetNbDataToProcess+0x98>)
 800ebc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ebce:	bf00      	nop
 800ebd0:	3714      	adds	r7, #20
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	08012320 	.word	0x08012320
 800ebe0:	08012328 	.word	0x08012328

0800ebe4 <__errno>:
 800ebe4:	4b01      	ldr	r3, [pc, #4]	; (800ebec <__errno+0x8>)
 800ebe6:	6818      	ldr	r0, [r3, #0]
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	240000b8 	.word	0x240000b8

0800ebf0 <__libc_init_array>:
 800ebf0:	b570      	push	{r4, r5, r6, lr}
 800ebf2:	4d0d      	ldr	r5, [pc, #52]	; (800ec28 <__libc_init_array+0x38>)
 800ebf4:	4c0d      	ldr	r4, [pc, #52]	; (800ec2c <__libc_init_array+0x3c>)
 800ebf6:	1b64      	subs	r4, r4, r5
 800ebf8:	10a4      	asrs	r4, r4, #2
 800ebfa:	2600      	movs	r6, #0
 800ebfc:	42a6      	cmp	r6, r4
 800ebfe:	d109      	bne.n	800ec14 <__libc_init_array+0x24>
 800ec00:	4d0b      	ldr	r5, [pc, #44]	; (800ec30 <__libc_init_array+0x40>)
 800ec02:	4c0c      	ldr	r4, [pc, #48]	; (800ec34 <__libc_init_array+0x44>)
 800ec04:	f003 fae6 	bl	80121d4 <_init>
 800ec08:	1b64      	subs	r4, r4, r5
 800ec0a:	10a4      	asrs	r4, r4, #2
 800ec0c:	2600      	movs	r6, #0
 800ec0e:	42a6      	cmp	r6, r4
 800ec10:	d105      	bne.n	800ec1e <__libc_init_array+0x2e>
 800ec12:	bd70      	pop	{r4, r5, r6, pc}
 800ec14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec18:	4798      	blx	r3
 800ec1a:	3601      	adds	r6, #1
 800ec1c:	e7ee      	b.n	800ebfc <__libc_init_array+0xc>
 800ec1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec22:	4798      	blx	r3
 800ec24:	3601      	adds	r6, #1
 800ec26:	e7f2      	b.n	800ec0e <__libc_init_array+0x1e>
 800ec28:	08014020 	.word	0x08014020
 800ec2c:	08014020 	.word	0x08014020
 800ec30:	08014020 	.word	0x08014020
 800ec34:	08014024 	.word	0x08014024

0800ec38 <memcpy>:
 800ec38:	440a      	add	r2, r1
 800ec3a:	4291      	cmp	r1, r2
 800ec3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec40:	d100      	bne.n	800ec44 <memcpy+0xc>
 800ec42:	4770      	bx	lr
 800ec44:	b510      	push	{r4, lr}
 800ec46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec4e:	4291      	cmp	r1, r2
 800ec50:	d1f9      	bne.n	800ec46 <memcpy+0xe>
 800ec52:	bd10      	pop	{r4, pc}

0800ec54 <memset>:
 800ec54:	4402      	add	r2, r0
 800ec56:	4603      	mov	r3, r0
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d100      	bne.n	800ec5e <memset+0xa>
 800ec5c:	4770      	bx	lr
 800ec5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ec62:	e7f9      	b.n	800ec58 <memset+0x4>

0800ec64 <sulp>:
 800ec64:	b570      	push	{r4, r5, r6, lr}
 800ec66:	4604      	mov	r4, r0
 800ec68:	460d      	mov	r5, r1
 800ec6a:	4616      	mov	r6, r2
 800ec6c:	ec45 4b10 	vmov	d0, r4, r5
 800ec70:	f001 fcc8 	bl	8010604 <__ulp>
 800ec74:	b17e      	cbz	r6, 800ec96 <sulp+0x32>
 800ec76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	dd09      	ble.n	800ec96 <sulp+0x32>
 800ec82:	051b      	lsls	r3, r3, #20
 800ec84:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ec88:	2000      	movs	r0, #0
 800ec8a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ec8e:	ec41 0b17 	vmov	d7, r0, r1
 800ec92:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ec96:	bd70      	pop	{r4, r5, r6, pc}

0800ec98 <_strtod_l>:
 800ec98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec9c:	ed2d 8b0e 	vpush	{d8-d14}
 800eca0:	b097      	sub	sp, #92	; 0x5c
 800eca2:	461f      	mov	r7, r3
 800eca4:	2300      	movs	r3, #0
 800eca6:	9312      	str	r3, [sp, #72]	; 0x48
 800eca8:	4ba1      	ldr	r3, [pc, #644]	; (800ef30 <_strtod_l+0x298>)
 800ecaa:	920d      	str	r2, [sp, #52]	; 0x34
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	9307      	str	r3, [sp, #28]
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	468b      	mov	fp, r1
 800ecb6:	f7f1 fb13 	bl	80002e0 <strlen>
 800ecba:	f04f 0800 	mov.w	r8, #0
 800ecbe:	4605      	mov	r5, r0
 800ecc0:	f04f 0900 	mov.w	r9, #0
 800ecc4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ecc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ecca:	7813      	ldrb	r3, [r2, #0]
 800eccc:	2b2b      	cmp	r3, #43	; 0x2b
 800ecce:	d04d      	beq.n	800ed6c <_strtod_l+0xd4>
 800ecd0:	d83a      	bhi.n	800ed48 <_strtod_l+0xb0>
 800ecd2:	2b0d      	cmp	r3, #13
 800ecd4:	d833      	bhi.n	800ed3e <_strtod_l+0xa6>
 800ecd6:	2b08      	cmp	r3, #8
 800ecd8:	d833      	bhi.n	800ed42 <_strtod_l+0xaa>
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d03d      	beq.n	800ed5a <_strtod_l+0xc2>
 800ecde:	2300      	movs	r3, #0
 800ece0:	9308      	str	r3, [sp, #32]
 800ece2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ece4:	7833      	ldrb	r3, [r6, #0]
 800ece6:	2b30      	cmp	r3, #48	; 0x30
 800ece8:	f040 80b0 	bne.w	800ee4c <_strtod_l+0x1b4>
 800ecec:	7873      	ldrb	r3, [r6, #1]
 800ecee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ecf2:	2b58      	cmp	r3, #88	; 0x58
 800ecf4:	d167      	bne.n	800edc6 <_strtod_l+0x12e>
 800ecf6:	9b08      	ldr	r3, [sp, #32]
 800ecf8:	9301      	str	r3, [sp, #4]
 800ecfa:	ab12      	add	r3, sp, #72	; 0x48
 800ecfc:	9702      	str	r7, [sp, #8]
 800ecfe:	9300      	str	r3, [sp, #0]
 800ed00:	4a8c      	ldr	r2, [pc, #560]	; (800ef34 <_strtod_l+0x29c>)
 800ed02:	ab13      	add	r3, sp, #76	; 0x4c
 800ed04:	a911      	add	r1, sp, #68	; 0x44
 800ed06:	4620      	mov	r0, r4
 800ed08:	f000 fdf0 	bl	800f8ec <__gethex>
 800ed0c:	f010 0507 	ands.w	r5, r0, #7
 800ed10:	4607      	mov	r7, r0
 800ed12:	d005      	beq.n	800ed20 <_strtod_l+0x88>
 800ed14:	2d06      	cmp	r5, #6
 800ed16:	d12b      	bne.n	800ed70 <_strtod_l+0xd8>
 800ed18:	3601      	adds	r6, #1
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	9611      	str	r6, [sp, #68]	; 0x44
 800ed1e:	9308      	str	r3, [sp, #32]
 800ed20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	f040 854e 	bne.w	800f7c4 <_strtod_l+0xb2c>
 800ed28:	9b08      	ldr	r3, [sp, #32]
 800ed2a:	b1e3      	cbz	r3, 800ed66 <_strtod_l+0xce>
 800ed2c:	ec49 8b17 	vmov	d7, r8, r9
 800ed30:	eeb1 0b47 	vneg.f64	d0, d7
 800ed34:	b017      	add	sp, #92	; 0x5c
 800ed36:	ecbd 8b0e 	vpop	{d8-d14}
 800ed3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed3e:	2b20      	cmp	r3, #32
 800ed40:	d1cd      	bne.n	800ecde <_strtod_l+0x46>
 800ed42:	3201      	adds	r2, #1
 800ed44:	9211      	str	r2, [sp, #68]	; 0x44
 800ed46:	e7bf      	b.n	800ecc8 <_strtod_l+0x30>
 800ed48:	2b2d      	cmp	r3, #45	; 0x2d
 800ed4a:	d1c8      	bne.n	800ecde <_strtod_l+0x46>
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	9308      	str	r3, [sp, #32]
 800ed50:	1c53      	adds	r3, r2, #1
 800ed52:	9311      	str	r3, [sp, #68]	; 0x44
 800ed54:	7853      	ldrb	r3, [r2, #1]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d1c3      	bne.n	800ece2 <_strtod_l+0x4a>
 800ed5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed5c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f040 852d 	bne.w	800f7c0 <_strtod_l+0xb28>
 800ed66:	ec49 8b10 	vmov	d0, r8, r9
 800ed6a:	e7e3      	b.n	800ed34 <_strtod_l+0x9c>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	e7ee      	b.n	800ed4e <_strtod_l+0xb6>
 800ed70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ed72:	b13a      	cbz	r2, 800ed84 <_strtod_l+0xec>
 800ed74:	2135      	movs	r1, #53	; 0x35
 800ed76:	a814      	add	r0, sp, #80	; 0x50
 800ed78:	f001 fd4c 	bl	8010814 <__copybits>
 800ed7c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ed7e:	4620      	mov	r0, r4
 800ed80:	f001 f90e 	bl	800ffa0 <_Bfree>
 800ed84:	3d01      	subs	r5, #1
 800ed86:	2d04      	cmp	r5, #4
 800ed88:	d806      	bhi.n	800ed98 <_strtod_l+0x100>
 800ed8a:	e8df f005 	tbb	[pc, r5]
 800ed8e:	030a      	.short	0x030a
 800ed90:	1714      	.short	0x1714
 800ed92:	0a          	.byte	0x0a
 800ed93:	00          	.byte	0x00
 800ed94:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800ed98:	073f      	lsls	r7, r7, #28
 800ed9a:	d5c1      	bpl.n	800ed20 <_strtod_l+0x88>
 800ed9c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800eda0:	e7be      	b.n	800ed20 <_strtod_l+0x88>
 800eda2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800eda6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eda8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800edac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800edb0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800edb4:	e7f0      	b.n	800ed98 <_strtod_l+0x100>
 800edb6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800ef38 <_strtod_l+0x2a0>
 800edba:	e7ed      	b.n	800ed98 <_strtod_l+0x100>
 800edbc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800edc0:	f04f 38ff 	mov.w	r8, #4294967295
 800edc4:	e7e8      	b.n	800ed98 <_strtod_l+0x100>
 800edc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edc8:	1c5a      	adds	r2, r3, #1
 800edca:	9211      	str	r2, [sp, #68]	; 0x44
 800edcc:	785b      	ldrb	r3, [r3, #1]
 800edce:	2b30      	cmp	r3, #48	; 0x30
 800edd0:	d0f9      	beq.n	800edc6 <_strtod_l+0x12e>
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d0a4      	beq.n	800ed20 <_strtod_l+0x88>
 800edd6:	2301      	movs	r3, #1
 800edd8:	f04f 0a00 	mov.w	sl, #0
 800eddc:	9304      	str	r3, [sp, #16]
 800edde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ede0:	930a      	str	r3, [sp, #40]	; 0x28
 800ede2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ede6:	f8cd a018 	str.w	sl, [sp, #24]
 800edea:	220a      	movs	r2, #10
 800edec:	9811      	ldr	r0, [sp, #68]	; 0x44
 800edee:	7807      	ldrb	r7, [r0, #0]
 800edf0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800edf4:	b2d9      	uxtb	r1, r3
 800edf6:	2909      	cmp	r1, #9
 800edf8:	d92a      	bls.n	800ee50 <_strtod_l+0x1b8>
 800edfa:	9907      	ldr	r1, [sp, #28]
 800edfc:	462a      	mov	r2, r5
 800edfe:	f001 fe0f 	bl	8010a20 <strncmp>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	d033      	beq.n	800ee6e <_strtod_l+0x1d6>
 800ee06:	2000      	movs	r0, #0
 800ee08:	9b06      	ldr	r3, [sp, #24]
 800ee0a:	463a      	mov	r2, r7
 800ee0c:	4601      	mov	r1, r0
 800ee0e:	4607      	mov	r7, r0
 800ee10:	2a65      	cmp	r2, #101	; 0x65
 800ee12:	d001      	beq.n	800ee18 <_strtod_l+0x180>
 800ee14:	2a45      	cmp	r2, #69	; 0x45
 800ee16:	d117      	bne.n	800ee48 <_strtod_l+0x1b0>
 800ee18:	b91b      	cbnz	r3, 800ee22 <_strtod_l+0x18a>
 800ee1a:	9b04      	ldr	r3, [sp, #16]
 800ee1c:	4303      	orrs	r3, r0
 800ee1e:	d09c      	beq.n	800ed5a <_strtod_l+0xc2>
 800ee20:	2300      	movs	r3, #0
 800ee22:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800ee26:	f10b 0201 	add.w	r2, fp, #1
 800ee2a:	9211      	str	r2, [sp, #68]	; 0x44
 800ee2c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800ee30:	2a2b      	cmp	r2, #43	; 0x2b
 800ee32:	d071      	beq.n	800ef18 <_strtod_l+0x280>
 800ee34:	2a2d      	cmp	r2, #45	; 0x2d
 800ee36:	d077      	beq.n	800ef28 <_strtod_l+0x290>
 800ee38:	f04f 0e00 	mov.w	lr, #0
 800ee3c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ee40:	2d09      	cmp	r5, #9
 800ee42:	d97f      	bls.n	800ef44 <_strtod_l+0x2ac>
 800ee44:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ee48:	2500      	movs	r5, #0
 800ee4a:	e09b      	b.n	800ef84 <_strtod_l+0x2ec>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	e7c3      	b.n	800edd8 <_strtod_l+0x140>
 800ee50:	9906      	ldr	r1, [sp, #24]
 800ee52:	2908      	cmp	r1, #8
 800ee54:	bfdd      	ittte	le
 800ee56:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ee58:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee5c:	9309      	strle	r3, [sp, #36]	; 0x24
 800ee5e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ee62:	9b06      	ldr	r3, [sp, #24]
 800ee64:	3001      	adds	r0, #1
 800ee66:	3301      	adds	r3, #1
 800ee68:	9306      	str	r3, [sp, #24]
 800ee6a:	9011      	str	r0, [sp, #68]	; 0x44
 800ee6c:	e7be      	b.n	800edec <_strtod_l+0x154>
 800ee6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee70:	195a      	adds	r2, r3, r5
 800ee72:	9211      	str	r2, [sp, #68]	; 0x44
 800ee74:	5d5a      	ldrb	r2, [r3, r5]
 800ee76:	9b06      	ldr	r3, [sp, #24]
 800ee78:	b3a3      	cbz	r3, 800eee4 <_strtod_l+0x24c>
 800ee7a:	4607      	mov	r7, r0
 800ee7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ee80:	2909      	cmp	r1, #9
 800ee82:	d912      	bls.n	800eeaa <_strtod_l+0x212>
 800ee84:	2101      	movs	r1, #1
 800ee86:	e7c3      	b.n	800ee10 <_strtod_l+0x178>
 800ee88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee8a:	1c5a      	adds	r2, r3, #1
 800ee8c:	9211      	str	r2, [sp, #68]	; 0x44
 800ee8e:	785a      	ldrb	r2, [r3, #1]
 800ee90:	3001      	adds	r0, #1
 800ee92:	2a30      	cmp	r2, #48	; 0x30
 800ee94:	d0f8      	beq.n	800ee88 <_strtod_l+0x1f0>
 800ee96:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ee9a:	2b08      	cmp	r3, #8
 800ee9c:	f200 8497 	bhi.w	800f7ce <_strtod_l+0xb36>
 800eea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eea2:	930a      	str	r3, [sp, #40]	; 0x28
 800eea4:	4607      	mov	r7, r0
 800eea6:	2000      	movs	r0, #0
 800eea8:	4603      	mov	r3, r0
 800eeaa:	3a30      	subs	r2, #48	; 0x30
 800eeac:	f100 0101 	add.w	r1, r0, #1
 800eeb0:	d012      	beq.n	800eed8 <_strtod_l+0x240>
 800eeb2:	440f      	add	r7, r1
 800eeb4:	eb00 0c03 	add.w	ip, r0, r3
 800eeb8:	4619      	mov	r1, r3
 800eeba:	250a      	movs	r5, #10
 800eebc:	4561      	cmp	r1, ip
 800eebe:	d113      	bne.n	800eee8 <_strtod_l+0x250>
 800eec0:	1819      	adds	r1, r3, r0
 800eec2:	2908      	cmp	r1, #8
 800eec4:	f103 0301 	add.w	r3, r3, #1
 800eec8:	4403      	add	r3, r0
 800eeca:	dc1c      	bgt.n	800ef06 <_strtod_l+0x26e>
 800eecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eece:	210a      	movs	r1, #10
 800eed0:	fb01 2200 	mla	r2, r1, r0, r2
 800eed4:	9209      	str	r2, [sp, #36]	; 0x24
 800eed6:	2100      	movs	r1, #0
 800eed8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eeda:	1c50      	adds	r0, r2, #1
 800eedc:	9011      	str	r0, [sp, #68]	; 0x44
 800eede:	7852      	ldrb	r2, [r2, #1]
 800eee0:	4608      	mov	r0, r1
 800eee2:	e7cb      	b.n	800ee7c <_strtod_l+0x1e4>
 800eee4:	9806      	ldr	r0, [sp, #24]
 800eee6:	e7d4      	b.n	800ee92 <_strtod_l+0x1fa>
 800eee8:	2908      	cmp	r1, #8
 800eeea:	dc04      	bgt.n	800eef6 <_strtod_l+0x25e>
 800eeec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800eeee:	436e      	muls	r6, r5
 800eef0:	9609      	str	r6, [sp, #36]	; 0x24
 800eef2:	3101      	adds	r1, #1
 800eef4:	e7e2      	b.n	800eebc <_strtod_l+0x224>
 800eef6:	f101 0e01 	add.w	lr, r1, #1
 800eefa:	f1be 0f10 	cmp.w	lr, #16
 800eefe:	bfd8      	it	le
 800ef00:	fb05 fa0a 	mulle.w	sl, r5, sl
 800ef04:	e7f5      	b.n	800eef2 <_strtod_l+0x25a>
 800ef06:	2b10      	cmp	r3, #16
 800ef08:	bfdc      	itt	le
 800ef0a:	210a      	movle	r1, #10
 800ef0c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800ef10:	e7e1      	b.n	800eed6 <_strtod_l+0x23e>
 800ef12:	2700      	movs	r7, #0
 800ef14:	2101      	movs	r1, #1
 800ef16:	e780      	b.n	800ee1a <_strtod_l+0x182>
 800ef18:	f04f 0e00 	mov.w	lr, #0
 800ef1c:	f10b 0202 	add.w	r2, fp, #2
 800ef20:	9211      	str	r2, [sp, #68]	; 0x44
 800ef22:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800ef26:	e789      	b.n	800ee3c <_strtod_l+0x1a4>
 800ef28:	f04f 0e01 	mov.w	lr, #1
 800ef2c:	e7f6      	b.n	800ef1c <_strtod_l+0x284>
 800ef2e:	bf00      	nop
 800ef30:	08012408 	.word	0x08012408
 800ef34:	08012340 	.word	0x08012340
 800ef38:	7ff00000 	.word	0x7ff00000
 800ef3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef3e:	1c55      	adds	r5, r2, #1
 800ef40:	9511      	str	r5, [sp, #68]	; 0x44
 800ef42:	7852      	ldrb	r2, [r2, #1]
 800ef44:	2a30      	cmp	r2, #48	; 0x30
 800ef46:	d0f9      	beq.n	800ef3c <_strtod_l+0x2a4>
 800ef48:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800ef4c:	2d08      	cmp	r5, #8
 800ef4e:	f63f af7b 	bhi.w	800ee48 <_strtod_l+0x1b0>
 800ef52:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ef56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef58:	9207      	str	r2, [sp, #28]
 800ef5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef5c:	1c55      	adds	r5, r2, #1
 800ef5e:	9511      	str	r5, [sp, #68]	; 0x44
 800ef60:	7852      	ldrb	r2, [r2, #1]
 800ef62:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ef66:	2e09      	cmp	r6, #9
 800ef68:	d937      	bls.n	800efda <_strtod_l+0x342>
 800ef6a:	9e07      	ldr	r6, [sp, #28]
 800ef6c:	1bad      	subs	r5, r5, r6
 800ef6e:	2d08      	cmp	r5, #8
 800ef70:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ef74:	dc02      	bgt.n	800ef7c <_strtod_l+0x2e4>
 800ef76:	4565      	cmp	r5, ip
 800ef78:	bfa8      	it	ge
 800ef7a:	4665      	movge	r5, ip
 800ef7c:	f1be 0f00 	cmp.w	lr, #0
 800ef80:	d000      	beq.n	800ef84 <_strtod_l+0x2ec>
 800ef82:	426d      	negs	r5, r5
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d14d      	bne.n	800f024 <_strtod_l+0x38c>
 800ef88:	9b04      	ldr	r3, [sp, #16]
 800ef8a:	4303      	orrs	r3, r0
 800ef8c:	f47f aec8 	bne.w	800ed20 <_strtod_l+0x88>
 800ef90:	2900      	cmp	r1, #0
 800ef92:	f47f aee2 	bne.w	800ed5a <_strtod_l+0xc2>
 800ef96:	2a69      	cmp	r2, #105	; 0x69
 800ef98:	d027      	beq.n	800efea <_strtod_l+0x352>
 800ef9a:	dc24      	bgt.n	800efe6 <_strtod_l+0x34e>
 800ef9c:	2a49      	cmp	r2, #73	; 0x49
 800ef9e:	d024      	beq.n	800efea <_strtod_l+0x352>
 800efa0:	2a4e      	cmp	r2, #78	; 0x4e
 800efa2:	f47f aeda 	bne.w	800ed5a <_strtod_l+0xc2>
 800efa6:	4996      	ldr	r1, [pc, #600]	; (800f200 <_strtod_l+0x568>)
 800efa8:	a811      	add	r0, sp, #68	; 0x44
 800efaa:	f000 fef7 	bl	800fd9c <__match>
 800efae:	2800      	cmp	r0, #0
 800efb0:	f43f aed3 	beq.w	800ed5a <_strtod_l+0xc2>
 800efb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	2b28      	cmp	r3, #40	; 0x28
 800efba:	d12d      	bne.n	800f018 <_strtod_l+0x380>
 800efbc:	4991      	ldr	r1, [pc, #580]	; (800f204 <_strtod_l+0x56c>)
 800efbe:	aa14      	add	r2, sp, #80	; 0x50
 800efc0:	a811      	add	r0, sp, #68	; 0x44
 800efc2:	f000 feff 	bl	800fdc4 <__hexnan>
 800efc6:	2805      	cmp	r0, #5
 800efc8:	d126      	bne.n	800f018 <_strtod_l+0x380>
 800efca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800efcc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800efd0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800efd4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800efd8:	e6a2      	b.n	800ed20 <_strtod_l+0x88>
 800efda:	250a      	movs	r5, #10
 800efdc:	fb05 250c 	mla	r5, r5, ip, r2
 800efe0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800efe4:	e7b9      	b.n	800ef5a <_strtod_l+0x2c2>
 800efe6:	2a6e      	cmp	r2, #110	; 0x6e
 800efe8:	e7db      	b.n	800efa2 <_strtod_l+0x30a>
 800efea:	4987      	ldr	r1, [pc, #540]	; (800f208 <_strtod_l+0x570>)
 800efec:	a811      	add	r0, sp, #68	; 0x44
 800efee:	f000 fed5 	bl	800fd9c <__match>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	f43f aeb1 	beq.w	800ed5a <_strtod_l+0xc2>
 800eff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800effa:	4984      	ldr	r1, [pc, #528]	; (800f20c <_strtod_l+0x574>)
 800effc:	3b01      	subs	r3, #1
 800effe:	a811      	add	r0, sp, #68	; 0x44
 800f000:	9311      	str	r3, [sp, #68]	; 0x44
 800f002:	f000 fecb 	bl	800fd9c <__match>
 800f006:	b910      	cbnz	r0, 800f00e <_strtod_l+0x376>
 800f008:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f00a:	3301      	adds	r3, #1
 800f00c:	9311      	str	r3, [sp, #68]	; 0x44
 800f00e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f220 <_strtod_l+0x588>
 800f012:	f04f 0800 	mov.w	r8, #0
 800f016:	e683      	b.n	800ed20 <_strtod_l+0x88>
 800f018:	487d      	ldr	r0, [pc, #500]	; (800f210 <_strtod_l+0x578>)
 800f01a:	f001 fce9 	bl	80109f0 <nan>
 800f01e:	ec59 8b10 	vmov	r8, r9, d0
 800f022:	e67d      	b.n	800ed20 <_strtod_l+0x88>
 800f024:	1bea      	subs	r2, r5, r7
 800f026:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f02a:	9207      	str	r2, [sp, #28]
 800f02c:	9a06      	ldr	r2, [sp, #24]
 800f02e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f032:	2a00      	cmp	r2, #0
 800f034:	bf08      	it	eq
 800f036:	461a      	moveq	r2, r3
 800f038:	2b10      	cmp	r3, #16
 800f03a:	9206      	str	r2, [sp, #24]
 800f03c:	461a      	mov	r2, r3
 800f03e:	bfa8      	it	ge
 800f040:	2210      	movge	r2, #16
 800f042:	2b09      	cmp	r3, #9
 800f044:	ec59 8b17 	vmov	r8, r9, d7
 800f048:	dd0c      	ble.n	800f064 <_strtod_l+0x3cc>
 800f04a:	4972      	ldr	r1, [pc, #456]	; (800f214 <_strtod_l+0x57c>)
 800f04c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f050:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f054:	ee06 aa90 	vmov	s13, sl
 800f058:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f05c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f060:	ec59 8b16 	vmov	r8, r9, d6
 800f064:	2b0f      	cmp	r3, #15
 800f066:	dc36      	bgt.n	800f0d6 <_strtod_l+0x43e>
 800f068:	9907      	ldr	r1, [sp, #28]
 800f06a:	2900      	cmp	r1, #0
 800f06c:	f43f ae58 	beq.w	800ed20 <_strtod_l+0x88>
 800f070:	dd23      	ble.n	800f0ba <_strtod_l+0x422>
 800f072:	2916      	cmp	r1, #22
 800f074:	dc0b      	bgt.n	800f08e <_strtod_l+0x3f6>
 800f076:	4b67      	ldr	r3, [pc, #412]	; (800f214 <_strtod_l+0x57c>)
 800f078:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f07c:	ed93 7b00 	vldr	d7, [r3]
 800f080:	ec49 8b16 	vmov	d6, r8, r9
 800f084:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f088:	ec59 8b17 	vmov	r8, r9, d7
 800f08c:	e648      	b.n	800ed20 <_strtod_l+0x88>
 800f08e:	9807      	ldr	r0, [sp, #28]
 800f090:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f094:	4281      	cmp	r1, r0
 800f096:	db1e      	blt.n	800f0d6 <_strtod_l+0x43e>
 800f098:	4a5e      	ldr	r2, [pc, #376]	; (800f214 <_strtod_l+0x57c>)
 800f09a:	f1c3 030f 	rsb	r3, r3, #15
 800f09e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f0a2:	ed91 7b00 	vldr	d7, [r1]
 800f0a6:	ec49 8b16 	vmov	d6, r8, r9
 800f0aa:	1ac3      	subs	r3, r0, r3
 800f0ac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f0b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f0b4:	ed92 6b00 	vldr	d6, [r2]
 800f0b8:	e7e4      	b.n	800f084 <_strtod_l+0x3ec>
 800f0ba:	9907      	ldr	r1, [sp, #28]
 800f0bc:	3116      	adds	r1, #22
 800f0be:	db0a      	blt.n	800f0d6 <_strtod_l+0x43e>
 800f0c0:	4b54      	ldr	r3, [pc, #336]	; (800f214 <_strtod_l+0x57c>)
 800f0c2:	1b7d      	subs	r5, r7, r5
 800f0c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f0c8:	ed95 7b00 	vldr	d7, [r5]
 800f0cc:	ec49 8b16 	vmov	d6, r8, r9
 800f0d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f0d4:	e7d8      	b.n	800f088 <_strtod_l+0x3f0>
 800f0d6:	9907      	ldr	r1, [sp, #28]
 800f0d8:	1a9a      	subs	r2, r3, r2
 800f0da:	440a      	add	r2, r1
 800f0dc:	2a00      	cmp	r2, #0
 800f0de:	dd6f      	ble.n	800f1c0 <_strtod_l+0x528>
 800f0e0:	f012 000f 	ands.w	r0, r2, #15
 800f0e4:	d00a      	beq.n	800f0fc <_strtod_l+0x464>
 800f0e6:	494b      	ldr	r1, [pc, #300]	; (800f214 <_strtod_l+0x57c>)
 800f0e8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f0ec:	ed91 7b00 	vldr	d7, [r1]
 800f0f0:	ec49 8b16 	vmov	d6, r8, r9
 800f0f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f0f8:	ec59 8b17 	vmov	r8, r9, d7
 800f0fc:	f032 020f 	bics.w	r2, r2, #15
 800f100:	d04f      	beq.n	800f1a2 <_strtod_l+0x50a>
 800f102:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f106:	dd22      	ble.n	800f14e <_strtod_l+0x4b6>
 800f108:	2500      	movs	r5, #0
 800f10a:	462e      	mov	r6, r5
 800f10c:	9506      	str	r5, [sp, #24]
 800f10e:	462f      	mov	r7, r5
 800f110:	2322      	movs	r3, #34	; 0x22
 800f112:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f220 <_strtod_l+0x588>
 800f116:	6023      	str	r3, [r4, #0]
 800f118:	f04f 0800 	mov.w	r8, #0
 800f11c:	9b06      	ldr	r3, [sp, #24]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	f43f adfe 	beq.w	800ed20 <_strtod_l+0x88>
 800f124:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f126:	4620      	mov	r0, r4
 800f128:	f000 ff3a 	bl	800ffa0 <_Bfree>
 800f12c:	4639      	mov	r1, r7
 800f12e:	4620      	mov	r0, r4
 800f130:	f000 ff36 	bl	800ffa0 <_Bfree>
 800f134:	4631      	mov	r1, r6
 800f136:	4620      	mov	r0, r4
 800f138:	f000 ff32 	bl	800ffa0 <_Bfree>
 800f13c:	9906      	ldr	r1, [sp, #24]
 800f13e:	4620      	mov	r0, r4
 800f140:	f000 ff2e 	bl	800ffa0 <_Bfree>
 800f144:	4629      	mov	r1, r5
 800f146:	4620      	mov	r0, r4
 800f148:	f000 ff2a 	bl	800ffa0 <_Bfree>
 800f14c:	e5e8      	b.n	800ed20 <_strtod_l+0x88>
 800f14e:	2000      	movs	r0, #0
 800f150:	ec49 8b17 	vmov	d7, r8, r9
 800f154:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f218 <_strtod_l+0x580>
 800f158:	1112      	asrs	r2, r2, #4
 800f15a:	4601      	mov	r1, r0
 800f15c:	2a01      	cmp	r2, #1
 800f15e:	dc23      	bgt.n	800f1a8 <_strtod_l+0x510>
 800f160:	b108      	cbz	r0, 800f166 <_strtod_l+0x4ce>
 800f162:	ec59 8b17 	vmov	r8, r9, d7
 800f166:	4a2c      	ldr	r2, [pc, #176]	; (800f218 <_strtod_l+0x580>)
 800f168:	482c      	ldr	r0, [pc, #176]	; (800f21c <_strtod_l+0x584>)
 800f16a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f16e:	ed92 7b00 	vldr	d7, [r2]
 800f172:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f176:	ec49 8b16 	vmov	d6, r8, r9
 800f17a:	4a29      	ldr	r2, [pc, #164]	; (800f220 <_strtod_l+0x588>)
 800f17c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f180:	ee17 1a90 	vmov	r1, s15
 800f184:	400a      	ands	r2, r1
 800f186:	4282      	cmp	r2, r0
 800f188:	ec59 8b17 	vmov	r8, r9, d7
 800f18c:	d8bc      	bhi.n	800f108 <_strtod_l+0x470>
 800f18e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f192:	4282      	cmp	r2, r0
 800f194:	bf86      	itte	hi
 800f196:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f224 <_strtod_l+0x58c>
 800f19a:	f04f 38ff 	movhi.w	r8, #4294967295
 800f19e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	9204      	str	r2, [sp, #16]
 800f1a6:	e078      	b.n	800f29a <_strtod_l+0x602>
 800f1a8:	07d6      	lsls	r6, r2, #31
 800f1aa:	d504      	bpl.n	800f1b6 <_strtod_l+0x51e>
 800f1ac:	ed9c 6b00 	vldr	d6, [ip]
 800f1b0:	2001      	movs	r0, #1
 800f1b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f1b6:	3101      	adds	r1, #1
 800f1b8:	1052      	asrs	r2, r2, #1
 800f1ba:	f10c 0c08 	add.w	ip, ip, #8
 800f1be:	e7cd      	b.n	800f15c <_strtod_l+0x4c4>
 800f1c0:	d0ef      	beq.n	800f1a2 <_strtod_l+0x50a>
 800f1c2:	4252      	negs	r2, r2
 800f1c4:	f012 000f 	ands.w	r0, r2, #15
 800f1c8:	d00a      	beq.n	800f1e0 <_strtod_l+0x548>
 800f1ca:	4912      	ldr	r1, [pc, #72]	; (800f214 <_strtod_l+0x57c>)
 800f1cc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f1d0:	ed91 7b00 	vldr	d7, [r1]
 800f1d4:	ec49 8b16 	vmov	d6, r8, r9
 800f1d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f1dc:	ec59 8b17 	vmov	r8, r9, d7
 800f1e0:	1112      	asrs	r2, r2, #4
 800f1e2:	d0de      	beq.n	800f1a2 <_strtod_l+0x50a>
 800f1e4:	2a1f      	cmp	r2, #31
 800f1e6:	dd1f      	ble.n	800f228 <_strtod_l+0x590>
 800f1e8:	2500      	movs	r5, #0
 800f1ea:	462e      	mov	r6, r5
 800f1ec:	9506      	str	r5, [sp, #24]
 800f1ee:	462f      	mov	r7, r5
 800f1f0:	2322      	movs	r3, #34	; 0x22
 800f1f2:	f04f 0800 	mov.w	r8, #0
 800f1f6:	f04f 0900 	mov.w	r9, #0
 800f1fa:	6023      	str	r3, [r4, #0]
 800f1fc:	e78e      	b.n	800f11c <_strtod_l+0x484>
 800f1fe:	bf00      	nop
 800f200:	0801233d 	.word	0x0801233d
 800f204:	08012354 	.word	0x08012354
 800f208:	08012334 	.word	0x08012334
 800f20c:	08012337 	.word	0x08012337
 800f210:	080125c7 	.word	0x080125c7
 800f214:	080124b8 	.word	0x080124b8
 800f218:	08012490 	.word	0x08012490
 800f21c:	7ca00000 	.word	0x7ca00000
 800f220:	7ff00000 	.word	0x7ff00000
 800f224:	7fefffff 	.word	0x7fefffff
 800f228:	f012 0110 	ands.w	r1, r2, #16
 800f22c:	bf18      	it	ne
 800f22e:	216a      	movne	r1, #106	; 0x6a
 800f230:	9104      	str	r1, [sp, #16]
 800f232:	ec49 8b17 	vmov	d7, r8, r9
 800f236:	49be      	ldr	r1, [pc, #760]	; (800f530 <_strtod_l+0x898>)
 800f238:	2000      	movs	r0, #0
 800f23a:	07d6      	lsls	r6, r2, #31
 800f23c:	d504      	bpl.n	800f248 <_strtod_l+0x5b0>
 800f23e:	ed91 6b00 	vldr	d6, [r1]
 800f242:	2001      	movs	r0, #1
 800f244:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f248:	1052      	asrs	r2, r2, #1
 800f24a:	f101 0108 	add.w	r1, r1, #8
 800f24e:	d1f4      	bne.n	800f23a <_strtod_l+0x5a2>
 800f250:	b108      	cbz	r0, 800f256 <_strtod_l+0x5be>
 800f252:	ec59 8b17 	vmov	r8, r9, d7
 800f256:	9a04      	ldr	r2, [sp, #16]
 800f258:	b1c2      	cbz	r2, 800f28c <_strtod_l+0x5f4>
 800f25a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f25e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f262:	2a00      	cmp	r2, #0
 800f264:	4648      	mov	r0, r9
 800f266:	dd11      	ble.n	800f28c <_strtod_l+0x5f4>
 800f268:	2a1f      	cmp	r2, #31
 800f26a:	f340 812e 	ble.w	800f4ca <_strtod_l+0x832>
 800f26e:	2a34      	cmp	r2, #52	; 0x34
 800f270:	bfde      	ittt	le
 800f272:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f276:	f04f 32ff 	movle.w	r2, #4294967295
 800f27a:	fa02 f101 	lslle.w	r1, r2, r1
 800f27e:	f04f 0800 	mov.w	r8, #0
 800f282:	bfcc      	ite	gt
 800f284:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f288:	ea01 0900 	andle.w	r9, r1, r0
 800f28c:	ec49 8b17 	vmov	d7, r8, r9
 800f290:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f298:	d0a6      	beq.n	800f1e8 <_strtod_l+0x550>
 800f29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f29c:	9200      	str	r2, [sp, #0]
 800f29e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f2a0:	9a06      	ldr	r2, [sp, #24]
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f000 fee4 	bl	8010070 <__s2b>
 800f2a8:	9006      	str	r0, [sp, #24]
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	f43f af2c 	beq.w	800f108 <_strtod_l+0x470>
 800f2b0:	9b07      	ldr	r3, [sp, #28]
 800f2b2:	1b7d      	subs	r5, r7, r5
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	bfb4      	ite	lt
 800f2b8:	462b      	movlt	r3, r5
 800f2ba:	2300      	movge	r3, #0
 800f2bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f2be:	9b07      	ldr	r3, [sp, #28]
 800f2c0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800f510 <_strtod_l+0x878>
 800f2c4:	ed9f ab94 	vldr	d10, [pc, #592]	; 800f518 <_strtod_l+0x880>
 800f2c8:	ed9f bb95 	vldr	d11, [pc, #596]	; 800f520 <_strtod_l+0x888>
 800f2cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f2d0:	2500      	movs	r5, #0
 800f2d2:	930c      	str	r3, [sp, #48]	; 0x30
 800f2d4:	462e      	mov	r6, r5
 800f2d6:	9b06      	ldr	r3, [sp, #24]
 800f2d8:	4620      	mov	r0, r4
 800f2da:	6859      	ldr	r1, [r3, #4]
 800f2dc:	f000 fe20 	bl	800ff20 <_Balloc>
 800f2e0:	4607      	mov	r7, r0
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	f43f af14 	beq.w	800f110 <_strtod_l+0x478>
 800f2e8:	9b06      	ldr	r3, [sp, #24]
 800f2ea:	691a      	ldr	r2, [r3, #16]
 800f2ec:	3202      	adds	r2, #2
 800f2ee:	f103 010c 	add.w	r1, r3, #12
 800f2f2:	0092      	lsls	r2, r2, #2
 800f2f4:	300c      	adds	r0, #12
 800f2f6:	f7ff fc9f 	bl	800ec38 <memcpy>
 800f2fa:	ec49 8b10 	vmov	d0, r8, r9
 800f2fe:	aa14      	add	r2, sp, #80	; 0x50
 800f300:	a913      	add	r1, sp, #76	; 0x4c
 800f302:	4620      	mov	r0, r4
 800f304:	f001 f9fa 	bl	80106fc <__d2b>
 800f308:	ec49 8b18 	vmov	d8, r8, r9
 800f30c:	9012      	str	r0, [sp, #72]	; 0x48
 800f30e:	2800      	cmp	r0, #0
 800f310:	f43f aefe 	beq.w	800f110 <_strtod_l+0x478>
 800f314:	2101      	movs	r1, #1
 800f316:	4620      	mov	r0, r4
 800f318:	f000 ff44 	bl	80101a4 <__i2b>
 800f31c:	4606      	mov	r6, r0
 800f31e:	2800      	cmp	r0, #0
 800f320:	f43f aef6 	beq.w	800f110 <_strtod_l+0x478>
 800f324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f326:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f328:	2b00      	cmp	r3, #0
 800f32a:	bfab      	itete	ge
 800f32c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f32e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f330:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f334:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f338:	bfac      	ite	ge
 800f33a:	eb03 0b02 	addge.w	fp, r3, r2
 800f33e:	eba2 0a03 	sublt.w	sl, r2, r3
 800f342:	9a04      	ldr	r2, [sp, #16]
 800f344:	1a9b      	subs	r3, r3, r2
 800f346:	440b      	add	r3, r1
 800f348:	4a7a      	ldr	r2, [pc, #488]	; (800f534 <_strtod_l+0x89c>)
 800f34a:	3b01      	subs	r3, #1
 800f34c:	4293      	cmp	r3, r2
 800f34e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f352:	f280 80cd 	bge.w	800f4f0 <_strtod_l+0x858>
 800f356:	1ad2      	subs	r2, r2, r3
 800f358:	2a1f      	cmp	r2, #31
 800f35a:	eba1 0102 	sub.w	r1, r1, r2
 800f35e:	f04f 0001 	mov.w	r0, #1
 800f362:	f300 80b9 	bgt.w	800f4d8 <_strtod_l+0x840>
 800f366:	fa00 f302 	lsl.w	r3, r0, r2
 800f36a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f36c:	2300      	movs	r3, #0
 800f36e:	930a      	str	r3, [sp, #40]	; 0x28
 800f370:	eb0b 0301 	add.w	r3, fp, r1
 800f374:	9a04      	ldr	r2, [sp, #16]
 800f376:	459b      	cmp	fp, r3
 800f378:	448a      	add	sl, r1
 800f37a:	4492      	add	sl, r2
 800f37c:	465a      	mov	r2, fp
 800f37e:	bfa8      	it	ge
 800f380:	461a      	movge	r2, r3
 800f382:	4552      	cmp	r2, sl
 800f384:	bfa8      	it	ge
 800f386:	4652      	movge	r2, sl
 800f388:	2a00      	cmp	r2, #0
 800f38a:	bfc2      	ittt	gt
 800f38c:	1a9b      	subgt	r3, r3, r2
 800f38e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f392:	ebab 0b02 	subgt.w	fp, fp, r2
 800f396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f398:	2a00      	cmp	r2, #0
 800f39a:	dd18      	ble.n	800f3ce <_strtod_l+0x736>
 800f39c:	4631      	mov	r1, r6
 800f39e:	4620      	mov	r0, r4
 800f3a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f3a2:	f000 ffbf 	bl	8010324 <__pow5mult>
 800f3a6:	4606      	mov	r6, r0
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	f43f aeb1 	beq.w	800f110 <_strtod_l+0x478>
 800f3ae:	4601      	mov	r1, r0
 800f3b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	f000 ff0c 	bl	80101d0 <__multiply>
 800f3b8:	900e      	str	r0, [sp, #56]	; 0x38
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	f43f aea8 	beq.w	800f110 <_strtod_l+0x478>
 800f3c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	f000 fdec 	bl	800ffa0 <_Bfree>
 800f3c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3cc:	9212      	str	r2, [sp, #72]	; 0x48
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f300 8093 	bgt.w	800f4fa <_strtod_l+0x862>
 800f3d4:	9b07      	ldr	r3, [sp, #28]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	dd08      	ble.n	800f3ec <_strtod_l+0x754>
 800f3da:	4639      	mov	r1, r7
 800f3dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f000 ffa0 	bl	8010324 <__pow5mult>
 800f3e4:	4607      	mov	r7, r0
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	f43f ae92 	beq.w	800f110 <_strtod_l+0x478>
 800f3ec:	f1ba 0f00 	cmp.w	sl, #0
 800f3f0:	dd08      	ble.n	800f404 <_strtod_l+0x76c>
 800f3f2:	4639      	mov	r1, r7
 800f3f4:	4652      	mov	r2, sl
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	f000 ffee 	bl	80103d8 <__lshift>
 800f3fc:	4607      	mov	r7, r0
 800f3fe:	2800      	cmp	r0, #0
 800f400:	f43f ae86 	beq.w	800f110 <_strtod_l+0x478>
 800f404:	f1bb 0f00 	cmp.w	fp, #0
 800f408:	dd08      	ble.n	800f41c <_strtod_l+0x784>
 800f40a:	4631      	mov	r1, r6
 800f40c:	465a      	mov	r2, fp
 800f40e:	4620      	mov	r0, r4
 800f410:	f000 ffe2 	bl	80103d8 <__lshift>
 800f414:	4606      	mov	r6, r0
 800f416:	2800      	cmp	r0, #0
 800f418:	f43f ae7a 	beq.w	800f110 <_strtod_l+0x478>
 800f41c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f41e:	463a      	mov	r2, r7
 800f420:	4620      	mov	r0, r4
 800f422:	f001 f865 	bl	80104f0 <__mdiff>
 800f426:	4605      	mov	r5, r0
 800f428:	2800      	cmp	r0, #0
 800f42a:	f43f ae71 	beq.w	800f110 <_strtod_l+0x478>
 800f42e:	2300      	movs	r3, #0
 800f430:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f434:	60c3      	str	r3, [r0, #12]
 800f436:	4631      	mov	r1, r6
 800f438:	f001 f83e 	bl	80104b8 <__mcmp>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	da7d      	bge.n	800f53c <_strtod_l+0x8a4>
 800f440:	ea5a 0308 	orrs.w	r3, sl, r8
 800f444:	f040 80a3 	bne.w	800f58e <_strtod_l+0x8f6>
 800f448:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f040 809e 	bne.w	800f58e <_strtod_l+0x8f6>
 800f452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f456:	0d1b      	lsrs	r3, r3, #20
 800f458:	051b      	lsls	r3, r3, #20
 800f45a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f45e:	f240 8096 	bls.w	800f58e <_strtod_l+0x8f6>
 800f462:	696b      	ldr	r3, [r5, #20]
 800f464:	b91b      	cbnz	r3, 800f46e <_strtod_l+0x7d6>
 800f466:	692b      	ldr	r3, [r5, #16]
 800f468:	2b01      	cmp	r3, #1
 800f46a:	f340 8090 	ble.w	800f58e <_strtod_l+0x8f6>
 800f46e:	4629      	mov	r1, r5
 800f470:	2201      	movs	r2, #1
 800f472:	4620      	mov	r0, r4
 800f474:	f000 ffb0 	bl	80103d8 <__lshift>
 800f478:	4631      	mov	r1, r6
 800f47a:	4605      	mov	r5, r0
 800f47c:	f001 f81c 	bl	80104b8 <__mcmp>
 800f480:	2800      	cmp	r0, #0
 800f482:	f340 8084 	ble.w	800f58e <_strtod_l+0x8f6>
 800f486:	9904      	ldr	r1, [sp, #16]
 800f488:	4a2b      	ldr	r2, [pc, #172]	; (800f538 <_strtod_l+0x8a0>)
 800f48a:	464b      	mov	r3, r9
 800f48c:	2900      	cmp	r1, #0
 800f48e:	f000 809d 	beq.w	800f5cc <_strtod_l+0x934>
 800f492:	ea02 0109 	and.w	r1, r2, r9
 800f496:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f49a:	f300 8097 	bgt.w	800f5cc <_strtod_l+0x934>
 800f49e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f4a2:	f77f aea5 	ble.w	800f1f0 <_strtod_l+0x558>
 800f4a6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f528 <_strtod_l+0x890>
 800f4aa:	ec49 8b16 	vmov	d6, r8, r9
 800f4ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f4b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f4b6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	bf08      	it	eq
 800f4be:	2322      	moveq	r3, #34	; 0x22
 800f4c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f4c4:	bf08      	it	eq
 800f4c6:	6023      	streq	r3, [r4, #0]
 800f4c8:	e62c      	b.n	800f124 <_strtod_l+0x48c>
 800f4ca:	f04f 31ff 	mov.w	r1, #4294967295
 800f4ce:	fa01 f202 	lsl.w	r2, r1, r2
 800f4d2:	ea02 0808 	and.w	r8, r2, r8
 800f4d6:	e6d9      	b.n	800f28c <_strtod_l+0x5f4>
 800f4d8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800f4dc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f4e0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800f4e4:	33e2      	adds	r3, #226	; 0xe2
 800f4e6:	fa00 f303 	lsl.w	r3, r0, r3
 800f4ea:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800f4ee:	e73f      	b.n	800f370 <_strtod_l+0x6d8>
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f4f8:	e73a      	b.n	800f370 <_strtod_l+0x6d8>
 800f4fa:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	4620      	mov	r0, r4
 800f500:	f000 ff6a 	bl	80103d8 <__lshift>
 800f504:	9012      	str	r0, [sp, #72]	; 0x48
 800f506:	2800      	cmp	r0, #0
 800f508:	f47f af64 	bne.w	800f3d4 <_strtod_l+0x73c>
 800f50c:	e600      	b.n	800f110 <_strtod_l+0x478>
 800f50e:	bf00      	nop
 800f510:	94a03595 	.word	0x94a03595
 800f514:	3fcfffff 	.word	0x3fcfffff
 800f518:	94a03595 	.word	0x94a03595
 800f51c:	3fdfffff 	.word	0x3fdfffff
 800f520:	35afe535 	.word	0x35afe535
 800f524:	3fe00000 	.word	0x3fe00000
 800f528:	00000000 	.word	0x00000000
 800f52c:	39500000 	.word	0x39500000
 800f530:	08012368 	.word	0x08012368
 800f534:	fffffc02 	.word	0xfffffc02
 800f538:	7ff00000 	.word	0x7ff00000
 800f53c:	46cb      	mov	fp, r9
 800f53e:	d15f      	bne.n	800f600 <_strtod_l+0x968>
 800f540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f544:	f1ba 0f00 	cmp.w	sl, #0
 800f548:	d02a      	beq.n	800f5a0 <_strtod_l+0x908>
 800f54a:	4aa7      	ldr	r2, [pc, #668]	; (800f7e8 <_strtod_l+0xb50>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d12b      	bne.n	800f5a8 <_strtod_l+0x910>
 800f550:	9b04      	ldr	r3, [sp, #16]
 800f552:	4642      	mov	r2, r8
 800f554:	b1fb      	cbz	r3, 800f596 <_strtod_l+0x8fe>
 800f556:	4ba5      	ldr	r3, [pc, #660]	; (800f7ec <_strtod_l+0xb54>)
 800f558:	ea09 0303 	and.w	r3, r9, r3
 800f55c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f560:	f04f 31ff 	mov.w	r1, #4294967295
 800f564:	d81a      	bhi.n	800f59c <_strtod_l+0x904>
 800f566:	0d1b      	lsrs	r3, r3, #20
 800f568:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f56c:	fa01 f303 	lsl.w	r3, r1, r3
 800f570:	429a      	cmp	r2, r3
 800f572:	d119      	bne.n	800f5a8 <_strtod_l+0x910>
 800f574:	4b9e      	ldr	r3, [pc, #632]	; (800f7f0 <_strtod_l+0xb58>)
 800f576:	459b      	cmp	fp, r3
 800f578:	d102      	bne.n	800f580 <_strtod_l+0x8e8>
 800f57a:	3201      	adds	r2, #1
 800f57c:	f43f adc8 	beq.w	800f110 <_strtod_l+0x478>
 800f580:	4b9a      	ldr	r3, [pc, #616]	; (800f7ec <_strtod_l+0xb54>)
 800f582:	ea0b 0303 	and.w	r3, fp, r3
 800f586:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f58a:	f04f 0800 	mov.w	r8, #0
 800f58e:	9b04      	ldr	r3, [sp, #16]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d188      	bne.n	800f4a6 <_strtod_l+0x80e>
 800f594:	e5c6      	b.n	800f124 <_strtod_l+0x48c>
 800f596:	f04f 33ff 	mov.w	r3, #4294967295
 800f59a:	e7e9      	b.n	800f570 <_strtod_l+0x8d8>
 800f59c:	460b      	mov	r3, r1
 800f59e:	e7e7      	b.n	800f570 <_strtod_l+0x8d8>
 800f5a0:	ea53 0308 	orrs.w	r3, r3, r8
 800f5a4:	f43f af6f 	beq.w	800f486 <_strtod_l+0x7ee>
 800f5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5aa:	b1cb      	cbz	r3, 800f5e0 <_strtod_l+0x948>
 800f5ac:	ea13 0f0b 	tst.w	r3, fp
 800f5b0:	d0ed      	beq.n	800f58e <_strtod_l+0x8f6>
 800f5b2:	9a04      	ldr	r2, [sp, #16]
 800f5b4:	4640      	mov	r0, r8
 800f5b6:	4649      	mov	r1, r9
 800f5b8:	f1ba 0f00 	cmp.w	sl, #0
 800f5bc:	d014      	beq.n	800f5e8 <_strtod_l+0x950>
 800f5be:	f7ff fb51 	bl	800ec64 <sulp>
 800f5c2:	ee38 7b00 	vadd.f64	d7, d8, d0
 800f5c6:	ec59 8b17 	vmov	r8, r9, d7
 800f5ca:	e7e0      	b.n	800f58e <_strtod_l+0x8f6>
 800f5cc:	4013      	ands	r3, r2
 800f5ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f5d2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f5d6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f5da:	f04f 38ff 	mov.w	r8, #4294967295
 800f5de:	e7d6      	b.n	800f58e <_strtod_l+0x8f6>
 800f5e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5e2:	ea13 0f08 	tst.w	r3, r8
 800f5e6:	e7e3      	b.n	800f5b0 <_strtod_l+0x918>
 800f5e8:	f7ff fb3c 	bl	800ec64 <sulp>
 800f5ec:	ee38 0b40 	vsub.f64	d0, d8, d0
 800f5f0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f8:	ec59 8b10 	vmov	r8, r9, d0
 800f5fc:	d1c7      	bne.n	800f58e <_strtod_l+0x8f6>
 800f5fe:	e5f7      	b.n	800f1f0 <_strtod_l+0x558>
 800f600:	4631      	mov	r1, r6
 800f602:	4628      	mov	r0, r5
 800f604:	f001 f8d6 	bl	80107b4 <__ratio>
 800f608:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f60c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f614:	d865      	bhi.n	800f6e2 <_strtod_l+0xa4a>
 800f616:	f1ba 0f00 	cmp.w	sl, #0
 800f61a:	d042      	beq.n	800f6a2 <_strtod_l+0xa0a>
 800f61c:	4b75      	ldr	r3, [pc, #468]	; (800f7f4 <_strtod_l+0xb5c>)
 800f61e:	2200      	movs	r2, #0
 800f620:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800f624:	4871      	ldr	r0, [pc, #452]	; (800f7ec <_strtod_l+0xb54>)
 800f626:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800f800 <_strtod_l+0xb68>
 800f62a:	ea0b 0100 	and.w	r1, fp, r0
 800f62e:	4561      	cmp	r1, ip
 800f630:	f040 808e 	bne.w	800f750 <_strtod_l+0xab8>
 800f634:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800f638:	ec49 8b10 	vmov	d0, r8, r9
 800f63c:	ec43 2b1c 	vmov	d12, r2, r3
 800f640:	910a      	str	r1, [sp, #40]	; 0x28
 800f642:	f000 ffdf 	bl	8010604 <__ulp>
 800f646:	ec49 8b1e 	vmov	d14, r8, r9
 800f64a:	4868      	ldr	r0, [pc, #416]	; (800f7ec <_strtod_l+0xb54>)
 800f64c:	eeac eb00 	vfma.f64	d14, d12, d0
 800f650:	ee1e 3a90 	vmov	r3, s29
 800f654:	4a68      	ldr	r2, [pc, #416]	; (800f7f8 <_strtod_l+0xb60>)
 800f656:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f658:	4018      	ands	r0, r3
 800f65a:	4290      	cmp	r0, r2
 800f65c:	ec59 8b1e 	vmov	r8, r9, d14
 800f660:	d94e      	bls.n	800f700 <_strtod_l+0xa68>
 800f662:	ee18 3a90 	vmov	r3, s17
 800f666:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d104      	bne.n	800f678 <_strtod_l+0x9e0>
 800f66e:	ee18 3a10 	vmov	r3, s16
 800f672:	3301      	adds	r3, #1
 800f674:	f43f ad4c 	beq.w	800f110 <_strtod_l+0x478>
 800f678:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800f7f0 <_strtod_l+0xb58>
 800f67c:	f04f 38ff 	mov.w	r8, #4294967295
 800f680:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f682:	4620      	mov	r0, r4
 800f684:	f000 fc8c 	bl	800ffa0 <_Bfree>
 800f688:	4639      	mov	r1, r7
 800f68a:	4620      	mov	r0, r4
 800f68c:	f000 fc88 	bl	800ffa0 <_Bfree>
 800f690:	4631      	mov	r1, r6
 800f692:	4620      	mov	r0, r4
 800f694:	f000 fc84 	bl	800ffa0 <_Bfree>
 800f698:	4629      	mov	r1, r5
 800f69a:	4620      	mov	r0, r4
 800f69c:	f000 fc80 	bl	800ffa0 <_Bfree>
 800f6a0:	e619      	b.n	800f2d6 <_strtod_l+0x63e>
 800f6a2:	f1b8 0f00 	cmp.w	r8, #0
 800f6a6:	d112      	bne.n	800f6ce <_strtod_l+0xa36>
 800f6a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f6ac:	b9b3      	cbnz	r3, 800f6dc <_strtod_l+0xa44>
 800f6ae:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f6b2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ba:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f6be:	bf58      	it	pl
 800f6c0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800f6c4:	eeb1 7b4d 	vneg.f64	d7, d13
 800f6c8:	ec53 2b17 	vmov	r2, r3, d7
 800f6cc:	e7aa      	b.n	800f624 <_strtod_l+0x98c>
 800f6ce:	f1b8 0f01 	cmp.w	r8, #1
 800f6d2:	d103      	bne.n	800f6dc <_strtod_l+0xa44>
 800f6d4:	f1b9 0f00 	cmp.w	r9, #0
 800f6d8:	f43f ad8a 	beq.w	800f1f0 <_strtod_l+0x558>
 800f6dc:	4b47      	ldr	r3, [pc, #284]	; (800f7fc <_strtod_l+0xb64>)
 800f6de:	2200      	movs	r2, #0
 800f6e0:	e79e      	b.n	800f620 <_strtod_l+0x988>
 800f6e2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f6e6:	ee20 db0d 	vmul.f64	d13, d0, d13
 800f6ea:	f1ba 0f00 	cmp.w	sl, #0
 800f6ee:	d104      	bne.n	800f6fa <_strtod_l+0xa62>
 800f6f0:	eeb1 7b4d 	vneg.f64	d7, d13
 800f6f4:	ec53 2b17 	vmov	r2, r3, d7
 800f6f8:	e794      	b.n	800f624 <_strtod_l+0x98c>
 800f6fa:	eeb0 7b4d 	vmov.f64	d7, d13
 800f6fe:	e7f9      	b.n	800f6f4 <_strtod_l+0xa5c>
 800f700:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f704:	9b04      	ldr	r3, [sp, #16]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d1ba      	bne.n	800f680 <_strtod_l+0x9e8>
 800f70a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f70e:	0d1b      	lsrs	r3, r3, #20
 800f710:	051b      	lsls	r3, r3, #20
 800f712:	4299      	cmp	r1, r3
 800f714:	d1b4      	bne.n	800f680 <_strtod_l+0x9e8>
 800f716:	ec51 0b1d 	vmov	r0, r1, d13
 800f71a:	f7f1 f80d 	bl	8000738 <__aeabi_d2lz>
 800f71e:	f7f0 ffc5 	bl	80006ac <__aeabi_l2d>
 800f722:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f726:	ec41 0b17 	vmov	d7, r0, r1
 800f72a:	ea43 0308 	orr.w	r3, r3, r8
 800f72e:	ea53 030a 	orrs.w	r3, r3, sl
 800f732:	ee3d db47 	vsub.f64	d13, d13, d7
 800f736:	d03c      	beq.n	800f7b2 <_strtod_l+0xb1a>
 800f738:	eeb4 dbca 	vcmpe.f64	d13, d10
 800f73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f740:	f53f acf0 	bmi.w	800f124 <_strtod_l+0x48c>
 800f744:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800f748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f74c:	dd98      	ble.n	800f680 <_strtod_l+0x9e8>
 800f74e:	e4e9      	b.n	800f124 <_strtod_l+0x48c>
 800f750:	9804      	ldr	r0, [sp, #16]
 800f752:	b1f0      	cbz	r0, 800f792 <_strtod_l+0xafa>
 800f754:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800f758:	d81b      	bhi.n	800f792 <_strtod_l+0xafa>
 800f75a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800f7e0 <_strtod_l+0xb48>
 800f75e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800f762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f766:	d811      	bhi.n	800f78c <_strtod_l+0xaf4>
 800f768:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800f76c:	ee1d 3a10 	vmov	r3, s26
 800f770:	2b01      	cmp	r3, #1
 800f772:	bf38      	it	cc
 800f774:	2301      	movcc	r3, #1
 800f776:	ee0d 3a10 	vmov	s26, r3
 800f77a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800f77e:	f1ba 0f00 	cmp.w	sl, #0
 800f782:	d113      	bne.n	800f7ac <_strtod_l+0xb14>
 800f784:	eeb1 7b4d 	vneg.f64	d7, d13
 800f788:	ec53 2b17 	vmov	r2, r3, d7
 800f78c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800f790:	1a43      	subs	r3, r0, r1
 800f792:	eeb0 0b48 	vmov.f64	d0, d8
 800f796:	ec43 2b1c 	vmov	d12, r2, r3
 800f79a:	910a      	str	r1, [sp, #40]	; 0x28
 800f79c:	f000 ff32 	bl	8010604 <__ulp>
 800f7a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f7a2:	eeac 8b00 	vfma.f64	d8, d12, d0
 800f7a6:	ec59 8b18 	vmov	r8, r9, d8
 800f7aa:	e7ab      	b.n	800f704 <_strtod_l+0xa6c>
 800f7ac:	eeb0 7b4d 	vmov.f64	d7, d13
 800f7b0:	e7ea      	b.n	800f788 <_strtod_l+0xaf0>
 800f7b2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800f7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ba:	f57f af61 	bpl.w	800f680 <_strtod_l+0x9e8>
 800f7be:	e4b1      	b.n	800f124 <_strtod_l+0x48c>
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	9308      	str	r3, [sp, #32]
 800f7c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f7c8:	6013      	str	r3, [r2, #0]
 800f7ca:	f7ff baad 	b.w	800ed28 <_strtod_l+0x90>
 800f7ce:	2a65      	cmp	r2, #101	; 0x65
 800f7d0:	f43f ab9f 	beq.w	800ef12 <_strtod_l+0x27a>
 800f7d4:	2a45      	cmp	r2, #69	; 0x45
 800f7d6:	f43f ab9c 	beq.w	800ef12 <_strtod_l+0x27a>
 800f7da:	2101      	movs	r1, #1
 800f7dc:	f7ff bbd4 	b.w	800ef88 <_strtod_l+0x2f0>
 800f7e0:	ffc00000 	.word	0xffc00000
 800f7e4:	41dfffff 	.word	0x41dfffff
 800f7e8:	000fffff 	.word	0x000fffff
 800f7ec:	7ff00000 	.word	0x7ff00000
 800f7f0:	7fefffff 	.word	0x7fefffff
 800f7f4:	3ff00000 	.word	0x3ff00000
 800f7f8:	7c9fffff 	.word	0x7c9fffff
 800f7fc:	bff00000 	.word	0xbff00000
 800f800:	7fe00000 	.word	0x7fe00000

0800f804 <strtod>:
 800f804:	460a      	mov	r2, r1
 800f806:	4601      	mov	r1, r0
 800f808:	4802      	ldr	r0, [pc, #8]	; (800f814 <strtod+0x10>)
 800f80a:	4b03      	ldr	r3, [pc, #12]	; (800f818 <strtod+0x14>)
 800f80c:	6800      	ldr	r0, [r0, #0]
 800f80e:	f7ff ba43 	b.w	800ec98 <_strtod_l>
 800f812:	bf00      	nop
 800f814:	240000b8 	.word	0x240000b8
 800f818:	24000120 	.word	0x24000120

0800f81c <rshift>:
 800f81c:	6903      	ldr	r3, [r0, #16]
 800f81e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f822:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f826:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f82a:	f100 0414 	add.w	r4, r0, #20
 800f82e:	dd45      	ble.n	800f8bc <rshift+0xa0>
 800f830:	f011 011f 	ands.w	r1, r1, #31
 800f834:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f838:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f83c:	d10c      	bne.n	800f858 <rshift+0x3c>
 800f83e:	f100 0710 	add.w	r7, r0, #16
 800f842:	4629      	mov	r1, r5
 800f844:	42b1      	cmp	r1, r6
 800f846:	d334      	bcc.n	800f8b2 <rshift+0x96>
 800f848:	1a9b      	subs	r3, r3, r2
 800f84a:	009b      	lsls	r3, r3, #2
 800f84c:	1eea      	subs	r2, r5, #3
 800f84e:	4296      	cmp	r6, r2
 800f850:	bf38      	it	cc
 800f852:	2300      	movcc	r3, #0
 800f854:	4423      	add	r3, r4
 800f856:	e015      	b.n	800f884 <rshift+0x68>
 800f858:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f85c:	f1c1 0820 	rsb	r8, r1, #32
 800f860:	40cf      	lsrs	r7, r1
 800f862:	f105 0e04 	add.w	lr, r5, #4
 800f866:	46a1      	mov	r9, r4
 800f868:	4576      	cmp	r6, lr
 800f86a:	46f4      	mov	ip, lr
 800f86c:	d815      	bhi.n	800f89a <rshift+0x7e>
 800f86e:	1a9a      	subs	r2, r3, r2
 800f870:	0092      	lsls	r2, r2, #2
 800f872:	3a04      	subs	r2, #4
 800f874:	3501      	adds	r5, #1
 800f876:	42ae      	cmp	r6, r5
 800f878:	bf38      	it	cc
 800f87a:	2200      	movcc	r2, #0
 800f87c:	18a3      	adds	r3, r4, r2
 800f87e:	50a7      	str	r7, [r4, r2]
 800f880:	b107      	cbz	r7, 800f884 <rshift+0x68>
 800f882:	3304      	adds	r3, #4
 800f884:	1b1a      	subs	r2, r3, r4
 800f886:	42a3      	cmp	r3, r4
 800f888:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f88c:	bf08      	it	eq
 800f88e:	2300      	moveq	r3, #0
 800f890:	6102      	str	r2, [r0, #16]
 800f892:	bf08      	it	eq
 800f894:	6143      	streq	r3, [r0, #20]
 800f896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f89a:	f8dc c000 	ldr.w	ip, [ip]
 800f89e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f8a2:	ea4c 0707 	orr.w	r7, ip, r7
 800f8a6:	f849 7b04 	str.w	r7, [r9], #4
 800f8aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f8ae:	40cf      	lsrs	r7, r1
 800f8b0:	e7da      	b.n	800f868 <rshift+0x4c>
 800f8b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f8b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f8ba:	e7c3      	b.n	800f844 <rshift+0x28>
 800f8bc:	4623      	mov	r3, r4
 800f8be:	e7e1      	b.n	800f884 <rshift+0x68>

0800f8c0 <__hexdig_fun>:
 800f8c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f8c4:	2b09      	cmp	r3, #9
 800f8c6:	d802      	bhi.n	800f8ce <__hexdig_fun+0xe>
 800f8c8:	3820      	subs	r0, #32
 800f8ca:	b2c0      	uxtb	r0, r0
 800f8cc:	4770      	bx	lr
 800f8ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f8d2:	2b05      	cmp	r3, #5
 800f8d4:	d801      	bhi.n	800f8da <__hexdig_fun+0x1a>
 800f8d6:	3847      	subs	r0, #71	; 0x47
 800f8d8:	e7f7      	b.n	800f8ca <__hexdig_fun+0xa>
 800f8da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f8de:	2b05      	cmp	r3, #5
 800f8e0:	d801      	bhi.n	800f8e6 <__hexdig_fun+0x26>
 800f8e2:	3827      	subs	r0, #39	; 0x27
 800f8e4:	e7f1      	b.n	800f8ca <__hexdig_fun+0xa>
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	4770      	bx	lr
	...

0800f8ec <__gethex>:
 800f8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f0:	ed2d 8b02 	vpush	{d8}
 800f8f4:	b089      	sub	sp, #36	; 0x24
 800f8f6:	ee08 0a10 	vmov	s16, r0
 800f8fa:	9304      	str	r3, [sp, #16]
 800f8fc:	4bb4      	ldr	r3, [pc, #720]	; (800fbd0 <__gethex+0x2e4>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	9301      	str	r3, [sp, #4]
 800f902:	4618      	mov	r0, r3
 800f904:	468b      	mov	fp, r1
 800f906:	4690      	mov	r8, r2
 800f908:	f7f0 fcea 	bl	80002e0 <strlen>
 800f90c:	9b01      	ldr	r3, [sp, #4]
 800f90e:	f8db 2000 	ldr.w	r2, [fp]
 800f912:	4403      	add	r3, r0
 800f914:	4682      	mov	sl, r0
 800f916:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f91a:	9305      	str	r3, [sp, #20]
 800f91c:	1c93      	adds	r3, r2, #2
 800f91e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f922:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f926:	32fe      	adds	r2, #254	; 0xfe
 800f928:	18d1      	adds	r1, r2, r3
 800f92a:	461f      	mov	r7, r3
 800f92c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f930:	9100      	str	r1, [sp, #0]
 800f932:	2830      	cmp	r0, #48	; 0x30
 800f934:	d0f8      	beq.n	800f928 <__gethex+0x3c>
 800f936:	f7ff ffc3 	bl	800f8c0 <__hexdig_fun>
 800f93a:	4604      	mov	r4, r0
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d13a      	bne.n	800f9b6 <__gethex+0xca>
 800f940:	9901      	ldr	r1, [sp, #4]
 800f942:	4652      	mov	r2, sl
 800f944:	4638      	mov	r0, r7
 800f946:	f001 f86b 	bl	8010a20 <strncmp>
 800f94a:	4605      	mov	r5, r0
 800f94c:	2800      	cmp	r0, #0
 800f94e:	d168      	bne.n	800fa22 <__gethex+0x136>
 800f950:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f954:	eb07 060a 	add.w	r6, r7, sl
 800f958:	f7ff ffb2 	bl	800f8c0 <__hexdig_fun>
 800f95c:	2800      	cmp	r0, #0
 800f95e:	d062      	beq.n	800fa26 <__gethex+0x13a>
 800f960:	4633      	mov	r3, r6
 800f962:	7818      	ldrb	r0, [r3, #0]
 800f964:	2830      	cmp	r0, #48	; 0x30
 800f966:	461f      	mov	r7, r3
 800f968:	f103 0301 	add.w	r3, r3, #1
 800f96c:	d0f9      	beq.n	800f962 <__gethex+0x76>
 800f96e:	f7ff ffa7 	bl	800f8c0 <__hexdig_fun>
 800f972:	2301      	movs	r3, #1
 800f974:	fab0 f480 	clz	r4, r0
 800f978:	0964      	lsrs	r4, r4, #5
 800f97a:	4635      	mov	r5, r6
 800f97c:	9300      	str	r3, [sp, #0]
 800f97e:	463a      	mov	r2, r7
 800f980:	4616      	mov	r6, r2
 800f982:	3201      	adds	r2, #1
 800f984:	7830      	ldrb	r0, [r6, #0]
 800f986:	f7ff ff9b 	bl	800f8c0 <__hexdig_fun>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d1f8      	bne.n	800f980 <__gethex+0x94>
 800f98e:	9901      	ldr	r1, [sp, #4]
 800f990:	4652      	mov	r2, sl
 800f992:	4630      	mov	r0, r6
 800f994:	f001 f844 	bl	8010a20 <strncmp>
 800f998:	b980      	cbnz	r0, 800f9bc <__gethex+0xd0>
 800f99a:	b94d      	cbnz	r5, 800f9b0 <__gethex+0xc4>
 800f99c:	eb06 050a 	add.w	r5, r6, sl
 800f9a0:	462a      	mov	r2, r5
 800f9a2:	4616      	mov	r6, r2
 800f9a4:	3201      	adds	r2, #1
 800f9a6:	7830      	ldrb	r0, [r6, #0]
 800f9a8:	f7ff ff8a 	bl	800f8c0 <__hexdig_fun>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d1f8      	bne.n	800f9a2 <__gethex+0xb6>
 800f9b0:	1bad      	subs	r5, r5, r6
 800f9b2:	00ad      	lsls	r5, r5, #2
 800f9b4:	e004      	b.n	800f9c0 <__gethex+0xd4>
 800f9b6:	2400      	movs	r4, #0
 800f9b8:	4625      	mov	r5, r4
 800f9ba:	e7e0      	b.n	800f97e <__gethex+0x92>
 800f9bc:	2d00      	cmp	r5, #0
 800f9be:	d1f7      	bne.n	800f9b0 <__gethex+0xc4>
 800f9c0:	7833      	ldrb	r3, [r6, #0]
 800f9c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f9c6:	2b50      	cmp	r3, #80	; 0x50
 800f9c8:	d13b      	bne.n	800fa42 <__gethex+0x156>
 800f9ca:	7873      	ldrb	r3, [r6, #1]
 800f9cc:	2b2b      	cmp	r3, #43	; 0x2b
 800f9ce:	d02c      	beq.n	800fa2a <__gethex+0x13e>
 800f9d0:	2b2d      	cmp	r3, #45	; 0x2d
 800f9d2:	d02e      	beq.n	800fa32 <__gethex+0x146>
 800f9d4:	1c71      	adds	r1, r6, #1
 800f9d6:	f04f 0900 	mov.w	r9, #0
 800f9da:	7808      	ldrb	r0, [r1, #0]
 800f9dc:	f7ff ff70 	bl	800f8c0 <__hexdig_fun>
 800f9e0:	1e43      	subs	r3, r0, #1
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	2b18      	cmp	r3, #24
 800f9e6:	d82c      	bhi.n	800fa42 <__gethex+0x156>
 800f9e8:	f1a0 0210 	sub.w	r2, r0, #16
 800f9ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f9f0:	f7ff ff66 	bl	800f8c0 <__hexdig_fun>
 800f9f4:	1e43      	subs	r3, r0, #1
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	2b18      	cmp	r3, #24
 800f9fa:	d91d      	bls.n	800fa38 <__gethex+0x14c>
 800f9fc:	f1b9 0f00 	cmp.w	r9, #0
 800fa00:	d000      	beq.n	800fa04 <__gethex+0x118>
 800fa02:	4252      	negs	r2, r2
 800fa04:	4415      	add	r5, r2
 800fa06:	f8cb 1000 	str.w	r1, [fp]
 800fa0a:	b1e4      	cbz	r4, 800fa46 <__gethex+0x15a>
 800fa0c:	9b00      	ldr	r3, [sp, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	bf14      	ite	ne
 800fa12:	2700      	movne	r7, #0
 800fa14:	2706      	moveq	r7, #6
 800fa16:	4638      	mov	r0, r7
 800fa18:	b009      	add	sp, #36	; 0x24
 800fa1a:	ecbd 8b02 	vpop	{d8}
 800fa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa22:	463e      	mov	r6, r7
 800fa24:	4625      	mov	r5, r4
 800fa26:	2401      	movs	r4, #1
 800fa28:	e7ca      	b.n	800f9c0 <__gethex+0xd4>
 800fa2a:	f04f 0900 	mov.w	r9, #0
 800fa2e:	1cb1      	adds	r1, r6, #2
 800fa30:	e7d3      	b.n	800f9da <__gethex+0xee>
 800fa32:	f04f 0901 	mov.w	r9, #1
 800fa36:	e7fa      	b.n	800fa2e <__gethex+0x142>
 800fa38:	230a      	movs	r3, #10
 800fa3a:	fb03 0202 	mla	r2, r3, r2, r0
 800fa3e:	3a10      	subs	r2, #16
 800fa40:	e7d4      	b.n	800f9ec <__gethex+0x100>
 800fa42:	4631      	mov	r1, r6
 800fa44:	e7df      	b.n	800fa06 <__gethex+0x11a>
 800fa46:	1bf3      	subs	r3, r6, r7
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	2b07      	cmp	r3, #7
 800fa4e:	dc0b      	bgt.n	800fa68 <__gethex+0x17c>
 800fa50:	ee18 0a10 	vmov	r0, s16
 800fa54:	f000 fa64 	bl	800ff20 <_Balloc>
 800fa58:	4604      	mov	r4, r0
 800fa5a:	b940      	cbnz	r0, 800fa6e <__gethex+0x182>
 800fa5c:	4b5d      	ldr	r3, [pc, #372]	; (800fbd4 <__gethex+0x2e8>)
 800fa5e:	4602      	mov	r2, r0
 800fa60:	21de      	movs	r1, #222	; 0xde
 800fa62:	485d      	ldr	r0, [pc, #372]	; (800fbd8 <__gethex+0x2ec>)
 800fa64:	f000 fffe 	bl	8010a64 <__assert_func>
 800fa68:	3101      	adds	r1, #1
 800fa6a:	105b      	asrs	r3, r3, #1
 800fa6c:	e7ee      	b.n	800fa4c <__gethex+0x160>
 800fa6e:	f100 0914 	add.w	r9, r0, #20
 800fa72:	f04f 0b00 	mov.w	fp, #0
 800fa76:	f1ca 0301 	rsb	r3, sl, #1
 800fa7a:	f8cd 9008 	str.w	r9, [sp, #8]
 800fa7e:	f8cd b000 	str.w	fp, [sp]
 800fa82:	9306      	str	r3, [sp, #24]
 800fa84:	42b7      	cmp	r7, r6
 800fa86:	d340      	bcc.n	800fb0a <__gethex+0x21e>
 800fa88:	9802      	ldr	r0, [sp, #8]
 800fa8a:	9b00      	ldr	r3, [sp, #0]
 800fa8c:	f840 3b04 	str.w	r3, [r0], #4
 800fa90:	eba0 0009 	sub.w	r0, r0, r9
 800fa94:	1080      	asrs	r0, r0, #2
 800fa96:	0146      	lsls	r6, r0, #5
 800fa98:	6120      	str	r0, [r4, #16]
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f000 fb32 	bl	8010104 <__hi0bits>
 800faa0:	1a30      	subs	r0, r6, r0
 800faa2:	f8d8 6000 	ldr.w	r6, [r8]
 800faa6:	42b0      	cmp	r0, r6
 800faa8:	dd63      	ble.n	800fb72 <__gethex+0x286>
 800faaa:	1b87      	subs	r7, r0, r6
 800faac:	4639      	mov	r1, r7
 800faae:	4620      	mov	r0, r4
 800fab0:	f000 fed3 	bl	801085a <__any_on>
 800fab4:	4682      	mov	sl, r0
 800fab6:	b1a8      	cbz	r0, 800fae4 <__gethex+0x1f8>
 800fab8:	1e7b      	subs	r3, r7, #1
 800faba:	1159      	asrs	r1, r3, #5
 800fabc:	f003 021f 	and.w	r2, r3, #31
 800fac0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fac4:	f04f 0a01 	mov.w	sl, #1
 800fac8:	fa0a f202 	lsl.w	r2, sl, r2
 800facc:	420a      	tst	r2, r1
 800face:	d009      	beq.n	800fae4 <__gethex+0x1f8>
 800fad0:	4553      	cmp	r3, sl
 800fad2:	dd05      	ble.n	800fae0 <__gethex+0x1f4>
 800fad4:	1eb9      	subs	r1, r7, #2
 800fad6:	4620      	mov	r0, r4
 800fad8:	f000 febf 	bl	801085a <__any_on>
 800fadc:	2800      	cmp	r0, #0
 800fade:	d145      	bne.n	800fb6c <__gethex+0x280>
 800fae0:	f04f 0a02 	mov.w	sl, #2
 800fae4:	4639      	mov	r1, r7
 800fae6:	4620      	mov	r0, r4
 800fae8:	f7ff fe98 	bl	800f81c <rshift>
 800faec:	443d      	add	r5, r7
 800faee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800faf2:	42ab      	cmp	r3, r5
 800faf4:	da4c      	bge.n	800fb90 <__gethex+0x2a4>
 800faf6:	ee18 0a10 	vmov	r0, s16
 800fafa:	4621      	mov	r1, r4
 800fafc:	f000 fa50 	bl	800ffa0 <_Bfree>
 800fb00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fb02:	2300      	movs	r3, #0
 800fb04:	6013      	str	r3, [r2, #0]
 800fb06:	27a3      	movs	r7, #163	; 0xa3
 800fb08:	e785      	b.n	800fa16 <__gethex+0x12a>
 800fb0a:	1e73      	subs	r3, r6, #1
 800fb0c:	9a05      	ldr	r2, [sp, #20]
 800fb0e:	9303      	str	r3, [sp, #12]
 800fb10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d019      	beq.n	800fb4c <__gethex+0x260>
 800fb18:	f1bb 0f20 	cmp.w	fp, #32
 800fb1c:	d107      	bne.n	800fb2e <__gethex+0x242>
 800fb1e:	9b02      	ldr	r3, [sp, #8]
 800fb20:	9a00      	ldr	r2, [sp, #0]
 800fb22:	f843 2b04 	str.w	r2, [r3], #4
 800fb26:	9302      	str	r3, [sp, #8]
 800fb28:	2300      	movs	r3, #0
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	469b      	mov	fp, r3
 800fb2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fb32:	f7ff fec5 	bl	800f8c0 <__hexdig_fun>
 800fb36:	9b00      	ldr	r3, [sp, #0]
 800fb38:	f000 000f 	and.w	r0, r0, #15
 800fb3c:	fa00 f00b 	lsl.w	r0, r0, fp
 800fb40:	4303      	orrs	r3, r0
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	f10b 0b04 	add.w	fp, fp, #4
 800fb48:	9b03      	ldr	r3, [sp, #12]
 800fb4a:	e00d      	b.n	800fb68 <__gethex+0x27c>
 800fb4c:	9b03      	ldr	r3, [sp, #12]
 800fb4e:	9a06      	ldr	r2, [sp, #24]
 800fb50:	4413      	add	r3, r2
 800fb52:	42bb      	cmp	r3, r7
 800fb54:	d3e0      	bcc.n	800fb18 <__gethex+0x22c>
 800fb56:	4618      	mov	r0, r3
 800fb58:	9901      	ldr	r1, [sp, #4]
 800fb5a:	9307      	str	r3, [sp, #28]
 800fb5c:	4652      	mov	r2, sl
 800fb5e:	f000 ff5f 	bl	8010a20 <strncmp>
 800fb62:	9b07      	ldr	r3, [sp, #28]
 800fb64:	2800      	cmp	r0, #0
 800fb66:	d1d7      	bne.n	800fb18 <__gethex+0x22c>
 800fb68:	461e      	mov	r6, r3
 800fb6a:	e78b      	b.n	800fa84 <__gethex+0x198>
 800fb6c:	f04f 0a03 	mov.w	sl, #3
 800fb70:	e7b8      	b.n	800fae4 <__gethex+0x1f8>
 800fb72:	da0a      	bge.n	800fb8a <__gethex+0x29e>
 800fb74:	1a37      	subs	r7, r6, r0
 800fb76:	4621      	mov	r1, r4
 800fb78:	ee18 0a10 	vmov	r0, s16
 800fb7c:	463a      	mov	r2, r7
 800fb7e:	f000 fc2b 	bl	80103d8 <__lshift>
 800fb82:	1bed      	subs	r5, r5, r7
 800fb84:	4604      	mov	r4, r0
 800fb86:	f100 0914 	add.w	r9, r0, #20
 800fb8a:	f04f 0a00 	mov.w	sl, #0
 800fb8e:	e7ae      	b.n	800faee <__gethex+0x202>
 800fb90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fb94:	42a8      	cmp	r0, r5
 800fb96:	dd72      	ble.n	800fc7e <__gethex+0x392>
 800fb98:	1b45      	subs	r5, r0, r5
 800fb9a:	42ae      	cmp	r6, r5
 800fb9c:	dc36      	bgt.n	800fc0c <__gethex+0x320>
 800fb9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fba2:	2b02      	cmp	r3, #2
 800fba4:	d02a      	beq.n	800fbfc <__gethex+0x310>
 800fba6:	2b03      	cmp	r3, #3
 800fba8:	d02c      	beq.n	800fc04 <__gethex+0x318>
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	d11c      	bne.n	800fbe8 <__gethex+0x2fc>
 800fbae:	42ae      	cmp	r6, r5
 800fbb0:	d11a      	bne.n	800fbe8 <__gethex+0x2fc>
 800fbb2:	2e01      	cmp	r6, #1
 800fbb4:	d112      	bne.n	800fbdc <__gethex+0x2f0>
 800fbb6:	9a04      	ldr	r2, [sp, #16]
 800fbb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fbbc:	6013      	str	r3, [r2, #0]
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	6123      	str	r3, [r4, #16]
 800fbc2:	f8c9 3000 	str.w	r3, [r9]
 800fbc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fbc8:	2762      	movs	r7, #98	; 0x62
 800fbca:	601c      	str	r4, [r3, #0]
 800fbcc:	e723      	b.n	800fa16 <__gethex+0x12a>
 800fbce:	bf00      	nop
 800fbd0:	08012408 	.word	0x08012408
 800fbd4:	08012390 	.word	0x08012390
 800fbd8:	080123a1 	.word	0x080123a1
 800fbdc:	1e71      	subs	r1, r6, #1
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f000 fe3b 	bl	801085a <__any_on>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d1e6      	bne.n	800fbb6 <__gethex+0x2ca>
 800fbe8:	ee18 0a10 	vmov	r0, s16
 800fbec:	4621      	mov	r1, r4
 800fbee:	f000 f9d7 	bl	800ffa0 <_Bfree>
 800fbf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	6013      	str	r3, [r2, #0]
 800fbf8:	2750      	movs	r7, #80	; 0x50
 800fbfa:	e70c      	b.n	800fa16 <__gethex+0x12a>
 800fbfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d1f2      	bne.n	800fbe8 <__gethex+0x2fc>
 800fc02:	e7d8      	b.n	800fbb6 <__gethex+0x2ca>
 800fc04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d1d5      	bne.n	800fbb6 <__gethex+0x2ca>
 800fc0a:	e7ed      	b.n	800fbe8 <__gethex+0x2fc>
 800fc0c:	1e6f      	subs	r7, r5, #1
 800fc0e:	f1ba 0f00 	cmp.w	sl, #0
 800fc12:	d131      	bne.n	800fc78 <__gethex+0x38c>
 800fc14:	b127      	cbz	r7, 800fc20 <__gethex+0x334>
 800fc16:	4639      	mov	r1, r7
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f000 fe1e 	bl	801085a <__any_on>
 800fc1e:	4682      	mov	sl, r0
 800fc20:	117b      	asrs	r3, r7, #5
 800fc22:	2101      	movs	r1, #1
 800fc24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fc28:	f007 071f 	and.w	r7, r7, #31
 800fc2c:	fa01 f707 	lsl.w	r7, r1, r7
 800fc30:	421f      	tst	r7, r3
 800fc32:	4629      	mov	r1, r5
 800fc34:	4620      	mov	r0, r4
 800fc36:	bf18      	it	ne
 800fc38:	f04a 0a02 	orrne.w	sl, sl, #2
 800fc3c:	1b76      	subs	r6, r6, r5
 800fc3e:	f7ff fded 	bl	800f81c <rshift>
 800fc42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fc46:	2702      	movs	r7, #2
 800fc48:	f1ba 0f00 	cmp.w	sl, #0
 800fc4c:	d048      	beq.n	800fce0 <__gethex+0x3f4>
 800fc4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d015      	beq.n	800fc82 <__gethex+0x396>
 800fc56:	2b03      	cmp	r3, #3
 800fc58:	d017      	beq.n	800fc8a <__gethex+0x39e>
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	d109      	bne.n	800fc72 <__gethex+0x386>
 800fc5e:	f01a 0f02 	tst.w	sl, #2
 800fc62:	d006      	beq.n	800fc72 <__gethex+0x386>
 800fc64:	f8d9 0000 	ldr.w	r0, [r9]
 800fc68:	ea4a 0a00 	orr.w	sl, sl, r0
 800fc6c:	f01a 0f01 	tst.w	sl, #1
 800fc70:	d10e      	bne.n	800fc90 <__gethex+0x3a4>
 800fc72:	f047 0710 	orr.w	r7, r7, #16
 800fc76:	e033      	b.n	800fce0 <__gethex+0x3f4>
 800fc78:	f04f 0a01 	mov.w	sl, #1
 800fc7c:	e7d0      	b.n	800fc20 <__gethex+0x334>
 800fc7e:	2701      	movs	r7, #1
 800fc80:	e7e2      	b.n	800fc48 <__gethex+0x35c>
 800fc82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc84:	f1c3 0301 	rsb	r3, r3, #1
 800fc88:	9315      	str	r3, [sp, #84]	; 0x54
 800fc8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d0f0      	beq.n	800fc72 <__gethex+0x386>
 800fc90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fc94:	f104 0314 	add.w	r3, r4, #20
 800fc98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fc9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fca0:	f04f 0c00 	mov.w	ip, #0
 800fca4:	4618      	mov	r0, r3
 800fca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcaa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fcae:	d01c      	beq.n	800fcea <__gethex+0x3fe>
 800fcb0:	3201      	adds	r2, #1
 800fcb2:	6002      	str	r2, [r0, #0]
 800fcb4:	2f02      	cmp	r7, #2
 800fcb6:	f104 0314 	add.w	r3, r4, #20
 800fcba:	d13f      	bne.n	800fd3c <__gethex+0x450>
 800fcbc:	f8d8 2000 	ldr.w	r2, [r8]
 800fcc0:	3a01      	subs	r2, #1
 800fcc2:	42b2      	cmp	r2, r6
 800fcc4:	d10a      	bne.n	800fcdc <__gethex+0x3f0>
 800fcc6:	1171      	asrs	r1, r6, #5
 800fcc8:	2201      	movs	r2, #1
 800fcca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fcce:	f006 061f 	and.w	r6, r6, #31
 800fcd2:	fa02 f606 	lsl.w	r6, r2, r6
 800fcd6:	421e      	tst	r6, r3
 800fcd8:	bf18      	it	ne
 800fcda:	4617      	movne	r7, r2
 800fcdc:	f047 0720 	orr.w	r7, r7, #32
 800fce0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fce2:	601c      	str	r4, [r3, #0]
 800fce4:	9b04      	ldr	r3, [sp, #16]
 800fce6:	601d      	str	r5, [r3, #0]
 800fce8:	e695      	b.n	800fa16 <__gethex+0x12a>
 800fcea:	4299      	cmp	r1, r3
 800fcec:	f843 cc04 	str.w	ip, [r3, #-4]
 800fcf0:	d8d8      	bhi.n	800fca4 <__gethex+0x3b8>
 800fcf2:	68a3      	ldr	r3, [r4, #8]
 800fcf4:	459b      	cmp	fp, r3
 800fcf6:	db19      	blt.n	800fd2c <__gethex+0x440>
 800fcf8:	6861      	ldr	r1, [r4, #4]
 800fcfa:	ee18 0a10 	vmov	r0, s16
 800fcfe:	3101      	adds	r1, #1
 800fd00:	f000 f90e 	bl	800ff20 <_Balloc>
 800fd04:	4681      	mov	r9, r0
 800fd06:	b918      	cbnz	r0, 800fd10 <__gethex+0x424>
 800fd08:	4b1a      	ldr	r3, [pc, #104]	; (800fd74 <__gethex+0x488>)
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	2184      	movs	r1, #132	; 0x84
 800fd0e:	e6a8      	b.n	800fa62 <__gethex+0x176>
 800fd10:	6922      	ldr	r2, [r4, #16]
 800fd12:	3202      	adds	r2, #2
 800fd14:	f104 010c 	add.w	r1, r4, #12
 800fd18:	0092      	lsls	r2, r2, #2
 800fd1a:	300c      	adds	r0, #12
 800fd1c:	f7fe ff8c 	bl	800ec38 <memcpy>
 800fd20:	4621      	mov	r1, r4
 800fd22:	ee18 0a10 	vmov	r0, s16
 800fd26:	f000 f93b 	bl	800ffa0 <_Bfree>
 800fd2a:	464c      	mov	r4, r9
 800fd2c:	6923      	ldr	r3, [r4, #16]
 800fd2e:	1c5a      	adds	r2, r3, #1
 800fd30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd34:	6122      	str	r2, [r4, #16]
 800fd36:	2201      	movs	r2, #1
 800fd38:	615a      	str	r2, [r3, #20]
 800fd3a:	e7bb      	b.n	800fcb4 <__gethex+0x3c8>
 800fd3c:	6922      	ldr	r2, [r4, #16]
 800fd3e:	455a      	cmp	r2, fp
 800fd40:	dd0b      	ble.n	800fd5a <__gethex+0x46e>
 800fd42:	2101      	movs	r1, #1
 800fd44:	4620      	mov	r0, r4
 800fd46:	f7ff fd69 	bl	800f81c <rshift>
 800fd4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd4e:	3501      	adds	r5, #1
 800fd50:	42ab      	cmp	r3, r5
 800fd52:	f6ff aed0 	blt.w	800faf6 <__gethex+0x20a>
 800fd56:	2701      	movs	r7, #1
 800fd58:	e7c0      	b.n	800fcdc <__gethex+0x3f0>
 800fd5a:	f016 061f 	ands.w	r6, r6, #31
 800fd5e:	d0fa      	beq.n	800fd56 <__gethex+0x46a>
 800fd60:	4453      	add	r3, sl
 800fd62:	f1c6 0620 	rsb	r6, r6, #32
 800fd66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fd6a:	f000 f9cb 	bl	8010104 <__hi0bits>
 800fd6e:	42b0      	cmp	r0, r6
 800fd70:	dbe7      	blt.n	800fd42 <__gethex+0x456>
 800fd72:	e7f0      	b.n	800fd56 <__gethex+0x46a>
 800fd74:	08012390 	.word	0x08012390

0800fd78 <L_shift>:
 800fd78:	f1c2 0208 	rsb	r2, r2, #8
 800fd7c:	0092      	lsls	r2, r2, #2
 800fd7e:	b570      	push	{r4, r5, r6, lr}
 800fd80:	f1c2 0620 	rsb	r6, r2, #32
 800fd84:	6843      	ldr	r3, [r0, #4]
 800fd86:	6804      	ldr	r4, [r0, #0]
 800fd88:	fa03 f506 	lsl.w	r5, r3, r6
 800fd8c:	432c      	orrs	r4, r5
 800fd8e:	40d3      	lsrs	r3, r2
 800fd90:	6004      	str	r4, [r0, #0]
 800fd92:	f840 3f04 	str.w	r3, [r0, #4]!
 800fd96:	4288      	cmp	r0, r1
 800fd98:	d3f4      	bcc.n	800fd84 <L_shift+0xc>
 800fd9a:	bd70      	pop	{r4, r5, r6, pc}

0800fd9c <__match>:
 800fd9c:	b530      	push	{r4, r5, lr}
 800fd9e:	6803      	ldr	r3, [r0, #0]
 800fda0:	3301      	adds	r3, #1
 800fda2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fda6:	b914      	cbnz	r4, 800fdae <__match+0x12>
 800fda8:	6003      	str	r3, [r0, #0]
 800fdaa:	2001      	movs	r0, #1
 800fdac:	bd30      	pop	{r4, r5, pc}
 800fdae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fdb6:	2d19      	cmp	r5, #25
 800fdb8:	bf98      	it	ls
 800fdba:	3220      	addls	r2, #32
 800fdbc:	42a2      	cmp	r2, r4
 800fdbe:	d0f0      	beq.n	800fda2 <__match+0x6>
 800fdc0:	2000      	movs	r0, #0
 800fdc2:	e7f3      	b.n	800fdac <__match+0x10>

0800fdc4 <__hexnan>:
 800fdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc8:	680b      	ldr	r3, [r1, #0]
 800fdca:	115e      	asrs	r6, r3, #5
 800fdcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fdd0:	f013 031f 	ands.w	r3, r3, #31
 800fdd4:	b087      	sub	sp, #28
 800fdd6:	bf18      	it	ne
 800fdd8:	3604      	addne	r6, #4
 800fdda:	2500      	movs	r5, #0
 800fddc:	1f37      	subs	r7, r6, #4
 800fdde:	4690      	mov	r8, r2
 800fde0:	6802      	ldr	r2, [r0, #0]
 800fde2:	9301      	str	r3, [sp, #4]
 800fde4:	4682      	mov	sl, r0
 800fde6:	f846 5c04 	str.w	r5, [r6, #-4]
 800fdea:	46b9      	mov	r9, r7
 800fdec:	463c      	mov	r4, r7
 800fdee:	9502      	str	r5, [sp, #8]
 800fdf0:	46ab      	mov	fp, r5
 800fdf2:	7851      	ldrb	r1, [r2, #1]
 800fdf4:	1c53      	adds	r3, r2, #1
 800fdf6:	9303      	str	r3, [sp, #12]
 800fdf8:	b341      	cbz	r1, 800fe4c <__hexnan+0x88>
 800fdfa:	4608      	mov	r0, r1
 800fdfc:	9205      	str	r2, [sp, #20]
 800fdfe:	9104      	str	r1, [sp, #16]
 800fe00:	f7ff fd5e 	bl	800f8c0 <__hexdig_fun>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d14f      	bne.n	800fea8 <__hexnan+0xe4>
 800fe08:	9904      	ldr	r1, [sp, #16]
 800fe0a:	9a05      	ldr	r2, [sp, #20]
 800fe0c:	2920      	cmp	r1, #32
 800fe0e:	d818      	bhi.n	800fe42 <__hexnan+0x7e>
 800fe10:	9b02      	ldr	r3, [sp, #8]
 800fe12:	459b      	cmp	fp, r3
 800fe14:	dd13      	ble.n	800fe3e <__hexnan+0x7a>
 800fe16:	454c      	cmp	r4, r9
 800fe18:	d206      	bcs.n	800fe28 <__hexnan+0x64>
 800fe1a:	2d07      	cmp	r5, #7
 800fe1c:	dc04      	bgt.n	800fe28 <__hexnan+0x64>
 800fe1e:	462a      	mov	r2, r5
 800fe20:	4649      	mov	r1, r9
 800fe22:	4620      	mov	r0, r4
 800fe24:	f7ff ffa8 	bl	800fd78 <L_shift>
 800fe28:	4544      	cmp	r4, r8
 800fe2a:	d950      	bls.n	800fece <__hexnan+0x10a>
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	f1a4 0904 	sub.w	r9, r4, #4
 800fe32:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe36:	f8cd b008 	str.w	fp, [sp, #8]
 800fe3a:	464c      	mov	r4, r9
 800fe3c:	461d      	mov	r5, r3
 800fe3e:	9a03      	ldr	r2, [sp, #12]
 800fe40:	e7d7      	b.n	800fdf2 <__hexnan+0x2e>
 800fe42:	2929      	cmp	r1, #41	; 0x29
 800fe44:	d156      	bne.n	800fef4 <__hexnan+0x130>
 800fe46:	3202      	adds	r2, #2
 800fe48:	f8ca 2000 	str.w	r2, [sl]
 800fe4c:	f1bb 0f00 	cmp.w	fp, #0
 800fe50:	d050      	beq.n	800fef4 <__hexnan+0x130>
 800fe52:	454c      	cmp	r4, r9
 800fe54:	d206      	bcs.n	800fe64 <__hexnan+0xa0>
 800fe56:	2d07      	cmp	r5, #7
 800fe58:	dc04      	bgt.n	800fe64 <__hexnan+0xa0>
 800fe5a:	462a      	mov	r2, r5
 800fe5c:	4649      	mov	r1, r9
 800fe5e:	4620      	mov	r0, r4
 800fe60:	f7ff ff8a 	bl	800fd78 <L_shift>
 800fe64:	4544      	cmp	r4, r8
 800fe66:	d934      	bls.n	800fed2 <__hexnan+0x10e>
 800fe68:	f1a8 0204 	sub.w	r2, r8, #4
 800fe6c:	4623      	mov	r3, r4
 800fe6e:	f853 1b04 	ldr.w	r1, [r3], #4
 800fe72:	f842 1f04 	str.w	r1, [r2, #4]!
 800fe76:	429f      	cmp	r7, r3
 800fe78:	d2f9      	bcs.n	800fe6e <__hexnan+0xaa>
 800fe7a:	1b3b      	subs	r3, r7, r4
 800fe7c:	f023 0303 	bic.w	r3, r3, #3
 800fe80:	3304      	adds	r3, #4
 800fe82:	3401      	adds	r4, #1
 800fe84:	3e03      	subs	r6, #3
 800fe86:	42b4      	cmp	r4, r6
 800fe88:	bf88      	it	hi
 800fe8a:	2304      	movhi	r3, #4
 800fe8c:	4443      	add	r3, r8
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f843 2b04 	str.w	r2, [r3], #4
 800fe94:	429f      	cmp	r7, r3
 800fe96:	d2fb      	bcs.n	800fe90 <__hexnan+0xcc>
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	b91b      	cbnz	r3, 800fea4 <__hexnan+0xe0>
 800fe9c:	4547      	cmp	r7, r8
 800fe9e:	d127      	bne.n	800fef0 <__hexnan+0x12c>
 800fea0:	2301      	movs	r3, #1
 800fea2:	603b      	str	r3, [r7, #0]
 800fea4:	2005      	movs	r0, #5
 800fea6:	e026      	b.n	800fef6 <__hexnan+0x132>
 800fea8:	3501      	adds	r5, #1
 800feaa:	2d08      	cmp	r5, #8
 800feac:	f10b 0b01 	add.w	fp, fp, #1
 800feb0:	dd06      	ble.n	800fec0 <__hexnan+0xfc>
 800feb2:	4544      	cmp	r4, r8
 800feb4:	d9c3      	bls.n	800fe3e <__hexnan+0x7a>
 800feb6:	2300      	movs	r3, #0
 800feb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800febc:	2501      	movs	r5, #1
 800febe:	3c04      	subs	r4, #4
 800fec0:	6822      	ldr	r2, [r4, #0]
 800fec2:	f000 000f 	and.w	r0, r0, #15
 800fec6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800feca:	6022      	str	r2, [r4, #0]
 800fecc:	e7b7      	b.n	800fe3e <__hexnan+0x7a>
 800fece:	2508      	movs	r5, #8
 800fed0:	e7b5      	b.n	800fe3e <__hexnan+0x7a>
 800fed2:	9b01      	ldr	r3, [sp, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d0df      	beq.n	800fe98 <__hexnan+0xd4>
 800fed8:	f04f 32ff 	mov.w	r2, #4294967295
 800fedc:	f1c3 0320 	rsb	r3, r3, #32
 800fee0:	fa22 f303 	lsr.w	r3, r2, r3
 800fee4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fee8:	401a      	ands	r2, r3
 800feea:	f846 2c04 	str.w	r2, [r6, #-4]
 800feee:	e7d3      	b.n	800fe98 <__hexnan+0xd4>
 800fef0:	3f04      	subs	r7, #4
 800fef2:	e7d1      	b.n	800fe98 <__hexnan+0xd4>
 800fef4:	2004      	movs	r0, #4
 800fef6:	b007      	add	sp, #28
 800fef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fefc <__ascii_mbtowc>:
 800fefc:	b082      	sub	sp, #8
 800fefe:	b901      	cbnz	r1, 800ff02 <__ascii_mbtowc+0x6>
 800ff00:	a901      	add	r1, sp, #4
 800ff02:	b142      	cbz	r2, 800ff16 <__ascii_mbtowc+0x1a>
 800ff04:	b14b      	cbz	r3, 800ff1a <__ascii_mbtowc+0x1e>
 800ff06:	7813      	ldrb	r3, [r2, #0]
 800ff08:	600b      	str	r3, [r1, #0]
 800ff0a:	7812      	ldrb	r2, [r2, #0]
 800ff0c:	1e10      	subs	r0, r2, #0
 800ff0e:	bf18      	it	ne
 800ff10:	2001      	movne	r0, #1
 800ff12:	b002      	add	sp, #8
 800ff14:	4770      	bx	lr
 800ff16:	4610      	mov	r0, r2
 800ff18:	e7fb      	b.n	800ff12 <__ascii_mbtowc+0x16>
 800ff1a:	f06f 0001 	mvn.w	r0, #1
 800ff1e:	e7f8      	b.n	800ff12 <__ascii_mbtowc+0x16>

0800ff20 <_Balloc>:
 800ff20:	b570      	push	{r4, r5, r6, lr}
 800ff22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ff24:	4604      	mov	r4, r0
 800ff26:	460d      	mov	r5, r1
 800ff28:	b976      	cbnz	r6, 800ff48 <_Balloc+0x28>
 800ff2a:	2010      	movs	r0, #16
 800ff2c:	f000 fdca 	bl	8010ac4 <malloc>
 800ff30:	4602      	mov	r2, r0
 800ff32:	6260      	str	r0, [r4, #36]	; 0x24
 800ff34:	b920      	cbnz	r0, 800ff40 <_Balloc+0x20>
 800ff36:	4b18      	ldr	r3, [pc, #96]	; (800ff98 <_Balloc+0x78>)
 800ff38:	4818      	ldr	r0, [pc, #96]	; (800ff9c <_Balloc+0x7c>)
 800ff3a:	2166      	movs	r1, #102	; 0x66
 800ff3c:	f000 fd92 	bl	8010a64 <__assert_func>
 800ff40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff44:	6006      	str	r6, [r0, #0]
 800ff46:	60c6      	str	r6, [r0, #12]
 800ff48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ff4a:	68f3      	ldr	r3, [r6, #12]
 800ff4c:	b183      	cbz	r3, 800ff70 <_Balloc+0x50>
 800ff4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff56:	b9b8      	cbnz	r0, 800ff88 <_Balloc+0x68>
 800ff58:	2101      	movs	r1, #1
 800ff5a:	fa01 f605 	lsl.w	r6, r1, r5
 800ff5e:	1d72      	adds	r2, r6, #5
 800ff60:	0092      	lsls	r2, r2, #2
 800ff62:	4620      	mov	r0, r4
 800ff64:	f000 fc9a 	bl	801089c <_calloc_r>
 800ff68:	b160      	cbz	r0, 800ff84 <_Balloc+0x64>
 800ff6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff6e:	e00e      	b.n	800ff8e <_Balloc+0x6e>
 800ff70:	2221      	movs	r2, #33	; 0x21
 800ff72:	2104      	movs	r1, #4
 800ff74:	4620      	mov	r0, r4
 800ff76:	f000 fc91 	bl	801089c <_calloc_r>
 800ff7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff7c:	60f0      	str	r0, [r6, #12]
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d1e4      	bne.n	800ff4e <_Balloc+0x2e>
 800ff84:	2000      	movs	r0, #0
 800ff86:	bd70      	pop	{r4, r5, r6, pc}
 800ff88:	6802      	ldr	r2, [r0, #0]
 800ff8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff8e:	2300      	movs	r3, #0
 800ff90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff94:	e7f7      	b.n	800ff86 <_Balloc+0x66>
 800ff96:	bf00      	nop
 800ff98:	0801241c 	.word	0x0801241c
 800ff9c:	08012433 	.word	0x08012433

0800ffa0 <_Bfree>:
 800ffa0:	b570      	push	{r4, r5, r6, lr}
 800ffa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ffa4:	4605      	mov	r5, r0
 800ffa6:	460c      	mov	r4, r1
 800ffa8:	b976      	cbnz	r6, 800ffc8 <_Bfree+0x28>
 800ffaa:	2010      	movs	r0, #16
 800ffac:	f000 fd8a 	bl	8010ac4 <malloc>
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	6268      	str	r0, [r5, #36]	; 0x24
 800ffb4:	b920      	cbnz	r0, 800ffc0 <_Bfree+0x20>
 800ffb6:	4b09      	ldr	r3, [pc, #36]	; (800ffdc <_Bfree+0x3c>)
 800ffb8:	4809      	ldr	r0, [pc, #36]	; (800ffe0 <_Bfree+0x40>)
 800ffba:	218a      	movs	r1, #138	; 0x8a
 800ffbc:	f000 fd52 	bl	8010a64 <__assert_func>
 800ffc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffc4:	6006      	str	r6, [r0, #0]
 800ffc6:	60c6      	str	r6, [r0, #12]
 800ffc8:	b13c      	cbz	r4, 800ffda <_Bfree+0x3a>
 800ffca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ffcc:	6862      	ldr	r2, [r4, #4]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ffd4:	6021      	str	r1, [r4, #0]
 800ffd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ffda:	bd70      	pop	{r4, r5, r6, pc}
 800ffdc:	0801241c 	.word	0x0801241c
 800ffe0:	08012433 	.word	0x08012433

0800ffe4 <__multadd>:
 800ffe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe8:	690d      	ldr	r5, [r1, #16]
 800ffea:	4607      	mov	r7, r0
 800ffec:	460c      	mov	r4, r1
 800ffee:	461e      	mov	r6, r3
 800fff0:	f101 0c14 	add.w	ip, r1, #20
 800fff4:	2000      	movs	r0, #0
 800fff6:	f8dc 3000 	ldr.w	r3, [ip]
 800fffa:	b299      	uxth	r1, r3
 800fffc:	fb02 6101 	mla	r1, r2, r1, r6
 8010000:	0c1e      	lsrs	r6, r3, #16
 8010002:	0c0b      	lsrs	r3, r1, #16
 8010004:	fb02 3306 	mla	r3, r2, r6, r3
 8010008:	b289      	uxth	r1, r1
 801000a:	3001      	adds	r0, #1
 801000c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010010:	4285      	cmp	r5, r0
 8010012:	f84c 1b04 	str.w	r1, [ip], #4
 8010016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801001a:	dcec      	bgt.n	800fff6 <__multadd+0x12>
 801001c:	b30e      	cbz	r6, 8010062 <__multadd+0x7e>
 801001e:	68a3      	ldr	r3, [r4, #8]
 8010020:	42ab      	cmp	r3, r5
 8010022:	dc19      	bgt.n	8010058 <__multadd+0x74>
 8010024:	6861      	ldr	r1, [r4, #4]
 8010026:	4638      	mov	r0, r7
 8010028:	3101      	adds	r1, #1
 801002a:	f7ff ff79 	bl	800ff20 <_Balloc>
 801002e:	4680      	mov	r8, r0
 8010030:	b928      	cbnz	r0, 801003e <__multadd+0x5a>
 8010032:	4602      	mov	r2, r0
 8010034:	4b0c      	ldr	r3, [pc, #48]	; (8010068 <__multadd+0x84>)
 8010036:	480d      	ldr	r0, [pc, #52]	; (801006c <__multadd+0x88>)
 8010038:	21b5      	movs	r1, #181	; 0xb5
 801003a:	f000 fd13 	bl	8010a64 <__assert_func>
 801003e:	6922      	ldr	r2, [r4, #16]
 8010040:	3202      	adds	r2, #2
 8010042:	f104 010c 	add.w	r1, r4, #12
 8010046:	0092      	lsls	r2, r2, #2
 8010048:	300c      	adds	r0, #12
 801004a:	f7fe fdf5 	bl	800ec38 <memcpy>
 801004e:	4621      	mov	r1, r4
 8010050:	4638      	mov	r0, r7
 8010052:	f7ff ffa5 	bl	800ffa0 <_Bfree>
 8010056:	4644      	mov	r4, r8
 8010058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801005c:	3501      	adds	r5, #1
 801005e:	615e      	str	r6, [r3, #20]
 8010060:	6125      	str	r5, [r4, #16]
 8010062:	4620      	mov	r0, r4
 8010064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010068:	08012390 	.word	0x08012390
 801006c:	08012433 	.word	0x08012433

08010070 <__s2b>:
 8010070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010074:	460c      	mov	r4, r1
 8010076:	4615      	mov	r5, r2
 8010078:	461f      	mov	r7, r3
 801007a:	2209      	movs	r2, #9
 801007c:	3308      	adds	r3, #8
 801007e:	4606      	mov	r6, r0
 8010080:	fb93 f3f2 	sdiv	r3, r3, r2
 8010084:	2100      	movs	r1, #0
 8010086:	2201      	movs	r2, #1
 8010088:	429a      	cmp	r2, r3
 801008a:	db09      	blt.n	80100a0 <__s2b+0x30>
 801008c:	4630      	mov	r0, r6
 801008e:	f7ff ff47 	bl	800ff20 <_Balloc>
 8010092:	b940      	cbnz	r0, 80100a6 <__s2b+0x36>
 8010094:	4602      	mov	r2, r0
 8010096:	4b19      	ldr	r3, [pc, #100]	; (80100fc <__s2b+0x8c>)
 8010098:	4819      	ldr	r0, [pc, #100]	; (8010100 <__s2b+0x90>)
 801009a:	21ce      	movs	r1, #206	; 0xce
 801009c:	f000 fce2 	bl	8010a64 <__assert_func>
 80100a0:	0052      	lsls	r2, r2, #1
 80100a2:	3101      	adds	r1, #1
 80100a4:	e7f0      	b.n	8010088 <__s2b+0x18>
 80100a6:	9b08      	ldr	r3, [sp, #32]
 80100a8:	6143      	str	r3, [r0, #20]
 80100aa:	2d09      	cmp	r5, #9
 80100ac:	f04f 0301 	mov.w	r3, #1
 80100b0:	6103      	str	r3, [r0, #16]
 80100b2:	dd16      	ble.n	80100e2 <__s2b+0x72>
 80100b4:	f104 0909 	add.w	r9, r4, #9
 80100b8:	46c8      	mov	r8, r9
 80100ba:	442c      	add	r4, r5
 80100bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80100c0:	4601      	mov	r1, r0
 80100c2:	3b30      	subs	r3, #48	; 0x30
 80100c4:	220a      	movs	r2, #10
 80100c6:	4630      	mov	r0, r6
 80100c8:	f7ff ff8c 	bl	800ffe4 <__multadd>
 80100cc:	45a0      	cmp	r8, r4
 80100ce:	d1f5      	bne.n	80100bc <__s2b+0x4c>
 80100d0:	f1a5 0408 	sub.w	r4, r5, #8
 80100d4:	444c      	add	r4, r9
 80100d6:	1b2d      	subs	r5, r5, r4
 80100d8:	1963      	adds	r3, r4, r5
 80100da:	42bb      	cmp	r3, r7
 80100dc:	db04      	blt.n	80100e8 <__s2b+0x78>
 80100de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100e2:	340a      	adds	r4, #10
 80100e4:	2509      	movs	r5, #9
 80100e6:	e7f6      	b.n	80100d6 <__s2b+0x66>
 80100e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80100ec:	4601      	mov	r1, r0
 80100ee:	3b30      	subs	r3, #48	; 0x30
 80100f0:	220a      	movs	r2, #10
 80100f2:	4630      	mov	r0, r6
 80100f4:	f7ff ff76 	bl	800ffe4 <__multadd>
 80100f8:	e7ee      	b.n	80100d8 <__s2b+0x68>
 80100fa:	bf00      	nop
 80100fc:	08012390 	.word	0x08012390
 8010100:	08012433 	.word	0x08012433

08010104 <__hi0bits>:
 8010104:	0c03      	lsrs	r3, r0, #16
 8010106:	041b      	lsls	r3, r3, #16
 8010108:	b9d3      	cbnz	r3, 8010140 <__hi0bits+0x3c>
 801010a:	0400      	lsls	r0, r0, #16
 801010c:	2310      	movs	r3, #16
 801010e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010112:	bf04      	itt	eq
 8010114:	0200      	lsleq	r0, r0, #8
 8010116:	3308      	addeq	r3, #8
 8010118:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801011c:	bf04      	itt	eq
 801011e:	0100      	lsleq	r0, r0, #4
 8010120:	3304      	addeq	r3, #4
 8010122:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010126:	bf04      	itt	eq
 8010128:	0080      	lsleq	r0, r0, #2
 801012a:	3302      	addeq	r3, #2
 801012c:	2800      	cmp	r0, #0
 801012e:	db05      	blt.n	801013c <__hi0bits+0x38>
 8010130:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010134:	f103 0301 	add.w	r3, r3, #1
 8010138:	bf08      	it	eq
 801013a:	2320      	moveq	r3, #32
 801013c:	4618      	mov	r0, r3
 801013e:	4770      	bx	lr
 8010140:	2300      	movs	r3, #0
 8010142:	e7e4      	b.n	801010e <__hi0bits+0xa>

08010144 <__lo0bits>:
 8010144:	6803      	ldr	r3, [r0, #0]
 8010146:	f013 0207 	ands.w	r2, r3, #7
 801014a:	4601      	mov	r1, r0
 801014c:	d00b      	beq.n	8010166 <__lo0bits+0x22>
 801014e:	07da      	lsls	r2, r3, #31
 8010150:	d423      	bmi.n	801019a <__lo0bits+0x56>
 8010152:	0798      	lsls	r0, r3, #30
 8010154:	bf49      	itett	mi
 8010156:	085b      	lsrmi	r3, r3, #1
 8010158:	089b      	lsrpl	r3, r3, #2
 801015a:	2001      	movmi	r0, #1
 801015c:	600b      	strmi	r3, [r1, #0]
 801015e:	bf5c      	itt	pl
 8010160:	600b      	strpl	r3, [r1, #0]
 8010162:	2002      	movpl	r0, #2
 8010164:	4770      	bx	lr
 8010166:	b298      	uxth	r0, r3
 8010168:	b9a8      	cbnz	r0, 8010196 <__lo0bits+0x52>
 801016a:	0c1b      	lsrs	r3, r3, #16
 801016c:	2010      	movs	r0, #16
 801016e:	b2da      	uxtb	r2, r3
 8010170:	b90a      	cbnz	r2, 8010176 <__lo0bits+0x32>
 8010172:	3008      	adds	r0, #8
 8010174:	0a1b      	lsrs	r3, r3, #8
 8010176:	071a      	lsls	r2, r3, #28
 8010178:	bf04      	itt	eq
 801017a:	091b      	lsreq	r3, r3, #4
 801017c:	3004      	addeq	r0, #4
 801017e:	079a      	lsls	r2, r3, #30
 8010180:	bf04      	itt	eq
 8010182:	089b      	lsreq	r3, r3, #2
 8010184:	3002      	addeq	r0, #2
 8010186:	07da      	lsls	r2, r3, #31
 8010188:	d403      	bmi.n	8010192 <__lo0bits+0x4e>
 801018a:	085b      	lsrs	r3, r3, #1
 801018c:	f100 0001 	add.w	r0, r0, #1
 8010190:	d005      	beq.n	801019e <__lo0bits+0x5a>
 8010192:	600b      	str	r3, [r1, #0]
 8010194:	4770      	bx	lr
 8010196:	4610      	mov	r0, r2
 8010198:	e7e9      	b.n	801016e <__lo0bits+0x2a>
 801019a:	2000      	movs	r0, #0
 801019c:	4770      	bx	lr
 801019e:	2020      	movs	r0, #32
 80101a0:	4770      	bx	lr
	...

080101a4 <__i2b>:
 80101a4:	b510      	push	{r4, lr}
 80101a6:	460c      	mov	r4, r1
 80101a8:	2101      	movs	r1, #1
 80101aa:	f7ff feb9 	bl	800ff20 <_Balloc>
 80101ae:	4602      	mov	r2, r0
 80101b0:	b928      	cbnz	r0, 80101be <__i2b+0x1a>
 80101b2:	4b05      	ldr	r3, [pc, #20]	; (80101c8 <__i2b+0x24>)
 80101b4:	4805      	ldr	r0, [pc, #20]	; (80101cc <__i2b+0x28>)
 80101b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80101ba:	f000 fc53 	bl	8010a64 <__assert_func>
 80101be:	2301      	movs	r3, #1
 80101c0:	6144      	str	r4, [r0, #20]
 80101c2:	6103      	str	r3, [r0, #16]
 80101c4:	bd10      	pop	{r4, pc}
 80101c6:	bf00      	nop
 80101c8:	08012390 	.word	0x08012390
 80101cc:	08012433 	.word	0x08012433

080101d0 <__multiply>:
 80101d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	4691      	mov	r9, r2
 80101d6:	690a      	ldr	r2, [r1, #16]
 80101d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80101dc:	429a      	cmp	r2, r3
 80101de:	bfb8      	it	lt
 80101e0:	460b      	movlt	r3, r1
 80101e2:	460c      	mov	r4, r1
 80101e4:	bfbc      	itt	lt
 80101e6:	464c      	movlt	r4, r9
 80101e8:	4699      	movlt	r9, r3
 80101ea:	6927      	ldr	r7, [r4, #16]
 80101ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80101f0:	68a3      	ldr	r3, [r4, #8]
 80101f2:	6861      	ldr	r1, [r4, #4]
 80101f4:	eb07 060a 	add.w	r6, r7, sl
 80101f8:	42b3      	cmp	r3, r6
 80101fa:	b085      	sub	sp, #20
 80101fc:	bfb8      	it	lt
 80101fe:	3101      	addlt	r1, #1
 8010200:	f7ff fe8e 	bl	800ff20 <_Balloc>
 8010204:	b930      	cbnz	r0, 8010214 <__multiply+0x44>
 8010206:	4602      	mov	r2, r0
 8010208:	4b44      	ldr	r3, [pc, #272]	; (801031c <__multiply+0x14c>)
 801020a:	4845      	ldr	r0, [pc, #276]	; (8010320 <__multiply+0x150>)
 801020c:	f240 115d 	movw	r1, #349	; 0x15d
 8010210:	f000 fc28 	bl	8010a64 <__assert_func>
 8010214:	f100 0514 	add.w	r5, r0, #20
 8010218:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801021c:	462b      	mov	r3, r5
 801021e:	2200      	movs	r2, #0
 8010220:	4543      	cmp	r3, r8
 8010222:	d321      	bcc.n	8010268 <__multiply+0x98>
 8010224:	f104 0314 	add.w	r3, r4, #20
 8010228:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801022c:	f109 0314 	add.w	r3, r9, #20
 8010230:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010234:	9202      	str	r2, [sp, #8]
 8010236:	1b3a      	subs	r2, r7, r4
 8010238:	3a15      	subs	r2, #21
 801023a:	f022 0203 	bic.w	r2, r2, #3
 801023e:	3204      	adds	r2, #4
 8010240:	f104 0115 	add.w	r1, r4, #21
 8010244:	428f      	cmp	r7, r1
 8010246:	bf38      	it	cc
 8010248:	2204      	movcc	r2, #4
 801024a:	9201      	str	r2, [sp, #4]
 801024c:	9a02      	ldr	r2, [sp, #8]
 801024e:	9303      	str	r3, [sp, #12]
 8010250:	429a      	cmp	r2, r3
 8010252:	d80c      	bhi.n	801026e <__multiply+0x9e>
 8010254:	2e00      	cmp	r6, #0
 8010256:	dd03      	ble.n	8010260 <__multiply+0x90>
 8010258:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801025c:	2b00      	cmp	r3, #0
 801025e:	d05a      	beq.n	8010316 <__multiply+0x146>
 8010260:	6106      	str	r6, [r0, #16]
 8010262:	b005      	add	sp, #20
 8010264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010268:	f843 2b04 	str.w	r2, [r3], #4
 801026c:	e7d8      	b.n	8010220 <__multiply+0x50>
 801026e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010272:	f1ba 0f00 	cmp.w	sl, #0
 8010276:	d024      	beq.n	80102c2 <__multiply+0xf2>
 8010278:	f104 0e14 	add.w	lr, r4, #20
 801027c:	46a9      	mov	r9, r5
 801027e:	f04f 0c00 	mov.w	ip, #0
 8010282:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010286:	f8d9 1000 	ldr.w	r1, [r9]
 801028a:	fa1f fb82 	uxth.w	fp, r2
 801028e:	b289      	uxth	r1, r1
 8010290:	fb0a 110b 	mla	r1, sl, fp, r1
 8010294:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010298:	f8d9 2000 	ldr.w	r2, [r9]
 801029c:	4461      	add	r1, ip
 801029e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80102a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80102a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80102aa:	b289      	uxth	r1, r1
 80102ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80102b0:	4577      	cmp	r7, lr
 80102b2:	f849 1b04 	str.w	r1, [r9], #4
 80102b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80102ba:	d8e2      	bhi.n	8010282 <__multiply+0xb2>
 80102bc:	9a01      	ldr	r2, [sp, #4]
 80102be:	f845 c002 	str.w	ip, [r5, r2]
 80102c2:	9a03      	ldr	r2, [sp, #12]
 80102c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80102c8:	3304      	adds	r3, #4
 80102ca:	f1b9 0f00 	cmp.w	r9, #0
 80102ce:	d020      	beq.n	8010312 <__multiply+0x142>
 80102d0:	6829      	ldr	r1, [r5, #0]
 80102d2:	f104 0c14 	add.w	ip, r4, #20
 80102d6:	46ae      	mov	lr, r5
 80102d8:	f04f 0a00 	mov.w	sl, #0
 80102dc:	f8bc b000 	ldrh.w	fp, [ip]
 80102e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80102e4:	fb09 220b 	mla	r2, r9, fp, r2
 80102e8:	4492      	add	sl, r2
 80102ea:	b289      	uxth	r1, r1
 80102ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80102f0:	f84e 1b04 	str.w	r1, [lr], #4
 80102f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80102f8:	f8be 1000 	ldrh.w	r1, [lr]
 80102fc:	0c12      	lsrs	r2, r2, #16
 80102fe:	fb09 1102 	mla	r1, r9, r2, r1
 8010302:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010306:	4567      	cmp	r7, ip
 8010308:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801030c:	d8e6      	bhi.n	80102dc <__multiply+0x10c>
 801030e:	9a01      	ldr	r2, [sp, #4]
 8010310:	50a9      	str	r1, [r5, r2]
 8010312:	3504      	adds	r5, #4
 8010314:	e79a      	b.n	801024c <__multiply+0x7c>
 8010316:	3e01      	subs	r6, #1
 8010318:	e79c      	b.n	8010254 <__multiply+0x84>
 801031a:	bf00      	nop
 801031c:	08012390 	.word	0x08012390
 8010320:	08012433 	.word	0x08012433

08010324 <__pow5mult>:
 8010324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010328:	4615      	mov	r5, r2
 801032a:	f012 0203 	ands.w	r2, r2, #3
 801032e:	4606      	mov	r6, r0
 8010330:	460f      	mov	r7, r1
 8010332:	d007      	beq.n	8010344 <__pow5mult+0x20>
 8010334:	4c25      	ldr	r4, [pc, #148]	; (80103cc <__pow5mult+0xa8>)
 8010336:	3a01      	subs	r2, #1
 8010338:	2300      	movs	r3, #0
 801033a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801033e:	f7ff fe51 	bl	800ffe4 <__multadd>
 8010342:	4607      	mov	r7, r0
 8010344:	10ad      	asrs	r5, r5, #2
 8010346:	d03d      	beq.n	80103c4 <__pow5mult+0xa0>
 8010348:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801034a:	b97c      	cbnz	r4, 801036c <__pow5mult+0x48>
 801034c:	2010      	movs	r0, #16
 801034e:	f000 fbb9 	bl	8010ac4 <malloc>
 8010352:	4602      	mov	r2, r0
 8010354:	6270      	str	r0, [r6, #36]	; 0x24
 8010356:	b928      	cbnz	r0, 8010364 <__pow5mult+0x40>
 8010358:	4b1d      	ldr	r3, [pc, #116]	; (80103d0 <__pow5mult+0xac>)
 801035a:	481e      	ldr	r0, [pc, #120]	; (80103d4 <__pow5mult+0xb0>)
 801035c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010360:	f000 fb80 	bl	8010a64 <__assert_func>
 8010364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010368:	6004      	str	r4, [r0, #0]
 801036a:	60c4      	str	r4, [r0, #12]
 801036c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010374:	b94c      	cbnz	r4, 801038a <__pow5mult+0x66>
 8010376:	f240 2171 	movw	r1, #625	; 0x271
 801037a:	4630      	mov	r0, r6
 801037c:	f7ff ff12 	bl	80101a4 <__i2b>
 8010380:	2300      	movs	r3, #0
 8010382:	f8c8 0008 	str.w	r0, [r8, #8]
 8010386:	4604      	mov	r4, r0
 8010388:	6003      	str	r3, [r0, #0]
 801038a:	f04f 0900 	mov.w	r9, #0
 801038e:	07eb      	lsls	r3, r5, #31
 8010390:	d50a      	bpl.n	80103a8 <__pow5mult+0x84>
 8010392:	4639      	mov	r1, r7
 8010394:	4622      	mov	r2, r4
 8010396:	4630      	mov	r0, r6
 8010398:	f7ff ff1a 	bl	80101d0 <__multiply>
 801039c:	4639      	mov	r1, r7
 801039e:	4680      	mov	r8, r0
 80103a0:	4630      	mov	r0, r6
 80103a2:	f7ff fdfd 	bl	800ffa0 <_Bfree>
 80103a6:	4647      	mov	r7, r8
 80103a8:	106d      	asrs	r5, r5, #1
 80103aa:	d00b      	beq.n	80103c4 <__pow5mult+0xa0>
 80103ac:	6820      	ldr	r0, [r4, #0]
 80103ae:	b938      	cbnz	r0, 80103c0 <__pow5mult+0x9c>
 80103b0:	4622      	mov	r2, r4
 80103b2:	4621      	mov	r1, r4
 80103b4:	4630      	mov	r0, r6
 80103b6:	f7ff ff0b 	bl	80101d0 <__multiply>
 80103ba:	6020      	str	r0, [r4, #0]
 80103bc:	f8c0 9000 	str.w	r9, [r0]
 80103c0:	4604      	mov	r4, r0
 80103c2:	e7e4      	b.n	801038e <__pow5mult+0x6a>
 80103c4:	4638      	mov	r0, r7
 80103c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103ca:	bf00      	nop
 80103cc:	08012580 	.word	0x08012580
 80103d0:	0801241c 	.word	0x0801241c
 80103d4:	08012433 	.word	0x08012433

080103d8 <__lshift>:
 80103d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103dc:	460c      	mov	r4, r1
 80103de:	6849      	ldr	r1, [r1, #4]
 80103e0:	6923      	ldr	r3, [r4, #16]
 80103e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80103e6:	68a3      	ldr	r3, [r4, #8]
 80103e8:	4607      	mov	r7, r0
 80103ea:	4691      	mov	r9, r2
 80103ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80103f0:	f108 0601 	add.w	r6, r8, #1
 80103f4:	42b3      	cmp	r3, r6
 80103f6:	db0b      	blt.n	8010410 <__lshift+0x38>
 80103f8:	4638      	mov	r0, r7
 80103fa:	f7ff fd91 	bl	800ff20 <_Balloc>
 80103fe:	4605      	mov	r5, r0
 8010400:	b948      	cbnz	r0, 8010416 <__lshift+0x3e>
 8010402:	4602      	mov	r2, r0
 8010404:	4b2a      	ldr	r3, [pc, #168]	; (80104b0 <__lshift+0xd8>)
 8010406:	482b      	ldr	r0, [pc, #172]	; (80104b4 <__lshift+0xdc>)
 8010408:	f240 11d9 	movw	r1, #473	; 0x1d9
 801040c:	f000 fb2a 	bl	8010a64 <__assert_func>
 8010410:	3101      	adds	r1, #1
 8010412:	005b      	lsls	r3, r3, #1
 8010414:	e7ee      	b.n	80103f4 <__lshift+0x1c>
 8010416:	2300      	movs	r3, #0
 8010418:	f100 0114 	add.w	r1, r0, #20
 801041c:	f100 0210 	add.w	r2, r0, #16
 8010420:	4618      	mov	r0, r3
 8010422:	4553      	cmp	r3, sl
 8010424:	db37      	blt.n	8010496 <__lshift+0xbe>
 8010426:	6920      	ldr	r0, [r4, #16]
 8010428:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801042c:	f104 0314 	add.w	r3, r4, #20
 8010430:	f019 091f 	ands.w	r9, r9, #31
 8010434:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010438:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801043c:	d02f      	beq.n	801049e <__lshift+0xc6>
 801043e:	f1c9 0e20 	rsb	lr, r9, #32
 8010442:	468a      	mov	sl, r1
 8010444:	f04f 0c00 	mov.w	ip, #0
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	fa02 f209 	lsl.w	r2, r2, r9
 801044e:	ea42 020c 	orr.w	r2, r2, ip
 8010452:	f84a 2b04 	str.w	r2, [sl], #4
 8010456:	f853 2b04 	ldr.w	r2, [r3], #4
 801045a:	4298      	cmp	r0, r3
 801045c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010460:	d8f2      	bhi.n	8010448 <__lshift+0x70>
 8010462:	1b03      	subs	r3, r0, r4
 8010464:	3b15      	subs	r3, #21
 8010466:	f023 0303 	bic.w	r3, r3, #3
 801046a:	3304      	adds	r3, #4
 801046c:	f104 0215 	add.w	r2, r4, #21
 8010470:	4290      	cmp	r0, r2
 8010472:	bf38      	it	cc
 8010474:	2304      	movcc	r3, #4
 8010476:	f841 c003 	str.w	ip, [r1, r3]
 801047a:	f1bc 0f00 	cmp.w	ip, #0
 801047e:	d001      	beq.n	8010484 <__lshift+0xac>
 8010480:	f108 0602 	add.w	r6, r8, #2
 8010484:	3e01      	subs	r6, #1
 8010486:	4638      	mov	r0, r7
 8010488:	612e      	str	r6, [r5, #16]
 801048a:	4621      	mov	r1, r4
 801048c:	f7ff fd88 	bl	800ffa0 <_Bfree>
 8010490:	4628      	mov	r0, r5
 8010492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010496:	f842 0f04 	str.w	r0, [r2, #4]!
 801049a:	3301      	adds	r3, #1
 801049c:	e7c1      	b.n	8010422 <__lshift+0x4a>
 801049e:	3904      	subs	r1, #4
 80104a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80104a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80104a8:	4298      	cmp	r0, r3
 80104aa:	d8f9      	bhi.n	80104a0 <__lshift+0xc8>
 80104ac:	e7ea      	b.n	8010484 <__lshift+0xac>
 80104ae:	bf00      	nop
 80104b0:	08012390 	.word	0x08012390
 80104b4:	08012433 	.word	0x08012433

080104b8 <__mcmp>:
 80104b8:	b530      	push	{r4, r5, lr}
 80104ba:	6902      	ldr	r2, [r0, #16]
 80104bc:	690c      	ldr	r4, [r1, #16]
 80104be:	1b12      	subs	r2, r2, r4
 80104c0:	d10e      	bne.n	80104e0 <__mcmp+0x28>
 80104c2:	f100 0314 	add.w	r3, r0, #20
 80104c6:	3114      	adds	r1, #20
 80104c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80104cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80104d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80104d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80104d8:	42a5      	cmp	r5, r4
 80104da:	d003      	beq.n	80104e4 <__mcmp+0x2c>
 80104dc:	d305      	bcc.n	80104ea <__mcmp+0x32>
 80104de:	2201      	movs	r2, #1
 80104e0:	4610      	mov	r0, r2
 80104e2:	bd30      	pop	{r4, r5, pc}
 80104e4:	4283      	cmp	r3, r0
 80104e6:	d3f3      	bcc.n	80104d0 <__mcmp+0x18>
 80104e8:	e7fa      	b.n	80104e0 <__mcmp+0x28>
 80104ea:	f04f 32ff 	mov.w	r2, #4294967295
 80104ee:	e7f7      	b.n	80104e0 <__mcmp+0x28>

080104f0 <__mdiff>:
 80104f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f4:	460c      	mov	r4, r1
 80104f6:	4606      	mov	r6, r0
 80104f8:	4611      	mov	r1, r2
 80104fa:	4620      	mov	r0, r4
 80104fc:	4690      	mov	r8, r2
 80104fe:	f7ff ffdb 	bl	80104b8 <__mcmp>
 8010502:	1e05      	subs	r5, r0, #0
 8010504:	d110      	bne.n	8010528 <__mdiff+0x38>
 8010506:	4629      	mov	r1, r5
 8010508:	4630      	mov	r0, r6
 801050a:	f7ff fd09 	bl	800ff20 <_Balloc>
 801050e:	b930      	cbnz	r0, 801051e <__mdiff+0x2e>
 8010510:	4b3a      	ldr	r3, [pc, #232]	; (80105fc <__mdiff+0x10c>)
 8010512:	4602      	mov	r2, r0
 8010514:	f240 2132 	movw	r1, #562	; 0x232
 8010518:	4839      	ldr	r0, [pc, #228]	; (8010600 <__mdiff+0x110>)
 801051a:	f000 faa3 	bl	8010a64 <__assert_func>
 801051e:	2301      	movs	r3, #1
 8010520:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010528:	bfa4      	itt	ge
 801052a:	4643      	movge	r3, r8
 801052c:	46a0      	movge	r8, r4
 801052e:	4630      	mov	r0, r6
 8010530:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010534:	bfa6      	itte	ge
 8010536:	461c      	movge	r4, r3
 8010538:	2500      	movge	r5, #0
 801053a:	2501      	movlt	r5, #1
 801053c:	f7ff fcf0 	bl	800ff20 <_Balloc>
 8010540:	b920      	cbnz	r0, 801054c <__mdiff+0x5c>
 8010542:	4b2e      	ldr	r3, [pc, #184]	; (80105fc <__mdiff+0x10c>)
 8010544:	4602      	mov	r2, r0
 8010546:	f44f 7110 	mov.w	r1, #576	; 0x240
 801054a:	e7e5      	b.n	8010518 <__mdiff+0x28>
 801054c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010550:	6926      	ldr	r6, [r4, #16]
 8010552:	60c5      	str	r5, [r0, #12]
 8010554:	f104 0914 	add.w	r9, r4, #20
 8010558:	f108 0514 	add.w	r5, r8, #20
 801055c:	f100 0e14 	add.w	lr, r0, #20
 8010560:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010564:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010568:	f108 0210 	add.w	r2, r8, #16
 801056c:	46f2      	mov	sl, lr
 801056e:	2100      	movs	r1, #0
 8010570:	f859 3b04 	ldr.w	r3, [r9], #4
 8010574:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010578:	fa1f f883 	uxth.w	r8, r3
 801057c:	fa11 f18b 	uxtah	r1, r1, fp
 8010580:	0c1b      	lsrs	r3, r3, #16
 8010582:	eba1 0808 	sub.w	r8, r1, r8
 8010586:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801058a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801058e:	fa1f f888 	uxth.w	r8, r8
 8010592:	1419      	asrs	r1, r3, #16
 8010594:	454e      	cmp	r6, r9
 8010596:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801059a:	f84a 3b04 	str.w	r3, [sl], #4
 801059e:	d8e7      	bhi.n	8010570 <__mdiff+0x80>
 80105a0:	1b33      	subs	r3, r6, r4
 80105a2:	3b15      	subs	r3, #21
 80105a4:	f023 0303 	bic.w	r3, r3, #3
 80105a8:	3304      	adds	r3, #4
 80105aa:	3415      	adds	r4, #21
 80105ac:	42a6      	cmp	r6, r4
 80105ae:	bf38      	it	cc
 80105b0:	2304      	movcc	r3, #4
 80105b2:	441d      	add	r5, r3
 80105b4:	4473      	add	r3, lr
 80105b6:	469e      	mov	lr, r3
 80105b8:	462e      	mov	r6, r5
 80105ba:	4566      	cmp	r6, ip
 80105bc:	d30e      	bcc.n	80105dc <__mdiff+0xec>
 80105be:	f10c 0203 	add.w	r2, ip, #3
 80105c2:	1b52      	subs	r2, r2, r5
 80105c4:	f022 0203 	bic.w	r2, r2, #3
 80105c8:	3d03      	subs	r5, #3
 80105ca:	45ac      	cmp	ip, r5
 80105cc:	bf38      	it	cc
 80105ce:	2200      	movcc	r2, #0
 80105d0:	441a      	add	r2, r3
 80105d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80105d6:	b17b      	cbz	r3, 80105f8 <__mdiff+0x108>
 80105d8:	6107      	str	r7, [r0, #16]
 80105da:	e7a3      	b.n	8010524 <__mdiff+0x34>
 80105dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80105e0:	fa11 f288 	uxtah	r2, r1, r8
 80105e4:	1414      	asrs	r4, r2, #16
 80105e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80105ea:	b292      	uxth	r2, r2
 80105ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80105f0:	f84e 2b04 	str.w	r2, [lr], #4
 80105f4:	1421      	asrs	r1, r4, #16
 80105f6:	e7e0      	b.n	80105ba <__mdiff+0xca>
 80105f8:	3f01      	subs	r7, #1
 80105fa:	e7ea      	b.n	80105d2 <__mdiff+0xe2>
 80105fc:	08012390 	.word	0x08012390
 8010600:	08012433 	.word	0x08012433

08010604 <__ulp>:
 8010604:	b082      	sub	sp, #8
 8010606:	ed8d 0b00 	vstr	d0, [sp]
 801060a:	9b01      	ldr	r3, [sp, #4]
 801060c:	4912      	ldr	r1, [pc, #72]	; (8010658 <__ulp+0x54>)
 801060e:	4019      	ands	r1, r3
 8010610:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010614:	2900      	cmp	r1, #0
 8010616:	dd05      	ble.n	8010624 <__ulp+0x20>
 8010618:	2200      	movs	r2, #0
 801061a:	460b      	mov	r3, r1
 801061c:	ec43 2b10 	vmov	d0, r2, r3
 8010620:	b002      	add	sp, #8
 8010622:	4770      	bx	lr
 8010624:	4249      	negs	r1, r1
 8010626:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801062a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801062e:	f04f 0200 	mov.w	r2, #0
 8010632:	f04f 0300 	mov.w	r3, #0
 8010636:	da04      	bge.n	8010642 <__ulp+0x3e>
 8010638:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801063c:	fa41 f300 	asr.w	r3, r1, r0
 8010640:	e7ec      	b.n	801061c <__ulp+0x18>
 8010642:	f1a0 0114 	sub.w	r1, r0, #20
 8010646:	291e      	cmp	r1, #30
 8010648:	bfda      	itte	le
 801064a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801064e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010652:	2101      	movgt	r1, #1
 8010654:	460a      	mov	r2, r1
 8010656:	e7e1      	b.n	801061c <__ulp+0x18>
 8010658:	7ff00000 	.word	0x7ff00000

0801065c <__b2d>:
 801065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065e:	6905      	ldr	r5, [r0, #16]
 8010660:	f100 0714 	add.w	r7, r0, #20
 8010664:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010668:	1f2e      	subs	r6, r5, #4
 801066a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801066e:	4620      	mov	r0, r4
 8010670:	f7ff fd48 	bl	8010104 <__hi0bits>
 8010674:	f1c0 0320 	rsb	r3, r0, #32
 8010678:	280a      	cmp	r0, #10
 801067a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80106f8 <__b2d+0x9c>
 801067e:	600b      	str	r3, [r1, #0]
 8010680:	dc14      	bgt.n	80106ac <__b2d+0x50>
 8010682:	f1c0 0e0b 	rsb	lr, r0, #11
 8010686:	fa24 f10e 	lsr.w	r1, r4, lr
 801068a:	42b7      	cmp	r7, r6
 801068c:	ea41 030c 	orr.w	r3, r1, ip
 8010690:	bf34      	ite	cc
 8010692:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010696:	2100      	movcs	r1, #0
 8010698:	3015      	adds	r0, #21
 801069a:	fa04 f000 	lsl.w	r0, r4, r0
 801069e:	fa21 f10e 	lsr.w	r1, r1, lr
 80106a2:	ea40 0201 	orr.w	r2, r0, r1
 80106a6:	ec43 2b10 	vmov	d0, r2, r3
 80106aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106ac:	42b7      	cmp	r7, r6
 80106ae:	bf3a      	itte	cc
 80106b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80106b4:	f1a5 0608 	subcc.w	r6, r5, #8
 80106b8:	2100      	movcs	r1, #0
 80106ba:	380b      	subs	r0, #11
 80106bc:	d017      	beq.n	80106ee <__b2d+0x92>
 80106be:	f1c0 0c20 	rsb	ip, r0, #32
 80106c2:	fa04 f500 	lsl.w	r5, r4, r0
 80106c6:	42be      	cmp	r6, r7
 80106c8:	fa21 f40c 	lsr.w	r4, r1, ip
 80106cc:	ea45 0504 	orr.w	r5, r5, r4
 80106d0:	bf8c      	ite	hi
 80106d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80106d6:	2400      	movls	r4, #0
 80106d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80106dc:	fa01 f000 	lsl.w	r0, r1, r0
 80106e0:	fa24 f40c 	lsr.w	r4, r4, ip
 80106e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80106e8:	ea40 0204 	orr.w	r2, r0, r4
 80106ec:	e7db      	b.n	80106a6 <__b2d+0x4a>
 80106ee:	ea44 030c 	orr.w	r3, r4, ip
 80106f2:	460a      	mov	r2, r1
 80106f4:	e7d7      	b.n	80106a6 <__b2d+0x4a>
 80106f6:	bf00      	nop
 80106f8:	3ff00000 	.word	0x3ff00000

080106fc <__d2b>:
 80106fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010700:	4689      	mov	r9, r1
 8010702:	2101      	movs	r1, #1
 8010704:	ec57 6b10 	vmov	r6, r7, d0
 8010708:	4690      	mov	r8, r2
 801070a:	f7ff fc09 	bl	800ff20 <_Balloc>
 801070e:	4604      	mov	r4, r0
 8010710:	b930      	cbnz	r0, 8010720 <__d2b+0x24>
 8010712:	4602      	mov	r2, r0
 8010714:	4b25      	ldr	r3, [pc, #148]	; (80107ac <__d2b+0xb0>)
 8010716:	4826      	ldr	r0, [pc, #152]	; (80107b0 <__d2b+0xb4>)
 8010718:	f240 310a 	movw	r1, #778	; 0x30a
 801071c:	f000 f9a2 	bl	8010a64 <__assert_func>
 8010720:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010724:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010728:	bb35      	cbnz	r5, 8010778 <__d2b+0x7c>
 801072a:	2e00      	cmp	r6, #0
 801072c:	9301      	str	r3, [sp, #4]
 801072e:	d028      	beq.n	8010782 <__d2b+0x86>
 8010730:	4668      	mov	r0, sp
 8010732:	9600      	str	r6, [sp, #0]
 8010734:	f7ff fd06 	bl	8010144 <__lo0bits>
 8010738:	9900      	ldr	r1, [sp, #0]
 801073a:	b300      	cbz	r0, 801077e <__d2b+0x82>
 801073c:	9a01      	ldr	r2, [sp, #4]
 801073e:	f1c0 0320 	rsb	r3, r0, #32
 8010742:	fa02 f303 	lsl.w	r3, r2, r3
 8010746:	430b      	orrs	r3, r1
 8010748:	40c2      	lsrs	r2, r0
 801074a:	6163      	str	r3, [r4, #20]
 801074c:	9201      	str	r2, [sp, #4]
 801074e:	9b01      	ldr	r3, [sp, #4]
 8010750:	61a3      	str	r3, [r4, #24]
 8010752:	2b00      	cmp	r3, #0
 8010754:	bf14      	ite	ne
 8010756:	2202      	movne	r2, #2
 8010758:	2201      	moveq	r2, #1
 801075a:	6122      	str	r2, [r4, #16]
 801075c:	b1d5      	cbz	r5, 8010794 <__d2b+0x98>
 801075e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010762:	4405      	add	r5, r0
 8010764:	f8c9 5000 	str.w	r5, [r9]
 8010768:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801076c:	f8c8 0000 	str.w	r0, [r8]
 8010770:	4620      	mov	r0, r4
 8010772:	b003      	add	sp, #12
 8010774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801077c:	e7d5      	b.n	801072a <__d2b+0x2e>
 801077e:	6161      	str	r1, [r4, #20]
 8010780:	e7e5      	b.n	801074e <__d2b+0x52>
 8010782:	a801      	add	r0, sp, #4
 8010784:	f7ff fcde 	bl	8010144 <__lo0bits>
 8010788:	9b01      	ldr	r3, [sp, #4]
 801078a:	6163      	str	r3, [r4, #20]
 801078c:	2201      	movs	r2, #1
 801078e:	6122      	str	r2, [r4, #16]
 8010790:	3020      	adds	r0, #32
 8010792:	e7e3      	b.n	801075c <__d2b+0x60>
 8010794:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010798:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801079c:	f8c9 0000 	str.w	r0, [r9]
 80107a0:	6918      	ldr	r0, [r3, #16]
 80107a2:	f7ff fcaf 	bl	8010104 <__hi0bits>
 80107a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80107aa:	e7df      	b.n	801076c <__d2b+0x70>
 80107ac:	08012390 	.word	0x08012390
 80107b0:	08012433 	.word	0x08012433

080107b4 <__ratio>:
 80107b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b8:	4688      	mov	r8, r1
 80107ba:	4669      	mov	r1, sp
 80107bc:	4681      	mov	r9, r0
 80107be:	f7ff ff4d 	bl	801065c <__b2d>
 80107c2:	a901      	add	r1, sp, #4
 80107c4:	4640      	mov	r0, r8
 80107c6:	ec55 4b10 	vmov	r4, r5, d0
 80107ca:	ee10 aa10 	vmov	sl, s0
 80107ce:	f7ff ff45 	bl	801065c <__b2d>
 80107d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80107da:	1a59      	subs	r1, r3, r1
 80107dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107e0:	1ad3      	subs	r3, r2, r3
 80107e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80107e6:	ec57 6b10 	vmov	r6, r7, d0
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	bfd6      	itet	le
 80107ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80107f2:	462a      	movgt	r2, r5
 80107f4:	463a      	movle	r2, r7
 80107f6:	46ab      	mov	fp, r5
 80107f8:	bfd6      	itet	le
 80107fa:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80107fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010802:	ee00 3a90 	vmovle	s1, r3
 8010806:	ec4b ab17 	vmov	d7, sl, fp
 801080a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801080e:	b003      	add	sp, #12
 8010810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010814 <__copybits>:
 8010814:	3901      	subs	r1, #1
 8010816:	b570      	push	{r4, r5, r6, lr}
 8010818:	1149      	asrs	r1, r1, #5
 801081a:	6914      	ldr	r4, [r2, #16]
 801081c:	3101      	adds	r1, #1
 801081e:	f102 0314 	add.w	r3, r2, #20
 8010822:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010826:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801082a:	1f05      	subs	r5, r0, #4
 801082c:	42a3      	cmp	r3, r4
 801082e:	d30c      	bcc.n	801084a <__copybits+0x36>
 8010830:	1aa3      	subs	r3, r4, r2
 8010832:	3b11      	subs	r3, #17
 8010834:	f023 0303 	bic.w	r3, r3, #3
 8010838:	3211      	adds	r2, #17
 801083a:	42a2      	cmp	r2, r4
 801083c:	bf88      	it	hi
 801083e:	2300      	movhi	r3, #0
 8010840:	4418      	add	r0, r3
 8010842:	2300      	movs	r3, #0
 8010844:	4288      	cmp	r0, r1
 8010846:	d305      	bcc.n	8010854 <__copybits+0x40>
 8010848:	bd70      	pop	{r4, r5, r6, pc}
 801084a:	f853 6b04 	ldr.w	r6, [r3], #4
 801084e:	f845 6f04 	str.w	r6, [r5, #4]!
 8010852:	e7eb      	b.n	801082c <__copybits+0x18>
 8010854:	f840 3b04 	str.w	r3, [r0], #4
 8010858:	e7f4      	b.n	8010844 <__copybits+0x30>

0801085a <__any_on>:
 801085a:	f100 0214 	add.w	r2, r0, #20
 801085e:	6900      	ldr	r0, [r0, #16]
 8010860:	114b      	asrs	r3, r1, #5
 8010862:	4298      	cmp	r0, r3
 8010864:	b510      	push	{r4, lr}
 8010866:	db11      	blt.n	801088c <__any_on+0x32>
 8010868:	dd0a      	ble.n	8010880 <__any_on+0x26>
 801086a:	f011 011f 	ands.w	r1, r1, #31
 801086e:	d007      	beq.n	8010880 <__any_on+0x26>
 8010870:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010874:	fa24 f001 	lsr.w	r0, r4, r1
 8010878:	fa00 f101 	lsl.w	r1, r0, r1
 801087c:	428c      	cmp	r4, r1
 801087e:	d10b      	bne.n	8010898 <__any_on+0x3e>
 8010880:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010884:	4293      	cmp	r3, r2
 8010886:	d803      	bhi.n	8010890 <__any_on+0x36>
 8010888:	2000      	movs	r0, #0
 801088a:	bd10      	pop	{r4, pc}
 801088c:	4603      	mov	r3, r0
 801088e:	e7f7      	b.n	8010880 <__any_on+0x26>
 8010890:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010894:	2900      	cmp	r1, #0
 8010896:	d0f5      	beq.n	8010884 <__any_on+0x2a>
 8010898:	2001      	movs	r0, #1
 801089a:	e7f6      	b.n	801088a <__any_on+0x30>

0801089c <_calloc_r>:
 801089c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801089e:	fba1 2402 	umull	r2, r4, r1, r2
 80108a2:	b94c      	cbnz	r4, 80108b8 <_calloc_r+0x1c>
 80108a4:	4611      	mov	r1, r2
 80108a6:	9201      	str	r2, [sp, #4]
 80108a8:	f000 f82e 	bl	8010908 <_malloc_r>
 80108ac:	9a01      	ldr	r2, [sp, #4]
 80108ae:	4605      	mov	r5, r0
 80108b0:	b930      	cbnz	r0, 80108c0 <_calloc_r+0x24>
 80108b2:	4628      	mov	r0, r5
 80108b4:	b003      	add	sp, #12
 80108b6:	bd30      	pop	{r4, r5, pc}
 80108b8:	220c      	movs	r2, #12
 80108ba:	6002      	str	r2, [r0, #0]
 80108bc:	2500      	movs	r5, #0
 80108be:	e7f8      	b.n	80108b2 <_calloc_r+0x16>
 80108c0:	4621      	mov	r1, r4
 80108c2:	f7fe f9c7 	bl	800ec54 <memset>
 80108c6:	e7f4      	b.n	80108b2 <_calloc_r+0x16>

080108c8 <sbrk_aligned>:
 80108c8:	b570      	push	{r4, r5, r6, lr}
 80108ca:	4e0e      	ldr	r6, [pc, #56]	; (8010904 <sbrk_aligned+0x3c>)
 80108cc:	460c      	mov	r4, r1
 80108ce:	6831      	ldr	r1, [r6, #0]
 80108d0:	4605      	mov	r5, r0
 80108d2:	b911      	cbnz	r1, 80108da <sbrk_aligned+0x12>
 80108d4:	f000 f894 	bl	8010a00 <_sbrk_r>
 80108d8:	6030      	str	r0, [r6, #0]
 80108da:	4621      	mov	r1, r4
 80108dc:	4628      	mov	r0, r5
 80108de:	f000 f88f 	bl	8010a00 <_sbrk_r>
 80108e2:	1c43      	adds	r3, r0, #1
 80108e4:	d00a      	beq.n	80108fc <sbrk_aligned+0x34>
 80108e6:	1cc4      	adds	r4, r0, #3
 80108e8:	f024 0403 	bic.w	r4, r4, #3
 80108ec:	42a0      	cmp	r0, r4
 80108ee:	d007      	beq.n	8010900 <sbrk_aligned+0x38>
 80108f0:	1a21      	subs	r1, r4, r0
 80108f2:	4628      	mov	r0, r5
 80108f4:	f000 f884 	bl	8010a00 <_sbrk_r>
 80108f8:	3001      	adds	r0, #1
 80108fa:	d101      	bne.n	8010900 <sbrk_aligned+0x38>
 80108fc:	f04f 34ff 	mov.w	r4, #4294967295
 8010900:	4620      	mov	r0, r4
 8010902:	bd70      	pop	{r4, r5, r6, pc}
 8010904:	24000d40 	.word	0x24000d40

08010908 <_malloc_r>:
 8010908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801090c:	1ccd      	adds	r5, r1, #3
 801090e:	f025 0503 	bic.w	r5, r5, #3
 8010912:	3508      	adds	r5, #8
 8010914:	2d0c      	cmp	r5, #12
 8010916:	bf38      	it	cc
 8010918:	250c      	movcc	r5, #12
 801091a:	2d00      	cmp	r5, #0
 801091c:	4607      	mov	r7, r0
 801091e:	db01      	blt.n	8010924 <_malloc_r+0x1c>
 8010920:	42a9      	cmp	r1, r5
 8010922:	d905      	bls.n	8010930 <_malloc_r+0x28>
 8010924:	230c      	movs	r3, #12
 8010926:	603b      	str	r3, [r7, #0]
 8010928:	2600      	movs	r6, #0
 801092a:	4630      	mov	r0, r6
 801092c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010930:	4e2e      	ldr	r6, [pc, #184]	; (80109ec <_malloc_r+0xe4>)
 8010932:	f000 f8cf 	bl	8010ad4 <__malloc_lock>
 8010936:	6833      	ldr	r3, [r6, #0]
 8010938:	461c      	mov	r4, r3
 801093a:	bb34      	cbnz	r4, 801098a <_malloc_r+0x82>
 801093c:	4629      	mov	r1, r5
 801093e:	4638      	mov	r0, r7
 8010940:	f7ff ffc2 	bl	80108c8 <sbrk_aligned>
 8010944:	1c43      	adds	r3, r0, #1
 8010946:	4604      	mov	r4, r0
 8010948:	d14d      	bne.n	80109e6 <_malloc_r+0xde>
 801094a:	6834      	ldr	r4, [r6, #0]
 801094c:	4626      	mov	r6, r4
 801094e:	2e00      	cmp	r6, #0
 8010950:	d140      	bne.n	80109d4 <_malloc_r+0xcc>
 8010952:	6823      	ldr	r3, [r4, #0]
 8010954:	4631      	mov	r1, r6
 8010956:	4638      	mov	r0, r7
 8010958:	eb04 0803 	add.w	r8, r4, r3
 801095c:	f000 f850 	bl	8010a00 <_sbrk_r>
 8010960:	4580      	cmp	r8, r0
 8010962:	d13a      	bne.n	80109da <_malloc_r+0xd2>
 8010964:	6821      	ldr	r1, [r4, #0]
 8010966:	3503      	adds	r5, #3
 8010968:	1a6d      	subs	r5, r5, r1
 801096a:	f025 0503 	bic.w	r5, r5, #3
 801096e:	3508      	adds	r5, #8
 8010970:	2d0c      	cmp	r5, #12
 8010972:	bf38      	it	cc
 8010974:	250c      	movcc	r5, #12
 8010976:	4629      	mov	r1, r5
 8010978:	4638      	mov	r0, r7
 801097a:	f7ff ffa5 	bl	80108c8 <sbrk_aligned>
 801097e:	3001      	adds	r0, #1
 8010980:	d02b      	beq.n	80109da <_malloc_r+0xd2>
 8010982:	6823      	ldr	r3, [r4, #0]
 8010984:	442b      	add	r3, r5
 8010986:	6023      	str	r3, [r4, #0]
 8010988:	e00e      	b.n	80109a8 <_malloc_r+0xa0>
 801098a:	6822      	ldr	r2, [r4, #0]
 801098c:	1b52      	subs	r2, r2, r5
 801098e:	d41e      	bmi.n	80109ce <_malloc_r+0xc6>
 8010990:	2a0b      	cmp	r2, #11
 8010992:	d916      	bls.n	80109c2 <_malloc_r+0xba>
 8010994:	1961      	adds	r1, r4, r5
 8010996:	42a3      	cmp	r3, r4
 8010998:	6025      	str	r5, [r4, #0]
 801099a:	bf18      	it	ne
 801099c:	6059      	strne	r1, [r3, #4]
 801099e:	6863      	ldr	r3, [r4, #4]
 80109a0:	bf08      	it	eq
 80109a2:	6031      	streq	r1, [r6, #0]
 80109a4:	5162      	str	r2, [r4, r5]
 80109a6:	604b      	str	r3, [r1, #4]
 80109a8:	4638      	mov	r0, r7
 80109aa:	f104 060b 	add.w	r6, r4, #11
 80109ae:	f000 f897 	bl	8010ae0 <__malloc_unlock>
 80109b2:	f026 0607 	bic.w	r6, r6, #7
 80109b6:	1d23      	adds	r3, r4, #4
 80109b8:	1af2      	subs	r2, r6, r3
 80109ba:	d0b6      	beq.n	801092a <_malloc_r+0x22>
 80109bc:	1b9b      	subs	r3, r3, r6
 80109be:	50a3      	str	r3, [r4, r2]
 80109c0:	e7b3      	b.n	801092a <_malloc_r+0x22>
 80109c2:	6862      	ldr	r2, [r4, #4]
 80109c4:	42a3      	cmp	r3, r4
 80109c6:	bf0c      	ite	eq
 80109c8:	6032      	streq	r2, [r6, #0]
 80109ca:	605a      	strne	r2, [r3, #4]
 80109cc:	e7ec      	b.n	80109a8 <_malloc_r+0xa0>
 80109ce:	4623      	mov	r3, r4
 80109d0:	6864      	ldr	r4, [r4, #4]
 80109d2:	e7b2      	b.n	801093a <_malloc_r+0x32>
 80109d4:	4634      	mov	r4, r6
 80109d6:	6876      	ldr	r6, [r6, #4]
 80109d8:	e7b9      	b.n	801094e <_malloc_r+0x46>
 80109da:	230c      	movs	r3, #12
 80109dc:	603b      	str	r3, [r7, #0]
 80109de:	4638      	mov	r0, r7
 80109e0:	f000 f87e 	bl	8010ae0 <__malloc_unlock>
 80109e4:	e7a1      	b.n	801092a <_malloc_r+0x22>
 80109e6:	6025      	str	r5, [r4, #0]
 80109e8:	e7de      	b.n	80109a8 <_malloc_r+0xa0>
 80109ea:	bf00      	nop
 80109ec:	24000d3c 	.word	0x24000d3c

080109f0 <nan>:
 80109f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80109f8 <nan+0x8>
 80109f4:	4770      	bx	lr
 80109f6:	bf00      	nop
 80109f8:	00000000 	.word	0x00000000
 80109fc:	7ff80000 	.word	0x7ff80000

08010a00 <_sbrk_r>:
 8010a00:	b538      	push	{r3, r4, r5, lr}
 8010a02:	4d06      	ldr	r5, [pc, #24]	; (8010a1c <_sbrk_r+0x1c>)
 8010a04:	2300      	movs	r3, #0
 8010a06:	4604      	mov	r4, r0
 8010a08:	4608      	mov	r0, r1
 8010a0a:	602b      	str	r3, [r5, #0]
 8010a0c:	f7f2 faba 	bl	8002f84 <_sbrk>
 8010a10:	1c43      	adds	r3, r0, #1
 8010a12:	d102      	bne.n	8010a1a <_sbrk_r+0x1a>
 8010a14:	682b      	ldr	r3, [r5, #0]
 8010a16:	b103      	cbz	r3, 8010a1a <_sbrk_r+0x1a>
 8010a18:	6023      	str	r3, [r4, #0]
 8010a1a:	bd38      	pop	{r3, r4, r5, pc}
 8010a1c:	24000d44 	.word	0x24000d44

08010a20 <strncmp>:
 8010a20:	b510      	push	{r4, lr}
 8010a22:	b17a      	cbz	r2, 8010a44 <strncmp+0x24>
 8010a24:	4603      	mov	r3, r0
 8010a26:	3901      	subs	r1, #1
 8010a28:	1884      	adds	r4, r0, r2
 8010a2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010a2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010a32:	4290      	cmp	r0, r2
 8010a34:	d101      	bne.n	8010a3a <strncmp+0x1a>
 8010a36:	42a3      	cmp	r3, r4
 8010a38:	d101      	bne.n	8010a3e <strncmp+0x1e>
 8010a3a:	1a80      	subs	r0, r0, r2
 8010a3c:	bd10      	pop	{r4, pc}
 8010a3e:	2800      	cmp	r0, #0
 8010a40:	d1f3      	bne.n	8010a2a <strncmp+0xa>
 8010a42:	e7fa      	b.n	8010a3a <strncmp+0x1a>
 8010a44:	4610      	mov	r0, r2
 8010a46:	e7f9      	b.n	8010a3c <strncmp+0x1c>

08010a48 <__ascii_wctomb>:
 8010a48:	b149      	cbz	r1, 8010a5e <__ascii_wctomb+0x16>
 8010a4a:	2aff      	cmp	r2, #255	; 0xff
 8010a4c:	bf85      	ittet	hi
 8010a4e:	238a      	movhi	r3, #138	; 0x8a
 8010a50:	6003      	strhi	r3, [r0, #0]
 8010a52:	700a      	strbls	r2, [r1, #0]
 8010a54:	f04f 30ff 	movhi.w	r0, #4294967295
 8010a58:	bf98      	it	ls
 8010a5a:	2001      	movls	r0, #1
 8010a5c:	4770      	bx	lr
 8010a5e:	4608      	mov	r0, r1
 8010a60:	4770      	bx	lr
	...

08010a64 <__assert_func>:
 8010a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a66:	4614      	mov	r4, r2
 8010a68:	461a      	mov	r2, r3
 8010a6a:	4b09      	ldr	r3, [pc, #36]	; (8010a90 <__assert_func+0x2c>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4605      	mov	r5, r0
 8010a70:	68d8      	ldr	r0, [r3, #12]
 8010a72:	b14c      	cbz	r4, 8010a88 <__assert_func+0x24>
 8010a74:	4b07      	ldr	r3, [pc, #28]	; (8010a94 <__assert_func+0x30>)
 8010a76:	9100      	str	r1, [sp, #0]
 8010a78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a7c:	4906      	ldr	r1, [pc, #24]	; (8010a98 <__assert_func+0x34>)
 8010a7e:	462b      	mov	r3, r5
 8010a80:	f000 f80e 	bl	8010aa0 <fiprintf>
 8010a84:	f000 fc2c 	bl	80112e0 <abort>
 8010a88:	4b04      	ldr	r3, [pc, #16]	; (8010a9c <__assert_func+0x38>)
 8010a8a:	461c      	mov	r4, r3
 8010a8c:	e7f3      	b.n	8010a76 <__assert_func+0x12>
 8010a8e:	bf00      	nop
 8010a90:	240000b8 	.word	0x240000b8
 8010a94:	0801258c 	.word	0x0801258c
 8010a98:	08012599 	.word	0x08012599
 8010a9c:	080125c7 	.word	0x080125c7

08010aa0 <fiprintf>:
 8010aa0:	b40e      	push	{r1, r2, r3}
 8010aa2:	b503      	push	{r0, r1, lr}
 8010aa4:	4601      	mov	r1, r0
 8010aa6:	ab03      	add	r3, sp, #12
 8010aa8:	4805      	ldr	r0, [pc, #20]	; (8010ac0 <fiprintf+0x20>)
 8010aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aae:	6800      	ldr	r0, [r0, #0]
 8010ab0:	9301      	str	r3, [sp, #4]
 8010ab2:	f000 f891 	bl	8010bd8 <_vfiprintf_r>
 8010ab6:	b002      	add	sp, #8
 8010ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010abc:	b003      	add	sp, #12
 8010abe:	4770      	bx	lr
 8010ac0:	240000b8 	.word	0x240000b8

08010ac4 <malloc>:
 8010ac4:	4b02      	ldr	r3, [pc, #8]	; (8010ad0 <malloc+0xc>)
 8010ac6:	4601      	mov	r1, r0
 8010ac8:	6818      	ldr	r0, [r3, #0]
 8010aca:	f7ff bf1d 	b.w	8010908 <_malloc_r>
 8010ace:	bf00      	nop
 8010ad0:	240000b8 	.word	0x240000b8

08010ad4 <__malloc_lock>:
 8010ad4:	4801      	ldr	r0, [pc, #4]	; (8010adc <__malloc_lock+0x8>)
 8010ad6:	f000 bdc3 	b.w	8011660 <__retarget_lock_acquire_recursive>
 8010ada:	bf00      	nop
 8010adc:	24000d48 	.word	0x24000d48

08010ae0 <__malloc_unlock>:
 8010ae0:	4801      	ldr	r0, [pc, #4]	; (8010ae8 <__malloc_unlock+0x8>)
 8010ae2:	f000 bdbe 	b.w	8011662 <__retarget_lock_release_recursive>
 8010ae6:	bf00      	nop
 8010ae8:	24000d48 	.word	0x24000d48

08010aec <_free_r>:
 8010aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010aee:	2900      	cmp	r1, #0
 8010af0:	d044      	beq.n	8010b7c <_free_r+0x90>
 8010af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010af6:	9001      	str	r0, [sp, #4]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f1a1 0404 	sub.w	r4, r1, #4
 8010afe:	bfb8      	it	lt
 8010b00:	18e4      	addlt	r4, r4, r3
 8010b02:	f7ff ffe7 	bl	8010ad4 <__malloc_lock>
 8010b06:	4a1e      	ldr	r2, [pc, #120]	; (8010b80 <_free_r+0x94>)
 8010b08:	9801      	ldr	r0, [sp, #4]
 8010b0a:	6813      	ldr	r3, [r2, #0]
 8010b0c:	b933      	cbnz	r3, 8010b1c <_free_r+0x30>
 8010b0e:	6063      	str	r3, [r4, #4]
 8010b10:	6014      	str	r4, [r2, #0]
 8010b12:	b003      	add	sp, #12
 8010b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b18:	f7ff bfe2 	b.w	8010ae0 <__malloc_unlock>
 8010b1c:	42a3      	cmp	r3, r4
 8010b1e:	d908      	bls.n	8010b32 <_free_r+0x46>
 8010b20:	6825      	ldr	r5, [r4, #0]
 8010b22:	1961      	adds	r1, r4, r5
 8010b24:	428b      	cmp	r3, r1
 8010b26:	bf01      	itttt	eq
 8010b28:	6819      	ldreq	r1, [r3, #0]
 8010b2a:	685b      	ldreq	r3, [r3, #4]
 8010b2c:	1949      	addeq	r1, r1, r5
 8010b2e:	6021      	streq	r1, [r4, #0]
 8010b30:	e7ed      	b.n	8010b0e <_free_r+0x22>
 8010b32:	461a      	mov	r2, r3
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	b10b      	cbz	r3, 8010b3c <_free_r+0x50>
 8010b38:	42a3      	cmp	r3, r4
 8010b3a:	d9fa      	bls.n	8010b32 <_free_r+0x46>
 8010b3c:	6811      	ldr	r1, [r2, #0]
 8010b3e:	1855      	adds	r5, r2, r1
 8010b40:	42a5      	cmp	r5, r4
 8010b42:	d10b      	bne.n	8010b5c <_free_r+0x70>
 8010b44:	6824      	ldr	r4, [r4, #0]
 8010b46:	4421      	add	r1, r4
 8010b48:	1854      	adds	r4, r2, r1
 8010b4a:	42a3      	cmp	r3, r4
 8010b4c:	6011      	str	r1, [r2, #0]
 8010b4e:	d1e0      	bne.n	8010b12 <_free_r+0x26>
 8010b50:	681c      	ldr	r4, [r3, #0]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	6053      	str	r3, [r2, #4]
 8010b56:	4421      	add	r1, r4
 8010b58:	6011      	str	r1, [r2, #0]
 8010b5a:	e7da      	b.n	8010b12 <_free_r+0x26>
 8010b5c:	d902      	bls.n	8010b64 <_free_r+0x78>
 8010b5e:	230c      	movs	r3, #12
 8010b60:	6003      	str	r3, [r0, #0]
 8010b62:	e7d6      	b.n	8010b12 <_free_r+0x26>
 8010b64:	6825      	ldr	r5, [r4, #0]
 8010b66:	1961      	adds	r1, r4, r5
 8010b68:	428b      	cmp	r3, r1
 8010b6a:	bf04      	itt	eq
 8010b6c:	6819      	ldreq	r1, [r3, #0]
 8010b6e:	685b      	ldreq	r3, [r3, #4]
 8010b70:	6063      	str	r3, [r4, #4]
 8010b72:	bf04      	itt	eq
 8010b74:	1949      	addeq	r1, r1, r5
 8010b76:	6021      	streq	r1, [r4, #0]
 8010b78:	6054      	str	r4, [r2, #4]
 8010b7a:	e7ca      	b.n	8010b12 <_free_r+0x26>
 8010b7c:	b003      	add	sp, #12
 8010b7e:	bd30      	pop	{r4, r5, pc}
 8010b80:	24000d3c 	.word	0x24000d3c

08010b84 <__sfputc_r>:
 8010b84:	6893      	ldr	r3, [r2, #8]
 8010b86:	3b01      	subs	r3, #1
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	b410      	push	{r4}
 8010b8c:	6093      	str	r3, [r2, #8]
 8010b8e:	da08      	bge.n	8010ba2 <__sfputc_r+0x1e>
 8010b90:	6994      	ldr	r4, [r2, #24]
 8010b92:	42a3      	cmp	r3, r4
 8010b94:	db01      	blt.n	8010b9a <__sfputc_r+0x16>
 8010b96:	290a      	cmp	r1, #10
 8010b98:	d103      	bne.n	8010ba2 <__sfputc_r+0x1e>
 8010b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b9e:	f000 badf 	b.w	8011160 <__swbuf_r>
 8010ba2:	6813      	ldr	r3, [r2, #0]
 8010ba4:	1c58      	adds	r0, r3, #1
 8010ba6:	6010      	str	r0, [r2, #0]
 8010ba8:	7019      	strb	r1, [r3, #0]
 8010baa:	4608      	mov	r0, r1
 8010bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bb0:	4770      	bx	lr

08010bb2 <__sfputs_r>:
 8010bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bb4:	4606      	mov	r6, r0
 8010bb6:	460f      	mov	r7, r1
 8010bb8:	4614      	mov	r4, r2
 8010bba:	18d5      	adds	r5, r2, r3
 8010bbc:	42ac      	cmp	r4, r5
 8010bbe:	d101      	bne.n	8010bc4 <__sfputs_r+0x12>
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	e007      	b.n	8010bd4 <__sfputs_r+0x22>
 8010bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bc8:	463a      	mov	r2, r7
 8010bca:	4630      	mov	r0, r6
 8010bcc:	f7ff ffda 	bl	8010b84 <__sfputc_r>
 8010bd0:	1c43      	adds	r3, r0, #1
 8010bd2:	d1f3      	bne.n	8010bbc <__sfputs_r+0xa>
 8010bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010bd8 <_vfiprintf_r>:
 8010bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bdc:	460d      	mov	r5, r1
 8010bde:	b09d      	sub	sp, #116	; 0x74
 8010be0:	4614      	mov	r4, r2
 8010be2:	4698      	mov	r8, r3
 8010be4:	4606      	mov	r6, r0
 8010be6:	b118      	cbz	r0, 8010bf0 <_vfiprintf_r+0x18>
 8010be8:	6983      	ldr	r3, [r0, #24]
 8010bea:	b90b      	cbnz	r3, 8010bf0 <_vfiprintf_r+0x18>
 8010bec:	f000 fc9a 	bl	8011524 <__sinit>
 8010bf0:	4b89      	ldr	r3, [pc, #548]	; (8010e18 <_vfiprintf_r+0x240>)
 8010bf2:	429d      	cmp	r5, r3
 8010bf4:	d11b      	bne.n	8010c2e <_vfiprintf_r+0x56>
 8010bf6:	6875      	ldr	r5, [r6, #4]
 8010bf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bfa:	07d9      	lsls	r1, r3, #31
 8010bfc:	d405      	bmi.n	8010c0a <_vfiprintf_r+0x32>
 8010bfe:	89ab      	ldrh	r3, [r5, #12]
 8010c00:	059a      	lsls	r2, r3, #22
 8010c02:	d402      	bmi.n	8010c0a <_vfiprintf_r+0x32>
 8010c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c06:	f000 fd2b 	bl	8011660 <__retarget_lock_acquire_recursive>
 8010c0a:	89ab      	ldrh	r3, [r5, #12]
 8010c0c:	071b      	lsls	r3, r3, #28
 8010c0e:	d501      	bpl.n	8010c14 <_vfiprintf_r+0x3c>
 8010c10:	692b      	ldr	r3, [r5, #16]
 8010c12:	b9eb      	cbnz	r3, 8010c50 <_vfiprintf_r+0x78>
 8010c14:	4629      	mov	r1, r5
 8010c16:	4630      	mov	r0, r6
 8010c18:	f000 faf4 	bl	8011204 <__swsetup_r>
 8010c1c:	b1c0      	cbz	r0, 8010c50 <_vfiprintf_r+0x78>
 8010c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c20:	07dc      	lsls	r4, r3, #31
 8010c22:	d50e      	bpl.n	8010c42 <_vfiprintf_r+0x6a>
 8010c24:	f04f 30ff 	mov.w	r0, #4294967295
 8010c28:	b01d      	add	sp, #116	; 0x74
 8010c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c2e:	4b7b      	ldr	r3, [pc, #492]	; (8010e1c <_vfiprintf_r+0x244>)
 8010c30:	429d      	cmp	r5, r3
 8010c32:	d101      	bne.n	8010c38 <_vfiprintf_r+0x60>
 8010c34:	68b5      	ldr	r5, [r6, #8]
 8010c36:	e7df      	b.n	8010bf8 <_vfiprintf_r+0x20>
 8010c38:	4b79      	ldr	r3, [pc, #484]	; (8010e20 <_vfiprintf_r+0x248>)
 8010c3a:	429d      	cmp	r5, r3
 8010c3c:	bf08      	it	eq
 8010c3e:	68f5      	ldreq	r5, [r6, #12]
 8010c40:	e7da      	b.n	8010bf8 <_vfiprintf_r+0x20>
 8010c42:	89ab      	ldrh	r3, [r5, #12]
 8010c44:	0598      	lsls	r0, r3, #22
 8010c46:	d4ed      	bmi.n	8010c24 <_vfiprintf_r+0x4c>
 8010c48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c4a:	f000 fd0a 	bl	8011662 <__retarget_lock_release_recursive>
 8010c4e:	e7e9      	b.n	8010c24 <_vfiprintf_r+0x4c>
 8010c50:	2300      	movs	r3, #0
 8010c52:	9309      	str	r3, [sp, #36]	; 0x24
 8010c54:	2320      	movs	r3, #32
 8010c56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c5e:	2330      	movs	r3, #48	; 0x30
 8010c60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010e24 <_vfiprintf_r+0x24c>
 8010c64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c68:	f04f 0901 	mov.w	r9, #1
 8010c6c:	4623      	mov	r3, r4
 8010c6e:	469a      	mov	sl, r3
 8010c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c74:	b10a      	cbz	r2, 8010c7a <_vfiprintf_r+0xa2>
 8010c76:	2a25      	cmp	r2, #37	; 0x25
 8010c78:	d1f9      	bne.n	8010c6e <_vfiprintf_r+0x96>
 8010c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8010c7e:	d00b      	beq.n	8010c98 <_vfiprintf_r+0xc0>
 8010c80:	465b      	mov	r3, fp
 8010c82:	4622      	mov	r2, r4
 8010c84:	4629      	mov	r1, r5
 8010c86:	4630      	mov	r0, r6
 8010c88:	f7ff ff93 	bl	8010bb2 <__sfputs_r>
 8010c8c:	3001      	adds	r0, #1
 8010c8e:	f000 80aa 	beq.w	8010de6 <_vfiprintf_r+0x20e>
 8010c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c94:	445a      	add	r2, fp
 8010c96:	9209      	str	r2, [sp, #36]	; 0x24
 8010c98:	f89a 3000 	ldrb.w	r3, [sl]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f000 80a2 	beq.w	8010de6 <_vfiprintf_r+0x20e>
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cac:	f10a 0a01 	add.w	sl, sl, #1
 8010cb0:	9304      	str	r3, [sp, #16]
 8010cb2:	9307      	str	r3, [sp, #28]
 8010cb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cb8:	931a      	str	r3, [sp, #104]	; 0x68
 8010cba:	4654      	mov	r4, sl
 8010cbc:	2205      	movs	r2, #5
 8010cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cc2:	4858      	ldr	r0, [pc, #352]	; (8010e24 <_vfiprintf_r+0x24c>)
 8010cc4:	f7ef fb14 	bl	80002f0 <memchr>
 8010cc8:	9a04      	ldr	r2, [sp, #16]
 8010cca:	b9d8      	cbnz	r0, 8010d04 <_vfiprintf_r+0x12c>
 8010ccc:	06d1      	lsls	r1, r2, #27
 8010cce:	bf44      	itt	mi
 8010cd0:	2320      	movmi	r3, #32
 8010cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cd6:	0713      	lsls	r3, r2, #28
 8010cd8:	bf44      	itt	mi
 8010cda:	232b      	movmi	r3, #43	; 0x2b
 8010cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8010ce6:	d015      	beq.n	8010d14 <_vfiprintf_r+0x13c>
 8010ce8:	9a07      	ldr	r2, [sp, #28]
 8010cea:	4654      	mov	r4, sl
 8010cec:	2000      	movs	r0, #0
 8010cee:	f04f 0c0a 	mov.w	ip, #10
 8010cf2:	4621      	mov	r1, r4
 8010cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cf8:	3b30      	subs	r3, #48	; 0x30
 8010cfa:	2b09      	cmp	r3, #9
 8010cfc:	d94e      	bls.n	8010d9c <_vfiprintf_r+0x1c4>
 8010cfe:	b1b0      	cbz	r0, 8010d2e <_vfiprintf_r+0x156>
 8010d00:	9207      	str	r2, [sp, #28]
 8010d02:	e014      	b.n	8010d2e <_vfiprintf_r+0x156>
 8010d04:	eba0 0308 	sub.w	r3, r0, r8
 8010d08:	fa09 f303 	lsl.w	r3, r9, r3
 8010d0c:	4313      	orrs	r3, r2
 8010d0e:	9304      	str	r3, [sp, #16]
 8010d10:	46a2      	mov	sl, r4
 8010d12:	e7d2      	b.n	8010cba <_vfiprintf_r+0xe2>
 8010d14:	9b03      	ldr	r3, [sp, #12]
 8010d16:	1d19      	adds	r1, r3, #4
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	9103      	str	r1, [sp, #12]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	bfbb      	ittet	lt
 8010d20:	425b      	neglt	r3, r3
 8010d22:	f042 0202 	orrlt.w	r2, r2, #2
 8010d26:	9307      	strge	r3, [sp, #28]
 8010d28:	9307      	strlt	r3, [sp, #28]
 8010d2a:	bfb8      	it	lt
 8010d2c:	9204      	strlt	r2, [sp, #16]
 8010d2e:	7823      	ldrb	r3, [r4, #0]
 8010d30:	2b2e      	cmp	r3, #46	; 0x2e
 8010d32:	d10c      	bne.n	8010d4e <_vfiprintf_r+0x176>
 8010d34:	7863      	ldrb	r3, [r4, #1]
 8010d36:	2b2a      	cmp	r3, #42	; 0x2a
 8010d38:	d135      	bne.n	8010da6 <_vfiprintf_r+0x1ce>
 8010d3a:	9b03      	ldr	r3, [sp, #12]
 8010d3c:	1d1a      	adds	r2, r3, #4
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	9203      	str	r2, [sp, #12]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	bfb8      	it	lt
 8010d46:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d4a:	3402      	adds	r4, #2
 8010d4c:	9305      	str	r3, [sp, #20]
 8010d4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010e34 <_vfiprintf_r+0x25c>
 8010d52:	7821      	ldrb	r1, [r4, #0]
 8010d54:	2203      	movs	r2, #3
 8010d56:	4650      	mov	r0, sl
 8010d58:	f7ef faca 	bl	80002f0 <memchr>
 8010d5c:	b140      	cbz	r0, 8010d70 <_vfiprintf_r+0x198>
 8010d5e:	2340      	movs	r3, #64	; 0x40
 8010d60:	eba0 000a 	sub.w	r0, r0, sl
 8010d64:	fa03 f000 	lsl.w	r0, r3, r0
 8010d68:	9b04      	ldr	r3, [sp, #16]
 8010d6a:	4303      	orrs	r3, r0
 8010d6c:	3401      	adds	r4, #1
 8010d6e:	9304      	str	r3, [sp, #16]
 8010d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d74:	482c      	ldr	r0, [pc, #176]	; (8010e28 <_vfiprintf_r+0x250>)
 8010d76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d7a:	2206      	movs	r2, #6
 8010d7c:	f7ef fab8 	bl	80002f0 <memchr>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	d03f      	beq.n	8010e04 <_vfiprintf_r+0x22c>
 8010d84:	4b29      	ldr	r3, [pc, #164]	; (8010e2c <_vfiprintf_r+0x254>)
 8010d86:	bb1b      	cbnz	r3, 8010dd0 <_vfiprintf_r+0x1f8>
 8010d88:	9b03      	ldr	r3, [sp, #12]
 8010d8a:	3307      	adds	r3, #7
 8010d8c:	f023 0307 	bic.w	r3, r3, #7
 8010d90:	3308      	adds	r3, #8
 8010d92:	9303      	str	r3, [sp, #12]
 8010d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d96:	443b      	add	r3, r7
 8010d98:	9309      	str	r3, [sp, #36]	; 0x24
 8010d9a:	e767      	b.n	8010c6c <_vfiprintf_r+0x94>
 8010d9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010da0:	460c      	mov	r4, r1
 8010da2:	2001      	movs	r0, #1
 8010da4:	e7a5      	b.n	8010cf2 <_vfiprintf_r+0x11a>
 8010da6:	2300      	movs	r3, #0
 8010da8:	3401      	adds	r4, #1
 8010daa:	9305      	str	r3, [sp, #20]
 8010dac:	4619      	mov	r1, r3
 8010dae:	f04f 0c0a 	mov.w	ip, #10
 8010db2:	4620      	mov	r0, r4
 8010db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010db8:	3a30      	subs	r2, #48	; 0x30
 8010dba:	2a09      	cmp	r2, #9
 8010dbc:	d903      	bls.n	8010dc6 <_vfiprintf_r+0x1ee>
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d0c5      	beq.n	8010d4e <_vfiprintf_r+0x176>
 8010dc2:	9105      	str	r1, [sp, #20]
 8010dc4:	e7c3      	b.n	8010d4e <_vfiprintf_r+0x176>
 8010dc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dca:	4604      	mov	r4, r0
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e7f0      	b.n	8010db2 <_vfiprintf_r+0x1da>
 8010dd0:	ab03      	add	r3, sp, #12
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	462a      	mov	r2, r5
 8010dd6:	4b16      	ldr	r3, [pc, #88]	; (8010e30 <_vfiprintf_r+0x258>)
 8010dd8:	a904      	add	r1, sp, #16
 8010dda:	4630      	mov	r0, r6
 8010ddc:	f3af 8000 	nop.w
 8010de0:	4607      	mov	r7, r0
 8010de2:	1c78      	adds	r0, r7, #1
 8010de4:	d1d6      	bne.n	8010d94 <_vfiprintf_r+0x1bc>
 8010de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010de8:	07d9      	lsls	r1, r3, #31
 8010dea:	d405      	bmi.n	8010df8 <_vfiprintf_r+0x220>
 8010dec:	89ab      	ldrh	r3, [r5, #12]
 8010dee:	059a      	lsls	r2, r3, #22
 8010df0:	d402      	bmi.n	8010df8 <_vfiprintf_r+0x220>
 8010df2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010df4:	f000 fc35 	bl	8011662 <__retarget_lock_release_recursive>
 8010df8:	89ab      	ldrh	r3, [r5, #12]
 8010dfa:	065b      	lsls	r3, r3, #25
 8010dfc:	f53f af12 	bmi.w	8010c24 <_vfiprintf_r+0x4c>
 8010e00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e02:	e711      	b.n	8010c28 <_vfiprintf_r+0x50>
 8010e04:	ab03      	add	r3, sp, #12
 8010e06:	9300      	str	r3, [sp, #0]
 8010e08:	462a      	mov	r2, r5
 8010e0a:	4b09      	ldr	r3, [pc, #36]	; (8010e30 <_vfiprintf_r+0x258>)
 8010e0c:	a904      	add	r1, sp, #16
 8010e0e:	4630      	mov	r0, r6
 8010e10:	f000 f880 	bl	8010f14 <_printf_i>
 8010e14:	e7e4      	b.n	8010de0 <_vfiprintf_r+0x208>
 8010e16:	bf00      	nop
 8010e18:	0801271c 	.word	0x0801271c
 8010e1c:	0801273c 	.word	0x0801273c
 8010e20:	080126fc 	.word	0x080126fc
 8010e24:	080126c9 	.word	0x080126c9
 8010e28:	080126d3 	.word	0x080126d3
 8010e2c:	00000000 	.word	0x00000000
 8010e30:	08010bb3 	.word	0x08010bb3
 8010e34:	080126cf 	.word	0x080126cf

08010e38 <_printf_common>:
 8010e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e3c:	4616      	mov	r6, r2
 8010e3e:	4699      	mov	r9, r3
 8010e40:	688a      	ldr	r2, [r1, #8]
 8010e42:	690b      	ldr	r3, [r1, #16]
 8010e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	bfb8      	it	lt
 8010e4c:	4613      	movlt	r3, r2
 8010e4e:	6033      	str	r3, [r6, #0]
 8010e50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e54:	4607      	mov	r7, r0
 8010e56:	460c      	mov	r4, r1
 8010e58:	b10a      	cbz	r2, 8010e5e <_printf_common+0x26>
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	6033      	str	r3, [r6, #0]
 8010e5e:	6823      	ldr	r3, [r4, #0]
 8010e60:	0699      	lsls	r1, r3, #26
 8010e62:	bf42      	ittt	mi
 8010e64:	6833      	ldrmi	r3, [r6, #0]
 8010e66:	3302      	addmi	r3, #2
 8010e68:	6033      	strmi	r3, [r6, #0]
 8010e6a:	6825      	ldr	r5, [r4, #0]
 8010e6c:	f015 0506 	ands.w	r5, r5, #6
 8010e70:	d106      	bne.n	8010e80 <_printf_common+0x48>
 8010e72:	f104 0a19 	add.w	sl, r4, #25
 8010e76:	68e3      	ldr	r3, [r4, #12]
 8010e78:	6832      	ldr	r2, [r6, #0]
 8010e7a:	1a9b      	subs	r3, r3, r2
 8010e7c:	42ab      	cmp	r3, r5
 8010e7e:	dc26      	bgt.n	8010ece <_printf_common+0x96>
 8010e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e84:	1e13      	subs	r3, r2, #0
 8010e86:	6822      	ldr	r2, [r4, #0]
 8010e88:	bf18      	it	ne
 8010e8a:	2301      	movne	r3, #1
 8010e8c:	0692      	lsls	r2, r2, #26
 8010e8e:	d42b      	bmi.n	8010ee8 <_printf_common+0xb0>
 8010e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e94:	4649      	mov	r1, r9
 8010e96:	4638      	mov	r0, r7
 8010e98:	47c0      	blx	r8
 8010e9a:	3001      	adds	r0, #1
 8010e9c:	d01e      	beq.n	8010edc <_printf_common+0xa4>
 8010e9e:	6823      	ldr	r3, [r4, #0]
 8010ea0:	68e5      	ldr	r5, [r4, #12]
 8010ea2:	6832      	ldr	r2, [r6, #0]
 8010ea4:	f003 0306 	and.w	r3, r3, #6
 8010ea8:	2b04      	cmp	r3, #4
 8010eaa:	bf08      	it	eq
 8010eac:	1aad      	subeq	r5, r5, r2
 8010eae:	68a3      	ldr	r3, [r4, #8]
 8010eb0:	6922      	ldr	r2, [r4, #16]
 8010eb2:	bf0c      	ite	eq
 8010eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010eb8:	2500      	movne	r5, #0
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	bfc4      	itt	gt
 8010ebe:	1a9b      	subgt	r3, r3, r2
 8010ec0:	18ed      	addgt	r5, r5, r3
 8010ec2:	2600      	movs	r6, #0
 8010ec4:	341a      	adds	r4, #26
 8010ec6:	42b5      	cmp	r5, r6
 8010ec8:	d11a      	bne.n	8010f00 <_printf_common+0xc8>
 8010eca:	2000      	movs	r0, #0
 8010ecc:	e008      	b.n	8010ee0 <_printf_common+0xa8>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	4652      	mov	r2, sl
 8010ed2:	4649      	mov	r1, r9
 8010ed4:	4638      	mov	r0, r7
 8010ed6:	47c0      	blx	r8
 8010ed8:	3001      	adds	r0, #1
 8010eda:	d103      	bne.n	8010ee4 <_printf_common+0xac>
 8010edc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ee4:	3501      	adds	r5, #1
 8010ee6:	e7c6      	b.n	8010e76 <_printf_common+0x3e>
 8010ee8:	18e1      	adds	r1, r4, r3
 8010eea:	1c5a      	adds	r2, r3, #1
 8010eec:	2030      	movs	r0, #48	; 0x30
 8010eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ef2:	4422      	add	r2, r4
 8010ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010efc:	3302      	adds	r3, #2
 8010efe:	e7c7      	b.n	8010e90 <_printf_common+0x58>
 8010f00:	2301      	movs	r3, #1
 8010f02:	4622      	mov	r2, r4
 8010f04:	4649      	mov	r1, r9
 8010f06:	4638      	mov	r0, r7
 8010f08:	47c0      	blx	r8
 8010f0a:	3001      	adds	r0, #1
 8010f0c:	d0e6      	beq.n	8010edc <_printf_common+0xa4>
 8010f0e:	3601      	adds	r6, #1
 8010f10:	e7d9      	b.n	8010ec6 <_printf_common+0x8e>
	...

08010f14 <_printf_i>:
 8010f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f18:	7e0f      	ldrb	r7, [r1, #24]
 8010f1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f1c:	2f78      	cmp	r7, #120	; 0x78
 8010f1e:	4691      	mov	r9, r2
 8010f20:	4680      	mov	r8, r0
 8010f22:	460c      	mov	r4, r1
 8010f24:	469a      	mov	sl, r3
 8010f26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010f2a:	d807      	bhi.n	8010f3c <_printf_i+0x28>
 8010f2c:	2f62      	cmp	r7, #98	; 0x62
 8010f2e:	d80a      	bhi.n	8010f46 <_printf_i+0x32>
 8010f30:	2f00      	cmp	r7, #0
 8010f32:	f000 80d8 	beq.w	80110e6 <_printf_i+0x1d2>
 8010f36:	2f58      	cmp	r7, #88	; 0x58
 8010f38:	f000 80a3 	beq.w	8011082 <_printf_i+0x16e>
 8010f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f44:	e03a      	b.n	8010fbc <_printf_i+0xa8>
 8010f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f4a:	2b15      	cmp	r3, #21
 8010f4c:	d8f6      	bhi.n	8010f3c <_printf_i+0x28>
 8010f4e:	a101      	add	r1, pc, #4	; (adr r1, 8010f54 <_printf_i+0x40>)
 8010f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f54:	08010fad 	.word	0x08010fad
 8010f58:	08010fc1 	.word	0x08010fc1
 8010f5c:	08010f3d 	.word	0x08010f3d
 8010f60:	08010f3d 	.word	0x08010f3d
 8010f64:	08010f3d 	.word	0x08010f3d
 8010f68:	08010f3d 	.word	0x08010f3d
 8010f6c:	08010fc1 	.word	0x08010fc1
 8010f70:	08010f3d 	.word	0x08010f3d
 8010f74:	08010f3d 	.word	0x08010f3d
 8010f78:	08010f3d 	.word	0x08010f3d
 8010f7c:	08010f3d 	.word	0x08010f3d
 8010f80:	080110cd 	.word	0x080110cd
 8010f84:	08010ff1 	.word	0x08010ff1
 8010f88:	080110af 	.word	0x080110af
 8010f8c:	08010f3d 	.word	0x08010f3d
 8010f90:	08010f3d 	.word	0x08010f3d
 8010f94:	080110ef 	.word	0x080110ef
 8010f98:	08010f3d 	.word	0x08010f3d
 8010f9c:	08010ff1 	.word	0x08010ff1
 8010fa0:	08010f3d 	.word	0x08010f3d
 8010fa4:	08010f3d 	.word	0x08010f3d
 8010fa8:	080110b7 	.word	0x080110b7
 8010fac:	682b      	ldr	r3, [r5, #0]
 8010fae:	1d1a      	adds	r2, r3, #4
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	602a      	str	r2, [r5, #0]
 8010fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	e0a3      	b.n	8011108 <_printf_i+0x1f4>
 8010fc0:	6820      	ldr	r0, [r4, #0]
 8010fc2:	6829      	ldr	r1, [r5, #0]
 8010fc4:	0606      	lsls	r6, r0, #24
 8010fc6:	f101 0304 	add.w	r3, r1, #4
 8010fca:	d50a      	bpl.n	8010fe2 <_printf_i+0xce>
 8010fcc:	680e      	ldr	r6, [r1, #0]
 8010fce:	602b      	str	r3, [r5, #0]
 8010fd0:	2e00      	cmp	r6, #0
 8010fd2:	da03      	bge.n	8010fdc <_printf_i+0xc8>
 8010fd4:	232d      	movs	r3, #45	; 0x2d
 8010fd6:	4276      	negs	r6, r6
 8010fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fdc:	485e      	ldr	r0, [pc, #376]	; (8011158 <_printf_i+0x244>)
 8010fde:	230a      	movs	r3, #10
 8010fe0:	e019      	b.n	8011016 <_printf_i+0x102>
 8010fe2:	680e      	ldr	r6, [r1, #0]
 8010fe4:	602b      	str	r3, [r5, #0]
 8010fe6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010fea:	bf18      	it	ne
 8010fec:	b236      	sxthne	r6, r6
 8010fee:	e7ef      	b.n	8010fd0 <_printf_i+0xbc>
 8010ff0:	682b      	ldr	r3, [r5, #0]
 8010ff2:	6820      	ldr	r0, [r4, #0]
 8010ff4:	1d19      	adds	r1, r3, #4
 8010ff6:	6029      	str	r1, [r5, #0]
 8010ff8:	0601      	lsls	r1, r0, #24
 8010ffa:	d501      	bpl.n	8011000 <_printf_i+0xec>
 8010ffc:	681e      	ldr	r6, [r3, #0]
 8010ffe:	e002      	b.n	8011006 <_printf_i+0xf2>
 8011000:	0646      	lsls	r6, r0, #25
 8011002:	d5fb      	bpl.n	8010ffc <_printf_i+0xe8>
 8011004:	881e      	ldrh	r6, [r3, #0]
 8011006:	4854      	ldr	r0, [pc, #336]	; (8011158 <_printf_i+0x244>)
 8011008:	2f6f      	cmp	r7, #111	; 0x6f
 801100a:	bf0c      	ite	eq
 801100c:	2308      	moveq	r3, #8
 801100e:	230a      	movne	r3, #10
 8011010:	2100      	movs	r1, #0
 8011012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011016:	6865      	ldr	r5, [r4, #4]
 8011018:	60a5      	str	r5, [r4, #8]
 801101a:	2d00      	cmp	r5, #0
 801101c:	bfa2      	ittt	ge
 801101e:	6821      	ldrge	r1, [r4, #0]
 8011020:	f021 0104 	bicge.w	r1, r1, #4
 8011024:	6021      	strge	r1, [r4, #0]
 8011026:	b90e      	cbnz	r6, 801102c <_printf_i+0x118>
 8011028:	2d00      	cmp	r5, #0
 801102a:	d04d      	beq.n	80110c8 <_printf_i+0x1b4>
 801102c:	4615      	mov	r5, r2
 801102e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011032:	fb03 6711 	mls	r7, r3, r1, r6
 8011036:	5dc7      	ldrb	r7, [r0, r7]
 8011038:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801103c:	4637      	mov	r7, r6
 801103e:	42bb      	cmp	r3, r7
 8011040:	460e      	mov	r6, r1
 8011042:	d9f4      	bls.n	801102e <_printf_i+0x11a>
 8011044:	2b08      	cmp	r3, #8
 8011046:	d10b      	bne.n	8011060 <_printf_i+0x14c>
 8011048:	6823      	ldr	r3, [r4, #0]
 801104a:	07de      	lsls	r6, r3, #31
 801104c:	d508      	bpl.n	8011060 <_printf_i+0x14c>
 801104e:	6923      	ldr	r3, [r4, #16]
 8011050:	6861      	ldr	r1, [r4, #4]
 8011052:	4299      	cmp	r1, r3
 8011054:	bfde      	ittt	le
 8011056:	2330      	movle	r3, #48	; 0x30
 8011058:	f805 3c01 	strble.w	r3, [r5, #-1]
 801105c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011060:	1b52      	subs	r2, r2, r5
 8011062:	6122      	str	r2, [r4, #16]
 8011064:	f8cd a000 	str.w	sl, [sp]
 8011068:	464b      	mov	r3, r9
 801106a:	aa03      	add	r2, sp, #12
 801106c:	4621      	mov	r1, r4
 801106e:	4640      	mov	r0, r8
 8011070:	f7ff fee2 	bl	8010e38 <_printf_common>
 8011074:	3001      	adds	r0, #1
 8011076:	d14c      	bne.n	8011112 <_printf_i+0x1fe>
 8011078:	f04f 30ff 	mov.w	r0, #4294967295
 801107c:	b004      	add	sp, #16
 801107e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011082:	4835      	ldr	r0, [pc, #212]	; (8011158 <_printf_i+0x244>)
 8011084:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011088:	6829      	ldr	r1, [r5, #0]
 801108a:	6823      	ldr	r3, [r4, #0]
 801108c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011090:	6029      	str	r1, [r5, #0]
 8011092:	061d      	lsls	r5, r3, #24
 8011094:	d514      	bpl.n	80110c0 <_printf_i+0x1ac>
 8011096:	07df      	lsls	r7, r3, #31
 8011098:	bf44      	itt	mi
 801109a:	f043 0320 	orrmi.w	r3, r3, #32
 801109e:	6023      	strmi	r3, [r4, #0]
 80110a0:	b91e      	cbnz	r6, 80110aa <_printf_i+0x196>
 80110a2:	6823      	ldr	r3, [r4, #0]
 80110a4:	f023 0320 	bic.w	r3, r3, #32
 80110a8:	6023      	str	r3, [r4, #0]
 80110aa:	2310      	movs	r3, #16
 80110ac:	e7b0      	b.n	8011010 <_printf_i+0xfc>
 80110ae:	6823      	ldr	r3, [r4, #0]
 80110b0:	f043 0320 	orr.w	r3, r3, #32
 80110b4:	6023      	str	r3, [r4, #0]
 80110b6:	2378      	movs	r3, #120	; 0x78
 80110b8:	4828      	ldr	r0, [pc, #160]	; (801115c <_printf_i+0x248>)
 80110ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80110be:	e7e3      	b.n	8011088 <_printf_i+0x174>
 80110c0:	0659      	lsls	r1, r3, #25
 80110c2:	bf48      	it	mi
 80110c4:	b2b6      	uxthmi	r6, r6
 80110c6:	e7e6      	b.n	8011096 <_printf_i+0x182>
 80110c8:	4615      	mov	r5, r2
 80110ca:	e7bb      	b.n	8011044 <_printf_i+0x130>
 80110cc:	682b      	ldr	r3, [r5, #0]
 80110ce:	6826      	ldr	r6, [r4, #0]
 80110d0:	6961      	ldr	r1, [r4, #20]
 80110d2:	1d18      	adds	r0, r3, #4
 80110d4:	6028      	str	r0, [r5, #0]
 80110d6:	0635      	lsls	r5, r6, #24
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	d501      	bpl.n	80110e0 <_printf_i+0x1cc>
 80110dc:	6019      	str	r1, [r3, #0]
 80110de:	e002      	b.n	80110e6 <_printf_i+0x1d2>
 80110e0:	0670      	lsls	r0, r6, #25
 80110e2:	d5fb      	bpl.n	80110dc <_printf_i+0x1c8>
 80110e4:	8019      	strh	r1, [r3, #0]
 80110e6:	2300      	movs	r3, #0
 80110e8:	6123      	str	r3, [r4, #16]
 80110ea:	4615      	mov	r5, r2
 80110ec:	e7ba      	b.n	8011064 <_printf_i+0x150>
 80110ee:	682b      	ldr	r3, [r5, #0]
 80110f0:	1d1a      	adds	r2, r3, #4
 80110f2:	602a      	str	r2, [r5, #0]
 80110f4:	681d      	ldr	r5, [r3, #0]
 80110f6:	6862      	ldr	r2, [r4, #4]
 80110f8:	2100      	movs	r1, #0
 80110fa:	4628      	mov	r0, r5
 80110fc:	f7ef f8f8 	bl	80002f0 <memchr>
 8011100:	b108      	cbz	r0, 8011106 <_printf_i+0x1f2>
 8011102:	1b40      	subs	r0, r0, r5
 8011104:	6060      	str	r0, [r4, #4]
 8011106:	6863      	ldr	r3, [r4, #4]
 8011108:	6123      	str	r3, [r4, #16]
 801110a:	2300      	movs	r3, #0
 801110c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011110:	e7a8      	b.n	8011064 <_printf_i+0x150>
 8011112:	6923      	ldr	r3, [r4, #16]
 8011114:	462a      	mov	r2, r5
 8011116:	4649      	mov	r1, r9
 8011118:	4640      	mov	r0, r8
 801111a:	47d0      	blx	sl
 801111c:	3001      	adds	r0, #1
 801111e:	d0ab      	beq.n	8011078 <_printf_i+0x164>
 8011120:	6823      	ldr	r3, [r4, #0]
 8011122:	079b      	lsls	r3, r3, #30
 8011124:	d413      	bmi.n	801114e <_printf_i+0x23a>
 8011126:	68e0      	ldr	r0, [r4, #12]
 8011128:	9b03      	ldr	r3, [sp, #12]
 801112a:	4298      	cmp	r0, r3
 801112c:	bfb8      	it	lt
 801112e:	4618      	movlt	r0, r3
 8011130:	e7a4      	b.n	801107c <_printf_i+0x168>
 8011132:	2301      	movs	r3, #1
 8011134:	4632      	mov	r2, r6
 8011136:	4649      	mov	r1, r9
 8011138:	4640      	mov	r0, r8
 801113a:	47d0      	blx	sl
 801113c:	3001      	adds	r0, #1
 801113e:	d09b      	beq.n	8011078 <_printf_i+0x164>
 8011140:	3501      	adds	r5, #1
 8011142:	68e3      	ldr	r3, [r4, #12]
 8011144:	9903      	ldr	r1, [sp, #12]
 8011146:	1a5b      	subs	r3, r3, r1
 8011148:	42ab      	cmp	r3, r5
 801114a:	dcf2      	bgt.n	8011132 <_printf_i+0x21e>
 801114c:	e7eb      	b.n	8011126 <_printf_i+0x212>
 801114e:	2500      	movs	r5, #0
 8011150:	f104 0619 	add.w	r6, r4, #25
 8011154:	e7f5      	b.n	8011142 <_printf_i+0x22e>
 8011156:	bf00      	nop
 8011158:	080126da 	.word	0x080126da
 801115c:	080126eb 	.word	0x080126eb

08011160 <__swbuf_r>:
 8011160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011162:	460e      	mov	r6, r1
 8011164:	4614      	mov	r4, r2
 8011166:	4605      	mov	r5, r0
 8011168:	b118      	cbz	r0, 8011172 <__swbuf_r+0x12>
 801116a:	6983      	ldr	r3, [r0, #24]
 801116c:	b90b      	cbnz	r3, 8011172 <__swbuf_r+0x12>
 801116e:	f000 f9d9 	bl	8011524 <__sinit>
 8011172:	4b21      	ldr	r3, [pc, #132]	; (80111f8 <__swbuf_r+0x98>)
 8011174:	429c      	cmp	r4, r3
 8011176:	d12b      	bne.n	80111d0 <__swbuf_r+0x70>
 8011178:	686c      	ldr	r4, [r5, #4]
 801117a:	69a3      	ldr	r3, [r4, #24]
 801117c:	60a3      	str	r3, [r4, #8]
 801117e:	89a3      	ldrh	r3, [r4, #12]
 8011180:	071a      	lsls	r2, r3, #28
 8011182:	d52f      	bpl.n	80111e4 <__swbuf_r+0x84>
 8011184:	6923      	ldr	r3, [r4, #16]
 8011186:	b36b      	cbz	r3, 80111e4 <__swbuf_r+0x84>
 8011188:	6923      	ldr	r3, [r4, #16]
 801118a:	6820      	ldr	r0, [r4, #0]
 801118c:	1ac0      	subs	r0, r0, r3
 801118e:	6963      	ldr	r3, [r4, #20]
 8011190:	b2f6      	uxtb	r6, r6
 8011192:	4283      	cmp	r3, r0
 8011194:	4637      	mov	r7, r6
 8011196:	dc04      	bgt.n	80111a2 <__swbuf_r+0x42>
 8011198:	4621      	mov	r1, r4
 801119a:	4628      	mov	r0, r5
 801119c:	f000 f92e 	bl	80113fc <_fflush_r>
 80111a0:	bb30      	cbnz	r0, 80111f0 <__swbuf_r+0x90>
 80111a2:	68a3      	ldr	r3, [r4, #8]
 80111a4:	3b01      	subs	r3, #1
 80111a6:	60a3      	str	r3, [r4, #8]
 80111a8:	6823      	ldr	r3, [r4, #0]
 80111aa:	1c5a      	adds	r2, r3, #1
 80111ac:	6022      	str	r2, [r4, #0]
 80111ae:	701e      	strb	r6, [r3, #0]
 80111b0:	6963      	ldr	r3, [r4, #20]
 80111b2:	3001      	adds	r0, #1
 80111b4:	4283      	cmp	r3, r0
 80111b6:	d004      	beq.n	80111c2 <__swbuf_r+0x62>
 80111b8:	89a3      	ldrh	r3, [r4, #12]
 80111ba:	07db      	lsls	r3, r3, #31
 80111bc:	d506      	bpl.n	80111cc <__swbuf_r+0x6c>
 80111be:	2e0a      	cmp	r6, #10
 80111c0:	d104      	bne.n	80111cc <__swbuf_r+0x6c>
 80111c2:	4621      	mov	r1, r4
 80111c4:	4628      	mov	r0, r5
 80111c6:	f000 f919 	bl	80113fc <_fflush_r>
 80111ca:	b988      	cbnz	r0, 80111f0 <__swbuf_r+0x90>
 80111cc:	4638      	mov	r0, r7
 80111ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111d0:	4b0a      	ldr	r3, [pc, #40]	; (80111fc <__swbuf_r+0x9c>)
 80111d2:	429c      	cmp	r4, r3
 80111d4:	d101      	bne.n	80111da <__swbuf_r+0x7a>
 80111d6:	68ac      	ldr	r4, [r5, #8]
 80111d8:	e7cf      	b.n	801117a <__swbuf_r+0x1a>
 80111da:	4b09      	ldr	r3, [pc, #36]	; (8011200 <__swbuf_r+0xa0>)
 80111dc:	429c      	cmp	r4, r3
 80111de:	bf08      	it	eq
 80111e0:	68ec      	ldreq	r4, [r5, #12]
 80111e2:	e7ca      	b.n	801117a <__swbuf_r+0x1a>
 80111e4:	4621      	mov	r1, r4
 80111e6:	4628      	mov	r0, r5
 80111e8:	f000 f80c 	bl	8011204 <__swsetup_r>
 80111ec:	2800      	cmp	r0, #0
 80111ee:	d0cb      	beq.n	8011188 <__swbuf_r+0x28>
 80111f0:	f04f 37ff 	mov.w	r7, #4294967295
 80111f4:	e7ea      	b.n	80111cc <__swbuf_r+0x6c>
 80111f6:	bf00      	nop
 80111f8:	0801271c 	.word	0x0801271c
 80111fc:	0801273c 	.word	0x0801273c
 8011200:	080126fc 	.word	0x080126fc

08011204 <__swsetup_r>:
 8011204:	4b32      	ldr	r3, [pc, #200]	; (80112d0 <__swsetup_r+0xcc>)
 8011206:	b570      	push	{r4, r5, r6, lr}
 8011208:	681d      	ldr	r5, [r3, #0]
 801120a:	4606      	mov	r6, r0
 801120c:	460c      	mov	r4, r1
 801120e:	b125      	cbz	r5, 801121a <__swsetup_r+0x16>
 8011210:	69ab      	ldr	r3, [r5, #24]
 8011212:	b913      	cbnz	r3, 801121a <__swsetup_r+0x16>
 8011214:	4628      	mov	r0, r5
 8011216:	f000 f985 	bl	8011524 <__sinit>
 801121a:	4b2e      	ldr	r3, [pc, #184]	; (80112d4 <__swsetup_r+0xd0>)
 801121c:	429c      	cmp	r4, r3
 801121e:	d10f      	bne.n	8011240 <__swsetup_r+0x3c>
 8011220:	686c      	ldr	r4, [r5, #4]
 8011222:	89a3      	ldrh	r3, [r4, #12]
 8011224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011228:	0719      	lsls	r1, r3, #28
 801122a:	d42c      	bmi.n	8011286 <__swsetup_r+0x82>
 801122c:	06dd      	lsls	r5, r3, #27
 801122e:	d411      	bmi.n	8011254 <__swsetup_r+0x50>
 8011230:	2309      	movs	r3, #9
 8011232:	6033      	str	r3, [r6, #0]
 8011234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011238:	81a3      	strh	r3, [r4, #12]
 801123a:	f04f 30ff 	mov.w	r0, #4294967295
 801123e:	e03e      	b.n	80112be <__swsetup_r+0xba>
 8011240:	4b25      	ldr	r3, [pc, #148]	; (80112d8 <__swsetup_r+0xd4>)
 8011242:	429c      	cmp	r4, r3
 8011244:	d101      	bne.n	801124a <__swsetup_r+0x46>
 8011246:	68ac      	ldr	r4, [r5, #8]
 8011248:	e7eb      	b.n	8011222 <__swsetup_r+0x1e>
 801124a:	4b24      	ldr	r3, [pc, #144]	; (80112dc <__swsetup_r+0xd8>)
 801124c:	429c      	cmp	r4, r3
 801124e:	bf08      	it	eq
 8011250:	68ec      	ldreq	r4, [r5, #12]
 8011252:	e7e6      	b.n	8011222 <__swsetup_r+0x1e>
 8011254:	0758      	lsls	r0, r3, #29
 8011256:	d512      	bpl.n	801127e <__swsetup_r+0x7a>
 8011258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801125a:	b141      	cbz	r1, 801126e <__swsetup_r+0x6a>
 801125c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011260:	4299      	cmp	r1, r3
 8011262:	d002      	beq.n	801126a <__swsetup_r+0x66>
 8011264:	4630      	mov	r0, r6
 8011266:	f7ff fc41 	bl	8010aec <_free_r>
 801126a:	2300      	movs	r3, #0
 801126c:	6363      	str	r3, [r4, #52]	; 0x34
 801126e:	89a3      	ldrh	r3, [r4, #12]
 8011270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011274:	81a3      	strh	r3, [r4, #12]
 8011276:	2300      	movs	r3, #0
 8011278:	6063      	str	r3, [r4, #4]
 801127a:	6923      	ldr	r3, [r4, #16]
 801127c:	6023      	str	r3, [r4, #0]
 801127e:	89a3      	ldrh	r3, [r4, #12]
 8011280:	f043 0308 	orr.w	r3, r3, #8
 8011284:	81a3      	strh	r3, [r4, #12]
 8011286:	6923      	ldr	r3, [r4, #16]
 8011288:	b94b      	cbnz	r3, 801129e <__swsetup_r+0x9a>
 801128a:	89a3      	ldrh	r3, [r4, #12]
 801128c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011294:	d003      	beq.n	801129e <__swsetup_r+0x9a>
 8011296:	4621      	mov	r1, r4
 8011298:	4630      	mov	r0, r6
 801129a:	f000 fa09 	bl	80116b0 <__smakebuf_r>
 801129e:	89a0      	ldrh	r0, [r4, #12]
 80112a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112a4:	f010 0301 	ands.w	r3, r0, #1
 80112a8:	d00a      	beq.n	80112c0 <__swsetup_r+0xbc>
 80112aa:	2300      	movs	r3, #0
 80112ac:	60a3      	str	r3, [r4, #8]
 80112ae:	6963      	ldr	r3, [r4, #20]
 80112b0:	425b      	negs	r3, r3
 80112b2:	61a3      	str	r3, [r4, #24]
 80112b4:	6923      	ldr	r3, [r4, #16]
 80112b6:	b943      	cbnz	r3, 80112ca <__swsetup_r+0xc6>
 80112b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80112bc:	d1ba      	bne.n	8011234 <__swsetup_r+0x30>
 80112be:	bd70      	pop	{r4, r5, r6, pc}
 80112c0:	0781      	lsls	r1, r0, #30
 80112c2:	bf58      	it	pl
 80112c4:	6963      	ldrpl	r3, [r4, #20]
 80112c6:	60a3      	str	r3, [r4, #8]
 80112c8:	e7f4      	b.n	80112b4 <__swsetup_r+0xb0>
 80112ca:	2000      	movs	r0, #0
 80112cc:	e7f7      	b.n	80112be <__swsetup_r+0xba>
 80112ce:	bf00      	nop
 80112d0:	240000b8 	.word	0x240000b8
 80112d4:	0801271c 	.word	0x0801271c
 80112d8:	0801273c 	.word	0x0801273c
 80112dc:	080126fc 	.word	0x080126fc

080112e0 <abort>:
 80112e0:	b508      	push	{r3, lr}
 80112e2:	2006      	movs	r0, #6
 80112e4:	f000 fa4c 	bl	8011780 <raise>
 80112e8:	2001      	movs	r0, #1
 80112ea:	f7f1 fdd3 	bl	8002e94 <_exit>
	...

080112f0 <__sflush_r>:
 80112f0:	898a      	ldrh	r2, [r1, #12]
 80112f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112f6:	4605      	mov	r5, r0
 80112f8:	0710      	lsls	r0, r2, #28
 80112fa:	460c      	mov	r4, r1
 80112fc:	d458      	bmi.n	80113b0 <__sflush_r+0xc0>
 80112fe:	684b      	ldr	r3, [r1, #4]
 8011300:	2b00      	cmp	r3, #0
 8011302:	dc05      	bgt.n	8011310 <__sflush_r+0x20>
 8011304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011306:	2b00      	cmp	r3, #0
 8011308:	dc02      	bgt.n	8011310 <__sflush_r+0x20>
 801130a:	2000      	movs	r0, #0
 801130c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011312:	2e00      	cmp	r6, #0
 8011314:	d0f9      	beq.n	801130a <__sflush_r+0x1a>
 8011316:	2300      	movs	r3, #0
 8011318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801131c:	682f      	ldr	r7, [r5, #0]
 801131e:	602b      	str	r3, [r5, #0]
 8011320:	d032      	beq.n	8011388 <__sflush_r+0x98>
 8011322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011324:	89a3      	ldrh	r3, [r4, #12]
 8011326:	075a      	lsls	r2, r3, #29
 8011328:	d505      	bpl.n	8011336 <__sflush_r+0x46>
 801132a:	6863      	ldr	r3, [r4, #4]
 801132c:	1ac0      	subs	r0, r0, r3
 801132e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011330:	b10b      	cbz	r3, 8011336 <__sflush_r+0x46>
 8011332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011334:	1ac0      	subs	r0, r0, r3
 8011336:	2300      	movs	r3, #0
 8011338:	4602      	mov	r2, r0
 801133a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801133c:	6a21      	ldr	r1, [r4, #32]
 801133e:	4628      	mov	r0, r5
 8011340:	47b0      	blx	r6
 8011342:	1c43      	adds	r3, r0, #1
 8011344:	89a3      	ldrh	r3, [r4, #12]
 8011346:	d106      	bne.n	8011356 <__sflush_r+0x66>
 8011348:	6829      	ldr	r1, [r5, #0]
 801134a:	291d      	cmp	r1, #29
 801134c:	d82c      	bhi.n	80113a8 <__sflush_r+0xb8>
 801134e:	4a2a      	ldr	r2, [pc, #168]	; (80113f8 <__sflush_r+0x108>)
 8011350:	40ca      	lsrs	r2, r1
 8011352:	07d6      	lsls	r6, r2, #31
 8011354:	d528      	bpl.n	80113a8 <__sflush_r+0xb8>
 8011356:	2200      	movs	r2, #0
 8011358:	6062      	str	r2, [r4, #4]
 801135a:	04d9      	lsls	r1, r3, #19
 801135c:	6922      	ldr	r2, [r4, #16]
 801135e:	6022      	str	r2, [r4, #0]
 8011360:	d504      	bpl.n	801136c <__sflush_r+0x7c>
 8011362:	1c42      	adds	r2, r0, #1
 8011364:	d101      	bne.n	801136a <__sflush_r+0x7a>
 8011366:	682b      	ldr	r3, [r5, #0]
 8011368:	b903      	cbnz	r3, 801136c <__sflush_r+0x7c>
 801136a:	6560      	str	r0, [r4, #84]	; 0x54
 801136c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801136e:	602f      	str	r7, [r5, #0]
 8011370:	2900      	cmp	r1, #0
 8011372:	d0ca      	beq.n	801130a <__sflush_r+0x1a>
 8011374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011378:	4299      	cmp	r1, r3
 801137a:	d002      	beq.n	8011382 <__sflush_r+0x92>
 801137c:	4628      	mov	r0, r5
 801137e:	f7ff fbb5 	bl	8010aec <_free_r>
 8011382:	2000      	movs	r0, #0
 8011384:	6360      	str	r0, [r4, #52]	; 0x34
 8011386:	e7c1      	b.n	801130c <__sflush_r+0x1c>
 8011388:	6a21      	ldr	r1, [r4, #32]
 801138a:	2301      	movs	r3, #1
 801138c:	4628      	mov	r0, r5
 801138e:	47b0      	blx	r6
 8011390:	1c41      	adds	r1, r0, #1
 8011392:	d1c7      	bne.n	8011324 <__sflush_r+0x34>
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d0c4      	beq.n	8011324 <__sflush_r+0x34>
 801139a:	2b1d      	cmp	r3, #29
 801139c:	d001      	beq.n	80113a2 <__sflush_r+0xb2>
 801139e:	2b16      	cmp	r3, #22
 80113a0:	d101      	bne.n	80113a6 <__sflush_r+0xb6>
 80113a2:	602f      	str	r7, [r5, #0]
 80113a4:	e7b1      	b.n	801130a <__sflush_r+0x1a>
 80113a6:	89a3      	ldrh	r3, [r4, #12]
 80113a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113ac:	81a3      	strh	r3, [r4, #12]
 80113ae:	e7ad      	b.n	801130c <__sflush_r+0x1c>
 80113b0:	690f      	ldr	r7, [r1, #16]
 80113b2:	2f00      	cmp	r7, #0
 80113b4:	d0a9      	beq.n	801130a <__sflush_r+0x1a>
 80113b6:	0793      	lsls	r3, r2, #30
 80113b8:	680e      	ldr	r6, [r1, #0]
 80113ba:	bf08      	it	eq
 80113bc:	694b      	ldreq	r3, [r1, #20]
 80113be:	600f      	str	r7, [r1, #0]
 80113c0:	bf18      	it	ne
 80113c2:	2300      	movne	r3, #0
 80113c4:	eba6 0807 	sub.w	r8, r6, r7
 80113c8:	608b      	str	r3, [r1, #8]
 80113ca:	f1b8 0f00 	cmp.w	r8, #0
 80113ce:	dd9c      	ble.n	801130a <__sflush_r+0x1a>
 80113d0:	6a21      	ldr	r1, [r4, #32]
 80113d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80113d4:	4643      	mov	r3, r8
 80113d6:	463a      	mov	r2, r7
 80113d8:	4628      	mov	r0, r5
 80113da:	47b0      	blx	r6
 80113dc:	2800      	cmp	r0, #0
 80113de:	dc06      	bgt.n	80113ee <__sflush_r+0xfe>
 80113e0:	89a3      	ldrh	r3, [r4, #12]
 80113e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113e6:	81a3      	strh	r3, [r4, #12]
 80113e8:	f04f 30ff 	mov.w	r0, #4294967295
 80113ec:	e78e      	b.n	801130c <__sflush_r+0x1c>
 80113ee:	4407      	add	r7, r0
 80113f0:	eba8 0800 	sub.w	r8, r8, r0
 80113f4:	e7e9      	b.n	80113ca <__sflush_r+0xda>
 80113f6:	bf00      	nop
 80113f8:	20400001 	.word	0x20400001

080113fc <_fflush_r>:
 80113fc:	b538      	push	{r3, r4, r5, lr}
 80113fe:	690b      	ldr	r3, [r1, #16]
 8011400:	4605      	mov	r5, r0
 8011402:	460c      	mov	r4, r1
 8011404:	b913      	cbnz	r3, 801140c <_fflush_r+0x10>
 8011406:	2500      	movs	r5, #0
 8011408:	4628      	mov	r0, r5
 801140a:	bd38      	pop	{r3, r4, r5, pc}
 801140c:	b118      	cbz	r0, 8011416 <_fflush_r+0x1a>
 801140e:	6983      	ldr	r3, [r0, #24]
 8011410:	b90b      	cbnz	r3, 8011416 <_fflush_r+0x1a>
 8011412:	f000 f887 	bl	8011524 <__sinit>
 8011416:	4b14      	ldr	r3, [pc, #80]	; (8011468 <_fflush_r+0x6c>)
 8011418:	429c      	cmp	r4, r3
 801141a:	d11b      	bne.n	8011454 <_fflush_r+0x58>
 801141c:	686c      	ldr	r4, [r5, #4]
 801141e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d0ef      	beq.n	8011406 <_fflush_r+0xa>
 8011426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011428:	07d0      	lsls	r0, r2, #31
 801142a:	d404      	bmi.n	8011436 <_fflush_r+0x3a>
 801142c:	0599      	lsls	r1, r3, #22
 801142e:	d402      	bmi.n	8011436 <_fflush_r+0x3a>
 8011430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011432:	f000 f915 	bl	8011660 <__retarget_lock_acquire_recursive>
 8011436:	4628      	mov	r0, r5
 8011438:	4621      	mov	r1, r4
 801143a:	f7ff ff59 	bl	80112f0 <__sflush_r>
 801143e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011440:	07da      	lsls	r2, r3, #31
 8011442:	4605      	mov	r5, r0
 8011444:	d4e0      	bmi.n	8011408 <_fflush_r+0xc>
 8011446:	89a3      	ldrh	r3, [r4, #12]
 8011448:	059b      	lsls	r3, r3, #22
 801144a:	d4dd      	bmi.n	8011408 <_fflush_r+0xc>
 801144c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801144e:	f000 f908 	bl	8011662 <__retarget_lock_release_recursive>
 8011452:	e7d9      	b.n	8011408 <_fflush_r+0xc>
 8011454:	4b05      	ldr	r3, [pc, #20]	; (801146c <_fflush_r+0x70>)
 8011456:	429c      	cmp	r4, r3
 8011458:	d101      	bne.n	801145e <_fflush_r+0x62>
 801145a:	68ac      	ldr	r4, [r5, #8]
 801145c:	e7df      	b.n	801141e <_fflush_r+0x22>
 801145e:	4b04      	ldr	r3, [pc, #16]	; (8011470 <_fflush_r+0x74>)
 8011460:	429c      	cmp	r4, r3
 8011462:	bf08      	it	eq
 8011464:	68ec      	ldreq	r4, [r5, #12]
 8011466:	e7da      	b.n	801141e <_fflush_r+0x22>
 8011468:	0801271c 	.word	0x0801271c
 801146c:	0801273c 	.word	0x0801273c
 8011470:	080126fc 	.word	0x080126fc

08011474 <std>:
 8011474:	2300      	movs	r3, #0
 8011476:	b510      	push	{r4, lr}
 8011478:	4604      	mov	r4, r0
 801147a:	e9c0 3300 	strd	r3, r3, [r0]
 801147e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011482:	6083      	str	r3, [r0, #8]
 8011484:	8181      	strh	r1, [r0, #12]
 8011486:	6643      	str	r3, [r0, #100]	; 0x64
 8011488:	81c2      	strh	r2, [r0, #14]
 801148a:	6183      	str	r3, [r0, #24]
 801148c:	4619      	mov	r1, r3
 801148e:	2208      	movs	r2, #8
 8011490:	305c      	adds	r0, #92	; 0x5c
 8011492:	f7fd fbdf 	bl	800ec54 <memset>
 8011496:	4b05      	ldr	r3, [pc, #20]	; (80114ac <std+0x38>)
 8011498:	6263      	str	r3, [r4, #36]	; 0x24
 801149a:	4b05      	ldr	r3, [pc, #20]	; (80114b0 <std+0x3c>)
 801149c:	62a3      	str	r3, [r4, #40]	; 0x28
 801149e:	4b05      	ldr	r3, [pc, #20]	; (80114b4 <std+0x40>)
 80114a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80114a2:	4b05      	ldr	r3, [pc, #20]	; (80114b8 <std+0x44>)
 80114a4:	6224      	str	r4, [r4, #32]
 80114a6:	6323      	str	r3, [r4, #48]	; 0x30
 80114a8:	bd10      	pop	{r4, pc}
 80114aa:	bf00      	nop
 80114ac:	080117b9 	.word	0x080117b9
 80114b0:	080117db 	.word	0x080117db
 80114b4:	08011813 	.word	0x08011813
 80114b8:	08011837 	.word	0x08011837

080114bc <_cleanup_r>:
 80114bc:	4901      	ldr	r1, [pc, #4]	; (80114c4 <_cleanup_r+0x8>)
 80114be:	f000 b8af 	b.w	8011620 <_fwalk_reent>
 80114c2:	bf00      	nop
 80114c4:	080113fd 	.word	0x080113fd

080114c8 <__sfmoreglue>:
 80114c8:	b570      	push	{r4, r5, r6, lr}
 80114ca:	2268      	movs	r2, #104	; 0x68
 80114cc:	1e4d      	subs	r5, r1, #1
 80114ce:	4355      	muls	r5, r2
 80114d0:	460e      	mov	r6, r1
 80114d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80114d6:	f7ff fa17 	bl	8010908 <_malloc_r>
 80114da:	4604      	mov	r4, r0
 80114dc:	b140      	cbz	r0, 80114f0 <__sfmoreglue+0x28>
 80114de:	2100      	movs	r1, #0
 80114e0:	e9c0 1600 	strd	r1, r6, [r0]
 80114e4:	300c      	adds	r0, #12
 80114e6:	60a0      	str	r0, [r4, #8]
 80114e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80114ec:	f7fd fbb2 	bl	800ec54 <memset>
 80114f0:	4620      	mov	r0, r4
 80114f2:	bd70      	pop	{r4, r5, r6, pc}

080114f4 <__sfp_lock_acquire>:
 80114f4:	4801      	ldr	r0, [pc, #4]	; (80114fc <__sfp_lock_acquire+0x8>)
 80114f6:	f000 b8b3 	b.w	8011660 <__retarget_lock_acquire_recursive>
 80114fa:	bf00      	nop
 80114fc:	24000d49 	.word	0x24000d49

08011500 <__sfp_lock_release>:
 8011500:	4801      	ldr	r0, [pc, #4]	; (8011508 <__sfp_lock_release+0x8>)
 8011502:	f000 b8ae 	b.w	8011662 <__retarget_lock_release_recursive>
 8011506:	bf00      	nop
 8011508:	24000d49 	.word	0x24000d49

0801150c <__sinit_lock_acquire>:
 801150c:	4801      	ldr	r0, [pc, #4]	; (8011514 <__sinit_lock_acquire+0x8>)
 801150e:	f000 b8a7 	b.w	8011660 <__retarget_lock_acquire_recursive>
 8011512:	bf00      	nop
 8011514:	24000d4a 	.word	0x24000d4a

08011518 <__sinit_lock_release>:
 8011518:	4801      	ldr	r0, [pc, #4]	; (8011520 <__sinit_lock_release+0x8>)
 801151a:	f000 b8a2 	b.w	8011662 <__retarget_lock_release_recursive>
 801151e:	bf00      	nop
 8011520:	24000d4a 	.word	0x24000d4a

08011524 <__sinit>:
 8011524:	b510      	push	{r4, lr}
 8011526:	4604      	mov	r4, r0
 8011528:	f7ff fff0 	bl	801150c <__sinit_lock_acquire>
 801152c:	69a3      	ldr	r3, [r4, #24]
 801152e:	b11b      	cbz	r3, 8011538 <__sinit+0x14>
 8011530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011534:	f7ff bff0 	b.w	8011518 <__sinit_lock_release>
 8011538:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801153c:	6523      	str	r3, [r4, #80]	; 0x50
 801153e:	4b13      	ldr	r3, [pc, #76]	; (801158c <__sinit+0x68>)
 8011540:	4a13      	ldr	r2, [pc, #76]	; (8011590 <__sinit+0x6c>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	62a2      	str	r2, [r4, #40]	; 0x28
 8011546:	42a3      	cmp	r3, r4
 8011548:	bf04      	itt	eq
 801154a:	2301      	moveq	r3, #1
 801154c:	61a3      	streq	r3, [r4, #24]
 801154e:	4620      	mov	r0, r4
 8011550:	f000 f820 	bl	8011594 <__sfp>
 8011554:	6060      	str	r0, [r4, #4]
 8011556:	4620      	mov	r0, r4
 8011558:	f000 f81c 	bl	8011594 <__sfp>
 801155c:	60a0      	str	r0, [r4, #8]
 801155e:	4620      	mov	r0, r4
 8011560:	f000 f818 	bl	8011594 <__sfp>
 8011564:	2200      	movs	r2, #0
 8011566:	60e0      	str	r0, [r4, #12]
 8011568:	2104      	movs	r1, #4
 801156a:	6860      	ldr	r0, [r4, #4]
 801156c:	f7ff ff82 	bl	8011474 <std>
 8011570:	68a0      	ldr	r0, [r4, #8]
 8011572:	2201      	movs	r2, #1
 8011574:	2109      	movs	r1, #9
 8011576:	f7ff ff7d 	bl	8011474 <std>
 801157a:	68e0      	ldr	r0, [r4, #12]
 801157c:	2202      	movs	r2, #2
 801157e:	2112      	movs	r1, #18
 8011580:	f7ff ff78 	bl	8011474 <std>
 8011584:	2301      	movs	r3, #1
 8011586:	61a3      	str	r3, [r4, #24]
 8011588:	e7d2      	b.n	8011530 <__sinit+0xc>
 801158a:	bf00      	nop
 801158c:	08012330 	.word	0x08012330
 8011590:	080114bd 	.word	0x080114bd

08011594 <__sfp>:
 8011594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011596:	4607      	mov	r7, r0
 8011598:	f7ff ffac 	bl	80114f4 <__sfp_lock_acquire>
 801159c:	4b1e      	ldr	r3, [pc, #120]	; (8011618 <__sfp+0x84>)
 801159e:	681e      	ldr	r6, [r3, #0]
 80115a0:	69b3      	ldr	r3, [r6, #24]
 80115a2:	b913      	cbnz	r3, 80115aa <__sfp+0x16>
 80115a4:	4630      	mov	r0, r6
 80115a6:	f7ff ffbd 	bl	8011524 <__sinit>
 80115aa:	3648      	adds	r6, #72	; 0x48
 80115ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80115b0:	3b01      	subs	r3, #1
 80115b2:	d503      	bpl.n	80115bc <__sfp+0x28>
 80115b4:	6833      	ldr	r3, [r6, #0]
 80115b6:	b30b      	cbz	r3, 80115fc <__sfp+0x68>
 80115b8:	6836      	ldr	r6, [r6, #0]
 80115ba:	e7f7      	b.n	80115ac <__sfp+0x18>
 80115bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80115c0:	b9d5      	cbnz	r5, 80115f8 <__sfp+0x64>
 80115c2:	4b16      	ldr	r3, [pc, #88]	; (801161c <__sfp+0x88>)
 80115c4:	60e3      	str	r3, [r4, #12]
 80115c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80115ca:	6665      	str	r5, [r4, #100]	; 0x64
 80115cc:	f000 f847 	bl	801165e <__retarget_lock_init_recursive>
 80115d0:	f7ff ff96 	bl	8011500 <__sfp_lock_release>
 80115d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80115d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80115dc:	6025      	str	r5, [r4, #0]
 80115de:	61a5      	str	r5, [r4, #24]
 80115e0:	2208      	movs	r2, #8
 80115e2:	4629      	mov	r1, r5
 80115e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80115e8:	f7fd fb34 	bl	800ec54 <memset>
 80115ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80115f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80115f4:	4620      	mov	r0, r4
 80115f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115f8:	3468      	adds	r4, #104	; 0x68
 80115fa:	e7d9      	b.n	80115b0 <__sfp+0x1c>
 80115fc:	2104      	movs	r1, #4
 80115fe:	4638      	mov	r0, r7
 8011600:	f7ff ff62 	bl	80114c8 <__sfmoreglue>
 8011604:	4604      	mov	r4, r0
 8011606:	6030      	str	r0, [r6, #0]
 8011608:	2800      	cmp	r0, #0
 801160a:	d1d5      	bne.n	80115b8 <__sfp+0x24>
 801160c:	f7ff ff78 	bl	8011500 <__sfp_lock_release>
 8011610:	230c      	movs	r3, #12
 8011612:	603b      	str	r3, [r7, #0]
 8011614:	e7ee      	b.n	80115f4 <__sfp+0x60>
 8011616:	bf00      	nop
 8011618:	08012330 	.word	0x08012330
 801161c:	ffff0001 	.word	0xffff0001

08011620 <_fwalk_reent>:
 8011620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011624:	4606      	mov	r6, r0
 8011626:	4688      	mov	r8, r1
 8011628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801162c:	2700      	movs	r7, #0
 801162e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011632:	f1b9 0901 	subs.w	r9, r9, #1
 8011636:	d505      	bpl.n	8011644 <_fwalk_reent+0x24>
 8011638:	6824      	ldr	r4, [r4, #0]
 801163a:	2c00      	cmp	r4, #0
 801163c:	d1f7      	bne.n	801162e <_fwalk_reent+0xe>
 801163e:	4638      	mov	r0, r7
 8011640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011644:	89ab      	ldrh	r3, [r5, #12]
 8011646:	2b01      	cmp	r3, #1
 8011648:	d907      	bls.n	801165a <_fwalk_reent+0x3a>
 801164a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801164e:	3301      	adds	r3, #1
 8011650:	d003      	beq.n	801165a <_fwalk_reent+0x3a>
 8011652:	4629      	mov	r1, r5
 8011654:	4630      	mov	r0, r6
 8011656:	47c0      	blx	r8
 8011658:	4307      	orrs	r7, r0
 801165a:	3568      	adds	r5, #104	; 0x68
 801165c:	e7e9      	b.n	8011632 <_fwalk_reent+0x12>

0801165e <__retarget_lock_init_recursive>:
 801165e:	4770      	bx	lr

08011660 <__retarget_lock_acquire_recursive>:
 8011660:	4770      	bx	lr

08011662 <__retarget_lock_release_recursive>:
 8011662:	4770      	bx	lr

08011664 <__swhatbuf_r>:
 8011664:	b570      	push	{r4, r5, r6, lr}
 8011666:	460e      	mov	r6, r1
 8011668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801166c:	2900      	cmp	r1, #0
 801166e:	b096      	sub	sp, #88	; 0x58
 8011670:	4614      	mov	r4, r2
 8011672:	461d      	mov	r5, r3
 8011674:	da08      	bge.n	8011688 <__swhatbuf_r+0x24>
 8011676:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801167a:	2200      	movs	r2, #0
 801167c:	602a      	str	r2, [r5, #0]
 801167e:	061a      	lsls	r2, r3, #24
 8011680:	d410      	bmi.n	80116a4 <__swhatbuf_r+0x40>
 8011682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011686:	e00e      	b.n	80116a6 <__swhatbuf_r+0x42>
 8011688:	466a      	mov	r2, sp
 801168a:	f000 f8fb 	bl	8011884 <_fstat_r>
 801168e:	2800      	cmp	r0, #0
 8011690:	dbf1      	blt.n	8011676 <__swhatbuf_r+0x12>
 8011692:	9a01      	ldr	r2, [sp, #4]
 8011694:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011698:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801169c:	425a      	negs	r2, r3
 801169e:	415a      	adcs	r2, r3
 80116a0:	602a      	str	r2, [r5, #0]
 80116a2:	e7ee      	b.n	8011682 <__swhatbuf_r+0x1e>
 80116a4:	2340      	movs	r3, #64	; 0x40
 80116a6:	2000      	movs	r0, #0
 80116a8:	6023      	str	r3, [r4, #0]
 80116aa:	b016      	add	sp, #88	; 0x58
 80116ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080116b0 <__smakebuf_r>:
 80116b0:	898b      	ldrh	r3, [r1, #12]
 80116b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116b4:	079d      	lsls	r5, r3, #30
 80116b6:	4606      	mov	r6, r0
 80116b8:	460c      	mov	r4, r1
 80116ba:	d507      	bpl.n	80116cc <__smakebuf_r+0x1c>
 80116bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80116c0:	6023      	str	r3, [r4, #0]
 80116c2:	6123      	str	r3, [r4, #16]
 80116c4:	2301      	movs	r3, #1
 80116c6:	6163      	str	r3, [r4, #20]
 80116c8:	b002      	add	sp, #8
 80116ca:	bd70      	pop	{r4, r5, r6, pc}
 80116cc:	ab01      	add	r3, sp, #4
 80116ce:	466a      	mov	r2, sp
 80116d0:	f7ff ffc8 	bl	8011664 <__swhatbuf_r>
 80116d4:	9900      	ldr	r1, [sp, #0]
 80116d6:	4605      	mov	r5, r0
 80116d8:	4630      	mov	r0, r6
 80116da:	f7ff f915 	bl	8010908 <_malloc_r>
 80116de:	b948      	cbnz	r0, 80116f4 <__smakebuf_r+0x44>
 80116e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116e4:	059a      	lsls	r2, r3, #22
 80116e6:	d4ef      	bmi.n	80116c8 <__smakebuf_r+0x18>
 80116e8:	f023 0303 	bic.w	r3, r3, #3
 80116ec:	f043 0302 	orr.w	r3, r3, #2
 80116f0:	81a3      	strh	r3, [r4, #12]
 80116f2:	e7e3      	b.n	80116bc <__smakebuf_r+0xc>
 80116f4:	4b0d      	ldr	r3, [pc, #52]	; (801172c <__smakebuf_r+0x7c>)
 80116f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80116f8:	89a3      	ldrh	r3, [r4, #12]
 80116fa:	6020      	str	r0, [r4, #0]
 80116fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011700:	81a3      	strh	r3, [r4, #12]
 8011702:	9b00      	ldr	r3, [sp, #0]
 8011704:	6163      	str	r3, [r4, #20]
 8011706:	9b01      	ldr	r3, [sp, #4]
 8011708:	6120      	str	r0, [r4, #16]
 801170a:	b15b      	cbz	r3, 8011724 <__smakebuf_r+0x74>
 801170c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011710:	4630      	mov	r0, r6
 8011712:	f000 f8c9 	bl	80118a8 <_isatty_r>
 8011716:	b128      	cbz	r0, 8011724 <__smakebuf_r+0x74>
 8011718:	89a3      	ldrh	r3, [r4, #12]
 801171a:	f023 0303 	bic.w	r3, r3, #3
 801171e:	f043 0301 	orr.w	r3, r3, #1
 8011722:	81a3      	strh	r3, [r4, #12]
 8011724:	89a0      	ldrh	r0, [r4, #12]
 8011726:	4305      	orrs	r5, r0
 8011728:	81a5      	strh	r5, [r4, #12]
 801172a:	e7cd      	b.n	80116c8 <__smakebuf_r+0x18>
 801172c:	080114bd 	.word	0x080114bd

08011730 <_raise_r>:
 8011730:	291f      	cmp	r1, #31
 8011732:	b538      	push	{r3, r4, r5, lr}
 8011734:	4604      	mov	r4, r0
 8011736:	460d      	mov	r5, r1
 8011738:	d904      	bls.n	8011744 <_raise_r+0x14>
 801173a:	2316      	movs	r3, #22
 801173c:	6003      	str	r3, [r0, #0]
 801173e:	f04f 30ff 	mov.w	r0, #4294967295
 8011742:	bd38      	pop	{r3, r4, r5, pc}
 8011744:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011746:	b112      	cbz	r2, 801174e <_raise_r+0x1e>
 8011748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801174c:	b94b      	cbnz	r3, 8011762 <_raise_r+0x32>
 801174e:	4620      	mov	r0, r4
 8011750:	f000 f830 	bl	80117b4 <_getpid_r>
 8011754:	462a      	mov	r2, r5
 8011756:	4601      	mov	r1, r0
 8011758:	4620      	mov	r0, r4
 801175a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801175e:	f000 b817 	b.w	8011790 <_kill_r>
 8011762:	2b01      	cmp	r3, #1
 8011764:	d00a      	beq.n	801177c <_raise_r+0x4c>
 8011766:	1c59      	adds	r1, r3, #1
 8011768:	d103      	bne.n	8011772 <_raise_r+0x42>
 801176a:	2316      	movs	r3, #22
 801176c:	6003      	str	r3, [r0, #0]
 801176e:	2001      	movs	r0, #1
 8011770:	e7e7      	b.n	8011742 <_raise_r+0x12>
 8011772:	2400      	movs	r4, #0
 8011774:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011778:	4628      	mov	r0, r5
 801177a:	4798      	blx	r3
 801177c:	2000      	movs	r0, #0
 801177e:	e7e0      	b.n	8011742 <_raise_r+0x12>

08011780 <raise>:
 8011780:	4b02      	ldr	r3, [pc, #8]	; (801178c <raise+0xc>)
 8011782:	4601      	mov	r1, r0
 8011784:	6818      	ldr	r0, [r3, #0]
 8011786:	f7ff bfd3 	b.w	8011730 <_raise_r>
 801178a:	bf00      	nop
 801178c:	240000b8 	.word	0x240000b8

08011790 <_kill_r>:
 8011790:	b538      	push	{r3, r4, r5, lr}
 8011792:	4d07      	ldr	r5, [pc, #28]	; (80117b0 <_kill_r+0x20>)
 8011794:	2300      	movs	r3, #0
 8011796:	4604      	mov	r4, r0
 8011798:	4608      	mov	r0, r1
 801179a:	4611      	mov	r1, r2
 801179c:	602b      	str	r3, [r5, #0]
 801179e:	f7f1 fb69 	bl	8002e74 <_kill>
 80117a2:	1c43      	adds	r3, r0, #1
 80117a4:	d102      	bne.n	80117ac <_kill_r+0x1c>
 80117a6:	682b      	ldr	r3, [r5, #0]
 80117a8:	b103      	cbz	r3, 80117ac <_kill_r+0x1c>
 80117aa:	6023      	str	r3, [r4, #0]
 80117ac:	bd38      	pop	{r3, r4, r5, pc}
 80117ae:	bf00      	nop
 80117b0:	24000d44 	.word	0x24000d44

080117b4 <_getpid_r>:
 80117b4:	f7f1 bb56 	b.w	8002e64 <_getpid>

080117b8 <__sread>:
 80117b8:	b510      	push	{r4, lr}
 80117ba:	460c      	mov	r4, r1
 80117bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117c0:	f000 f894 	bl	80118ec <_read_r>
 80117c4:	2800      	cmp	r0, #0
 80117c6:	bfab      	itete	ge
 80117c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80117ca:	89a3      	ldrhlt	r3, [r4, #12]
 80117cc:	181b      	addge	r3, r3, r0
 80117ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80117d2:	bfac      	ite	ge
 80117d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80117d6:	81a3      	strhlt	r3, [r4, #12]
 80117d8:	bd10      	pop	{r4, pc}

080117da <__swrite>:
 80117da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117de:	461f      	mov	r7, r3
 80117e0:	898b      	ldrh	r3, [r1, #12]
 80117e2:	05db      	lsls	r3, r3, #23
 80117e4:	4605      	mov	r5, r0
 80117e6:	460c      	mov	r4, r1
 80117e8:	4616      	mov	r6, r2
 80117ea:	d505      	bpl.n	80117f8 <__swrite+0x1e>
 80117ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117f0:	2302      	movs	r3, #2
 80117f2:	2200      	movs	r2, #0
 80117f4:	f000 f868 	bl	80118c8 <_lseek_r>
 80117f8:	89a3      	ldrh	r3, [r4, #12]
 80117fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011802:	81a3      	strh	r3, [r4, #12]
 8011804:	4632      	mov	r2, r6
 8011806:	463b      	mov	r3, r7
 8011808:	4628      	mov	r0, r5
 801180a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801180e:	f000 b817 	b.w	8011840 <_write_r>

08011812 <__sseek>:
 8011812:	b510      	push	{r4, lr}
 8011814:	460c      	mov	r4, r1
 8011816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801181a:	f000 f855 	bl	80118c8 <_lseek_r>
 801181e:	1c43      	adds	r3, r0, #1
 8011820:	89a3      	ldrh	r3, [r4, #12]
 8011822:	bf15      	itete	ne
 8011824:	6560      	strne	r0, [r4, #84]	; 0x54
 8011826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801182a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801182e:	81a3      	strheq	r3, [r4, #12]
 8011830:	bf18      	it	ne
 8011832:	81a3      	strhne	r3, [r4, #12]
 8011834:	bd10      	pop	{r4, pc}

08011836 <__sclose>:
 8011836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801183a:	f000 b813 	b.w	8011864 <_close_r>
	...

08011840 <_write_r>:
 8011840:	b538      	push	{r3, r4, r5, lr}
 8011842:	4d07      	ldr	r5, [pc, #28]	; (8011860 <_write_r+0x20>)
 8011844:	4604      	mov	r4, r0
 8011846:	4608      	mov	r0, r1
 8011848:	4611      	mov	r1, r2
 801184a:	2200      	movs	r2, #0
 801184c:	602a      	str	r2, [r5, #0]
 801184e:	461a      	mov	r2, r3
 8011850:	f7f1 fb47 	bl	8002ee2 <_write>
 8011854:	1c43      	adds	r3, r0, #1
 8011856:	d102      	bne.n	801185e <_write_r+0x1e>
 8011858:	682b      	ldr	r3, [r5, #0]
 801185a:	b103      	cbz	r3, 801185e <_write_r+0x1e>
 801185c:	6023      	str	r3, [r4, #0]
 801185e:	bd38      	pop	{r3, r4, r5, pc}
 8011860:	24000d44 	.word	0x24000d44

08011864 <_close_r>:
 8011864:	b538      	push	{r3, r4, r5, lr}
 8011866:	4d06      	ldr	r5, [pc, #24]	; (8011880 <_close_r+0x1c>)
 8011868:	2300      	movs	r3, #0
 801186a:	4604      	mov	r4, r0
 801186c:	4608      	mov	r0, r1
 801186e:	602b      	str	r3, [r5, #0]
 8011870:	f7f1 fb53 	bl	8002f1a <_close>
 8011874:	1c43      	adds	r3, r0, #1
 8011876:	d102      	bne.n	801187e <_close_r+0x1a>
 8011878:	682b      	ldr	r3, [r5, #0]
 801187a:	b103      	cbz	r3, 801187e <_close_r+0x1a>
 801187c:	6023      	str	r3, [r4, #0]
 801187e:	bd38      	pop	{r3, r4, r5, pc}
 8011880:	24000d44 	.word	0x24000d44

08011884 <_fstat_r>:
 8011884:	b538      	push	{r3, r4, r5, lr}
 8011886:	4d07      	ldr	r5, [pc, #28]	; (80118a4 <_fstat_r+0x20>)
 8011888:	2300      	movs	r3, #0
 801188a:	4604      	mov	r4, r0
 801188c:	4608      	mov	r0, r1
 801188e:	4611      	mov	r1, r2
 8011890:	602b      	str	r3, [r5, #0]
 8011892:	f7f1 fb4e 	bl	8002f32 <_fstat>
 8011896:	1c43      	adds	r3, r0, #1
 8011898:	d102      	bne.n	80118a0 <_fstat_r+0x1c>
 801189a:	682b      	ldr	r3, [r5, #0]
 801189c:	b103      	cbz	r3, 80118a0 <_fstat_r+0x1c>
 801189e:	6023      	str	r3, [r4, #0]
 80118a0:	bd38      	pop	{r3, r4, r5, pc}
 80118a2:	bf00      	nop
 80118a4:	24000d44 	.word	0x24000d44

080118a8 <_isatty_r>:
 80118a8:	b538      	push	{r3, r4, r5, lr}
 80118aa:	4d06      	ldr	r5, [pc, #24]	; (80118c4 <_isatty_r+0x1c>)
 80118ac:	2300      	movs	r3, #0
 80118ae:	4604      	mov	r4, r0
 80118b0:	4608      	mov	r0, r1
 80118b2:	602b      	str	r3, [r5, #0]
 80118b4:	f7f1 fb4d 	bl	8002f52 <_isatty>
 80118b8:	1c43      	adds	r3, r0, #1
 80118ba:	d102      	bne.n	80118c2 <_isatty_r+0x1a>
 80118bc:	682b      	ldr	r3, [r5, #0]
 80118be:	b103      	cbz	r3, 80118c2 <_isatty_r+0x1a>
 80118c0:	6023      	str	r3, [r4, #0]
 80118c2:	bd38      	pop	{r3, r4, r5, pc}
 80118c4:	24000d44 	.word	0x24000d44

080118c8 <_lseek_r>:
 80118c8:	b538      	push	{r3, r4, r5, lr}
 80118ca:	4d07      	ldr	r5, [pc, #28]	; (80118e8 <_lseek_r+0x20>)
 80118cc:	4604      	mov	r4, r0
 80118ce:	4608      	mov	r0, r1
 80118d0:	4611      	mov	r1, r2
 80118d2:	2200      	movs	r2, #0
 80118d4:	602a      	str	r2, [r5, #0]
 80118d6:	461a      	mov	r2, r3
 80118d8:	f7f1 fb46 	bl	8002f68 <_lseek>
 80118dc:	1c43      	adds	r3, r0, #1
 80118de:	d102      	bne.n	80118e6 <_lseek_r+0x1e>
 80118e0:	682b      	ldr	r3, [r5, #0]
 80118e2:	b103      	cbz	r3, 80118e6 <_lseek_r+0x1e>
 80118e4:	6023      	str	r3, [r4, #0]
 80118e6:	bd38      	pop	{r3, r4, r5, pc}
 80118e8:	24000d44 	.word	0x24000d44

080118ec <_read_r>:
 80118ec:	b538      	push	{r3, r4, r5, lr}
 80118ee:	4d07      	ldr	r5, [pc, #28]	; (801190c <_read_r+0x20>)
 80118f0:	4604      	mov	r4, r0
 80118f2:	4608      	mov	r0, r1
 80118f4:	4611      	mov	r1, r2
 80118f6:	2200      	movs	r2, #0
 80118f8:	602a      	str	r2, [r5, #0]
 80118fa:	461a      	mov	r2, r3
 80118fc:	f7f1 fad4 	bl	8002ea8 <_read>
 8011900:	1c43      	adds	r3, r0, #1
 8011902:	d102      	bne.n	801190a <_read_r+0x1e>
 8011904:	682b      	ldr	r3, [r5, #0]
 8011906:	b103      	cbz	r3, 801190a <_read_r+0x1e>
 8011908:	6023      	str	r3, [r4, #0]
 801190a:	bd38      	pop	{r3, r4, r5, pc}
 801190c:	24000d44 	.word	0x24000d44

08011910 <checkint>:
 8011910:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011914:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011918:	429a      	cmp	r2, r3
 801191a:	b570      	push	{r4, r5, r6, lr}
 801191c:	dd2a      	ble.n	8011974 <checkint+0x64>
 801191e:	f240 4333 	movw	r3, #1075	; 0x433
 8011922:	429a      	cmp	r2, r3
 8011924:	dc24      	bgt.n	8011970 <checkint+0x60>
 8011926:	1a9b      	subs	r3, r3, r2
 8011928:	f1a3 0620 	sub.w	r6, r3, #32
 801192c:	f04f 32ff 	mov.w	r2, #4294967295
 8011930:	fa02 f403 	lsl.w	r4, r2, r3
 8011934:	fa02 f606 	lsl.w	r6, r2, r6
 8011938:	f1c3 0520 	rsb	r5, r3, #32
 801193c:	fa22 f505 	lsr.w	r5, r2, r5
 8011940:	4334      	orrs	r4, r6
 8011942:	432c      	orrs	r4, r5
 8011944:	409a      	lsls	r2, r3
 8011946:	ea20 0202 	bic.w	r2, r0, r2
 801194a:	ea21 0404 	bic.w	r4, r1, r4
 801194e:	4322      	orrs	r2, r4
 8011950:	f1a3 0420 	sub.w	r4, r3, #32
 8011954:	f1c3 0220 	rsb	r2, r3, #32
 8011958:	d10c      	bne.n	8011974 <checkint+0x64>
 801195a:	40d8      	lsrs	r0, r3
 801195c:	fa01 f302 	lsl.w	r3, r1, r2
 8011960:	4318      	orrs	r0, r3
 8011962:	40e1      	lsrs	r1, r4
 8011964:	4308      	orrs	r0, r1
 8011966:	f000 0001 	and.w	r0, r0, #1
 801196a:	f1d0 0002 	rsbs	r0, r0, #2
 801196e:	bd70      	pop	{r4, r5, r6, pc}
 8011970:	2002      	movs	r0, #2
 8011972:	e7fc      	b.n	801196e <checkint+0x5e>
 8011974:	2000      	movs	r0, #0
 8011976:	e7fa      	b.n	801196e <checkint+0x5e>

08011978 <pow>:
 8011978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801197c:	ee10 4a90 	vmov	r4, s1
 8011980:	ed2d 8b0a 	vpush	{d8-d12}
 8011984:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011988:	ee11 7a90 	vmov	r7, s3
 801198c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8011990:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8011994:	429a      	cmp	r2, r3
 8011996:	ee10 6a10 	vmov	r6, s0
 801199a:	ee11 0a10 	vmov	r0, s2
 801199e:	b086      	sub	sp, #24
 80119a0:	46d4      	mov	ip, sl
 80119a2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 80119a6:	d806      	bhi.n	80119b6 <pow+0x3e>
 80119a8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80119ac:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80119b0:	2b7f      	cmp	r3, #127	; 0x7f
 80119b2:	f240 8156 	bls.w	8011c62 <pow+0x2ea>
 80119b6:	1802      	adds	r2, r0, r0
 80119b8:	eb47 0107 	adc.w	r1, r7, r7
 80119bc:	f06f 0e01 	mvn.w	lr, #1
 80119c0:	f112 39ff 	adds.w	r9, r2, #4294967295
 80119c4:	f141 38ff 	adc.w	r8, r1, #4294967295
 80119c8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80119cc:	45ce      	cmp	lr, r9
 80119ce:	eb73 0808 	sbcs.w	r8, r3, r8
 80119d2:	d23f      	bcs.n	8011a54 <pow+0xdc>
 80119d4:	ea52 0301 	orrs.w	r3, r2, r1
 80119d8:	f04f 0300 	mov.w	r3, #0
 80119dc:	d10c      	bne.n	80119f8 <pow+0x80>
 80119de:	19b6      	adds	r6, r6, r6
 80119e0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80119e4:	4164      	adcs	r4, r4
 80119e6:	42b3      	cmp	r3, r6
 80119e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80119ec:	41a3      	sbcs	r3, r4
 80119ee:	f0c0 808c 	bcc.w	8011b0a <pow+0x192>
 80119f2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80119f6:	e028      	b.n	8011a4a <pow+0xd2>
 80119f8:	4da3      	ldr	r5, [pc, #652]	; (8011c88 <pow+0x310>)
 80119fa:	42ac      	cmp	r4, r5
 80119fc:	bf08      	it	eq
 80119fe:	429e      	cmpeq	r6, r3
 8011a00:	d107      	bne.n	8011a12 <pow+0x9a>
 8011a02:	1800      	adds	r0, r0, r0
 8011a04:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011a08:	417f      	adcs	r7, r7
 8011a0a:	4283      	cmp	r3, r0
 8011a0c:	4b9f      	ldr	r3, [pc, #636]	; (8011c8c <pow+0x314>)
 8011a0e:	41bb      	sbcs	r3, r7
 8011a10:	e7ed      	b.n	80119ee <pow+0x76>
 8011a12:	19b6      	adds	r6, r6, r6
 8011a14:	489e      	ldr	r0, [pc, #632]	; (8011c90 <pow+0x318>)
 8011a16:	4164      	adcs	r4, r4
 8011a18:	42b3      	cmp	r3, r6
 8011a1a:	eb70 0504 	sbcs.w	r5, r0, r4
 8011a1e:	d374      	bcc.n	8011b0a <pow+0x192>
 8011a20:	4281      	cmp	r1, r0
 8011a22:	bf08      	it	eq
 8011a24:	429a      	cmpeq	r2, r3
 8011a26:	d170      	bne.n	8011b0a <pow+0x192>
 8011a28:	4a9a      	ldr	r2, [pc, #616]	; (8011c94 <pow+0x31c>)
 8011a2a:	4294      	cmp	r4, r2
 8011a2c:	bf08      	it	eq
 8011a2e:	429e      	cmpeq	r6, r3
 8011a30:	d0df      	beq.n	80119f2 <pow+0x7a>
 8011a32:	4294      	cmp	r4, r2
 8011a34:	ea6f 0707 	mvn.w	r7, r7
 8011a38:	bf34      	ite	cc
 8011a3a:	2400      	movcc	r4, #0
 8011a3c:	2401      	movcs	r4, #1
 8011a3e:	0fff      	lsrs	r7, r7, #31
 8011a40:	42bc      	cmp	r4, r7
 8011a42:	f040 81d9 	bne.w	8011df8 <pow+0x480>
 8011a46:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011a4a:	b006      	add	sp, #24
 8011a4c:	ecbd 8b0a 	vpop	{d8-d12}
 8011a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a54:	eb16 0806 	adds.w	r8, r6, r6
 8011a58:	eb44 0904 	adc.w	r9, r4, r4
 8011a5c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011a60:	f169 0200 	sbc.w	r2, r9, #0
 8011a64:	458e      	cmp	lr, r1
 8011a66:	4193      	sbcs	r3, r2
 8011a68:	d223      	bcs.n	8011ab2 <pow+0x13a>
 8011a6a:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011a6e:	2c00      	cmp	r4, #0
 8011a70:	da12      	bge.n	8011a98 <pow+0x120>
 8011a72:	4639      	mov	r1, r7
 8011a74:	f7ff ff4c 	bl	8011910 <checkint>
 8011a78:	2801      	cmp	r0, #1
 8011a7a:	d10d      	bne.n	8011a98 <pow+0x120>
 8011a7c:	eeb1 0b40 	vneg.f64	d0, d0
 8011a80:	ea58 0309 	orrs.w	r3, r8, r9
 8011a84:	d10a      	bne.n	8011a9c <pow+0x124>
 8011a86:	2f00      	cmp	r7, #0
 8011a88:	dadf      	bge.n	8011a4a <pow+0xd2>
 8011a8a:	b006      	add	sp, #24
 8011a8c:	ecbd 8b0a 	vpop	{d8-d12}
 8011a90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a94:	f000 bb50 	b.w	8012138 <__math_divzero>
 8011a98:	2000      	movs	r0, #0
 8011a9a:	e7f1      	b.n	8011a80 <pow+0x108>
 8011a9c:	2f00      	cmp	r7, #0
 8011a9e:	dad4      	bge.n	8011a4a <pow+0xd2>
 8011aa0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011aa4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011aa8:	ed8d 7b00 	vstr	d7, [sp]
 8011aac:	ed9d 0b00 	vldr	d0, [sp]
 8011ab0:	e7cb      	b.n	8011a4a <pow+0xd2>
 8011ab2:	2c00      	cmp	r4, #0
 8011ab4:	da2c      	bge.n	8011b10 <pow+0x198>
 8011ab6:	4639      	mov	r1, r7
 8011ab8:	f7ff ff2a 	bl	8011910 <checkint>
 8011abc:	b930      	cbnz	r0, 8011acc <pow+0x154>
 8011abe:	b006      	add	sp, #24
 8011ac0:	ecbd 8b0a 	vpop	{d8-d12}
 8011ac4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac8:	f000 bb4e 	b.w	8012168 <__math_invalid>
 8011acc:	2801      	cmp	r0, #1
 8011ace:	bf14      	ite	ne
 8011ad0:	2000      	movne	r0, #0
 8011ad2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011ad6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011ada:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011ade:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011ae2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8011ae8:	d92d      	bls.n	8011b46 <pow+0x1ce>
 8011aea:	4b67      	ldr	r3, [pc, #412]	; (8011c88 <pow+0x310>)
 8011aec:	2000      	movs	r0, #0
 8011aee:	429c      	cmp	r4, r3
 8011af0:	bf08      	it	eq
 8011af2:	4286      	cmpeq	r6, r0
 8011af4:	f43f af7d 	beq.w	80119f2 <pow+0x7a>
 8011af8:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011afc:	428a      	cmp	r2, r1
 8011afe:	d80c      	bhi.n	8011b1a <pow+0x1a2>
 8011b00:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011b04:	42b0      	cmp	r0, r6
 8011b06:	41a3      	sbcs	r3, r4
 8011b08:	d204      	bcs.n	8011b14 <pow+0x19c>
 8011b0a:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011b0e:	e79c      	b.n	8011a4a <pow+0xd2>
 8011b10:	2000      	movs	r0, #0
 8011b12:	e7e4      	b.n	8011ade <pow+0x166>
 8011b14:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011b18:	e797      	b.n	8011a4a <pow+0xd2>
 8011b1a:	2e01      	cmp	r6, #1
 8011b1c:	eb74 0303 	sbcs.w	r3, r4, r3
 8011b20:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011b24:	bf34      	ite	cc
 8011b26:	2301      	movcc	r3, #1
 8011b28:	2300      	movcs	r3, #0
 8011b2a:	4295      	cmp	r5, r2
 8011b2c:	bf8c      	ite	hi
 8011b2e:	2500      	movhi	r5, #0
 8011b30:	2501      	movls	r5, #1
 8011b32:	42ab      	cmp	r3, r5
 8011b34:	f000 809d 	beq.w	8011c72 <pow+0x2fa>
 8011b38:	b006      	add	sp, #24
 8011b3a:	ecbd 8b0a 	vpop	{d8-d12}
 8011b3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b42:	f000 baf1 	b.w	8012128 <__math_oflow>
 8011b46:	f1bc 0f00 	cmp.w	ip, #0
 8011b4a:	d10b      	bne.n	8011b64 <pow+0x1ec>
 8011b4c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011c80 <pow+0x308>
 8011b50:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011b54:	ec53 2b17 	vmov	r2, r3, d7
 8011b58:	ee17 6a10 	vmov	r6, s14
 8011b5c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011b60:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011b64:	4b4c      	ldr	r3, [pc, #304]	; (8011c98 <pow+0x320>)
 8011b66:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011b6a:	4423      	add	r3, r4
 8011b6c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011b70:	1519      	asrs	r1, r3, #20
 8011b72:	0d1b      	lsrs	r3, r3, #20
 8011b74:	051b      	lsls	r3, r3, #20
 8011b76:	eba4 0903 	sub.w	r9, r4, r3
 8011b7a:	4b48      	ldr	r3, [pc, #288]	; (8011c9c <pow+0x324>)
 8011b7c:	ee04 1a10 	vmov	s8, r1
 8011b80:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011b84:	f1b6 0800 	subs.w	r8, r6, #0
 8011b88:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8011b8c:	ec49 8b15 	vmov	d5, r8, r9
 8011b90:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011b94:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011b98:	ed93 7b00 	vldr	d7, [r3]
 8011b9c:	ed93 5b02 	vldr	d5, [r3, #8]
 8011ba0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011ba4:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011ba8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8011bac:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011bb0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8011bb4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011bb8:	ed93 5b04 	vldr	d5, [r3, #16]
 8011bbc:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011bc0:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011bc4:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011bc8:	ed93 4b08 	vldr	d4, [r3, #32]
 8011bcc:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011bd0:	eeb0 9b40 	vmov.f64	d9, d0
 8011bd4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011bd8:	ed93 5b06 	vldr	d5, [r3, #24]
 8011bdc:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011be0:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011be4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011be8:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011bec:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011bf0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011bf4:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011bf8:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011bfc:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011c00:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011c04:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011c08:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011c0c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011c10:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011c14:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011c18:	eeab ab05 	vfma.f64	d10, d11, d5
 8011c1c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011c20:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011c24:	ee17 3a90 	vmov	r3, s15
 8011c28:	eeb0 5b47 	vmov.f64	d5, d7
 8011c2c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011c30:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011c34:	18b2      	adds	r2, r6, r2
 8011c36:	2a3e      	cmp	r2, #62	; 0x3e
 8011c38:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011c3c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011c40:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011c44:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011c48:	d92b      	bls.n	8011ca2 <pow+0x32a>
 8011c4a:	2a00      	cmp	r2, #0
 8011c4c:	da0b      	bge.n	8011c66 <pow+0x2ee>
 8011c4e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011c52:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011c56:	2800      	cmp	r0, #0
 8011c58:	f43f aef7 	beq.w	8011a4a <pow+0xd2>
 8011c5c:	eeb1 0b40 	vneg.f64	d0, d0
 8011c60:	e6f3      	b.n	8011a4a <pow+0xd2>
 8011c62:	2000      	movs	r0, #0
 8011c64:	e77e      	b.n	8011b64 <pow+0x1ec>
 8011c66:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011c6a:	d919      	bls.n	8011ca0 <pow+0x328>
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	f6bf af63 	bge.w	8011b38 <pow+0x1c0>
 8011c72:	b006      	add	sp, #24
 8011c74:	ecbd 8b0a 	vpop	{d8-d12}
 8011c78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c7c:	f000 ba4c 	b.w	8012118 <__math_uflow>
 8011c80:	00000000 	.word	0x00000000
 8011c84:	43300000 	.word	0x43300000
 8011c88:	3ff00000 	.word	0x3ff00000
 8011c8c:	fff00000 	.word	0xfff00000
 8011c90:	ffe00000 	.word	0xffe00000
 8011c94:	7fe00000 	.word	0x7fe00000
 8011c98:	c0196aab 	.word	0xc0196aab
 8011c9c:	08012760 	.word	0x08012760
 8011ca0:	2600      	movs	r6, #0
 8011ca2:	495d      	ldr	r1, [pc, #372]	; (8011e18 <pow+0x4a0>)
 8011ca4:	ed91 4b02 	vldr	d4, [r1, #8]
 8011ca8:	ed91 3b00 	vldr	d3, [r1]
 8011cac:	eeb0 6b44 	vmov.f64	d6, d4
 8011cb0:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011cb4:	ee16 5a10 	vmov	r5, s12
 8011cb8:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011cbc:	ed91 4b04 	vldr	d4, [r1, #16]
 8011cc0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011cc4:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011cc8:	eeb0 0b47 	vmov.f64	d0, d7
 8011ccc:	ed91 7b06 	vldr	d7, [r1, #24]
 8011cd0:	18dc      	adds	r4, r3, r3
 8011cd2:	f104 030f 	add.w	r3, r4, #15
 8011cd6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011cda:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011cde:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011ce2:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011ce6:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011cea:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011cee:	ed91 5b08 	vldr	d5, [r1, #32]
 8011cf2:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011cf6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011cfa:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011cfe:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011d02:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011d06:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011d0a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8011d0e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011d12:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011d16:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011d1a:	1940      	adds	r0, r0, r5
 8011d1c:	2700      	movs	r7, #0
 8011d1e:	eb17 020c 	adds.w	r2, r7, ip
 8011d22:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011d26:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011d2a:	2e00      	cmp	r6, #0
 8011d2c:	d15f      	bne.n	8011dee <pow+0x476>
 8011d2e:	42bd      	cmp	r5, r7
 8011d30:	db13      	blt.n	8011d5a <pow+0x3e2>
 8011d32:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011d36:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8011d3a:	4610      	mov	r0, r2
 8011d3c:	ec41 0b10 	vmov	d0, r0, r1
 8011d40:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011d44:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011e00 <pow+0x488>
 8011d48:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011d4c:	b006      	add	sp, #24
 8011d4e:	ecbd 8b0a 	vpop	{d8-d12}
 8011d52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d56:	f000 ba1f 	b.w	8012198 <__math_check_oflow>
 8011d5a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011d5e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011d62:	4610      	mov	r0, r2
 8011d64:	ec41 0b15 	vmov	d5, r0, r1
 8011d68:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011d6c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011d70:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011d74:	eeb0 3bc7 	vabs.f64	d3, d7
 8011d78:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8011d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d80:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011e08 <pow+0x490>
 8011d84:	d52a      	bpl.n	8011ddc <pow+0x464>
 8011d86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011d8a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d92:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011d96:	ee35 6b06 	vadd.f64	d6, d5, d6
 8011d9a:	bf48      	it	mi
 8011d9c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011da0:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011da4:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011da8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011dac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011db0:	ee37 7b03 	vadd.f64	d7, d7, d3
 8011db4:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011db8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc0:	d104      	bne.n	8011dcc <pow+0x454>
 8011dc2:	4632      	mov	r2, r6
 8011dc4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011dc8:	ec43 2b17 	vmov	d7, r2, r3
 8011dcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011dd0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011dd4:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011dd8:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011ddc:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011de0:	b006      	add	sp, #24
 8011de2:	ecbd 8b0a 	vpop	{d8-d12}
 8011de6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dea:	f000 b9cc 	b.w	8012186 <__math_check_uflow>
 8011dee:	ec43 2b10 	vmov	d0, r2, r3
 8011df2:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011df6:	e628      	b.n	8011a4a <pow+0xd2>
 8011df8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011e10 <pow+0x498>
 8011dfc:	e625      	b.n	8011a4a <pow+0xd2>
 8011dfe:	bf00      	nop
 8011e00:	00000000 	.word	0x00000000
 8011e04:	7f000000 	.word	0x7f000000
 8011e08:	00000000 	.word	0x00000000
 8011e0c:	00100000 	.word	0x00100000
	...
 8011e18:	080137a8 	.word	0x080137a8

08011e1c <asin>:
 8011e1c:	b508      	push	{r3, lr}
 8011e1e:	ed2d 8b04 	vpush	{d8-d9}
 8011e22:	eeb0 8b40 	vmov.f64	d8, d0
 8011e26:	f000 f847 	bl	8011eb8 <__ieee754_asin>
 8011e2a:	eeb4 8b48 	vcmp.f64	d8, d8
 8011e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e32:	eeb0 9b40 	vmov.f64	d9, d0
 8011e36:	d615      	bvs.n	8011e64 <asin+0x48>
 8011e38:	eeb0 0b48 	vmov.f64	d0, d8
 8011e3c:	f000 f9c0 	bl	80121c0 <fabs>
 8011e40:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011e44:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4c:	dd0a      	ble.n	8011e64 <asin+0x48>
 8011e4e:	f7fc fec9 	bl	800ebe4 <__errno>
 8011e52:	ecbd 8b04 	vpop	{d8-d9}
 8011e56:	2321      	movs	r3, #33	; 0x21
 8011e58:	6003      	str	r3, [r0, #0]
 8011e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011e5e:	4804      	ldr	r0, [pc, #16]	; (8011e70 <asin+0x54>)
 8011e60:	f7fe bdc6 	b.w	80109f0 <nan>
 8011e64:	eeb0 0b49 	vmov.f64	d0, d9
 8011e68:	ecbd 8b04 	vpop	{d8-d9}
 8011e6c:	bd08      	pop	{r3, pc}
 8011e6e:	bf00      	nop
 8011e70:	080125c7 	.word	0x080125c7
 8011e74:	00000000 	.word	0x00000000

08011e78 <sqrt>:
 8011e78:	b508      	push	{r3, lr}
 8011e7a:	ed2d 8b04 	vpush	{d8-d9}
 8011e7e:	eeb0 8b40 	vmov.f64	d8, d0
 8011e82:	f000 f927 	bl	80120d4 <__ieee754_sqrt>
 8011e86:	eeb4 8b48 	vcmp.f64	d8, d8
 8011e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e8e:	d60c      	bvs.n	8011eaa <sqrt+0x32>
 8011e90:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8011eb0 <sqrt+0x38>
 8011e94:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9c:	d505      	bpl.n	8011eaa <sqrt+0x32>
 8011e9e:	f7fc fea1 	bl	800ebe4 <__errno>
 8011ea2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011ea6:	2321      	movs	r3, #33	; 0x21
 8011ea8:	6003      	str	r3, [r0, #0]
 8011eaa:	ecbd 8b04 	vpop	{d8-d9}
 8011eae:	bd08      	pop	{r3, pc}
	...

08011eb8 <__ieee754_asin>:
 8011eb8:	b538      	push	{r3, r4, r5, lr}
 8011eba:	ee10 5a90 	vmov	r5, s1
 8011ebe:	4b82      	ldr	r3, [pc, #520]	; (80120c8 <__ieee754_asin+0x210>)
 8011ec0:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011ec4:	429c      	cmp	r4, r3
 8011ec6:	ed2d 8b06 	vpush	{d8-d10}
 8011eca:	dd19      	ble.n	8011f00 <__ieee754_asin+0x48>
 8011ecc:	ee10 3a10 	vmov	r3, s0
 8011ed0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011ed4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011ed8:	4323      	orrs	r3, r4
 8011eda:	d10c      	bne.n	8011ef6 <__ieee754_asin+0x3e>
 8011edc:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8012050 <__ieee754_asin+0x198>
 8011ee0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8012058 <__ieee754_asin+0x1a0>
 8011ee4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011ee8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011eec:	eeb0 0b47 	vmov.f64	d0, d7
 8011ef0:	ecbd 8b06 	vpop	{d8-d10}
 8011ef4:	bd38      	pop	{r3, r4, r5, pc}
 8011ef6:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011efa:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011efe:	e7f7      	b.n	8011ef0 <__ieee754_asin+0x38>
 8011f00:	4b72      	ldr	r3, [pc, #456]	; (80120cc <__ieee754_asin+0x214>)
 8011f02:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8011f06:	429c      	cmp	r4, r3
 8011f08:	dc0b      	bgt.n	8011f22 <__ieee754_asin+0x6a>
 8011f0a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8011f0e:	da52      	bge.n	8011fb6 <__ieee754_asin+0xfe>
 8011f10:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8012060 <__ieee754_asin+0x1a8>
 8011f14:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011f18:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8011f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f20:	dce6      	bgt.n	8011ef0 <__ieee754_asin+0x38>
 8011f22:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011f26:	f000 f94b 	bl	80121c0 <fabs>
 8011f2a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012068 <__ieee754_asin+0x1b0>
 8011f2e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011f32:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011f36:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012070 <__ieee754_asin+0x1b8>
 8011f3a:	eeb0 0b48 	vmov.f64	d0, d8
 8011f3e:	eea8 6b07 	vfma.f64	d6, d8, d7
 8011f42:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012078 <__ieee754_asin+0x1c0>
 8011f46:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011f4a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012080 <__ieee754_asin+0x1c8>
 8011f4e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8012088 <__ieee754_asin+0x1d0>
 8011f52:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011f56:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8012090 <__ieee754_asin+0x1d8>
 8011f5a:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011f5e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012098 <__ieee754_asin+0x1e0>
 8011f62:	eea7 ab08 	vfma.f64	d10, d7, d8
 8011f66:	ee2a ab08 	vmul.f64	d10, d10, d8
 8011f6a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80120a0 <__ieee754_asin+0x1e8>
 8011f6e:	eea8 7b06 	vfma.f64	d7, d8, d6
 8011f72:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80120a8 <__ieee754_asin+0x1f0>
 8011f76:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011f7a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80120b0 <__ieee754_asin+0x1f8>
 8011f7e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011f82:	eea7 9b08 	vfma.f64	d9, d7, d8
 8011f86:	f000 f8a5 	bl	80120d4 <__ieee754_sqrt>
 8011f8a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8011f8e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8011f92:	4b4f      	ldr	r3, [pc, #316]	; (80120d0 <__ieee754_asin+0x218>)
 8011f94:	429c      	cmp	r4, r3
 8011f96:	dd3d      	ble.n	8012014 <__ieee754_asin+0x15c>
 8011f98:	eea0 0b05 	vfma.f64	d0, d0, d5
 8011f9c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80120b8 <__ieee754_asin+0x200>
 8011fa0:	eea0 7b04 	vfma.f64	d7, d0, d4
 8011fa4:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8012058 <__ieee754_asin+0x1a0>
 8011fa8:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011fac:	2d00      	cmp	r5, #0
 8011fae:	bfd8      	it	le
 8011fb0:	eeb1 0b40 	vnegle.f64	d0, d0
 8011fb4:	e79c      	b.n	8011ef0 <__ieee754_asin+0x38>
 8011fb6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012068 <__ieee754_asin+0x1b0>
 8011fba:	ee20 7b00 	vmul.f64	d7, d0, d0
 8011fbe:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012070 <__ieee754_asin+0x1b8>
 8011fc2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011fc6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012078 <__ieee754_asin+0x1c0>
 8011fca:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011fce:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012080 <__ieee754_asin+0x1c8>
 8011fd2:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011fd6:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8012090 <__ieee754_asin+0x1d8>
 8011fda:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011fde:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8012088 <__ieee754_asin+0x1d0>
 8011fe2:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8012098 <__ieee754_asin+0x1e0>
 8011fe6:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011fea:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011fee:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80120a0 <__ieee754_asin+0x1e8>
 8011ff2:	eea7 5b04 	vfma.f64	d5, d7, d4
 8011ff6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 80120a8 <__ieee754_asin+0x1f0>
 8011ffa:	eea5 4b07 	vfma.f64	d4, d5, d7
 8011ffe:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80120b0 <__ieee754_asin+0x1f8>
 8012002:	eea4 5b07 	vfma.f64	d5, d4, d7
 8012006:	eea5 9b07 	vfma.f64	d9, d5, d7
 801200a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801200e:	eea0 0b07 	vfma.f64	d0, d0, d7
 8012012:	e76d      	b.n	8011ef0 <__ieee754_asin+0x38>
 8012014:	ec53 2b10 	vmov	r2, r3, d0
 8012018:	2200      	movs	r2, #0
 801201a:	ec43 2b16 	vmov	d6, r2, r3
 801201e:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012022:	eea6 8b46 	vfms.f64	d8, d6, d6
 8012026:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801202a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8012050 <__ieee754_asin+0x198>
 801202e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012032:	eea3 7b44 	vfms.f64	d7, d3, d4
 8012036:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801203a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80120c0 <__ieee754_asin+0x208>
 801203e:	eeb0 0b45 	vmov.f64	d0, d5
 8012042:	eea6 0b44 	vfms.f64	d0, d6, d4
 8012046:	ee37 0b40 	vsub.f64	d0, d7, d0
 801204a:	ee35 0b40 	vsub.f64	d0, d5, d0
 801204e:	e7ad      	b.n	8011fac <__ieee754_asin+0xf4>
 8012050:	33145c07 	.word	0x33145c07
 8012054:	3c91a626 	.word	0x3c91a626
 8012058:	54442d18 	.word	0x54442d18
 801205c:	3ff921fb 	.word	0x3ff921fb
 8012060:	8800759c 	.word	0x8800759c
 8012064:	7e37e43c 	.word	0x7e37e43c
 8012068:	0dfdf709 	.word	0x0dfdf709
 801206c:	3f023de1 	.word	0x3f023de1
 8012070:	7501b288 	.word	0x7501b288
 8012074:	3f49efe0 	.word	0x3f49efe0
 8012078:	b5688f3b 	.word	0xb5688f3b
 801207c:	bfa48228 	.word	0xbfa48228
 8012080:	0e884455 	.word	0x0e884455
 8012084:	3fc9c155 	.word	0x3fc9c155
 8012088:	55555555 	.word	0x55555555
 801208c:	3fc55555 	.word	0x3fc55555
 8012090:	03eb6f7d 	.word	0x03eb6f7d
 8012094:	bfd4d612 	.word	0xbfd4d612
 8012098:	b12e9282 	.word	0xb12e9282
 801209c:	3fb3b8c5 	.word	0x3fb3b8c5
 80120a0:	1b8d0159 	.word	0x1b8d0159
 80120a4:	bfe6066c 	.word	0xbfe6066c
 80120a8:	9c598ac8 	.word	0x9c598ac8
 80120ac:	40002ae5 	.word	0x40002ae5
 80120b0:	1c8a2d4b 	.word	0x1c8a2d4b
 80120b4:	c0033a27 	.word	0xc0033a27
 80120b8:	33145c07 	.word	0x33145c07
 80120bc:	bc91a626 	.word	0xbc91a626
 80120c0:	54442d18 	.word	0x54442d18
 80120c4:	3fe921fb 	.word	0x3fe921fb
 80120c8:	3fefffff 	.word	0x3fefffff
 80120cc:	3fdfffff 	.word	0x3fdfffff
 80120d0:	3fef3332 	.word	0x3fef3332

080120d4 <__ieee754_sqrt>:
 80120d4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80120d8:	4770      	bx	lr

080120da <with_errno>:
 80120da:	b513      	push	{r0, r1, r4, lr}
 80120dc:	4604      	mov	r4, r0
 80120de:	ed8d 0b00 	vstr	d0, [sp]
 80120e2:	f7fc fd7f 	bl	800ebe4 <__errno>
 80120e6:	ed9d 0b00 	vldr	d0, [sp]
 80120ea:	6004      	str	r4, [r0, #0]
 80120ec:	b002      	add	sp, #8
 80120ee:	bd10      	pop	{r4, pc}

080120f0 <xflow>:
 80120f0:	b082      	sub	sp, #8
 80120f2:	b158      	cbz	r0, 801210c <xflow+0x1c>
 80120f4:	eeb1 7b40 	vneg.f64	d7, d0
 80120f8:	ed8d 7b00 	vstr	d7, [sp]
 80120fc:	ed9d 7b00 	vldr	d7, [sp]
 8012100:	2022      	movs	r0, #34	; 0x22
 8012102:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012106:	b002      	add	sp, #8
 8012108:	f7ff bfe7 	b.w	80120da <with_errno>
 801210c:	eeb0 7b40 	vmov.f64	d7, d0
 8012110:	e7f2      	b.n	80120f8 <xflow+0x8>
 8012112:	0000      	movs	r0, r0
 8012114:	0000      	movs	r0, r0
	...

08012118 <__math_uflow>:
 8012118:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012120 <__math_uflow+0x8>
 801211c:	f7ff bfe8 	b.w	80120f0 <xflow>
 8012120:	00000000 	.word	0x00000000
 8012124:	10000000 	.word	0x10000000

08012128 <__math_oflow>:
 8012128:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012130 <__math_oflow+0x8>
 801212c:	f7ff bfe0 	b.w	80120f0 <xflow>
 8012130:	00000000 	.word	0x00000000
 8012134:	70000000 	.word	0x70000000

08012138 <__math_divzero>:
 8012138:	b082      	sub	sp, #8
 801213a:	2800      	cmp	r0, #0
 801213c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012140:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8012144:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012148:	ed8d 7b00 	vstr	d7, [sp]
 801214c:	ed9d 0b00 	vldr	d0, [sp]
 8012150:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012160 <__math_divzero+0x28>
 8012154:	2022      	movs	r0, #34	; 0x22
 8012156:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801215a:	b002      	add	sp, #8
 801215c:	f7ff bfbd 	b.w	80120da <with_errno>
	...

08012168 <__math_invalid>:
 8012168:	eeb0 7b40 	vmov.f64	d7, d0
 801216c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012174:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012178:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801217c:	d602      	bvs.n	8012184 <__math_invalid+0x1c>
 801217e:	2021      	movs	r0, #33	; 0x21
 8012180:	f7ff bfab 	b.w	80120da <with_errno>
 8012184:	4770      	bx	lr

08012186 <__math_check_uflow>:
 8012186:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218e:	d102      	bne.n	8012196 <__math_check_uflow+0x10>
 8012190:	2022      	movs	r0, #34	; 0x22
 8012192:	f7ff bfa2 	b.w	80120da <with_errno>
 8012196:	4770      	bx	lr

08012198 <__math_check_oflow>:
 8012198:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80121b8 <__math_check_oflow+0x20>
 801219c:	eeb0 7bc0 	vabs.f64	d7, d0
 80121a0:	eeb4 7b46 	vcmp.f64	d7, d6
 80121a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a8:	dd02      	ble.n	80121b0 <__math_check_oflow+0x18>
 80121aa:	2022      	movs	r0, #34	; 0x22
 80121ac:	f7ff bf95 	b.w	80120da <with_errno>
 80121b0:	4770      	bx	lr
 80121b2:	bf00      	nop
 80121b4:	f3af 8000 	nop.w
 80121b8:	ffffffff 	.word	0xffffffff
 80121bc:	7fefffff 	.word	0x7fefffff

080121c0 <fabs>:
 80121c0:	ec51 0b10 	vmov	r0, r1, d0
 80121c4:	ee10 2a10 	vmov	r2, s0
 80121c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80121cc:	ec43 2b10 	vmov	d0, r2, r3
 80121d0:	4770      	bx	lr
	...

080121d4 <_init>:
 80121d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d6:	bf00      	nop
 80121d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121da:	bc08      	pop	{r3}
 80121dc:	469e      	mov	lr, r3
 80121de:	4770      	bx	lr

080121e0 <_fini>:
 80121e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121e2:	bf00      	nop
 80121e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121e6:	bc08      	pop	{r3}
 80121e8:	469e      	mov	lr, r3
 80121ea:	4770      	bx	lr
