
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118ac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d70  08011b50  08011b50  00021b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138c0  080138c0  0003023c  2**0
                  CONTENTS
  4 .ARM          00000008  080138c0  080138c0  000238c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138c8  080138c8  0003023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138c8  080138c8  000238c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138cc  080138cc  000238cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  24000000  080138d0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  24000240  08013b0c  00030240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000a5c  08013b0c  00030a5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d573  00000000  00000000  0003026a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003664  00000000  00000000  0004d7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00050e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00052118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a5b  00000000  00000000  00053270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d5e1  00000000  00000000  00058ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165bac  00000000  00000000  000762ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dbe58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c0  00000000  00000000  001dbea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000240 	.word	0x24000240
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011b34 	.word	0x08011b34

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000244 	.word	0x24000244
 80002dc:	08011b34 	.word	0x08011b34

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b9c      	ldr	r3, [pc, #624]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a9a      	ldr	r2, [pc, #616]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b98      	ldr	r3, [pc, #608]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b94      	ldr	r3, [pc, #592]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a93      	ldr	r2, [pc, #588]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b90      	ldr	r3, [pc, #576]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b8d      	ldr	r3, [pc, #564]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a8b      	ldr	r2, [pc, #556]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b89      	ldr	r3, [pc, #548]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b85      	ldr	r3, [pc, #532]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a84      	ldr	r2, [pc, #528]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b81      	ldr	r3, [pc, #516]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b7e      	ldr	r3, [pc, #504]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a7c      	ldr	r2, [pc, #496]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b7a      	ldr	r3, [pc, #488]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b76      	ldr	r3, [pc, #472]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a75      	ldr	r2, [pc, #468]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b72      	ldr	r3, [pc, #456]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b6f      	ldr	r3, [pc, #444]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a6d      	ldr	r2, [pc, #436]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b6b      	ldr	r3, [pc, #428]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b64:	4b67      	ldr	r3, [pc, #412]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	4a66      	ldr	r2, [pc, #408]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b74:	4b63      	ldr	r3, [pc, #396]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(relayDrivers_GPIO_Port, relayDrivers_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2108      	movs	r1, #8
 8000b86:	4860      	ldr	r0, [pc, #384]	; (8000d08 <MX_GPIO_Init+0x28c>)
 8000b88:	f006 fe3c 	bl	8007804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b92:	485e      	ldr	r0, [pc, #376]	; (8000d0c <MX_GPIO_Init+0x290>)
 8000b94:	f006 fe36 	bl	8007804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2170      	movs	r1, #112	; 0x70
 8000b9c:	485c      	ldr	r0, [pc, #368]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000b9e:	f006 fe31 	bl	8007804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|faultDriver1_Pin|E_EndStop1_Sup_Pin;
 8000ba2:	238d      	movs	r3, #141	; 0x8d
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4857      	ldr	r0, [pc, #348]	; (8000d14 <MX_GPIO_Init+0x298>)
 8000bb8:	f006 fc5c 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	484e      	ldr	r0, [pc, #312]	; (8000d0c <MX_GPIO_Init+0x290>)
 8000bd4:	f006 fc4e 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = relayDrivers_Pin;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(relayDrivers_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4846      	ldr	r0, [pc, #280]	; (8000d08 <MX_GPIO_Init+0x28c>)
 8000bf0:	f006 fc40 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = faultDriver2_Pin|faultDriver3_Pin;
 8000bf4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4841      	ldr	r0, [pc, #260]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000c0c:	f006 fc32 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000c10:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4838      	ldr	r0, [pc, #224]	; (8000d0c <MX_GPIO_Init+0x290>)
 8000c2a:	f006 fc23 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(S_Enable_1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4832      	ldr	r0, [pc, #200]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000c46:	f006 fc15 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_2_Pin|S_Enable_3_Pin;
 8000c4a:	2360      	movs	r3, #96	; 0x60
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c4e:	2311      	movs	r3, #17
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	482b      	ldr	r0, [pc, #172]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000c62:	f006 fc07 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E_EndStop1_Inf_Pin;
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(E_EndStop1_Inf_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4826      	ldr	r0, [pc, #152]	; (8000d18 <MX_GPIO_Init+0x29c>)
 8000c7e:	f006 fbf9 	bl	8007474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin;
 8000c82:	2330      	movs	r3, #48	; 0x30
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4821      	ldr	r0, [pc, #132]	; (8000d1c <MX_GPIO_Init+0x2a0>)
 8000c98:	f006 fbec 	bl	8007474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	f005 fe40 	bl	8006926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ca6:	2006      	movs	r0, #6
 8000ca8:	f005 fe57 	bl	800695a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2008      	movs	r0, #8
 8000cb2:	f005 fe38 	bl	8006926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000cb6:	2008      	movs	r0, #8
 8000cb8:	f005 fe4f 	bl	800695a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2009      	movs	r0, #9
 8000cc2:	f005 fe30 	bl	8006926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cc6:	2009      	movs	r0, #9
 8000cc8:	f005 fe47 	bl	800695a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2101      	movs	r1, #1
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f005 fe28 	bl	8006926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f005 fe3f 	bl	800695a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2101      	movs	r1, #1
 8000ce0:	2017      	movs	r0, #23
 8000ce2:	f005 fe20 	bl	8006926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ce6:	2017      	movs	r0, #23
 8000ce8:	f005 fe37 	bl	800695a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2101      	movs	r1, #1
 8000cf0:	2028      	movs	r0, #40	; 0x28
 8000cf2:	f005 fe18 	bl	8006926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cf6:	2028      	movs	r0, #40	; 0x28
 8000cf8:	f005 fe2f 	bl	800695a <HAL_NVIC_EnableIRQ>

}
 8000cfc:	bf00      	nop
 8000cfe:	3738      	adds	r7, #56	; 0x38
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	58024400 	.word	0x58024400
 8000d08:	58021400 	.word	0x58021400
 8000d0c:	58020800 	.word	0x58020800
 8000d10:	58020c00 	.word	0x58020c00
 8000d14:	58021000 	.word	0x58021000
 8000d18:	58021800 	.word	0x58021800
 8000d1c:	58020400 	.word	0x58020400

08000d20 <homing>:
#define TIME_OFFSET 1100  //Valor experimental. Se encontró que para ese offset los eslabones quedaban exactamente a cero grados respecto de la horizontal

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;

void homing(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

	homAprox = true;
 8000d24:	4bb0      	ldr	r3, [pc, #704]	; (8000fe8 <homing+0x2c8>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000d2a:	4bb0      	ldr	r3, [pc, #704]	; (8000fec <homing+0x2cc>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000d30:	4baf      	ldr	r3, [pc, #700]	; (8000ff0 <homing+0x2d0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	761a      	strb	r2, [r3, #24]
    motor2.hom = false;
 8000d36:	4baf      	ldr	r3, [pc, #700]	; (8000ff4 <homing+0x2d4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	761a      	strb	r2, [r3, #24]
    motor3.hom = false;
 8000d3c:	4bae      	ldr	r3, [pc, #696]	; (8000ff8 <homing+0x2d8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	761a      	strb	r2, [r3, #24]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d48:	48ac      	ldr	r0, [pc, #688]	; (8000ffc <homing+0x2dc>)
 8000d4a:	f006 fd5b 	bl	8007804 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d54:	48a9      	ldr	r0, [pc, #676]	; (8000ffc <homing+0x2dc>)
 8000d56:	f006 fd55 	bl	8007804 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d60:	48a6      	ldr	r0, [pc, #664]	; (8000ffc <homing+0x2dc>)
 8000d62:	f006 fd4f 	bl	8007804 <HAL_GPIO_WritePin>

	//Se desabilitan interrupciones externas
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000d66:	2006      	movs	r0, #6
 8000d68:	f005 fe05 	bl	8006976 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000d6c:	2007      	movs	r0, #7
 8000d6e:	f005 fe02 	bl	8006976 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000d72:	2008      	movs	r0, #8
 8000d74:	f005 fdff 	bl	8006976 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000d78:	2009      	movs	r0, #9
 8000d7a:	f005 fdfc 	bl	8006976 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f005 fdf9 	bl	8006976 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000d84:	2017      	movs	r0, #23
 8000d86:	f005 fdf6 	bl	8006976 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //Apago interrupcion faultDriver
 8000d8a:	2028      	movs	r0, #40	; 0x28
 8000d8c:	f005 fdf3 	bl	8006976 <HAL_NVIC_DisableIRQ>

    //Se asegura que los motores esten detenidos
	Stop_PWM_MOTOR_1;
 8000d90:	2100      	movs	r1, #0
 8000d92:	489b      	ldr	r0, [pc, #620]	; (8001000 <homing+0x2e0>)
 8000d94:	f009 fbcc 	bl	800a530 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8000d98:	2100      	movs	r1, #0
 8000d9a:	489a      	ldr	r0, [pc, #616]	; (8001004 <homing+0x2e4>)
 8000d9c:	f009 fbc8 	bl	800a530 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8000da0:	2100      	movs	r1, #0
 8000da2:	4899      	ldr	r0, [pc, #612]	; (8001008 <homing+0x2e8>)
 8000da4:	f009 fbc4 	bl	800a530 <HAL_TIM_PWM_Stop>

	//Escritura del registro ARR de los PWM
	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm));
 8000da8:	4b98      	ldr	r3, [pc, #608]	; (800100c <homing+0x2ec>)
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000db4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000db8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000dbc:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8000fd0 <homing+0x2b0>
 8000dc0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dc4:	4b92      	ldr	r3, [pc, #584]	; (8001010 <homing+0x2f0>)
 8000dc6:	ed93 7b00 	vldr	d7, [r3]
 8000dca:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8000fd8 <homing+0x2b8>
 8000dce:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000dd2:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8000fe0 <homing+0x2c0>
 8000dd6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dda:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dde:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000de2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000de6:	4b86      	ldr	r3, [pc, #536]	; (8001000 <homing+0x2e0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dee:	ee17 2a90 	vmov	r2, s15
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df4:	4b85      	ldr	r3, [pc, #532]	; (800100c <homing+0x2ec>)
 8000df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e08:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8000fd0 <homing+0x2b0>
 8000e0c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e10:	4b7f      	ldr	r3, [pc, #508]	; (8001010 <homing+0x2f0>)
 8000e12:	ed93 7b00 	vldr	d7, [r3]
 8000e16:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8000fd8 <homing+0x2b8>
 8000e1a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e1e:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8000fe0 <homing+0x2c0>
 8000e22:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e32:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e36:	ee17 2a90 	vmov	r2, s15
 8000e3a:	4b71      	ldr	r3, [pc, #452]	; (8001000 <homing+0x2e0>)
 8000e3c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm));
 8000e3e:	4b73      	ldr	r3, [pc, #460]	; (800100c <homing+0x2ec>)
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e52:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8000fd0 <homing+0x2b0>
 8000e56:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e5a:	4b6d      	ldr	r3, [pc, #436]	; (8001010 <homing+0x2f0>)
 8000e5c:	ed93 7b00 	vldr	d7, [r3]
 8000e60:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000fd8 <homing+0x2b8>
 8000e64:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e68:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8000fe0 <homing+0x2c0>
 8000e6c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e7c:	4b61      	ldr	r3, [pc, #388]	; (8001004 <homing+0x2e4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e84:	ee17 2a90 	vmov	r2, s15
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e8a:	4b60      	ldr	r3, [pc, #384]	; (800100c <homing+0x2ec>)
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e96:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e9e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000fd0 <homing+0x2b0>
 8000ea2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <homing+0x2f0>)
 8000ea8:	ed93 7b00 	vldr	d7, [r3]
 8000eac:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000fd8 <homing+0x2b8>
 8000eb0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000eb4:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8000fe0 <homing+0x2c0>
 8000eb8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ebc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ec0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ec4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ec8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ecc:	ee17 2a90 	vmov	r2, s15
 8000ed0:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <homing+0x2e4>)
 8000ed2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm));
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <homing+0x2ec>)
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ee0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ee4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ee8:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000fd0 <homing+0x2b0>
 8000eec:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ef0:	4b47      	ldr	r3, [pc, #284]	; (8001010 <homing+0x2f0>)
 8000ef2:	ed93 7b00 	vldr	d7, [r3]
 8000ef6:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8000fd8 <homing+0x2b8>
 8000efa:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000efe:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8000fe0 <homing+0x2c0>
 8000f02:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f06:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f0a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f12:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <homing+0x2e8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f1a:	ee17 2a90 	vmov	r2, s15
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f20:	4b3a      	ldr	r3, [pc, #232]	; (800100c <homing+0x2ec>)
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f34:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000fd0 <homing+0x2b0>
 8000f38:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <homing+0x2f0>)
 8000f3e:	ed93 7b00 	vldr	d7, [r3]
 8000f42:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000fd8 <homing+0x2b8>
 8000f46:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f4a:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000fe0 <homing+0x2c0>
 8000f4e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f56:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f62:	ee17 2a90 	vmov	r2, s15
 8000f66:	4b28      	ldr	r3, [pc, #160]	; (8001008 <homing+0x2e8>)
 8000f68:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <homing+0x2ec>)
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <homing+0x2ec>)
 8000f80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f84:	ee17 2a90 	vmov	r2, s15
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <homing+0x2f4>)
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f96:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <homing+0x2f4>)
 8000fa0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fa4:	ee17 2a90 	vmov	r2, s15
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <homing+0x2f8>)
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000fb6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000fba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <homing+0x2f8>)
 8000fc0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 8000fca:	e06f      	b.n	80010ac <homing+0x38c>
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	418e8480 	.word	0x418e8480
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40bf4000 	.word	0x40bf4000
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	404e0000 	.word	0x404e0000
 8000fe8:	2400025c 	.word	0x2400025c
 8000fec:	2400025d 	.word	0x2400025d
 8000ff0:	24000350 	.word	0x24000350
 8000ff4:	24000398 	.word	0x24000398
 8000ff8:	240003e0 	.word	0x240003e0
 8000ffc:	58020800 	.word	0x58020800
 8001000:	240006b0 	.word	0x240006b0
 8001004:	240006fc 	.word	0x240006fc
 8001008:	24000748 	.word	0x24000748
 800100c:	40001800 	.word	0x40001800
 8001010:	24000000 	.word	0x24000000
 8001014:	40001c00 	.word	0x40001c00
 8001018:	40002000 	.word	0x40002000

        Start_PWM_MOTOR_1;
 800101c:	2100      	movs	r1, #0
 800101e:	488c      	ldr	r0, [pc, #560]	; (8001250 <homing+0x530>)
 8001020:	f009 f978 	bl	800a314 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 8001024:	2100      	movs	r1, #0
 8001026:	488b      	ldr	r0, [pc, #556]	; (8001254 <homing+0x534>)
 8001028:	f009 f974 	bl	800a314 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 800102c:	2100      	movs	r1, #0
 800102e:	488a      	ldr	r0, [pc, #552]	; (8001258 <homing+0x538>)
 8001030:	f009 f970 	bl	800a314 <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001034:	2101      	movs	r1, #1
 8001036:	4889      	ldr	r0, [pc, #548]	; (800125c <homing+0x53c>)
 8001038:	f006 fbcc 	bl	80077d4 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00d      	beq.n	800105e <homing+0x33e>
 8001042:	2104      	movs	r1, #4
 8001044:	4885      	ldr	r0, [pc, #532]	; (800125c <homing+0x53c>)
 8001046:	f006 fbc5 	bl	80077d4 <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <homing+0x33e>
 8001050:	2110      	movs	r1, #16
 8001052:	4883      	ldr	r0, [pc, #524]	; (8001260 <homing+0x540>)
 8001054:	f006 fbbe 	bl	80077d4 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d126      	bne.n	80010ac <homing+0x38c>
            HAL_Delay(30);
 800105e:	201e      	movs	r0, #30
 8001060:	f005 fb32 	bl	80066c8 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001064:	2101      	movs	r1, #1
 8001066:	487d      	ldr	r0, [pc, #500]	; (800125c <homing+0x53c>)
 8001068:	f006 fbb4 	bl	80077d4 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <homing+0x36e>
 8001072:	2104      	movs	r1, #4
 8001074:	4879      	ldr	r0, [pc, #484]	; (800125c <homing+0x53c>)
 8001076:	f006 fbad 	bl	80077d4 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <homing+0x36e>
 8001080:	2110      	movs	r1, #16
 8001082:	4877      	ldr	r0, [pc, #476]	; (8001260 <homing+0x540>)
 8001084:	f006 fba6 	bl	80077d4 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10e      	bne.n	80010ac <homing+0x38c>

                Stop_PWM_MOTOR_1;
 800108e:	2100      	movs	r1, #0
 8001090:	486f      	ldr	r0, [pc, #444]	; (8001250 <homing+0x530>)
 8001092:	f009 fa4d 	bl	800a530 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 8001096:	2100      	movs	r1, #0
 8001098:	486e      	ldr	r0, [pc, #440]	; (8001254 <homing+0x534>)
 800109a:	f009 fa49 	bl	800a530 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 800109e:	2100      	movs	r1, #0
 80010a0:	486d      	ldr	r0, [pc, #436]	; (8001258 <homing+0x538>)
 80010a2:	f009 fa45 	bl	800a530 <HAL_TIM_PWM_Stop>

                homAprox = false;
 80010a6:	4b6f      	ldr	r3, [pc, #444]	; (8001264 <homing+0x544>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 80010ac:	4b6d      	ldr	r3, [pc, #436]	; (8001264 <homing+0x544>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1b3      	bne.n	800101c <homing+0x2fc>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 80010b4:	e141      	b.n	800133a <homing+0x61a>

        if (ES1s_PRESSED && !motor1.hom) {
 80010b6:	2101      	movs	r1, #1
 80010b8:	4868      	ldr	r0, [pc, #416]	; (800125c <homing+0x53c>)
 80010ba:	f006 fb8b 	bl	80077d4 <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d155      	bne.n	8001170 <homing+0x450>
 80010c4:	4b68      	ldr	r3, [pc, #416]	; (8001268 <homing+0x548>)
 80010c6:	7e1b      	ldrb	r3, [r3, #24]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d151      	bne.n	8001170 <homing+0x450>

            Stop_PWM_MOTOR_2;
 80010cc:	2100      	movs	r1, #0
 80010ce:	4861      	ldr	r0, [pc, #388]	; (8001254 <homing+0x534>)
 80010d0:	f009 fa2e 	bl	800a530 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80010d4:	2100      	movs	r1, #0
 80010d6:	4860      	ldr	r0, [pc, #384]	; (8001258 <homing+0x538>)
 80010d8:	f009 fa2a 	bl	800a530 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 80010dc:	201e      	movs	r0, #30
 80010de:	f005 faf3 	bl	80066c8 <HAL_Delay>

            while(ES1s_PRESSED){
 80010e2:	e010      	b.n	8001106 <homing+0x3e6>

                negative_Dir_MOTOR_1;
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	4860      	ldr	r0, [pc, #384]	; (800126c <homing+0x54c>)
 80010ec:	f006 fb8a 	bl	8007804 <HAL_GPIO_WritePin>
                HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 80010f0:	2000      	movs	r0, #0
 80010f2:	f005 fae9 	bl	80066c8 <HAL_Delay>
                Start_PWM_MOTOR_1;
 80010f6:	2100      	movs	r1, #0
 80010f8:	4855      	ldr	r0, [pc, #340]	; (8001250 <homing+0x530>)
 80010fa:	f009 f90b 	bl	800a314 <HAL_TIM_PWM_Start>
                HAL_Delay(TIME_OFFSET); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 80010fe:	f240 404c 	movw	r0, #1100	; 0x44c
 8001102:	f005 fae1 	bl	80066c8 <HAL_Delay>
            while(ES1s_PRESSED){
 8001106:	2101      	movs	r1, #1
 8001108:	4854      	ldr	r0, [pc, #336]	; (800125c <homing+0x53c>)
 800110a:	f006 fb63 	bl	80077d4 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0e7      	beq.n	80010e4 <homing+0x3c4>

            }

            Stop_PWM_MOTOR_1;
 8001114:	2100      	movs	r1, #0
 8001116:	484e      	ldr	r0, [pc, #312]	; (8001250 <homing+0x530>)
 8001118:	f009 fa0a 	bl	800a530 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 800111c:	4b52      	ldr	r3, [pc, #328]	; (8001268 <homing+0x548>)
 800111e:	2201      	movs	r2, #1
 8001120:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 8001122:	2364      	movs	r3, #100	; 0x64
 8001124:	2204      	movs	r2, #4
 8001126:	4952      	ldr	r1, [pc, #328]	; (8001270 <homing+0x550>)
 8001128:	4852      	ldr	r0, [pc, #328]	; (8001274 <homing+0x554>)
 800112a:	f00a fef9 	bl	800bf20 <HAL_UART_Transmit>
            HAL_Delay(30);
 800112e:	201e      	movs	r0, #30
 8001130:	f005 faca 	bl	80066c8 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 8001134:	2104      	movs	r1, #4
 8001136:	4849      	ldr	r0, [pc, #292]	; (800125c <homing+0x53c>)
 8001138:	f006 fb4c 	bl	80077d4 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <homing+0x432>
 8001142:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <homing+0x558>)
 8001144:	7e1b      	ldrb	r3, [r3, #24]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d103      	bne.n	8001152 <homing+0x432>
 800114a:	2100      	movs	r1, #0
 800114c:	4841      	ldr	r0, [pc, #260]	; (8001254 <homing+0x534>)
 800114e:	f009 f8e1 	bl	800a314 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001152:	2110      	movs	r1, #16
 8001154:	4842      	ldr	r0, [pc, #264]	; (8001260 <homing+0x540>)
 8001156:	f006 fb3d 	bl	80077d4 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d007      	beq.n	8001170 <homing+0x450>
 8001160:	4b46      	ldr	r3, [pc, #280]	; (800127c <homing+0x55c>)
 8001162:	7e1b      	ldrb	r3, [r3, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d103      	bne.n	8001170 <homing+0x450>
 8001168:	2100      	movs	r1, #0
 800116a:	483b      	ldr	r0, [pc, #236]	; (8001258 <homing+0x538>)
 800116c:	f009 f8d2 	bl	800a314 <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 8001170:	2104      	movs	r1, #4
 8001172:	483a      	ldr	r0, [pc, #232]	; (800125c <homing+0x53c>)
 8001174:	f006 fb2e 	bl	80077d4 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d155      	bne.n	800122a <homing+0x50a>
 800117e:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <homing+0x558>)
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d151      	bne.n	800122a <homing+0x50a>

            Stop_PWM_MOTOR_1;
 8001186:	2100      	movs	r1, #0
 8001188:	4831      	ldr	r0, [pc, #196]	; (8001250 <homing+0x530>)
 800118a:	f009 f9d1 	bl	800a530 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 800118e:	2100      	movs	r1, #0
 8001190:	4831      	ldr	r0, [pc, #196]	; (8001258 <homing+0x538>)
 8001192:	f009 f9cd 	bl	800a530 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 8001196:	201e      	movs	r0, #30
 8001198:	f005 fa96 	bl	80066c8 <HAL_Delay>

            while(ES2s_PRESSED){
 800119c:	e010      	b.n	80011c0 <homing+0x4a0>

                negative_Dir_MOTOR_2;
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a4:	4831      	ldr	r0, [pc, #196]	; (800126c <homing+0x54c>)
 80011a6:	f006 fb2d 	bl	8007804 <HAL_GPIO_WritePin>
                HAL_Delay(DELAY_DIR);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f005 fa8c 	bl	80066c8 <HAL_Delay>
                Start_PWM_MOTOR_2;
 80011b0:	2100      	movs	r1, #0
 80011b2:	4828      	ldr	r0, [pc, #160]	; (8001254 <homing+0x534>)
 80011b4:	f009 f8ae 	bl	800a314 <HAL_TIM_PWM_Start>
                HAL_Delay(TIME_OFFSET);
 80011b8:	f240 404c 	movw	r0, #1100	; 0x44c
 80011bc:	f005 fa84 	bl	80066c8 <HAL_Delay>
            while(ES2s_PRESSED){
 80011c0:	2104      	movs	r1, #4
 80011c2:	4826      	ldr	r0, [pc, #152]	; (800125c <homing+0x53c>)
 80011c4:	f006 fb06 	bl	80077d4 <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0e7      	beq.n	800119e <homing+0x47e>

            }

            Stop_PWM_MOTOR_2;
 80011ce:	2100      	movs	r1, #0
 80011d0:	4820      	ldr	r0, [pc, #128]	; (8001254 <homing+0x534>)
 80011d2:	f009 f9ad 	bl	800a530 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <homing+0x558>)
 80011d8:	2201      	movs	r2, #1
 80011da:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	2204      	movs	r2, #4
 80011e0:	4927      	ldr	r1, [pc, #156]	; (8001280 <homing+0x560>)
 80011e2:	4824      	ldr	r0, [pc, #144]	; (8001274 <homing+0x554>)
 80011e4:	f00a fe9c 	bl	800bf20 <HAL_UART_Transmit>
            HAL_Delay(30);
 80011e8:	201e      	movs	r0, #30
 80011ea:	f005 fa6d 	bl	80066c8 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80011ee:	2101      	movs	r1, #1
 80011f0:	481a      	ldr	r0, [pc, #104]	; (800125c <homing+0x53c>)
 80011f2:	f006 faef 	bl	80077d4 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <homing+0x4ec>
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <homing+0x548>)
 80011fe:	7e1b      	ldrb	r3, [r3, #24]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d103      	bne.n	800120c <homing+0x4ec>
 8001204:	2100      	movs	r1, #0
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <homing+0x530>)
 8001208:	f009 f884 	bl	800a314 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 800120c:	2110      	movs	r1, #16
 800120e:	4814      	ldr	r0, [pc, #80]	; (8001260 <homing+0x540>)
 8001210:	f006 fae0 	bl	80077d4 <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <homing+0x50a>
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <homing+0x55c>)
 800121c:	7e1b      	ldrb	r3, [r3, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d103      	bne.n	800122a <homing+0x50a>
 8001222:	2100      	movs	r1, #0
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <homing+0x538>)
 8001226:	f009 f875 	bl	800a314 <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 800122a:	2110      	movs	r1, #16
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <homing+0x540>)
 800122e:	f006 fad1 	bl	80077d4 <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d16b      	bne.n	8001310 <homing+0x5f0>

            Stop_PWM_MOTOR_1;
 8001238:	2100      	movs	r1, #0
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <homing+0x530>)
 800123c:	f009 f978 	bl	800a530 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 8001240:	2100      	movs	r1, #0
 8001242:	4804      	ldr	r0, [pc, #16]	; (8001254 <homing+0x534>)
 8001244:	f009 f974 	bl	800a530 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8001248:	201e      	movs	r0, #30
 800124a:	f005 fa3d 	bl	80066c8 <HAL_Delay>

            while(ES3s_PRESSED){
 800124e:	e02a      	b.n	80012a6 <homing+0x586>
 8001250:	240006b0 	.word	0x240006b0
 8001254:	240006fc 	.word	0x240006fc
 8001258:	24000748 	.word	0x24000748
 800125c:	58021000 	.word	0x58021000
 8001260:	58020400 	.word	0x58020400
 8001264:	2400025c 	.word	0x2400025c
 8001268:	24000350 	.word	0x24000350
 800126c:	58020800 	.word	0x58020800
 8001270:	08011b50 	.word	0x08011b50
 8001274:	240009b8 	.word	0x240009b8
 8001278:	24000398 	.word	0x24000398
 800127c:	240003e0 	.word	0x240003e0
 8001280:	08011b54 	.word	0x08011b54

                negative_Dir_MOTOR_3;
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4830      	ldr	r0, [pc, #192]	; (800134c <homing+0x62c>)
 800128c:	f006 faba 	bl	8007804 <HAL_GPIO_WritePin>
                HAL_Delay(DELAY_DIR);
 8001290:	2000      	movs	r0, #0
 8001292:	f005 fa19 	bl	80066c8 <HAL_Delay>
                Start_PWM_MOTOR_3;
 8001296:	2100      	movs	r1, #0
 8001298:	482d      	ldr	r0, [pc, #180]	; (8001350 <homing+0x630>)
 800129a:	f009 f83b 	bl	800a314 <HAL_TIM_PWM_Start>
                HAL_Delay(TIME_OFFSET);
 800129e:	f240 404c 	movw	r0, #1100	; 0x44c
 80012a2:	f005 fa11 	bl	80066c8 <HAL_Delay>
            while(ES3s_PRESSED){
 80012a6:	2110      	movs	r1, #16
 80012a8:	482a      	ldr	r0, [pc, #168]	; (8001354 <homing+0x634>)
 80012aa:	f006 fa93 	bl	80077d4 <HAL_GPIO_ReadPin>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0e7      	beq.n	8001284 <homing+0x564>
            }

            Stop_PWM_MOTOR_3;
 80012b4:	2100      	movs	r1, #0
 80012b6:	4826      	ldr	r0, [pc, #152]	; (8001350 <homing+0x630>)
 80012b8:	f009 f93a 	bl	800a530 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <homing+0x638>)
 80012be:	2201      	movs	r2, #1
 80012c0:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 80012c2:	2364      	movs	r3, #100	; 0x64
 80012c4:	2204      	movs	r2, #4
 80012c6:	4925      	ldr	r1, [pc, #148]	; (800135c <homing+0x63c>)
 80012c8:	4825      	ldr	r0, [pc, #148]	; (8001360 <homing+0x640>)
 80012ca:	f00a fe29 	bl	800bf20 <HAL_UART_Transmit>
			HAL_Delay(30);
 80012ce:	201e      	movs	r0, #30
 80012d0:	f005 f9fa 	bl	80066c8 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80012d4:	2101      	movs	r1, #1
 80012d6:	4823      	ldr	r0, [pc, #140]	; (8001364 <homing+0x644>)
 80012d8:	f006 fa7c 	bl	80077d4 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <homing+0x5d2>
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <homing+0x648>)
 80012e4:	7e1b      	ldrb	r3, [r3, #24]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <homing+0x5d2>
 80012ea:	2100      	movs	r1, #0
 80012ec:	481f      	ldr	r0, [pc, #124]	; (800136c <homing+0x64c>)
 80012ee:	f009 f811 	bl	800a314 <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80012f2:	2104      	movs	r1, #4
 80012f4:	481b      	ldr	r0, [pc, #108]	; (8001364 <homing+0x644>)
 80012f6:	f006 fa6d 	bl	80077d4 <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d007      	beq.n	8001310 <homing+0x5f0>
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <homing+0x650>)
 8001302:	7e1b      	ldrb	r3, [r3, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <homing+0x5f0>
 8001308:	2100      	movs	r1, #0
 800130a:	481a      	ldr	r0, [pc, #104]	; (8001374 <homing+0x654>)
 800130c:	f009 f802 	bl	800a314 <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup


        if (motor1.hom && motor2.hom && motor3.hom){
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <homing+0x648>)
 8001312:	7e1b      	ldrb	r3, [r3, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d010      	beq.n	800133a <homing+0x61a>
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <homing+0x650>)
 800131a:	7e1b      	ldrb	r3, [r3, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00c      	beq.n	800133a <homing+0x61a>
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <homing+0x638>)
 8001322:	7e1b      	ldrb	r3, [r3, #24]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <homing+0x61a>
        	homFin=true;
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <homing+0x658>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 800132e:	2364      	movs	r3, #100	; 0x64
 8001330:	2204      	movs	r2, #4
 8001332:	4912      	ldr	r1, [pc, #72]	; (800137c <homing+0x65c>)
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <homing+0x640>)
 8001336:	f00a fdf3 	bl	800bf20 <HAL_UART_Transmit>
    while (!homFin){
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <homing+0x658>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f43f aeb9 	beq.w	80010b6 <homing+0x396>
        }
       }


    }
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	58020800 	.word	0x58020800
 8001350:	24000748 	.word	0x24000748
 8001354:	58020400 	.word	0x58020400
 8001358:	240003e0 	.word	0x240003e0
 800135c:	08011b58 	.word	0x08011b58
 8001360:	240009b8 	.word	0x240009b8
 8001364:	58021000 	.word	0x58021000
 8001368:	24000350 	.word	0x24000350
 800136c:	240006b0 	.word	0x240006b0
 8001370:	24000398 	.word	0x24000398
 8001374:	240006fc 	.word	0x240006fc
 8001378:	24000432 	.word	0x24000432
 800137c:	08011b5c 	.word	0x08011b5c

08001380 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001384:	f3bf 8f4f 	dsb	sy
}
 8001388:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <__NVIC_SystemReset+0x24>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001392:	4904      	ldr	r1, [pc, #16]	; (80013a4 <__NVIC_SystemReset+0x24>)
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_SystemReset+0x28>)
 8001396:	4313      	orrs	r3, r2
 8001398:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800139a:	f3bf 8f4f 	dsb	sy
}
 800139e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <__NVIC_SystemReset+0x20>
 80013a4:	e000ed00 	.word	0xe000ed00
 80013a8:	05fa0004 	.word	0x05fa0004

080013ac <interpretaComando>:
bool newline_detected = false;
volatile double aux;
uint8_t auxString[10];
int i,j;

void interpretaComando(void){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 80013b2:	4b91      	ldr	r3, [pc, #580]	; (80015f8 <interpretaComando+0x24c>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	3b48      	subs	r3, #72	; 0x48
 80013b8:	2b2a      	cmp	r3, #42	; 0x2a
 80013ba:	f200 8169 	bhi.w	8001690 <interpretaComando+0x2e4>
 80013be:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <interpretaComando+0x18>)
 80013c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c4:	08001471 	.word	0x08001471
 80013c8:	08001691 	.word	0x08001691
 80013cc:	08001691 	.word	0x08001691
 80013d0:	08001691 	.word	0x08001691
 80013d4:	08001691 	.word	0x08001691
 80013d8:	08001691 	.word	0x08001691
 80013dc:	08001691 	.word	0x08001691
 80013e0:	08001691 	.word	0x08001691
 80013e4:	08001479 	.word	0x08001479
 80013e8:	08001691 	.word	0x08001691
 80013ec:	08001681 	.word	0x08001681
 80013f0:	08001691 	.word	0x08001691
 80013f4:	08001691 	.word	0x08001691
 80013f8:	08001691 	.word	0x08001691
 80013fc:	08001691 	.word	0x08001691
 8001400:	08001691 	.word	0x08001691
 8001404:	08001691 	.word	0x08001691
 8001408:	08001691 	.word	0x08001691
 800140c:	08001691 	.word	0x08001691
 8001410:	08001691 	.word	0x08001691
 8001414:	08001691 	.word	0x08001691
 8001418:	08001691 	.word	0x08001691
 800141c:	08001691 	.word	0x08001691
 8001420:	08001691 	.word	0x08001691
 8001424:	08001691 	.word	0x08001691
 8001428:	08001691 	.word	0x08001691
 800142c:	08001691 	.word	0x08001691
 8001430:	08001691 	.word	0x08001691
 8001434:	08001691 	.word	0x08001691
 8001438:	08001691 	.word	0x08001691
 800143c:	08001691 	.word	0x08001691
 8001440:	08001691 	.word	0x08001691
 8001444:	08001471 	.word	0x08001471
 8001448:	08001691 	.word	0x08001691
 800144c:	08001691 	.word	0x08001691
 8001450:	08001691 	.word	0x08001691
 8001454:	08001691 	.word	0x08001691
 8001458:	08001691 	.word	0x08001691
 800145c:	08001691 	.word	0x08001691
 8001460:	08001691 	.word	0x08001691
 8001464:	08001479 	.word	0x08001479
 8001468:	08001691 	.word	0x08001691
 800146c:	08001681 	.word	0x08001681


	case 'H':
	case 'h':
		state = HOME;
 8001470:	4b62      	ldr	r3, [pc, #392]	; (80015fc <interpretaComando+0x250>)
 8001472:	2203      	movs	r2, #3
 8001474:	701a      	strb	r2, [r3, #0]
	break;
 8001476:	e10c      	b.n	8001692 <interpretaComando+0x2e6>

	case 'P':	//Formato de la trama  :Px0.1 y0.1 z-0.5(Eje, valor, espacio, Eje, valor, espacio, Eje, valor)
	case 'p':
		//TODO: VER SI SE PUEDE DEFINIR i,j como int. y asi borrar la variable flagError
		//flagErrorEndStop = 0;
		i = 1;
 8001478:	4b61      	ldr	r3, [pc, #388]	; (8001600 <interpretaComando+0x254>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]
		j = 0;
 800147e:	4b61      	ldr	r3, [pc, #388]	; (8001604 <interpretaComando+0x258>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001484:	e0ed      	b.n	8001662 <interpretaComando+0x2b6>
			if(rx_buffer[i] == 'x'){
 8001486:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <interpretaComando+0x254>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a5b      	ldr	r2, [pc, #364]	; (80015f8 <interpretaComando+0x24c>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	2b78      	cmp	r3, #120	; 0x78
 8001490:	d13b      	bne.n	800150a <interpretaComando+0x15e>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001492:	e012      	b.n	80014ba <interpretaComando+0x10e>
					auxString[j] = rx_buffer[i+1];
 8001494:	4b5a      	ldr	r3, [pc, #360]	; (8001600 <interpretaComando+0x254>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	4b5a      	ldr	r3, [pc, #360]	; (8001604 <interpretaComando+0x258>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4956      	ldr	r1, [pc, #344]	; (80015f8 <interpretaComando+0x24c>)
 80014a0:	5c89      	ldrb	r1, [r1, r2]
 80014a2:	4a59      	ldr	r2, [pc, #356]	; (8001608 <interpretaComando+0x25c>)
 80014a4:	54d1      	strb	r1, [r2, r3]
					j++;
 80014a6:	4b57      	ldr	r3, [pc, #348]	; (8001604 <interpretaComando+0x258>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a55      	ldr	r2, [pc, #340]	; (8001604 <interpretaComando+0x258>)
 80014ae:	6013      	str	r3, [r2, #0]
					i++;
 80014b0:	4b53      	ldr	r3, [pc, #332]	; (8001600 <interpretaComando+0x254>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a52      	ldr	r2, [pc, #328]	; (8001600 <interpretaComando+0x254>)
 80014b8:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80014ba:	4b51      	ldr	r3, [pc, #324]	; (8001600 <interpretaComando+0x254>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a4d      	ldr	r2, [pc, #308]	; (80015f8 <interpretaComando+0x24c>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	2b20      	cmp	r3, #32
 80014c6:	d1e5      	bne.n	8001494 <interpretaComando+0xe8>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 80014c8:	2100      	movs	r1, #0
 80014ca:	484f      	ldr	r0, [pc, #316]	; (8001608 <interpretaComando+0x25c>)
 80014cc:	f00d fe3a 	bl	800f144 <strtod>
 80014d0:	eeb0 7b40 	vmov.f64	d7, d0
 80014d4:	4b4d      	ldr	r3, [pc, #308]	; (800160c <interpretaComando+0x260>)
 80014d6:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e007      	b.n	80014f0 <interpretaComando+0x144>
					auxString[k] = 0;
 80014e0:	4a49      	ldr	r2, [pc, #292]	; (8001608 <interpretaComando+0x25c>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4413      	add	r3, r2
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b0a      	cmp	r3, #10
 80014f4:	ddf4      	ble.n	80014e0 <interpretaComando+0x134>
				}
				j=0;
 80014f6:	4b43      	ldr	r3, [pc, #268]	; (8001604 <interpretaComando+0x258>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 80014fc:	2364      	movs	r3, #100	; 0x64
 80014fe:	2207      	movs	r2, #7
 8001500:	4943      	ldr	r1, [pc, #268]	; (8001610 <interpretaComando+0x264>)
 8001502:	4844      	ldr	r0, [pc, #272]	; (8001614 <interpretaComando+0x268>)
 8001504:	f00a fd0c 	bl	800bf20 <HAL_UART_Transmit>
 8001508:	e0a6      	b.n	8001658 <interpretaComando+0x2ac>
			}
			else if(rx_buffer[i] == 'y'){
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <interpretaComando+0x254>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a3a      	ldr	r2, [pc, #232]	; (80015f8 <interpretaComando+0x24c>)
 8001510:	5cd3      	ldrb	r3, [r2, r3]
 8001512:	2b79      	cmp	r3, #121	; 0x79
 8001514:	d13b      	bne.n	800158e <interpretaComando+0x1e2>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001516:	e012      	b.n	800153e <interpretaComando+0x192>
					auxString[j] = rx_buffer[i+1];
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <interpretaComando+0x254>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <interpretaComando+0x258>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4935      	ldr	r1, [pc, #212]	; (80015f8 <interpretaComando+0x24c>)
 8001524:	5c89      	ldrb	r1, [r1, r2]
 8001526:	4a38      	ldr	r2, [pc, #224]	; (8001608 <interpretaComando+0x25c>)
 8001528:	54d1      	strb	r1, [r2, r3]
					j++;
 800152a:	4b36      	ldr	r3, [pc, #216]	; (8001604 <interpretaComando+0x258>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	4a34      	ldr	r2, [pc, #208]	; (8001604 <interpretaComando+0x258>)
 8001532:	6013      	str	r3, [r2, #0]
					i++;
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <interpretaComando+0x254>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	4a31      	ldr	r2, [pc, #196]	; (8001600 <interpretaComando+0x254>)
 800153c:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <interpretaComando+0x254>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a2c      	ldr	r2, [pc, #176]	; (80015f8 <interpretaComando+0x24c>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	2b20      	cmp	r3, #32
 800154a:	d1e5      	bne.n	8001518 <interpretaComando+0x16c>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 800154c:	2100      	movs	r1, #0
 800154e:	482e      	ldr	r0, [pc, #184]	; (8001608 <interpretaComando+0x25c>)
 8001550:	f00d fdf8 	bl	800f144 <strtod>
 8001554:	eeb0 7b40 	vmov.f64	d7, d0
 8001558:	4b2c      	ldr	r3, [pc, #176]	; (800160c <interpretaComando+0x260>)
 800155a:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	e007      	b.n	8001574 <interpretaComando+0x1c8>
					auxString[k] = 0;
 8001564:	4a28      	ldr	r2, [pc, #160]	; (8001608 <interpretaComando+0x25c>)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	4413      	add	r3, r2
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3301      	adds	r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b0a      	cmp	r3, #10
 8001578:	ddf4      	ble.n	8001564 <interpretaComando+0x1b8>
				}
				j=0;
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <interpretaComando+0x258>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 8001580:	2364      	movs	r3, #100	; 0x64
 8001582:	2207      	movs	r2, #7
 8001584:	4924      	ldr	r1, [pc, #144]	; (8001618 <interpretaComando+0x26c>)
 8001586:	4823      	ldr	r0, [pc, #140]	; (8001614 <interpretaComando+0x268>)
 8001588:	f00a fcca 	bl	800bf20 <HAL_UART_Transmit>
 800158c:	e064      	b.n	8001658 <interpretaComando+0x2ac>
			}
			else if(rx_buffer[i] == 'z'){
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <interpretaComando+0x254>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <interpretaComando+0x24c>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	2b7a      	cmp	r3, #122	; 0x7a
 8001598:	d15e      	bne.n	8001658 <interpretaComando+0x2ac>
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800159a:	e012      	b.n	80015c2 <interpretaComando+0x216>
					auxString[j] = rx_buffer[i+1];
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <interpretaComando+0x254>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <interpretaComando+0x258>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4914      	ldr	r1, [pc, #80]	; (80015f8 <interpretaComando+0x24c>)
 80015a8:	5c89      	ldrb	r1, [r1, r2]
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <interpretaComando+0x25c>)
 80015ac:	54d1      	strb	r1, [r2, r3]
					j++;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <interpretaComando+0x258>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	4a13      	ldr	r2, [pc, #76]	; (8001604 <interpretaComando+0x258>)
 80015b6:	6013      	str	r3, [r2, #0]
					i++;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <interpretaComando+0x254>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a10      	ldr	r2, [pc, #64]	; (8001600 <interpretaComando+0x254>)
 80015c0:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <interpretaComando+0x254>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <interpretaComando+0x24c>)
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	2b0a      	cmp	r3, #10
 80015ce:	d006      	beq.n	80015de <interpretaComando+0x232>
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <interpretaComando+0x254>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <interpretaComando+0x24c>)
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1de      	bne.n	800159c <interpretaComando+0x1f0>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 80015de:	2100      	movs	r1, #0
 80015e0:	4809      	ldr	r0, [pc, #36]	; (8001608 <interpretaComando+0x25c>)
 80015e2:	f00d fdaf 	bl	800f144 <strtod>
 80015e6:	eeb0 7b40 	vmov.f64	d7, d0
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <interpretaComando+0x260>)
 80015ec:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	e01a      	b.n	800162c <interpretaComando+0x280>
 80015f6:	bf00      	nop
 80015f8:	2400055c 	.word	0x2400055c
 80015fc:	24000431 	.word	0x24000431
 8001600:	2400026c 	.word	0x2400026c
 8001604:	24000270 	.word	0x24000270
 8001608:	24000260 	.word	0x24000260
 800160c:	24000498 	.word	0x24000498
 8001610:	08011b60 	.word	0x08011b60
 8001614:	240009b8 	.word	0x240009b8
 8001618:	08011b68 	.word	0x08011b68
					auxString[k] = 0;
 800161c:	4a1f      	ldr	r2, [pc, #124]	; (800169c <interpretaComando+0x2f0>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3301      	adds	r3, #1
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b0a      	cmp	r3, #10
 8001630:	ddf4      	ble.n	800161c <interpretaComando+0x270>
				}
				j=0;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <interpretaComando+0x2f4>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 8001638:	2364      	movs	r3, #100	; 0x64
 800163a:	2207      	movs	r2, #7
 800163c:	4919      	ldr	r1, [pc, #100]	; (80016a4 <interpretaComando+0x2f8>)
 800163e:	481a      	ldr	r0, [pc, #104]	; (80016a8 <interpretaComando+0x2fc>)
 8001640:	f00a fc6e 	bl	800bf20 <HAL_UART_Transmit>
				if(rx_buffer[i+1] == '\n'){	//Detectar salto de línea
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <interpretaComando+0x300>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <interpretaComando+0x304>)
 800164c:	5cd3      	ldrb	r3, [r2, r3]
 800164e:	2b0a      	cmp	r3, #10
 8001650:	d102      	bne.n	8001658 <interpretaComando+0x2ac>
				    newline_detected = true;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <interpretaComando+0x308>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
				}
			}
			i++;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <interpretaComando+0x300>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <interpretaComando+0x300>)
 8001660:	6013      	str	r3, [r2, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <interpretaComando+0x300>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <interpretaComando+0x304>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <interpretaComando+0x2cc>
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <interpretaComando+0x308>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f43f af07 	beq.w	8001486 <interpretaComando+0xda>
		}

		receptionFlag = true;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <interpretaComando+0x30c>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
		break;
 800167e:	e008      	b.n	8001692 <interpretaComando+0x2e6>


	case 'r':
	case 'R':
		HAL_UART_Transmit(&huart3, (uint8_t *)"Resetting...\n", 14, 100);
 8001680:	2364      	movs	r3, #100	; 0x64
 8001682:	220e      	movs	r2, #14
 8001684:	490d      	ldr	r1, [pc, #52]	; (80016bc <interpretaComando+0x310>)
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <interpretaComando+0x2fc>)
 8001688:	f00a fc4a 	bl	800bf20 <HAL_UART_Transmit>
		NVIC_SystemReset();
 800168c:	f7ff fe78 	bl	8001380 <__NVIC_SystemReset>

		break;


	default:break;
 8001690:	bf00      	nop


	}

}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	24000260 	.word	0x24000260
 80016a0:	24000270 	.word	0x24000270
 80016a4:	08011b70 	.word	0x08011b70
 80016a8:	240009b8 	.word	0x240009b8
 80016ac:	2400026c 	.word	0x2400026c
 80016b0:	2400055c 	.word	0x2400055c
 80016b4:	2400025e 	.word	0x2400025e
 80016b8:	2400057b 	.word	0x2400057b
 80016bc:	08011b78 	.word	0x08011b78

080016c0 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	ed2d 8b04 	vpush	{d8-d9}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	eeb0 5b40 	vmov.f64	d5, d0
 80016ce:	eeb0 6b41 	vmov.f64	d6, d1
 80016d2:	eeb0 7b42 	vmov.f64	d7, d2
 80016d6:	ed87 5b00 	vstr	d5, [r7]
 80016da:	ed87 6b02 	vstr	d6, [r7, #8]
 80016de:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 80016e2:	ed97 7b02 	vldr	d7, [r7, #8]
 80016e6:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001aa0 <inverseKinematic+0x3e0>
 80016ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80016ee:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001aa8 <inverseKinematic+0x3e8>
 80016f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016f6:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80016fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016fe:	ed97 7b04 	vldr	d7, [r7, #16]
 8001702:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001706:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800170a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800170e:	eeb0 0b45 	vmov.f64	d0, d5
 8001712:	f00f fde1 	bl	80112d8 <pow>
 8001716:	eeb0 7b40 	vmov.f64	d7, d0
 800171a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800171e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001722:	4bf9      	ldr	r3, [pc, #996]	; (8001b08 <inverseKinematic+0x448>)
 8001724:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8001728:	ed97 7b00 	vldr	d7, [r7]
 800172c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001ab0 <inverseKinematic+0x3f0>
 8001730:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001734:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001ab8 <inverseKinematic+0x3f8>
 8001738:	ee27 7b06 	vmul.f64	d7, d7, d6
 800173c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001ac0 <inverseKinematic+0x400>
 8001740:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001744:	ed97 7b02 	vldr	d7, [r7, #8]
 8001748:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8001ac8 <inverseKinematic+0x408>
 800174c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001750:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001754:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001758:	ed97 7b04 	vldr	d7, [r7, #16]
 800175c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001760:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001764:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001768:	eeb0 0b45 	vmov.f64	d0, d5
 800176c:	f00f fdb4 	bl	80112d8 <pow>
 8001770:	eeb0 7b40 	vmov.f64	d7, d0
 8001774:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001778:	ee37 7b06 	vadd.f64	d7, d7, d6
 800177c:	4be3      	ldr	r3, [pc, #908]	; (8001b0c <inverseKinematic+0x44c>)
 800177e:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8001782:	ed97 7b00 	vldr	d7, [r7]
 8001786:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001ab0 <inverseKinematic+0x3f0>
 800178a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800178e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001ab8 <inverseKinematic+0x3f8>
 8001792:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001796:	ed97 7b02 	vldr	d7, [r7, #8]
 800179a:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8001ac8 <inverseKinematic+0x408>
 800179e:	ee37 7b05 	vadd.f64	d7, d7, d5
 80017a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017aa:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8001ad0 <inverseKinematic+0x410>
 80017ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017b2:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8001aa8 <inverseKinematic+0x3e8>
 80017b6:	ee37 6b06 	vadd.f64	d6, d7, d6
 80017ba:	ed97 7b04 	vldr	d7, [r7, #16]
 80017be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017c2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80017c6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017ca:	eeb0 0b45 	vmov.f64	d0, d5
 80017ce:	f00f fd83 	bl	80112d8 <pow>
 80017d2:	eeb0 7b40 	vmov.f64	d7, d0
 80017d6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80017da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017de:	4bcc      	ldr	r3, [pc, #816]	; (8001b10 <inverseKinematic+0x450>)
 80017e0:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 80017e4:	ed97 7b02 	vldr	d7, [r7, #8]
 80017e8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001aa0 <inverseKinematic+0x3e0>
 80017ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017f0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001aa8 <inverseKinematic+0x3e8>
 80017f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017f8:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80017fc:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001800:	ed97 7b04 	vldr	d7, [r7, #16]
 8001804:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001808:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800180c:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001810:	ed97 7b02 	vldr	d7, [r7, #8]
 8001814:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8001aa0 <inverseKinematic+0x3e0>
 8001818:	ee37 7b46 	vsub.f64	d7, d7, d6
 800181c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001820:	eeb0 0b47 	vmov.f64	d0, d7
 8001824:	f00f fd58 	bl	80112d8 <pow>
 8001828:	eeb0 7b40 	vmov.f64	d7, d0
 800182c:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8001ad8 <inverseKinematic+0x418>
 8001830:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001834:	ed97 7b04 	vldr	d7, [r7, #16]
 8001838:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800183c:	eeb0 0b47 	vmov.f64	d0, d7
 8001840:	f00f fd4a 	bl	80112d8 <pow>
 8001844:	eeb0 7b40 	vmov.f64	d7, d0
 8001848:	ee39 7b07 	vadd.f64	d7, d9, d7
 800184c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001ae0 <inverseKinematic+0x420>
 8001850:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001854:	ed97 7b00 	vldr	d7, [r7]
 8001858:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800185c:	eeb0 0b47 	vmov.f64	d0, d7
 8001860:	f00f fd3a 	bl	80112d8 <pow>
 8001864:	eeb0 7b40 	vmov.f64	d7, d0
 8001868:	ee39 5b07 	vadd.f64	d5, d9, d7
 800186c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001870:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001874:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001878:	ee28 7b07 	vmul.f64	d7, d8, d7
 800187c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001ae8 <inverseKinematic+0x428>
 8001880:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001884:	4ba3      	ldr	r3, [pc, #652]	; (8001b14 <inverseKinematic+0x454>)
 8001886:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 800188a:	ed97 7b00 	vldr	d7, [r7]
 800188e:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8001ab0 <inverseKinematic+0x3f0>
 8001892:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001896:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001af0 <inverseKinematic+0x430>
 800189a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800189e:	ed97 7b02 	vldr	d7, [r7, #8]
 80018a2:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001ac8 <inverseKinematic+0x408>
 80018a6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80018aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018b2:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001ac0 <inverseKinematic+0x400>
 80018b6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80018ba:	ed97 7b04 	vldr	d7, [r7, #16]
 80018be:	ee37 6b07 	vadd.f64	d6, d7, d7
 80018c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018c6:	ee37 8b07 	vadd.f64	d8, d7, d7
 80018ca:	ed97 7b00 	vldr	d7, [r7]
 80018ce:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8001ab0 <inverseKinematic+0x3f0>
 80018d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018da:	eeb0 0b47 	vmov.f64	d0, d7
 80018de:	f00f fcfb 	bl	80112d8 <pow>
 80018e2:	eeb0 7b40 	vmov.f64	d7, d0
 80018e6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8001ad8 <inverseKinematic+0x418>
 80018ea:	ee37 9b06 	vadd.f64	d9, d7, d6
 80018ee:	ed97 7b02 	vldr	d7, [r7, #8]
 80018f2:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8001ac8 <inverseKinematic+0x408>
 80018f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018fa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018fe:	eeb0 0b47 	vmov.f64	d0, d7
 8001902:	f00f fce9 	bl	80112d8 <pow>
 8001906:	eeb0 7b40 	vmov.f64	d7, d0
 800190a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800190e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001912:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001916:	eeb0 0b47 	vmov.f64	d0, d7
 800191a:	f00f fcdd 	bl	80112d8 <pow>
 800191e:	eeb0 7b40 	vmov.f64	d7, d0
 8001922:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001926:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8001ae0 <inverseKinematic+0x420>
 800192a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800192e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001932:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001936:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800193a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800193e:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001ac0 <inverseKinematic+0x400>
 8001942:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001946:	4b74      	ldr	r3, [pc, #464]	; (8001b18 <inverseKinematic+0x458>)
 8001948:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800194c:	ed97 7b00 	vldr	d7, [r7]
 8001950:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001ab0 <inverseKinematic+0x3f0>
 8001954:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001958:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001ab8 <inverseKinematic+0x3f8>
 800195c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001960:	ed97 7b02 	vldr	d7, [r7, #8]
 8001964:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8001ac8 <inverseKinematic+0x408>
 8001968:	ee37 7b05 	vadd.f64	d7, d7, d5
 800196c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001970:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001974:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001ad0 <inverseKinematic+0x410>
 8001978:	ee37 7b06 	vadd.f64	d7, d7, d6
 800197c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001aa8 <inverseKinematic+0x3e8>
 8001980:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001984:	ed97 7b04 	vldr	d7, [r7, #16]
 8001988:	ee37 6b07 	vadd.f64	d6, d7, d7
 800198c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001990:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001994:	ed97 7b00 	vldr	d7, [r7]
 8001998:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001ab0 <inverseKinematic+0x3f0>
 800199c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019a0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019a4:	eeb0 0b47 	vmov.f64	d0, d7
 80019a8:	f00f fc96 	bl	80112d8 <pow>
 80019ac:	eeb0 9b40 	vmov.f64	d9, d0
 80019b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80019b4:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001ac8 <inverseKinematic+0x408>
 80019b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019bc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019c0:	eeb0 0b47 	vmov.f64	d0, d7
 80019c4:	f00f fc88 	bl	80112d8 <pow>
 80019c8:	eeb0 7b40 	vmov.f64	d7, d0
 80019cc:	ee39 9b07 	vadd.f64	d9, d9, d7
 80019d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80019d4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019d8:	eeb0 0b47 	vmov.f64	d0, d7
 80019dc:	f00f fc7c 	bl	80112d8 <pow>
 80019e0:	eeb0 7b40 	vmov.f64	d7, d0
 80019e4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80019e8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001ae0 <inverseKinematic+0x420>
 80019ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019f0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001af8 <inverseKinematic+0x438>
 80019f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019f8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001b00 <inverseKinematic+0x440>
 80019fc:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001a00:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a04:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001a08:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a0c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001a10:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001ac0 <inverseKinematic+0x400>
 8001a14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a18:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <inverseKinematic+0x45c>)
 8001a1a:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8001a1e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a22:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001aa0 <inverseKinematic+0x3e0>
 8001a26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a2a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a2e:	eeb0 0b47 	vmov.f64	d0, d7
 8001a32:	f00f fc51 	bl	80112d8 <pow>
 8001a36:	eeb0 8b40 	vmov.f64	d8, d0
 8001a3a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a42:	eeb0 0b47 	vmov.f64	d0, d7
 8001a46:	f00f fc47 	bl	80112d8 <pow>
 8001a4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001a4e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a52:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001ae0 <inverseKinematic+0x420>
 8001a56:	ee37 8b46 	vsub.f64	d8, d7, d6
 8001a5a:	ed97 7b00 	vldr	d7, [r7]
 8001a5e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a62:	eeb0 0b47 	vmov.f64	d0, d7
 8001a66:	f00f fc37 	bl	80112d8 <pow>
 8001a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001a6e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a72:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001af8 <inverseKinematic+0x438>
 8001a76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a7a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001b00 <inverseKinematic+0x440>
 8001a7e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a82:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a8a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001a8e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a92:	eeb0 0b45 	vmov.f64	d0, d5
 8001a96:	f00f fc1f 	bl	80112d8 <pow>
 8001a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001a9e:	e03f      	b.n	8001b20 <inverseKinematic+0x460>
 8001aa0:	1eb851ec 	.word	0x1eb851ec
 8001aa4:	3fb1eb85 	.word	0x3fb1eb85
 8001aa8:	24dd2f1b 	.word	0x24dd2f1b
 8001aac:	3fc58106 	.word	0x3fc58106
 8001ab0:	5625749b 	.word	0x5625749b
 8001ab4:	3faf09d1 	.word	0x3faf09d1
 8001ab8:	e8584caa 	.word	0xe8584caa
 8001abc:	400bb67a 	.word	0x400bb67a
 8001ac0:	24dd2f1d 	.word	0x24dd2f1d
 8001ac4:	3fe58106 	.word	0x3fe58106
 8001ac8:	1eb851ec 	.word	0x1eb851ec
 8001acc:	3fa1eb85 	.word	0x3fa1eb85
 8001ad0:	9ba5e356 	.word	0x9ba5e356
 8001ad4:	3fe020c4 	.word	0x3fe020c4
 8001ad8:	f705857e 	.word	0xf705857e
 8001adc:	3f881e03 	.word	0x3f881e03
 8001ae0:	70a3d70a 	.word	0x70a3d70a
 8001ae4:	3fd70a3d 	.word	0x3fd70a3d
 8001ae8:	24dd2f1b 	.word	0x24dd2f1b
 8001aec:	3fd58106 	.word	0x3fd58106
 8001af0:	e8584caa 	.word	0xe8584caa
 8001af4:	c00bb67a 	.word	0xc00bb67a
 8001af8:	93d96639 	.word	0x93d96639
 8001afc:	3f9ce6c0 	.word	0x3f9ce6c0
 8001b00:	47ae147c 	.word	0x47ae147c
 8001b04:	3fa47ae1 	.word	0x3fa47ae1
 8001b08:	24000278 	.word	0x24000278
 8001b0c:	240002c0 	.word	0x240002c0
 8001b10:	24000308 	.word	0x24000308
 8001b14:	24000280 	.word	0x24000280
 8001b18:	240002c8 	.word	0x240002c8
 8001b1c:	24000310 	.word	0x24000310
 8001b20:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001ea0 <inverseKinematic+0x7e0>
 8001b24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b28:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001ea8 <inverseKinematic+0x7e8>
 8001b2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b30:	4be7      	ldr	r3, [pc, #924]	; (8001ed0 <inverseKinematic+0x810>)
 8001b32:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001b36:	ed97 7b00 	vldr	d7, [r7]
 8001b3a:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001eb0 <inverseKinematic+0x7f0>
 8001b3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b42:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b46:	eeb0 0b47 	vmov.f64	d0, d7
 8001b4a:	f00f fbc5 	bl	80112d8 <pow>
 8001b4e:	eeb0 7b40 	vmov.f64	d7, d0
 8001b52:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001eb8 <inverseKinematic+0x7f8>
 8001b56:	ee37 8b06 	vadd.f64	d8, d7, d6
 8001b5a:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b5e:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001ec0 <inverseKinematic+0x800>
 8001b62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b6a:	eeb0 0b47 	vmov.f64	d0, d7
 8001b6e:	f00f fbb3 	bl	80112d8 <pow>
 8001b72:	eeb0 7b40 	vmov.f64	d7, d0
 8001b76:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001b7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b7e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b82:	eeb0 0b47 	vmov.f64	d0, d7
 8001b86:	f00f fba7 	bl	80112d8 <pow>
 8001b8a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b8e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001b92:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001ec8 <inverseKinematic+0x808>
 8001b96:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001b9a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001ba2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001ba6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001baa:	eeb0 0b45 	vmov.f64	d0, d5
 8001bae:	f00f fb93 	bl	80112d8 <pow>
 8001bb2:	eeb0 7b40 	vmov.f64	d7, d0
 8001bb6:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001eb8 <inverseKinematic+0x7f8>
 8001bba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bbe:	4bc5      	ldr	r3, [pc, #788]	; (8001ed4 <inverseKinematic+0x814>)
 8001bc0:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001bc4:	ed97 7b00 	vldr	d7, [r7]
 8001bc8:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001eb0 <inverseKinematic+0x7f0>
 8001bcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bd0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bd4:	eeb0 0b47 	vmov.f64	d0, d7
 8001bd8:	f00f fb7e 	bl	80112d8 <pow>
 8001bdc:	eeb0 8b40 	vmov.f64	d8, d0
 8001be0:	ed97 7b02 	vldr	d7, [r7, #8]
 8001be4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001ec0 <inverseKinematic+0x800>
 8001be8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bec:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bf0:	eeb0 0b47 	vmov.f64	d0, d7
 8001bf4:	f00f fb70 	bl	80112d8 <pow>
 8001bf8:	eeb0 7b40 	vmov.f64	d7, d0
 8001bfc:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001c00:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c04:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c08:	eeb0 0b47 	vmov.f64	d0, d7
 8001c0c:	f00f fb64 	bl	80112d8 <pow>
 8001c10:	eeb0 7b40 	vmov.f64	d7, d0
 8001c14:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001c18:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001ec8 <inverseKinematic+0x808>
 8001c1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c20:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001ea8 <inverseKinematic+0x7e8>
 8001c24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c28:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001ea0 <inverseKinematic+0x7e0>
 8001c2c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001c30:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c34:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001c38:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001c3c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c40:	eeb0 0b45 	vmov.f64	d0, d5
 8001c44:	f00f fb48 	bl	80112d8 <pow>
 8001c48:	eeb0 7b40 	vmov.f64	d7, d0
 8001c4c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001eb8 <inverseKinematic+0x7f8>
 8001c50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c54:	4ba0      	ldr	r3, [pc, #640]	; (8001ed8 <inverseKinematic+0x818>)
 8001c56:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001c5a:	4ba0      	ldr	r3, [pc, #640]	; (8001edc <inverseKinematic+0x81c>)
 8001c5c:	ed93 7b00 	vldr	d7, [r3]
 8001c60:	eeb1 8b47 	vneg.f64	d8, d7
 8001c64:	4b9d      	ldr	r3, [pc, #628]	; (8001edc <inverseKinematic+0x81c>)
 8001c66:	ed93 7b00 	vldr	d7, [r3]
 8001c6a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c6e:	eeb0 0b47 	vmov.f64	d0, d7
 8001c72:	f00f fb31 	bl	80112d8 <pow>
 8001c76:	eeb0 5b40 	vmov.f64	d5, d0
 8001c7a:	4b99      	ldr	r3, [pc, #612]	; (8001ee0 <inverseKinematic+0x820>)
 8001c7c:	ed93 7b00 	vldr	d7, [r3]
 8001c80:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c84:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c88:	4b91      	ldr	r3, [pc, #580]	; (8001ed0 <inverseKinematic+0x810>)
 8001c8a:	ed93 7b00 	vldr	d7, [r3]
 8001c8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c92:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c96:	eeb0 0b47 	vmov.f64	d0, d7
 8001c9a:	f00f fd9d 	bl	80117d8 <sqrt>
 8001c9e:	eeb0 7b40 	vmov.f64	d7, d0
 8001ca2:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001ca6:	4b8e      	ldr	r3, [pc, #568]	; (8001ee0 <inverseKinematic+0x820>)
 8001ca8:	ed93 7b00 	vldr	d7, [r3]
 8001cac:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001cb0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cb4:	4b8b      	ldr	r3, [pc, #556]	; (8001ee4 <inverseKinematic+0x824>)
 8001cb6:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001cba:	4b88      	ldr	r3, [pc, #544]	; (8001edc <inverseKinematic+0x81c>)
 8001cbc:	ed93 7b00 	vldr	d7, [r3]
 8001cc0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001cc4:	eeb0 0b47 	vmov.f64	d0, d7
 8001cc8:	f00f fb06 	bl	80112d8 <pow>
 8001ccc:	eeb0 5b40 	vmov.f64	d5, d0
 8001cd0:	4b83      	ldr	r3, [pc, #524]	; (8001ee0 <inverseKinematic+0x820>)
 8001cd2:	ed93 7b00 	vldr	d7, [r3]
 8001cd6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001cda:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cde:	4b7c      	ldr	r3, [pc, #496]	; (8001ed0 <inverseKinematic+0x810>)
 8001ce0:	ed93 7b00 	vldr	d7, [r3]
 8001ce4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001ce8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001cec:	eeb0 0b47 	vmov.f64	d0, d7
 8001cf0:	f00f fd72 	bl	80117d8 <sqrt>
 8001cf4:	eeb0 6b40 	vmov.f64	d6, d0
 8001cf8:	4b78      	ldr	r3, [pc, #480]	; (8001edc <inverseKinematic+0x81c>)
 8001cfa:	ed93 7b00 	vldr	d7, [r3]
 8001cfe:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001d02:	4b77      	ldr	r3, [pc, #476]	; (8001ee0 <inverseKinematic+0x820>)
 8001d04:	ed93 7b00 	vldr	d7, [r3]
 8001d08:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001d0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d10:	4b75      	ldr	r3, [pc, #468]	; (8001ee8 <inverseKinematic+0x828>)
 8001d12:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001d16:	4b75      	ldr	r3, [pc, #468]	; (8001eec <inverseKinematic+0x82c>)
 8001d18:	ed93 7b00 	vldr	d7, [r3]
 8001d1c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d20:	eeb0 0b47 	vmov.f64	d0, d7
 8001d24:	f00f fad8 	bl	80112d8 <pow>
 8001d28:	eeb0 5b40 	vmov.f64	d5, d0
 8001d2c:	4b70      	ldr	r3, [pc, #448]	; (8001ef0 <inverseKinematic+0x830>)
 8001d2e:	ed93 7b00 	vldr	d7, [r3]
 8001d32:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001d36:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d3a:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <inverseKinematic+0x814>)
 8001d3c:	ed93 7b00 	vldr	d7, [r3]
 8001d40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d44:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001d48:	eeb0 0b47 	vmov.f64	d0, d7
 8001d4c:	f00f fd44 	bl	80117d8 <sqrt>
 8001d50:	eeb0 6b40 	vmov.f64	d6, d0
 8001d54:	4b65      	ldr	r3, [pc, #404]	; (8001eec <inverseKinematic+0x82c>)
 8001d56:	ed93 7b00 	vldr	d7, [r3]
 8001d5a:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001d5e:	4b64      	ldr	r3, [pc, #400]	; (8001ef0 <inverseKinematic+0x830>)
 8001d60:	ed93 7b00 	vldr	d7, [r3]
 8001d64:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001d68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d6c:	4b61      	ldr	r3, [pc, #388]	; (8001ef4 <inverseKinematic+0x834>)
 8001d6e:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001d72:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <inverseKinematic+0x82c>)
 8001d74:	ed93 7b00 	vldr	d7, [r3]
 8001d78:	eeb1 8b47 	vneg.f64	d8, d7
 8001d7c:	4b5b      	ldr	r3, [pc, #364]	; (8001eec <inverseKinematic+0x82c>)
 8001d7e:	ed93 7b00 	vldr	d7, [r3]
 8001d82:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d86:	eeb0 0b47 	vmov.f64	d0, d7
 8001d8a:	f00f faa5 	bl	80112d8 <pow>
 8001d8e:	eeb0 5b40 	vmov.f64	d5, d0
 8001d92:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <inverseKinematic+0x830>)
 8001d94:	ed93 7b00 	vldr	d7, [r3]
 8001d98:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001d9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <inverseKinematic+0x814>)
 8001da2:	ed93 7b00 	vldr	d7, [r3]
 8001da6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001daa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001dae:	eeb0 0b47 	vmov.f64	d0, d7
 8001db2:	f00f fd11 	bl	80117d8 <sqrt>
 8001db6:	eeb0 7b40 	vmov.f64	d7, d0
 8001dba:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001dbe:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <inverseKinematic+0x830>)
 8001dc0:	ed93 7b00 	vldr	d7, [r3]
 8001dc4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001dc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001dcc:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <inverseKinematic+0x838>)
 8001dce:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001dd2:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <inverseKinematic+0x83c>)
 8001dd4:	ed93 7b00 	vldr	d7, [r3]
 8001dd8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ddc:	eeb0 0b47 	vmov.f64	d0, d7
 8001de0:	f00f fa7a 	bl	80112d8 <pow>
 8001de4:	eeb0 5b40 	vmov.f64	d5, d0
 8001de8:	4b45      	ldr	r3, [pc, #276]	; (8001f00 <inverseKinematic+0x840>)
 8001dea:	ed93 7b00 	vldr	d7, [r3]
 8001dee:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001df2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001df6:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <inverseKinematic+0x818>)
 8001df8:	ed93 7b00 	vldr	d7, [r3]
 8001dfc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e00:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001e04:	eeb0 0b47 	vmov.f64	d0, d7
 8001e08:	f00f fce6 	bl	80117d8 <sqrt>
 8001e0c:	eeb0 6b40 	vmov.f64	d6, d0
 8001e10:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <inverseKinematic+0x83c>)
 8001e12:	ed93 7b00 	vldr	d7, [r3]
 8001e16:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <inverseKinematic+0x840>)
 8001e1c:	ed93 7b00 	vldr	d7, [r3]
 8001e20:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e28:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <inverseKinematic+0x844>)
 8001e2a:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001e2e:	4b33      	ldr	r3, [pc, #204]	; (8001efc <inverseKinematic+0x83c>)
 8001e30:	ed93 7b00 	vldr	d7, [r3]
 8001e34:	eeb1 8b47 	vneg.f64	d8, d7
 8001e38:	4b30      	ldr	r3, [pc, #192]	; (8001efc <inverseKinematic+0x83c>)
 8001e3a:	ed93 7b00 	vldr	d7, [r3]
 8001e3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e42:	eeb0 0b47 	vmov.f64	d0, d7
 8001e46:	f00f fa47 	bl	80112d8 <pow>
 8001e4a:	eeb0 5b40 	vmov.f64	d5, d0
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <inverseKinematic+0x840>)
 8001e50:	ed93 7b00 	vldr	d7, [r3]
 8001e54:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001e58:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <inverseKinematic+0x818>)
 8001e5e:	ed93 7b00 	vldr	d7, [r3]
 8001e62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e66:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001e6a:	eeb0 0b47 	vmov.f64	d0, d7
 8001e6e:	f00f fcb3 	bl	80117d8 <sqrt>
 8001e72:	eeb0 7b40 	vmov.f64	d7, d0
 8001e76:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <inverseKinematic+0x840>)
 8001e7c:	ed93 7b00 	vldr	d7, [r3]
 8001e80:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e84:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <inverseKinematic+0x848>)
 8001e8a:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8001e8e:	491f      	ldr	r1, [pc, #124]	; (8001f0c <inverseKinematic+0x84c>)
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	e9c1 2300 	strd	r2, r3, [r1]
 8001e9c:	e038      	b.n	8001f10 <inverseKinematic+0x850>
 8001e9e:	bf00      	nop
 8001ea0:	47ae147c 	.word	0x47ae147c
 8001ea4:	3fa47ae1 	.word	0x3fa47ae1
 8001ea8:	93d96639 	.word	0x93d96639
 8001eac:	3f9ce6c0 	.word	0x3f9ce6c0
 8001eb0:	5625749b 	.word	0x5625749b
 8001eb4:	3faf09d1 	.word	0x3faf09d1
 8001eb8:	f705857e 	.word	0xf705857e
 8001ebc:	3f881e03 	.word	0x3f881e03
 8001ec0:	1eb851ec 	.word	0x1eb851ec
 8001ec4:	3fa1eb85 	.word	0x3fa1eb85
 8001ec8:	70a3d70a 	.word	0x70a3d70a
 8001ecc:	3fd70a3d 	.word	0x3fd70a3d
 8001ed0:	24000288 	.word	0x24000288
 8001ed4:	240002d0 	.word	0x240002d0
 8001ed8:	24000318 	.word	0x24000318
 8001edc:	24000280 	.word	0x24000280
 8001ee0:	24000278 	.word	0x24000278
 8001ee4:	240002a0 	.word	0x240002a0
 8001ee8:	240002a8 	.word	0x240002a8
 8001eec:	240002c8 	.word	0x240002c8
 8001ef0:	240002c0 	.word	0x240002c0
 8001ef4:	240002e8 	.word	0x240002e8
 8001ef8:	240002f0 	.word	0x240002f0
 8001efc:	24000310 	.word	0x24000310
 8001f00:	24000308 	.word	0x24000308
 8001f04:	24000330 	.word	0x24000330
 8001f08:	24000338 	.word	0x24000338
 8001f0c:	24000290 	.word	0x24000290
	XJ1_2 = 0;
 8001f10:	49f1      	ldr	r1, [pc, #964]	; (80022d8 <inverseKinematic+0xc18>)
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8001f1e:	4bef      	ldr	r3, [pc, #956]	; (80022dc <inverseKinematic+0xc1c>)
 8001f20:	ed93 7b00 	vldr	d7, [r3]
 8001f24:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8002270 <inverseKinematic+0xbb0>
 8001f28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f2c:	4bec      	ldr	r3, [pc, #944]	; (80022e0 <inverseKinematic+0xc20>)
 8001f2e:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8001f32:	4bec      	ldr	r3, [pc, #944]	; (80022e4 <inverseKinematic+0xc24>)
 8001f34:	ed93 7b00 	vldr	d7, [r3]
 8001f38:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8002270 <inverseKinematic+0xbb0>
 8001f3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f40:	4be9      	ldr	r3, [pc, #932]	; (80022e8 <inverseKinematic+0xc28>)
 8001f42:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001f46:	4be9      	ldr	r3, [pc, #932]	; (80022ec <inverseKinematic+0xc2c>)
 8001f48:	ed93 7b00 	vldr	d7, [r3]
 8001f4c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8002278 <inverseKinematic+0xbb8>
 8001f50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f54:	4be6      	ldr	r3, [pc, #920]	; (80022f0 <inverseKinematic+0xc30>)
 8001f56:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8001f5a:	4be6      	ldr	r3, [pc, #920]	; (80022f4 <inverseKinematic+0xc34>)
 8001f5c:	ed93 7b00 	vldr	d7, [r3]
 8001f60:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8002278 <inverseKinematic+0xbb8>
 8001f64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f68:	4be3      	ldr	r3, [pc, #908]	; (80022f8 <inverseKinematic+0xc38>)
 8001f6a:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001f6e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f72:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002280 <inverseKinematic+0xbc0>
 8001f76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f7a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002288 <inverseKinematic+0xbc8>
 8001f7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f82:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001f86:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001f8a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f92:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001f96:	4bd9      	ldr	r3, [pc, #868]	; (80022fc <inverseKinematic+0xc3c>)
 8001f98:	ed93 7b00 	vldr	d7, [r3]
 8001f9c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001fa0:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fa4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8002280 <inverseKinematic+0xbc0>
 8001fa8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8001fb4:	f00f f990 	bl	80112d8 <pow>
 8001fb8:	eeb0 9b40 	vmov.f64	d9, d0
 8001fbc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fc0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001fc4:	eeb0 0b47 	vmov.f64	d0, d7
 8001fc8:	f00f f986 	bl	80112d8 <pow>
 8001fcc:	eeb0 7b40 	vmov.f64	d7, d0
 8001fd0:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001fd4:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8002290 <inverseKinematic+0xbd0>
 8001fd8:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001fdc:	ed97 7b00 	vldr	d7, [r7]
 8001fe0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001fe4:	eeb0 0b47 	vmov.f64	d0, d7
 8001fe8:	f00f f976 	bl	80112d8 <pow>
 8001fec:	eeb0 7b40 	vmov.f64	d7, d0
 8001ff0:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001ff4:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002298 <inverseKinematic+0xbd8>
 8001ff8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ffc:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80022a0 <inverseKinematic+0xbe0>
 8002000:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002004:	ed97 7b04 	vldr	d7, [r7, #16]
 8002008:	ee37 6b07 	vadd.f64	d6, d7, d7
 800200c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002010:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002014:	4bba      	ldr	r3, [pc, #744]	; (8002300 <inverseKinematic+0xc40>)
 8002016:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 800201a:	ed97 7b02 	vldr	d7, [r7, #8]
 800201e:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002280 <inverseKinematic+0xbc0>
 8002022:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002026:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002288 <inverseKinematic+0xbc8>
 800202a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800202e:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002032:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002036:	ed97 7b04 	vldr	d7, [r7, #16]
 800203a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800203e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002042:	4bb0      	ldr	r3, [pc, #704]	; (8002304 <inverseKinematic+0xc44>)
 8002044:	ed93 7b00 	vldr	d7, [r3]
 8002048:	ee26 8b07 	vmul.f64	d8, d6, d7
 800204c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002050:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002280 <inverseKinematic+0xbc0>
 8002054:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002058:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800205c:	eeb0 0b47 	vmov.f64	d0, d7
 8002060:	f00f f93a 	bl	80112d8 <pow>
 8002064:	eeb0 9b40 	vmov.f64	d9, d0
 8002068:	ed97 7b04 	vldr	d7, [r7, #16]
 800206c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002070:	eeb0 0b47 	vmov.f64	d0, d7
 8002074:	f00f f930 	bl	80112d8 <pow>
 8002078:	eeb0 7b40 	vmov.f64	d7, d0
 800207c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002080:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8002290 <inverseKinematic+0xbd0>
 8002084:	ee37 9b46 	vsub.f64	d9, d7, d6
 8002088:	ed97 7b00 	vldr	d7, [r7]
 800208c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002090:	eeb0 0b47 	vmov.f64	d0, d7
 8002094:	f00f f920 	bl	80112d8 <pow>
 8002098:	eeb0 7b40 	vmov.f64	d7, d0
 800209c:	ee39 7b07 	vadd.f64	d7, d9, d7
 80020a0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002298 <inverseKinematic+0xbd8>
 80020a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020a8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80022a0 <inverseKinematic+0xbe0>
 80020ac:	ee37 5b06 	vadd.f64	d5, d7, d6
 80020b0:	ed97 7b04 	vldr	d7, [r7, #16]
 80020b4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80020b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020bc:	ee38 7b07 	vadd.f64	d7, d8, d7
 80020c0:	4b91      	ldr	r3, [pc, #580]	; (8002308 <inverseKinematic+0xc48>)
 80020c2:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 80020c6:	ed97 7b00 	vldr	d7, [r7]
 80020ca:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80022a8 <inverseKinematic+0xbe8>
 80020ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020d2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80022b0 <inverseKinematic+0xbf0>
 80020d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020da:	ed97 7b02 	vldr	d7, [r7, #8]
 80020de:	ed9f 5b76 	vldr	d5, [pc, #472]	; 80022b8 <inverseKinematic+0xbf8>
 80020e2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80020e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80020ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020ee:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80022c0 <inverseKinematic+0xc00>
 80020f2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80020f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80020fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80020fe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002102:	4b76      	ldr	r3, [pc, #472]	; (80022dc <inverseKinematic+0xc1c>)
 8002104:	ed93 7b00 	vldr	d7, [r3]
 8002108:	ee26 8b07 	vmul.f64	d8, d6, d7
 800210c:	ed97 7b00 	vldr	d7, [r7]
 8002110:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80022a8 <inverseKinematic+0xbe8>
 8002114:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002118:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800211c:	eeb0 0b47 	vmov.f64	d0, d7
 8002120:	f00f f8da 	bl	80112d8 <pow>
 8002124:	eeb0 7b40 	vmov.f64	d7, d0
 8002128:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80022c8 <inverseKinematic+0xc08>
 800212c:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002130:	ed97 7b02 	vldr	d7, [r7, #8]
 8002134:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80022b8 <inverseKinematic+0xbf8>
 8002138:	ee37 7b06 	vadd.f64	d7, d7, d6
 800213c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002140:	eeb0 0b47 	vmov.f64	d0, d7
 8002144:	f00f f8c8 	bl	80112d8 <pow>
 8002148:	eeb0 7b40 	vmov.f64	d7, d0
 800214c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002150:	ed97 7b04 	vldr	d7, [r7, #16]
 8002154:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002158:	eeb0 0b47 	vmov.f64	d0, d7
 800215c:	f00f f8bc 	bl	80112d8 <pow>
 8002160:	eeb0 7b40 	vmov.f64	d7, d0
 8002164:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002168:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002290 <inverseKinematic+0xbd0>
 800216c:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002170:	ed97 7b04 	vldr	d7, [r7, #16]
 8002174:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002178:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800217c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002180:	4b62      	ldr	r3, [pc, #392]	; (800230c <inverseKinematic+0xc4c>)
 8002182:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002186:	ed97 7b00 	vldr	d7, [r7]
 800218a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80022a8 <inverseKinematic+0xbe8>
 800218e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002192:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80022b0 <inverseKinematic+0xbf0>
 8002196:	ee27 6b06 	vmul.f64	d6, d7, d6
 800219a:	ed97 7b02 	vldr	d7, [r7, #8]
 800219e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80022b8 <inverseKinematic+0xbf8>
 80021a2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80021a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021ae:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80022c0 <inverseKinematic+0xc00>
 80021b2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80021b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80021ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021be:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80021c2:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <inverseKinematic+0xc24>)
 80021c4:	ed93 7b00 	vldr	d7, [r3]
 80021c8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80021cc:	ed97 7b00 	vldr	d7, [r7]
 80021d0:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80022a8 <inverseKinematic+0xbe8>
 80021d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80021dc:	eeb0 0b47 	vmov.f64	d0, d7
 80021e0:	f00f f87a 	bl	80112d8 <pow>
 80021e4:	eeb0 7b40 	vmov.f64	d7, d0
 80021e8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80022c8 <inverseKinematic+0xc08>
 80021ec:	ee37 9b06 	vadd.f64	d9, d7, d6
 80021f0:	ed97 7b02 	vldr	d7, [r7, #8]
 80021f4:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80022b8 <inverseKinematic+0xbf8>
 80021f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021fc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002200:	eeb0 0b47 	vmov.f64	d0, d7
 8002204:	f00f f868 	bl	80112d8 <pow>
 8002208:	eeb0 7b40 	vmov.f64	d7, d0
 800220c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002210:	ed97 7b04 	vldr	d7, [r7, #16]
 8002214:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002218:	eeb0 0b47 	vmov.f64	d0, d7
 800221c:	f00f f85c 	bl	80112d8 <pow>
 8002220:	eeb0 7b40 	vmov.f64	d7, d0
 8002224:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002228:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002290 <inverseKinematic+0xbd0>
 800222c:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002230:	ed97 7b04 	vldr	d7, [r7, #16]
 8002234:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002238:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800223c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002240:	4b33      	ldr	r3, [pc, #204]	; (8002310 <inverseKinematic+0xc50>)
 8002242:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8002246:	ed97 7b00 	vldr	d7, [r7]
 800224a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80022a8 <inverseKinematic+0xbe8>
 800224e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002252:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80022d0 <inverseKinematic+0xc10>
 8002256:	ee27 6b06 	vmul.f64	d6, d7, d6
 800225a:	ed97 7b02 	vldr	d7, [r7, #8]
 800225e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80022b8 <inverseKinematic+0xbf8>
 8002262:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002266:	ee37 7b07 	vadd.f64	d7, d7, d7
 800226a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800226e:	e051      	b.n	8002314 <inverseKinematic+0xc54>
 8002270:	e8584caa 	.word	0xe8584caa
 8002274:	3ffbb67a 	.word	0x3ffbb67a
 8002278:	e8584caa 	.word	0xe8584caa
 800227c:	bffbb67a 	.word	0xbffbb67a
 8002280:	1eb851ec 	.word	0x1eb851ec
 8002284:	3fb1eb85 	.word	0x3fb1eb85
 8002288:	24dd2f1b 	.word	0x24dd2f1b
 800228c:	3fc58106 	.word	0x3fc58106
 8002290:	70a3d70a 	.word	0x70a3d70a
 8002294:	3fd70a3d 	.word	0x3fd70a3d
 8002298:	93d96639 	.word	0x93d96639
 800229c:	3f9ce6c0 	.word	0x3f9ce6c0
 80022a0:	47ae147c 	.word	0x47ae147c
 80022a4:	3fa47ae1 	.word	0x3fa47ae1
 80022a8:	5625749b 	.word	0x5625749b
 80022ac:	3faf09d1 	.word	0x3faf09d1
 80022b0:	e8584caa 	.word	0xe8584caa
 80022b4:	c00bb67a 	.word	0xc00bb67a
 80022b8:	1eb851ec 	.word	0x1eb851ec
 80022bc:	3fa1eb85 	.word	0x3fa1eb85
 80022c0:	24dd2f1d 	.word	0x24dd2f1d
 80022c4:	3fe58106 	.word	0x3fe58106
 80022c8:	f705857e 	.word	0xf705857e
 80022cc:	3f881e03 	.word	0x3f881e03
 80022d0:	e8584caa 	.word	0xe8584caa
 80022d4:	400bb67a 	.word	0x400bb67a
 80022d8:	24000298 	.word	0x24000298
 80022dc:	240002e8 	.word	0x240002e8
 80022e0:	240002d8 	.word	0x240002d8
 80022e4:	240002f0 	.word	0x240002f0
 80022e8:	240002e0 	.word	0x240002e0
 80022ec:	24000330 	.word	0x24000330
 80022f0:	24000320 	.word	0x24000320
 80022f4:	24000338 	.word	0x24000338
 80022f8:	24000328 	.word	0x24000328
 80022fc:	240002a0 	.word	0x240002a0
 8002300:	240002b0 	.word	0x240002b0
 8002304:	240002a8 	.word	0x240002a8
 8002308:	240002b8 	.word	0x240002b8
 800230c:	240002f8 	.word	0x240002f8
 8002310:	24000300 	.word	0x24000300
 8002314:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002558 <inverseKinematic+0xe98>
 8002318:	ee37 7b06 	vadd.f64	d7, d7, d6
 800231c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002560 <inverseKinematic+0xea0>
 8002320:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002324:	ed97 7b04 	vldr	d7, [r7, #16]
 8002328:	ee37 7b07 	vadd.f64	d7, d7, d7
 800232c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002330:	4b9f      	ldr	r3, [pc, #636]	; (80025b0 <inverseKinematic+0xef0>)
 8002332:	ed93 7b00 	vldr	d7, [r3]
 8002336:	ee26 8b07 	vmul.f64	d8, d6, d7
 800233a:	ed97 7b00 	vldr	d7, [r7]
 800233e:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8002568 <inverseKinematic+0xea8>
 8002342:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002346:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800234a:	eeb0 0b47 	vmov.f64	d0, d7
 800234e:	f00e ffc3 	bl	80112d8 <pow>
 8002352:	eeb0 9b40 	vmov.f64	d9, d0
 8002356:	ed97 7b02 	vldr	d7, [r7, #8]
 800235a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002570 <inverseKinematic+0xeb0>
 800235e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002362:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002366:	eeb0 0b47 	vmov.f64	d0, d7
 800236a:	f00e ffb5 	bl	80112d8 <pow>
 800236e:	eeb0 7b40 	vmov.f64	d7, d0
 8002372:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002376:	ed97 7b04 	vldr	d7, [r7, #16]
 800237a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800237e:	eeb0 0b47 	vmov.f64	d0, d7
 8002382:	f00e ffa9 	bl	80112d8 <pow>
 8002386:	eeb0 7b40 	vmov.f64	d7, d0
 800238a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800238e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002578 <inverseKinematic+0xeb8>
 8002392:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002396:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002580 <inverseKinematic+0xec0>
 800239a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800239e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002588 <inverseKinematic+0xec8>
 80023a2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80023a6:	ed97 7b04 	vldr	d7, [r7, #16]
 80023aa:	ee37 6b07 	vadd.f64	d6, d7, d7
 80023ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023b2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80023b6:	4b7f      	ldr	r3, [pc, #508]	; (80025b4 <inverseKinematic+0xef4>)
 80023b8:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80023bc:	ed97 7b00 	vldr	d7, [r7]
 80023c0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002568 <inverseKinematic+0xea8>
 80023c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023c8:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8002590 <inverseKinematic+0xed0>
 80023cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023d0:	ed97 7b02 	vldr	d7, [r7, #8]
 80023d4:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002570 <inverseKinematic+0xeb0>
 80023d8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80023dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80023e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023e4:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002558 <inverseKinematic+0xe98>
 80023e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023ec:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002560 <inverseKinematic+0xea0>
 80023f0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80023f4:	ed97 7b04 	vldr	d7, [r7, #16]
 80023f8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80023fc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002400:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <inverseKinematic+0xef8>)
 8002402:	ed93 7b00 	vldr	d7, [r3]
 8002406:	ee26 8b07 	vmul.f64	d8, d6, d7
 800240a:	ed97 7b00 	vldr	d7, [r7]
 800240e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002568 <inverseKinematic+0xea8>
 8002412:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002416:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800241a:	eeb0 0b47 	vmov.f64	d0, d7
 800241e:	f00e ff5b 	bl	80112d8 <pow>
 8002422:	eeb0 9b40 	vmov.f64	d9, d0
 8002426:	ed97 7b02 	vldr	d7, [r7, #8]
 800242a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002570 <inverseKinematic+0xeb0>
 800242e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002432:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002436:	eeb0 0b47 	vmov.f64	d0, d7
 800243a:	f00e ff4d 	bl	80112d8 <pow>
 800243e:	eeb0 7b40 	vmov.f64	d7, d0
 8002442:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002446:	ed97 7b04 	vldr	d7, [r7, #16]
 800244a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800244e:	eeb0 0b47 	vmov.f64	d0, d7
 8002452:	f00e ff41 	bl	80112d8 <pow>
 8002456:	eeb0 7b40 	vmov.f64	d7, d0
 800245a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800245e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002578 <inverseKinematic+0xeb8>
 8002462:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002466:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002580 <inverseKinematic+0xec0>
 800246a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800246e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002588 <inverseKinematic+0xec8>
 8002472:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002476:	ed97 7b04 	vldr	d7, [r7, #16]
 800247a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800247e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002482:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002486:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <inverseKinematic+0xefc>)
 8002488:	ed83 7b00 	vstr	d7, [r3]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 800248c:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <inverseKinematic+0xf00>)
 800248e:	ed93 7b00 	vldr	d7, [r3]
 8002492:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8002598 <inverseKinematic+0xed8>
 8002496:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800249a:	eeb0 0b46 	vmov.f64	d0, d6
 800249e:	f00f f96d 	bl	801177c <asin>
 80024a2:	eeb0 7b40 	vmov.f64	d7, d0
 80024a6:	eeb1 7b47 	vneg.f64	d7, d7
 80024aa:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <inverseKinematic+0xf04>)
 80024ac:	ed83 7b00 	vstr	d7, [r3]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 80024b0:	4b44      	ldr	r3, [pc, #272]	; (80025c4 <inverseKinematic+0xf04>)
 80024b2:	ed93 7b00 	vldr	d7, [r3]
 80024b6:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80025a0 <inverseKinematic+0xee0>
 80024ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024be:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 80025a8 <inverseKinematic+0xee8>
 80024c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <inverseKinematic+0xf04>)
 80024c8:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 80024cc:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <inverseKinematic+0xf08>)
 80024ce:	ed93 7b00 	vldr	d7, [r3]
 80024d2:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8002598 <inverseKinematic+0xed8>
 80024d6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80024da:	eeb0 0b46 	vmov.f64	d0, d6
 80024de:	f00f f94d 	bl	801177c <asin>
 80024e2:	eeb0 7b40 	vmov.f64	d7, d0
 80024e6:	eeb1 7b47 	vneg.f64	d7, d7
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <inverseKinematic+0xf0c>)
 80024ec:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 80024f0:	4b36      	ldr	r3, [pc, #216]	; (80025cc <inverseKinematic+0xf0c>)
 80024f2:	ed93 7b00 	vldr	d7, [r3]
 80024f6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80025a0 <inverseKinematic+0xee0>
 80024fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024fe:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80025a8 <inverseKinematic+0xee8>
 8002502:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <inverseKinematic+0xf0c>)
 8002508:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <inverseKinematic+0xef4>)
 800250e:	ed93 7b00 	vldr	d7, [r3]
 8002512:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002598 <inverseKinematic+0xed8>
 8002516:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800251a:	eeb0 0b46 	vmov.f64	d0, d6
 800251e:	f00f f92d 	bl	801177c <asin>
 8002522:	eeb0 7b40 	vmov.f64	d7, d0
 8002526:	eeb1 7b47 	vneg.f64	d7, d7
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <inverseKinematic+0xf10>)
 800252c:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <inverseKinematic+0xf10>)
 8002532:	ed93 7b00 	vldr	d7, [r3]
 8002536:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80025a0 <inverseKinematic+0xee0>
 800253a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800253e:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 80025a8 <inverseKinematic+0xee8>
 8002542:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <inverseKinematic+0xf10>)
 8002548:	ed83 7b00 	vstr	d7, [r3]
}
 800254c:	bf00      	nop
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	ecbd 8b04 	vpop	{d8-d9}
 8002556:	bd80      	pop	{r7, pc}
 8002558:	9ba5e356 	.word	0x9ba5e356
 800255c:	3fe020c4 	.word	0x3fe020c4
 8002560:	24dd2f1b 	.word	0x24dd2f1b
 8002564:	3fc58106 	.word	0x3fc58106
 8002568:	5625749b 	.word	0x5625749b
 800256c:	3faf09d1 	.word	0x3faf09d1
 8002570:	1eb851ec 	.word	0x1eb851ec
 8002574:	3fa1eb85 	.word	0x3fa1eb85
 8002578:	70a3d70a 	.word	0x70a3d70a
 800257c:	3fd70a3d 	.word	0x3fd70a3d
 8002580:	93d96639 	.word	0x93d96639
 8002584:	3f9ce6c0 	.word	0x3f9ce6c0
 8002588:	47ae147c 	.word	0x47ae147c
 800258c:	3fa47ae1 	.word	0x3fa47ae1
 8002590:	e8584caa 	.word	0xe8584caa
 8002594:	400bb67a 	.word	0x400bb67a
 8002598:	9999999a 	.word	0x9999999a
 800259c:	3fc99999 	.word	0x3fc99999
 80025a0:	00000000 	.word	0x00000000
 80025a4:	40668000 	.word	0x40668000
 80025a8:	54442eea 	.word	0x54442eea
 80025ac:	400921fb 	.word	0x400921fb
 80025b0:	24000330 	.word	0x24000330
 80025b4:	24000340 	.word	0x24000340
 80025b8:	24000338 	.word	0x24000338
 80025bc:	24000348 	.word	0x24000348
 80025c0:	240002b0 	.word	0x240002b0
 80025c4:	24000350 	.word	0x24000350
 80025c8:	240002f8 	.word	0x240002f8
 80025cc:	24000398 	.word	0x24000398
 80025d0:	240003e0 	.word	0x240003e0

080025d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025d8:	f003 ffe4 	bl	80065a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025dc:	f000 f81c 	bl	8002618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025e0:	f7fe fa4c 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 80025e4:	f001 fbb2 	bl	8003d4c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80025e8:	f003 fe3a 	bl	8006260 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 80025ec:	f001 fd50 	bl	8004090 <MX_TIM12_Init>
  MX_TIM13_Init();
 80025f0:	f001 fdb0 	bl	8004154 <MX_TIM13_Init>
  MX_TIM14_Init();
 80025f4:	f001 fdfa 	bl	80041ec <MX_TIM14_Init>
  MX_TIM5_Init();
 80025f8:	f001 fcfc 	bl	8003ff4 <MX_TIM5_Init>
  MX_TIM15_Init();
 80025fc:	f001 fe42 	bl	8004284 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8002600:	f003 fde2 	bl	80061c8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002604:	f003 fd94 	bl	8006130 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002608:	f001 fc10 	bl	8003e2c <MX_TIM3_Init>
  MX_TIM4_Init();
 800260c:	f001 fc80 	bl	8003f10 <MX_TIM4_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		statesMachineLoop();
 8002610:	f000 fbee 	bl	8002df0 <statesMachineLoop>
 8002614:	e7fc      	b.n	8002610 <main+0x3c>
	...

08002618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b09c      	sub	sp, #112	; 0x70
 800261c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800261e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002622:	224c      	movs	r2, #76	; 0x4c
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f00b ffb2 	bl	800e590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2220      	movs	r2, #32
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f00b ffac 	bl	800e590 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002638:	2002      	movs	r0, #2
 800263a:	f005 f917 	bl	800786c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800263e:	2300      	movs	r3, #0
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	4b32      	ldr	r3, [pc, #200]	; (800270c <SystemClock_Config+0xf4>)
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	4a31      	ldr	r2, [pc, #196]	; (800270c <SystemClock_Config+0xf4>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800264e:	4b2f      	ldr	r3, [pc, #188]	; (800270c <SystemClock_Config+0xf4>)
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <SystemClock_Config+0xf8>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002660:	4a2b      	ldr	r2, [pc, #172]	; (8002710 <SystemClock_Config+0xf8>)
 8002662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002666:	6193      	str	r3, [r2, #24]
 8002668:	4b29      	ldr	r3, [pc, #164]	; (8002710 <SystemClock_Config+0xf8>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002674:	bf00      	nop
 8002676:	4b26      	ldr	r3, [pc, #152]	; (8002710 <SystemClock_Config+0xf8>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800267e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002682:	d1f8      	bne.n	8002676 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002684:	2302      	movs	r3, #2
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002688:	2301      	movs	r3, #1
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800268c:	2340      	movs	r3, #64	; 0x40
 800268e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002690:	2302      	movs	r3, #2
 8002692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002694:	2300      	movs	r3, #0
 8002696:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002698:	2304      	movs	r3, #4
 800269a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 800269c:	2310      	movs	r3, #16
 800269e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80026a0:	2302      	movs	r3, #2
 80026a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80026a4:	2302      	movs	r3, #2
 80026a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026a8:	2302      	movs	r3, #2
 80026aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80026ac:	230c      	movs	r3, #12
 80026ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026bc:	4618      	mov	r0, r3
 80026be:	f005 f90f 	bl	80078e0 <HAL_RCC_OscConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80026c8:	f000 faca 	bl	8002c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026cc:	233f      	movs	r3, #63	; 0x3f
 80026ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d0:	2303      	movs	r3, #3
 80026d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80026d8:	2308      	movs	r3, #8
 80026da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80026e0:	2340      	movs	r3, #64	; 0x40
 80026e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80026e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	2101      	movs	r1, #1
 80026f2:	4618      	mov	r0, r3
 80026f4:	f005 fd22 	bl	800813c <HAL_RCC_ClockConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80026fe:	f000 faaf 	bl	8002c60 <Error_Handler>
  }
}
 8002702:	bf00      	nop
 8002704:	3770      	adds	r7, #112	; 0x70
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	58000400 	.word	0x58000400
 8002710:	58024800 	.word	0x58024800

08002714 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]

	switch( GPIO_Pin){
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002724:	f000 8156 	beq.w	80029d4 <HAL_GPIO_EXTI_Callback+0x2c0>
 8002728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272c:	f300 8166 	bgt.w	80029fc <HAL_GPIO_EXTI_Callback+0x2e8>
 8002730:	2b20      	cmp	r3, #32
 8002732:	dc49      	bgt.n	80027c8 <HAL_GPIO_EXTI_Callback+0xb4>
 8002734:	2b00      	cmp	r3, #0
 8002736:	f340 8161 	ble.w	80029fc <HAL_GPIO_EXTI_Callback+0x2e8>
 800273a:	3b01      	subs	r3, #1
 800273c:	2b1f      	cmp	r3, #31
 800273e:	f200 815d 	bhi.w	80029fc <HAL_GPIO_EXTI_Callback+0x2e8>
 8002742:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <HAL_GPIO_EXTI_Callback+0x34>)
 8002744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002748:	08002827 	.word	0x08002827
 800274c:	080029fd 	.word	0x080029fd
 8002750:	080029fd 	.word	0x080029fd
 8002754:	080028d3 	.word	0x080028d3
 8002758:	080029fd 	.word	0x080029fd
 800275c:	080029fd 	.word	0x080029fd
 8002760:	080029fd 	.word	0x080029fd
 8002764:	0800287d 	.word	0x0800287d
 8002768:	080029fd 	.word	0x080029fd
 800276c:	080029fd 	.word	0x080029fd
 8002770:	080029fd 	.word	0x080029fd
 8002774:	080029fd 	.word	0x080029fd
 8002778:	080029fd 	.word	0x080029fd
 800277c:	080029fd 	.word	0x080029fd
 8002780:	080029fd 	.word	0x080029fd
 8002784:	0800297f 	.word	0x0800297f
 8002788:	080029fd 	.word	0x080029fd
 800278c:	080029fd 	.word	0x080029fd
 8002790:	080029fd 	.word	0x080029fd
 8002794:	080029fd 	.word	0x080029fd
 8002798:	080029fd 	.word	0x080029fd
 800279c:	080029fd 	.word	0x080029fd
 80027a0:	080029fd 	.word	0x080029fd
 80027a4:	080029fd 	.word	0x080029fd
 80027a8:	080029fd 	.word	0x080029fd
 80027ac:	080029fd 	.word	0x080029fd
 80027b0:	080029fd 	.word	0x080029fd
 80027b4:	080029fd 	.word	0x080029fd
 80027b8:	080029fd 	.word	0x080029fd
 80027bc:	080029fd 	.word	0x080029fd
 80027c0:	080029fd 	.word	0x080029fd
 80027c4:	08002929 	.word	0x08002929
 80027c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027cc:	f040 8116 	bne.w	80029fc <HAL_GPIO_EXTI_Callback+0x2e8>

		 case E_EndStop1_Inf_Pin:

			 Stop_PWM_MOTOR_1;
 80027d0:	2100      	movs	r1, #0
 80027d2:	488d      	ldr	r0, [pc, #564]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80027d4:	f007 feac 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80027d8:	2100      	movs	r1, #0
 80027da:	488c      	ldr	r0, [pc, #560]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2f8>)
 80027dc:	f007 fea8 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80027e0:	2100      	movs	r1, #0
 80027e2:	488b      	ldr	r0, [pc, #556]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80027e4:	f007 fea4 	bl	800a530 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80027e8:	488a      	ldr	r0, [pc, #552]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x300>)
 80027ea:	f007 fd03 	bl	800a1f4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80027ee:	488a      	ldr	r0, [pc, #552]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x304>)
 80027f0:	f007 fc60 	bl	800a0b4 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80027f4:	2100      	movs	r1, #0
 80027f6:	4889      	ldr	r0, [pc, #548]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x308>)
 80027f8:	f007 ff91 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80027fc:	2100      	movs	r1, #0
 80027fe:	4888      	ldr	r0, [pc, #544]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002800:	f007 ff8d 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002804:	2100      	movs	r1, #0
 8002806:	4887      	ldr	r0, [pc, #540]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x310>)
 8002808:	f007 ff89 	bl	800a71e <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 800280c:	4b86      	ldr	r3, [pc, #536]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x314>)
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart3,(uint8_t*)"S5\n", 4, 100);
 8002812:	2364      	movs	r3, #100	; 0x64
 8002814:	2204      	movs	r2, #4
 8002816:	4985      	ldr	r1, [pc, #532]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x318>)
 8002818:	4885      	ldr	r0, [pc, #532]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x31c>)
 800281a:	f009 fb81 	bl	800bf20 <HAL_UART_Transmit>
			 state = FAULT;
 800281e:	4b85      	ldr	r3, [pc, #532]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x320>)
 8002820:	2204      	movs	r2, #4
 8002822:	701a      	strb	r2, [r3, #0]
			 break;
 8002824:	e0eb      	b.n	80029fe <HAL_GPIO_EXTI_Callback+0x2ea>

		 case E_EndStop1_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 8002826:	2100      	movs	r1, #0
 8002828:	4877      	ldr	r0, [pc, #476]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800282a:	f007 fe81 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 800282e:	2100      	movs	r1, #0
 8002830:	4876      	ldr	r0, [pc, #472]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2f8>)
 8002832:	f007 fe7d 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8002836:	2100      	movs	r1, #0
 8002838:	4875      	ldr	r0, [pc, #468]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800283a:	f007 fe79 	bl	800a530 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 800283e:	4875      	ldr	r0, [pc, #468]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x300>)
 8002840:	f007 fcd8 	bl	800a1f4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8002844:	4874      	ldr	r0, [pc, #464]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x304>)
 8002846:	f007 fc35 	bl	800a0b4 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800284a:	2100      	movs	r1, #0
 800284c:	4873      	ldr	r0, [pc, #460]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x308>)
 800284e:	f007 ff66 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002852:	2100      	movs	r1, #0
 8002854:	4872      	ldr	r0, [pc, #456]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002856:	f007 ff62 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 800285a:	2100      	movs	r1, #0
 800285c:	4871      	ldr	r0, [pc, #452]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x310>)
 800285e:	f007 ff5e 	bl	800a71e <HAL_TIM_IC_Stop>

			 upperESalarm = true;
 8002862:	4b75      	ldr	r3, [pc, #468]	; (8002a38 <HAL_GPIO_EXTI_Callback+0x324>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart3,(uint8_t*)"S5\n", 4, 100);
 8002868:	2364      	movs	r3, #100	; 0x64
 800286a:	2204      	movs	r2, #4
 800286c:	496f      	ldr	r1, [pc, #444]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x318>)
 800286e:	4870      	ldr	r0, [pc, #448]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002870:	f009 fb56 	bl	800bf20 <HAL_UART_Transmit>
			 state = FAULT;
 8002874:	4b6f      	ldr	r3, [pc, #444]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x320>)
 8002876:	2204      	movs	r2, #4
 8002878:	701a      	strb	r2, [r3, #0]
			 break;
 800287a:	e0c0      	b.n	80029fe <HAL_GPIO_EXTI_Callback+0x2ea>

		 case E_EndStop2_Inf_Pin:
			 Stop_PWM_MOTOR_1;
 800287c:	2100      	movs	r1, #0
 800287e:	4862      	ldr	r0, [pc, #392]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8002880:	f007 fe56 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002884:	2100      	movs	r1, #0
 8002886:	4861      	ldr	r0, [pc, #388]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2f8>)
 8002888:	f007 fe52 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800288c:	2100      	movs	r1, #0
 800288e:	4860      	ldr	r0, [pc, #384]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8002890:	f007 fe4e 	bl	800a530 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002894:	485f      	ldr	r0, [pc, #380]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x300>)
 8002896:	f007 fcad 	bl	800a1f4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800289a:	485f      	ldr	r0, [pc, #380]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x304>)
 800289c:	f007 fc0a 	bl	800a0b4 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80028a0:	2100      	movs	r1, #0
 80028a2:	485e      	ldr	r0, [pc, #376]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x308>)
 80028a4:	f007 ff3b 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80028a8:	2100      	movs	r1, #0
 80028aa:	485d      	ldr	r0, [pc, #372]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x30c>)
 80028ac:	f007 ff37 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80028b0:	2100      	movs	r1, #0
 80028b2:	485c      	ldr	r0, [pc, #368]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x310>)
 80028b4:	f007 ff33 	bl	800a71e <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 80028b8:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x314>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart3,(uint8_t*)"S5\n", 4, 100);
 80028be:	2364      	movs	r3, #100	; 0x64
 80028c0:	2204      	movs	r2, #4
 80028c2:	495a      	ldr	r1, [pc, #360]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x318>)
 80028c4:	485a      	ldr	r0, [pc, #360]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x31c>)
 80028c6:	f009 fb2b 	bl	800bf20 <HAL_UART_Transmit>
			 state = FAULT;
 80028ca:	4b5a      	ldr	r3, [pc, #360]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x320>)
 80028cc:	2204      	movs	r2, #4
 80028ce:	701a      	strb	r2, [r3, #0]
			 break;
 80028d0:	e095      	b.n	80029fe <HAL_GPIO_EXTI_Callback+0x2ea>


		 case E_EndStop2_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 80028d2:	2100      	movs	r1, #0
 80028d4:	484c      	ldr	r0, [pc, #304]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80028d6:	f007 fe2b 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80028da:	2100      	movs	r1, #0
 80028dc:	484b      	ldr	r0, [pc, #300]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2f8>)
 80028de:	f007 fe27 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80028e2:	2100      	movs	r1, #0
 80028e4:	484a      	ldr	r0, [pc, #296]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80028e6:	f007 fe23 	bl	800a530 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80028ea:	484a      	ldr	r0, [pc, #296]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x300>)
 80028ec:	f007 fc82 	bl	800a1f4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80028f0:	4849      	ldr	r0, [pc, #292]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x304>)
 80028f2:	f007 fbdf 	bl	800a0b4 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80028f6:	2100      	movs	r1, #0
 80028f8:	4848      	ldr	r0, [pc, #288]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x308>)
 80028fa:	f007 ff10 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80028fe:	2100      	movs	r1, #0
 8002900:	4847      	ldr	r0, [pc, #284]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002902:	f007 ff0c 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002906:	2100      	movs	r1, #0
 8002908:	4846      	ldr	r0, [pc, #280]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x310>)
 800290a:	f007 ff08 	bl	800a71e <HAL_TIM_IC_Stop>

			 upperESalarm = true;
 800290e:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_GPIO_EXTI_Callback+0x324>)
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart3,(uint8_t*)"S5\n", 4, 100);
 8002914:	2364      	movs	r3, #100	; 0x64
 8002916:	2204      	movs	r2, #4
 8002918:	4944      	ldr	r1, [pc, #272]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x318>)
 800291a:	4845      	ldr	r0, [pc, #276]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x31c>)
 800291c:	f009 fb00 	bl	800bf20 <HAL_UART_Transmit>
			 state = FAULT;
 8002920:	4b44      	ldr	r3, [pc, #272]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x320>)
 8002922:	2204      	movs	r2, #4
 8002924:	701a      	strb	r2, [r3, #0]
			 break;
 8002926:	e06a      	b.n	80029fe <HAL_GPIO_EXTI_Callback+0x2ea>

		 case E_EndStop3_Inf_Pin:
			 Stop_PWM_MOTOR_1;
 8002928:	2100      	movs	r1, #0
 800292a:	4837      	ldr	r0, [pc, #220]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800292c:	f007 fe00 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002930:	2100      	movs	r1, #0
 8002932:	4836      	ldr	r0, [pc, #216]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2f8>)
 8002934:	f007 fdfc 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8002938:	2100      	movs	r1, #0
 800293a:	4835      	ldr	r0, [pc, #212]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800293c:	f007 fdf8 	bl	800a530 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002940:	4834      	ldr	r0, [pc, #208]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x300>)
 8002942:	f007 fc57 	bl	800a1f4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8002946:	4834      	ldr	r0, [pc, #208]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x304>)
 8002948:	f007 fbb4 	bl	800a0b4 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800294c:	2100      	movs	r1, #0
 800294e:	4833      	ldr	r0, [pc, #204]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x308>)
 8002950:	f007 fee5 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002954:	2100      	movs	r1, #0
 8002956:	4832      	ldr	r0, [pc, #200]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002958:	f007 fee1 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 800295c:	2100      	movs	r1, #0
 800295e:	4831      	ldr	r0, [pc, #196]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x310>)
 8002960:	f007 fedd 	bl	800a71e <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 8002964:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x314>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart3,(uint8_t*)"S5\n", 4, 100);
 800296a:	2364      	movs	r3, #100	; 0x64
 800296c:	2204      	movs	r2, #4
 800296e:	492f      	ldr	r1, [pc, #188]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x318>)
 8002970:	482f      	ldr	r0, [pc, #188]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002972:	f009 fad5 	bl	800bf20 <HAL_UART_Transmit>
			 state = FAULT;
 8002976:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x320>)
 8002978:	2204      	movs	r2, #4
 800297a:	701a      	strb	r2, [r3, #0]

			 break;
 800297c:	e03f      	b.n	80029fe <HAL_GPIO_EXTI_Callback+0x2ea>

		 case E_EndStop3_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 800297e:	2100      	movs	r1, #0
 8002980:	4821      	ldr	r0, [pc, #132]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8002982:	f007 fdd5 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002986:	2100      	movs	r1, #0
 8002988:	4820      	ldr	r0, [pc, #128]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2f8>)
 800298a:	f007 fdd1 	bl	800a530 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800298e:	2100      	movs	r1, #0
 8002990:	481f      	ldr	r0, [pc, #124]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8002992:	f007 fdcd 	bl	800a530 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002996:	481f      	ldr	r0, [pc, #124]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x300>)
 8002998:	f007 fc2c 	bl	800a1f4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800299c:	481e      	ldr	r0, [pc, #120]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x304>)
 800299e:	f007 fb89 	bl	800a0b4 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80029a2:	2100      	movs	r1, #0
 80029a4:	481d      	ldr	r0, [pc, #116]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x308>)
 80029a6:	f007 feba 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80029aa:	2100      	movs	r1, #0
 80029ac:	481c      	ldr	r0, [pc, #112]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x30c>)
 80029ae:	f007 feb6 	bl	800a71e <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80029b2:	2100      	movs	r1, #0
 80029b4:	481b      	ldr	r0, [pc, #108]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x310>)
 80029b6:	f007 feb2 	bl	800a71e <HAL_TIM_IC_Stop>

			 upperESalarm = true;
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_GPIO_EXTI_Callback+0x324>)
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart3,(uint8_t*)"S5\n", 4, 100);
 80029c0:	2364      	movs	r3, #100	; 0x64
 80029c2:	2204      	movs	r2, #4
 80029c4:	4919      	ldr	r1, [pc, #100]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x318>)
 80029c6:	481a      	ldr	r0, [pc, #104]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x31c>)
 80029c8:	f009 faaa 	bl	800bf20 <HAL_UART_Transmit>
			 state = FAULT;
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x320>)
 80029ce:	2204      	movs	r2, #4
 80029d0:	701a      	strb	r2, [r3, #0]
			 break;
 80029d2:	e014      	b.n	80029fe <HAL_GPIO_EXTI_Callback+0x2ea>

		 case BUTTON_Pin:

			 if (!upperESalarm && !endStopAlarmInf && !faultDrivers){
 80029d4:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_GPIO_EXTI_Callback+0x324>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_GPIO_EXTI_Callback+0x2e0>
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x314>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <HAL_GPIO_EXTI_Callback+0x2e0>
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x328>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <HAL_GPIO_EXTI_Callback+0x2e0>
				 continuar = false;
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <HAL_GPIO_EXTI_Callback+0x32c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
			 }else{continuar = true;}

			 break;
 80029f2:	e004      	b.n	80029fe <HAL_GPIO_EXTI_Callback+0x2ea>
			 }else{continuar = true;}
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_GPIO_EXTI_Callback+0x32c>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
			 break;
 80029fa:	e000      	b.n	80029fe <HAL_GPIO_EXTI_Callback+0x2ea>
//			 //continuar = false;
//			 faultDrivers = true;
//			 state = FAULT;
//			 break;

		 default: break;
 80029fc:	bf00      	nop


	}


}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	240006b0 	.word	0x240006b0
 8002a0c:	240006fc 	.word	0x240006fc
 8002a10:	24000748 	.word	0x24000748
 8002a14:	24000794 	.word	0x24000794
 8002a18:	24000664 	.word	0x24000664
 8002a1c:	24000580 	.word	0x24000580
 8002a20:	240005cc 	.word	0x240005cc
 8002a24:	24000618 	.word	0x24000618
 8002a28:	24000436 	.word	0x24000436
 8002a2c:	08011b88 	.word	0x08011b88
 8002a30:	240009b8 	.word	0x240009b8
 8002a34:	24000431 	.word	0x24000431
 8002a38:	24000435 	.word	0x24000435
 8002a3c:	24000438 	.word	0x24000438
 8002a40:	24000437 	.word	0x24000437

08002a44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a30      	ldr	r2, [pc, #192]	; (8002b14 <HAL_UART_RxCpltCallback+0xd0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d14d      	bne.n	8002af2 <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8002a56:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_UART_RxCpltCallback+0xd4>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b3a      	cmp	r3, #58	; 0x3a
 8002a60:	d006      	beq.n	8002a70 <HAL_UART_RxCpltCallback+0x2c>
 8002a62:	2b3a      	cmp	r3, #58	; 0x3a
 8002a64:	dc36      	bgt.n	8002ad4 <HAL_UART_RxCpltCallback+0x90>
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d009      	beq.n	8002a7e <HAL_UART_RxCpltCallback+0x3a>
 8002a6a:	2b0d      	cmp	r3, #13
 8002a6c:	d01e      	beq.n	8002aac <HAL_UART_RxCpltCallback+0x68>
 8002a6e:	e031      	b.n	8002ad4 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8002a70:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_UART_RxCpltCallback+0xdc>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
			break;
 8002a7c:	e040      	b.n	8002b00 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 8002a7e:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d037      	beq.n	8002af6 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002a90:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a92:	e030      	b.n	8002af6 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <HAL_UART_RxCpltCallback+0xe0>)
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002aaa:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b1e      	cmp	r3, #30
 8002ab2:	d1ef      	bne.n	8002a94 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_UART_RxCpltCallback+0xdc>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d11e      	bne.n	8002afa <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <HAL_UART_RxCpltCallback+0xe0>)
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8002ac8:	f7fe fc70 	bl	80013ac <interpretaComando>
				cm0 = 0;
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <HAL_UART_RxCpltCallback+0xdc>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]

			}
			break;
 8002ad2:	e012      	b.n	8002afa <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b1d      	cmp	r3, #29
 8002ada:	d810      	bhi.n	8002afe <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	b2d1      	uxtb	r1, r2
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <HAL_UART_RxCpltCallback+0xd8>)
 8002ae6:	7011      	strb	r1, [r2, #0]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4a0e      	ldr	r2, [pc, #56]	; (8002b24 <HAL_UART_RxCpltCallback+0xe0>)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	5453      	strb	r3, [r2, r1]
			}
			break;
 8002af0:	e005      	b.n	8002afe <HAL_UART_RxCpltCallback+0xba>
		}
	}
 8002af2:	bf00      	nop
 8002af4:	e004      	b.n	8002b00 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002af6:	bf00      	nop
 8002af8:	e002      	b.n	8002b00 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002afa:	bf00      	nop
 8002afc:	e000      	b.n	8002b00 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002afe:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8002b00:	2201      	movs	r2, #1
 8002b02:	4905      	ldr	r1, [pc, #20]	; (8002b18 <HAL_UART_RxCpltCallback+0xd4>)
 8002b04:	4808      	ldr	r0, [pc, #32]	; (8002b28 <HAL_UART_RxCpltCallback+0xe4>)
 8002b06:	f009 faa1 	bl	800c04c <HAL_UART_Receive_IT>
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40004800 	.word	0x40004800
 8002b18:	2400057a 	.word	0x2400057a
 8002b1c:	24000559 	.word	0x24000559
 8002b20:	24000430 	.word	0x24000430
 8002b24:	2400055c 	.word	0x2400055c
 8002b28:	240009b8 	.word	0x240009b8

08002b2c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	__NOP();
 8002b34:	bf00      	nop
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b54:	d10f      	bne.n	8002b76 <HAL_TIM_IC_CaptureCallback+0x32>
		if (motor1.pMotor == motor1.numStep) {
 8002b56:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d103      	bne.n	8002b6a <HAL_TIM_IC_CaptureCallback+0x26>
			motor1.stepReached = true;
 8002b62:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	765a      	strb	r2, [r3, #25]
			motor3.pMotor++;
		}

	}

}
 8002b68:	e02e      	b.n	8002bc8 <HAL_TIM_IC_CaptureCallback+0x84>
			motor1.pMotor++;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	3301      	adds	r3, #1
 8002b70:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b72:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b74:	e028      	b.n	8002bc8 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM3){
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_TIM_IC_CaptureCallback+0x5c>
		if (motor2.pMotor == motor2.numStep) {
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b84:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d103      	bne.n	8002b94 <HAL_TIM_IC_CaptureCallback+0x50>
			motor2.stepReached = true;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	765a      	strb	r2, [r3, #25]
}
 8002b92:	e019      	b.n	8002bc8 <HAL_TIM_IC_CaptureCallback+0x84>
			motor2.pMotor++;
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	3301      	adds	r3, #1
 8002b9a:	4a10      	ldr	r2, [pc, #64]	; (8002bdc <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b9e:	e013      	b.n	8002bc8 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM4){
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_TIM_IC_CaptureCallback+0x84>
		if (motor3.pMotor == motor3.numStep) {
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d103      	bne.n	8002bbe <HAL_TIM_IC_CaptureCallback+0x7a>
			motor3.stepReached = true;
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	765a      	strb	r2, [r3, #25]
}
 8002bbc:	e004      	b.n	8002bc8 <HAL_TIM_IC_CaptureCallback+0x84>
			motor3.pMotor++;
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002bc6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	24000350 	.word	0x24000350
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	24000398 	.word	0x24000398
 8002be0:	40000800 	.word	0x40000800
 8002be4:	240003e0 	.word	0x240003e0

08002be8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer that update velocity'curve. It interrups every 10 ms
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a17      	ldr	r2, [pc, #92]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d11f      	bne.n	8002c38 <HAL_TIM_PeriodElapsedCallback+0x50>

		if (!timeFlag) {
 8002bf8:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <HAL_TIM_PeriodElapsedCallback+0x24>
			timeFlag = true;
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
			TIM5->CNT = 0;	//We start counting from here
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / FCL));
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002c26:	ed9f 4b08 	vldr	d4, [pc, #32]	; 8002c48 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002c2a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002c2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002c34:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	f3af 8000 	nop.w
 8002c48:	00000000 	.word	0x00000000
 8002c4c:	418e8480 	.word	0x418e8480
 8002c50:	24000794 	.word	0x24000794
 8002c54:	24000558 	.word	0x24000558
 8002c58:	40000c00 	.word	0x40000c00
 8002c5c:	24000428 	.word	0x24000428

08002c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	ed93 6b00 	vldr	d6, [r3]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	ed93 7b08 	vldr	d7, [r3, #32]
 8002c8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	db2b      	blt.n	8002cee <configMotor+0x7e>

		diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	ed93 6b00 	vldr	d6, [r3]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	ed93 7b08 	vldr	d7, [r3, #32]
 8002ca2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ca6:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	e9c1 2308 	strd	r2, r3, [r1, #32]
		if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d105      	bne.n	8002cc8 <configMotor+0x58>
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cc2:	4849      	ldr	r0, [pc, #292]	; (8002de8 <configMotor+0x178>)
 8002cc4:	f004 fd9e 	bl	8007804 <HAL_GPIO_WritePin>
		if (i==1) negative_Dir_MOTOR_2;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <configMotor+0x6a>
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cd4:	4844      	ldr	r0, [pc, #272]	; (8002de8 <configMotor+0x178>)
 8002cd6:	f004 fd95 	bl	8007804 <HAL_GPIO_WritePin>
		if (i==2) negative_Dir_MOTOR_3;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d131      	bne.n	8002d44 <configMotor+0xd4>
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ce6:	4840      	ldr	r0, [pc, #256]	; (8002de8 <configMotor+0x178>)
 8002ce8:	f004 fd8c 	bl	8007804 <HAL_GPIO_WritePin>
 8002cec:	e02a      	b.n	8002d44 <configMotor+0xd4>

	} else {

		diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	ed93 6b08 	vldr	d6, [r3, #32]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	ed93 7b00 	vldr	d7, [r3]
 8002cfa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002cfe:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <configMotor+0xb0>
 8002d14:	2200      	movs	r2, #0
 8002d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d1a:	4833      	ldr	r0, [pc, #204]	; (8002de8 <configMotor+0x178>)
 8002d1c:	f004 fd72 	bl	8007804 <HAL_GPIO_WritePin>
		if (i==1) positive_Dir_MOTOR_2;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d105      	bne.n	8002d32 <configMotor+0xc2>
 8002d26:	2200      	movs	r2, #0
 8002d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d2c:	482e      	ldr	r0, [pc, #184]	; (8002de8 <configMotor+0x178>)
 8002d2e:	f004 fd69 	bl	8007804 <HAL_GPIO_WritePin>
		if (i==2) positive_Dir_MOTOR_3;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d105      	bne.n	8002d44 <configMotor+0xd4>
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d3e:	482a      	ldr	r0, [pc, #168]	; (8002de8 <configMotor+0x178>)
 8002d40:	f004 fd60 	bl	8007804 <HAL_GPIO_WritePin>

	/*Calculamos el error de posicion por caseteo a "int" y cuando supera la unidad la compenzamos, para ello
	 * almacenamos el remanente de cada operacion. Cuando este remanente supera la unidad, le sumamos 1 a el numero
	 * de pasos que debe efectuar el motor */

	motor->calcStep = (diffAngles * STEPREV) / 360;
 8002d44:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d48:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002dd8 <configMotor+0x168>
 8002d4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d50:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8002de0 <configMotor+0x170>
 8002d54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	motor->numStep = (uint32_t) motor->calcStep;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002d64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d68:	ee17 2a90 	vmov	r2, s15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
	motor->remainder += (motor->calcStep - motor->numStep);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d88:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002d8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	if (motor->remainder >= 1) {
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002d9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002da0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da8:	da00      	bge.n	8002dac <configMotor+0x13c>
		motor->remainder -= 1;
		motor->numStep += 1;
	}

}
 8002daa:	e00e      	b.n	8002dca <configMotor+0x15a>
		motor->remainder -= 1;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002db2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002db6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		motor->numStep += 1;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	f3af 8000 	nop.w
 8002dd8:	00000000 	.word	0x00000000
 8002ddc:	40bf4000 	.word	0x40bf4000
 8002de0:	00000000 	.word	0x00000000
 8002de4:	40768000 	.word	0x40768000
 8002de8:	58020800 	.word	0x58020800
 8002dec:	00000000 	.word	0x00000000

08002df0 <statesMachineLoop>:


//--------------------------------------------


void statesMachineLoop(void){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0



	switch (state){
 8002df4:	4b84      	ldr	r3, [pc, #528]	; (8003008 <statesMachineLoop+0x218>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	f200 859c 	bhi.w	8003936 <statesMachineLoop+0xb46>
 8002dfe:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <statesMachineLoop+0x14>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e19 	.word	0x08002e19
 8002e08:	080031ef 	.word	0x080031ef
 8002e0c:	08002fb7 	.word	0x08002fb7
 8002e10:	08002ec3 	.word	0x08002ec3
 8002e14:	080033b1 	.word	0x080033b1

	case INIT:

		HAL_UART_Transmit(&huart3,(uint8_t*)"S1\n", 4, 100);
 8002e18:	2364      	movs	r3, #100	; 0x64
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	497b      	ldr	r1, [pc, #492]	; (800300c <statesMachineLoop+0x21c>)
 8002e1e:	487c      	ldr	r0, [pc, #496]	; (8003010 <statesMachineLoop+0x220>)
 8002e20:	f009 f87e 	bl	800bf20 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002e24:	2201      	movs	r2, #1
 8002e26:	497b      	ldr	r1, [pc, #492]	; (8003014 <statesMachineLoop+0x224>)
 8002e28:	4879      	ldr	r0, [pc, #484]	; (8003010 <statesMachineLoop+0x220>)
 8002e2a:	f009 f90f 	bl	800c04c <HAL_UART_Receive_IT>

		HAL_TIM_Base_Start(&htim12);
 8002e2e:	487a      	ldr	r0, [pc, #488]	; (8003018 <statesMachineLoop+0x228>)
 8002e30:	f007 f8d0 	bl	8009fd4 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim13);
 8002e34:	4879      	ldr	r0, [pc, #484]	; (800301c <statesMachineLoop+0x22c>)
 8002e36:	f007 f8cd 	bl	8009fd4 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim14);
 8002e3a:	4879      	ldr	r0, [pc, #484]	; (8003020 <statesMachineLoop+0x230>)
 8002e3c:	f007 f8ca 	bl	8009fd4 <HAL_TIM_Base_Start>

		//Enable drivers motores (0 es habilitado)
		HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2110      	movs	r1, #16
 8002e44:	4877      	ldr	r0, [pc, #476]	; (8003024 <statesMachineLoop+0x234>)
 8002e46:	f004 fcdd 	bl	8007804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2120      	movs	r1, #32
 8002e4e:	4875      	ldr	r0, [pc, #468]	; (8003024 <statesMachineLoop+0x234>)
 8002e50:	f004 fcd8 	bl	8007804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2140      	movs	r1, #64	; 0x40
 8002e58:	4872      	ldr	r0, [pc, #456]	; (8003024 <statesMachineLoop+0x234>)
 8002e5a:	f004 fcd3 	bl	8007804 <HAL_GPIO_WritePin>

		HAL_Delay(DELAY_ENABLE); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002e5e:	2032      	movs	r0, #50	; 0x32
 8002e60:	f003 fc32 	bl	80066c8 <HAL_Delay>

		// Se estable la direccion horario por defecto
		positive_Dir_MOTOR_1;
 8002e64:	2200      	movs	r2, #0
 8002e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e6a:	486f      	ldr	r0, [pc, #444]	; (8003028 <statesMachineLoop+0x238>)
 8002e6c:	f004 fcca 	bl	8007804 <HAL_GPIO_WritePin>
		positive_Dir_MOTOR_2;
 8002e70:	2200      	movs	r2, #0
 8002e72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e76:	486c      	ldr	r0, [pc, #432]	; (8003028 <statesMachineLoop+0x238>)
 8002e78:	f004 fcc4 	bl	8007804 <HAL_GPIO_WritePin>
		positive_Dir_MOTOR_3;
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e82:	4869      	ldr	r0, [pc, #420]	; (8003028 <statesMachineLoop+0x238>)
 8002e84:	f004 fcbe 	bl	8007804 <HAL_GPIO_WritePin>

		motor1.stepReached = false;
 8002e88:	4b68      	ldr	r3, [pc, #416]	; (800302c <statesMachineLoop+0x23c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	765a      	strb	r2, [r3, #25]
		motor2.stepReached = false;
 8002e8e:	4b68      	ldr	r3, [pc, #416]	; (8003030 <statesMachineLoop+0x240>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	765a      	strb	r2, [r3, #25]
		motor3.stepReached = false;
 8002e94:	4b67      	ldr	r3, [pc, #412]	; (8003034 <statesMachineLoop+0x244>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	765a      	strb	r2, [r3, #25]

		HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8002e9a:	2364      	movs	r3, #100	; 0x64
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	4966      	ldr	r1, [pc, #408]	; (8003038 <statesMachineLoop+0x248>)
 8002ea0:	485b      	ldr	r0, [pc, #364]	; (8003010 <statesMachineLoop+0x220>)
 8002ea2:	f009 f83d 	bl	800bf20 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002ea6:	2064      	movs	r0, #100	; 0x64
 8002ea8:	f003 fc0e 	bl	80066c8 <HAL_Delay>
		HAL_UART_Transmit(&huart3,(uint8_t*)"S2\n", 4, 100);
 8002eac:	2364      	movs	r3, #100	; 0x64
 8002eae:	2204      	movs	r2, #4
 8002eb0:	4962      	ldr	r1, [pc, #392]	; (800303c <statesMachineLoop+0x24c>)
 8002eb2:	4857      	ldr	r0, [pc, #348]	; (8003010 <statesMachineLoop+0x220>)
 8002eb4:	f009 f834 	bl	800bf20 <HAL_UART_Transmit>

		state = READY;
 8002eb8:	4b53      	ldr	r3, [pc, #332]	; (8003008 <statesMachineLoop+0x218>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]

		break;
 8002ebe:	f000 bd5e 	b.w	800397e <statesMachineLoop+0xb8e>

	case HOME:

		HAL_UART_Transmit(&huart3,(uint8_t*)"S3\n", 4, 100);
 8002ec2:	2364      	movs	r3, #100	; 0x64
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	495e      	ldr	r1, [pc, #376]	; (8003040 <statesMachineLoop+0x250>)
 8002ec8:	4851      	ldr	r0, [pc, #324]	; (8003010 <statesMachineLoop+0x220>)
 8002eca:	f009 f829 	bl	800bf20 <HAL_UART_Transmit>

		receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8002ece:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <statesMachineLoop+0x254>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]

		homing();
 8002ed4:	f7fd ff24 	bl	8000d20 <homing>

        if(homFin){
 8002ed8:	4b5b      	ldr	r3, [pc, #364]	; (8003048 <statesMachineLoop+0x258>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 852c 	beq.w	800393a <statesMachineLoop+0xb4a>

        	homFin = false;
 8002ee2:	4b59      	ldr	r3, [pc, #356]	; (8003048 <statesMachineLoop+0x258>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]

        	//Se habilitan interrupciones
        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8002ee8:	2006      	movs	r0, #6
 8002eea:	f003 fd36 	bl	800695a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 8002eee:	2007      	movs	r0, #7
 8002ef0:	f003 fd33 	bl	800695a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 8002ef4:	2008      	movs	r0, #8
 8002ef6:	f003 fd30 	bl	800695a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 8002efa:	2009      	movs	r0, #9
 8002efc:	f003 fd2d 	bl	800695a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 8002f00:	200a      	movs	r0, #10
 8002f02:	f003 fd2a 	bl	800695a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 8002f06:	2017      	movs	r0, #23
 8002f08:	f003 fd27 	bl	800695a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //Enciendo interrupcion faultDriver
 8002f0c:	2028      	movs	r0, #40	; 0x28
 8002f0e:	f003 fd24 	bl	800695a <HAL_NVIC_EnableIRQ>

        	HAL_Delay(10);
 8002f12:	200a      	movs	r0, #10
 8002f14:	f003 fbd8 	bl	80066c8 <HAL_Delay>

        	//inicializa posición
			Pini.x=0;
 8002f18:	494c      	ldr	r1, [pc, #304]	; (800304c <statesMachineLoop+0x25c>)
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y=0;
 8002f26:	4949      	ldr	r1, [pc, #292]	; (800304c <statesMachineLoop+0x25c>)
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z =-0.5208; //antes era -0.33
 8002f34:	4945      	ldr	r1, [pc, #276]	; (800304c <statesMachineLoop+0x25c>)
 8002f36:	a332      	add	r3, pc, #200	; (adr r3, 8003000 <statesMachineLoop+0x210>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	e9c1 2304 	strd	r2, r3, [r1, #16]

			motor1.theta = 0.0;
 8002f40:	493a      	ldr	r1, [pc, #232]	; (800302c <statesMachineLoop+0x23c>)
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9c1 2300 	strd	r2, r3, [r1]
			motor2.theta = 0.0;
 8002f4e:	4938      	ldr	r1, [pc, #224]	; (8003030 <statesMachineLoop+0x240>)
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9c1 2300 	strd	r2, r3, [r1]
			motor3.theta = 0.0;
 8002f5c:	4935      	ldr	r1, [pc, #212]	; (8003034 <statesMachineLoop+0x244>)
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	e9c1 2300 	strd	r2, r3, [r1]

			motor1.currentAngle = 0.0;
 8002f6a:	4930      	ldr	r1, [pc, #192]	; (800302c <statesMachineLoop+0x23c>)
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor2.currentAngle = 0.0;
 8002f78:	492d      	ldr	r1, [pc, #180]	; (8003030 <statesMachineLoop+0x240>)
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor3.currentAngle = 0.0;
 8002f86:	492b      	ldr	r1, [pc, #172]	; (8003034 <statesMachineLoop+0x244>)
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	e9c1 2308 	strd	r2, r3, [r1, #32]

			upperESalarm = false;
 8002f94:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <statesMachineLoop+0x260>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
			endStopAlarmInf = false;
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <statesMachineLoop+0x264>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3,(uint8_t*)"S2\n", 4, 100);
 8002fa0:	2364      	movs	r3, #100	; 0x64
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	4925      	ldr	r1, [pc, #148]	; (800303c <statesMachineLoop+0x24c>)
 8002fa6:	481a      	ldr	r0, [pc, #104]	; (8003010 <statesMachineLoop+0x220>)
 8002fa8:	f008 ffba 	bl	800bf20 <HAL_UART_Transmit>
			state = READY;
 8002fac:	4b16      	ldr	r3, [pc, #88]	; (8003008 <statesMachineLoop+0x218>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]

        }


		break;
 8002fb2:	f000 bcc2 	b.w	800393a <statesMachineLoop+0xb4a>

	case WORKING:

		receptionFlag = false;
 8002fb6:	4b23      	ldr	r3, [pc, #140]	; (8003044 <statesMachineLoop+0x254>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]

		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8002fbc:	e0b9      	b.n	8003132 <statesMachineLoop+0x342>

			if (state==FAULT)break;
 8002fbe:	4b12      	ldr	r3, [pc, #72]	; (8003008 <statesMachineLoop+0x218>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	f000 80c5 	beq.w	8003152 <statesMachineLoop+0x362>

			if (motor1.stepReached) {
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <statesMachineLoop+0x23c>)
 8002fca:	7e5b      	ldrb	r3, [r3, #25]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <statesMachineLoop+0x1f2>
				Stop_PWM_MOTOR_1;
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4811      	ldr	r0, [pc, #68]	; (8003018 <statesMachineLoop+0x228>)
 8002fd4:	f007 faac 	bl	800a530 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002fd8:	2100      	movs	r1, #0
 8002fda:	481f      	ldr	r0, [pc, #124]	; (8003058 <statesMachineLoop+0x268>)
 8002fdc:	f007 fb9f 	bl	800a71e <HAL_TIM_IC_Stop>
 8002fe0:	e04a      	b.n	8003078 <statesMachineLoop+0x288>
			}else if (motor2.stepReached) {
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <statesMachineLoop+0x240>)
 8002fe4:	7e5b      	ldrb	r3, [r3, #25]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d03a      	beq.n	8003060 <statesMachineLoop+0x270>
				Stop_PWM_MOTOR_2;
 8002fea:	2100      	movs	r1, #0
 8002fec:	480b      	ldr	r0, [pc, #44]	; (800301c <statesMachineLoop+0x22c>)
 8002fee:	f007 fa9f 	bl	800a530 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4819      	ldr	r0, [pc, #100]	; (800305c <statesMachineLoop+0x26c>)
 8002ff6:	f007 fb92 	bl	800a71e <HAL_TIM_IC_Stop>
 8002ffa:	e03d      	b.n	8003078 <statesMachineLoop+0x288>
 8002ffc:	f3af 8000 	nop.w
 8003000:	c2f837b5 	.word	0xc2f837b5
 8003004:	bfe0aa64 	.word	0xbfe0aa64
 8003008:	24000431 	.word	0x24000431
 800300c:	08011b8c 	.word	0x08011b8c
 8003010:	240009b8 	.word	0x240009b8
 8003014:	2400057a 	.word	0x2400057a
 8003018:	240006b0 	.word	0x240006b0
 800301c:	240006fc 	.word	0x240006fc
 8003020:	24000748 	.word	0x24000748
 8003024:	58020c00 	.word	0x58020c00
 8003028:	58020800 	.word	0x58020800
 800302c:	24000350 	.word	0x24000350
 8003030:	24000398 	.word	0x24000398
 8003034:	240003e0 	.word	0x240003e0
 8003038:	24000030 	.word	0x24000030
 800303c:	08011b90 	.word	0x08011b90
 8003040:	08011b94 	.word	0x08011b94
 8003044:	2400057b 	.word	0x2400057b
 8003048:	24000432 	.word	0x24000432
 800304c:	24000480 	.word	0x24000480
 8003050:	24000435 	.word	0x24000435
 8003054:	24000436 	.word	0x24000436
 8003058:	24000580 	.word	0x24000580
 800305c:	240005cc 	.word	0x240005cc
			}else if (motor3.stepReached){
 8003060:	4bb5      	ldr	r3, [pc, #724]	; (8003338 <statesMachineLoop+0x548>)
 8003062:	7e5b      	ldrb	r3, [r3, #25]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <statesMachineLoop+0x288>
				Stop_PWM_MOTOR_3;
 8003068:	2100      	movs	r1, #0
 800306a:	48b4      	ldr	r0, [pc, #720]	; (800333c <statesMachineLoop+0x54c>)
 800306c:	f007 fa60 	bl	800a530 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8003070:	2100      	movs	r1, #0
 8003072:	48b3      	ldr	r0, [pc, #716]	; (8003340 <statesMachineLoop+0x550>)
 8003074:	f007 fb53 	bl	800a71e <HAL_TIM_IC_Stop>
			}

			motor1.omega = get_Straj(time,motor1.currentAngle,motor1.theta,arrayParams1);
 8003078:	4bb2      	ldr	r3, [pc, #712]	; (8003344 <statesMachineLoop+0x554>)
 800307a:	ed93 7b00 	vldr	d7, [r3]
 800307e:	4bb2      	ldr	r3, [pc, #712]	; (8003348 <statesMachineLoop+0x558>)
 8003080:	ed93 6b08 	vldr	d6, [r3, #32]
 8003084:	4bb0      	ldr	r3, [pc, #704]	; (8003348 <statesMachineLoop+0x558>)
 8003086:	ed93 5b00 	vldr	d5, [r3]
 800308a:	48b0      	ldr	r0, [pc, #704]	; (800334c <statesMachineLoop+0x55c>)
 800308c:	eeb0 2b45 	vmov.f64	d2, d5
 8003090:	eeb0 1b46 	vmov.f64	d1, d6
 8003094:	eeb0 0b47 	vmov.f64	d0, d7
 8003098:	f001 fb1e 	bl	80046d8 <get_Straj>
 800309c:	eeb0 7b40 	vmov.f64	d7, d0
 80030a0:	4ba9      	ldr	r3, [pc, #676]	; (8003348 <statesMachineLoop+0x558>)
 80030a2:	ed83 7b02 	vstr	d7, [r3, #8]
			motor2.omega = get_Straj(time,motor2.currentAngle,motor2.theta,arrayParams2);
 80030a6:	4ba7      	ldr	r3, [pc, #668]	; (8003344 <statesMachineLoop+0x554>)
 80030a8:	ed93 7b00 	vldr	d7, [r3]
 80030ac:	4ba8      	ldr	r3, [pc, #672]	; (8003350 <statesMachineLoop+0x560>)
 80030ae:	ed93 6b08 	vldr	d6, [r3, #32]
 80030b2:	4ba7      	ldr	r3, [pc, #668]	; (8003350 <statesMachineLoop+0x560>)
 80030b4:	ed93 5b00 	vldr	d5, [r3]
 80030b8:	48a6      	ldr	r0, [pc, #664]	; (8003354 <statesMachineLoop+0x564>)
 80030ba:	eeb0 2b45 	vmov.f64	d2, d5
 80030be:	eeb0 1b46 	vmov.f64	d1, d6
 80030c2:	eeb0 0b47 	vmov.f64	d0, d7
 80030c6:	f001 fb07 	bl	80046d8 <get_Straj>
 80030ca:	eeb0 7b40 	vmov.f64	d7, d0
 80030ce:	4ba0      	ldr	r3, [pc, #640]	; (8003350 <statesMachineLoop+0x560>)
 80030d0:	ed83 7b02 	vstr	d7, [r3, #8]
			motor3.omega = get_Straj(time,motor3.currentAngle,motor3.theta,arrayParams3);
 80030d4:	4b9b      	ldr	r3, [pc, #620]	; (8003344 <statesMachineLoop+0x554>)
 80030d6:	ed93 7b00 	vldr	d7, [r3]
 80030da:	4b97      	ldr	r3, [pc, #604]	; (8003338 <statesMachineLoop+0x548>)
 80030dc:	ed93 6b08 	vldr	d6, [r3, #32]
 80030e0:	4b95      	ldr	r3, [pc, #596]	; (8003338 <statesMachineLoop+0x548>)
 80030e2:	ed93 5b00 	vldr	d5, [r3]
 80030e6:	489c      	ldr	r0, [pc, #624]	; (8003358 <statesMachineLoop+0x568>)
 80030e8:	eeb0 2b45 	vmov.f64	d2, d5
 80030ec:	eeb0 1b46 	vmov.f64	d1, d6
 80030f0:	eeb0 0b47 	vmov.f64	d0, d7
 80030f4:	f001 faf0 	bl	80046d8 <get_Straj>
 80030f8:	eeb0 7b40 	vmov.f64	d7, d0
 80030fc:	4b8e      	ldr	r3, [pc, #568]	; (8003338 <statesMachineLoop+0x548>)
 80030fe:	ed83 7b02 	vstr	d7, [r3, #8]

			setProfilTimer();
 8003102:	f002 fe89 	bl	8005e18 <setProfilTimer>


			if(startMotors){
 8003106:	4b95      	ldr	r3, [pc, #596]	; (800335c <statesMachineLoop+0x56c>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <statesMachineLoop+0x33c>
				startMotors = false;
 800310e:	4b93      	ldr	r3, [pc, #588]	; (800335c <statesMachineLoop+0x56c>)
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
				// Activar TIMERs generacion de pwm
				Start_PWM_MOTOR_1;
 8003114:	2100      	movs	r1, #0
 8003116:	4892      	ldr	r0, [pc, #584]	; (8003360 <statesMachineLoop+0x570>)
 8003118:	f007 f8fc 	bl	800a314 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_2;
 800311c:	2100      	movs	r1, #0
 800311e:	4891      	ldr	r0, [pc, #580]	; (8003364 <statesMachineLoop+0x574>)
 8003120:	f007 f8f8 	bl	800a314 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_3;
 8003124:	2100      	movs	r1, #0
 8003126:	4885      	ldr	r0, [pc, #532]	; (800333c <statesMachineLoop+0x54c>)
 8003128:	f007 f8f4 	bl	800a314 <HAL_TIM_PWM_Start>
			}

			stopMotors = true;
 800312c:	4b8e      	ldr	r3, [pc, #568]	; (8003368 <statesMachineLoop+0x578>)
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8003132:	4b85      	ldr	r3, [pc, #532]	; (8003348 <statesMachineLoop+0x558>)
 8003134:	7e5b      	ldrb	r3, [r3, #25]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f43f af41 	beq.w	8002fbe <statesMachineLoop+0x1ce>
 800313c:	4b84      	ldr	r3, [pc, #528]	; (8003350 <statesMachineLoop+0x560>)
 800313e:	7e5b      	ldrb	r3, [r3, #25]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f43f af3c 	beq.w	8002fbe <statesMachineLoop+0x1ce>
 8003146:	4b7c      	ldr	r3, [pc, #496]	; (8003338 <statesMachineLoop+0x548>)
 8003148:	7e5b      	ldrb	r3, [r3, #25]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f43f af37 	beq.w	8002fbe <statesMachineLoop+0x1ce>
 8003150:	e000      	b.n	8003154 <statesMachineLoop+0x364>
			if (state==FAULT)break;
 8003152:	bf00      	nop
		}// End while




		if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 8003154:	4b84      	ldr	r3, [pc, #528]	; (8003368 <statesMachineLoop+0x578>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d026      	beq.n	80031aa <statesMachineLoop+0x3ba>

			startMotors = false;
 800315c:	4b7f      	ldr	r3, [pc, #508]	; (800335c <statesMachineLoop+0x56c>)
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8003162:	2100      	movs	r1, #0
 8003164:	4881      	ldr	r0, [pc, #516]	; (800336c <statesMachineLoop+0x57c>)
 8003166:	f007 fada 	bl	800a71e <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 800316a:	2100      	movs	r1, #0
 800316c:	4880      	ldr	r0, [pc, #512]	; (8003370 <statesMachineLoop+0x580>)
 800316e:	f007 fad6 	bl	800a71e <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8003172:	2100      	movs	r1, #0
 8003174:	4872      	ldr	r0, [pc, #456]	; (8003340 <statesMachineLoop+0x550>)
 8003176:	f007 fad2 	bl	800a71e <HAL_TIM_IC_Stop>

			if (motor1.stepReached) Stop_PWM_MOTOR_1;
 800317a:	4b73      	ldr	r3, [pc, #460]	; (8003348 <statesMachineLoop+0x558>)
 800317c:	7e5b      	ldrb	r3, [r3, #25]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <statesMachineLoop+0x39a>
 8003182:	2100      	movs	r1, #0
 8003184:	4876      	ldr	r0, [pc, #472]	; (8003360 <statesMachineLoop+0x570>)
 8003186:	f007 f9d3 	bl	800a530 <HAL_TIM_PWM_Stop>
			if (motor2.stepReached) Stop_PWM_MOTOR_2;
 800318a:	4b71      	ldr	r3, [pc, #452]	; (8003350 <statesMachineLoop+0x560>)
 800318c:	7e5b      	ldrb	r3, [r3, #25]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <statesMachineLoop+0x3aa>
 8003192:	2100      	movs	r1, #0
 8003194:	4873      	ldr	r0, [pc, #460]	; (8003364 <statesMachineLoop+0x574>)
 8003196:	f007 f9cb 	bl	800a530 <HAL_TIM_PWM_Stop>
			if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 800319a:	4b67      	ldr	r3, [pc, #412]	; (8003338 <statesMachineLoop+0x548>)
 800319c:	7e5b      	ldrb	r3, [r3, #25]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <statesMachineLoop+0x3ba>
 80031a2:	2100      	movs	r1, #0
 80031a4:	4865      	ldr	r0, [pc, #404]	; (800333c <statesMachineLoop+0x54c>)
 80031a6:	f007 f9c3 	bl	800a530 <HAL_TIM_PWM_Stop>
		}

		//Update coordinantes
		Pini.x = Pfin.x;
 80031aa:	4b72      	ldr	r3, [pc, #456]	; (8003374 <statesMachineLoop+0x584>)
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	4971      	ldr	r1, [pc, #452]	; (8003378 <statesMachineLoop+0x588>)
 80031b2:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y = Pfin.y;
 80031b6:	4b6f      	ldr	r3, [pc, #444]	; (8003374 <statesMachineLoop+0x584>)
 80031b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031bc:	496e      	ldr	r1, [pc, #440]	; (8003378 <statesMachineLoop+0x588>)
 80031be:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = Pfin.z;
 80031c2:	4b6c      	ldr	r3, [pc, #432]	; (8003374 <statesMachineLoop+0x584>)
 80031c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031c8:	496b      	ldr	r1, [pc, #428]	; (8003378 <statesMachineLoop+0x588>)
 80031ca:	e9c1 2304 	strd	r2, r3, [r1, #16]

		HAL_UART_Transmit(&huart3, message2, sizeof(message2), 100);
 80031ce:	2364      	movs	r3, #100	; 0x64
 80031d0:	2206      	movs	r2, #6
 80031d2:	496a      	ldr	r1, [pc, #424]	; (800337c <statesMachineLoop+0x58c>)
 80031d4:	486a      	ldr	r0, [pc, #424]	; (8003380 <statesMachineLoop+0x590>)
 80031d6:	f008 fea3 	bl	800bf20 <HAL_UART_Transmit>

		//Stop Timers tiempo
		HAL_TIM_Base_Stop_IT(&htim15);
 80031da:	486a      	ldr	r0, [pc, #424]	; (8003384 <statesMachineLoop+0x594>)
 80031dc:	f007 f80a 	bl	800a1f4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim5);
 80031e0:	4869      	ldr	r0, [pc, #420]	; (8003388 <statesMachineLoop+0x598>)
 80031e2:	f006 ff67 	bl	800a0b4 <HAL_TIM_Base_Stop>

		state = READY;
 80031e6:	4b69      	ldr	r3, [pc, #420]	; (800338c <statesMachineLoop+0x59c>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]


		break;
 80031ec:	e3c7      	b.n	800397e <statesMachineLoop+0xb8e>

	case READY:

		//HAL_UART_Transmit(&huart3,(uint8_t*)"S2\n", 4, 100);

		if (receptionFlag){
 80031ee:	4b68      	ldr	r3, [pc, #416]	; (8003390 <statesMachineLoop+0x5a0>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 83a3 	beq.w	800393e <statesMachineLoop+0xb4e>

			receptionFlag = false;
 80031f8:	4b65      	ldr	r3, [pc, #404]	; (8003390 <statesMachineLoop+0x5a0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]

			startMotors = true;
 80031fe:	4b57      	ldr	r3, [pc, #348]	; (800335c <statesMachineLoop+0x56c>)
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]

			//Start InputCapture
			HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8003204:	2100      	movs	r1, #0
 8003206:	4859      	ldr	r0, [pc, #356]	; (800336c <statesMachineLoop+0x57c>)
 8003208:	f007 fafa 	bl	800a800 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800320c:	2100      	movs	r1, #0
 800320e:	4858      	ldr	r0, [pc, #352]	; (8003370 <statesMachineLoop+0x580>)
 8003210:	f007 faf6 	bl	800a800 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8003214:	2100      	movs	r1, #0
 8003216:	484a      	ldr	r0, [pc, #296]	; (8003340 <statesMachineLoop+0x550>)
 8003218:	f007 faf2 	bl	800a800 <HAL_TIM_IC_Start_IT>

			inverseKinematic(Pfin);
 800321c:	4b55      	ldr	r3, [pc, #340]	; (8003374 <statesMachineLoop+0x584>)
 800321e:	ed93 5b00 	vldr	d5, [r3]
 8003222:	ed93 6b02 	vldr	d6, [r3, #8]
 8003226:	ed93 7b04 	vldr	d7, [r3, #16]
 800322a:	eeb0 0b45 	vmov.f64	d0, d5
 800322e:	eeb0 1b46 	vmov.f64	d1, d6
 8003232:	eeb0 2b47 	vmov.f64	d2, d7
 8003236:	f7fe fa43 	bl	80016c0 <inverseKinematic>

			update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax, arrayParams1);
 800323a:	4b43      	ldr	r3, [pc, #268]	; (8003348 <statesMachineLoop+0x558>)
 800323c:	ed93 7b08 	vldr	d7, [r3, #32]
 8003240:	4b41      	ldr	r3, [pc, #260]	; (8003348 <statesMachineLoop+0x558>)
 8003242:	ed93 1b00 	vldr	d1, [r3]
 8003246:	4b53      	ldr	r3, [pc, #332]	; (8003394 <statesMachineLoop+0x5a4>)
 8003248:	ed93 2b00 	vldr	d2, [r3]
 800324c:	4b52      	ldr	r3, [pc, #328]	; (8003398 <statesMachineLoop+0x5a8>)
 800324e:	ed93 3b00 	vldr	d3, [r3]
 8003252:	4b52      	ldr	r3, [pc, #328]	; (800339c <statesMachineLoop+0x5ac>)
 8003254:	ed93 4b00 	vldr	d4, [r3]
 8003258:	4b51      	ldr	r3, [pc, #324]	; (80033a0 <statesMachineLoop+0x5b0>)
 800325a:	ed93 5b00 	vldr	d5, [r3]
 800325e:	4b51      	ldr	r3, [pc, #324]	; (80033a4 <statesMachineLoop+0x5b4>)
 8003260:	ed93 6b00 	vldr	d6, [r3]
 8003264:	4839      	ldr	r0, [pc, #228]	; (800334c <statesMachineLoop+0x55c>)
 8003266:	eeb0 0b47 	vmov.f64	d0, d7
 800326a:	f002 f8ed 	bl	8005448 <update_ScurveTraj>
			update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax, arrayParams2);
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <statesMachineLoop+0x560>)
 8003270:	ed93 7b08 	vldr	d7, [r3, #32]
 8003274:	4b36      	ldr	r3, [pc, #216]	; (8003350 <statesMachineLoop+0x560>)
 8003276:	ed93 1b00 	vldr	d1, [r3]
 800327a:	4b46      	ldr	r3, [pc, #280]	; (8003394 <statesMachineLoop+0x5a4>)
 800327c:	ed93 2b00 	vldr	d2, [r3]
 8003280:	4b45      	ldr	r3, [pc, #276]	; (8003398 <statesMachineLoop+0x5a8>)
 8003282:	ed93 3b00 	vldr	d3, [r3]
 8003286:	4b45      	ldr	r3, [pc, #276]	; (800339c <statesMachineLoop+0x5ac>)
 8003288:	ed93 4b00 	vldr	d4, [r3]
 800328c:	4b44      	ldr	r3, [pc, #272]	; (80033a0 <statesMachineLoop+0x5b0>)
 800328e:	ed93 5b00 	vldr	d5, [r3]
 8003292:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <statesMachineLoop+0x5b4>)
 8003294:	ed93 6b00 	vldr	d6, [r3]
 8003298:	482e      	ldr	r0, [pc, #184]	; (8003354 <statesMachineLoop+0x564>)
 800329a:	eeb0 0b47 	vmov.f64	d0, d7
 800329e:	f002 f8d3 	bl	8005448 <update_ScurveTraj>
			update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax, arrayParams3);
 80032a2:	4b25      	ldr	r3, [pc, #148]	; (8003338 <statesMachineLoop+0x548>)
 80032a4:	ed93 7b08 	vldr	d7, [r3, #32]
 80032a8:	4b23      	ldr	r3, [pc, #140]	; (8003338 <statesMachineLoop+0x548>)
 80032aa:	ed93 1b00 	vldr	d1, [r3]
 80032ae:	4b39      	ldr	r3, [pc, #228]	; (8003394 <statesMachineLoop+0x5a4>)
 80032b0:	ed93 2b00 	vldr	d2, [r3]
 80032b4:	4b38      	ldr	r3, [pc, #224]	; (8003398 <statesMachineLoop+0x5a8>)
 80032b6:	ed93 3b00 	vldr	d3, [r3]
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <statesMachineLoop+0x5ac>)
 80032bc:	ed93 4b00 	vldr	d4, [r3]
 80032c0:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <statesMachineLoop+0x5b0>)
 80032c2:	ed93 5b00 	vldr	d5, [r3]
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <statesMachineLoop+0x5b4>)
 80032c8:	ed93 6b00 	vldr	d6, [r3]
 80032cc:	4822      	ldr	r0, [pc, #136]	; (8003358 <statesMachineLoop+0x568>)
 80032ce:	eeb0 0b47 	vmov.f64	d0, d7
 80032d2:	f002 f8b9 	bl	8005448 <update_ScurveTraj>

			configMotor(&motor1,1);
 80032d6:	2101      	movs	r1, #1
 80032d8:	481b      	ldr	r0, [pc, #108]	; (8003348 <statesMachineLoop+0x558>)
 80032da:	f7ff fcc9 	bl	8002c70 <configMotor>
			configMotor(&motor2,2);
 80032de:	2102      	movs	r1, #2
 80032e0:	481b      	ldr	r0, [pc, #108]	; (8003350 <statesMachineLoop+0x560>)
 80032e2:	f7ff fcc5 	bl	8002c70 <configMotor>
			configMotor(&motor3,3);
 80032e6:	2103      	movs	r1, #3
 80032e8:	4813      	ldr	r0, [pc, #76]	; (8003338 <statesMachineLoop+0x548>)
 80032ea:	f7ff fcc1 	bl	8002c70 <configMotor>

			timeFlag = false;
 80032ee:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <statesMachineLoop+0x5b8>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]

			motor1.pMotor = 0;
 80032f4:	4b14      	ldr	r3, [pc, #80]	; (8003348 <statesMachineLoop+0x558>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
			motor2.pMotor = 0;
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <statesMachineLoop+0x560>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
			motor3.pMotor = 0;
 8003300:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <statesMachineLoop+0x548>)
 8003302:	2200      	movs	r2, #0
 8003304:	641a      	str	r2, [r3, #64]	; 0x40

			motor1.stepReached = false;
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <statesMachineLoop+0x558>)
 8003308:	2200      	movs	r2, #0
 800330a:	765a      	strb	r2, [r3, #25]
			motor2.stepReached = false;
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <statesMachineLoop+0x560>)
 800330e:	2200      	movs	r2, #0
 8003310:	765a      	strb	r2, [r3, #25]
			motor3.stepReached = false;
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <statesMachineLoop+0x548>)
 8003314:	2200      	movs	r2, #0
 8003316:	765a      	strb	r2, [r3, #25]

			//Start counting time
			HAL_TIM_Base_Start(&htim5);
 8003318:	481b      	ldr	r0, [pc, #108]	; (8003388 <statesMachineLoop+0x598>)
 800331a:	f006 fe5b 	bl	8009fd4 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 800331e:	4819      	ldr	r0, [pc, #100]	; (8003384 <statesMachineLoop+0x594>)
 8003320:	f006 fef0 	bl	800a104 <HAL_TIM_Base_Start_IT>

			HAL_UART_Transmit(&huart3,(uint8_t*)"S4\n", 4, 100);
 8003324:	2364      	movs	r3, #100	; 0x64
 8003326:	2204      	movs	r2, #4
 8003328:	4920      	ldr	r1, [pc, #128]	; (80033ac <statesMachineLoop+0x5bc>)
 800332a:	4815      	ldr	r0, [pc, #84]	; (8003380 <statesMachineLoop+0x590>)
 800332c:	f008 fdf8 	bl	800bf20 <HAL_UART_Transmit>
			state = WORKING;
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <statesMachineLoop+0x59c>)
 8003332:	2202      	movs	r2, #2
 8003334:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003336:	e302      	b.n	800393e <statesMachineLoop+0xb4e>
 8003338:	240003e0 	.word	0x240003e0
 800333c:	24000748 	.word	0x24000748
 8003340:	24000618 	.word	0x24000618
 8003344:	24000428 	.word	0x24000428
 8003348:	24000350 	.word	0x24000350
 800334c:	240004b0 	.word	0x240004b0
 8003350:	24000398 	.word	0x24000398
 8003354:	240004e8 	.word	0x240004e8
 8003358:	24000520 	.word	0x24000520
 800335c:	24000433 	.word	0x24000433
 8003360:	240006b0 	.word	0x240006b0
 8003364:	240006fc 	.word	0x240006fc
 8003368:	24000434 	.word	0x24000434
 800336c:	24000580 	.word	0x24000580
 8003370:	240005cc 	.word	0x240005cc
 8003374:	24000498 	.word	0x24000498
 8003378:	24000480 	.word	0x24000480
 800337c:	24000050 	.word	0x24000050
 8003380:	240009b8 	.word	0x240009b8
 8003384:	24000794 	.word	0x24000794
 8003388:	24000664 	.word	0x24000664
 800338c:	24000431 	.word	0x24000431
 8003390:	2400057b 	.word	0x2400057b
 8003394:	24000018 	.word	0x24000018
 8003398:	24000470 	.word	0x24000470
 800339c:	24000010 	.word	0x24000010
 80033a0:	24000020 	.word	0x24000020
 80033a4:	24000008 	.word	0x24000008
 80033a8:	24000558 	.word	0x24000558
 80033ac:	08011b98 	.word	0x08011b98

	case FAULT:

		if(upperESalarm || endStopAlarmInf||faultDrivers){
 80033b0:	4b99      	ldr	r3, [pc, #612]	; (8003618 <statesMachineLoop+0x828>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <statesMachineLoop+0x5d8>
 80033b8:	4b98      	ldr	r3, [pc, #608]	; (800361c <statesMachineLoop+0x82c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <statesMachineLoop+0x5d8>
 80033c0:	4b97      	ldr	r3, [pc, #604]	; (8003620 <statesMachineLoop+0x830>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <statesMachineLoop+0x5ea>
			HAL_UART_Transmit(&huart3,(uint8_t*)"S5\n", 4, 100);
 80033c8:	2364      	movs	r3, #100	; 0x64
 80033ca:	2204      	movs	r2, #4
 80033cc:	4995      	ldr	r1, [pc, #596]	; (8003624 <statesMachineLoop+0x834>)
 80033ce:	4896      	ldr	r0, [pc, #600]	; (8003628 <statesMachineLoop+0x838>)
 80033d0:	f008 fda6 	bl	800bf20 <HAL_UART_Transmit>
			HAL_Delay(100);
 80033d4:	2064      	movs	r0, #100	; 0x64
 80033d6:	f003 f977 	bl	80066c8 <HAL_Delay>
		}
		//Establece velocidad baja (1rpm), movimiento en fault

		__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm_fault));
 80033da:	4b94      	ldr	r3, [pc, #592]	; (800362c <statesMachineLoop+0x83c>)
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80033e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033ee:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8003600 <statesMachineLoop+0x810>
 80033f2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80033f6:	4b8e      	ldr	r3, [pc, #568]	; (8003630 <statesMachineLoop+0x840>)
 80033f8:	ed93 7b00 	vldr	d7, [r3]
 80033fc:	ed9f 5b82 	vldr	d5, [pc, #520]	; 8003608 <statesMachineLoop+0x818>
 8003400:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003404:	ed9f 4b82 	vldr	d4, [pc, #520]	; 8003610 <statesMachineLoop+0x820>
 8003408:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800340c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003410:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003414:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003418:	4b86      	ldr	r3, [pc, #536]	; (8003634 <statesMachineLoop+0x844>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003420:	ee17 2a90 	vmov	r2, s15
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
 8003426:	4b81      	ldr	r3, [pc, #516]	; (800362c <statesMachineLoop+0x83c>)
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003432:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003436:	ee37 7b06 	vadd.f64	d7, d7, d6
 800343a:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8003600 <statesMachineLoop+0x810>
 800343e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003442:	4b7b      	ldr	r3, [pc, #492]	; (8003630 <statesMachineLoop+0x840>)
 8003444:	ed93 7b00 	vldr	d7, [r3]
 8003448:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 8003608 <statesMachineLoop+0x818>
 800344c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003450:	ed9f 4b6f 	vldr	d4, [pc, #444]	; 8003610 <statesMachineLoop+0x820>
 8003454:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003458:	ee26 7b07 	vmul.f64	d7, d6, d7
 800345c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003460:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003464:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003468:	ee17 2a90 	vmov	r2, s15
 800346c:	4b71      	ldr	r3, [pc, #452]	; (8003634 <statesMachineLoop+0x844>)
 800346e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm_fault));
 8003470:	4b6e      	ldr	r3, [pc, #440]	; (800362c <statesMachineLoop+0x83c>)
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800347c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003480:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003484:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 8003600 <statesMachineLoop+0x810>
 8003488:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800348c:	4b68      	ldr	r3, [pc, #416]	; (8003630 <statesMachineLoop+0x840>)
 800348e:	ed93 7b00 	vldr	d7, [r3]
 8003492:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8003608 <statesMachineLoop+0x818>
 8003496:	ee27 5b05 	vmul.f64	d5, d7, d5
 800349a:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8003610 <statesMachineLoop+0x820>
 800349e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80034a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034a6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80034aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034ae:	4b62      	ldr	r3, [pc, #392]	; (8003638 <statesMachineLoop+0x848>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034b6:	ee17 2a90 	vmov	r2, s15
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80034bc:	4b5b      	ldr	r3, [pc, #364]	; (800362c <statesMachineLoop+0x83c>)
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	ee07 3a90 	vmov	s15, r3
 80034c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80034c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80034cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034d0:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8003600 <statesMachineLoop+0x810>
 80034d4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80034d8:	4b55      	ldr	r3, [pc, #340]	; (8003630 <statesMachineLoop+0x840>)
 80034da:	ed93 7b00 	vldr	d7, [r3]
 80034de:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8003608 <statesMachineLoop+0x818>
 80034e2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80034e6:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8003610 <statesMachineLoop+0x820>
 80034ea:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80034ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80034f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034fe:	ee17 2a90 	vmov	r2, s15
 8003502:	4b4d      	ldr	r3, [pc, #308]	; (8003638 <statesMachineLoop+0x848>)
 8003504:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm_fault));
 8003506:	4b49      	ldr	r3, [pc, #292]	; (800362c <statesMachineLoop+0x83c>)
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003512:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003516:	ee37 7b06 	vadd.f64	d7, d7, d6
 800351a:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8003600 <statesMachineLoop+0x810>
 800351e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003522:	4b43      	ldr	r3, [pc, #268]	; (8003630 <statesMachineLoop+0x840>)
 8003524:	ed93 7b00 	vldr	d7, [r3]
 8003528:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8003608 <statesMachineLoop+0x818>
 800352c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003530:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8003610 <statesMachineLoop+0x820>
 8003534:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003538:	ee26 7b07 	vmul.f64	d7, d6, d7
 800353c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003540:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003544:	4b3d      	ldr	r3, [pc, #244]	; (800363c <statesMachineLoop+0x84c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800354c:	ee17 2a90 	vmov	r2, s15
 8003550:	62da      	str	r2, [r3, #44]	; 0x2c
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <statesMachineLoop+0x83c>)
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800355e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003562:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003566:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8003600 <statesMachineLoop+0x810>
 800356a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800356e:	4b30      	ldr	r3, [pc, #192]	; (8003630 <statesMachineLoop+0x840>)
 8003570:	ed93 7b00 	vldr	d7, [r3]
 8003574:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8003608 <statesMachineLoop+0x818>
 8003578:	ee27 5b05 	vmul.f64	d5, d7, d5
 800357c:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8003610 <statesMachineLoop+0x820>
 8003580:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003584:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003588:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800358c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003590:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003594:	ee17 2a90 	vmov	r2, s15
 8003598:	4b28      	ldr	r3, [pc, #160]	; (800363c <statesMachineLoop+0x84c>)
 800359a:	60da      	str	r2, [r3, #12]

		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 800359c:	4b23      	ldr	r3, [pc, #140]	; (800362c <statesMachineLoop+0x83c>)
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	ee07 3a90 	vmov	s15, r3
 80035a4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80035a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80035ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <statesMachineLoop+0x83c>)
 80035b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035b6:	ee17 2a90 	vmov	r2, s15
 80035ba:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 80035bc:	4b20      	ldr	r3, [pc, #128]	; (8003640 <statesMachineLoop+0x850>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80035c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80035cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <statesMachineLoop+0x850>)
 80035d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035d6:	ee17 2a90 	vmov	r2, s15
 80035da:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <statesMachineLoop+0x854>)
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80035e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80035ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <statesMachineLoop+0x854>)
 80035f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035f6:	ee17 2a90 	vmov	r2, s15
 80035fa:	635a      	str	r2, [r3, #52]	; 0x34

		while((upperESalarm || endStopAlarmInf) && continuar){
 80035fc:	e175      	b.n	80038ea <statesMachineLoop+0xafa>
 80035fe:	bf00      	nop
 8003600:	00000000 	.word	0x00000000
 8003604:	418e8480 	.word	0x418e8480
 8003608:	00000000 	.word	0x00000000
 800360c:	40bf4000 	.word	0x40bf4000
 8003610:	00000000 	.word	0x00000000
 8003614:	404e0000 	.word	0x404e0000
 8003618:	24000435 	.word	0x24000435
 800361c:	24000436 	.word	0x24000436
 8003620:	24000438 	.word	0x24000438
 8003624:	08011b9c 	.word	0x08011b9c
 8003628:	240009b8 	.word	0x240009b8
 800362c:	40001800 	.word	0x40001800
 8003630:	24000028 	.word	0x24000028
 8003634:	240006b0 	.word	0x240006b0
 8003638:	240006fc 	.word	0x240006fc
 800363c:	24000748 	.word	0x24000748
 8003640:	40001c00 	.word	0x40001c00
 8003644:	40002000 	.word	0x40002000


			 if (ES1i_PRESSED){
 8003648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800364c:	48bd      	ldr	r0, [pc, #756]	; (8003944 <statesMachineLoop+0xb54>)
 800364e:	f004 f8c1 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11f      	bne.n	8003698 <statesMachineLoop+0x8a8>
				 HAL_Delay(10);
 8003658:	200a      	movs	r0, #10
 800365a:	f003 f835 	bl	80066c8 <HAL_Delay>
				 if (ES1i_PRESSED){
 800365e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003662:	48b8      	ldr	r0, [pc, #736]	; (8003944 <statesMachineLoop+0xb54>)
 8003664:	f004 f8b6 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d114      	bne.n	8003698 <statesMachineLoop+0x8a8>
					 positive_Dir_MOTOR_1;
 800366e:	2200      	movs	r2, #0
 8003670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003674:	48b4      	ldr	r0, [pc, #720]	; (8003948 <statesMachineLoop+0xb58>)
 8003676:	f004 f8c5 	bl	8007804 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 800367a:	2000      	movs	r0, #0
 800367c:	f003 f824 	bl	80066c8 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 8003680:	2100      	movs	r1, #0
 8003682:	48b2      	ldr	r0, [pc, #712]	; (800394c <statesMachineLoop+0xb5c>)
 8003684:	f006 fe46 	bl	800a314 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 8003688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800368c:	f003 f81c 	bl	80066c8 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 8003690:	2100      	movs	r1, #0
 8003692:	48ae      	ldr	r0, [pc, #696]	; (800394c <statesMachineLoop+0xb5c>)
 8003694:	f006 ff4c 	bl	800a530 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES1s_PRESSED){
 8003698:	2101      	movs	r1, #1
 800369a:	48ad      	ldr	r0, [pc, #692]	; (8003950 <statesMachineLoop+0xb60>)
 800369c:	f004 f89a 	bl	80077d4 <HAL_GPIO_ReadPin>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11e      	bne.n	80036e4 <statesMachineLoop+0x8f4>
				 HAL_Delay(10);
 80036a6:	200a      	movs	r0, #10
 80036a8:	f003 f80e 	bl	80066c8 <HAL_Delay>
				 if (ES1s_PRESSED){
 80036ac:	2101      	movs	r1, #1
 80036ae:	48a8      	ldr	r0, [pc, #672]	; (8003950 <statesMachineLoop+0xb60>)
 80036b0:	f004 f890 	bl	80077d4 <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d114      	bne.n	80036e4 <statesMachineLoop+0x8f4>
					 negative_Dir_MOTOR_1;
 80036ba:	2201      	movs	r2, #1
 80036bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036c0:	48a1      	ldr	r0, [pc, #644]	; (8003948 <statesMachineLoop+0xb58>)
 80036c2:	f004 f89f 	bl	8007804 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 80036c6:	2000      	movs	r0, #0
 80036c8:	f002 fffe 	bl	80066c8 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 80036cc:	2100      	movs	r1, #0
 80036ce:	489f      	ldr	r0, [pc, #636]	; (800394c <statesMachineLoop+0xb5c>)
 80036d0:	f006 fe20 	bl	800a314 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 80036d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036d8:	f002 fff6 	bl	80066c8 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 80036dc:	2100      	movs	r1, #0
 80036de:	489b      	ldr	r0, [pc, #620]	; (800394c <statesMachineLoop+0xb5c>)
 80036e0:	f006 ff26 	bl	800a530 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2i_PRESSED){
 80036e4:	2108      	movs	r1, #8
 80036e6:	489a      	ldr	r0, [pc, #616]	; (8003950 <statesMachineLoop+0xb60>)
 80036e8:	f004 f874 	bl	80077d4 <HAL_GPIO_ReadPin>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11e      	bne.n	8003730 <statesMachineLoop+0x940>
				 HAL_Delay(30);
 80036f2:	201e      	movs	r0, #30
 80036f4:	f002 ffe8 	bl	80066c8 <HAL_Delay>
				 if (ES2i_PRESSED){
 80036f8:	2108      	movs	r1, #8
 80036fa:	4895      	ldr	r0, [pc, #596]	; (8003950 <statesMachineLoop+0xb60>)
 80036fc:	f004 f86a 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d114      	bne.n	8003730 <statesMachineLoop+0x940>
					 positive_Dir_MOTOR_2;
 8003706:	2200      	movs	r2, #0
 8003708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800370c:	488e      	ldr	r0, [pc, #568]	; (8003948 <statesMachineLoop+0xb58>)
 800370e:	f004 f879 	bl	8007804 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 8003712:	2000      	movs	r0, #0
 8003714:	f002 ffd8 	bl	80066c8 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 8003718:	2100      	movs	r1, #0
 800371a:	488e      	ldr	r0, [pc, #568]	; (8003954 <statesMachineLoop+0xb64>)
 800371c:	f006 fdfa 	bl	800a314 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 8003720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003724:	f002 ffd0 	bl	80066c8 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8003728:	2100      	movs	r1, #0
 800372a:	488a      	ldr	r0, [pc, #552]	; (8003954 <statesMachineLoop+0xb64>)
 800372c:	f006 ff00 	bl	800a530 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2s_PRESSED){
 8003730:	2104      	movs	r1, #4
 8003732:	4887      	ldr	r0, [pc, #540]	; (8003950 <statesMachineLoop+0xb60>)
 8003734:	f004 f84e 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d11e      	bne.n	800377c <statesMachineLoop+0x98c>
				 HAL_Delay(10);
 800373e:	200a      	movs	r0, #10
 8003740:	f002 ffc2 	bl	80066c8 <HAL_Delay>
				 if (ES2s_PRESSED){
 8003744:	2104      	movs	r1, #4
 8003746:	4882      	ldr	r0, [pc, #520]	; (8003950 <statesMachineLoop+0xb60>)
 8003748:	f004 f844 	bl	80077d4 <HAL_GPIO_ReadPin>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d114      	bne.n	800377c <statesMachineLoop+0x98c>
					 negative_Dir_MOTOR_2;
 8003752:	2201      	movs	r2, #1
 8003754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003758:	487b      	ldr	r0, [pc, #492]	; (8003948 <statesMachineLoop+0xb58>)
 800375a:	f004 f853 	bl	8007804 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 800375e:	2000      	movs	r0, #0
 8003760:	f002 ffb2 	bl	80066c8 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 8003764:	2100      	movs	r1, #0
 8003766:	487b      	ldr	r0, [pc, #492]	; (8003954 <statesMachineLoop+0xb64>)
 8003768:	f006 fdd4 	bl	800a314 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 800376c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003770:	f002 ffaa 	bl	80066c8 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8003774:	2100      	movs	r1, #0
 8003776:	4877      	ldr	r0, [pc, #476]	; (8003954 <statesMachineLoop+0xb64>)
 8003778:	f006 feda 	bl	800a530 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3i_PRESSED){
 800377c:	2120      	movs	r1, #32
 800377e:	4876      	ldr	r0, [pc, #472]	; (8003958 <statesMachineLoop+0xb68>)
 8003780:	f004 f828 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d11e      	bne.n	80037c8 <statesMachineLoop+0x9d8>
				 HAL_Delay(10);
 800378a:	200a      	movs	r0, #10
 800378c:	f002 ff9c 	bl	80066c8 <HAL_Delay>
				 if (ES3i_PRESSED){
 8003790:	2120      	movs	r1, #32
 8003792:	4871      	ldr	r0, [pc, #452]	; (8003958 <statesMachineLoop+0xb68>)
 8003794:	f004 f81e 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d114      	bne.n	80037c8 <statesMachineLoop+0x9d8>
					 positive_Dir_MOTOR_3;
 800379e:	2200      	movs	r2, #0
 80037a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037a4:	4868      	ldr	r0, [pc, #416]	; (8003948 <statesMachineLoop+0xb58>)
 80037a6:	f004 f82d 	bl	8007804 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 80037aa:	2000      	movs	r0, #0
 80037ac:	f002 ff8c 	bl	80066c8 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 80037b0:	2100      	movs	r1, #0
 80037b2:	486a      	ldr	r0, [pc, #424]	; (800395c <statesMachineLoop+0xb6c>)
 80037b4:	f006 fdae 	bl	800a314 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 80037b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037bc:	f002 ff84 	bl	80066c8 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 80037c0:	2100      	movs	r1, #0
 80037c2:	4866      	ldr	r0, [pc, #408]	; (800395c <statesMachineLoop+0xb6c>)
 80037c4:	f006 feb4 	bl	800a530 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3s_PRESSED){
 80037c8:	2110      	movs	r1, #16
 80037ca:	4863      	ldr	r0, [pc, #396]	; (8003958 <statesMachineLoop+0xb68>)
 80037cc:	f004 f802 	bl	80077d4 <HAL_GPIO_ReadPin>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11e      	bne.n	8003814 <statesMachineLoop+0xa24>
				 HAL_Delay(10);
 80037d6:	200a      	movs	r0, #10
 80037d8:	f002 ff76 	bl	80066c8 <HAL_Delay>
				 if (ES3s_PRESSED){
 80037dc:	2110      	movs	r1, #16
 80037de:	485e      	ldr	r0, [pc, #376]	; (8003958 <statesMachineLoop+0xb68>)
 80037e0:	f003 fff8 	bl	80077d4 <HAL_GPIO_ReadPin>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d114      	bne.n	8003814 <statesMachineLoop+0xa24>
					 negative_Dir_MOTOR_3;
 80037ea:	2201      	movs	r2, #1
 80037ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037f0:	4855      	ldr	r0, [pc, #340]	; (8003948 <statesMachineLoop+0xb58>)
 80037f2:	f004 f807 	bl	8007804 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 80037f6:	2000      	movs	r0, #0
 80037f8:	f002 ff66 	bl	80066c8 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 80037fc:	2100      	movs	r1, #0
 80037fe:	4857      	ldr	r0, [pc, #348]	; (800395c <statesMachineLoop+0xb6c>)
 8003800:	f006 fd88 	bl	800a314 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 8003804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003808:	f002 ff5e 	bl	80066c8 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 800380c:	2100      	movs	r1, #0
 800380e:	4853      	ldr	r0, [pc, #332]	; (800395c <statesMachineLoop+0xb6c>)
 8003810:	f006 fe8e 	bl	800a530 <HAL_TIM_PWM_Stop>
				 }
			 }

			 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 8003814:	2101      	movs	r1, #1
 8003816:	484e      	ldr	r0, [pc, #312]	; (8003950 <statesMachineLoop+0xb60>)
 8003818:	f003 ffdc 	bl	80077d4 <HAL_GPIO_ReadPin>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d063      	beq.n	80038ea <statesMachineLoop+0xafa>
 8003822:	2104      	movs	r1, #4
 8003824:	484a      	ldr	r0, [pc, #296]	; (8003950 <statesMachineLoop+0xb60>)
 8003826:	f003 ffd5 	bl	80077d4 <HAL_GPIO_ReadPin>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d05c      	beq.n	80038ea <statesMachineLoop+0xafa>
 8003830:	2110      	movs	r1, #16
 8003832:	4849      	ldr	r0, [pc, #292]	; (8003958 <statesMachineLoop+0xb68>)
 8003834:	f003 ffce 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d055      	beq.n	80038ea <statesMachineLoop+0xafa>
 800383e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003842:	4840      	ldr	r0, [pc, #256]	; (8003944 <statesMachineLoop+0xb54>)
 8003844:	f003 ffc6 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d04d      	beq.n	80038ea <statesMachineLoop+0xafa>
 800384e:	2108      	movs	r1, #8
 8003850:	483f      	ldr	r0, [pc, #252]	; (8003950 <statesMachineLoop+0xb60>)
 8003852:	f003 ffbf 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d046      	beq.n	80038ea <statesMachineLoop+0xafa>
 800385c:	2120      	movs	r1, #32
 800385e:	483e      	ldr	r0, [pc, #248]	; (8003958 <statesMachineLoop+0xb68>)
 8003860:	f003 ffb8 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d03f      	beq.n	80038ea <statesMachineLoop+0xafa>
				 HAL_Delay(10);
 800386a:	200a      	movs	r0, #10
 800386c:	f002 ff2c 	bl	80066c8 <HAL_Delay>
				 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 8003870:	2101      	movs	r1, #1
 8003872:	4837      	ldr	r0, [pc, #220]	; (8003950 <statesMachineLoop+0xb60>)
 8003874:	f003 ffae 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d035      	beq.n	80038ea <statesMachineLoop+0xafa>
 800387e:	2104      	movs	r1, #4
 8003880:	4833      	ldr	r0, [pc, #204]	; (8003950 <statesMachineLoop+0xb60>)
 8003882:	f003 ffa7 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02e      	beq.n	80038ea <statesMachineLoop+0xafa>
 800388c:	2110      	movs	r1, #16
 800388e:	4832      	ldr	r0, [pc, #200]	; (8003958 <statesMachineLoop+0xb68>)
 8003890:	f003 ffa0 	bl	80077d4 <HAL_GPIO_ReadPin>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d027      	beq.n	80038ea <statesMachineLoop+0xafa>
 800389a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800389e:	4829      	ldr	r0, [pc, #164]	; (8003944 <statesMachineLoop+0xb54>)
 80038a0:	f003 ff98 	bl	80077d4 <HAL_GPIO_ReadPin>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d01f      	beq.n	80038ea <statesMachineLoop+0xafa>
 80038aa:	2108      	movs	r1, #8
 80038ac:	4828      	ldr	r0, [pc, #160]	; (8003950 <statesMachineLoop+0xb60>)
 80038ae:	f003 ff91 	bl	80077d4 <HAL_GPIO_ReadPin>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d018      	beq.n	80038ea <statesMachineLoop+0xafa>
 80038b8:	2120      	movs	r1, #32
 80038ba:	4827      	ldr	r0, [pc, #156]	; (8003958 <statesMachineLoop+0xb68>)
 80038bc:	f003 ff8a 	bl	80077d4 <HAL_GPIO_ReadPin>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d011      	beq.n	80038ea <statesMachineLoop+0xafa>

					 upperESalarm = false;
 80038c6:	4b26      	ldr	r3, [pc, #152]	; (8003960 <statesMachineLoop+0xb70>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
					 endStopAlarmInf = false;
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <statesMachineLoop+0xb74>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
					 continuar = false;
 80038d2:	4b25      	ldr	r3, [pc, #148]	; (8003968 <statesMachineLoop+0xb78>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart3,(uint8_t*)"S2\n", 13, 100);
 80038d8:	2364      	movs	r3, #100	; 0x64
 80038da:	220d      	movs	r2, #13
 80038dc:	4923      	ldr	r1, [pc, #140]	; (800396c <statesMachineLoop+0xb7c>)
 80038de:	4824      	ldr	r0, [pc, #144]	; (8003970 <statesMachineLoop+0xb80>)
 80038e0:	f008 fb1e 	bl	800bf20 <HAL_UART_Transmit>
					 state = HOME;
 80038e4:	4b23      	ldr	r3, [pc, #140]	; (8003974 <statesMachineLoop+0xb84>)
 80038e6:	2203      	movs	r2, #3
 80038e8:	701a      	strb	r2, [r3, #0]
		while((upperESalarm || endStopAlarmInf) && continuar){
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <statesMachineLoop+0xb70>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d103      	bne.n	80038fa <statesMachineLoop+0xb0a>
 80038f2:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <statesMachineLoop+0xb74>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d014      	beq.n	8003924 <statesMachineLoop+0xb34>
 80038fa:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <statesMachineLoop+0xb78>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f47f aea2 	bne.w	8003648 <statesMachineLoop+0x858>

			 }

		}//End while

		while(faultDrivers && continuar){
 8003904:	e00e      	b.n	8003924 <statesMachineLoop+0xb34>

			//relayAbierto;
			//HAL_Delay(100);
			//relayCerrado;

			faultDrivers = false;
 8003906:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <statesMachineLoop+0xb88>)
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
			continuar = false;
 800390c:	4b16      	ldr	r3, [pc, #88]	; (8003968 <statesMachineLoop+0xb78>)
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart3,(uint8_t*)"S2\n", 13, 100);
 8003912:	2364      	movs	r3, #100	; 0x64
 8003914:	220d      	movs	r2, #13
 8003916:	4915      	ldr	r1, [pc, #84]	; (800396c <statesMachineLoop+0xb7c>)
 8003918:	4815      	ldr	r0, [pc, #84]	; (8003970 <statesMachineLoop+0xb80>)
 800391a:	f008 fb01 	bl	800bf20 <HAL_UART_Transmit>
			state = READY;
 800391e:	4b15      	ldr	r3, [pc, #84]	; (8003974 <statesMachineLoop+0xb84>)
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
		while(faultDrivers && continuar){
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <statesMachineLoop+0xb88>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d027      	beq.n	800397c <statesMachineLoop+0xb8c>
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <statesMachineLoop+0xb78>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e8      	bne.n	8003906 <statesMachineLoop+0xb16>

		}//End while
		break;
 8003934:	e022      	b.n	800397c <statesMachineLoop+0xb8c>

	default:break;
 8003936:	bf00      	nop
 8003938:	e021      	b.n	800397e <statesMachineLoop+0xb8e>
		break;
 800393a:	bf00      	nop
 800393c:	e01f      	b.n	800397e <statesMachineLoop+0xb8e>
		break;
 800393e:	bf00      	nop
 8003940:	e01d      	b.n	800397e <statesMachineLoop+0xb8e>
 8003942:	bf00      	nop
 8003944:	58021800 	.word	0x58021800
 8003948:	58020800 	.word	0x58020800
 800394c:	240006b0 	.word	0x240006b0
 8003950:	58021000 	.word	0x58021000
 8003954:	240006fc 	.word	0x240006fc
 8003958:	58020400 	.word	0x58020400
 800395c:	24000748 	.word	0x24000748
 8003960:	24000435 	.word	0x24000435
 8003964:	24000436 	.word	0x24000436
 8003968:	24000437 	.word	0x24000437
 800396c:	08011b90 	.word	0x08011b90
 8003970:	240009b8 	.word	0x240009b8
 8003974:	24000431 	.word	0x24000431
 8003978:	24000438 	.word	0x24000438
		break;
 800397c:	bf00      	nop
	}
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop

08003984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398a:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <HAL_MspInit+0x44>)
 800398c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003990:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <HAL_MspInit+0x44>)
 8003992:	f043 0302 	orr.w	r3, r3, #2
 8003996:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_MspInit+0x44>)
 800399c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80039a8:	2005      	movs	r0, #5
 80039aa:	f002 ffb1 	bl	8006910 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 80039ae:	2200      	movs	r2, #0
 80039b0:	2101      	movs	r1, #1
 80039b2:	2051      	movs	r0, #81	; 0x51
 80039b4:	f002 ffb7 	bl	8006926 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80039b8:	2051      	movs	r0, #81	; 0x51
 80039ba:	f002 ffce 	bl	800695a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	58024400 	.word	0x58024400

080039cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039da:	b480      	push	{r7}
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039de:	e7fe      	b.n	80039de <HardFault_Handler+0x4>

080039e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039e4:	e7fe      	b.n	80039e4 <MemManage_Handler+0x4>

080039e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039e6:	b480      	push	{r7}
 80039e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ea:	e7fe      	b.n	80039ea <BusFault_Handler+0x4>

080039ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039f0:	e7fe      	b.n	80039f0 <UsageFault_Handler+0x4>

080039f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039f2:	b480      	push	{r7}
 80039f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a20:	f002 fe32 	bl	8006688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f003 ff02 	bl	8007836 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8003a3a:	2004      	movs	r0, #4
 8003a3c:	f003 fefb 	bl	8007836 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003a48:	2008      	movs	r0, #8
 8003a4a:	f003 fef4 	bl	8007836 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003a56:	2010      	movs	r0, #16
 8003a58:	f003 feed 	bl	8007836 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003a64:	2020      	movs	r0, #32
 8003a66:	f003 fee6 	bl	8007836 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver1_Pin);
 8003a6a:	2080      	movs	r0, #128	; 0x80
 8003a6c:	f003 fee3 	bl	8007836 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <TIM2_IRQHandler+0x10>)
 8003a7a:	f007 f811 	bl	800aaa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	24000580 	.word	0x24000580

08003a88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <TIM3_IRQHandler+0x10>)
 8003a8e:	f007 f807 	bl	800aaa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	240005cc 	.word	0x240005cc

08003a9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <TIM4_IRQHandler+0x10>)
 8003aa2:	f006 fffd 	bl	800aaa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	24000618 	.word	0x24000618

08003ab0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <USART3_IRQHandler+0x10>)
 8003ab6:	f008 fb1f 	bl	800c0f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	240009b8 	.word	0x240009b8

08003ac4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003ac8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003acc:	f003 feb3 	bl	8007836 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003ad0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ad4:	f003 feaf 	bl	8007836 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver2_Pin);
 8003ad8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003adc:	f003 feab 	bl	8007836 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver3_Pin);
 8003ae0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003ae4:	f003 fea7 	bl	8007836 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}

08003aec <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003b00:	4802      	ldr	r0, [pc, #8]	; (8003b0c <TIM15_IRQHandler+0x10>)
 8003b02:	f006 ffcd 	bl	800aaa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	24000794 	.word	0x24000794

08003b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
	return 1;
 8003b14:	2301      	movs	r3, #1
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <_kill>:

int _kill(int pid, int sig)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b2a:	f00a fd07 	bl	800e53c <__errno>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2216      	movs	r2, #22
 8003b32:	601a      	str	r2, [r3, #0]
	return -1;
 8003b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <_exit>:

void _exit (int status)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b48:	f04f 31ff 	mov.w	r1, #4294967295
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ffe7 	bl	8003b20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b52:	e7fe      	b.n	8003b52 <_exit+0x12>

08003b54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e00a      	b.n	8003b7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b66:	f3af 8000 	nop.w
 8003b6a:	4601      	mov	r1, r0
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	60ba      	str	r2, [r7, #8]
 8003b72:	b2ca      	uxtb	r2, r1
 8003b74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	dbf0      	blt.n	8003b66 <_read+0x12>
	}

return len;
 8003b84:	687b      	ldr	r3, [r7, #4]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b086      	sub	sp, #24
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e009      	b.n	8003bb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	60ba      	str	r2, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	dbf1      	blt.n	8003ba0 <_write+0x12>
	}
	return len;
 8003bbc:	687b      	ldr	r3, [r7, #4]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_close>:

int _close(int file)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
	return -1;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bee:	605a      	str	r2, [r3, #4]
	return 0;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <_isatty>:

int _isatty(int file)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
	return 1;
 8003c06:	2301      	movs	r3, #1
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
	return 0;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <_sbrk+0x50>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <_sbrk+0x16>
		heap_end = &end;
 8003c40:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <_sbrk+0x50>)
 8003c42:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <_sbrk+0x54>)
 8003c44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <_sbrk+0x50>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <_sbrk+0x50>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	466a      	mov	r2, sp
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d907      	bls.n	8003c6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003c5a:	f00a fc6f 	bl	800e53c <__errno>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	220c      	movs	r2, #12
 8003c62:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003c64:	f04f 33ff 	mov.w	r3, #4294967295
 8003c68:	e006      	b.n	8003c78 <_sbrk+0x48>
	}

	heap_end += incr;
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <_sbrk+0x50>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	4a03      	ldr	r2, [pc, #12]	; (8003c80 <_sbrk+0x50>)
 8003c74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003c76:	68fb      	ldr	r3, [r7, #12]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	2400057c 	.word	0x2400057c
 8003c84:	24000a60 	.word	0x24000a60

08003c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c8c:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <SystemInit+0xac>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <SystemInit+0xac>)
 8003c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c9c:	4b26      	ldr	r3, [pc, #152]	; (8003d38 <SystemInit+0xb0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a25      	ldr	r2, [pc, #148]	; (8003d38 <SystemInit+0xb0>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ca8:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <SystemInit+0xb0>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003cae:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <SystemInit+0xb0>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4921      	ldr	r1, [pc, #132]	; (8003d38 <SystemInit+0xb0>)
 8003cb4:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <SystemInit+0xb4>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003cba:	4b1f      	ldr	r3, [pc, #124]	; (8003d38 <SystemInit+0xb0>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <SystemInit+0xb0>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <SystemInit+0xb0>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <SystemInit+0xb0>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003cd2:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <SystemInit+0xb0>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003cd8:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <SystemInit+0xb0>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003cde:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <SystemInit+0xb0>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003ce4:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <SystemInit+0xb0>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <SystemInit+0xb0>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <SystemInit+0xb0>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <SystemInit+0xb0>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <SystemInit+0xb0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <SystemInit+0xb0>)
 8003d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <SystemInit+0xb0>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <SystemInit+0xb8>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <SystemInit+0xbc>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d1a:	d202      	bcs.n	8003d22 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <SystemInit+0xc0>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <SystemInit+0xac>)
 8003d24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d28:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d40:	5c001000 	.word	0x5c001000
 8003d44:	ffff0000 	.word	0xffff0000
 8003d48:	51008108 	.word	0x51008108

08003d4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08c      	sub	sp, #48	; 0x30
 8003d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d52:	f107 0320 	add.w	r3, r7, #32
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	609a      	str	r2, [r3, #8]
 8003d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d6c:	1d3b      	adds	r3, r7, #4
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d78:	4b2b      	ldr	r3, [pc, #172]	; (8003e28 <MX_TIM2_Init+0xdc>)
 8003d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <MX_TIM2_Init+0xdc>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d86:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <MX_TIM2_Init+0xdc>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003d8c:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <MX_TIM2_Init+0xdc>)
 8003d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <MX_TIM2_Init+0xdc>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <MX_TIM2_Init+0xdc>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003da0:	4821      	ldr	r0, [pc, #132]	; (8003e28 <MX_TIM2_Init+0xdc>)
 8003da2:	f006 f8bf 	bl	8009f24 <HAL_TIM_Base_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003dac:	f7fe ff58 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003db6:	f107 0320 	add.w	r3, r7, #32
 8003dba:	4619      	mov	r1, r3
 8003dbc:	481a      	ldr	r0, [pc, #104]	; (8003e28 <MX_TIM2_Init+0xdc>)
 8003dbe:	f007 f93f 	bl	800b040 <HAL_TIM_ConfigClockSource>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003dc8:	f7fe ff4a 	bl	8002c60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003dcc:	4816      	ldr	r0, [pc, #88]	; (8003e28 <MX_TIM2_Init+0xdc>)
 8003dce:	f006 fc45 	bl	800a65c <HAL_TIM_IC_Init>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003dd8:	f7fe ff42 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	4619      	mov	r1, r3
 8003dea:	480f      	ldr	r0, [pc, #60]	; (8003e28 <MX_TIM2_Init+0xdc>)
 8003dec:	f007 ff9c 	bl	800bd28 <HAL_TIMEx_MasterConfigSynchronization>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003df6:	f7fe ff33 	bl	8002c60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e0a:	1d3b      	adds	r3, r7, #4
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4805      	ldr	r0, [pc, #20]	; (8003e28 <MX_TIM2_Init+0xdc>)
 8003e12:	f006 ff64 	bl	800acde <HAL_TIM_IC_ConfigChannel>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003e1c:	f7fe ff20 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e20:	bf00      	nop
 8003e22:	3730      	adds	r7, #48	; 0x30
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	24000580 	.word	0x24000580

08003e2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08c      	sub	sp, #48	; 0x30
 8003e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e32:	f107 0320 	add.w	r3, r7, #32
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	609a      	str	r2, [r3, #8]
 8003e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e40:	f107 0314 	add.w	r3, r7, #20
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <MX_TIM3_Init+0xdc>)
 8003e5a:	4a2c      	ldr	r2, [pc, #176]	; (8003f0c <MX_TIM3_Init+0xe0>)
 8003e5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e5e:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <MX_TIM3_Init+0xdc>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e64:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <MX_TIM3_Init+0xdc>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e6a:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <MX_TIM3_Init+0xdc>)
 8003e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e72:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <MX_TIM3_Init+0xdc>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e78:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <MX_TIM3_Init+0xdc>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e7e:	4822      	ldr	r0, [pc, #136]	; (8003f08 <MX_TIM3_Init+0xdc>)
 8003e80:	f006 f850 	bl	8009f24 <HAL_TIM_Base_Init>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8003e8a:	f7fe fee9 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e92:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e94:	f107 0320 	add.w	r3, r7, #32
 8003e98:	4619      	mov	r1, r3
 8003e9a:	481b      	ldr	r0, [pc, #108]	; (8003f08 <MX_TIM3_Init+0xdc>)
 8003e9c:	f007 f8d0 	bl	800b040 <HAL_TIM_ConfigClockSource>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003ea6:	f7fe fedb 	bl	8002c60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003eaa:	4817      	ldr	r0, [pc, #92]	; (8003f08 <MX_TIM3_Init+0xdc>)
 8003eac:	f006 fbd6 	bl	800a65c <HAL_TIM_IC_Init>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003eb6:	f7fe fed3 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ec2:	f107 0314 	add.w	r3, r7, #20
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	480f      	ldr	r0, [pc, #60]	; (8003f08 <MX_TIM3_Init+0xdc>)
 8003eca:	f007 ff2d 	bl	800bd28 <HAL_TIMEx_MasterConfigSynchronization>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8003ed4:	f7fe fec4 	bl	8002c60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003edc:	2301      	movs	r3, #1
 8003ede:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003ee8:	1d3b      	adds	r3, r7, #4
 8003eea:	2200      	movs	r2, #0
 8003eec:	4619      	mov	r1, r3
 8003eee:	4806      	ldr	r0, [pc, #24]	; (8003f08 <MX_TIM3_Init+0xdc>)
 8003ef0:	f006 fef5 	bl	800acde <HAL_TIM_IC_ConfigChannel>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003efa:	f7fe feb1 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003efe:	bf00      	nop
 8003f00:	3730      	adds	r7, #48	; 0x30
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	240005cc 	.word	0x240005cc
 8003f0c:	40000400 	.word	0x40000400

08003f10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08c      	sub	sp, #48	; 0x30
 8003f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f16:	f107 0320 	add.w	r3, r7, #32
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	609a      	str	r2, [r3, #8]
 8003f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f24:	f107 0314 	add.w	r3, r7, #20
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003f30:	1d3b      	adds	r3, r7, #4
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	605a      	str	r2, [r3, #4]
 8003f38:	609a      	str	r2, [r3, #8]
 8003f3a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <MX_TIM4_Init+0xdc>)
 8003f3e:	4a2c      	ldr	r2, [pc, #176]	; (8003ff0 <MX_TIM4_Init+0xe0>)
 8003f40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f42:	4b2a      	ldr	r3, [pc, #168]	; (8003fec <MX_TIM4_Init+0xdc>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f48:	4b28      	ldr	r3, [pc, #160]	; (8003fec <MX_TIM4_Init+0xdc>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f4e:	4b27      	ldr	r3, [pc, #156]	; (8003fec <MX_TIM4_Init+0xdc>)
 8003f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f56:	4b25      	ldr	r3, [pc, #148]	; (8003fec <MX_TIM4_Init+0xdc>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5c:	4b23      	ldr	r3, [pc, #140]	; (8003fec <MX_TIM4_Init+0xdc>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003f62:	4822      	ldr	r0, [pc, #136]	; (8003fec <MX_TIM4_Init+0xdc>)
 8003f64:	f005 ffde 	bl	8009f24 <HAL_TIM_Base_Init>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8003f6e:	f7fe fe77 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f76:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003f78:	f107 0320 	add.w	r3, r7, #32
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	481b      	ldr	r0, [pc, #108]	; (8003fec <MX_TIM4_Init+0xdc>)
 8003f80:	f007 f85e 	bl	800b040 <HAL_TIM_ConfigClockSource>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003f8a:	f7fe fe69 	bl	8002c60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003f8e:	4817      	ldr	r0, [pc, #92]	; (8003fec <MX_TIM4_Init+0xdc>)
 8003f90:	f006 fb64 	bl	800a65c <HAL_TIM_IC_Init>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003f9a:	f7fe fe61 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003fa6:	f107 0314 	add.w	r3, r7, #20
 8003faa:	4619      	mov	r1, r3
 8003fac:	480f      	ldr	r0, [pc, #60]	; (8003fec <MX_TIM4_Init+0xdc>)
 8003fae:	f007 febb 	bl	800bd28 <HAL_TIMEx_MasterConfigSynchronization>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8003fb8:	f7fe fe52 	bl	8002c60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	2200      	movs	r2, #0
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4806      	ldr	r0, [pc, #24]	; (8003fec <MX_TIM4_Init+0xdc>)
 8003fd4:	f006 fe83 	bl	800acde <HAL_TIM_IC_ConfigChannel>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8003fde:	f7fe fe3f 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003fe2:	bf00      	nop
 8003fe4:	3730      	adds	r7, #48	; 0x30
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	24000618 	.word	0x24000618
 8003ff0:	40000800 	.word	0x40000800

08003ff4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ffa:	f107 0310 	add.w	r3, r7, #16
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <MX_TIM5_Init+0x94>)
 8004014:	4a1d      	ldr	r2, [pc, #116]	; (800408c <MX_TIM5_Init+0x98>)
 8004016:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <MX_TIM5_Init+0x94>)
 800401a:	2200      	movs	r2, #0
 800401c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800401e:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <MX_TIM5_Init+0x94>)
 8004020:	2200      	movs	r2, #0
 8004022:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004024:	4b18      	ldr	r3, [pc, #96]	; (8004088 <MX_TIM5_Init+0x94>)
 8004026:	f04f 32ff 	mov.w	r2, #4294967295
 800402a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800402c:	4b16      	ldr	r3, [pc, #88]	; (8004088 <MX_TIM5_Init+0x94>)
 800402e:	2200      	movs	r2, #0
 8004030:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <MX_TIM5_Init+0x94>)
 8004034:	2200      	movs	r2, #0
 8004036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004038:	4813      	ldr	r0, [pc, #76]	; (8004088 <MX_TIM5_Init+0x94>)
 800403a:	f005 ff73 	bl	8009f24 <HAL_TIM_Base_Init>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004044:	f7fe fe0c 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800404c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800404e:	f107 0310 	add.w	r3, r7, #16
 8004052:	4619      	mov	r1, r3
 8004054:	480c      	ldr	r0, [pc, #48]	; (8004088 <MX_TIM5_Init+0x94>)
 8004056:	f006 fff3 	bl	800b040 <HAL_TIM_ConfigClockSource>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004060:	f7fe fdfe 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004064:	2300      	movs	r3, #0
 8004066:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800406c:	1d3b      	adds	r3, r7, #4
 800406e:	4619      	mov	r1, r3
 8004070:	4805      	ldr	r0, [pc, #20]	; (8004088 <MX_TIM5_Init+0x94>)
 8004072:	f007 fe59 	bl	800bd28 <HAL_TIMEx_MasterConfigSynchronization>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800407c:	f7fe fdf0 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004080:	bf00      	nop
 8004082:	3720      	adds	r7, #32
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	24000664 	.word	0x24000664
 800408c:	40000c00 	.word	0x40000c00

08004090 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08c      	sub	sp, #48	; 0x30
 8004094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004096:	f107 0320 	add.w	r3, r7, #32
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	609a      	str	r2, [r3, #8]
 80040a2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040a4:	1d3b      	adds	r3, r7, #4
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	605a      	str	r2, [r3, #4]
 80040ac:	609a      	str	r2, [r3, #8]
 80040ae:	60da      	str	r2, [r3, #12]
 80040b0:	611a      	str	r2, [r3, #16]
 80040b2:	615a      	str	r2, [r3, #20]
 80040b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80040b6:	4b25      	ldr	r3, [pc, #148]	; (800414c <MX_TIM12_Init+0xbc>)
 80040b8:	4a25      	ldr	r2, [pc, #148]	; (8004150 <MX_TIM12_Init+0xc0>)
 80040ba:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 80040bc:	4b23      	ldr	r3, [pc, #140]	; (800414c <MX_TIM12_Init+0xbc>)
 80040be:	223f      	movs	r2, #63	; 0x3f
 80040c0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c2:	4b22      	ldr	r3, [pc, #136]	; (800414c <MX_TIM12_Init+0xbc>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80040c8:	4b20      	ldr	r3, [pc, #128]	; (800414c <MX_TIM12_Init+0xbc>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ce:	4b1f      	ldr	r3, [pc, #124]	; (800414c <MX_TIM12_Init+0xbc>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <MX_TIM12_Init+0xbc>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80040da:	481c      	ldr	r0, [pc, #112]	; (800414c <MX_TIM12_Init+0xbc>)
 80040dc:	f005 ff22 	bl	8009f24 <HAL_TIM_Base_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80040e6:	f7fe fdbb 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80040f0:	f107 0320 	add.w	r3, r7, #32
 80040f4:	4619      	mov	r1, r3
 80040f6:	4815      	ldr	r0, [pc, #84]	; (800414c <MX_TIM12_Init+0xbc>)
 80040f8:	f006 ffa2 	bl	800b040 <HAL_TIM_ConfigClockSource>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8004102:	f7fe fdad 	bl	8002c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004106:	4811      	ldr	r0, [pc, #68]	; (800414c <MX_TIM12_Init+0xbc>)
 8004108:	f006 f8a3 	bl	800a252 <HAL_TIM_PWM_Init>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8004112:	f7fe fda5 	bl	8002c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004116:	2360      	movs	r3, #96	; 0x60
 8004118:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	2200      	movs	r2, #0
 800412a:	4619      	mov	r1, r3
 800412c:	4807      	ldr	r0, [pc, #28]	; (800414c <MX_TIM12_Init+0xbc>)
 800412e:	f006 fe73 	bl	800ae18 <HAL_TIM_PWM_ConfigChannel>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8004138:	f7fe fd92 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800413c:	4803      	ldr	r0, [pc, #12]	; (800414c <MX_TIM12_Init+0xbc>)
 800413e:	f000 fa3d 	bl	80045bc <HAL_TIM_MspPostInit>

}
 8004142:	bf00      	nop
 8004144:	3730      	adds	r7, #48	; 0x30
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	240006b0 	.word	0x240006b0
 8004150:	40001800 	.word	0x40001800

08004154 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	611a      	str	r2, [r3, #16]
 8004168:	615a      	str	r2, [r3, #20]
 800416a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800416c:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <MX_TIM13_Init+0x90>)
 800416e:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <MX_TIM13_Init+0x94>)
 8004170:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64-1;
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <MX_TIM13_Init+0x90>)
 8004174:	223f      	movs	r2, #63	; 0x3f
 8004176:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004178:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <MX_TIM13_Init+0x90>)
 800417a:	2200      	movs	r2, #0
 800417c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 800417e:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <MX_TIM13_Init+0x90>)
 8004180:	2200      	movs	r2, #0
 8004182:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004184:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <MX_TIM13_Init+0x90>)
 8004186:	2200      	movs	r2, #0
 8004188:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800418a:	4b16      	ldr	r3, [pc, #88]	; (80041e4 <MX_TIM13_Init+0x90>)
 800418c:	2200      	movs	r2, #0
 800418e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004190:	4814      	ldr	r0, [pc, #80]	; (80041e4 <MX_TIM13_Init+0x90>)
 8004192:	f005 fec7 	bl	8009f24 <HAL_TIM_Base_Init>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 800419c:	f7fe fd60 	bl	8002c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80041a0:	4810      	ldr	r0, [pc, #64]	; (80041e4 <MX_TIM13_Init+0x90>)
 80041a2:	f006 f856 	bl	800a252 <HAL_TIM_PWM_Init>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 80041ac:	f7fe fd58 	bl	8002c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041b0:	2360      	movs	r3, #96	; 0x60
 80041b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041c0:	1d3b      	adds	r3, r7, #4
 80041c2:	2200      	movs	r2, #0
 80041c4:	4619      	mov	r1, r3
 80041c6:	4807      	ldr	r0, [pc, #28]	; (80041e4 <MX_TIM13_Init+0x90>)
 80041c8:	f006 fe26 	bl	800ae18 <HAL_TIM_PWM_ConfigChannel>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 80041d2:	f7fe fd45 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80041d6:	4803      	ldr	r0, [pc, #12]	; (80041e4 <MX_TIM13_Init+0x90>)
 80041d8:	f000 f9f0 	bl	80045bc <HAL_TIM_MspPostInit>

}
 80041dc:	bf00      	nop
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	240006fc 	.word	0x240006fc
 80041e8:	40001c00 	.word	0x40001c00

080041ec <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	611a      	str	r2, [r3, #16]
 8004200:	615a      	str	r2, [r3, #20]
 8004202:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <MX_TIM14_Init+0x90>)
 8004206:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <MX_TIM14_Init+0x94>)
 8004208:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 800420a:	4b1c      	ldr	r3, [pc, #112]	; (800427c <MX_TIM14_Init+0x90>)
 800420c:	223f      	movs	r2, #63	; 0x3f
 800420e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004210:	4b1a      	ldr	r3, [pc, #104]	; (800427c <MX_TIM14_Init+0x90>)
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8004216:	4b19      	ldr	r3, [pc, #100]	; (800427c <MX_TIM14_Init+0x90>)
 8004218:	2200      	movs	r2, #0
 800421a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <MX_TIM14_Init+0x90>)
 800421e:	2200      	movs	r2, #0
 8004220:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004222:	4b16      	ldr	r3, [pc, #88]	; (800427c <MX_TIM14_Init+0x90>)
 8004224:	2200      	movs	r2, #0
 8004226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004228:	4814      	ldr	r0, [pc, #80]	; (800427c <MX_TIM14_Init+0x90>)
 800422a:	f005 fe7b 	bl	8009f24 <HAL_TIM_Base_Init>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8004234:	f7fe fd14 	bl	8002c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004238:	4810      	ldr	r0, [pc, #64]	; (800427c <MX_TIM14_Init+0x90>)
 800423a:	f006 f80a 	bl	800a252 <HAL_TIM_PWM_Init>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8004244:	f7fe fd0c 	bl	8002c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004248:	2360      	movs	r3, #96	; 0x60
 800424a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	2200      	movs	r2, #0
 800425c:	4619      	mov	r1, r3
 800425e:	4807      	ldr	r0, [pc, #28]	; (800427c <MX_TIM14_Init+0x90>)
 8004260:	f006 fdda 	bl	800ae18 <HAL_TIM_PWM_ConfigChannel>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 800426a:	f7fe fcf9 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800426e:	4803      	ldr	r0, [pc, #12]	; (800427c <MX_TIM14_Init+0x90>)
 8004270:	f000 f9a4 	bl	80045bc <HAL_TIM_MspPostInit>

}
 8004274:	bf00      	nop
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	24000748 	.word	0x24000748
 8004280:	40002000 	.word	0x40002000

08004284 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800428a:	f107 0310 	add.w	r3, r7, #16
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	605a      	str	r2, [r3, #4]
 8004294:	609a      	str	r2, [r3, #8]
 8004296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004298:	1d3b      	adds	r3, r7, #4
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80042a2:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <MX_TIM15_Init+0x9c>)
 80042a4:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <MX_TIM15_Init+0xa0>)
 80042a6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80042a8:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <MX_TIM15_Init+0x9c>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ae:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <MX_TIM15_Init+0x9c>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 80042b4:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <MX_TIM15_Init+0x9c>)
 80042b6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80042ba:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042bc:	4b18      	ldr	r3, [pc, #96]	; (8004320 <MX_TIM15_Init+0x9c>)
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <MX_TIM15_Init+0x9c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042c8:	4b15      	ldr	r3, [pc, #84]	; (8004320 <MX_TIM15_Init+0x9c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80042ce:	4814      	ldr	r0, [pc, #80]	; (8004320 <MX_TIM15_Init+0x9c>)
 80042d0:	f005 fe28 	bl	8009f24 <HAL_TIM_Base_Init>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80042da:	f7fe fcc1 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	4619      	mov	r1, r3
 80042ea:	480d      	ldr	r0, [pc, #52]	; (8004320 <MX_TIM15_Init+0x9c>)
 80042ec:	f006 fea8 	bl	800b040 <HAL_TIM_ConfigClockSource>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80042f6:	f7fe fcb3 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4806      	ldr	r0, [pc, #24]	; (8004320 <MX_TIM15_Init+0x9c>)
 8004308:	f007 fd0e 	bl	800bd28 <HAL_TIMEx_MasterConfigSynchronization>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8004312:	f7fe fca5 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004316:	bf00      	nop
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	24000794 	.word	0x24000794
 8004324:	40014000 	.word	0x40014000

08004328 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b092      	sub	sp, #72	; 0x48
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d136      	bne.n	80043b8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800434a:	4b92      	ldr	r3, [pc, #584]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800434c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004350:	4a90      	ldr	r2, [pc, #576]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800435a:	4b8e      	ldr	r3, [pc, #568]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800435c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	633b      	str	r3, [r7, #48]	; 0x30
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004368:	4b8a      	ldr	r3, [pc, #552]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800436a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800436e:	4a89      	ldr	r2, [pc, #548]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004378:	4b86      	ldr	r3, [pc, #536]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800437a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = stepFeedback1_Pin;
 8004386:	2301      	movs	r3, #1
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438a:	2302      	movs	r3, #2
 800438c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	2300      	movs	r3, #0
 8004394:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004396:	2301      	movs	r3, #1
 8004398:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback1_GPIO_Port, &GPIO_InitStruct);
 800439a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800439e:	4619      	mov	r1, r3
 80043a0:	487d      	ldr	r0, [pc, #500]	; (8004598 <HAL_TIM_Base_MspInit+0x270>)
 80043a2:	f003 f867 	bl	8007474 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80043a6:	2200      	movs	r2, #0
 80043a8:	2101      	movs	r1, #1
 80043aa:	201c      	movs	r0, #28
 80043ac:	f002 fabb 	bl	8006926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043b0:	201c      	movs	r0, #28
 80043b2:	f002 fad2 	bl	800695a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80043b6:	e0e8      	b.n	800458a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a77      	ldr	r2, [pc, #476]	; (800459c <HAL_TIM_Base_MspInit+0x274>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d136      	bne.n	8004430 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043c2:	4b74      	ldr	r3, [pc, #464]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80043c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043c8:	4a72      	ldr	r2, [pc, #456]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80043ca:	f043 0302 	orr.w	r3, r3, #2
 80043ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043d2:	4b70      	ldr	r3, [pc, #448]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80043d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e0:	4b6c      	ldr	r3, [pc, #432]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80043e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043e6:	4a6b      	ldr	r2, [pc, #428]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043f0:	4b68      	ldr	r3, [pc, #416]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80043f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = stepFeedback2_Pin;
 80043fe:	2340      	movs	r3, #64	; 0x40
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004402:	2302      	movs	r3, #2
 8004404:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004406:	2300      	movs	r3, #0
 8004408:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440a:	2300      	movs	r3, #0
 800440c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800440e:	2302      	movs	r3, #2
 8004410:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback2_GPIO_Port, &GPIO_InitStruct);
 8004412:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004416:	4619      	mov	r1, r3
 8004418:	485f      	ldr	r0, [pc, #380]	; (8004598 <HAL_TIM_Base_MspInit+0x270>)
 800441a:	f003 f82b 	bl	8007474 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800441e:	2200      	movs	r2, #0
 8004420:	2101      	movs	r1, #1
 8004422:	201d      	movs	r0, #29
 8004424:	f002 fa7f 	bl	8006926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004428:	201d      	movs	r0, #29
 800442a:	f002 fa96 	bl	800695a <HAL_NVIC_EnableIRQ>
}
 800442e:	e0ac      	b.n	800458a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5a      	ldr	r2, [pc, #360]	; (80045a0 <HAL_TIM_Base_MspInit+0x278>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d137      	bne.n	80044aa <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800443a:	4b56      	ldr	r3, [pc, #344]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800443c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004440:	4a54      	ldr	r2, [pc, #336]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 8004442:	f043 0304 	orr.w	r3, r3, #4
 8004446:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800444a:	4b52      	ldr	r3, [pc, #328]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800444c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	623b      	str	r3, [r7, #32]
 8004456:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004458:	4b4e      	ldr	r3, [pc, #312]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800445a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800445e:	4a4d      	ldr	r2, [pc, #308]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 8004460:	f043 0308 	orr.w	r3, r3, #8
 8004464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004468:	4b4a      	ldr	r3, [pc, #296]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800446a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = stepFeedback3_Pin;
 8004476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800447a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447c:	2302      	movs	r3, #2
 800447e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	2300      	movs	r3, #0
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004484:	2300      	movs	r3, #0
 8004486:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004488:	2302      	movs	r3, #2
 800448a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback3_GPIO_Port, &GPIO_InitStruct);
 800448c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004490:	4619      	mov	r1, r3
 8004492:	4844      	ldr	r0, [pc, #272]	; (80045a4 <HAL_TIM_Base_MspInit+0x27c>)
 8004494:	f002 ffee 	bl	8007474 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004498:	2200      	movs	r2, #0
 800449a:	2101      	movs	r1, #1
 800449c:	201e      	movs	r0, #30
 800449e:	f002 fa42 	bl	8006926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80044a2:	201e      	movs	r0, #30
 80044a4:	f002 fa59 	bl	800695a <HAL_NVIC_EnableIRQ>
}
 80044a8:	e06f      	b.n	800458a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a3e      	ldr	r2, [pc, #248]	; (80045a8 <HAL_TIM_Base_MspInit+0x280>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10f      	bne.n	80044d4 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80044b4:	4b37      	ldr	r3, [pc, #220]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80044b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044ba:	4a36      	ldr	r2, [pc, #216]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80044bc:	f043 0308 	orr.w	r3, r3, #8
 80044c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044c4:	4b33      	ldr	r3, [pc, #204]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80044c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	69bb      	ldr	r3, [r7, #24]
}
 80044d2:	e05a      	b.n	800458a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a34      	ldr	r2, [pc, #208]	; (80045ac <HAL_TIM_Base_MspInit+0x284>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d10f      	bne.n	80044fe <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80044de:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80044e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044e4:	4a2b      	ldr	r2, [pc, #172]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80044e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044ee:	4b29      	ldr	r3, [pc, #164]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 80044f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	697b      	ldr	r3, [r7, #20]
}
 80044fc:	e045      	b.n	800458a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2b      	ldr	r2, [pc, #172]	; (80045b0 <HAL_TIM_Base_MspInit+0x288>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d10f      	bne.n	8004528 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004508:	4b22      	ldr	r3, [pc, #136]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800450a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800450e:	4a21      	ldr	r2, [pc, #132]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 8004510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004514:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004518:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800451a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]
}
 8004526:	e030      	b.n	800458a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a21      	ldr	r2, [pc, #132]	; (80045b4 <HAL_TIM_Base_MspInit+0x28c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d10f      	bne.n	8004552 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004532:	4b18      	ldr	r3, [pc, #96]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 8004534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004538:	4a16      	ldr	r2, [pc, #88]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004542:	4b14      	ldr	r3, [pc, #80]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 8004544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	68fb      	ldr	r3, [r7, #12]
}
 8004550:	e01b      	b.n	800458a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <HAL_TIM_Base_MspInit+0x290>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d116      	bne.n	800458a <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800455c:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800455e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004562:	4a0c      	ldr	r2, [pc, #48]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_TIM_Base_MspInit+0x26c>)
 800456e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 800457a:	2200      	movs	r2, #0
 800457c:	2101      	movs	r1, #1
 800457e:	2074      	movs	r0, #116	; 0x74
 8004580:	f002 f9d1 	bl	8006926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004584:	2074      	movs	r0, #116	; 0x74
 8004586:	f002 f9e8 	bl	800695a <HAL_NVIC_EnableIRQ>
}
 800458a:	bf00      	nop
 800458c:	3748      	adds	r7, #72	; 0x48
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	58024400 	.word	0x58024400
 8004598:	58020000 	.word	0x58020000
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800
 80045a4:	58020c00 	.word	0x58020c00
 80045a8:	40000c00 	.word	0x40000c00
 80045ac:	40001800 	.word	0x40001800
 80045b0:	40001c00 	.word	0x40001c00
 80045b4:	40002000 	.word	0x40002000
 80045b8:	40014000 	.word	0x40014000

080045bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c4:	f107 0314 	add.w	r3, r7, #20
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a39      	ldr	r2, [pc, #228]	; (80046c0 <HAL_TIM_MspPostInit+0x104>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d120      	bne.n	8004620 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045de:	4b39      	ldr	r3, [pc, #228]	; (80046c4 <HAL_TIM_MspPostInit+0x108>)
 80045e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e4:	4a37      	ldr	r2, [pc, #220]	; (80046c4 <HAL_TIM_MspPostInit+0x108>)
 80045e6:	f043 0302 	orr.w	r3, r3, #2
 80045ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045ee:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <HAL_TIM_MspPostInit+0x108>)
 80045f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 80045fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004602:	2302      	movs	r3, #2
 8004604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460a:	2300      	movs	r3, #0
 800460c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800460e:	2302      	movs	r3, #2
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8004612:	f107 0314 	add.w	r3, r7, #20
 8004616:	4619      	mov	r1, r3
 8004618:	482b      	ldr	r0, [pc, #172]	; (80046c8 <HAL_TIM_MspPostInit+0x10c>)
 800461a:	f002 ff2b 	bl	8007474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800461e:	e04a      	b.n	80046b6 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a29      	ldr	r2, [pc, #164]	; (80046cc <HAL_TIM_MspPostInit+0x110>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d120      	bne.n	800466c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800462a:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <HAL_TIM_MspPostInit+0x108>)
 800462c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004630:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <HAL_TIM_MspPostInit+0x108>)
 8004632:	f043 0320 	orr.w	r3, r3, #32
 8004636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800463a:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <HAL_TIM_MspPostInit+0x108>)
 800463c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8004648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800464c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464e:	2302      	movs	r3, #2
 8004650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004656:	2300      	movs	r3, #0
 8004658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800465a:	2309      	movs	r3, #9
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 800465e:	f107 0314 	add.w	r3, r7, #20
 8004662:	4619      	mov	r1, r3
 8004664:	481a      	ldr	r0, [pc, #104]	; (80046d0 <HAL_TIM_MspPostInit+0x114>)
 8004666:	f002 ff05 	bl	8007474 <HAL_GPIO_Init>
}
 800466a:	e024      	b.n	80046b6 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <HAL_TIM_MspPostInit+0x118>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d11f      	bne.n	80046b6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004676:	4b13      	ldr	r3, [pc, #76]	; (80046c4 <HAL_TIM_MspPostInit+0x108>)
 8004678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800467c:	4a11      	ldr	r2, [pc, #68]	; (80046c4 <HAL_TIM_MspPostInit+0x108>)
 800467e:	f043 0320 	orr.w	r3, r3, #32
 8004682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004686:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_TIM_MspPostInit+0x108>)
 8004688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8004694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469a:	2302      	movs	r3, #2
 800469c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a2:	2300      	movs	r3, #0
 80046a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80046a6:	2309      	movs	r3, #9
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 80046aa:	f107 0314 	add.w	r3, r7, #20
 80046ae:	4619      	mov	r1, r3
 80046b0:	4807      	ldr	r0, [pc, #28]	; (80046d0 <HAL_TIM_MspPostInit+0x114>)
 80046b2:	f002 fedf 	bl	8007474 <HAL_GPIO_Init>
}
 80046b6:	bf00      	nop
 80046b8:	3728      	adds	r7, #40	; 0x28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40001800 	.word	0x40001800
 80046c4:	58024400 	.word	0x58024400
 80046c8:	58020400 	.word	0x58020400
 80046cc:	40001c00 	.word	0x40001c00
 80046d0:	58021400 	.word	0x58021400
 80046d4:	40002000 	.word	0x40002000

080046d8 <get_Straj>:
double vlim;
double T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
double qi,qf;


double get_Straj(double t,double _qi, double _qf ,double *params){
 80046d8:	b580      	push	{r7, lr}
 80046da:	ed2d 8b06 	vpush	{d8-d10}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	ed87 0b06 	vstr	d0, [r7, #24]
 80046e6:	ed87 1b04 	vstr	d1, [r7, #16]
 80046ea:	ed87 2b02 	vstr	d2, [r7, #8]
 80046ee:	6078      	str	r0, [r7, #4]

	Tj1 = params[0];
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	495f      	ldr	r1, [pc, #380]	; (8004874 <get_Straj+0x19c>)
 80046f8:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004702:	495d      	ldr	r1, [pc, #372]	; (8004878 <get_Straj+0x1a0>)
 8004704:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800470e:	495b      	ldr	r1, [pc, #364]	; (800487c <get_Straj+0x1a4>)
 8004710:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800471a:	4959      	ldr	r1, [pc, #356]	; (8004880 <get_Straj+0x1a8>)
 800471c:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004726:	4957      	ldr	r1, [pc, #348]	; (8004884 <get_Straj+0x1ac>)
 8004728:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004732:	4955      	ldr	r1, [pc, #340]	; (8004888 <get_Straj+0x1b0>)
 8004734:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800473e:	4953      	ldr	r1, [pc, #332]	; (800488c <get_Straj+0x1b4>)
 8004740:	e9c1 2300 	strd	r2, r3, [r1]

	qi=_qi;
 8004744:	4952      	ldr	r1, [pc, #328]	; (8004890 <get_Straj+0x1b8>)
 8004746:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800474a:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 800474e:	4951      	ldr	r1, [pc, #324]	; (8004894 <get_Straj+0x1bc>)
 8004750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004754:	e9c1 2300 	strd	r2, r3, [r1]

    if (qf < qi){
 8004758:	4b4e      	ldr	r3, [pc, #312]	; (8004894 <get_Straj+0x1bc>)
 800475a:	ed93 6b00 	vldr	d6, [r3]
 800475e:	4b4c      	ldr	r3, [pc, #304]	; (8004890 <get_Straj+0x1b8>)
 8004760:	ed93 7b00 	vldr	d7, [r3]
 8004764:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476c:	f140 80ac 	bpl.w	80048c8 <get_Straj+0x1f0>

    flagInv = true;
 8004770:	4b49      	ldr	r3, [pc, #292]	; (8004898 <get_Straj+0x1c0>)
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 8004776:	4b46      	ldr	r3, [pc, #280]	; (8004890 <get_Straj+0x1b8>)
 8004778:	ed93 7b00 	vldr	d7, [r3]
 800477c:	eeb1 7b47 	vneg.f64	d7, d7
 8004780:	4b43      	ldr	r3, [pc, #268]	; (8004890 <get_Straj+0x1b8>)
 8004782:	ed83 7b00 	vstr	d7, [r3]
    qf = -qf;
 8004786:	4b43      	ldr	r3, [pc, #268]	; (8004894 <get_Straj+0x1bc>)
 8004788:	ed93 7b00 	vldr	d7, [r3]
 800478c:	eeb1 7b47 	vneg.f64	d7, d7
 8004790:	4b40      	ldr	r3, [pc, #256]	; (8004894 <get_Straj+0x1bc>)
 8004792:	ed83 7b00 	vstr	d7, [r3]
    vi = -vi;
 8004796:	4b41      	ldr	r3, [pc, #260]	; (800489c <get_Straj+0x1c4>)
 8004798:	ed93 7b00 	vldr	d7, [r3]
 800479c:	eeb1 7b47 	vneg.f64	d7, d7
 80047a0:	4b3e      	ldr	r3, [pc, #248]	; (800489c <get_Straj+0x1c4>)
 80047a2:	ed83 7b00 	vstr	d7, [r3]
    vf = -vf;
 80047a6:	4b3e      	ldr	r3, [pc, #248]	; (80048a0 <get_Straj+0x1c8>)
 80047a8:	ed93 7b00 	vldr	d7, [r3]
 80047ac:	eeb1 7b47 	vneg.f64	d7, d7
 80047b0:	4b3b      	ldr	r3, [pc, #236]	; (80048a0 <get_Straj+0x1c8>)
 80047b2:	ed83 7b00 	vstr	d7, [r3]

    vmax = -vmin;
 80047b6:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <get_Straj+0x1cc>)
 80047b8:	ed93 7b00 	vldr	d7, [r3]
 80047bc:	eeb1 7b47 	vneg.f64	d7, d7
 80047c0:	4b39      	ldr	r3, [pc, #228]	; (80048a8 <get_Straj+0x1d0>)
 80047c2:	ed83 7b00 	vstr	d7, [r3]
    vmin = -vmax;
 80047c6:	4b38      	ldr	r3, [pc, #224]	; (80048a8 <get_Straj+0x1d0>)
 80047c8:	ed93 7b00 	vldr	d7, [r3]
 80047cc:	eeb1 7b47 	vneg.f64	d7, d7
 80047d0:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <get_Straj+0x1cc>)
 80047d2:	ed83 7b00 	vstr	d7, [r3]
    amax = -amin;
 80047d6:	4b35      	ldr	r3, [pc, #212]	; (80048ac <get_Straj+0x1d4>)
 80047d8:	ed93 7b00 	vldr	d7, [r3]
 80047dc:	eeb1 7b47 	vneg.f64	d7, d7
 80047e0:	4b33      	ldr	r3, [pc, #204]	; (80048b0 <get_Straj+0x1d8>)
 80047e2:	ed83 7b00 	vstr	d7, [r3]
    amin = -amax;
 80047e6:	4b32      	ldr	r3, [pc, #200]	; (80048b0 <get_Straj+0x1d8>)
 80047e8:	ed93 7b00 	vldr	d7, [r3]
 80047ec:	eeb1 7b47 	vneg.f64	d7, d7
 80047f0:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <get_Straj+0x1d4>)
 80047f2:	ed83 7b00 	vstr	d7, [r3]
    jmax = -jmin;
 80047f6:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <get_Straj+0x1dc>)
 80047f8:	ed93 7b00 	vldr	d7, [r3]
 80047fc:	eeb1 7b47 	vneg.f64	d7, d7
 8004800:	4b2d      	ldr	r3, [pc, #180]	; (80048b8 <get_Straj+0x1e0>)
 8004802:	ed83 7b00 	vstr	d7, [r3]
    jmin = -jmax;
 8004806:	4b2c      	ldr	r3, [pc, #176]	; (80048b8 <get_Straj+0x1e0>)
 8004808:	ed93 7b00 	vldr	d7, [r3]
 800480c:	eeb1 7b47 	vneg.f64	d7, d7
 8004810:	4b28      	ldr	r3, [pc, #160]	; (80048b4 <get_Straj+0x1dc>)
 8004812:	ed83 7b00 	vstr	d7, [r3]

    alima = jmax*Tj1;
 8004816:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <get_Straj+0x1e0>)
 8004818:	ed93 6b00 	vldr	d6, [r3]
 800481c:	4b15      	ldr	r3, [pc, #84]	; (8004874 <get_Straj+0x19c>)
 800481e:	ed93 7b00 	vldr	d7, [r3]
 8004822:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004826:	4b25      	ldr	r3, [pc, #148]	; (80048bc <get_Straj+0x1e4>)
 8004828:	ed83 7b00 	vstr	d7, [r3]
    alimd = -jmax*Tj2;
 800482c:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <get_Straj+0x1e0>)
 800482e:	ed93 7b00 	vldr	d7, [r3]
 8004832:	eeb1 6b47 	vneg.f64	d6, d7
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <get_Straj+0x1a0>)
 8004838:	ed93 7b00 	vldr	d7, [r3]
 800483c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004840:	4b1f      	ldr	r3, [pc, #124]	; (80048c0 <get_Straj+0x1e8>)
 8004842:	ed83 7b00 	vstr	d7, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <get_Straj+0x1a8>)
 8004848:	ed93 6b00 	vldr	d6, [r3]
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <get_Straj+0x19c>)
 800484e:	ed93 7b00 	vldr	d7, [r3]
 8004852:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004856:	4b19      	ldr	r3, [pc, #100]	; (80048bc <get_Straj+0x1e4>)
 8004858:	ed93 7b00 	vldr	d7, [r3]
 800485c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <get_Straj+0x1c4>)
 8004862:	ed93 7b00 	vldr	d7, [r3]
 8004866:	ee36 7b07 	vadd.f64	d7, d6, d7
 800486a:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <get_Straj+0x1ec>)
 800486c:	ed83 7b00 	vstr	d7, [r3]
 8004870:	e06f      	b.n	8004952 <get_Straj+0x27a>
 8004872:	bf00      	nop
 8004874:	24000868 	.word	0x24000868
 8004878:	24000870 	.word	0x24000870
 800487c:	24000878 	.word	0x24000878
 8004880:	24000850 	.word	0x24000850
 8004884:	24000858 	.word	0x24000858
 8004888:	24000860 	.word	0x24000860
 800488c:	24000848 	.word	0x24000848
 8004890:	24000888 	.word	0x24000888
 8004894:	24000890 	.word	0x24000890
 8004898:	24000828 	.word	0x24000828
 800489c:	24000018 	.word	0x24000018
 80048a0:	24000470 	.word	0x24000470
 80048a4:	24000468 	.word	0x24000468
 80048a8:	24000010 	.word	0x24000010
 80048ac:	24000478 	.word	0x24000478
 80048b0:	24000020 	.word	0x24000020
 80048b4:	24000460 	.word	0x24000460
 80048b8:	24000008 	.word	0x24000008
 80048bc:	24000830 	.word	0x24000830
 80048c0:	24000838 	.word	0x24000838
 80048c4:	24000840 	.word	0x24000840

    }else{
        jmin = -jmax;
 80048c8:	4bbc      	ldr	r3, [pc, #752]	; (8004bbc <get_Straj+0x4e4>)
 80048ca:	ed93 7b00 	vldr	d7, [r3]
 80048ce:	eeb1 7b47 	vneg.f64	d7, d7
 80048d2:	4bbb      	ldr	r3, [pc, #748]	; (8004bc0 <get_Straj+0x4e8>)
 80048d4:	ed83 7b00 	vstr	d7, [r3]
        amin = -amax;
 80048d8:	4bba      	ldr	r3, [pc, #744]	; (8004bc4 <get_Straj+0x4ec>)
 80048da:	ed93 7b00 	vldr	d7, [r3]
 80048de:	eeb1 7b47 	vneg.f64	d7, d7
 80048e2:	4bb9      	ldr	r3, [pc, #740]	; (8004bc8 <get_Straj+0x4f0>)
 80048e4:	ed83 7b00 	vstr	d7, [r3]
        vmin = -vmax;
 80048e8:	4bb8      	ldr	r3, [pc, #736]	; (8004bcc <get_Straj+0x4f4>)
 80048ea:	ed93 7b00 	vldr	d7, [r3]
 80048ee:	eeb1 7b47 	vneg.f64	d7, d7
 80048f2:	4bb7      	ldr	r3, [pc, #732]	; (8004bd0 <get_Straj+0x4f8>)
 80048f4:	ed83 7b00 	vstr	d7, [r3]

        alima = jmax*Tj1;
 80048f8:	4bb0      	ldr	r3, [pc, #704]	; (8004bbc <get_Straj+0x4e4>)
 80048fa:	ed93 6b00 	vldr	d6, [r3]
 80048fe:	4bb5      	ldr	r3, [pc, #724]	; (8004bd4 <get_Straj+0x4fc>)
 8004900:	ed93 7b00 	vldr	d7, [r3]
 8004904:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004908:	4bb3      	ldr	r3, [pc, #716]	; (8004bd8 <get_Straj+0x500>)
 800490a:	ed83 7b00 	vstr	d7, [r3]
        alimd = -jmax*Tj2;
 800490e:	4bab      	ldr	r3, [pc, #684]	; (8004bbc <get_Straj+0x4e4>)
 8004910:	ed93 7b00 	vldr	d7, [r3]
 8004914:	eeb1 6b47 	vneg.f64	d6, d7
 8004918:	4bb0      	ldr	r3, [pc, #704]	; (8004bdc <get_Straj+0x504>)
 800491a:	ed93 7b00 	vldr	d7, [r3]
 800491e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004922:	4baf      	ldr	r3, [pc, #700]	; (8004be0 <get_Straj+0x508>)
 8004924:	ed83 7b00 	vstr	d7, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 8004928:	4bae      	ldr	r3, [pc, #696]	; (8004be4 <get_Straj+0x50c>)
 800492a:	ed93 6b00 	vldr	d6, [r3]
 800492e:	4ba9      	ldr	r3, [pc, #676]	; (8004bd4 <get_Straj+0x4fc>)
 8004930:	ed93 7b00 	vldr	d7, [r3]
 8004934:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004938:	4ba7      	ldr	r3, [pc, #668]	; (8004bd8 <get_Straj+0x500>)
 800493a:	ed93 7b00 	vldr	d7, [r3]
 800493e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004942:	4ba9      	ldr	r3, [pc, #676]	; (8004be8 <get_Straj+0x510>)
 8004944:	ed93 7b00 	vldr	d7, [r3]
 8004948:	ee36 7b07 	vadd.f64	d7, d6, d7
 800494c:	4ba7      	ldr	r3, [pc, #668]	; (8004bec <get_Straj+0x514>)
 800494e:	ed83 7b00 	vstr	d7, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 8004952:	ed97 7b06 	vldr	d7, [r7, #24]
 8004956:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800495a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495e:	db7e      	blt.n	8004a5e <get_Straj+0x386>
 8004960:	4b9c      	ldr	r3, [pc, #624]	; (8004bd4 <get_Straj+0x4fc>)
 8004962:	ed93 7b00 	vldr	d7, [r3]
 8004966:	ed97 6b06 	vldr	d6, [r7, #24]
 800496a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800496e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004972:	d874      	bhi.n	8004a5e <get_Straj+0x386>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 8004974:	4b9c      	ldr	r3, [pc, #624]	; (8004be8 <get_Straj+0x510>)
 8004976:	ed93 6b00 	vldr	d6, [r3]
 800497a:	ed97 7b06 	vldr	d7, [r7, #24]
 800497e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004982:	4b9b      	ldr	r3, [pc, #620]	; (8004bf0 <get_Straj+0x518>)
 8004984:	ed93 7b00 	vldr	d7, [r3]
 8004988:	ee36 8b07 	vadd.f64	d8, d6, d7
 800498c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004990:	ed97 0b06 	vldr	d0, [r7, #24]
 8004994:	f00c fca0 	bl	80112d8 <pow>
 8004998:	eeb0 6b40 	vmov.f64	d6, d0
 800499c:	4b87      	ldr	r3, [pc, #540]	; (8004bbc <get_Straj+0x4e4>)
 800499e:	ed93 7b00 	vldr	d7, [r3]
 80049a2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80049a6:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80049aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80049ae:	ee38 7b07 	vadd.f64	d7, d8, d7
 80049b2:	4b90      	ldr	r3, [pc, #576]	; (8004bf4 <get_Straj+0x51c>)
 80049b4:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+jmax*pow(t,2)/2;
 80049b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80049bc:	ed97 0b06 	vldr	d0, [r7, #24]
 80049c0:	f00c fc8a 	bl	80112d8 <pow>
 80049c4:	eeb0 6b40 	vmov.f64	d6, d0
 80049c8:	4b7c      	ldr	r3, [pc, #496]	; (8004bbc <get_Straj+0x4e4>)
 80049ca:	ed93 7b00 	vldr	d7, [r3]
 80049ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80049d6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80049da:	4b83      	ldr	r3, [pc, #524]	; (8004be8 <get_Straj+0x510>)
 80049dc:	ed93 7b00 	vldr	d7, [r3]
 80049e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049e4:	4b84      	ldr	r3, [pc, #528]	; (8004bf8 <get_Straj+0x520>)
 80049e6:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*t;
 80049ea:	4b74      	ldr	r3, [pc, #464]	; (8004bbc <get_Straj+0x4e4>)
 80049ec:	ed93 6b00 	vldr	d6, [r3]
 80049f0:	ed97 7b06 	vldr	d7, [r7, #24]
 80049f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049f8:	4b80      	ldr	r3, [pc, #512]	; (8004bfc <get_Straj+0x524>)
 80049fa:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 80049fe:	4b6f      	ldr	r3, [pc, #444]	; (8004bbc <get_Straj+0x4e4>)
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	497e      	ldr	r1, [pc, #504]	; (8004c00 <get_Straj+0x528>)
 8004a06:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004a0a:	4b7e      	ldr	r3, [pc, #504]	; (8004c04 <get_Straj+0x52c>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 84f9 	beq.w	8005406 <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004a14:	4b77      	ldr	r3, [pc, #476]	; (8004bf4 <get_Straj+0x51c>)
 8004a16:	ed93 7b00 	vldr	d7, [r3]
 8004a1a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a1e:	4b75      	ldr	r3, [pc, #468]	; (8004bf4 <get_Straj+0x51c>)
 8004a20:	ed83 7b00 	vstr	d7, [r3]
 8004a24:	4b74      	ldr	r3, [pc, #464]	; (8004bf8 <get_Straj+0x520>)
 8004a26:	ed93 7b00 	vldr	d7, [r3]
 8004a2a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a2e:	4b72      	ldr	r3, [pc, #456]	; (8004bf8 <get_Straj+0x520>)
 8004a30:	ed83 7b00 	vstr	d7, [r3]
 8004a34:	4b71      	ldr	r3, [pc, #452]	; (8004bfc <get_Straj+0x524>)
 8004a36:	ed93 7b00 	vldr	d7, [r3]
 8004a3a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a3e:	4b6f      	ldr	r3, [pc, #444]	; (8004bfc <get_Straj+0x524>)
 8004a40:	ed83 7b00 	vstr	d7, [r3]
 8004a44:	4b6e      	ldr	r3, [pc, #440]	; (8004c00 <get_Straj+0x528>)
 8004a46:	ed93 7b00 	vldr	d7, [r3]
 8004a4a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a4e:	4b6c      	ldr	r3, [pc, #432]	; (8004c00 <get_Straj+0x528>)
 8004a50:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004a54:	4b6b      	ldr	r3, [pc, #428]	; (8004c04 <get_Straj+0x52c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004a5a:	f000 bcd4 	b.w	8005406 <get_Straj+0xd2e>
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8004a5e:	4b5d      	ldr	r3, [pc, #372]	; (8004bd4 <get_Straj+0x4fc>)
 8004a60:	ed93 7b00 	vldr	d7, [r3]
 8004a64:	ed97 6b06 	vldr	d6, [r7, #24]
 8004a68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a70:	f340 80ca 	ble.w	8004c08 <get_Straj+0x530>
 8004a74:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <get_Straj+0x50c>)
 8004a76:	ed93 6b00 	vldr	d6, [r3]
 8004a7a:	4b56      	ldr	r3, [pc, #344]	; (8004bd4 <get_Straj+0x4fc>)
 8004a7c:	ed93 7b00 	vldr	d7, [r3]
 8004a80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a84:	ed97 6b06 	vldr	d6, [r7, #24]
 8004a88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a90:	f200 80ba 	bhi.w	8004c08 <get_Straj+0x530>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8004a94:	4b54      	ldr	r3, [pc, #336]	; (8004be8 <get_Straj+0x510>)
 8004a96:	ed93 6b00 	vldr	d6, [r3]
 8004a9a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004a9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004aa2:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <get_Straj+0x518>)
 8004aa4:	ed93 7b00 	vldr	d7, [r3]
 8004aa8:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004aac:	4b4a      	ldr	r3, [pc, #296]	; (8004bd8 <get_Straj+0x500>)
 8004aae:	ed93 7b00 	vldr	d7, [r3]
 8004ab2:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004ab6:	ee87 9b06 	vdiv.f64	d9, d7, d6
 8004aba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004abe:	ed97 0b06 	vldr	d0, [r7, #24]
 8004ac2:	f00c fc09 	bl	80112d8 <pow>
 8004ac6:	eeb0 7b40 	vmov.f64	d7, d0
 8004aca:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004ace:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004ad2:	4b40      	ldr	r3, [pc, #256]	; (8004bd4 <get_Straj+0x4fc>)
 8004ad4:	ed93 7b00 	vldr	d7, [r3]
 8004ad8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8004adc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004ae0:	ed97 7b06 	vldr	d7, [r7, #24]
 8004ae4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ae8:	ee36 ab47 	vsub.f64	d10, d6, d7
 8004aec:	4b39      	ldr	r3, [pc, #228]	; (8004bd4 <get_Straj+0x4fc>)
 8004aee:	ed93 7b00 	vldr	d7, [r3]
 8004af2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004af6:	eeb0 0b47 	vmov.f64	d0, d7
 8004afa:	f00c fbed 	bl	80112d8 <pow>
 8004afe:	eeb0 7b40 	vmov.f64	d7, d0
 8004b02:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8004b06:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004b0a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004b0e:	4b39      	ldr	r3, [pc, #228]	; (8004bf4 <get_Straj+0x51c>)
 8004b10:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+alima*(t-Tj1/2);
 8004b14:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <get_Straj+0x4fc>)
 8004b16:	ed93 6b00 	vldr	d6, [r3]
 8004b1a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004b1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b22:	ed97 6b06 	vldr	d6, [r7, #24]
 8004b26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004b2a:	4b2b      	ldr	r3, [pc, #172]	; (8004bd8 <get_Straj+0x500>)
 8004b2c:	ed93 7b00 	vldr	d7, [r3]
 8004b30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b34:	4b2c      	ldr	r3, [pc, #176]	; (8004be8 <get_Straj+0x510>)
 8004b36:	ed93 7b00 	vldr	d7, [r3]
 8004b3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b3e:	4b2e      	ldr	r3, [pc, #184]	; (8004bf8 <get_Straj+0x520>)
 8004b40:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*Tj1;
 8004b44:	4b1d      	ldr	r3, [pc, #116]	; (8004bbc <get_Straj+0x4e4>)
 8004b46:	ed93 6b00 	vldr	d6, [r3]
 8004b4a:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <get_Straj+0x4fc>)
 8004b4c:	ed93 7b00 	vldr	d7, [r3]
 8004b50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b54:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <get_Straj+0x524>)
 8004b56:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 8004b5a:	4929      	ldr	r1, [pc, #164]	; (8004c00 <get_Straj+0x528>)
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9c1 2300 	strd	r2, r3, [r1]

        if (flagInv){
 8004b68:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <get_Straj+0x52c>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 844a 	beq.w	8005406 <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <get_Straj+0x51c>)
 8004b74:	ed93 7b00 	vldr	d7, [r3]
 8004b78:	eeb1 7b47 	vneg.f64	d7, d7
 8004b7c:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <get_Straj+0x51c>)
 8004b7e:	ed83 7b00 	vstr	d7, [r3]
 8004b82:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <get_Straj+0x520>)
 8004b84:	ed93 7b00 	vldr	d7, [r3]
 8004b88:	eeb1 7b47 	vneg.f64	d7, d7
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <get_Straj+0x520>)
 8004b8e:	ed83 7b00 	vstr	d7, [r3]
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <get_Straj+0x524>)
 8004b94:	ed93 7b00 	vldr	d7, [r3]
 8004b98:	eeb1 7b47 	vneg.f64	d7, d7
 8004b9c:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <get_Straj+0x524>)
 8004b9e:	ed83 7b00 	vstr	d7, [r3]
 8004ba2:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <get_Straj+0x528>)
 8004ba4:	ed93 7b00 	vldr	d7, [r3]
 8004ba8:	eeb1 7b47 	vneg.f64	d7, d7
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <get_Straj+0x528>)
 8004bae:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004bb2:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <get_Straj+0x52c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004bb8:	f000 bc25 	b.w	8005406 <get_Straj+0xd2e>
 8004bbc:	24000008 	.word	0x24000008
 8004bc0:	24000460 	.word	0x24000460
 8004bc4:	24000020 	.word	0x24000020
 8004bc8:	24000478 	.word	0x24000478
 8004bcc:	24000010 	.word	0x24000010
 8004bd0:	24000468 	.word	0x24000468
 8004bd4:	24000868 	.word	0x24000868
 8004bd8:	24000830 	.word	0x24000830
 8004bdc:	24000870 	.word	0x24000870
 8004be0:	24000838 	.word	0x24000838
 8004be4:	24000850 	.word	0x24000850
 8004be8:	24000018 	.word	0x24000018
 8004bec:	24000840 	.word	0x24000840
 8004bf0:	24000888 	.word	0x24000888
 8004bf4:	24000440 	.word	0x24000440
 8004bf8:	24000448 	.word	0x24000448
 8004bfc:	24000450 	.word	0x24000450
 8004c00:	24000458 	.word	0x24000458
 8004c04:	24000828 	.word	0x24000828
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 8004c08:	4b9c      	ldr	r3, [pc, #624]	; (8004e7c <get_Straj+0x7a4>)
 8004c0a:	ed93 6b00 	vldr	d6, [r3]
 8004c0e:	4b9c      	ldr	r3, [pc, #624]	; (8004e80 <get_Straj+0x7a8>)
 8004c10:	ed93 7b00 	vldr	d7, [r3]
 8004c14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004c18:	ed97 6b06 	vldr	d6, [r7, #24]
 8004c1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c24:	f340 80ac 	ble.w	8004d80 <get_Straj+0x6a8>
 8004c28:	4b94      	ldr	r3, [pc, #592]	; (8004e7c <get_Straj+0x7a4>)
 8004c2a:	ed93 7b00 	vldr	d7, [r3]
 8004c2e:	ed97 6b06 	vldr	d6, [r7, #24]
 8004c32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	f200 80a1 	bhi.w	8004d80 <get_Straj+0x6a8>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 8004c3e:	4b91      	ldr	r3, [pc, #580]	; (8004e84 <get_Straj+0x7ac>)
 8004c40:	ed93 6b00 	vldr	d6, [r3]
 8004c44:	4b90      	ldr	r3, [pc, #576]	; (8004e88 <get_Straj+0x7b0>)
 8004c46:	ed93 7b00 	vldr	d7, [r3]
 8004c4a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c4e:	4b8b      	ldr	r3, [pc, #556]	; (8004e7c <get_Straj+0x7a4>)
 8004c50:	ed93 7b00 	vldr	d7, [r3]
 8004c54:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004c58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004c5c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004c60:	4b8a      	ldr	r3, [pc, #552]	; (8004e8c <get_Straj+0x7b4>)
 8004c62:	ed93 7b00 	vldr	d7, [r3]
 8004c66:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c6a:	4b84      	ldr	r3, [pc, #528]	; (8004e7c <get_Straj+0x7a4>)
 8004c6c:	ed93 5b00 	vldr	d5, [r3]
 8004c70:	ed97 7b06 	vldr	d7, [r7, #24]
 8004c74:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004c78:	4b82      	ldr	r3, [pc, #520]	; (8004e84 <get_Straj+0x7ac>)
 8004c7a:	ed93 7b00 	vldr	d7, [r3]
 8004c7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004c82:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004c86:	4b7d      	ldr	r3, [pc, #500]	; (8004e7c <get_Straj+0x7a4>)
 8004c88:	ed93 6b00 	vldr	d6, [r3]
 8004c8c:	ed97 7b06 	vldr	d7, [r7, #24]
 8004c90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004c94:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004c98:	eeb0 0b47 	vmov.f64	d0, d7
 8004c9c:	f00c fb1c 	bl	80112d8 <pow>
 8004ca0:	eeb0 6b40 	vmov.f64	d6, d0
 8004ca4:	4b7a      	ldr	r3, [pc, #488]	; (8004e90 <get_Straj+0x7b8>)
 8004ca6:	ed93 7b00 	vldr	d7, [r3]
 8004caa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004cae:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004cb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004cb6:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004cba:	4b76      	ldr	r3, [pc, #472]	; (8004e94 <get_Straj+0x7bc>)
 8004cbc:	ed83 7b00 	vstr	d7, [r3]
        qd = vlim+jmin*pow(Ta-t,2)/2;
 8004cc0:	4b6e      	ldr	r3, [pc, #440]	; (8004e7c <get_Straj+0x7a4>)
 8004cc2:	ed93 6b00 	vldr	d6, [r3]
 8004cc6:	ed97 7b06 	vldr	d7, [r7, #24]
 8004cca:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004cce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004cd2:	eeb0 0b47 	vmov.f64	d0, d7
 8004cd6:	f00c faff 	bl	80112d8 <pow>
 8004cda:	eeb0 6b40 	vmov.f64	d6, d0
 8004cde:	4b6c      	ldr	r3, [pc, #432]	; (8004e90 <get_Straj+0x7b8>)
 8004ce0:	ed93 7b00 	vldr	d7, [r3]
 8004ce4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ce8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004cec:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004cf0:	4b64      	ldr	r3, [pc, #400]	; (8004e84 <get_Straj+0x7ac>)
 8004cf2:	ed93 7b00 	vldr	d7, [r3]
 8004cf6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004cfa:	4b67      	ldr	r3, [pc, #412]	; (8004e98 <get_Straj+0x7c0>)
 8004cfc:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmin*(Ta-t);
 8004d00:	4b63      	ldr	r3, [pc, #396]	; (8004e90 <get_Straj+0x7b8>)
 8004d02:	ed93 7b00 	vldr	d7, [r3]
 8004d06:	eeb1 6b47 	vneg.f64	d6, d7
 8004d0a:	4b5c      	ldr	r3, [pc, #368]	; (8004e7c <get_Straj+0x7a4>)
 8004d0c:	ed93 5b00 	vldr	d5, [r3]
 8004d10:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d14:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004d18:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d1c:	4b5f      	ldr	r3, [pc, #380]	; (8004e9c <get_Straj+0x7c4>)
 8004d1e:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmin;
 8004d22:	4b5b      	ldr	r3, [pc, #364]	; (8004e90 <get_Straj+0x7b8>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	495d      	ldr	r1, [pc, #372]	; (8004ea0 <get_Straj+0x7c8>)
 8004d2a:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004d2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ea4 <get_Straj+0x7cc>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8367 	beq.w	8005406 <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004d38:	4b56      	ldr	r3, [pc, #344]	; (8004e94 <get_Straj+0x7bc>)
 8004d3a:	ed93 7b00 	vldr	d7, [r3]
 8004d3e:	eeb1 7b47 	vneg.f64	d7, d7
 8004d42:	4b54      	ldr	r3, [pc, #336]	; (8004e94 <get_Straj+0x7bc>)
 8004d44:	ed83 7b00 	vstr	d7, [r3]
 8004d48:	4b53      	ldr	r3, [pc, #332]	; (8004e98 <get_Straj+0x7c0>)
 8004d4a:	ed93 7b00 	vldr	d7, [r3]
 8004d4e:	eeb1 7b47 	vneg.f64	d7, d7
 8004d52:	4b51      	ldr	r3, [pc, #324]	; (8004e98 <get_Straj+0x7c0>)
 8004d54:	ed83 7b00 	vstr	d7, [r3]
 8004d58:	4b50      	ldr	r3, [pc, #320]	; (8004e9c <get_Straj+0x7c4>)
 8004d5a:	ed93 7b00 	vldr	d7, [r3]
 8004d5e:	eeb1 7b47 	vneg.f64	d7, d7
 8004d62:	4b4e      	ldr	r3, [pc, #312]	; (8004e9c <get_Straj+0x7c4>)
 8004d64:	ed83 7b00 	vstr	d7, [r3]
 8004d68:	4b4d      	ldr	r3, [pc, #308]	; (8004ea0 <get_Straj+0x7c8>)
 8004d6a:	ed93 7b00 	vldr	d7, [r3]
 8004d6e:	eeb1 7b47 	vneg.f64	d7, d7
 8004d72:	4b4b      	ldr	r3, [pc, #300]	; (8004ea0 <get_Straj+0x7c8>)
 8004d74:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004d78:	4b4a      	ldr	r3, [pc, #296]	; (8004ea4 <get_Straj+0x7cc>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004d7e:	e342      	b.n	8005406 <get_Straj+0xd2e>
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8004d80:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <get_Straj+0x7a4>)
 8004d82:	ed93 7b00 	vldr	d7, [r3]
 8004d86:	ed97 6b06 	vldr	d6, [r7, #24]
 8004d8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d92:	f340 808b 	ble.w	8004eac <get_Straj+0x7d4>
 8004d96:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <get_Straj+0x7a4>)
 8004d98:	ed93 6b00 	vldr	d6, [r3]
 8004d9c:	4b42      	ldr	r3, [pc, #264]	; (8004ea8 <get_Straj+0x7d0>)
 8004d9e:	ed93 7b00 	vldr	d7, [r3]
 8004da2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004da6:	ed97 6b06 	vldr	d6, [r7, #24]
 8004daa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db2:	d87b      	bhi.n	8004eac <get_Straj+0x7d4>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8004db4:	4b33      	ldr	r3, [pc, #204]	; (8004e84 <get_Straj+0x7ac>)
 8004db6:	ed93 6b00 	vldr	d6, [r3]
 8004dba:	4b33      	ldr	r3, [pc, #204]	; (8004e88 <get_Straj+0x7b0>)
 8004dbc:	ed93 7b00 	vldr	d7, [r3]
 8004dc0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <get_Straj+0x7a4>)
 8004dc6:	ed93 7b00 	vldr	d7, [r3]
 8004dca:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004dce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004dd2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004dd6:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <get_Straj+0x7b4>)
 8004dd8:	ed93 7b00 	vldr	d7, [r3]
 8004ddc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004de0:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <get_Straj+0x7a4>)
 8004de2:	ed93 7b00 	vldr	d7, [r3]
 8004de6:	ed97 5b06 	vldr	d5, [r7, #24]
 8004dea:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004dee:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <get_Straj+0x7ac>)
 8004df0:	ed93 7b00 	vldr	d7, [r3]
 8004df4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004df8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dfc:	4b25      	ldr	r3, [pc, #148]	; (8004e94 <get_Straj+0x7bc>)
 8004dfe:	ed83 7b00 	vstr	d7, [r3]
        qd = vlim;
 8004e02:	4b20      	ldr	r3, [pc, #128]	; (8004e84 <get_Straj+0x7ac>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	4923      	ldr	r1, [pc, #140]	; (8004e98 <get_Straj+0x7c0>)
 8004e0a:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 8004e0e:	4923      	ldr	r1, [pc, #140]	; (8004e9c <get_Straj+0x7c4>)
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8004e1c:	4920      	ldr	r1, [pc, #128]	; (8004ea0 <get_Straj+0x7c8>)
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <get_Straj+0x7cc>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 82e9 	beq.w	8005406 <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004e34:	4b17      	ldr	r3, [pc, #92]	; (8004e94 <get_Straj+0x7bc>)
 8004e36:	ed93 7b00 	vldr	d7, [r3]
 8004e3a:	eeb1 7b47 	vneg.f64	d7, d7
 8004e3e:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <get_Straj+0x7bc>)
 8004e40:	ed83 7b00 	vstr	d7, [r3]
 8004e44:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <get_Straj+0x7c0>)
 8004e46:	ed93 7b00 	vldr	d7, [r3]
 8004e4a:	eeb1 7b47 	vneg.f64	d7, d7
 8004e4e:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <get_Straj+0x7c0>)
 8004e50:	ed83 7b00 	vstr	d7, [r3]
 8004e54:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <get_Straj+0x7c4>)
 8004e56:	ed93 7b00 	vldr	d7, [r3]
 8004e5a:	eeb1 7b47 	vneg.f64	d7, d7
 8004e5e:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <get_Straj+0x7c4>)
 8004e60:	ed83 7b00 	vstr	d7, [r3]
 8004e64:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <get_Straj+0x7c8>)
 8004e66:	ed93 7b00 	vldr	d7, [r3]
 8004e6a:	eeb1 7b47 	vneg.f64	d7, d7
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <get_Straj+0x7c8>)
 8004e70:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <get_Straj+0x7cc>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004e7a:	e2c4      	b.n	8005406 <get_Straj+0xd2e>
 8004e7c:	24000850 	.word	0x24000850
 8004e80:	24000868 	.word	0x24000868
 8004e84:	24000840 	.word	0x24000840
 8004e88:	24000018 	.word	0x24000018
 8004e8c:	24000888 	.word	0x24000888
 8004e90:	24000460 	.word	0x24000460
 8004e94:	24000440 	.word	0x24000440
 8004e98:	24000448 	.word	0x24000448
 8004e9c:	24000450 	.word	0x24000450
 8004ea0:	24000458 	.word	0x24000458
 8004ea4:	24000828 	.word	0x24000828
 8004ea8:	24000860 	.word	0x24000860
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 8004eac:	4b6c      	ldr	r3, [pc, #432]	; (8005060 <get_Straj+0x988>)
 8004eae:	ed93 6b00 	vldr	d6, [r3]
 8004eb2:	4b6c      	ldr	r3, [pc, #432]	; (8005064 <get_Straj+0x98c>)
 8004eb4:	ed93 7b00 	vldr	d7, [r3]
 8004eb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ebc:	ed97 6b06 	vldr	d6, [r7, #24]
 8004ec0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec8:	f2c0 80e4 	blt.w	8005094 <get_Straj+0x9bc>
 8004ecc:	4b64      	ldr	r3, [pc, #400]	; (8005060 <get_Straj+0x988>)
 8004ece:	ed93 6b00 	vldr	d6, [r3]
 8004ed2:	4b64      	ldr	r3, [pc, #400]	; (8005064 <get_Straj+0x98c>)
 8004ed4:	ed93 7b00 	vldr	d7, [r3]
 8004ed8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004edc:	4b62      	ldr	r3, [pc, #392]	; (8005068 <get_Straj+0x990>)
 8004ede:	ed93 7b00 	vldr	d7, [r3]
 8004ee2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ee6:	ed97 6b06 	vldr	d6, [r7, #24]
 8004eea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef2:	f200 80cf 	bhi.w	8005094 <get_Straj+0x9bc>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 8004ef6:	4b5d      	ldr	r3, [pc, #372]	; (800506c <get_Straj+0x994>)
 8004ef8:	ed93 6b00 	vldr	d6, [r3]
 8004efc:	4b5c      	ldr	r3, [pc, #368]	; (8005070 <get_Straj+0x998>)
 8004efe:	ed93 5b00 	vldr	d5, [r3]
 8004f02:	4b5c      	ldr	r3, [pc, #368]	; (8005074 <get_Straj+0x99c>)
 8004f04:	ed93 7b00 	vldr	d7, [r3]
 8004f08:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004f0c:	4b55      	ldr	r3, [pc, #340]	; (8005064 <get_Straj+0x98c>)
 8004f0e:	ed93 7b00 	vldr	d7, [r3]
 8004f12:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004f16:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004f1a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004f1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f22:	4b4f      	ldr	r3, [pc, #316]	; (8005060 <get_Straj+0x988>)
 8004f24:	ed93 7b00 	vldr	d7, [r3]
 8004f28:	ed97 5b06 	vldr	d5, [r7, #24]
 8004f2c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004f30:	4b4c      	ldr	r3, [pc, #304]	; (8005064 <get_Straj+0x98c>)
 8004f32:	ed93 7b00 	vldr	d7, [r3]
 8004f36:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004f3a:	4b4d      	ldr	r3, [pc, #308]	; (8005070 <get_Straj+0x998>)
 8004f3c:	ed93 7b00 	vldr	d7, [r3]
 8004f40:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004f44:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004f48:	4b45      	ldr	r3, [pc, #276]	; (8005060 <get_Straj+0x988>)
 8004f4a:	ed93 7b00 	vldr	d7, [r3]
 8004f4e:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f52:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f56:	4b43      	ldr	r3, [pc, #268]	; (8005064 <get_Straj+0x98c>)
 8004f58:	ed93 7b00 	vldr	d7, [r3]
 8004f5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f60:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004f64:	eeb0 0b47 	vmov.f64	d0, d7
 8004f68:	f00c f9b6 	bl	80112d8 <pow>
 8004f6c:	eeb0 7b40 	vmov.f64	d7, d0
 8004f70:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004f74:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004f78:	4b3f      	ldr	r3, [pc, #252]	; (8005078 <get_Straj+0x9a0>)
 8004f7a:	ed93 7b00 	vldr	d7, [r3]
 8004f7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f82:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004f86:	4b3d      	ldr	r3, [pc, #244]	; (800507c <get_Straj+0x9a4>)
 8004f88:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 8004f8c:	4b38      	ldr	r3, [pc, #224]	; (8005070 <get_Straj+0x998>)
 8004f8e:	ed93 8b00 	vldr	d8, [r3]
 8004f92:	4b33      	ldr	r3, [pc, #204]	; (8005060 <get_Straj+0x988>)
 8004f94:	ed93 7b00 	vldr	d7, [r3]
 8004f98:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f9c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004fa0:	4b30      	ldr	r3, [pc, #192]	; (8005064 <get_Straj+0x98c>)
 8004fa2:	ed93 7b00 	vldr	d7, [r3]
 8004fa6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004faa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004fae:	eeb0 0b47 	vmov.f64	d0, d7
 8004fb2:	f00c f991 	bl	80112d8 <pow>
 8004fb6:	eeb0 7b40 	vmov.f64	d7, d0
 8004fba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004fbe:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004fc2:	4b2d      	ldr	r3, [pc, #180]	; (8005078 <get_Straj+0x9a0>)
 8004fc4:	ed93 7b00 	vldr	d7, [r3]
 8004fc8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004fcc:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <get_Straj+0x9a8>)
 8004fd2:	ed83 7b00 	vstr	d7, [r3]
        qdd=-jmax*(t-T+Td);
 8004fd6:	4b28      	ldr	r3, [pc, #160]	; (8005078 <get_Straj+0x9a0>)
 8004fd8:	ed93 7b00 	vldr	d7, [r3]
 8004fdc:	eeb1 6b47 	vneg.f64	d6, d7
 8004fe0:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <get_Straj+0x988>)
 8004fe2:	ed93 7b00 	vldr	d7, [r3]
 8004fe6:	ed97 5b06 	vldr	d5, [r7, #24]
 8004fea:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004fee:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <get_Straj+0x98c>)
 8004ff0:	ed93 7b00 	vldr	d7, [r3]
 8004ff4:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004ff8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ffc:	4b21      	ldr	r3, [pc, #132]	; (8005084 <get_Straj+0x9ac>)
 8004ffe:	ed83 7b00 	vstr	d7, [r3]
        qddd=jmin;
 8005002:	4b21      	ldr	r3, [pc, #132]	; (8005088 <get_Straj+0x9b0>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	4920      	ldr	r1, [pc, #128]	; (800508c <get_Straj+0x9b4>)
 800500a:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <get_Straj+0x9b8>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 81f7 	beq.w	8005406 <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005018:	4b18      	ldr	r3, [pc, #96]	; (800507c <get_Straj+0x9a4>)
 800501a:	ed93 7b00 	vldr	d7, [r3]
 800501e:	eeb1 7b47 	vneg.f64	d7, d7
 8005022:	4b16      	ldr	r3, [pc, #88]	; (800507c <get_Straj+0x9a4>)
 8005024:	ed83 7b00 	vstr	d7, [r3]
 8005028:	4b15      	ldr	r3, [pc, #84]	; (8005080 <get_Straj+0x9a8>)
 800502a:	ed93 7b00 	vldr	d7, [r3]
 800502e:	eeb1 7b47 	vneg.f64	d7, d7
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <get_Straj+0x9a8>)
 8005034:	ed83 7b00 	vstr	d7, [r3]
 8005038:	4b12      	ldr	r3, [pc, #72]	; (8005084 <get_Straj+0x9ac>)
 800503a:	ed93 7b00 	vldr	d7, [r3]
 800503e:	eeb1 7b47 	vneg.f64	d7, d7
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <get_Straj+0x9ac>)
 8005044:	ed83 7b00 	vstr	d7, [r3]
 8005048:	4b10      	ldr	r3, [pc, #64]	; (800508c <get_Straj+0x9b4>)
 800504a:	ed93 7b00 	vldr	d7, [r3]
 800504e:	eeb1 7b47 	vneg.f64	d7, d7
 8005052:	4b0e      	ldr	r3, [pc, #56]	; (800508c <get_Straj+0x9b4>)
 8005054:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8005058:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <get_Straj+0x9b8>)
 800505a:	2200      	movs	r2, #0
 800505c:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800505e:	e1d2      	b.n	8005406 <get_Straj+0xd2e>
 8005060:	24000848 	.word	0x24000848
 8005064:	24000858 	.word	0x24000858
 8005068:	24000870 	.word	0x24000870
 800506c:	24000890 	.word	0x24000890
 8005070:	24000840 	.word	0x24000840
 8005074:	24000470 	.word	0x24000470
 8005078:	24000008 	.word	0x24000008
 800507c:	24000440 	.word	0x24000440
 8005080:	24000448 	.word	0x24000448
 8005084:	24000450 	.word	0x24000450
 8005088:	24000460 	.word	0x24000460
 800508c:	24000458 	.word	0x24000458
 8005090:	24000828 	.word	0x24000828
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 8005094:	4b7b      	ldr	r3, [pc, #492]	; (8005284 <get_Straj+0xbac>)
 8005096:	ed93 6b00 	vldr	d6, [r3]
 800509a:	4b7b      	ldr	r3, [pc, #492]	; (8005288 <get_Straj+0xbb0>)
 800509c:	ed93 7b00 	vldr	d7, [r3]
 80050a0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80050a4:	4b79      	ldr	r3, [pc, #484]	; (800528c <get_Straj+0xbb4>)
 80050a6:	ed93 7b00 	vldr	d7, [r3]
 80050aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050ae:	ed97 6b06 	vldr	d6, [r7, #24]
 80050b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ba:	f340 80fd 	ble.w	80052b8 <get_Straj+0xbe0>
 80050be:	4b71      	ldr	r3, [pc, #452]	; (8005284 <get_Straj+0xbac>)
 80050c0:	ed93 6b00 	vldr	d6, [r3]
 80050c4:	4b71      	ldr	r3, [pc, #452]	; (800528c <get_Straj+0xbb4>)
 80050c6:	ed93 7b00 	vldr	d7, [r3]
 80050ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80050ce:	ed97 6b06 	vldr	d6, [r7, #24]
 80050d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050da:	f200 80ed 	bhi.w	80052b8 <get_Straj+0xbe0>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 80050de:	4b6c      	ldr	r3, [pc, #432]	; (8005290 <get_Straj+0xbb8>)
 80050e0:	ed93 6b00 	vldr	d6, [r3]
 80050e4:	4b6b      	ldr	r3, [pc, #428]	; (8005294 <get_Straj+0xbbc>)
 80050e6:	ed93 5b00 	vldr	d5, [r3]
 80050ea:	4b6b      	ldr	r3, [pc, #428]	; (8005298 <get_Straj+0xbc0>)
 80050ec:	ed93 7b00 	vldr	d7, [r3]
 80050f0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80050f4:	4b64      	ldr	r3, [pc, #400]	; (8005288 <get_Straj+0xbb0>)
 80050f6:	ed93 7b00 	vldr	d7, [r3]
 80050fa:	ee25 5b07 	vmul.f64	d5, d5, d7
 80050fe:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8005102:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8005106:	ee36 6b47 	vsub.f64	d6, d6, d7
 800510a:	4b5e      	ldr	r3, [pc, #376]	; (8005284 <get_Straj+0xbac>)
 800510c:	ed93 7b00 	vldr	d7, [r3]
 8005110:	ed97 5b06 	vldr	d5, [r7, #24]
 8005114:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005118:	4b5b      	ldr	r3, [pc, #364]	; (8005288 <get_Straj+0xbb0>)
 800511a:	ed93 7b00 	vldr	d7, [r3]
 800511e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8005122:	4b5c      	ldr	r3, [pc, #368]	; (8005294 <get_Straj+0xbbc>)
 8005124:	ed93 7b00 	vldr	d7, [r3]
 8005128:	ee25 7b07 	vmul.f64	d7, d5, d7
 800512c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005130:	4b5a      	ldr	r3, [pc, #360]	; (800529c <get_Straj+0xbc4>)
 8005132:	ed93 7b00 	vldr	d7, [r3]
 8005136:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800513a:	ee87 9b06 	vdiv.f64	d9, d7, d6
 800513e:	4b51      	ldr	r3, [pc, #324]	; (8005284 <get_Straj+0xbac>)
 8005140:	ed93 7b00 	vldr	d7, [r3]
 8005144:	ed97 6b06 	vldr	d6, [r7, #24]
 8005148:	ee36 6b47 	vsub.f64	d6, d6, d7
 800514c:	4b4e      	ldr	r3, [pc, #312]	; (8005288 <get_Straj+0xbb0>)
 800514e:	ed93 7b00 	vldr	d7, [r3]
 8005152:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005156:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800515a:	eeb0 0b47 	vmov.f64	d0, d7
 800515e:	f00c f8bb 	bl	80112d8 <pow>
 8005162:	eeb0 7b40 	vmov.f64	d7, d0
 8005166:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800516a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800516e:	4b47      	ldr	r3, [pc, #284]	; (800528c <get_Straj+0xbb4>)
 8005170:	ed93 7b00 	vldr	d7, [r3]
 8005174:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8005178:	ee27 5b05 	vmul.f64	d5, d7, d5
 800517c:	4b41      	ldr	r3, [pc, #260]	; (8005284 <get_Straj+0xbac>)
 800517e:	ed93 7b00 	vldr	d7, [r3]
 8005182:	ed97 4b06 	vldr	d4, [r7, #24]
 8005186:	ee34 4b47 	vsub.f64	d4, d4, d7
 800518a:	4b3f      	ldr	r3, [pc, #252]	; (8005288 <get_Straj+0xbb0>)
 800518c:	ed93 7b00 	vldr	d7, [r3]
 8005190:	ee34 7b07 	vadd.f64	d7, d4, d7
 8005194:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005198:	ee36 ab47 	vsub.f64	d10, d6, d7
 800519c:	4b3b      	ldr	r3, [pc, #236]	; (800528c <get_Straj+0xbb4>)
 800519e:	ed93 7b00 	vldr	d7, [r3]
 80051a2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051a6:	eeb0 0b47 	vmov.f64	d0, d7
 80051aa:	f00c f895 	bl	80112d8 <pow>
 80051ae:	eeb0 7b40 	vmov.f64	d7, d0
 80051b2:	ee3a 7b07 	vadd.f64	d7, d10, d7
 80051b6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80051ba:	ee38 7b07 	vadd.f64	d7, d8, d7
 80051be:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <get_Straj+0xbc8>)
 80051c0:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 80051c4:	4b2f      	ldr	r3, [pc, #188]	; (8005284 <get_Straj+0xbac>)
 80051c6:	ed93 7b00 	vldr	d7, [r3]
 80051ca:	ed97 6b06 	vldr	d6, [r7, #24]
 80051ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80051d2:	4b2d      	ldr	r3, [pc, #180]	; (8005288 <get_Straj+0xbb0>)
 80051d4:	ed93 7b00 	vldr	d7, [r3]
 80051d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80051dc:	4b2b      	ldr	r3, [pc, #172]	; (800528c <get_Straj+0xbb4>)
 80051de:	ed93 5b00 	vldr	d5, [r3]
 80051e2:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80051e6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80051ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 80051ee:	4b2b      	ldr	r3, [pc, #172]	; (800529c <get_Straj+0xbc4>)
 80051f0:	ed93 7b00 	vldr	d7, [r3]
 80051f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80051f8:	4b26      	ldr	r3, [pc, #152]	; (8005294 <get_Straj+0xbbc>)
 80051fa:	ed93 7b00 	vldr	d7, [r3]
 80051fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005202:	4b28      	ldr	r3, [pc, #160]	; (80052a4 <get_Straj+0xbcc>)
 8005204:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*Tj2;
 8005208:	4b27      	ldr	r3, [pc, #156]	; (80052a8 <get_Straj+0xbd0>)
 800520a:	ed93 7b00 	vldr	d7, [r3]
 800520e:	eeb1 6b47 	vneg.f64	d6, d7
 8005212:	4b1e      	ldr	r3, [pc, #120]	; (800528c <get_Straj+0xbb4>)
 8005214:	ed93 7b00 	vldr	d7, [r3]
 8005218:	ee26 7b07 	vmul.f64	d7, d6, d7
 800521c:	4b23      	ldr	r3, [pc, #140]	; (80052ac <get_Straj+0xbd4>)
 800521e:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 8005222:	4923      	ldr	r1, [pc, #140]	; (80052b0 <get_Straj+0xbd8>)
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8005230:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <get_Straj+0xbdc>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80e6 	beq.w	8005406 <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800523a:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <get_Straj+0xbc8>)
 800523c:	ed93 7b00 	vldr	d7, [r3]
 8005240:	eeb1 7b47 	vneg.f64	d7, d7
 8005244:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <get_Straj+0xbc8>)
 8005246:	ed83 7b00 	vstr	d7, [r3]
 800524a:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <get_Straj+0xbcc>)
 800524c:	ed93 7b00 	vldr	d7, [r3]
 8005250:	eeb1 7b47 	vneg.f64	d7, d7
 8005254:	4b13      	ldr	r3, [pc, #76]	; (80052a4 <get_Straj+0xbcc>)
 8005256:	ed83 7b00 	vstr	d7, [r3]
 800525a:	4b14      	ldr	r3, [pc, #80]	; (80052ac <get_Straj+0xbd4>)
 800525c:	ed93 7b00 	vldr	d7, [r3]
 8005260:	eeb1 7b47 	vneg.f64	d7, d7
 8005264:	4b11      	ldr	r3, [pc, #68]	; (80052ac <get_Straj+0xbd4>)
 8005266:	ed83 7b00 	vstr	d7, [r3]
 800526a:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <get_Straj+0xbd8>)
 800526c:	ed93 7b00 	vldr	d7, [r3]
 8005270:	eeb1 7b47 	vneg.f64	d7, d7
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <get_Straj+0xbd8>)
 8005276:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 800527a:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <get_Straj+0xbdc>)
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8005280:	e0c1      	b.n	8005406 <get_Straj+0xd2e>
 8005282:	bf00      	nop
 8005284:	24000848 	.word	0x24000848
 8005288:	24000858 	.word	0x24000858
 800528c:	24000870 	.word	0x24000870
 8005290:	24000890 	.word	0x24000890
 8005294:	24000840 	.word	0x24000840
 8005298:	24000470 	.word	0x24000470
 800529c:	24000838 	.word	0x24000838
 80052a0:	24000440 	.word	0x24000440
 80052a4:	24000448 	.word	0x24000448
 80052a8:	24000008 	.word	0x24000008
 80052ac:	24000450 	.word	0x24000450
 80052b0:	24000458 	.word	0x24000458
 80052b4:	24000828 	.word	0x24000828
        }

    } else if (t>T-Tj2 && t<=T){
 80052b8:	4b59      	ldr	r3, [pc, #356]	; (8005420 <get_Straj+0xd48>)
 80052ba:	ed93 6b00 	vldr	d6, [r3]
 80052be:	4b59      	ldr	r3, [pc, #356]	; (8005424 <get_Straj+0xd4c>)
 80052c0:	ed93 7b00 	vldr	d7, [r3]
 80052c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052c8:	ed97 6b06 	vldr	d6, [r7, #24]
 80052cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80052d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d4:	f340 8097 	ble.w	8005406 <get_Straj+0xd2e>
 80052d8:	4b51      	ldr	r3, [pc, #324]	; (8005420 <get_Straj+0xd48>)
 80052da:	ed93 7b00 	vldr	d7, [r3]
 80052de:	ed97 6b06 	vldr	d6, [r7, #24]
 80052e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80052e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ea:	f200 808c 	bhi.w	8005406 <get_Straj+0xd2e>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 80052ee:	4b4e      	ldr	r3, [pc, #312]	; (8005428 <get_Straj+0xd50>)
 80052f0:	ed93 6b00 	vldr	d6, [r3]
 80052f4:	4b4a      	ldr	r3, [pc, #296]	; (8005420 <get_Straj+0xd48>)
 80052f6:	ed93 5b00 	vldr	d5, [r3]
 80052fa:	ed97 7b06 	vldr	d7, [r7, #24]
 80052fe:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005302:	4b4a      	ldr	r3, [pc, #296]	; (800542c <get_Straj+0xd54>)
 8005304:	ed93 7b00 	vldr	d7, [r3]
 8005308:	ee25 7b07 	vmul.f64	d7, d5, d7
 800530c:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005310:	4b43      	ldr	r3, [pc, #268]	; (8005420 <get_Straj+0xd48>)
 8005312:	ed93 6b00 	vldr	d6, [r3]
 8005316:	ed97 7b06 	vldr	d7, [r7, #24]
 800531a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800531e:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005322:	eeb0 0b47 	vmov.f64	d0, d7
 8005326:	f00b ffd7 	bl	80112d8 <pow>
 800532a:	eeb0 7b40 	vmov.f64	d7, d0
 800532e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005332:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8005336:	4b3e      	ldr	r3, [pc, #248]	; (8005430 <get_Straj+0xd58>)
 8005338:	ed93 7b00 	vldr	d7, [r3]
 800533c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005340:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005344:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <get_Straj+0xd5c>)
 8005346:	ed83 7b00 	vstr	d7, [r3]
        qd = vf+jmax*(pow(T-t,2))/2;
 800534a:	4b35      	ldr	r3, [pc, #212]	; (8005420 <get_Straj+0xd48>)
 800534c:	ed93 6b00 	vldr	d6, [r3]
 8005350:	ed97 7b06 	vldr	d7, [r7, #24]
 8005354:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005358:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800535c:	eeb0 0b47 	vmov.f64	d0, d7
 8005360:	f00b ffba 	bl	80112d8 <pow>
 8005364:	eeb0 6b40 	vmov.f64	d6, d0
 8005368:	4b31      	ldr	r3, [pc, #196]	; (8005430 <get_Straj+0xd58>)
 800536a:	ed93 7b00 	vldr	d7, [r3]
 800536e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005372:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005376:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800537a:	4b2c      	ldr	r3, [pc, #176]	; (800542c <get_Straj+0xd54>)
 800537c:	ed93 7b00 	vldr	d7, [r3]
 8005380:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005384:	4b2c      	ldr	r3, [pc, #176]	; (8005438 <get_Straj+0xd60>)
 8005386:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*(T-t);
 800538a:	4b29      	ldr	r3, [pc, #164]	; (8005430 <get_Straj+0xd58>)
 800538c:	ed93 7b00 	vldr	d7, [r3]
 8005390:	eeb1 6b47 	vneg.f64	d6, d7
 8005394:	4b22      	ldr	r3, [pc, #136]	; (8005420 <get_Straj+0xd48>)
 8005396:	ed93 5b00 	vldr	d5, [r3]
 800539a:	ed97 7b06 	vldr	d7, [r7, #24]
 800539e:	ee35 7b47 	vsub.f64	d7, d5, d7
 80053a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80053a6:	4b25      	ldr	r3, [pc, #148]	; (800543c <get_Straj+0xd64>)
 80053a8:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 80053ac:	4b20      	ldr	r3, [pc, #128]	; (8005430 <get_Straj+0xd58>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	4923      	ldr	r1, [pc, #140]	; (8005440 <get_Straj+0xd68>)
 80053b4:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80053b8:	4b22      	ldr	r3, [pc, #136]	; (8005444 <get_Straj+0xd6c>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d022      	beq.n	8005406 <get_Straj+0xd2e>
            //printf("inv tramo7\n");
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80053c0:	4b1c      	ldr	r3, [pc, #112]	; (8005434 <get_Straj+0xd5c>)
 80053c2:	ed93 7b00 	vldr	d7, [r3]
 80053c6:	eeb1 7b47 	vneg.f64	d7, d7
 80053ca:	4b1a      	ldr	r3, [pc, #104]	; (8005434 <get_Straj+0xd5c>)
 80053cc:	ed83 7b00 	vstr	d7, [r3]
 80053d0:	4b19      	ldr	r3, [pc, #100]	; (8005438 <get_Straj+0xd60>)
 80053d2:	ed93 7b00 	vldr	d7, [r3]
 80053d6:	eeb1 7b47 	vneg.f64	d7, d7
 80053da:	4b17      	ldr	r3, [pc, #92]	; (8005438 <get_Straj+0xd60>)
 80053dc:	ed83 7b00 	vstr	d7, [r3]
 80053e0:	4b16      	ldr	r3, [pc, #88]	; (800543c <get_Straj+0xd64>)
 80053e2:	ed93 7b00 	vldr	d7, [r3]
 80053e6:	eeb1 7b47 	vneg.f64	d7, d7
 80053ea:	4b14      	ldr	r3, [pc, #80]	; (800543c <get_Straj+0xd64>)
 80053ec:	ed83 7b00 	vstr	d7, [r3]
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <get_Straj+0xd68>)
 80053f2:	ed93 7b00 	vldr	d7, [r3]
 80053f6:	eeb1 7b47 	vneg.f64	d7, d7
 80053fa:	4b11      	ldr	r3, [pc, #68]	; (8005440 <get_Straj+0xd68>)
 80053fc:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8005400:	4b10      	ldr	r3, [pc, #64]	; (8005444 <get_Straj+0xd6c>)
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
        }
    }


    return qd;
 8005406:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <get_Straj+0xd60>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	ec43 2b17 	vmov	d7, r2, r3
}
 8005410:	eeb0 0b47 	vmov.f64	d0, d7
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	ecbd 8b06 	vpop	{d8-d10}
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	24000848 	.word	0x24000848
 8005424:	24000870 	.word	0x24000870
 8005428:	24000890 	.word	0x24000890
 800542c:	24000470 	.word	0x24000470
 8005430:	24000008 	.word	0x24000008
 8005434:	24000440 	.word	0x24000440
 8005438:	24000448 	.word	0x24000448
 800543c:	24000450 	.word	0x24000450
 8005440:	24000458 	.word	0x24000458
 8005444:	24000828 	.word	0x24000828

08005448 <update_ScurveTraj>:


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax, double *params){
 8005448:	b580      	push	{r7, lr}
 800544a:	ed2d 8b04 	vpush	{d8-d9}
 800544e:	b092      	sub	sp, #72	; 0x48
 8005450:	af00      	add	r7, sp, #0
 8005452:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8005456:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 800545a:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 800545e:	ed87 3b08 	vstr	d3, [r7, #32]
 8005462:	ed87 4b06 	vstr	d4, [r7, #24]
 8005466:	ed87 5b04 	vstr	d5, [r7, #16]
 800546a:	ed87 6b02 	vstr	d6, [r7, #8]
 800546e:	6078      	str	r0, [r7, #4]

	jmin = -jmax;
 8005470:	ed97 7b02 	vldr	d7, [r7, #8]
 8005474:	eeb1 7b47 	vneg.f64	d7, d7
 8005478:	4b9e      	ldr	r3, [pc, #632]	; (80056f4 <update_ScurveTraj+0x2ac>)
 800547a:	ed83 7b00 	vstr	d7, [r3]
	amin = -amax;
 800547e:	ed97 7b04 	vldr	d7, [r7, #16]
 8005482:	eeb1 7b47 	vneg.f64	d7, d7
 8005486:	4b9c      	ldr	r3, [pc, #624]	; (80056f8 <update_ScurveTraj+0x2b0>)
 8005488:	ed83 7b00 	vstr	d7, [r3]
	vmin = -vmax;
 800548c:	ed97 7b06 	vldr	d7, [r7, #24]
 8005490:	eeb1 7b47 	vneg.f64	d7, d7
 8005494:	4b99      	ldr	r3, [pc, #612]	; (80056fc <update_ScurveTraj+0x2b4>)
 8005496:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 800549a:	4999      	ldr	r1, [pc, #612]	; (8005700 <update_ScurveTraj+0x2b8>)
 800549c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054a0:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 80054a4:	4997      	ldr	r1, [pc, #604]	; (8005704 <update_ScurveTraj+0x2bc>)
 80054a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054aa:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 80054ae:	4b95      	ldr	r3, [pc, #596]	; (8005704 <update_ScurveTraj+0x2bc>)
 80054b0:	ed93 6b00 	vldr	d6, [r3]
 80054b4:	4b92      	ldr	r3, [pc, #584]	; (8005700 <update_ScurveTraj+0x2b8>)
 80054b6:	ed93 7b00 	vldr	d7, [r3]
 80054ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c2:	d548      	bpl.n	8005556 <update_ScurveTraj+0x10e>

		flagInv = true;
 80054c4:	4b90      	ldr	r3, [pc, #576]	; (8005708 <update_ScurveTraj+0x2c0>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]

		qi = -qi;
 80054ca:	4b8d      	ldr	r3, [pc, #564]	; (8005700 <update_ScurveTraj+0x2b8>)
 80054cc:	ed93 7b00 	vldr	d7, [r3]
 80054d0:	eeb1 7b47 	vneg.f64	d7, d7
 80054d4:	4b8a      	ldr	r3, [pc, #552]	; (8005700 <update_ScurveTraj+0x2b8>)
 80054d6:	ed83 7b00 	vstr	d7, [r3]
		qf = -qf;
 80054da:	4b8a      	ldr	r3, [pc, #552]	; (8005704 <update_ScurveTraj+0x2bc>)
 80054dc:	ed93 7b00 	vldr	d7, [r3]
 80054e0:	eeb1 7b47 	vneg.f64	d7, d7
 80054e4:	4b87      	ldr	r3, [pc, #540]	; (8005704 <update_ScurveTraj+0x2bc>)
 80054e6:	ed83 7b00 	vstr	d7, [r3]
		vi = -vi;
 80054ea:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80054ee:	eeb1 7b47 	vneg.f64	d7, d7
 80054f2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		vf = -vf;
 80054f6:	ed97 7b08 	vldr	d7, [r7, #32]
 80054fa:	eeb1 7b47 	vneg.f64	d7, d7
 80054fe:	ed87 7b08 	vstr	d7, [r7, #32]

		vmax = -vmin;
 8005502:	4b7e      	ldr	r3, [pc, #504]	; (80056fc <update_ScurveTraj+0x2b4>)
 8005504:	ed93 7b00 	vldr	d7, [r3]
 8005508:	eeb1 7b47 	vneg.f64	d7, d7
 800550c:	ed87 7b06 	vstr	d7, [r7, #24]
		vmin = -vmax;
 8005510:	ed97 7b06 	vldr	d7, [r7, #24]
 8005514:	eeb1 7b47 	vneg.f64	d7, d7
 8005518:	4b78      	ldr	r3, [pc, #480]	; (80056fc <update_ScurveTraj+0x2b4>)
 800551a:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 800551e:	4b76      	ldr	r3, [pc, #472]	; (80056f8 <update_ScurveTraj+0x2b0>)
 8005520:	ed93 7b00 	vldr	d7, [r3]
 8005524:	eeb1 7b47 	vneg.f64	d7, d7
 8005528:	ed87 7b04 	vstr	d7, [r7, #16]
		amin = -amax;
 800552c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005530:	eeb1 7b47 	vneg.f64	d7, d7
 8005534:	4b70      	ldr	r3, [pc, #448]	; (80056f8 <update_ScurveTraj+0x2b0>)
 8005536:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 800553a:	4b6e      	ldr	r3, [pc, #440]	; (80056f4 <update_ScurveTraj+0x2ac>)
 800553c:	ed93 7b00 	vldr	d7, [r3]
 8005540:	eeb1 7b47 	vneg.f64	d7, d7
 8005544:	ed87 7b02 	vstr	d7, [r7, #8]
		jmin = -jmax;
 8005548:	ed97 7b02 	vldr	d7, [r7, #8]
 800554c:	eeb1 7b47 	vneg.f64	d7, d7
 8005550:	4b68      	ldr	r3, [pc, #416]	; (80056f4 <update_ScurveTraj+0x2ac>)
 8005552:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 8005556:	ed97 6b08 	vldr	d6, [r7, #32]
 800555a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800555e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005562:	eeb0 6bc7 	vabs.f64	d6, d7
 8005566:	ed97 7b02 	vldr	d7, [r7, #8]
 800556a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800556e:	eeb0 0b45 	vmov.f64	d0, d5
 8005572:	f00c f931 	bl	80117d8 <sqrt>
 8005576:	eeb0 4b40 	vmov.f64	d4, d0
 800557a:	ed97 5b04 	vldr	d5, [r7, #16]
 800557e:	ed97 6b02 	vldr	d6, [r7, #8]
 8005582:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005586:	eeb4 4bc7 	vcmpe.f64	d4, d7
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	d512      	bpl.n	80055b6 <update_ScurveTraj+0x16e>
 8005590:	ed97 6b08 	vldr	d6, [r7, #32]
 8005594:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005598:	ee36 7b47 	vsub.f64	d7, d6, d7
 800559c:	eeb0 6bc7 	vabs.f64	d6, d7
 80055a0:	ed97 7b02 	vldr	d7, [r7, #8]
 80055a4:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80055a8:	eeb0 0b45 	vmov.f64	d0, d5
 80055ac:	f00c f914 	bl	80117d8 <sqrt>
 80055b0:	eeb0 7b40 	vmov.f64	d7, d0
 80055b4:	e005      	b.n	80055c2 <update_ScurveTraj+0x17a>
 80055b6:	ed97 5b04 	vldr	d5, [r7, #16]
 80055ba:	ed97 6b02 	vldr	d6, [r7, #8]
 80055be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80055c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80055c6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44


	if (Tjaux<amax/jmax){
 80055ca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80055ce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80055d2:	ed97 4b04 	vldr	d4, [r7, #16]
 80055d6:	ed97 5b02 	vldr	d5, [r7, #8]
 80055da:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80055de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80055e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e6:	d400      	bmi.n	80055ea <update_ScurveTraj+0x1a2>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 80055e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 80055ea:	ed97 6b06 	vldr	d6, [r7, #24]
 80055ee:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80055f2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80055f6:	ed97 7b02 	vldr	d7, [r7, #8]
 80055fa:	ee26 8b07 	vmul.f64	d8, d6, d7
 80055fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005602:	ed97 0b04 	vldr	d0, [r7, #16]
 8005606:	f00b fe67 	bl	80112d8 <pow>
 800560a:	eeb0 7b40 	vmov.f64	d7, d0
 800560e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005616:	d51d      	bpl.n	8005654 <update_ScurveTraj+0x20c>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 8005618:	ed97 6b06 	vldr	d6, [r7, #24]
 800561c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005620:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005624:	eeb0 6bc7 	vabs.f64	d6, d7
 8005628:	ed97 7b02 	vldr	d7, [r7, #8]
 800562c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005630:	eeb0 0b45 	vmov.f64	d0, d5
 8005634:	f00c f8d0 	bl	80117d8 <sqrt>
 8005638:	eeb0 7b40 	vmov.f64	d7, d0
 800563c:	4b33      	ldr	r3, [pc, #204]	; (800570c <update_ScurveTraj+0x2c4>)
 800563e:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 8005642:	4b32      	ldr	r3, [pc, #200]	; (800570c <update_ScurveTraj+0x2c4>)
 8005644:	ed93 7b00 	vldr	d7, [r3]
 8005648:	ee37 7b07 	vadd.f64	d7, d7, d7
 800564c:	4b30      	ldr	r3, [pc, #192]	; (8005710 <update_ScurveTraj+0x2c8>)
 800564e:	ed83 7b00 	vstr	d7, [r3]
 8005652:	e01a      	b.n	800568a <update_ScurveTraj+0x242>
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 8005654:	ed97 5b04 	vldr	d5, [r7, #16]
 8005658:	ed97 6b02 	vldr	d6, [r7, #8]
 800565c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005660:	4b2a      	ldr	r3, [pc, #168]	; (800570c <update_ScurveTraj+0x2c4>)
 8005662:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1+(vmax-vi)/amax;
 8005666:	ed97 6b06 	vldr	d6, [r7, #24]
 800566a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800566e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005672:	ed97 7b04 	vldr	d7, [r7, #16]
 8005676:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800567a:	4b24      	ldr	r3, [pc, #144]	; (800570c <update_ScurveTraj+0x2c4>)
 800567c:	ed93 7b00 	vldr	d7, [r3]
 8005680:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005684:	4b22      	ldr	r3, [pc, #136]	; (8005710 <update_ScurveTraj+0x2c8>)
 8005686:	ed83 7b00 	vstr	d7, [r3]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 800568a:	ed97 6b06 	vldr	d6, [r7, #24]
 800568e:	ed97 7b08 	vldr	d7, [r7, #32]
 8005692:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005696:	ed97 7b02 	vldr	d7, [r7, #8]
 800569a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800569e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80056a2:	ed97 0b04 	vldr	d0, [r7, #16]
 80056a6:	f00b fe17 	bl	80112d8 <pow>
 80056aa:	eeb0 7b40 	vmov.f64	d7, d0
 80056ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80056b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b6:	d531      	bpl.n	800571c <update_ScurveTraj+0x2d4>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 80056b8:	ed97 6b06 	vldr	d6, [r7, #24]
 80056bc:	ed97 7b08 	vldr	d7, [r7, #32]
 80056c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80056c4:	eeb0 6bc7 	vabs.f64	d6, d7
 80056c8:	ed97 7b02 	vldr	d7, [r7, #8]
 80056cc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80056d0:	eeb0 0b45 	vmov.f64	d0, d5
 80056d4:	f00c f880 	bl	80117d8 <sqrt>
 80056d8:	eeb0 7b40 	vmov.f64	d7, d0
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <update_ScurveTraj+0x2cc>)
 80056de:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 80056e2:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <update_ScurveTraj+0x2cc>)
 80056e4:	ed93 7b00 	vldr	d7, [r3]
 80056e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <update_ScurveTraj+0x2d0>)
 80056ee:	ed83 7b00 	vstr	d7, [r3]
 80056f2:	e02e      	b.n	8005752 <update_ScurveTraj+0x30a>
 80056f4:	24000460 	.word	0x24000460
 80056f8:	24000478 	.word	0x24000478
 80056fc:	24000468 	.word	0x24000468
 8005700:	24000888 	.word	0x24000888
 8005704:	24000890 	.word	0x24000890
 8005708:	24000828 	.word	0x24000828
 800570c:	24000868 	.word	0x24000868
 8005710:	24000850 	.word	0x24000850
 8005714:	24000870 	.word	0x24000870
 8005718:	24000858 	.word	0x24000858
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 800571c:	ed97 5b04 	vldr	d5, [r7, #16]
 8005720:	ed97 6b02 	vldr	d6, [r7, #8]
 8005724:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005728:	4b95      	ldr	r3, [pc, #596]	; (8005980 <update_ScurveTraj+0x538>)
 800572a:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2+(vmax-vf)/amax;
 800572e:	ed97 6b06 	vldr	d6, [r7, #24]
 8005732:	ed97 7b08 	vldr	d7, [r7, #32]
 8005736:	ee36 5b47 	vsub.f64	d5, d6, d7
 800573a:	ed97 7b04 	vldr	d7, [r7, #16]
 800573e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005742:	4b8f      	ldr	r3, [pc, #572]	; (8005980 <update_ScurveTraj+0x538>)
 8005744:	ed93 7b00 	vldr	d7, [r3]
 8005748:	ee36 7b07 	vadd.f64	d7, d6, d7
 800574c:	4b8d      	ldr	r3, [pc, #564]	; (8005984 <update_ScurveTraj+0x53c>)
 800574e:	ed83 7b00 	vstr	d7, [r3]
	}


	Tv = (qf-qi)/vmax - (Ta/2)*(1+(vi/vmax))-(Td/2)*(1+(vf/vmax));
 8005752:	4b8d      	ldr	r3, [pc, #564]	; (8005988 <update_ScurveTraj+0x540>)
 8005754:	ed93 6b00 	vldr	d6, [r3]
 8005758:	4b8c      	ldr	r3, [pc, #560]	; (800598c <update_ScurveTraj+0x544>)
 800575a:	ed93 7b00 	vldr	d7, [r3]
 800575e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005762:	ed97 7b06 	vldr	d7, [r7, #24]
 8005766:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800576a:	4b89      	ldr	r3, [pc, #548]	; (8005990 <update_ScurveTraj+0x548>)
 800576c:	ed93 7b00 	vldr	d7, [r3]
 8005770:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8005774:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8005778:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800577c:	ed97 4b06 	vldr	d4, [r7, #24]
 8005780:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005784:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8005788:	ee37 7b04 	vadd.f64	d7, d7, d4
 800578c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005790:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005794:	4b7b      	ldr	r3, [pc, #492]	; (8005984 <update_ScurveTraj+0x53c>)
 8005796:	ed93 7b00 	vldr	d7, [r3]
 800579a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800579e:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80057a2:	ed97 3b08 	vldr	d3, [r7, #32]
 80057a6:	ed97 4b06 	vldr	d4, [r7, #24]
 80057aa:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80057ae:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80057b2:	ee37 7b04 	vadd.f64	d7, d7, d4
 80057b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80057ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80057be:	4b75      	ldr	r3, [pc, #468]	; (8005994 <update_ScurveTraj+0x54c>)
 80057c0:	ed83 7b00 	vstr	d7, [r3]

	if (Tv>0){
 80057c4:	4b73      	ldr	r3, [pc, #460]	; (8005994 <update_ScurveTraj+0x54c>)
 80057c6:	ed93 7b00 	vldr	d7, [r3]
 80057ca:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80057ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d2:	f300 82d5 	bgt.w	8005d80 <update_ScurveTraj+0x938>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 80057d6:	ed97 5b04 	vldr	d5, [r7, #16]
 80057da:	ed97 6b02 	vldr	d6, [r7, #8]
 80057de:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80057e2:	4b6d      	ldr	r3, [pc, #436]	; (8005998 <update_ScurveTraj+0x550>)
 80057e4:	ed83 7b00 	vstr	d7, [r3]
		Tj2=Tj1;
 80057e8:	4b6b      	ldr	r3, [pc, #428]	; (8005998 <update_ScurveTraj+0x550>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	4964      	ldr	r1, [pc, #400]	; (8005980 <update_ScurveTraj+0x538>)
 80057f0:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 80057f4:	4b68      	ldr	r3, [pc, #416]	; (8005998 <update_ScurveTraj+0x550>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	4968      	ldr	r1, [pc, #416]	; (800599c <update_ScurveTraj+0x554>)
 80057fc:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8005800:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8005804:	ed97 0b04 	vldr	d0, [r7, #16]
 8005808:	f00b fd66 	bl	80112d8 <pow>
 800580c:	eeb0 9b40 	vmov.f64	d9, d0
 8005810:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005814:	ed97 0b02 	vldr	d0, [r7, #8]
 8005818:	f00b fd5e 	bl	80112d8 <pow>
 800581c:	eeb0 7b40 	vmov.f64	d7, d0
 8005820:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8005824:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005828:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800582c:	f00b fd54 	bl	80112d8 <pow>
 8005830:	eeb0 9b40 	vmov.f64	d9, d0
 8005834:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005838:	ed97 0b08 	vldr	d0, [r7, #32]
 800583c:	f00b fd4c 	bl	80112d8 <pow>
 8005840:	eeb0 7b40 	vmov.f64	d7, d0
 8005844:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005848:	ee37 7b07 	vadd.f64	d7, d7, d7
 800584c:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005850:	4b4d      	ldr	r3, [pc, #308]	; (8005988 <update_ScurveTraj+0x540>)
 8005852:	ed93 5b00 	vldr	d5, [r3]
 8005856:	4b4d      	ldr	r3, [pc, #308]	; (800598c <update_ScurveTraj+0x544>)
 8005858:	ed93 7b00 	vldr	d7, [r3]
 800585c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005860:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8005864:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005868:	ed97 3b04 	vldr	d3, [r7, #16]
 800586c:	ed97 4b02 	vldr	d4, [r7, #8]
 8005870:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005874:	ee37 4b07 	vadd.f64	d4, d7, d7
 8005878:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800587c:	ed97 7b08 	vldr	d7, [r7, #32]
 8005880:	ee33 7b07 	vadd.f64	d7, d3, d7
 8005884:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005888:	ee35 5b47 	vsub.f64	d5, d5, d7
 800588c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005890:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005894:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005898:	4b41      	ldr	r3, [pc, #260]	; (80059a0 <update_ScurveTraj+0x558>)
 800589a:	ed83 7b00 	vstr	d7, [r3]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 800589e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058a2:	ed97 0b04 	vldr	d0, [r7, #16]
 80058a6:	f00b fd17 	bl	80112d8 <pow>
 80058aa:	eeb0 5b40 	vmov.f64	d5, d0
 80058ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80058b2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80058b6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80058ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80058be:	ee36 8b47 	vsub.f64	d8, d6, d7
 80058c2:	4b37      	ldr	r3, [pc, #220]	; (80059a0 <update_ScurveTraj+0x558>)
 80058c4:	ed93 7b00 	vldr	d7, [r3]
 80058c8:	eeb0 0b47 	vmov.f64	d0, d7
 80058cc:	f00b ff84 	bl	80117d8 <sqrt>
 80058d0:	eeb0 7b40 	vmov.f64	d7, d0
 80058d4:	ee38 5b07 	vadd.f64	d5, d8, d7
 80058d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80058dc:	ee37 6b07 	vadd.f64	d6, d7, d7
 80058e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80058e4:	4b2a      	ldr	r3, [pc, #168]	; (8005990 <update_ScurveTraj+0x548>)
 80058e6:	ed83 7b00 	vstr	d7, [r3]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 80058ea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058ee:	ed97 0b04 	vldr	d0, [r7, #16]
 80058f2:	f00b fcf1 	bl	80112d8 <pow>
 80058f6:	eeb0 5b40 	vmov.f64	d5, d0
 80058fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80058fe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005902:	ed97 7b08 	vldr	d7, [r7, #32]
 8005906:	ee37 7b07 	vadd.f64	d7, d7, d7
 800590a:	ee36 8b47 	vsub.f64	d8, d6, d7
 800590e:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <update_ScurveTraj+0x558>)
 8005910:	ed93 7b00 	vldr	d7, [r3]
 8005914:	eeb0 0b47 	vmov.f64	d0, d7
 8005918:	f00b ff5e 	bl	80117d8 <sqrt>
 800591c:	eeb0 7b40 	vmov.f64	d7, d0
 8005920:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005924:	ed97 7b04 	vldr	d7, [r7, #16]
 8005928:	ee37 6b07 	vadd.f64	d6, d7, d7
 800592c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005930:	4b14      	ldr	r3, [pc, #80]	; (8005984 <update_ScurveTraj+0x53c>)
 8005932:	ed83 7b00 	vstr	d7, [r3]
		Tv=0;
 8005936:	4917      	ldr	r1, [pc, #92]	; (8005994 <update_ScurveTraj+0x54c>)
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 8005944:	4b15      	ldr	r3, [pc, #84]	; (800599c <update_ScurveTraj+0x554>)
 8005946:	ed93 7b00 	vldr	d7, [r3]
 800594a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800594e:	4b10      	ldr	r3, [pc, #64]	; (8005990 <update_ScurveTraj+0x548>)
 8005950:	ed93 7b00 	vldr	d7, [r3]
 8005954:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595c:	f300 81e4 	bgt.w	8005d28 <update_ScurveTraj+0x8e0>
 8005960:	4b0e      	ldr	r3, [pc, #56]	; (800599c <update_ScurveTraj+0x554>)
 8005962:	ed93 7b00 	vldr	d7, [r3]
 8005966:	ee37 6b07 	vadd.f64	d6, d7, d7
 800596a:	4b06      	ldr	r3, [pc, #24]	; (8005984 <update_ScurveTraj+0x53c>)
 800596c:	ed93 7b00 	vldr	d7, [r3]
 8005970:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005978:	f340 8202 	ble.w	8005d80 <update_ScurveTraj+0x938>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 800597c:	e1d4      	b.n	8005d28 <update_ScurveTraj+0x8e0>
 800597e:	bf00      	nop
 8005980:	24000870 	.word	0x24000870
 8005984:	24000858 	.word	0x24000858
 8005988:	24000890 	.word	0x24000890
 800598c:	24000888 	.word	0x24000888
 8005990:	24000850 	.word	0x24000850
 8005994:	24000860 	.word	0x24000860
 8005998:	24000868 	.word	0x24000868
 800599c:	24000878 	.word	0x24000878
 80059a0:	24000880 	.word	0x24000880

				amax=amax*0.99;
 80059a4:	ed97 7b04 	vldr	d7, [r7, #16]
 80059a8:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8005d00 <update_ScurveTraj+0x8b8>
 80059ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80059b0:	ed87 7b04 	vstr	d7, [r7, #16]
				Tj=amax/jmax;
 80059b4:	ed97 5b04 	vldr	d5, [r7, #16]
 80059b8:	ed97 6b02 	vldr	d6, [r7, #8]
 80059bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80059c0:	4bd1      	ldr	r3, [pc, #836]	; (8005d08 <update_ScurveTraj+0x8c0>)
 80059c2:	ed83 7b00 	vstr	d7, [r3]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 80059c6:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 80059ca:	ed97 0b04 	vldr	d0, [r7, #16]
 80059ce:	f00b fc83 	bl	80112d8 <pow>
 80059d2:	eeb0 9b40 	vmov.f64	d9, d0
 80059d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059da:	ed97 0b02 	vldr	d0, [r7, #8]
 80059de:	f00b fc7b 	bl	80112d8 <pow>
 80059e2:	eeb0 7b40 	vmov.f64	d7, d0
 80059e6:	ee89 8b07 	vdiv.f64	d8, d9, d7
 80059ea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059ee:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80059f2:	f00b fc71 	bl	80112d8 <pow>
 80059f6:	eeb0 9b40 	vmov.f64	d9, d0
 80059fa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059fe:	ed97 0b08 	vldr	d0, [r7, #32]
 8005a02:	f00b fc69 	bl	80112d8 <pow>
 8005a06:	eeb0 7b40 	vmov.f64	d7, d0
 8005a0a:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005a0e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a12:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005a16:	4bbd      	ldr	r3, [pc, #756]	; (8005d0c <update_ScurveTraj+0x8c4>)
 8005a18:	ed93 5b00 	vldr	d5, [r3]
 8005a1c:	4bbc      	ldr	r3, [pc, #752]	; (8005d10 <update_ScurveTraj+0x8c8>)
 8005a1e:	ed93 7b00 	vldr	d7, [r3]
 8005a22:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005a26:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8005a2a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005a2e:	ed97 3b04 	vldr	d3, [r7, #16]
 8005a32:	ed97 4b02 	vldr	d4, [r7, #8]
 8005a36:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005a3a:	ee37 4b07 	vadd.f64	d4, d7, d7
 8005a3e:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8005a42:	ed97 7b08 	vldr	d7, [r7, #32]
 8005a46:	ee33 7b07 	vadd.f64	d7, d3, d7
 8005a4a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005a4e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005a52:	ed97 7b04 	vldr	d7, [r7, #16]
 8005a56:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a5e:	4bad      	ldr	r3, [pc, #692]	; (8005d14 <update_ScurveTraj+0x8cc>)
 8005a60:	ed83 7b00 	vstr	d7, [r3]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005a64:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a68:	ed97 0b04 	vldr	d0, [r7, #16]
 8005a6c:	f00b fc34 	bl	80112d8 <pow>
 8005a70:	eeb0 5b40 	vmov.f64	d5, d0
 8005a74:	ed97 7b02 	vldr	d7, [r7, #8]
 8005a78:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005a7c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005a80:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a84:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005a88:	4ba2      	ldr	r3, [pc, #648]	; (8005d14 <update_ScurveTraj+0x8cc>)
 8005a8a:	ed93 7b00 	vldr	d7, [r3]
 8005a8e:	eeb0 0b47 	vmov.f64	d0, d7
 8005a92:	f00b fea1 	bl	80117d8 <sqrt>
 8005a96:	eeb0 7b40 	vmov.f64	d7, d0
 8005a9a:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005a9e:	ed97 7b04 	vldr	d7, [r7, #16]
 8005aa2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005aa6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005aaa:	4b9b      	ldr	r3, [pc, #620]	; (8005d18 <update_ScurveTraj+0x8d0>)
 8005aac:	ed83 7b00 	vstr	d7, [r3]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005ab0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005ab4:	ed97 0b04 	vldr	d0, [r7, #16]
 8005ab8:	f00b fc0e 	bl	80112d8 <pow>
 8005abc:	eeb0 5b40 	vmov.f64	d5, d0
 8005ac0:	ed97 7b02 	vldr	d7, [r7, #8]
 8005ac4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005ac8:	ed97 7b08 	vldr	d7, [r7, #32]
 8005acc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005ad0:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005ad4:	4b8f      	ldr	r3, [pc, #572]	; (8005d14 <update_ScurveTraj+0x8cc>)
 8005ad6:	ed93 7b00 	vldr	d7, [r3]
 8005ada:	eeb0 0b47 	vmov.f64	d0, d7
 8005ade:	f00b fe7b 	bl	80117d8 <sqrt>
 8005ae2:	eeb0 7b40 	vmov.f64	d7, d0
 8005ae6:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005aea:	ed97 7b04 	vldr	d7, [r7, #16]
 8005aee:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005af2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005af6:	4b89      	ldr	r3, [pc, #548]	; (8005d1c <update_ScurveTraj+0x8d4>)
 8005af8:	ed83 7b00 	vstr	d7, [r3]

				//print(f'{i}',amax)


				if (Ta<0){
 8005afc:	4b86      	ldr	r3, [pc, #536]	; (8005d18 <update_ScurveTraj+0x8d0>)
 8005afe:	ed93 7b00 	vldr	d7, [r3]
 8005b02:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	d576      	bpl.n	8005bfa <update_ScurveTraj+0x7b2>
					Ta=0;
 8005b0c:	4982      	ldr	r1, [pc, #520]	; (8005d18 <update_ScurveTraj+0x8d0>)
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 8005b1a:	4981      	ldr	r1, [pc, #516]	; (8005d20 <update_ScurveTraj+0x8d8>)
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 8005b28:	4b78      	ldr	r3, [pc, #480]	; (8005d0c <update_ScurveTraj+0x8c4>)
 8005b2a:	ed93 6b00 	vldr	d6, [r3]
 8005b2e:	4b78      	ldr	r3, [pc, #480]	; (8005d10 <update_ScurveTraj+0x8c8>)
 8005b30:	ed93 7b00 	vldr	d7, [r3]
 8005b34:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005b38:	ed97 6b08 	vldr	d6, [r7, #32]
 8005b3c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005b40:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005b44:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b48:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b4c:	4b73      	ldr	r3, [pc, #460]	; (8005d1c <update_ScurveTraj+0x8d4>)
 8005b4e:	ed83 7b00 	vstr	d7, [r3]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005b52:	4b6e      	ldr	r3, [pc, #440]	; (8005d0c <update_ScurveTraj+0x8c4>)
 8005b54:	ed93 6b00 	vldr	d6, [r3]
 8005b58:	4b6d      	ldr	r3, [pc, #436]	; (8005d10 <update_ScurveTraj+0x8c8>)
 8005b5a:	ed93 7b00 	vldr	d7, [r3]
 8005b5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b62:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b66:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005b6a:	4b68      	ldr	r3, [pc, #416]	; (8005d0c <update_ScurveTraj+0x8c4>)
 8005b6c:	ed93 6b00 	vldr	d6, [r3]
 8005b70:	4b67      	ldr	r3, [pc, #412]	; (8005d10 <update_ScurveTraj+0x8c8>)
 8005b72:	ed93 7b00 	vldr	d7, [r3]
 8005b76:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b7a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b7e:	eeb0 0b47 	vmov.f64	d0, d7
 8005b82:	f00b fba9 	bl	80112d8 <pow>
 8005b86:	eeb0 6b40 	vmov.f64	d6, d0
 8005b8a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b8e:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005b92:	ed97 6b08 	vldr	d6, [r7, #32]
 8005b96:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005b9a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b9e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005ba2:	eeb0 0b47 	vmov.f64	d0, d7
 8005ba6:	f00b fb97 	bl	80112d8 <pow>
 8005baa:	eeb0 5b40 	vmov.f64	d5, d0
 8005bae:	ed97 6b08 	vldr	d6, [r7, #32]
 8005bb2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005bb6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005bba:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005bbe:	ee39 6b07 	vadd.f64	d6, d9, d7
 8005bc2:	ed97 7b02 	vldr	d7, [r7, #8]
 8005bc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005bca:	eeb0 0b47 	vmov.f64	d0, d7
 8005bce:	f00b fe03 	bl	80117d8 <sqrt>
 8005bd2:	eeb0 7b40 	vmov.f64	d7, d0
 8005bd6:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005bda:	ed97 6b08 	vldr	d6, [r7, #32]
 8005bde:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005be2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005be6:	ed97 7b02 	vldr	d7, [r7, #8]
 8005bea:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005bee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005bf2:	4b4c      	ldr	r3, [pc, #304]	; (8005d24 <update_ScurveTraj+0x8dc>)
 8005bf4:	ed83 7b00 	vstr	d7, [r3]
					break;
 8005bf8:	e0c2      	b.n	8005d80 <update_ScurveTraj+0x938>
				}
				if (Td<0){
 8005bfa:	4b48      	ldr	r3, [pc, #288]	; (8005d1c <update_ScurveTraj+0x8d4>)
 8005bfc:	ed93 7b00 	vldr	d7, [r3]
 8005c00:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c08:	d400      	bmi.n	8005c0c <update_ScurveTraj+0x7c4>
 8005c0a:	e08d      	b.n	8005d28 <update_ScurveTraj+0x8e0>
					Td=0;
 8005c0c:	4943      	ldr	r1, [pc, #268]	; (8005d1c <update_ScurveTraj+0x8d4>)
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8005c1a:	4b3c      	ldr	r3, [pc, #240]	; (8005d0c <update_ScurveTraj+0x8c4>)
 8005c1c:	ed93 6b00 	vldr	d6, [r3]
 8005c20:	4b3b      	ldr	r3, [pc, #236]	; (8005d10 <update_ScurveTraj+0x8c8>)
 8005c22:	ed93 7b00 	vldr	d7, [r3]
 8005c26:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005c2a:	ed97 6b08 	vldr	d6, [r7, #32]
 8005c2e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005c32:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005c36:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005c3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005c3e:	4b36      	ldr	r3, [pc, #216]	; (8005d18 <update_ScurveTraj+0x8d0>)
 8005c40:	ed83 7b00 	vstr	d7, [r3]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005c44:	4b31      	ldr	r3, [pc, #196]	; (8005d0c <update_ScurveTraj+0x8c4>)
 8005c46:	ed93 6b00 	vldr	d6, [r3]
 8005c4a:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <update_ScurveTraj+0x8c8>)
 8005c4c:	ed93 7b00 	vldr	d7, [r3]
 8005c50:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005c54:	ed97 7b02 	vldr	d7, [r7, #8]
 8005c58:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005c5c:	4b2b      	ldr	r3, [pc, #172]	; (8005d0c <update_ScurveTraj+0x8c4>)
 8005c5e:	ed93 6b00 	vldr	d6, [r3]
 8005c62:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <update_ScurveTraj+0x8c8>)
 8005c64:	ed93 7b00 	vldr	d7, [r3]
 8005c68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c6c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c70:	eeb0 0b47 	vmov.f64	d0, d7
 8005c74:	f00b fb30 	bl	80112d8 <pow>
 8005c78:	eeb0 6b40 	vmov.f64	d6, d0
 8005c7c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005c80:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005c84:	ed97 6b08 	vldr	d6, [r7, #32]
 8005c88:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005c8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c90:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c94:	eeb0 0b47 	vmov.f64	d0, d7
 8005c98:	f00b fb1e 	bl	80112d8 <pow>
 8005c9c:	eeb0 5b40 	vmov.f64	d5, d0
 8005ca0:	ed97 6b08 	vldr	d6, [r7, #32]
 8005ca4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005ca8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005cac:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005cb0:	ee39 6b47 	vsub.f64	d6, d9, d7
 8005cb4:	ed97 7b02 	vldr	d7, [r7, #8]
 8005cb8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005cbc:	eeb0 0b47 	vmov.f64	d0, d7
 8005cc0:	f00b fd8a 	bl	80117d8 <sqrt>
 8005cc4:	eeb0 7b40 	vmov.f64	d7, d0
 8005cc8:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005ccc:	ed97 6b08 	vldr	d6, [r7, #32]
 8005cd0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005cd4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005cd8:	ed97 7b02 	vldr	d7, [r7, #8]
 8005cdc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005ce0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005ce4:	4b0e      	ldr	r3, [pc, #56]	; (8005d20 <update_ScurveTraj+0x8d8>)
 8005ce6:	ed83 7b00 	vstr	d7, [r3]
					Tj2=0;
 8005cea:	490e      	ldr	r1, [pc, #56]	; (8005d24 <update_ScurveTraj+0x8dc>)
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8005cf8:	e042      	b.n	8005d80 <update_ScurveTraj+0x938>
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w
 8005d00:	7ae147ae 	.word	0x7ae147ae
 8005d04:	3fefae14 	.word	0x3fefae14
 8005d08:	24000878 	.word	0x24000878
 8005d0c:	24000890 	.word	0x24000890
 8005d10:	24000888 	.word	0x24000888
 8005d14:	24000880 	.word	0x24000880
 8005d18:	24000850 	.word	0x24000850
 8005d1c:	24000858 	.word	0x24000858
 8005d20:	24000868 	.word	0x24000868
 8005d24:	24000870 	.word	0x24000870
			while (!(Ta>2*Tj && Td>2*Tj)){
 8005d28:	4b33      	ldr	r3, [pc, #204]	; (8005df8 <update_ScurveTraj+0x9b0>)
 8005d2a:	ed93 7b00 	vldr	d7, [r3]
 8005d2e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005d32:	4b32      	ldr	r3, [pc, #200]	; (8005dfc <update_ScurveTraj+0x9b4>)
 8005d34:	ed93 7b00 	vldr	d7, [r3]
 8005d38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d40:	bf4c      	ite	mi
 8005d42:	2301      	movmi	r3, #1
 8005d44:	2300      	movpl	r3, #0
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f083 0301 	eor.w	r3, r3, #1
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f47f ae28 	bne.w	80059a4 <update_ScurveTraj+0x55c>
 8005d54:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <update_ScurveTraj+0x9b0>)
 8005d56:	ed93 7b00 	vldr	d7, [r3]
 8005d5a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005d5e:	4b28      	ldr	r3, [pc, #160]	; (8005e00 <update_ScurveTraj+0x9b8>)
 8005d60:	ed93 7b00 	vldr	d7, [r3]
 8005d64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6c:	bf4c      	ite	mi
 8005d6e:	2301      	movmi	r3, #1
 8005d70:	2300      	movpl	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f083 0301 	eor.w	r3, r3, #1
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f47f ae12 	bne.w	80059a4 <update_ScurveTraj+0x55c>
				}
			}
		}
	}

	*(params)=Tj1;
 8005d80:	4b20      	ldr	r3, [pc, #128]	; (8005e04 <update_ScurveTraj+0x9bc>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0108 	add.w	r1, r3, #8
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <update_ScurveTraj+0x9c0>)
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f103 0110 	add.w	r1, r3, #16
 8005da2:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <update_ScurveTraj+0x9b0>)
 8005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da8:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f103 0118 	add.w	r1, r3, #24
 8005db2:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <update_ScurveTraj+0x9b4>)
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f103 0120 	add.w	r1, r3, #32
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <update_ScurveTraj+0x9b8>)
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005dd2:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <update_ScurveTraj+0x9c4>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <update_ScurveTraj+0x9c8>)
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	e9c1 2300 	strd	r2, r3, [r1]

}
 8005dec:	bf00      	nop
 8005dee:	3748      	adds	r7, #72	; 0x48
 8005df0:	46bd      	mov	sp, r7
 8005df2:	ecbd 8b04 	vpop	{d8-d9}
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	24000878 	.word	0x24000878
 8005dfc:	24000850 	.word	0x24000850
 8005e00:	24000858 	.word	0x24000858
 8005e04:	24000868 	.word	0x24000868
 8005e08:	24000870 	.word	0x24000870
 8005e0c:	24000860 	.word	0x24000860
 8005e10:	24000848 	.word	0x24000848
 8005e14:	00000000 	.word	0x00000000

08005e18 <setProfilTimer>:


void setProfilTimer(void){
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8005e1e:	4bb8      	ldr	r3, [pc, #736]	; (8006100 <setProfilTimer+0x2e8>)
 8005e20:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e24:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80060e0 <setProfilTimer+0x2c8>
 8005e28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e2c:	4bb4      	ldr	r3, [pc, #720]	; (8006100 <setProfilTimer+0x2e8>)
 8005e2e:	ed83 7b04 	vstr	d7, [r3, #16]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 8005e32:	4bb4      	ldr	r3, [pc, #720]	; (8006104 <setProfilTimer+0x2ec>)
 8005e34:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e38:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 80060e0 <setProfilTimer+0x2c8>
 8005e3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e40:	4bb0      	ldr	r3, [pc, #704]	; (8006104 <setProfilTimer+0x2ec>)
 8005e42:	ed83 7b04 	vstr	d7, [r3, #16]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 8005e46:	4bb0      	ldr	r3, [pc, #704]	; (8006108 <setProfilTimer+0x2f0>)
 8005e48:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e4c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80060e0 <setProfilTimer+0x2c8>
 8005e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e54:	4bac      	ldr	r3, [pc, #688]	; (8006108 <setProfilTimer+0x2f0>)
 8005e56:	ed83 7b04 	vstr	d7, [r3, #16]


    period[0] = COUNTERPERIOD(motor1.rpm);
 8005e5a:	4bac      	ldr	r3, [pc, #688]	; (800610c <setProfilTimer+0x2f4>)
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005e66:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005e6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e6e:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 80060e8 <setProfilTimer+0x2d0>
 8005e72:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005e76:	4ba2      	ldr	r3, [pc, #648]	; (8006100 <setProfilTimer+0x2e8>)
 8005e78:	ed93 7b04 	vldr	d7, [r3, #16]
 8005e7c:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 80060f0 <setProfilTimer+0x2d8>
 8005e80:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005e84:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 80060f8 <setProfilTimer+0x2e0>
 8005e88:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005e8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005e90:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005e94:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e98:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005e9c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005ea0:	4b9b      	ldr	r3, [pc, #620]	; (8006110 <setProfilTimer+0x2f8>)
 8005ea2:	ed83 7b00 	vstr	d7, [r3]
    period[1] = COUNTERPERIOD(motor2.rpm);
 8005ea6:	4b99      	ldr	r3, [pc, #612]	; (800610c <setProfilTimer+0x2f4>)
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005eb2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005eb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005eba:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 80060e8 <setProfilTimer+0x2d0>
 8005ebe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005ec2:	4b90      	ldr	r3, [pc, #576]	; (8006104 <setProfilTimer+0x2ec>)
 8005ec4:	ed93 7b04 	vldr	d7, [r3, #16]
 8005ec8:	ed9f 5b89 	vldr	d5, [pc, #548]	; 80060f0 <setProfilTimer+0x2d8>
 8005ecc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005ed0:	ed9f 4b89 	vldr	d4, [pc, #548]	; 80060f8 <setProfilTimer+0x2e0>
 8005ed4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005ed8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005edc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005ee0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ee4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005ee8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005eec:	4b88      	ldr	r3, [pc, #544]	; (8006110 <setProfilTimer+0x2f8>)
 8005eee:	ed83 7b02 	vstr	d7, [r3, #8]
    period[3] = COUNTERPERIOD(motor3.rpm);
 8005ef2:	4b86      	ldr	r3, [pc, #536]	; (800610c <setProfilTimer+0x2f4>)
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005efe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f06:	ed9f 5b78 	vldr	d5, [pc, #480]	; 80060e8 <setProfilTimer+0x2d0>
 8005f0a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005f0e:	4b7e      	ldr	r3, [pc, #504]	; (8006108 <setProfilTimer+0x2f0>)
 8005f10:	ed93 7b04 	vldr	d7, [r3, #16]
 8005f14:	ed9f 5b76 	vldr	d5, [pc, #472]	; 80060f0 <setProfilTimer+0x2d8>
 8005f18:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005f1c:	ed9f 4b76 	vldr	d4, [pc, #472]	; 80060f8 <setProfilTimer+0x2e0>
 8005f20:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005f24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005f28:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f38:	4b75      	ldr	r3, [pc, #468]	; (8006110 <setProfilTimer+0x2f8>)
 8005f3a:	ed83 7b06 	vstr	d7, [r3, #24]

	// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo

	for (int i = 0; i < 3; i++) {
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]
 8005f42:	e05b      	b.n	8005ffc <setProfilTimer+0x1e4>
		periodError[i] = period[i] - (double)((int32_t) period[i]);
 8005f44:	4a72      	ldr	r2, [pc, #456]	; (8006110 <setProfilTimer+0x2f8>)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	ed93 6b00 	vldr	d6, [r3]
 8005f50:	4a6f      	ldr	r2, [pc, #444]	; (8006110 <setProfilTimer+0x2f8>)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4413      	add	r3, r2
 8005f58:	ed93 7b00 	vldr	d7, [r3]
 8005f5c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005f60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005f64:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f68:	4a6a      	ldr	r2, [pc, #424]	; (8006114 <setProfilTimer+0x2fc>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4413      	add	r3, r2
 8005f70:	ed83 7b00 	vstr	d7, [r3]
		accumulatedError[i] += periodError[i];
 8005f74:	4a68      	ldr	r2, [pc, #416]	; (8006118 <setProfilTimer+0x300>)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	ed93 6b00 	vldr	d6, [r3]
 8005f80:	4a64      	ldr	r2, [pc, #400]	; (8006114 <setProfilTimer+0x2fc>)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4413      	add	r3, r2
 8005f88:	ed93 7b00 	vldr	d7, [r3]
 8005f8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005f90:	4a61      	ldr	r2, [pc, #388]	; (8006118 <setProfilTimer+0x300>)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	4413      	add	r3, r2
 8005f98:	ed83 7b00 	vstr	d7, [r3]
		if (accumulatedError[i] > 1) {
 8005f9c:	4a5e      	ldr	r2, [pc, #376]	; (8006118 <setProfilTimer+0x300>)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	ed93 7b00 	vldr	d7, [r3]
 8005fa8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005fac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb4:	dd1f      	ble.n	8005ff6 <setProfilTimer+0x1de>
			period[i] += 1;
 8005fb6:	4a56      	ldr	r2, [pc, #344]	; (8006110 <setProfilTimer+0x2f8>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	ed93 7b00 	vldr	d7, [r3]
 8005fc2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005fc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005fca:	4a51      	ldr	r2, [pc, #324]	; (8006110 <setProfilTimer+0x2f8>)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	ed83 7b00 	vstr	d7, [r3]
			accumulatedError[i] -=  1;
 8005fd6:	4a50      	ldr	r2, [pc, #320]	; (8006118 <setProfilTimer+0x300>)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4413      	add	r3, r2
 8005fde:	ed93 7b00 	vldr	d7, [r3]
 8005fe2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005fe6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005fea:	4a4b      	ldr	r2, [pc, #300]	; (8006118 <setProfilTimer+0x300>)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 3; i++) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	607b      	str	r3, [r7, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	dda0      	ble.n	8005f44 <setProfilTimer+0x12c>
		}
	}

    //Escritura del registro ARR
    __HAL_TIM_SET_AUTORELOAD(&htim12,period[0]);
 8006002:	4b43      	ldr	r3, [pc, #268]	; (8006110 <setProfilTimer+0x2f8>)
 8006004:	ed93 7b00 	vldr	d7, [r3]
 8006008:	4b44      	ldr	r3, [pc, #272]	; (800611c <setProfilTimer+0x304>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006010:	ee17 2a90 	vmov	r2, s15
 8006014:	62da      	str	r2, [r3, #44]	; 0x2c
 8006016:	4b3e      	ldr	r3, [pc, #248]	; (8006110 <setProfilTimer+0x2f8>)
 8006018:	ed93 7b00 	vldr	d7, [r3]
 800601c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006020:	ee17 2a90 	vmov	r2, s15
 8006024:	4b3d      	ldr	r3, [pc, #244]	; (800611c <setProfilTimer+0x304>)
 8006026:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,period[1]);
 8006028:	4b39      	ldr	r3, [pc, #228]	; (8006110 <setProfilTimer+0x2f8>)
 800602a:	ed93 7b02 	vldr	d7, [r3, #8]
 800602e:	4b3c      	ldr	r3, [pc, #240]	; (8006120 <setProfilTimer+0x308>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006036:	ee17 2a90 	vmov	r2, s15
 800603a:	62da      	str	r2, [r3, #44]	; 0x2c
 800603c:	4b34      	ldr	r3, [pc, #208]	; (8006110 <setProfilTimer+0x2f8>)
 800603e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006042:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006046:	ee17 2a90 	vmov	r2, s15
 800604a:	4b35      	ldr	r3, [pc, #212]	; (8006120 <setProfilTimer+0x308>)
 800604c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,period[3]);
 800604e:	4b30      	ldr	r3, [pc, #192]	; (8006110 <setProfilTimer+0x2f8>)
 8006050:	ed93 7b06 	vldr	d7, [r3, #24]
 8006054:	4b33      	ldr	r3, [pc, #204]	; (8006124 <setProfilTimer+0x30c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800605c:	ee17 2a90 	vmov	r2, s15
 8006060:	62da      	str	r2, [r3, #44]	; 0x2c
 8006062:	4b2b      	ldr	r3, [pc, #172]	; (8006110 <setProfilTimer+0x2f8>)
 8006064:	ed93 7b06 	vldr	d7, [r3, #24]
 8006068:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800606c:	ee17 2a90 	vmov	r2, s15
 8006070:	4b2c      	ldr	r3, [pc, #176]	; (8006124 <setProfilTimer+0x30c>)
 8006072:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8006074:	4b25      	ldr	r3, [pc, #148]	; (800610c <setProfilTimer+0x2f4>)
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	ee07 3a90 	vmov	s15, r3
 800607c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006080:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006084:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006088:	4b20      	ldr	r3, [pc, #128]	; (800610c <setProfilTimer+0x2f4>)
 800608a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800608e:	ee17 2a90 	vmov	r2, s15
 8006092:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8006094:	4b24      	ldr	r3, [pc, #144]	; (8006128 <setProfilTimer+0x310>)
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80060a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80060a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80060a8:	4b1f      	ldr	r3, [pc, #124]	; (8006128 <setProfilTimer+0x310>)
 80060aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060ae:	ee17 2a90 	vmov	r2, s15
 80060b2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80060b4:	4b1d      	ldr	r3, [pc, #116]	; (800612c <setProfilTimer+0x314>)
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80060c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80060c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80060c8:	4b18      	ldr	r3, [pc, #96]	; (800612c <setProfilTimer+0x314>)
 80060ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060ce:	ee17 2a90 	vmov	r2, s15
 80060d2:	635a      	str	r2, [r3, #52]	; 0x34


}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	66ed2a99 	.word	0x66ed2a99
 80060e4:	4023193d 	.word	0x4023193d
 80060e8:	00000000 	.word	0x00000000
 80060ec:	418e8480 	.word	0x418e8480
 80060f0:	00000000 	.word	0x00000000
 80060f4:	40bf4000 	.word	0x40bf4000
 80060f8:	00000000 	.word	0x00000000
 80060fc:	404e0000 	.word	0x404e0000
 8006100:	24000350 	.word	0x24000350
 8006104:	24000398 	.word	0x24000398
 8006108:	240003e0 	.word	0x240003e0
 800610c:	40001800 	.word	0x40001800
 8006110:	240007e0 	.word	0x240007e0
 8006114:	24000810 	.word	0x24000810
 8006118:	240007f8 	.word	0x240007f8
 800611c:	240006b0 	.word	0x240006b0
 8006120:	240006fc 	.word	0x240006fc
 8006124:	24000748 	.word	0x24000748
 8006128:	40001c00 	.word	0x40001c00
 800612c:	40002000 	.word	0x40002000

08006130 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006134:	4b22      	ldr	r3, [pc, #136]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 8006136:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <MX_USART1_UART_Init+0x94>)
 8006138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800613a:	4b21      	ldr	r3, [pc, #132]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 800613c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006142:	4b1f      	ldr	r3, [pc, #124]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 8006144:	2200      	movs	r2, #0
 8006146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 800614a:	2200      	movs	r2, #0
 800614c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800614e:	4b1c      	ldr	r3, [pc, #112]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 8006150:	2200      	movs	r2, #0
 8006152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006154:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 8006156:	220c      	movs	r2, #12
 8006158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800615a:	4b19      	ldr	r3, [pc, #100]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 800615c:	2200      	movs	r2, #0
 800615e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006160:	4b17      	ldr	r3, [pc, #92]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 8006162:	2200      	movs	r2, #0
 8006164:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006166:	4b16      	ldr	r3, [pc, #88]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 8006168:	2200      	movs	r2, #0
 800616a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800616c:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 800616e:	2200      	movs	r2, #0
 8006170:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006172:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 8006174:	2200      	movs	r2, #0
 8006176:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006178:	4811      	ldr	r0, [pc, #68]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 800617a:	f005 fe81 	bl	800be80 <HAL_UART_Init>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006184:	f7fc fd6c 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006188:	2100      	movs	r1, #0
 800618a:	480d      	ldr	r0, [pc, #52]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 800618c:	f008 f90b 	bl	800e3a6 <HAL_UARTEx_SetTxFifoThreshold>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006196:	f7fc fd63 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800619a:	2100      	movs	r1, #0
 800619c:	4808      	ldr	r0, [pc, #32]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 800619e:	f008 f940 	bl	800e422 <HAL_UARTEx_SetRxFifoThreshold>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80061a8:	f7fc fd5a 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80061ac:	4804      	ldr	r0, [pc, #16]	; (80061c0 <MX_USART1_UART_Init+0x90>)
 80061ae:	f008 f8c1 	bl	800e334 <HAL_UARTEx_DisableFifoMode>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80061b8:	f7fc fd52 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80061bc:	bf00      	nop
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	24000898 	.word	0x24000898
 80061c4:	40011000 	.word	0x40011000

080061c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80061cc:	4b22      	ldr	r3, [pc, #136]	; (8006258 <MX_USART2_UART_Init+0x90>)
 80061ce:	4a23      	ldr	r2, [pc, #140]	; (800625c <MX_USART2_UART_Init+0x94>)
 80061d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80061d2:	4b21      	ldr	r3, [pc, #132]	; (8006258 <MX_USART2_UART_Init+0x90>)
 80061d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80061d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80061da:	4b1f      	ldr	r3, [pc, #124]	; (8006258 <MX_USART2_UART_Init+0x90>)
 80061dc:	2200      	movs	r2, #0
 80061de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80061e0:	4b1d      	ldr	r3, [pc, #116]	; (8006258 <MX_USART2_UART_Init+0x90>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80061e6:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <MX_USART2_UART_Init+0x90>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80061ec:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <MX_USART2_UART_Init+0x90>)
 80061ee:	220c      	movs	r2, #12
 80061f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061f2:	4b19      	ldr	r3, [pc, #100]	; (8006258 <MX_USART2_UART_Init+0x90>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80061f8:	4b17      	ldr	r3, [pc, #92]	; (8006258 <MX_USART2_UART_Init+0x90>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80061fe:	4b16      	ldr	r3, [pc, #88]	; (8006258 <MX_USART2_UART_Init+0x90>)
 8006200:	2200      	movs	r2, #0
 8006202:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006204:	4b14      	ldr	r3, [pc, #80]	; (8006258 <MX_USART2_UART_Init+0x90>)
 8006206:	2200      	movs	r2, #0
 8006208:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800620a:	4b13      	ldr	r3, [pc, #76]	; (8006258 <MX_USART2_UART_Init+0x90>)
 800620c:	2200      	movs	r2, #0
 800620e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006210:	4811      	ldr	r0, [pc, #68]	; (8006258 <MX_USART2_UART_Init+0x90>)
 8006212:	f005 fe35 	bl	800be80 <HAL_UART_Init>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800621c:	f7fc fd20 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006220:	2100      	movs	r1, #0
 8006222:	480d      	ldr	r0, [pc, #52]	; (8006258 <MX_USART2_UART_Init+0x90>)
 8006224:	f008 f8bf 	bl	800e3a6 <HAL_UARTEx_SetTxFifoThreshold>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800622e:	f7fc fd17 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006232:	2100      	movs	r1, #0
 8006234:	4808      	ldr	r0, [pc, #32]	; (8006258 <MX_USART2_UART_Init+0x90>)
 8006236:	f008 f8f4 	bl	800e422 <HAL_UARTEx_SetRxFifoThreshold>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006240:	f7fc fd0e 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006244:	4804      	ldr	r0, [pc, #16]	; (8006258 <MX_USART2_UART_Init+0x90>)
 8006246:	f008 f875 	bl	800e334 <HAL_UARTEx_DisableFifoMode>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006250:	f7fc fd06 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006254:	bf00      	nop
 8006256:	bd80      	pop	{r7, pc}
 8006258:	24000928 	.word	0x24000928
 800625c:	40004400 	.word	0x40004400

08006260 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006264:	4b22      	ldr	r3, [pc, #136]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 8006266:	4a23      	ldr	r2, [pc, #140]	; (80062f4 <MX_USART3_UART_Init+0x94>)
 8006268:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800626a:	4b21      	ldr	r3, [pc, #132]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 800626c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006270:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006272:	4b1f      	ldr	r3, [pc, #124]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 8006274:	2200      	movs	r2, #0
 8006276:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006278:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 800627a:	2200      	movs	r2, #0
 800627c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800627e:	4b1c      	ldr	r3, [pc, #112]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 8006280:	2200      	movs	r2, #0
 8006282:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006284:	4b1a      	ldr	r3, [pc, #104]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 8006286:	220c      	movs	r2, #12
 8006288:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800628a:	4b19      	ldr	r3, [pc, #100]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 800628c:	2200      	movs	r2, #0
 800628e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006290:	4b17      	ldr	r3, [pc, #92]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 8006292:	2200      	movs	r2, #0
 8006294:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006296:	4b16      	ldr	r3, [pc, #88]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 8006298:	2200      	movs	r2, #0
 800629a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800629c:	4b14      	ldr	r3, [pc, #80]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 800629e:	2200      	movs	r2, #0
 80062a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80062a2:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80062a8:	4811      	ldr	r0, [pc, #68]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 80062aa:	f005 fde9 	bl	800be80 <HAL_UART_Init>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80062b4:	f7fc fcd4 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062b8:	2100      	movs	r1, #0
 80062ba:	480d      	ldr	r0, [pc, #52]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 80062bc:	f008 f873 	bl	800e3a6 <HAL_UARTEx_SetTxFifoThreshold>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80062c6:	f7fc fccb 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062ca:	2100      	movs	r1, #0
 80062cc:	4808      	ldr	r0, [pc, #32]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 80062ce:	f008 f8a8 	bl	800e422 <HAL_UARTEx_SetRxFifoThreshold>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80062d8:	f7fc fcc2 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80062dc:	4804      	ldr	r0, [pc, #16]	; (80062f0 <MX_USART3_UART_Init+0x90>)
 80062de:	f008 f829 	bl	800e334 <HAL_UARTEx_DisableFifoMode>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80062e8:	f7fc fcba 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80062ec:	bf00      	nop
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	240009b8 	.word	0x240009b8
 80062f4:	40004800 	.word	0x40004800

080062f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b0be      	sub	sp, #248	; 0xf8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006300:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	605a      	str	r2, [r3, #4]
 800630a:	609a      	str	r2, [r3, #8]
 800630c:	60da      	str	r2, [r3, #12]
 800630e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006314:	22bc      	movs	r2, #188	; 0xbc
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f008 f939 	bl	800e590 <memset>
  if(uartHandle->Instance==USART1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a84      	ldr	r2, [pc, #528]	; (8006534 <HAL_UART_MspInit+0x23c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d168      	bne.n	80063fa <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006328:	2301      	movs	r3, #1
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800632c:	2300      	movs	r3, #0
 800632e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006336:	4618      	mov	r0, r3
 8006338:	f002 fa8c 	bl	8008854 <HAL_RCCEx_PeriphCLKConfig>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006342:	f7fc fc8d 	bl	8002c60 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006346:	4b7c      	ldr	r3, [pc, #496]	; (8006538 <HAL_UART_MspInit+0x240>)
 8006348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800634c:	4a7a      	ldr	r2, [pc, #488]	; (8006538 <HAL_UART_MspInit+0x240>)
 800634e:	f043 0310 	orr.w	r3, r3, #16
 8006352:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006356:	4b78      	ldr	r3, [pc, #480]	; (8006538 <HAL_UART_MspInit+0x240>)
 8006358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006364:	4b74      	ldr	r3, [pc, #464]	; (8006538 <HAL_UART_MspInit+0x240>)
 8006366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800636a:	4a73      	ldr	r2, [pc, #460]	; (8006538 <HAL_UART_MspInit+0x240>)
 800636c:	f043 0302 	orr.w	r3, r3, #2
 8006370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006374:	4b70      	ldr	r3, [pc, #448]	; (8006538 <HAL_UART_MspInit+0x240>)
 8006376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	623b      	str	r3, [r7, #32]
 8006380:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006382:	4b6d      	ldr	r3, [pc, #436]	; (8006538 <HAL_UART_MspInit+0x240>)
 8006384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006388:	4a6b      	ldr	r2, [pc, #428]	; (8006538 <HAL_UART_MspInit+0x240>)
 800638a:	f043 0301 	orr.w	r3, r3, #1
 800638e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006392:	4b69      	ldr	r3, [pc, #420]	; (8006538 <HAL_UART_MspInit+0x240>)
 8006394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 80063a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063a8:	2302      	movs	r3, #2
 80063aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80063ba:	2304      	movs	r3, #4
 80063bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 80063c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80063c4:	4619      	mov	r1, r3
 80063c6:	485d      	ldr	r0, [pc, #372]	; (800653c <HAL_UART_MspInit+0x244>)
 80063c8:	f001 f854 	bl	8007474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 80063cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063d4:	2302      	movs	r3, #2
 80063d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063e0:	2300      	movs	r3, #0
 80063e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80063e6:	2307      	movs	r3, #7
 80063e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 80063ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80063f0:	4619      	mov	r1, r3
 80063f2:	4853      	ldr	r0, [pc, #332]	; (8006540 <HAL_UART_MspInit+0x248>)
 80063f4:	f001 f83e 	bl	8007474 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80063f8:	e097      	b.n	800652a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a51      	ldr	r2, [pc, #324]	; (8006544 <HAL_UART_MspInit+0x24c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d142      	bne.n	800648a <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006404:	2302      	movs	r3, #2
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006408:	2300      	movs	r3, #0
 800640a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800640e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006412:	4618      	mov	r0, r3
 8006414:	f002 fa1e 	bl	8008854 <HAL_RCCEx_PeriphCLKConfig>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 800641e:	f7fc fc1f 	bl	8002c60 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006422:	4b45      	ldr	r3, [pc, #276]	; (8006538 <HAL_UART_MspInit+0x240>)
 8006424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006428:	4a43      	ldr	r2, [pc, #268]	; (8006538 <HAL_UART_MspInit+0x240>)
 800642a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800642e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006432:	4b41      	ldr	r3, [pc, #260]	; (8006538 <HAL_UART_MspInit+0x240>)
 8006434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006440:	4b3d      	ldr	r3, [pc, #244]	; (8006538 <HAL_UART_MspInit+0x240>)
 8006442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006446:	4a3c      	ldr	r2, [pc, #240]	; (8006538 <HAL_UART_MspInit+0x240>)
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006450:	4b39      	ldr	r3, [pc, #228]	; (8006538 <HAL_UART_MspInit+0x240>)
 8006452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 800645e:	230c      	movs	r3, #12
 8006460:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006464:	2302      	movs	r3, #2
 8006466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800646a:	2300      	movs	r3, #0
 800646c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006470:	2300      	movs	r3, #0
 8006472:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006476:	2307      	movs	r3, #7
 8006478:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800647c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006480:	4619      	mov	r1, r3
 8006482:	482f      	ldr	r0, [pc, #188]	; (8006540 <HAL_UART_MspInit+0x248>)
 8006484:	f000 fff6 	bl	8007474 <HAL_GPIO_Init>
}
 8006488:	e04f      	b.n	800652a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a2e      	ldr	r2, [pc, #184]	; (8006548 <HAL_UART_MspInit+0x250>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d14a      	bne.n	800652a <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006494:	2302      	movs	r3, #2
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006498:	2300      	movs	r3, #0
 800649a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800649e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064a2:	4618      	mov	r0, r3
 80064a4:	f002 f9d6 	bl	8008854 <HAL_RCCEx_PeriphCLKConfig>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 80064ae:	f7fc fbd7 	bl	8002c60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80064b2:	4b21      	ldr	r3, [pc, #132]	; (8006538 <HAL_UART_MspInit+0x240>)
 80064b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064b8:	4a1f      	ldr	r2, [pc, #124]	; (8006538 <HAL_UART_MspInit+0x240>)
 80064ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80064c2:	4b1d      	ldr	r3, [pc, #116]	; (8006538 <HAL_UART_MspInit+0x240>)
 80064c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064d0:	4b19      	ldr	r3, [pc, #100]	; (8006538 <HAL_UART_MspInit+0x240>)
 80064d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064d6:	4a18      	ldr	r2, [pc, #96]	; (8006538 <HAL_UART_MspInit+0x240>)
 80064d8:	f043 0308 	orr.w	r3, r3, #8
 80064dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064e0:	4b15      	ldr	r3, [pc, #84]	; (8006538 <HAL_UART_MspInit+0x240>)
 80064e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80064ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f6:	2302      	movs	r3, #2
 80064f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006502:	2300      	movs	r3, #0
 8006504:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006508:	2307      	movs	r3, #7
 800650a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800650e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006512:	4619      	mov	r1, r3
 8006514:	480d      	ldr	r0, [pc, #52]	; (800654c <HAL_UART_MspInit+0x254>)
 8006516:	f000 ffad 	bl	8007474 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 800651a:	2201      	movs	r2, #1
 800651c:	2101      	movs	r1, #1
 800651e:	2027      	movs	r0, #39	; 0x27
 8006520:	f000 fa01 	bl	8006926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006524:	2027      	movs	r0, #39	; 0x27
 8006526:	f000 fa18 	bl	800695a <HAL_NVIC_EnableIRQ>
}
 800652a:	bf00      	nop
 800652c:	37f8      	adds	r7, #248	; 0xf8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40011000 	.word	0x40011000
 8006538:	58024400 	.word	0x58024400
 800653c:	58020400 	.word	0x58020400
 8006540:	58020000 	.word	0x58020000
 8006544:	40004400 	.word	0x40004400
 8006548:	40004800 	.word	0x40004800
 800654c:	58020c00 	.word	0x58020c00

08006550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006588 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006554:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006556:	e003      	b.n	8006560 <LoopCopyDataInit>

08006558 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006558:	4b0c      	ldr	r3, [pc, #48]	; (800658c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800655a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800655c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800655e:	3104      	adds	r1, #4

08006560 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006560:	480b      	ldr	r0, [pc, #44]	; (8006590 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006562:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006564:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006566:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006568:	d3f6      	bcc.n	8006558 <CopyDataInit>
  ldr  r2, =_sbss
 800656a:	4a0b      	ldr	r2, [pc, #44]	; (8006598 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800656c:	e002      	b.n	8006574 <LoopFillZerobss>

0800656e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800656e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006570:	f842 3b04 	str.w	r3, [r2], #4

08006574 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006574:	4b09      	ldr	r3, [pc, #36]	; (800659c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006576:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006578:	d3f9      	bcc.n	800656e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800657a:	f7fd fb85 	bl	8003c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800657e:	f007 ffe3 	bl	800e548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006582:	f7fc f827 	bl	80025d4 <main>
  bx  lr    
 8006586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006588:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800658c:	080138d0 	.word	0x080138d0
  ldr  r0, =_sdata
 8006590:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006594:	2400023c 	.word	0x2400023c
  ldr  r2, =_sbss
 8006598:	24000240 	.word	0x24000240
  ldr  r3, = _ebss
 800659c:	24000a5c 	.word	0x24000a5c

080065a0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065a0:	e7fe      	b.n	80065a0 <ADC3_IRQHandler>
	...

080065a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065aa:	2003      	movs	r0, #3
 80065ac:	f000 f9b0 	bl	8006910 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065b0:	f001 ff7a 	bl	80084a8 <HAL_RCC_GetSysClockFreq>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b15      	ldr	r3, [pc, #84]	; (800660c <HAL_Init+0x68>)
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	4913      	ldr	r1, [pc, #76]	; (8006610 <HAL_Init+0x6c>)
 80065c2:	5ccb      	ldrb	r3, [r1, r3]
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <HAL_Init+0x68>)
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	4a0e      	ldr	r2, [pc, #56]	; (8006610 <HAL_Init+0x6c>)
 80065d8:	5cd3      	ldrb	r3, [r2, r3]
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
 80065e4:	4a0b      	ldr	r2, [pc, #44]	; (8006614 <HAL_Init+0x70>)
 80065e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065e8:	4a0b      	ldr	r2, [pc, #44]	; (8006618 <HAL_Init+0x74>)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065ee:	2000      	movs	r0, #0
 80065f0:	f000 f814 	bl	800661c <HAL_InitTick>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e002      	b.n	8006604 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80065fe:	f7fd f9c1 	bl	8003984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	58024400 	.word	0x58024400
 8006610:	08011ba0 	.word	0x08011ba0
 8006614:	2400005c 	.word	0x2400005c
 8006618:	24000058 	.word	0x24000058

0800661c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006624:	4b15      	ldr	r3, [pc, #84]	; (800667c <HAL_InitTick+0x60>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e021      	b.n	8006674 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006630:	4b13      	ldr	r3, [pc, #76]	; (8006680 <HAL_InitTick+0x64>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	4b11      	ldr	r3, [pc, #68]	; (800667c <HAL_InitTick+0x60>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	4619      	mov	r1, r3
 800663a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800663e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006642:	fbb2 f3f3 	udiv	r3, r2, r3
 8006646:	4618      	mov	r0, r3
 8006648:	f000 f9a3 	bl	8006992 <HAL_SYSTICK_Config>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e00e      	b.n	8006674 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b0f      	cmp	r3, #15
 800665a:	d80a      	bhi.n	8006672 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800665c:	2200      	movs	r2, #0
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	f04f 30ff 	mov.w	r0, #4294967295
 8006664:	f000 f95f 	bl	8006926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006668:	4a06      	ldr	r2, [pc, #24]	; (8006684 <HAL_InitTick+0x68>)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	e000      	b.n	8006674 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	24000064 	.word	0x24000064
 8006680:	24000058 	.word	0x24000058
 8006684:	24000060 	.word	0x24000060

08006688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <HAL_IncTick+0x20>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	4b06      	ldr	r3, [pc, #24]	; (80066ac <HAL_IncTick+0x24>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4413      	add	r3, r2
 8006698:	4a04      	ldr	r2, [pc, #16]	; (80066ac <HAL_IncTick+0x24>)
 800669a:	6013      	str	r3, [r2, #0]
}
 800669c:	bf00      	nop
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	24000064 	.word	0x24000064
 80066ac:	24000a48 	.word	0x24000a48

080066b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  return uwTick;
 80066b4:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <HAL_GetTick+0x14>)
 80066b6:	681b      	ldr	r3, [r3, #0]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	24000a48 	.word	0x24000a48

080066c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066d0:	f7ff ffee 	bl	80066b0 <HAL_GetTick>
 80066d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e0:	d005      	beq.n	80066ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066e2:	4b0a      	ldr	r3, [pc, #40]	; (800670c <HAL_Delay+0x44>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80066ee:	bf00      	nop
 80066f0:	f7ff ffde 	bl	80066b0 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d8f7      	bhi.n	80066f0 <HAL_Delay+0x28>
  {
  }
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	24000064 	.word	0x24000064

08006710 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006714:	4b03      	ldr	r3, [pc, #12]	; (8006724 <HAL_GetREVID+0x14>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	0c1b      	lsrs	r3, r3, #16
}
 800671a:	4618      	mov	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	5c001000 	.word	0x5c001000

08006728 <__NVIC_SetPriorityGrouping>:
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <__NVIC_SetPriorityGrouping+0x40>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006744:	4013      	ands	r3, r2
 8006746:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006750:	4b06      	ldr	r3, [pc, #24]	; (800676c <__NVIC_SetPriorityGrouping+0x44>)
 8006752:	4313      	orrs	r3, r2
 8006754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006756:	4a04      	ldr	r2, [pc, #16]	; (8006768 <__NVIC_SetPriorityGrouping+0x40>)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	60d3      	str	r3, [r2, #12]
}
 800675c:	bf00      	nop
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	e000ed00 	.word	0xe000ed00
 800676c:	05fa0000 	.word	0x05fa0000

08006770 <__NVIC_GetPriorityGrouping>:
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006774:	4b04      	ldr	r3, [pc, #16]	; (8006788 <__NVIC_GetPriorityGrouping+0x18>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	0a1b      	lsrs	r3, r3, #8
 800677a:	f003 0307 	and.w	r3, r3, #7
}
 800677e:	4618      	mov	r0, r3
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	e000ed00 	.word	0xe000ed00

0800678c <__NVIC_EnableIRQ>:
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	4603      	mov	r3, r0
 8006794:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800679a:	2b00      	cmp	r3, #0
 800679c:	db0b      	blt.n	80067b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	f003 021f 	and.w	r2, r3, #31
 80067a4:	4907      	ldr	r1, [pc, #28]	; (80067c4 <__NVIC_EnableIRQ+0x38>)
 80067a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	2001      	movs	r0, #1
 80067ae:	fa00 f202 	lsl.w	r2, r0, r2
 80067b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	e000e100 	.word	0xe000e100

080067c8 <__NVIC_DisableIRQ>:
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	db12      	blt.n	8006800 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	f003 021f 	and.w	r2, r3, #31
 80067e0:	490a      	ldr	r1, [pc, #40]	; (800680c <__NVIC_DisableIRQ+0x44>)
 80067e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	2001      	movs	r0, #1
 80067ea:	fa00 f202 	lsl.w	r2, r0, r2
 80067ee:	3320      	adds	r3, #32
 80067f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80067f4:	f3bf 8f4f 	dsb	sy
}
 80067f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80067fa:	f3bf 8f6f 	isb	sy
}
 80067fe:	bf00      	nop
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	e000e100 	.word	0xe000e100

08006810 <__NVIC_SetPriority>:
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	6039      	str	r1, [r7, #0]
 800681a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800681c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006820:	2b00      	cmp	r3, #0
 8006822:	db0a      	blt.n	800683a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	b2da      	uxtb	r2, r3
 8006828:	490c      	ldr	r1, [pc, #48]	; (800685c <__NVIC_SetPriority+0x4c>)
 800682a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800682e:	0112      	lsls	r2, r2, #4
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	440b      	add	r3, r1
 8006834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006838:	e00a      	b.n	8006850 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	b2da      	uxtb	r2, r3
 800683e:	4908      	ldr	r1, [pc, #32]	; (8006860 <__NVIC_SetPriority+0x50>)
 8006840:	88fb      	ldrh	r3, [r7, #6]
 8006842:	f003 030f 	and.w	r3, r3, #15
 8006846:	3b04      	subs	r3, #4
 8006848:	0112      	lsls	r2, r2, #4
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	440b      	add	r3, r1
 800684e:	761a      	strb	r2, [r3, #24]
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	e000e100 	.word	0xe000e100
 8006860:	e000ed00 	.word	0xe000ed00

08006864 <NVIC_EncodePriority>:
{
 8006864:	b480      	push	{r7}
 8006866:	b089      	sub	sp, #36	; 0x24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f1c3 0307 	rsb	r3, r3, #7
 800687e:	2b04      	cmp	r3, #4
 8006880:	bf28      	it	cs
 8006882:	2304      	movcs	r3, #4
 8006884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	3304      	adds	r3, #4
 800688a:	2b06      	cmp	r3, #6
 800688c:	d902      	bls.n	8006894 <NVIC_EncodePriority+0x30>
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	3b03      	subs	r3, #3
 8006892:	e000      	b.n	8006896 <NVIC_EncodePriority+0x32>
 8006894:	2300      	movs	r3, #0
 8006896:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006898:	f04f 32ff 	mov.w	r2, #4294967295
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	fa02 f303 	lsl.w	r3, r2, r3
 80068a2:	43da      	mvns	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	401a      	ands	r2, r3
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068ac:	f04f 31ff 	mov.w	r1, #4294967295
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	fa01 f303 	lsl.w	r3, r1, r3
 80068b6:	43d9      	mvns	r1, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068bc:	4313      	orrs	r3, r2
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3724      	adds	r7, #36	; 0x24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068dc:	d301      	bcc.n	80068e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068de:	2301      	movs	r3, #1
 80068e0:	e00f      	b.n	8006902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068e2:	4a0a      	ldr	r2, [pc, #40]	; (800690c <SysTick_Config+0x40>)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068ea:	210f      	movs	r1, #15
 80068ec:	f04f 30ff 	mov.w	r0, #4294967295
 80068f0:	f7ff ff8e 	bl	8006810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <SysTick_Config+0x40>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068fa:	4b04      	ldr	r3, [pc, #16]	; (800690c <SysTick_Config+0x40>)
 80068fc:	2207      	movs	r2, #7
 80068fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	e000e010 	.word	0xe000e010

08006910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff ff05 	bl	8006728 <__NVIC_SetPriorityGrouping>
}
 800691e:	bf00      	nop
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b086      	sub	sp, #24
 800692a:	af00      	add	r7, sp, #0
 800692c:	4603      	mov	r3, r0
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
 8006932:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006934:	f7ff ff1c 	bl	8006770 <__NVIC_GetPriorityGrouping>
 8006938:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	6978      	ldr	r0, [r7, #20]
 8006940:	f7ff ff90 	bl	8006864 <NVIC_EncodePriority>
 8006944:	4602      	mov	r2, r0
 8006946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800694a:	4611      	mov	r1, r2
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff ff5f 	bl	8006810 <__NVIC_SetPriority>
}
 8006952:	bf00      	nop
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	4603      	mov	r3, r0
 8006962:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006968:	4618      	mov	r0, r3
 800696a:	f7ff ff0f 	bl	800678c <__NVIC_EnableIRQ>
}
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	4603      	mov	r3, r0
 800697e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff ff1f 	bl	80067c8 <__NVIC_DisableIRQ>
}
 800698a:	bf00      	nop
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff ff96 	bl	80068cc <SysTick_Config>
 80069a0:	4603      	mov	r3, r0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80069b4:	f7ff fe7c 	bl	80066b0 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e2dc      	b.n	8006f7e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d008      	beq.n	80069e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2280      	movs	r2, #128	; 0x80
 80069d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e2cd      	b.n	8006f7e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a76      	ldr	r2, [pc, #472]	; (8006bc0 <HAL_DMA_Abort+0x214>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d04a      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a74      	ldr	r2, [pc, #464]	; (8006bc4 <HAL_DMA_Abort+0x218>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d045      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a73      	ldr	r2, [pc, #460]	; (8006bc8 <HAL_DMA_Abort+0x21c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d040      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a71      	ldr	r2, [pc, #452]	; (8006bcc <HAL_DMA_Abort+0x220>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d03b      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a70      	ldr	r2, [pc, #448]	; (8006bd0 <HAL_DMA_Abort+0x224>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d036      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a6e      	ldr	r2, [pc, #440]	; (8006bd4 <HAL_DMA_Abort+0x228>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d031      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a6d      	ldr	r2, [pc, #436]	; (8006bd8 <HAL_DMA_Abort+0x22c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d02c      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a6b      	ldr	r2, [pc, #428]	; (8006bdc <HAL_DMA_Abort+0x230>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d027      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a6a      	ldr	r2, [pc, #424]	; (8006be0 <HAL_DMA_Abort+0x234>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d022      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a68      	ldr	r2, [pc, #416]	; (8006be4 <HAL_DMA_Abort+0x238>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d01d      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a67      	ldr	r2, [pc, #412]	; (8006be8 <HAL_DMA_Abort+0x23c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d018      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a65      	ldr	r2, [pc, #404]	; (8006bec <HAL_DMA_Abort+0x240>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d013      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a64      	ldr	r2, [pc, #400]	; (8006bf0 <HAL_DMA_Abort+0x244>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00e      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a62      	ldr	r2, [pc, #392]	; (8006bf4 <HAL_DMA_Abort+0x248>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d009      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a61      	ldr	r2, [pc, #388]	; (8006bf8 <HAL_DMA_Abort+0x24c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d004      	beq.n	8006a82 <HAL_DMA_Abort+0xd6>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a5f      	ldr	r2, [pc, #380]	; (8006bfc <HAL_DMA_Abort+0x250>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d101      	bne.n	8006a86 <HAL_DMA_Abort+0xda>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <HAL_DMA_Abort+0xdc>
 8006a86:	2300      	movs	r3, #0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d013      	beq.n	8006ab4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 021e 	bic.w	r2, r2, #30
 8006a9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695a      	ldr	r2, [r3, #20]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aaa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e00a      	b.n	8006aca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 020e 	bic.w	r2, r2, #14
 8006ac2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a3c      	ldr	r2, [pc, #240]	; (8006bc0 <HAL_DMA_Abort+0x214>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d072      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a3a      	ldr	r2, [pc, #232]	; (8006bc4 <HAL_DMA_Abort+0x218>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d06d      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a39      	ldr	r2, [pc, #228]	; (8006bc8 <HAL_DMA_Abort+0x21c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d068      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a37      	ldr	r2, [pc, #220]	; (8006bcc <HAL_DMA_Abort+0x220>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d063      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a36      	ldr	r2, [pc, #216]	; (8006bd0 <HAL_DMA_Abort+0x224>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d05e      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a34      	ldr	r2, [pc, #208]	; (8006bd4 <HAL_DMA_Abort+0x228>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d059      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a33      	ldr	r2, [pc, #204]	; (8006bd8 <HAL_DMA_Abort+0x22c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d054      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a31      	ldr	r2, [pc, #196]	; (8006bdc <HAL_DMA_Abort+0x230>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d04f      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a30      	ldr	r2, [pc, #192]	; (8006be0 <HAL_DMA_Abort+0x234>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d04a      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a2e      	ldr	r2, [pc, #184]	; (8006be4 <HAL_DMA_Abort+0x238>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d045      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a2d      	ldr	r2, [pc, #180]	; (8006be8 <HAL_DMA_Abort+0x23c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d040      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a2b      	ldr	r2, [pc, #172]	; (8006bec <HAL_DMA_Abort+0x240>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d03b      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2a      	ldr	r2, [pc, #168]	; (8006bf0 <HAL_DMA_Abort+0x244>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d036      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a28      	ldr	r2, [pc, #160]	; (8006bf4 <HAL_DMA_Abort+0x248>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d031      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a27      	ldr	r2, [pc, #156]	; (8006bf8 <HAL_DMA_Abort+0x24c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d02c      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a25      	ldr	r2, [pc, #148]	; (8006bfc <HAL_DMA_Abort+0x250>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d027      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a24      	ldr	r2, [pc, #144]	; (8006c00 <HAL_DMA_Abort+0x254>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d022      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a22      	ldr	r2, [pc, #136]	; (8006c04 <HAL_DMA_Abort+0x258>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d01d      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a21      	ldr	r2, [pc, #132]	; (8006c08 <HAL_DMA_Abort+0x25c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d018      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1f      	ldr	r2, [pc, #124]	; (8006c0c <HAL_DMA_Abort+0x260>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d013      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1e      	ldr	r2, [pc, #120]	; (8006c10 <HAL_DMA_Abort+0x264>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00e      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1c      	ldr	r2, [pc, #112]	; (8006c14 <HAL_DMA_Abort+0x268>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d009      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1b      	ldr	r2, [pc, #108]	; (8006c18 <HAL_DMA_Abort+0x26c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d004      	beq.n	8006bba <HAL_DMA_Abort+0x20e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a19      	ldr	r2, [pc, #100]	; (8006c1c <HAL_DMA_Abort+0x270>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d132      	bne.n	8006c20 <HAL_DMA_Abort+0x274>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e031      	b.n	8006c22 <HAL_DMA_Abort+0x276>
 8006bbe:	bf00      	nop
 8006bc0:	40020010 	.word	0x40020010
 8006bc4:	40020028 	.word	0x40020028
 8006bc8:	40020040 	.word	0x40020040
 8006bcc:	40020058 	.word	0x40020058
 8006bd0:	40020070 	.word	0x40020070
 8006bd4:	40020088 	.word	0x40020088
 8006bd8:	400200a0 	.word	0x400200a0
 8006bdc:	400200b8 	.word	0x400200b8
 8006be0:	40020410 	.word	0x40020410
 8006be4:	40020428 	.word	0x40020428
 8006be8:	40020440 	.word	0x40020440
 8006bec:	40020458 	.word	0x40020458
 8006bf0:	40020470 	.word	0x40020470
 8006bf4:	40020488 	.word	0x40020488
 8006bf8:	400204a0 	.word	0x400204a0
 8006bfc:	400204b8 	.word	0x400204b8
 8006c00:	58025408 	.word	0x58025408
 8006c04:	5802541c 	.word	0x5802541c
 8006c08:	58025430 	.word	0x58025430
 8006c0c:	58025444 	.word	0x58025444
 8006c10:	58025458 	.word	0x58025458
 8006c14:	5802546c 	.word	0x5802546c
 8006c18:	58025480 	.word	0x58025480
 8006c1c:	58025494 	.word	0x58025494
 8006c20:	2300      	movs	r3, #0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d007      	beq.n	8006c36 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a6d      	ldr	r2, [pc, #436]	; (8006df0 <HAL_DMA_Abort+0x444>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d04a      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a6b      	ldr	r2, [pc, #428]	; (8006df4 <HAL_DMA_Abort+0x448>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d045      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a6a      	ldr	r2, [pc, #424]	; (8006df8 <HAL_DMA_Abort+0x44c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d040      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a68      	ldr	r2, [pc, #416]	; (8006dfc <HAL_DMA_Abort+0x450>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d03b      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a67      	ldr	r2, [pc, #412]	; (8006e00 <HAL_DMA_Abort+0x454>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d036      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a65      	ldr	r2, [pc, #404]	; (8006e04 <HAL_DMA_Abort+0x458>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d031      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a64      	ldr	r2, [pc, #400]	; (8006e08 <HAL_DMA_Abort+0x45c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d02c      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a62      	ldr	r2, [pc, #392]	; (8006e0c <HAL_DMA_Abort+0x460>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d027      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a61      	ldr	r2, [pc, #388]	; (8006e10 <HAL_DMA_Abort+0x464>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d022      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a5f      	ldr	r2, [pc, #380]	; (8006e14 <HAL_DMA_Abort+0x468>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d01d      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a5e      	ldr	r2, [pc, #376]	; (8006e18 <HAL_DMA_Abort+0x46c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d018      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a5c      	ldr	r2, [pc, #368]	; (8006e1c <HAL_DMA_Abort+0x470>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d013      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a5b      	ldr	r2, [pc, #364]	; (8006e20 <HAL_DMA_Abort+0x474>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00e      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a59      	ldr	r2, [pc, #356]	; (8006e24 <HAL_DMA_Abort+0x478>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d009      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a58      	ldr	r2, [pc, #352]	; (8006e28 <HAL_DMA_Abort+0x47c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d004      	beq.n	8006cd6 <HAL_DMA_Abort+0x32a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a56      	ldr	r2, [pc, #344]	; (8006e2c <HAL_DMA_Abort+0x480>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d108      	bne.n	8006ce8 <HAL_DMA_Abort+0x33c>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0201 	bic.w	r2, r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	e007      	b.n	8006cf8 <HAL_DMA_Abort+0x34c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0201 	bic.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006cf8:	e013      	b.n	8006d22 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cfa:	f7ff fcd9 	bl	80066b0 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b05      	cmp	r3, #5
 8006d06:	d90c      	bls.n	8006d22 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2203      	movs	r2, #3
 8006d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e12d      	b.n	8006f7e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e5      	bne.n	8006cfa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a2f      	ldr	r2, [pc, #188]	; (8006df0 <HAL_DMA_Abort+0x444>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d04a      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a2d      	ldr	r2, [pc, #180]	; (8006df4 <HAL_DMA_Abort+0x448>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d045      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a2c      	ldr	r2, [pc, #176]	; (8006df8 <HAL_DMA_Abort+0x44c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d040      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a2a      	ldr	r2, [pc, #168]	; (8006dfc <HAL_DMA_Abort+0x450>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d03b      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a29      	ldr	r2, [pc, #164]	; (8006e00 <HAL_DMA_Abort+0x454>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d036      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a27      	ldr	r2, [pc, #156]	; (8006e04 <HAL_DMA_Abort+0x458>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d031      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <HAL_DMA_Abort+0x45c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d02c      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a24      	ldr	r2, [pc, #144]	; (8006e0c <HAL_DMA_Abort+0x460>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d027      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a23      	ldr	r2, [pc, #140]	; (8006e10 <HAL_DMA_Abort+0x464>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d022      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <HAL_DMA_Abort+0x468>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d01d      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a20      	ldr	r2, [pc, #128]	; (8006e18 <HAL_DMA_Abort+0x46c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d018      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <HAL_DMA_Abort+0x470>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d013      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <HAL_DMA_Abort+0x474>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00e      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1b      	ldr	r2, [pc, #108]	; (8006e24 <HAL_DMA_Abort+0x478>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d009      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1a      	ldr	r2, [pc, #104]	; (8006e28 <HAL_DMA_Abort+0x47c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d004      	beq.n	8006dce <HAL_DMA_Abort+0x422>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a18      	ldr	r2, [pc, #96]	; (8006e2c <HAL_DMA_Abort+0x480>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d101      	bne.n	8006dd2 <HAL_DMA_Abort+0x426>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <HAL_DMA_Abort+0x428>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d02b      	beq.n	8006e30 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ddc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	223f      	movs	r2, #63	; 0x3f
 8006de8:	409a      	lsls	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	609a      	str	r2, [r3, #8]
 8006dee:	e02a      	b.n	8006e46 <HAL_DMA_Abort+0x49a>
 8006df0:	40020010 	.word	0x40020010
 8006df4:	40020028 	.word	0x40020028
 8006df8:	40020040 	.word	0x40020040
 8006dfc:	40020058 	.word	0x40020058
 8006e00:	40020070 	.word	0x40020070
 8006e04:	40020088 	.word	0x40020088
 8006e08:	400200a0 	.word	0x400200a0
 8006e0c:	400200b8 	.word	0x400200b8
 8006e10:	40020410 	.word	0x40020410
 8006e14:	40020428 	.word	0x40020428
 8006e18:	40020440 	.word	0x40020440
 8006e1c:	40020458 	.word	0x40020458
 8006e20:	40020470 	.word	0x40020470
 8006e24:	40020488 	.word	0x40020488
 8006e28:	400204a0 	.word	0x400204a0
 8006e2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e34:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2201      	movs	r2, #1
 8006e40:	409a      	lsls	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a4f      	ldr	r2, [pc, #316]	; (8006f88 <HAL_DMA_Abort+0x5dc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d072      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a4d      	ldr	r2, [pc, #308]	; (8006f8c <HAL_DMA_Abort+0x5e0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d06d      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a4c      	ldr	r2, [pc, #304]	; (8006f90 <HAL_DMA_Abort+0x5e4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d068      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a4a      	ldr	r2, [pc, #296]	; (8006f94 <HAL_DMA_Abort+0x5e8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d063      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a49      	ldr	r2, [pc, #292]	; (8006f98 <HAL_DMA_Abort+0x5ec>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d05e      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a47      	ldr	r2, [pc, #284]	; (8006f9c <HAL_DMA_Abort+0x5f0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d059      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a46      	ldr	r2, [pc, #280]	; (8006fa0 <HAL_DMA_Abort+0x5f4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d054      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a44      	ldr	r2, [pc, #272]	; (8006fa4 <HAL_DMA_Abort+0x5f8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d04f      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a43      	ldr	r2, [pc, #268]	; (8006fa8 <HAL_DMA_Abort+0x5fc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d04a      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a41      	ldr	r2, [pc, #260]	; (8006fac <HAL_DMA_Abort+0x600>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d045      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a40      	ldr	r2, [pc, #256]	; (8006fb0 <HAL_DMA_Abort+0x604>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d040      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a3e      	ldr	r2, [pc, #248]	; (8006fb4 <HAL_DMA_Abort+0x608>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d03b      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a3d      	ldr	r2, [pc, #244]	; (8006fb8 <HAL_DMA_Abort+0x60c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d036      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a3b      	ldr	r2, [pc, #236]	; (8006fbc <HAL_DMA_Abort+0x610>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d031      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a3a      	ldr	r2, [pc, #232]	; (8006fc0 <HAL_DMA_Abort+0x614>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d02c      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a38      	ldr	r2, [pc, #224]	; (8006fc4 <HAL_DMA_Abort+0x618>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d027      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a37      	ldr	r2, [pc, #220]	; (8006fc8 <HAL_DMA_Abort+0x61c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d022      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a35      	ldr	r2, [pc, #212]	; (8006fcc <HAL_DMA_Abort+0x620>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01d      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a34      	ldr	r2, [pc, #208]	; (8006fd0 <HAL_DMA_Abort+0x624>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d018      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a32      	ldr	r2, [pc, #200]	; (8006fd4 <HAL_DMA_Abort+0x628>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d013      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a31      	ldr	r2, [pc, #196]	; (8006fd8 <HAL_DMA_Abort+0x62c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00e      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a2f      	ldr	r2, [pc, #188]	; (8006fdc <HAL_DMA_Abort+0x630>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d009      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a2e      	ldr	r2, [pc, #184]	; (8006fe0 <HAL_DMA_Abort+0x634>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d004      	beq.n	8006f36 <HAL_DMA_Abort+0x58a>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a2c      	ldr	r2, [pc, #176]	; (8006fe4 <HAL_DMA_Abort+0x638>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d101      	bne.n	8006f3a <HAL_DMA_Abort+0x58e>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <HAL_DMA_Abort+0x590>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d015      	beq.n	8006f6c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f48:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00c      	beq.n	8006f6c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f60:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f6a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40020010 	.word	0x40020010
 8006f8c:	40020028 	.word	0x40020028
 8006f90:	40020040 	.word	0x40020040
 8006f94:	40020058 	.word	0x40020058
 8006f98:	40020070 	.word	0x40020070
 8006f9c:	40020088 	.word	0x40020088
 8006fa0:	400200a0 	.word	0x400200a0
 8006fa4:	400200b8 	.word	0x400200b8
 8006fa8:	40020410 	.word	0x40020410
 8006fac:	40020428 	.word	0x40020428
 8006fb0:	40020440 	.word	0x40020440
 8006fb4:	40020458 	.word	0x40020458
 8006fb8:	40020470 	.word	0x40020470
 8006fbc:	40020488 	.word	0x40020488
 8006fc0:	400204a0 	.word	0x400204a0
 8006fc4:	400204b8 	.word	0x400204b8
 8006fc8:	58025408 	.word	0x58025408
 8006fcc:	5802541c 	.word	0x5802541c
 8006fd0:	58025430 	.word	0x58025430
 8006fd4:	58025444 	.word	0x58025444
 8006fd8:	58025458 	.word	0x58025458
 8006fdc:	5802546c 	.word	0x5802546c
 8006fe0:	58025480 	.word	0x58025480
 8006fe4:	58025494 	.word	0x58025494

08006fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e237      	b.n	800746a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d004      	beq.n	8007010 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2280      	movs	r2, #128	; 0x80
 800700a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e22c      	b.n	800746a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a5c      	ldr	r2, [pc, #368]	; (8007188 <HAL_DMA_Abort_IT+0x1a0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d04a      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a5b      	ldr	r2, [pc, #364]	; (800718c <HAL_DMA_Abort_IT+0x1a4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d045      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a59      	ldr	r2, [pc, #356]	; (8007190 <HAL_DMA_Abort_IT+0x1a8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d040      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a58      	ldr	r2, [pc, #352]	; (8007194 <HAL_DMA_Abort_IT+0x1ac>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d03b      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a56      	ldr	r2, [pc, #344]	; (8007198 <HAL_DMA_Abort_IT+0x1b0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d036      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a55      	ldr	r2, [pc, #340]	; (800719c <HAL_DMA_Abort_IT+0x1b4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d031      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a53      	ldr	r2, [pc, #332]	; (80071a0 <HAL_DMA_Abort_IT+0x1b8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d02c      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a52      	ldr	r2, [pc, #328]	; (80071a4 <HAL_DMA_Abort_IT+0x1bc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d027      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a50      	ldr	r2, [pc, #320]	; (80071a8 <HAL_DMA_Abort_IT+0x1c0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d022      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a4f      	ldr	r2, [pc, #316]	; (80071ac <HAL_DMA_Abort_IT+0x1c4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d01d      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a4d      	ldr	r2, [pc, #308]	; (80071b0 <HAL_DMA_Abort_IT+0x1c8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d018      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a4c      	ldr	r2, [pc, #304]	; (80071b4 <HAL_DMA_Abort_IT+0x1cc>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d013      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a4a      	ldr	r2, [pc, #296]	; (80071b8 <HAL_DMA_Abort_IT+0x1d0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00e      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a49      	ldr	r2, [pc, #292]	; (80071bc <HAL_DMA_Abort_IT+0x1d4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d009      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a47      	ldr	r2, [pc, #284]	; (80071c0 <HAL_DMA_Abort_IT+0x1d8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d004      	beq.n	80070b0 <HAL_DMA_Abort_IT+0xc8>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a46      	ldr	r2, [pc, #280]	; (80071c4 <HAL_DMA_Abort_IT+0x1dc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d101      	bne.n	80070b4 <HAL_DMA_Abort_IT+0xcc>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <HAL_DMA_Abort_IT+0xce>
 80070b4:	2300      	movs	r3, #0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 8086 	beq.w	80071c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2204      	movs	r2, #4
 80070c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a2f      	ldr	r2, [pc, #188]	; (8007188 <HAL_DMA_Abort_IT+0x1a0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d04a      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a2e      	ldr	r2, [pc, #184]	; (800718c <HAL_DMA_Abort_IT+0x1a4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d045      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a2c      	ldr	r2, [pc, #176]	; (8007190 <HAL_DMA_Abort_IT+0x1a8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d040      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a2b      	ldr	r2, [pc, #172]	; (8007194 <HAL_DMA_Abort_IT+0x1ac>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d03b      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a29      	ldr	r2, [pc, #164]	; (8007198 <HAL_DMA_Abort_IT+0x1b0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d036      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a28      	ldr	r2, [pc, #160]	; (800719c <HAL_DMA_Abort_IT+0x1b4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d031      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a26      	ldr	r2, [pc, #152]	; (80071a0 <HAL_DMA_Abort_IT+0x1b8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d02c      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a25      	ldr	r2, [pc, #148]	; (80071a4 <HAL_DMA_Abort_IT+0x1bc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d027      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a23      	ldr	r2, [pc, #140]	; (80071a8 <HAL_DMA_Abort_IT+0x1c0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d022      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a22      	ldr	r2, [pc, #136]	; (80071ac <HAL_DMA_Abort_IT+0x1c4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d01d      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a20      	ldr	r2, [pc, #128]	; (80071b0 <HAL_DMA_Abort_IT+0x1c8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d018      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1f      	ldr	r2, [pc, #124]	; (80071b4 <HAL_DMA_Abort_IT+0x1cc>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1d      	ldr	r2, [pc, #116]	; (80071b8 <HAL_DMA_Abort_IT+0x1d0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00e      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <HAL_DMA_Abort_IT+0x1d4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d009      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1a      	ldr	r2, [pc, #104]	; (80071c0 <HAL_DMA_Abort_IT+0x1d8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_DMA_Abort_IT+0x17c>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a19      	ldr	r2, [pc, #100]	; (80071c4 <HAL_DMA_Abort_IT+0x1dc>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d108      	bne.n	8007176 <HAL_DMA_Abort_IT+0x18e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0201 	bic.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e178      	b.n	8007468 <HAL_DMA_Abort_IT+0x480>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0201 	bic.w	r2, r2, #1
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	e16f      	b.n	8007468 <HAL_DMA_Abort_IT+0x480>
 8007188:	40020010 	.word	0x40020010
 800718c:	40020028 	.word	0x40020028
 8007190:	40020040 	.word	0x40020040
 8007194:	40020058 	.word	0x40020058
 8007198:	40020070 	.word	0x40020070
 800719c:	40020088 	.word	0x40020088
 80071a0:	400200a0 	.word	0x400200a0
 80071a4:	400200b8 	.word	0x400200b8
 80071a8:	40020410 	.word	0x40020410
 80071ac:	40020428 	.word	0x40020428
 80071b0:	40020440 	.word	0x40020440
 80071b4:	40020458 	.word	0x40020458
 80071b8:	40020470 	.word	0x40020470
 80071bc:	40020488 	.word	0x40020488
 80071c0:	400204a0 	.word	0x400204a0
 80071c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 020e 	bic.w	r2, r2, #14
 80071d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a6c      	ldr	r2, [pc, #432]	; (8007390 <HAL_DMA_Abort_IT+0x3a8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d04a      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a6b      	ldr	r2, [pc, #428]	; (8007394 <HAL_DMA_Abort_IT+0x3ac>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d045      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a69      	ldr	r2, [pc, #420]	; (8007398 <HAL_DMA_Abort_IT+0x3b0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d040      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a68      	ldr	r2, [pc, #416]	; (800739c <HAL_DMA_Abort_IT+0x3b4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d03b      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a66      	ldr	r2, [pc, #408]	; (80073a0 <HAL_DMA_Abort_IT+0x3b8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d036      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a65      	ldr	r2, [pc, #404]	; (80073a4 <HAL_DMA_Abort_IT+0x3bc>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d031      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a63      	ldr	r2, [pc, #396]	; (80073a8 <HAL_DMA_Abort_IT+0x3c0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d02c      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a62      	ldr	r2, [pc, #392]	; (80073ac <HAL_DMA_Abort_IT+0x3c4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d027      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a60      	ldr	r2, [pc, #384]	; (80073b0 <HAL_DMA_Abort_IT+0x3c8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d022      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a5f      	ldr	r2, [pc, #380]	; (80073b4 <HAL_DMA_Abort_IT+0x3cc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d01d      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a5d      	ldr	r2, [pc, #372]	; (80073b8 <HAL_DMA_Abort_IT+0x3d0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d018      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a5c      	ldr	r2, [pc, #368]	; (80073bc <HAL_DMA_Abort_IT+0x3d4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d013      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a5a      	ldr	r2, [pc, #360]	; (80073c0 <HAL_DMA_Abort_IT+0x3d8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00e      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a59      	ldr	r2, [pc, #356]	; (80073c4 <HAL_DMA_Abort_IT+0x3dc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a57      	ldr	r2, [pc, #348]	; (80073c8 <HAL_DMA_Abort_IT+0x3e0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_DMA_Abort_IT+0x290>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a56      	ldr	r2, [pc, #344]	; (80073cc <HAL_DMA_Abort_IT+0x3e4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d108      	bne.n	800728a <HAL_DMA_Abort_IT+0x2a2>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0201 	bic.w	r2, r2, #1
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	e007      	b.n	800729a <HAL_DMA_Abort_IT+0x2b2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a3c      	ldr	r2, [pc, #240]	; (8007390 <HAL_DMA_Abort_IT+0x3a8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d072      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a3a      	ldr	r2, [pc, #232]	; (8007394 <HAL_DMA_Abort_IT+0x3ac>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d06d      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a39      	ldr	r2, [pc, #228]	; (8007398 <HAL_DMA_Abort_IT+0x3b0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d068      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a37      	ldr	r2, [pc, #220]	; (800739c <HAL_DMA_Abort_IT+0x3b4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d063      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a36      	ldr	r2, [pc, #216]	; (80073a0 <HAL_DMA_Abort_IT+0x3b8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d05e      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a34      	ldr	r2, [pc, #208]	; (80073a4 <HAL_DMA_Abort_IT+0x3bc>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d059      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a33      	ldr	r2, [pc, #204]	; (80073a8 <HAL_DMA_Abort_IT+0x3c0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d054      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a31      	ldr	r2, [pc, #196]	; (80073ac <HAL_DMA_Abort_IT+0x3c4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d04f      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a30      	ldr	r2, [pc, #192]	; (80073b0 <HAL_DMA_Abort_IT+0x3c8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d04a      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a2e      	ldr	r2, [pc, #184]	; (80073b4 <HAL_DMA_Abort_IT+0x3cc>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d045      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a2d      	ldr	r2, [pc, #180]	; (80073b8 <HAL_DMA_Abort_IT+0x3d0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d040      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a2b      	ldr	r2, [pc, #172]	; (80073bc <HAL_DMA_Abort_IT+0x3d4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d03b      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2a      	ldr	r2, [pc, #168]	; (80073c0 <HAL_DMA_Abort_IT+0x3d8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d036      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a28      	ldr	r2, [pc, #160]	; (80073c4 <HAL_DMA_Abort_IT+0x3dc>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d031      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a27      	ldr	r2, [pc, #156]	; (80073c8 <HAL_DMA_Abort_IT+0x3e0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d02c      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a25      	ldr	r2, [pc, #148]	; (80073cc <HAL_DMA_Abort_IT+0x3e4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d027      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a24      	ldr	r2, [pc, #144]	; (80073d0 <HAL_DMA_Abort_IT+0x3e8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d022      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a22      	ldr	r2, [pc, #136]	; (80073d4 <HAL_DMA_Abort_IT+0x3ec>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01d      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a21      	ldr	r2, [pc, #132]	; (80073d8 <HAL_DMA_Abort_IT+0x3f0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d018      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1f      	ldr	r2, [pc, #124]	; (80073dc <HAL_DMA_Abort_IT+0x3f4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a1e      	ldr	r2, [pc, #120]	; (80073e0 <HAL_DMA_Abort_IT+0x3f8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00e      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1c      	ldr	r2, [pc, #112]	; (80073e4 <HAL_DMA_Abort_IT+0x3fc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d009      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1b      	ldr	r2, [pc, #108]	; (80073e8 <HAL_DMA_Abort_IT+0x400>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_DMA_Abort_IT+0x3a2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a19      	ldr	r2, [pc, #100]	; (80073ec <HAL_DMA_Abort_IT+0x404>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d132      	bne.n	80073f0 <HAL_DMA_Abort_IT+0x408>
 800738a:	2301      	movs	r3, #1
 800738c:	e031      	b.n	80073f2 <HAL_DMA_Abort_IT+0x40a>
 800738e:	bf00      	nop
 8007390:	40020010 	.word	0x40020010
 8007394:	40020028 	.word	0x40020028
 8007398:	40020040 	.word	0x40020040
 800739c:	40020058 	.word	0x40020058
 80073a0:	40020070 	.word	0x40020070
 80073a4:	40020088 	.word	0x40020088
 80073a8:	400200a0 	.word	0x400200a0
 80073ac:	400200b8 	.word	0x400200b8
 80073b0:	40020410 	.word	0x40020410
 80073b4:	40020428 	.word	0x40020428
 80073b8:	40020440 	.word	0x40020440
 80073bc:	40020458 	.word	0x40020458
 80073c0:	40020470 	.word	0x40020470
 80073c4:	40020488 	.word	0x40020488
 80073c8:	400204a0 	.word	0x400204a0
 80073cc:	400204b8 	.word	0x400204b8
 80073d0:	58025408 	.word	0x58025408
 80073d4:	5802541c 	.word	0x5802541c
 80073d8:	58025430 	.word	0x58025430
 80073dc:	58025444 	.word	0x58025444
 80073e0:	58025458 	.word	0x58025458
 80073e4:	5802546c 	.word	0x5802546c
 80073e8:	58025480 	.word	0x58025480
 80073ec:	58025494 	.word	0x58025494
 80073f0:	2300      	movs	r3, #0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d028      	beq.n	8007448 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007400:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007404:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007410:	f003 031f 	and.w	r3, r3, #31
 8007414:	2201      	movs	r2, #1
 8007416:	409a      	lsls	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007424:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00c      	beq.n	8007448 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800743c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007446:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop

08007474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007474:	b480      	push	{r7}
 8007476:	b089      	sub	sp, #36	; 0x24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800747e:	2300      	movs	r3, #0
 8007480:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007482:	4b89      	ldr	r3, [pc, #548]	; (80076a8 <HAL_GPIO_Init+0x234>)
 8007484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007486:	e194      	b.n	80077b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	2101      	movs	r1, #1
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	fa01 f303 	lsl.w	r3, r1, r3
 8007494:	4013      	ands	r3, r2
 8007496:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 8186 	beq.w	80077ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f003 0303 	and.w	r3, r3, #3
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d005      	beq.n	80074b8 <HAL_GPIO_Init+0x44>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f003 0303 	and.w	r3, r3, #3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d130      	bne.n	800751a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	2203      	movs	r2, #3
 80074c4:	fa02 f303 	lsl.w	r3, r2, r3
 80074c8:	43db      	mvns	r3, r3
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	4013      	ands	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4313      	orrs	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074ee:	2201      	movs	r2, #1
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	43db      	mvns	r3, r3
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	4013      	ands	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	091b      	lsrs	r3, r3, #4
 8007504:	f003 0201 	and.w	r2, r3, #1
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4313      	orrs	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	2b03      	cmp	r3, #3
 8007524:	d017      	beq.n	8007556 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	2203      	movs	r2, #3
 8007532:	fa02 f303 	lsl.w	r3, r2, r3
 8007536:	43db      	mvns	r3, r3
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	4013      	ands	r3, r2
 800753c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	4313      	orrs	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d123      	bne.n	80075aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	08da      	lsrs	r2, r3, #3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3208      	adds	r2, #8
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	220f      	movs	r2, #15
 800757a:	fa02 f303 	lsl.w	r3, r2, r3
 800757e:	43db      	mvns	r3, r3
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	4013      	ands	r3, r2
 8007584:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	fa02 f303 	lsl.w	r3, r2, r3
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	4313      	orrs	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	08da      	lsrs	r2, r3, #3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3208      	adds	r2, #8
 80075a4:	69b9      	ldr	r1, [r7, #24]
 80075a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	005b      	lsls	r3, r3, #1
 80075b4:	2203      	movs	r2, #3
 80075b6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ba:	43db      	mvns	r3, r3
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	4013      	ands	r3, r2
 80075c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f003 0203 	and.w	r2, r3, #3
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	fa02 f303 	lsl.w	r3, r2, r3
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 80e0 	beq.w	80077ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075ec:	4b2f      	ldr	r3, [pc, #188]	; (80076ac <HAL_GPIO_Init+0x238>)
 80075ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075f2:	4a2e      	ldr	r2, [pc, #184]	; (80076ac <HAL_GPIO_Init+0x238>)
 80075f4:	f043 0302 	orr.w	r3, r3, #2
 80075f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80075fc:	4b2b      	ldr	r3, [pc, #172]	; (80076ac <HAL_GPIO_Init+0x238>)
 80075fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800760a:	4a29      	ldr	r2, [pc, #164]	; (80076b0 <HAL_GPIO_Init+0x23c>)
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	089b      	lsrs	r3, r3, #2
 8007610:	3302      	adds	r3, #2
 8007612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	220f      	movs	r2, #15
 8007622:	fa02 f303 	lsl.w	r3, r2, r3
 8007626:	43db      	mvns	r3, r3
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	4013      	ands	r3, r2
 800762c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a20      	ldr	r2, [pc, #128]	; (80076b4 <HAL_GPIO_Init+0x240>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d052      	beq.n	80076dc <HAL_GPIO_Init+0x268>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a1f      	ldr	r2, [pc, #124]	; (80076b8 <HAL_GPIO_Init+0x244>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d031      	beq.n	80076a2 <HAL_GPIO_Init+0x22e>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <HAL_GPIO_Init+0x248>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d02b      	beq.n	800769e <HAL_GPIO_Init+0x22a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a1d      	ldr	r2, [pc, #116]	; (80076c0 <HAL_GPIO_Init+0x24c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d025      	beq.n	800769a <HAL_GPIO_Init+0x226>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <HAL_GPIO_Init+0x250>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d01f      	beq.n	8007696 <HAL_GPIO_Init+0x222>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <HAL_GPIO_Init+0x254>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d019      	beq.n	8007692 <HAL_GPIO_Init+0x21e>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a1a      	ldr	r2, [pc, #104]	; (80076cc <HAL_GPIO_Init+0x258>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d013      	beq.n	800768e <HAL_GPIO_Init+0x21a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a19      	ldr	r2, [pc, #100]	; (80076d0 <HAL_GPIO_Init+0x25c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00d      	beq.n	800768a <HAL_GPIO_Init+0x216>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a18      	ldr	r2, [pc, #96]	; (80076d4 <HAL_GPIO_Init+0x260>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d007      	beq.n	8007686 <HAL_GPIO_Init+0x212>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a17      	ldr	r2, [pc, #92]	; (80076d8 <HAL_GPIO_Init+0x264>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d101      	bne.n	8007682 <HAL_GPIO_Init+0x20e>
 800767e:	2309      	movs	r3, #9
 8007680:	e02d      	b.n	80076de <HAL_GPIO_Init+0x26a>
 8007682:	230a      	movs	r3, #10
 8007684:	e02b      	b.n	80076de <HAL_GPIO_Init+0x26a>
 8007686:	2308      	movs	r3, #8
 8007688:	e029      	b.n	80076de <HAL_GPIO_Init+0x26a>
 800768a:	2307      	movs	r3, #7
 800768c:	e027      	b.n	80076de <HAL_GPIO_Init+0x26a>
 800768e:	2306      	movs	r3, #6
 8007690:	e025      	b.n	80076de <HAL_GPIO_Init+0x26a>
 8007692:	2305      	movs	r3, #5
 8007694:	e023      	b.n	80076de <HAL_GPIO_Init+0x26a>
 8007696:	2304      	movs	r3, #4
 8007698:	e021      	b.n	80076de <HAL_GPIO_Init+0x26a>
 800769a:	2303      	movs	r3, #3
 800769c:	e01f      	b.n	80076de <HAL_GPIO_Init+0x26a>
 800769e:	2302      	movs	r3, #2
 80076a0:	e01d      	b.n	80076de <HAL_GPIO_Init+0x26a>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e01b      	b.n	80076de <HAL_GPIO_Init+0x26a>
 80076a6:	bf00      	nop
 80076a8:	58000080 	.word	0x58000080
 80076ac:	58024400 	.word	0x58024400
 80076b0:	58000400 	.word	0x58000400
 80076b4:	58020000 	.word	0x58020000
 80076b8:	58020400 	.word	0x58020400
 80076bc:	58020800 	.word	0x58020800
 80076c0:	58020c00 	.word	0x58020c00
 80076c4:	58021000 	.word	0x58021000
 80076c8:	58021400 	.word	0x58021400
 80076cc:	58021800 	.word	0x58021800
 80076d0:	58021c00 	.word	0x58021c00
 80076d4:	58022000 	.word	0x58022000
 80076d8:	58022400 	.word	0x58022400
 80076dc:	2300      	movs	r3, #0
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	f002 0203 	and.w	r2, r2, #3
 80076e4:	0092      	lsls	r2, r2, #2
 80076e6:	4093      	lsls	r3, r2
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076ee:	4938      	ldr	r1, [pc, #224]	; (80077d0 <HAL_GPIO_Init+0x35c>)
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	089b      	lsrs	r3, r3, #2
 80076f4:	3302      	adds	r3, #2
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80076fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	43db      	mvns	r3, r3
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	4013      	ands	r3, r2
 800770c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800772a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	43db      	mvns	r3, r3
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	4013      	ands	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	4313      	orrs	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	43db      	mvns	r3, r3
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	4013      	ands	r3, r2
 8007766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	4313      	orrs	r3, r2
 800777a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	43db      	mvns	r3, r3
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	4013      	ands	r3, r2
 8007790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	3301      	adds	r3, #1
 80077b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	fa22 f303 	lsr.w	r3, r2, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f47f ae63 	bne.w	8007488 <HAL_GPIO_Init+0x14>
  }
}
 80077c2:	bf00      	nop
 80077c4:	bf00      	nop
 80077c6:	3724      	adds	r7, #36	; 0x24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	58000400 	.word	0x58000400

080077d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691a      	ldr	r2, [r3, #16]
 80077e4:	887b      	ldrh	r3, [r7, #2]
 80077e6:	4013      	ands	r3, r2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077ec:	2301      	movs	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]
 80077f0:	e001      	b.n	80077f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	807b      	strh	r3, [r7, #2]
 8007810:	4613      	mov	r3, r2
 8007812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007814:	787b      	ldrb	r3, [r7, #1]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800781a:	887a      	ldrh	r2, [r7, #2]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007820:	e003      	b.n	800782a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007822:	887b      	ldrh	r3, [r7, #2]
 8007824:	041a      	lsls	r2, r3, #16
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	619a      	str	r2, [r3, #24]
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	4603      	mov	r3, r0
 800783e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007844:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007848:	88fb      	ldrh	r3, [r7, #6]
 800784a:	4013      	ands	r3, r2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	4618      	mov	r0, r3
 800785e:	f7fa ff59 	bl	8002714 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007874:	4b19      	ldr	r3, [pc, #100]	; (80078dc <HAL_PWREx_ConfigSupply+0x70>)
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b04      	cmp	r3, #4
 800787e:	d00a      	beq.n	8007896 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007880:	4b16      	ldr	r3, [pc, #88]	; (80078dc <HAL_PWREx_ConfigSupply+0x70>)
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f003 0307 	and.w	r3, r3, #7
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	429a      	cmp	r2, r3
 800788c:	d001      	beq.n	8007892 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e01f      	b.n	80078d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	e01d      	b.n	80078d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007896:	4b11      	ldr	r3, [pc, #68]	; (80078dc <HAL_PWREx_ConfigSupply+0x70>)
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f023 0207 	bic.w	r2, r3, #7
 800789e:	490f      	ldr	r1, [pc, #60]	; (80078dc <HAL_PWREx_ConfigSupply+0x70>)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80078a6:	f7fe ff03 	bl	80066b0 <HAL_GetTick>
 80078aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078ac:	e009      	b.n	80078c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80078ae:	f7fe feff 	bl	80066b0 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078bc:	d901      	bls.n	80078c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e007      	b.n	80078d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078c2:	4b06      	ldr	r3, [pc, #24]	; (80078dc <HAL_PWREx_ConfigSupply+0x70>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ce:	d1ee      	bne.n	80078ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	58024800 	.word	0x58024800

080078e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08c      	sub	sp, #48	; 0x30
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d102      	bne.n	80078f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	f000 bc1d 	b.w	800812e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 8087 	beq.w	8007a10 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007902:	4b99      	ldr	r3, [pc, #612]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800790a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800790c:	4b96      	ldr	r3, [pc, #600]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	2b10      	cmp	r3, #16
 8007916:	d007      	beq.n	8007928 <HAL_RCC_OscConfig+0x48>
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	2b18      	cmp	r3, #24
 800791c:	d110      	bne.n	8007940 <HAL_RCC_OscConfig+0x60>
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	f003 0303 	and.w	r3, r3, #3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d10b      	bne.n	8007940 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007928:	4b8f      	ldr	r3, [pc, #572]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d06c      	beq.n	8007a0e <HAL_RCC_OscConfig+0x12e>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d168      	bne.n	8007a0e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e3f6      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007948:	d106      	bne.n	8007958 <HAL_RCC_OscConfig+0x78>
 800794a:	4b87      	ldr	r3, [pc, #540]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a86      	ldr	r2, [pc, #536]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	e02e      	b.n	80079b6 <HAL_RCC_OscConfig+0xd6>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10c      	bne.n	800797a <HAL_RCC_OscConfig+0x9a>
 8007960:	4b81      	ldr	r3, [pc, #516]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a80      	ldr	r2, [pc, #512]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	4b7e      	ldr	r3, [pc, #504]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a7d      	ldr	r2, [pc, #500]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	e01d      	b.n	80079b6 <HAL_RCC_OscConfig+0xd6>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007982:	d10c      	bne.n	800799e <HAL_RCC_OscConfig+0xbe>
 8007984:	4b78      	ldr	r3, [pc, #480]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a77      	ldr	r2, [pc, #476]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 800798a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	4b75      	ldr	r3, [pc, #468]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a74      	ldr	r2, [pc, #464]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	e00b      	b.n	80079b6 <HAL_RCC_OscConfig+0xd6>
 800799e:	4b72      	ldr	r3, [pc, #456]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a71      	ldr	r2, [pc, #452]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 80079a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	4b6f      	ldr	r3, [pc, #444]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a6e      	ldr	r2, [pc, #440]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 80079b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d013      	beq.n	80079e6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079be:	f7fe fe77 	bl	80066b0 <HAL_GetTick>
 80079c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079c4:	e008      	b.n	80079d8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079c6:	f7fe fe73 	bl	80066b0 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b64      	cmp	r3, #100	; 0x64
 80079d2:	d901      	bls.n	80079d8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e3aa      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079d8:	4b63      	ldr	r3, [pc, #396]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d0f0      	beq.n	80079c6 <HAL_RCC_OscConfig+0xe6>
 80079e4:	e014      	b.n	8007a10 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e6:	f7fe fe63 	bl	80066b0 <HAL_GetTick>
 80079ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079ec:	e008      	b.n	8007a00 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079ee:	f7fe fe5f 	bl	80066b0 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b64      	cmp	r3, #100	; 0x64
 80079fa:	d901      	bls.n	8007a00 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e396      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a00:	4b59      	ldr	r3, [pc, #356]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1f0      	bne.n	80079ee <HAL_RCC_OscConfig+0x10e>
 8007a0c:	e000      	b.n	8007a10 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80cb 	beq.w	8007bb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a1e:	4b52      	ldr	r3, [pc, #328]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a26:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a28:	4b4f      	ldr	r3, [pc, #316]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d007      	beq.n	8007a44 <HAL_RCC_OscConfig+0x164>
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	2b18      	cmp	r3, #24
 8007a38:	d156      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x208>
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d151      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a44:	4b48      	ldr	r3, [pc, #288]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0304 	and.w	r3, r3, #4
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d005      	beq.n	8007a5c <HAL_RCC_OscConfig+0x17c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e368      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a5c:	4b42      	ldr	r3, [pc, #264]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f023 0219 	bic.w	r2, r3, #25
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	493f      	ldr	r1, [pc, #252]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a6e:	f7fe fe1f 	bl	80066b0 <HAL_GetTick>
 8007a72:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a74:	e008      	b.n	8007a88 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a76:	f7fe fe1b 	bl	80066b0 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d901      	bls.n	8007a88 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e352      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a88:	4b37      	ldr	r3, [pc, #220]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0f0      	beq.n	8007a76 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a94:	f7fe fe3c 	bl	8006710 <HAL_GetREVID>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d817      	bhi.n	8007ad2 <HAL_RCC_OscConfig+0x1f2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b40      	cmp	r3, #64	; 0x40
 8007aa8:	d108      	bne.n	8007abc <HAL_RCC_OscConfig+0x1dc>
 8007aaa:	4b2f      	ldr	r3, [pc, #188]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007ab2:	4a2d      	ldr	r2, [pc, #180]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ab8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007aba:	e07b      	b.n	8007bb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007abc:	4b2a      	ldr	r3, [pc, #168]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	031b      	lsls	r3, r3, #12
 8007aca:	4927      	ldr	r1, [pc, #156]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ad0:	e070      	b.n	8007bb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ad2:	4b25      	ldr	r3, [pc, #148]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	061b      	lsls	r3, r3, #24
 8007ae0:	4921      	ldr	r1, [pc, #132]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ae6:	e065      	b.n	8007bb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d048      	beq.n	8007b82 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007af0:	4b1d      	ldr	r3, [pc, #116]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f023 0219 	bic.w	r2, r3, #25
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	491a      	ldr	r1, [pc, #104]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b02:	f7fe fdd5 	bl	80066b0 <HAL_GetTick>
 8007b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b08:	e008      	b.n	8007b1c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b0a:	f7fe fdd1 	bl	80066b0 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d901      	bls.n	8007b1c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e308      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b1c:	4b12      	ldr	r3, [pc, #72]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0f0      	beq.n	8007b0a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b28:	f7fe fdf2 	bl	8006710 <HAL_GetREVID>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d81a      	bhi.n	8007b6c <HAL_RCC_OscConfig+0x28c>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	2b40      	cmp	r3, #64	; 0x40
 8007b3c:	d108      	bne.n	8007b50 <HAL_RCC_OscConfig+0x270>
 8007b3e:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b46:	4a08      	ldr	r2, [pc, #32]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b4c:	6053      	str	r3, [r2, #4]
 8007b4e:	e031      	b.n	8007bb4 <HAL_RCC_OscConfig+0x2d4>
 8007b50:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	031b      	lsls	r3, r3, #12
 8007b5e:	4902      	ldr	r1, [pc, #8]	; (8007b68 <HAL_RCC_OscConfig+0x288>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	604b      	str	r3, [r1, #4]
 8007b64:	e026      	b.n	8007bb4 <HAL_RCC_OscConfig+0x2d4>
 8007b66:	bf00      	nop
 8007b68:	58024400 	.word	0x58024400
 8007b6c:	4b9a      	ldr	r3, [pc, #616]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	061b      	lsls	r3, r3, #24
 8007b7a:	4997      	ldr	r1, [pc, #604]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	604b      	str	r3, [r1, #4]
 8007b80:	e018      	b.n	8007bb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b82:	4b95      	ldr	r3, [pc, #596]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a94      	ldr	r2, [pc, #592]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8e:	f7fe fd8f 	bl	80066b0 <HAL_GetTick>
 8007b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b94:	e008      	b.n	8007ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b96:	f7fe fd8b 	bl	80066b0 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d901      	bls.n	8007ba8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e2c2      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ba8:	4b8b      	ldr	r3, [pc, #556]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1f0      	bne.n	8007b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0310 	and.w	r3, r3, #16
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 80a9 	beq.w	8007d14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bc2:	4b85      	ldr	r3, [pc, #532]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bcc:	4b82      	ldr	r3, [pc, #520]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d007      	beq.n	8007be8 <HAL_RCC_OscConfig+0x308>
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	2b18      	cmp	r3, #24
 8007bdc:	d13a      	bne.n	8007c54 <HAL_RCC_OscConfig+0x374>
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f003 0303 	and.w	r3, r3, #3
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d135      	bne.n	8007c54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007be8:	4b7b      	ldr	r3, [pc, #492]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <HAL_RCC_OscConfig+0x320>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	2b80      	cmp	r3, #128	; 0x80
 8007bfa:	d001      	beq.n	8007c00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e296      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c00:	f7fe fd86 	bl	8006710 <HAL_GetREVID>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d817      	bhi.n	8007c3e <HAL_RCC_OscConfig+0x35e>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	d108      	bne.n	8007c28 <HAL_RCC_OscConfig+0x348>
 8007c16:	4b70      	ldr	r3, [pc, #448]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007c1e:	4a6e      	ldr	r2, [pc, #440]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c24:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c26:	e075      	b.n	8007d14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c28:	4b6b      	ldr	r3, [pc, #428]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	069b      	lsls	r3, r3, #26
 8007c36:	4968      	ldr	r1, [pc, #416]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c3c:	e06a      	b.n	8007d14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c3e:	4b66      	ldr	r3, [pc, #408]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	061b      	lsls	r3, r3, #24
 8007c4c:	4962      	ldr	r1, [pc, #392]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c52:	e05f      	b.n	8007d14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d042      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c5c:	4b5e      	ldr	r3, [pc, #376]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a5d      	ldr	r2, [pc, #372]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c68:	f7fe fd22 	bl	80066b0 <HAL_GetTick>
 8007c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007c70:	f7fe fd1e 	bl	80066b0 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e255      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c82:	4b55      	ldr	r3, [pc, #340]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f0      	beq.n	8007c70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c8e:	f7fe fd3f 	bl	8006710 <HAL_GetREVID>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d817      	bhi.n	8007ccc <HAL_RCC_OscConfig+0x3ec>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d108      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x3d6>
 8007ca4:	4b4c      	ldr	r3, [pc, #304]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007cac:	4a4a      	ldr	r2, [pc, #296]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007cae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cb2:	6053      	str	r3, [r2, #4]
 8007cb4:	e02e      	b.n	8007d14 <HAL_RCC_OscConfig+0x434>
 8007cb6:	4b48      	ldr	r3, [pc, #288]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	069b      	lsls	r3, r3, #26
 8007cc4:	4944      	ldr	r1, [pc, #272]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	604b      	str	r3, [r1, #4]
 8007cca:	e023      	b.n	8007d14 <HAL_RCC_OscConfig+0x434>
 8007ccc:	4b42      	ldr	r3, [pc, #264]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	061b      	lsls	r3, r3, #24
 8007cda:	493f      	ldr	r1, [pc, #252]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60cb      	str	r3, [r1, #12]
 8007ce0:	e018      	b.n	8007d14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ce2:	4b3d      	ldr	r3, [pc, #244]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a3c      	ldr	r2, [pc, #240]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cee:	f7fe fcdf 	bl	80066b0 <HAL_GetTick>
 8007cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007cf4:	e008      	b.n	8007d08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007cf6:	f7fe fcdb 	bl	80066b0 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d901      	bls.n	8007d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e212      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d08:	4b33      	ldr	r3, [pc, #204]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1f0      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d036      	beq.n	8007d8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d019      	beq.n	8007d5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d28:	4b2b      	ldr	r3, [pc, #172]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2c:	4a2a      	ldr	r2, [pc, #168]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d2e:	f043 0301 	orr.w	r3, r3, #1
 8007d32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d34:	f7fe fcbc 	bl	80066b0 <HAL_GetTick>
 8007d38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d3c:	f7fe fcb8 	bl	80066b0 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e1ef      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d4e:	4b22      	ldr	r3, [pc, #136]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0f0      	beq.n	8007d3c <HAL_RCC_OscConfig+0x45c>
 8007d5a:	e018      	b.n	8007d8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d5c:	4b1e      	ldr	r3, [pc, #120]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d60:	4a1d      	ldr	r2, [pc, #116]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d62:	f023 0301 	bic.w	r3, r3, #1
 8007d66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d68:	f7fe fca2 	bl	80066b0 <HAL_GetTick>
 8007d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d6e:	e008      	b.n	8007d82 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d70:	f7fe fc9e 	bl	80066b0 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e1d5      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d82:	4b15      	ldr	r3, [pc, #84]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1f0      	bne.n	8007d70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0320 	and.w	r3, r3, #32
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d039      	beq.n	8007e0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d01c      	beq.n	8007ddc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007da2:	4b0d      	ldr	r3, [pc, #52]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a0c      	ldr	r2, [pc, #48]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007dac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007dae:	f7fe fc7f 	bl	80066b0 <HAL_GetTick>
 8007db2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007db4:	e008      	b.n	8007dc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007db6:	f7fe fc7b 	bl	80066b0 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e1b2      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007dc8:	4b03      	ldr	r3, [pc, #12]	; (8007dd8 <HAL_RCC_OscConfig+0x4f8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0f0      	beq.n	8007db6 <HAL_RCC_OscConfig+0x4d6>
 8007dd4:	e01b      	b.n	8007e0e <HAL_RCC_OscConfig+0x52e>
 8007dd6:	bf00      	nop
 8007dd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ddc:	4b9b      	ldr	r3, [pc, #620]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a9a      	ldr	r2, [pc, #616]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007de6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007de8:	f7fe fc62 	bl	80066b0 <HAL_GetTick>
 8007dec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dee:	e008      	b.n	8007e02 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007df0:	f7fe fc5e 	bl	80066b0 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e195      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e02:	4b92      	ldr	r3, [pc, #584]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1f0      	bne.n	8007df0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0304 	and.w	r3, r3, #4
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 8081 	beq.w	8007f1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007e1c:	4b8c      	ldr	r3, [pc, #560]	; (8008050 <HAL_RCC_OscConfig+0x770>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a8b      	ldr	r2, [pc, #556]	; (8008050 <HAL_RCC_OscConfig+0x770>)
 8007e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e28:	f7fe fc42 	bl	80066b0 <HAL_GetTick>
 8007e2c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e2e:	e008      	b.n	8007e42 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e30:	f7fe fc3e 	bl	80066b0 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b64      	cmp	r3, #100	; 0x64
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e175      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e42:	4b83      	ldr	r3, [pc, #524]	; (8008050 <HAL_RCC_OscConfig+0x770>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f0      	beq.n	8007e30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d106      	bne.n	8007e64 <HAL_RCC_OscConfig+0x584>
 8007e56:	4b7d      	ldr	r3, [pc, #500]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5a:	4a7c      	ldr	r2, [pc, #496]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	6713      	str	r3, [r2, #112]	; 0x70
 8007e62:	e02d      	b.n	8007ec0 <HAL_RCC_OscConfig+0x5e0>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10c      	bne.n	8007e86 <HAL_RCC_OscConfig+0x5a6>
 8007e6c:	4b77      	ldr	r3, [pc, #476]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e70:	4a76      	ldr	r2, [pc, #472]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007e72:	f023 0301 	bic.w	r3, r3, #1
 8007e76:	6713      	str	r3, [r2, #112]	; 0x70
 8007e78:	4b74      	ldr	r3, [pc, #464]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7c:	4a73      	ldr	r2, [pc, #460]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007e7e:	f023 0304 	bic.w	r3, r3, #4
 8007e82:	6713      	str	r3, [r2, #112]	; 0x70
 8007e84:	e01c      	b.n	8007ec0 <HAL_RCC_OscConfig+0x5e0>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	d10c      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x5c8>
 8007e8e:	4b6f      	ldr	r3, [pc, #444]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e92:	4a6e      	ldr	r2, [pc, #440]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007e94:	f043 0304 	orr.w	r3, r3, #4
 8007e98:	6713      	str	r3, [r2, #112]	; 0x70
 8007e9a:	4b6c      	ldr	r3, [pc, #432]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9e:	4a6b      	ldr	r2, [pc, #428]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007ea0:	f043 0301 	orr.w	r3, r3, #1
 8007ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ea6:	e00b      	b.n	8007ec0 <HAL_RCC_OscConfig+0x5e0>
 8007ea8:	4b68      	ldr	r3, [pc, #416]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eac:	4a67      	ldr	r2, [pc, #412]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007eae:	f023 0301 	bic.w	r3, r3, #1
 8007eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8007eb4:	4b65      	ldr	r3, [pc, #404]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb8:	4a64      	ldr	r2, [pc, #400]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007eba:	f023 0304 	bic.w	r3, r3, #4
 8007ebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d015      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ec8:	f7fe fbf2 	bl	80066b0 <HAL_GetTick>
 8007ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ece:	e00a      	b.n	8007ee6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ed0:	f7fe fbee 	bl	80066b0 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d901      	bls.n	8007ee6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e123      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ee6:	4b59      	ldr	r3, [pc, #356]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0ee      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x5f0>
 8007ef2:	e014      	b.n	8007f1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef4:	f7fe fbdc 	bl	80066b0 <HAL_GetTick>
 8007ef8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007efa:	e00a      	b.n	8007f12 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007efc:	f7fe fbd8 	bl	80066b0 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e10d      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f12:	4b4e      	ldr	r3, [pc, #312]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1ee      	bne.n	8007efc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 8102 	beq.w	800812c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007f28:	4b48      	ldr	r3, [pc, #288]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f30:	2b18      	cmp	r3, #24
 8007f32:	f000 80bd 	beq.w	80080b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	f040 809e 	bne.w	800807c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f40:	4b42      	ldr	r3, [pc, #264]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a41      	ldr	r2, [pc, #260]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4c:	f7fe fbb0 	bl	80066b0 <HAL_GetTick>
 8007f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f52:	e008      	b.n	8007f66 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f54:	f7fe fbac 	bl	80066b0 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d901      	bls.n	8007f66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e0e3      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f66:	4b39      	ldr	r3, [pc, #228]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1f0      	bne.n	8007f54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f72:	4b36      	ldr	r3, [pc, #216]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f76:	4b37      	ldr	r3, [pc, #220]	; (8008054 <HAL_RCC_OscConfig+0x774>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f82:	0112      	lsls	r2, r2, #4
 8007f84:	430a      	orrs	r2, r1
 8007f86:	4931      	ldr	r1, [pc, #196]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	628b      	str	r3, [r1, #40]	; 0x28
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	3b01      	subs	r3, #1
 8007f92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	025b      	lsls	r3, r3, #9
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	041b      	lsls	r3, r3, #16
 8007faa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	061b      	lsls	r3, r3, #24
 8007fb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fbc:	4923      	ldr	r1, [pc, #140]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007fc2:	4b22      	ldr	r3, [pc, #136]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc6:	4a21      	ldr	r2, [pc, #132]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007fc8:	f023 0301 	bic.w	r3, r3, #1
 8007fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007fce:	4b1f      	ldr	r3, [pc, #124]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fd2:	4b21      	ldr	r3, [pc, #132]	; (8008058 <HAL_RCC_OscConfig+0x778>)
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007fda:	00d2      	lsls	r2, r2, #3
 8007fdc:	491b      	ldr	r1, [pc, #108]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	f023 020c 	bic.w	r2, r3, #12
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	4917      	ldr	r1, [pc, #92]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ff4:	4b15      	ldr	r3, [pc, #84]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	f023 0202 	bic.w	r2, r3, #2
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008000:	4912      	ldr	r1, [pc, #72]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8008002:	4313      	orrs	r3, r2
 8008004:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008006:	4b11      	ldr	r3, [pc, #68]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8008008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800a:	4a10      	ldr	r2, [pc, #64]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 800800c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008012:	4b0e      	ldr	r3, [pc, #56]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008016:	4a0d      	ldr	r2, [pc, #52]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8008018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800801c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800801e:	4b0b      	ldr	r3, [pc, #44]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	4a0a      	ldr	r2, [pc, #40]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8008024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800802a:	4b08      	ldr	r3, [pc, #32]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	4a07      	ldr	r2, [pc, #28]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8008030:	f043 0301 	orr.w	r3, r3, #1
 8008034:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008036:	4b05      	ldr	r3, [pc, #20]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a04      	ldr	r2, [pc, #16]	; (800804c <HAL_RCC_OscConfig+0x76c>)
 800803c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008042:	f7fe fb35 	bl	80066b0 <HAL_GetTick>
 8008046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008048:	e011      	b.n	800806e <HAL_RCC_OscConfig+0x78e>
 800804a:	bf00      	nop
 800804c:	58024400 	.word	0x58024400
 8008050:	58024800 	.word	0x58024800
 8008054:	fffffc0c 	.word	0xfffffc0c
 8008058:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800805c:	f7fe fb28 	bl	80066b0 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b02      	cmp	r3, #2
 8008068:	d901      	bls.n	800806e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e05f      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800806e:	4b32      	ldr	r3, [pc, #200]	; (8008138 <HAL_RCC_OscConfig+0x858>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0f0      	beq.n	800805c <HAL_RCC_OscConfig+0x77c>
 800807a:	e057      	b.n	800812c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800807c:	4b2e      	ldr	r3, [pc, #184]	; (8008138 <HAL_RCC_OscConfig+0x858>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a2d      	ldr	r2, [pc, #180]	; (8008138 <HAL_RCC_OscConfig+0x858>)
 8008082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008088:	f7fe fb12 	bl	80066b0 <HAL_GetTick>
 800808c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800808e:	e008      	b.n	80080a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008090:	f7fe fb0e 	bl	80066b0 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b02      	cmp	r3, #2
 800809c:	d901      	bls.n	80080a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e045      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080a2:	4b25      	ldr	r3, [pc, #148]	; (8008138 <HAL_RCC_OscConfig+0x858>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1f0      	bne.n	8008090 <HAL_RCC_OscConfig+0x7b0>
 80080ae:	e03d      	b.n	800812c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80080b0:	4b21      	ldr	r3, [pc, #132]	; (8008138 <HAL_RCC_OscConfig+0x858>)
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80080b6:	4b20      	ldr	r3, [pc, #128]	; (8008138 <HAL_RCC_OscConfig+0x858>)
 80080b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d031      	beq.n	8008128 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f003 0203 	and.w	r2, r3, #3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d12a      	bne.n	8008128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	091b      	lsrs	r3, r3, #4
 80080d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080de:	429a      	cmp	r2, r3
 80080e0:	d122      	bne.n	8008128 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d11a      	bne.n	8008128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	0a5b      	lsrs	r3, r3, #9
 80080f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008100:	429a      	cmp	r2, r3
 8008102:	d111      	bne.n	8008128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	0c1b      	lsrs	r3, r3, #16
 8008108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008112:	429a      	cmp	r2, r3
 8008114:	d108      	bne.n	8008128 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	0e1b      	lsrs	r3, r3, #24
 800811a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008122:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008124:	429a      	cmp	r2, r3
 8008126:	d001      	beq.n	800812c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e000      	b.n	800812e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3730      	adds	r7, #48	; 0x30
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	58024400 	.word	0x58024400

0800813c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e19c      	b.n	800848a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008150:	4b8a      	ldr	r3, [pc, #552]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 030f 	and.w	r3, r3, #15
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d910      	bls.n	8008180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800815e:	4b87      	ldr	r3, [pc, #540]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f023 020f 	bic.w	r2, r3, #15
 8008166:	4985      	ldr	r1, [pc, #532]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	4313      	orrs	r3, r2
 800816c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800816e:	4b83      	ldr	r3, [pc, #524]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 030f 	and.w	r3, r3, #15
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d001      	beq.n	8008180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e184      	b.n	800848a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	d010      	beq.n	80081ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691a      	ldr	r2, [r3, #16]
 8008190:	4b7b      	ldr	r3, [pc, #492]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008198:	429a      	cmp	r2, r3
 800819a:	d908      	bls.n	80081ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800819c:	4b78      	ldr	r3, [pc, #480]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	4975      	ldr	r1, [pc, #468]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d010      	beq.n	80081dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	695a      	ldr	r2, [r3, #20]
 80081be:	4b70      	ldr	r3, [pc, #448]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d908      	bls.n	80081dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80081ca:	4b6d      	ldr	r3, [pc, #436]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	496a      	ldr	r1, [pc, #424]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0310 	and.w	r3, r3, #16
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d010      	beq.n	800820a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699a      	ldr	r2, [r3, #24]
 80081ec:	4b64      	ldr	r3, [pc, #400]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d908      	bls.n	800820a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80081f8:	4b61      	ldr	r3, [pc, #388]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	495e      	ldr	r1, [pc, #376]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 8008206:	4313      	orrs	r3, r2
 8008208:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0320 	and.w	r3, r3, #32
 8008212:	2b00      	cmp	r3, #0
 8008214:	d010      	beq.n	8008238 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69da      	ldr	r2, [r3, #28]
 800821a:	4b59      	ldr	r3, [pc, #356]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008222:	429a      	cmp	r2, r3
 8008224:	d908      	bls.n	8008238 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008226:	4b56      	ldr	r3, [pc, #344]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	4953      	ldr	r1, [pc, #332]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 8008234:	4313      	orrs	r3, r2
 8008236:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0302 	and.w	r3, r3, #2
 8008240:	2b00      	cmp	r3, #0
 8008242:	d010      	beq.n	8008266 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	4b4d      	ldr	r3, [pc, #308]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f003 030f 	and.w	r3, r3, #15
 8008250:	429a      	cmp	r2, r3
 8008252:	d908      	bls.n	8008266 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008254:	4b4a      	ldr	r3, [pc, #296]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f023 020f 	bic.w	r2, r3, #15
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	4947      	ldr	r1, [pc, #284]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 8008262:	4313      	orrs	r3, r2
 8008264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d055      	beq.n	800831e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008272:	4b43      	ldr	r3, [pc, #268]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	4940      	ldr	r1, [pc, #256]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 8008280:	4313      	orrs	r3, r2
 8008282:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d107      	bne.n	800829c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800828c:	4b3c      	ldr	r3, [pc, #240]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d121      	bne.n	80082dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e0f6      	b.n	800848a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d107      	bne.n	80082b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082a4:	4b36      	ldr	r3, [pc, #216]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d115      	bne.n	80082dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e0ea      	b.n	800848a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d107      	bne.n	80082cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082bc:	4b30      	ldr	r3, [pc, #192]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d109      	bne.n	80082dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e0de      	b.n	800848a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082cc:	4b2c      	ldr	r3, [pc, #176]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e0d6      	b.n	800848a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80082dc:	4b28      	ldr	r3, [pc, #160]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	f023 0207 	bic.w	r2, r3, #7
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	4925      	ldr	r1, [pc, #148]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ee:	f7fe f9df 	bl	80066b0 <HAL_GetTick>
 80082f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082f4:	e00a      	b.n	800830c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082f6:	f7fe f9db 	bl	80066b0 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	f241 3288 	movw	r2, #5000	; 0x1388
 8008304:	4293      	cmp	r3, r2
 8008306:	d901      	bls.n	800830c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e0be      	b.n	800848a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800830c:	4b1c      	ldr	r3, [pc, #112]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	00db      	lsls	r3, r3, #3
 800831a:	429a      	cmp	r2, r3
 800831c:	d1eb      	bne.n	80082f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d010      	beq.n	800834c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	4b14      	ldr	r3, [pc, #80]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	429a      	cmp	r2, r3
 8008338:	d208      	bcs.n	800834c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800833a:	4b11      	ldr	r3, [pc, #68]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	f023 020f 	bic.w	r2, r3, #15
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	490e      	ldr	r1, [pc, #56]	; (8008380 <HAL_RCC_ClockConfig+0x244>)
 8008348:	4313      	orrs	r3, r2
 800834a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800834c:	4b0b      	ldr	r3, [pc, #44]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	429a      	cmp	r2, r3
 8008358:	d214      	bcs.n	8008384 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800835a:	4b08      	ldr	r3, [pc, #32]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f023 020f 	bic.w	r2, r3, #15
 8008362:	4906      	ldr	r1, [pc, #24]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	4313      	orrs	r3, r2
 8008368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800836a:	4b04      	ldr	r3, [pc, #16]	; (800837c <HAL_RCC_ClockConfig+0x240>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	429a      	cmp	r2, r3
 8008376:	d005      	beq.n	8008384 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e086      	b.n	800848a <HAL_RCC_ClockConfig+0x34e>
 800837c:	52002000 	.word	0x52002000
 8008380:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	2b00      	cmp	r3, #0
 800838e:	d010      	beq.n	80083b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691a      	ldr	r2, [r3, #16]
 8008394:	4b3f      	ldr	r3, [pc, #252]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800839c:	429a      	cmp	r2, r3
 800839e:	d208      	bcs.n	80083b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083a0:	4b3c      	ldr	r3, [pc, #240]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	4939      	ldr	r1, [pc, #228]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0308 	and.w	r3, r3, #8
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d010      	beq.n	80083e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	695a      	ldr	r2, [r3, #20]
 80083c2:	4b34      	ldr	r3, [pc, #208]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 80083c4:	69db      	ldr	r3, [r3, #28]
 80083c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d208      	bcs.n	80083e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083ce:	4b31      	ldr	r3, [pc, #196]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	492e      	ldr	r1, [pc, #184]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0310 	and.w	r3, r3, #16
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d010      	beq.n	800840e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699a      	ldr	r2, [r3, #24]
 80083f0:	4b28      	ldr	r3, [pc, #160]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d208      	bcs.n	800840e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083fc:	4b25      	ldr	r3, [pc, #148]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	4922      	ldr	r1, [pc, #136]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 800840a:	4313      	orrs	r3, r2
 800840c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d010      	beq.n	800843c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	69da      	ldr	r2, [r3, #28]
 800841e:	4b1d      	ldr	r3, [pc, #116]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008426:	429a      	cmp	r2, r3
 8008428:	d208      	bcs.n	800843c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800842a:	4b1a      	ldr	r3, [pc, #104]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	4917      	ldr	r1, [pc, #92]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 8008438:	4313      	orrs	r3, r2
 800843a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800843c:	f000 f834 	bl	80084a8 <HAL_RCC_GetSysClockFreq>
 8008440:	4602      	mov	r2, r0
 8008442:	4b14      	ldr	r3, [pc, #80]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	0a1b      	lsrs	r3, r3, #8
 8008448:	f003 030f 	and.w	r3, r3, #15
 800844c:	4912      	ldr	r1, [pc, #72]	; (8008498 <HAL_RCC_ClockConfig+0x35c>)
 800844e:	5ccb      	ldrb	r3, [r1, r3]
 8008450:	f003 031f 	and.w	r3, r3, #31
 8008454:	fa22 f303 	lsr.w	r3, r2, r3
 8008458:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800845a:	4b0e      	ldr	r3, [pc, #56]	; (8008494 <HAL_RCC_ClockConfig+0x358>)
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	4a0d      	ldr	r2, [pc, #52]	; (8008498 <HAL_RCC_ClockConfig+0x35c>)
 8008464:	5cd3      	ldrb	r3, [r2, r3]
 8008466:	f003 031f 	and.w	r3, r3, #31
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	fa22 f303 	lsr.w	r3, r2, r3
 8008470:	4a0a      	ldr	r2, [pc, #40]	; (800849c <HAL_RCC_ClockConfig+0x360>)
 8008472:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008474:	4a0a      	ldr	r2, [pc, #40]	; (80084a0 <HAL_RCC_ClockConfig+0x364>)
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800847a:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <HAL_RCC_ClockConfig+0x368>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe f8cc 	bl	800661c <HAL_InitTick>
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	58024400 	.word	0x58024400
 8008498:	08011ba0 	.word	0x08011ba0
 800849c:	2400005c 	.word	0x2400005c
 80084a0:	24000058 	.word	0x24000058
 80084a4:	24000060 	.word	0x24000060

080084a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b089      	sub	sp, #36	; 0x24
 80084ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084ae:	4bb3      	ldr	r3, [pc, #716]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084b6:	2b18      	cmp	r3, #24
 80084b8:	f200 8155 	bhi.w	8008766 <HAL_RCC_GetSysClockFreq+0x2be>
 80084bc:	a201      	add	r2, pc, #4	; (adr r2, 80084c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80084be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c2:	bf00      	nop
 80084c4:	08008529 	.word	0x08008529
 80084c8:	08008767 	.word	0x08008767
 80084cc:	08008767 	.word	0x08008767
 80084d0:	08008767 	.word	0x08008767
 80084d4:	08008767 	.word	0x08008767
 80084d8:	08008767 	.word	0x08008767
 80084dc:	08008767 	.word	0x08008767
 80084e0:	08008767 	.word	0x08008767
 80084e4:	0800854f 	.word	0x0800854f
 80084e8:	08008767 	.word	0x08008767
 80084ec:	08008767 	.word	0x08008767
 80084f0:	08008767 	.word	0x08008767
 80084f4:	08008767 	.word	0x08008767
 80084f8:	08008767 	.word	0x08008767
 80084fc:	08008767 	.word	0x08008767
 8008500:	08008767 	.word	0x08008767
 8008504:	08008555 	.word	0x08008555
 8008508:	08008767 	.word	0x08008767
 800850c:	08008767 	.word	0x08008767
 8008510:	08008767 	.word	0x08008767
 8008514:	08008767 	.word	0x08008767
 8008518:	08008767 	.word	0x08008767
 800851c:	08008767 	.word	0x08008767
 8008520:	08008767 	.word	0x08008767
 8008524:	0800855b 	.word	0x0800855b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008528:	4b94      	ldr	r3, [pc, #592]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0320 	and.w	r3, r3, #32
 8008530:	2b00      	cmp	r3, #0
 8008532:	d009      	beq.n	8008548 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008534:	4b91      	ldr	r3, [pc, #580]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	08db      	lsrs	r3, r3, #3
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	4a90      	ldr	r2, [pc, #576]	; (8008780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008540:	fa22 f303 	lsr.w	r3, r2, r3
 8008544:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008546:	e111      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008548:	4b8d      	ldr	r3, [pc, #564]	; (8008780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800854a:	61bb      	str	r3, [r7, #24]
    break;
 800854c:	e10e      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800854e:	4b8d      	ldr	r3, [pc, #564]	; (8008784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008550:	61bb      	str	r3, [r7, #24]
    break;
 8008552:	e10b      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008554:	4b8c      	ldr	r3, [pc, #560]	; (8008788 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008556:	61bb      	str	r3, [r7, #24]
    break;
 8008558:	e108      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800855a:	4b88      	ldr	r3, [pc, #544]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800855c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008564:	4b85      	ldr	r3, [pc, #532]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008568:	091b      	lsrs	r3, r3, #4
 800856a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800856e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008570:	4b82      	ldr	r3, [pc, #520]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800857a:	4b80      	ldr	r3, [pc, #512]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800857c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857e:	08db      	lsrs	r3, r3, #3
 8008580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	fb02 f303 	mul.w	r3, r2, r3
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80e1 	beq.w	8008760 <HAL_RCC_GetSysClockFreq+0x2b8>
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	f000 8083 	beq.w	80086ac <HAL_RCC_GetSysClockFreq+0x204>
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	f200 80a1 	bhi.w	80086f0 <HAL_RCC_GetSysClockFreq+0x248>
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d003      	beq.n	80085bc <HAL_RCC_GetSysClockFreq+0x114>
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d056      	beq.n	8008668 <HAL_RCC_GetSysClockFreq+0x1c0>
 80085ba:	e099      	b.n	80086f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085bc:	4b6f      	ldr	r3, [pc, #444]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0320 	and.w	r3, r3, #32
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d02d      	beq.n	8008624 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085c8:	4b6c      	ldr	r3, [pc, #432]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	08db      	lsrs	r3, r3, #3
 80085ce:	f003 0303 	and.w	r3, r3, #3
 80085d2:	4a6b      	ldr	r2, [pc, #428]	; (8008780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085d4:	fa22 f303 	lsr.w	r3, r2, r3
 80085d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	ee07 3a90 	vmov	s15, r3
 80085e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f2:	4b62      	ldr	r3, [pc, #392]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008602:	ed97 6a02 	vldr	s12, [r7, #8]
 8008606:	eddf 5a61 	vldr	s11, [pc, #388]	; 800878c <HAL_RCC_GetSysClockFreq+0x2e4>
 800860a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008622:	e087      	b.n	8008734 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008790 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008636:	4b51      	ldr	r3, [pc, #324]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008646:	ed97 6a02 	vldr	s12, [r7, #8]
 800864a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800878c <HAL_RCC_GetSysClockFreq+0x2e4>
 800864e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800865a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800865e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008666:	e065      	b.n	8008734 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008672:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008794 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800867a:	4b40      	ldr	r3, [pc, #256]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008682:	ee07 3a90 	vmov	s15, r3
 8008686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868a:	ed97 6a02 	vldr	s12, [r7, #8]
 800868e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800878c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800869a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800869e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086aa:	e043      	b.n	8008734 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008798 <HAL_RCC_GetSysClockFreq+0x2f0>
 80086ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086be:	4b2f      	ldr	r3, [pc, #188]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80086d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800878c <HAL_RCC_GetSysClockFreq+0x2e4>
 80086d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086ee:	e021      	b.n	8008734 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008794 <HAL_RCC_GetSysClockFreq+0x2ec>
 80086fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008702:	4b1e      	ldr	r3, [pc, #120]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008712:	ed97 6a02 	vldr	s12, [r7, #8]
 8008716:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800878c <HAL_RCC_GetSysClockFreq+0x2e4>
 800871a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800871e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800872a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800872e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008732:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008734:	4b11      	ldr	r3, [pc, #68]	; (800877c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008738:	0a5b      	lsrs	r3, r3, #9
 800873a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800873e:	3301      	adds	r3, #1
 8008740:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800874c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008758:	ee17 3a90 	vmov	r3, s15
 800875c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800875e:	e005      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	61bb      	str	r3, [r7, #24]
    break;
 8008764:	e002      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008766:	4b07      	ldr	r3, [pc, #28]	; (8008784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008768:	61bb      	str	r3, [r7, #24]
    break;
 800876a:	bf00      	nop
  }

  return sysclockfreq;
 800876c:	69bb      	ldr	r3, [r7, #24]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3724      	adds	r7, #36	; 0x24
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	58024400 	.word	0x58024400
 8008780:	03d09000 	.word	0x03d09000
 8008784:	003d0900 	.word	0x003d0900
 8008788:	017d7840 	.word	0x017d7840
 800878c:	46000000 	.word	0x46000000
 8008790:	4c742400 	.word	0x4c742400
 8008794:	4a742400 	.word	0x4a742400
 8008798:	4bbebc20 	.word	0x4bbebc20

0800879c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80087a2:	f7ff fe81 	bl	80084a8 <HAL_RCC_GetSysClockFreq>
 80087a6:	4602      	mov	r2, r0
 80087a8:	4b10      	ldr	r3, [pc, #64]	; (80087ec <HAL_RCC_GetHCLKFreq+0x50>)
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	0a1b      	lsrs	r3, r3, #8
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	490f      	ldr	r1, [pc, #60]	; (80087f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80087b4:	5ccb      	ldrb	r3, [r1, r3]
 80087b6:	f003 031f 	and.w	r3, r3, #31
 80087ba:	fa22 f303 	lsr.w	r3, r2, r3
 80087be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087c0:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <HAL_RCC_GetHCLKFreq+0x50>)
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	f003 030f 	and.w	r3, r3, #15
 80087c8:	4a09      	ldr	r2, [pc, #36]	; (80087f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80087ca:	5cd3      	ldrb	r3, [r2, r3]
 80087cc:	f003 031f 	and.w	r3, r3, #31
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	fa22 f303 	lsr.w	r3, r2, r3
 80087d6:	4a07      	ldr	r2, [pc, #28]	; (80087f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80087d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087da:	4a07      	ldr	r2, [pc, #28]	; (80087f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80087e0:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80087e2:	681b      	ldr	r3, [r3, #0]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	58024400 	.word	0x58024400
 80087f0:	08011ba0 	.word	0x08011ba0
 80087f4:	2400005c 	.word	0x2400005c
 80087f8:	24000058 	.word	0x24000058

080087fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008800:	f7ff ffcc 	bl	800879c <HAL_RCC_GetHCLKFreq>
 8008804:	4602      	mov	r2, r0
 8008806:	4b06      	ldr	r3, [pc, #24]	; (8008820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	091b      	lsrs	r3, r3, #4
 800880c:	f003 0307 	and.w	r3, r3, #7
 8008810:	4904      	ldr	r1, [pc, #16]	; (8008824 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008812:	5ccb      	ldrb	r3, [r1, r3]
 8008814:	f003 031f 	and.w	r3, r3, #31
 8008818:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800881c:	4618      	mov	r0, r3
 800881e:	bd80      	pop	{r7, pc}
 8008820:	58024400 	.word	0x58024400
 8008824:	08011ba0 	.word	0x08011ba0

08008828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800882c:	f7ff ffb6 	bl	800879c <HAL_RCC_GetHCLKFreq>
 8008830:	4602      	mov	r2, r0
 8008832:	4b06      	ldr	r3, [pc, #24]	; (800884c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	0a1b      	lsrs	r3, r3, #8
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	4904      	ldr	r1, [pc, #16]	; (8008850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800883e:	5ccb      	ldrb	r3, [r1, r3]
 8008840:	f003 031f 	and.w	r3, r3, #31
 8008844:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008848:	4618      	mov	r0, r3
 800884a:	bd80      	pop	{r7, pc}
 800884c:	58024400 	.word	0x58024400
 8008850:	08011ba0 	.word	0x08011ba0

08008854 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800885c:	2300      	movs	r3, #0
 800885e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008860:	2300      	movs	r3, #0
 8008862:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d03f      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008874:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008878:	d02a      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800887a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800887e:	d824      	bhi.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008884:	d018      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800888a:	d81e      	bhi.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008894:	d007      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008896:	e018      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008898:	4ba3      	ldr	r3, [pc, #652]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	4aa2      	ldr	r2, [pc, #648]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800889e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80088a4:	e015      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	3304      	adds	r3, #4
 80088aa:	2102      	movs	r1, #2
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 f9d5 	bl	8009c5c <RCCEx_PLL2_Config>
 80088b2:	4603      	mov	r3, r0
 80088b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80088b6:	e00c      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3324      	adds	r3, #36	; 0x24
 80088bc:	2102      	movs	r1, #2
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 fa7e 	bl	8009dc0 <RCCEx_PLL3_Config>
 80088c4:	4603      	mov	r3, r0
 80088c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80088c8:	e003      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	75fb      	strb	r3, [r7, #23]
      break;
 80088ce:	e000      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80088d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d109      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80088d8:	4b93      	ldr	r3, [pc, #588]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e4:	4990      	ldr	r1, [pc, #576]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	650b      	str	r3, [r1, #80]	; 0x50
 80088ea:	e001      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d03d      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008900:	2b04      	cmp	r3, #4
 8008902:	d826      	bhi.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008904:	a201      	add	r2, pc, #4	; (adr r2, 800890c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890a:	bf00      	nop
 800890c:	08008921 	.word	0x08008921
 8008910:	0800892f 	.word	0x0800892f
 8008914:	08008941 	.word	0x08008941
 8008918:	08008959 	.word	0x08008959
 800891c:	08008959 	.word	0x08008959
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008920:	4b81      	ldr	r3, [pc, #516]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008924:	4a80      	ldr	r2, [pc, #512]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800892a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800892c:	e015      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3304      	adds	r3, #4
 8008932:	2100      	movs	r1, #0
 8008934:	4618      	mov	r0, r3
 8008936:	f001 f991 	bl	8009c5c <RCCEx_PLL2_Config>
 800893a:	4603      	mov	r3, r0
 800893c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800893e:	e00c      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3324      	adds	r3, #36	; 0x24
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fa3a 	bl	8009dc0 <RCCEx_PLL3_Config>
 800894c:	4603      	mov	r3, r0
 800894e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008950:	e003      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]
      break;
 8008956:	e000      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d109      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008960:	4b71      	ldr	r3, [pc, #452]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008964:	f023 0207 	bic.w	r2, r3, #7
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896c:	496e      	ldr	r1, [pc, #440]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800896e:	4313      	orrs	r3, r2
 8008970:	650b      	str	r3, [r1, #80]	; 0x50
 8008972:	e001      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008980:	2b00      	cmp	r3, #0
 8008982:	d042      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800898c:	d02b      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800898e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008992:	d825      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008994:	2bc0      	cmp	r3, #192	; 0xc0
 8008996:	d028      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008998:	2bc0      	cmp	r3, #192	; 0xc0
 800899a:	d821      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800899c:	2b80      	cmp	r3, #128	; 0x80
 800899e:	d016      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80089a0:	2b80      	cmp	r3, #128	; 0x80
 80089a2:	d81d      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80089a8:	2b40      	cmp	r3, #64	; 0x40
 80089aa:	d007      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80089ac:	e018      	b.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ae:	4b5e      	ldr	r3, [pc, #376]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b2:	4a5d      	ldr	r2, [pc, #372]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80089ba:	e017      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3304      	adds	r3, #4
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f001 f94a 	bl	8009c5c <RCCEx_PLL2_Config>
 80089c8:	4603      	mov	r3, r0
 80089ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80089cc:	e00e      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	3324      	adds	r3, #36	; 0x24
 80089d2:	2100      	movs	r1, #0
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 f9f3 	bl	8009dc0 <RCCEx_PLL3_Config>
 80089da:	4603      	mov	r3, r0
 80089dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80089de:	e005      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	75fb      	strb	r3, [r7, #23]
      break;
 80089e4:	e002      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80089e6:	bf00      	nop
 80089e8:	e000      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80089ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80089f2:	4b4d      	ldr	r3, [pc, #308]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089fe:	494a      	ldr	r1, [pc, #296]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	650b      	str	r3, [r1, #80]	; 0x50
 8008a04:	e001      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d049      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a20:	d030      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008a22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a26:	d82a      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a2c:	d02c      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008a2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a32:	d824      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a38:	d018      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a3e:	d81e      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a48:	d007      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008a4a:	e018      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a4c:	4b36      	ldr	r3, [pc, #216]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	4a35      	ldr	r2, [pc, #212]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a58:	e017      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	2100      	movs	r1, #0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 f8fb 	bl	8009c5c <RCCEx_PLL2_Config>
 8008a66:	4603      	mov	r3, r0
 8008a68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008a6a:	e00e      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3324      	adds	r3, #36	; 0x24
 8008a70:	2100      	movs	r1, #0
 8008a72:	4618      	mov	r0, r3
 8008a74:	f001 f9a4 	bl	8009dc0 <RCCEx_PLL3_Config>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a7c:	e005      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	75fb      	strb	r3, [r7, #23]
      break;
 8008a82:	e002      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008a84:	bf00      	nop
 8008a86:	e000      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008a90:	4b25      	ldr	r3, [pc, #148]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a9e:	4922      	ldr	r1, [pc, #136]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	658b      	str	r3, [r1, #88]	; 0x58
 8008aa4:	e001      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa6:	7dfb      	ldrb	r3, [r7, #23]
 8008aa8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d04b      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008abc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ac0:	d030      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008ac2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ac6:	d82a      	bhi.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008ac8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008acc:	d02e      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008ace:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ad2:	d824      	bhi.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008ad4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ad8:	d018      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008ada:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ade:	d81e      	bhi.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d003      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ae8:	d007      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008aea:	e018      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aec:	4b0e      	ldr	r3, [pc, #56]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	4a0d      	ldr	r2, [pc, #52]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008af6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008af8:	e019      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3304      	adds	r3, #4
 8008afe:	2100      	movs	r1, #0
 8008b00:	4618      	mov	r0, r3
 8008b02:	f001 f8ab 	bl	8009c5c <RCCEx_PLL2_Config>
 8008b06:	4603      	mov	r3, r0
 8008b08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008b0a:	e010      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3324      	adds	r3, #36	; 0x24
 8008b10:	2100      	movs	r1, #0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f001 f954 	bl	8009dc0 <RCCEx_PLL3_Config>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b1c:	e007      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	75fb      	strb	r3, [r7, #23]
      break;
 8008b22:	e004      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008b24:	bf00      	nop
 8008b26:	e002      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008b28:	58024400 	.word	0x58024400
      break;
 8008b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008b34:	4b99      	ldr	r3, [pc, #612]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b38:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b42:	4996      	ldr	r1, [pc, #600]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	658b      	str	r3, [r1, #88]	; 0x58
 8008b48:	e001      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d032      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b5e:	2b30      	cmp	r3, #48	; 0x30
 8008b60:	d01c      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008b62:	2b30      	cmp	r3, #48	; 0x30
 8008b64:	d817      	bhi.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d00c      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	d813      	bhi.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d016      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008b72:	2b10      	cmp	r3, #16
 8008b74:	d10f      	bne.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b76:	4b89      	ldr	r3, [pc, #548]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	4a88      	ldr	r2, [pc, #544]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008b82:	e00e      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3304      	adds	r3, #4
 8008b88:	2102      	movs	r1, #2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f001 f866 	bl	8009c5c <RCCEx_PLL2_Config>
 8008b90:	4603      	mov	r3, r0
 8008b92:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008b94:	e005      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	75fb      	strb	r3, [r7, #23]
      break;
 8008b9a:	e002      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e000      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d109      	bne.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008ba8:	4b7c      	ldr	r3, [pc, #496]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bb4:	4979      	ldr	r1, [pc, #484]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008bba:	e001      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d047      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bd4:	d030      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bda:	d82a      	bhi.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008bdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008be0:	d02c      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008be2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008be6:	d824      	bhi.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bec:	d018      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bf2:	d81e      	bhi.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bfc:	d007      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008bfe:	e018      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c00:	4b66      	ldr	r3, [pc, #408]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	4a65      	ldr	r2, [pc, #404]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008c0c:	e017      	b.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3304      	adds	r3, #4
 8008c12:	2100      	movs	r1, #0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 f821 	bl	8009c5c <RCCEx_PLL2_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008c1e:	e00e      	b.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3324      	adds	r3, #36	; 0x24
 8008c24:	2100      	movs	r1, #0
 8008c26:	4618      	mov	r0, r3
 8008c28:	f001 f8ca 	bl	8009dc0 <RCCEx_PLL3_Config>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008c30:	e005      	b.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	75fb      	strb	r3, [r7, #23]
      break;
 8008c36:	e002      	b.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008c38:	bf00      	nop
 8008c3a:	e000      	b.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008c44:	4b55      	ldr	r3, [pc, #340]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c50:	4952      	ldr	r1, [pc, #328]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	650b      	str	r3, [r1, #80]	; 0x50
 8008c56:	e001      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c58:	7dfb      	ldrb	r3, [r7, #23]
 8008c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d049      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c70:	d02e      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008c72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c76:	d828      	bhi.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008c78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c7c:	d02a      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008c7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c82:	d822      	bhi.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008c84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c88:	d026      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008c8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c8e:	d81c      	bhi.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c94:	d010      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008c96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c9a:	d816      	bhi.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01d      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca4:	d111      	bne.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	2101      	movs	r1, #1
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 ffd5 	bl	8009c5c <RCCEx_PLL2_Config>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008cb6:	e012      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3324      	adds	r3, #36	; 0x24
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 f87e 	bl	8009dc0 <RCCEx_PLL3_Config>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008cc8:	e009      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8008cce:	e006      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008cd0:	bf00      	nop
 8008cd2:	e004      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008cd4:	bf00      	nop
 8008cd6:	e002      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008cd8:	bf00      	nop
 8008cda:	e000      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cde:	7dfb      	ldrb	r3, [r7, #23]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d109      	bne.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ce4:	4b2d      	ldr	r3, [pc, #180]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cf0:	492a      	ldr	r1, [pc, #168]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	650b      	str	r3, [r1, #80]	; 0x50
 8008cf6:	e001      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf8:	7dfb      	ldrb	r3, [r7, #23]
 8008cfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d04d      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d12:	d02e      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d18:	d828      	bhi.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d1e:	d02a      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d24:	d822      	bhi.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008d26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d2a:	d026      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008d2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d30:	d81c      	bhi.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d36:	d010      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d3c:	d816      	bhi.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d01d      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d46:	d111      	bne.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 ff84 	bl	8009c5c <RCCEx_PLL2_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008d58:	e012      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3324      	adds	r3, #36	; 0x24
 8008d5e:	2101      	movs	r1, #1
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 f82d 	bl	8009dc0 <RCCEx_PLL3_Config>
 8008d66:	4603      	mov	r3, r0
 8008d68:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008d6a:	e009      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d70:	e006      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008d72:	bf00      	nop
 8008d74:	e004      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008d76:	bf00      	nop
 8008d78:	e002      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008d7a:	bf00      	nop
 8008d7c:	e000      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10c      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d86:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d94:	4901      	ldr	r1, [pc, #4]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	658b      	str	r3, [r1, #88]	; 0x58
 8008d9a:	e003      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008d9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
 8008da2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d02f      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db8:	d00e      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dbe:	d814      	bhi.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d015      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008dc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dc8:	d10f      	bne.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dca:	4baf      	ldr	r3, [pc, #700]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	4aae      	ldr	r2, [pc, #696]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008dd6:	e00c      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	2101      	movs	r1, #1
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 ff3c 	bl	8009c5c <RCCEx_PLL2_Config>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008de8:	e003      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	75fb      	strb	r3, [r7, #23]
      break;
 8008dee:	e000      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008df8:	4ba3      	ldr	r3, [pc, #652]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e04:	49a0      	ldr	r1, [pc, #640]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	650b      	str	r3, [r1, #80]	; 0x50
 8008e0a:	e001      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d032      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d81b      	bhi.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008e24:	a201      	add	r2, pc, #4	; (adr r2, 8008e2c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2a:	bf00      	nop
 8008e2c:	08008e63 	.word	0x08008e63
 8008e30:	08008e3d 	.word	0x08008e3d
 8008e34:	08008e4b 	.word	0x08008e4b
 8008e38:	08008e63 	.word	0x08008e63
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e3c:	4b92      	ldr	r3, [pc, #584]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	4a91      	ldr	r2, [pc, #580]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008e48:	e00c      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	2102      	movs	r1, #2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 ff03 	bl	8009c5c <RCCEx_PLL2_Config>
 8008e56:	4603      	mov	r3, r0
 8008e58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008e5a:	e003      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e60:	e000      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d109      	bne.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e6a:	4b87      	ldr	r3, [pc, #540]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e6e:	f023 0203 	bic.w	r2, r3, #3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e76:	4984      	ldr	r1, [pc, #528]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e7c:	e001      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
 8008e80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 8086 	beq.w	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e90:	4b7e      	ldr	r3, [pc, #504]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a7d      	ldr	r2, [pc, #500]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e9c:	f7fd fc08 	bl	80066b0 <HAL_GetTick>
 8008ea0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ea2:	e009      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ea4:	f7fd fc04 	bl	80066b0 <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	2b64      	cmp	r3, #100	; 0x64
 8008eb0:	d902      	bls.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	75fb      	strb	r3, [r7, #23]
        break;
 8008eb6:	e005      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008eb8:	4b74      	ldr	r3, [pc, #464]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0ef      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d166      	bne.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008eca:	4b6f      	ldr	r3, [pc, #444]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ecc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ed4:	4053      	eors	r3, r2
 8008ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d013      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ede:	4b6a      	ldr	r3, [pc, #424]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ee6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ee8:	4b67      	ldr	r3, [pc, #412]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eec:	4a66      	ldr	r2, [pc, #408]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ef2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ef4:	4b64      	ldr	r3, [pc, #400]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef8:	4a63      	ldr	r2, [pc, #396]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008efe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f00:	4a61      	ldr	r2, [pc, #388]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f10:	d115      	bne.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f12:	f7fd fbcd 	bl	80066b0 <HAL_GetTick>
 8008f16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f18:	e00b      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f1a:	f7fd fbc9 	bl	80066b0 <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d902      	bls.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	75fb      	strb	r3, [r7, #23]
            break;
 8008f30:	e005      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f32:	4b55      	ldr	r3, [pc, #340]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0ed      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d126      	bne.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f52:	d10d      	bne.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008f54:	4b4c      	ldr	r3, [pc, #304]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f62:	0919      	lsrs	r1, r3, #4
 8008f64:	4b4a      	ldr	r3, [pc, #296]	; (8009090 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008f66:	400b      	ands	r3, r1
 8008f68:	4947      	ldr	r1, [pc, #284]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	610b      	str	r3, [r1, #16]
 8008f6e:	e005      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008f70:	4b45      	ldr	r3, [pc, #276]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	4a44      	ldr	r2, [pc, #272]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008f7a:	6113      	str	r3, [r2, #16]
 8008f7c:	4b42      	ldr	r3, [pc, #264]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f8a:	493f      	ldr	r1, [pc, #252]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	670b      	str	r3, [r1, #112]	; 0x70
 8008f90:	e004      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	75bb      	strb	r3, [r7, #22]
 8008f96:	e001      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 8085 	beq.w	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fae:	2b28      	cmp	r3, #40	; 0x28
 8008fb0:	d866      	bhi.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008fb2:	a201      	add	r2, pc, #4	; (adr r2, 8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb8:	08009095 	.word	0x08009095
 8008fbc:	08009081 	.word	0x08009081
 8008fc0:	08009081 	.word	0x08009081
 8008fc4:	08009081 	.word	0x08009081
 8008fc8:	08009081 	.word	0x08009081
 8008fcc:	08009081 	.word	0x08009081
 8008fd0:	08009081 	.word	0x08009081
 8008fd4:	08009081 	.word	0x08009081
 8008fd8:	0800905d 	.word	0x0800905d
 8008fdc:	08009081 	.word	0x08009081
 8008fe0:	08009081 	.word	0x08009081
 8008fe4:	08009081 	.word	0x08009081
 8008fe8:	08009081 	.word	0x08009081
 8008fec:	08009081 	.word	0x08009081
 8008ff0:	08009081 	.word	0x08009081
 8008ff4:	08009081 	.word	0x08009081
 8008ff8:	0800906f 	.word	0x0800906f
 8008ffc:	08009081 	.word	0x08009081
 8009000:	08009081 	.word	0x08009081
 8009004:	08009081 	.word	0x08009081
 8009008:	08009081 	.word	0x08009081
 800900c:	08009081 	.word	0x08009081
 8009010:	08009081 	.word	0x08009081
 8009014:	08009081 	.word	0x08009081
 8009018:	08009095 	.word	0x08009095
 800901c:	08009081 	.word	0x08009081
 8009020:	08009081 	.word	0x08009081
 8009024:	08009081 	.word	0x08009081
 8009028:	08009081 	.word	0x08009081
 800902c:	08009081 	.word	0x08009081
 8009030:	08009081 	.word	0x08009081
 8009034:	08009081 	.word	0x08009081
 8009038:	08009095 	.word	0x08009095
 800903c:	08009081 	.word	0x08009081
 8009040:	08009081 	.word	0x08009081
 8009044:	08009081 	.word	0x08009081
 8009048:	08009081 	.word	0x08009081
 800904c:	08009081 	.word	0x08009081
 8009050:	08009081 	.word	0x08009081
 8009054:	08009081 	.word	0x08009081
 8009058:	08009095 	.word	0x08009095
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3304      	adds	r3, #4
 8009060:	2101      	movs	r1, #1
 8009062:	4618      	mov	r0, r3
 8009064:	f000 fdfa 	bl	8009c5c <RCCEx_PLL2_Config>
 8009068:	4603      	mov	r3, r0
 800906a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800906c:	e013      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3324      	adds	r3, #36	; 0x24
 8009072:	2101      	movs	r1, #1
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fea3 	bl	8009dc0 <RCCEx_PLL3_Config>
 800907a:	4603      	mov	r3, r0
 800907c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800907e:	e00a      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	75fb      	strb	r3, [r7, #23]
      break;
 8009084:	e007      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009086:	bf00      	nop
 8009088:	58024400 	.word	0x58024400
 800908c:	58024800 	.word	0x58024800
 8009090:	00ffffcf 	.word	0x00ffffcf
      break;
 8009094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d109      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800909c:	4b96      	ldr	r3, [pc, #600]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800909e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090a8:	4993      	ldr	r1, [pc, #588]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	654b      	str	r3, [r1, #84]	; 0x54
 80090ae:	e001      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d038      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c4:	2b05      	cmp	r3, #5
 80090c6:	d821      	bhi.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80090c8:	a201      	add	r2, pc, #4	; (adr r2, 80090d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80090ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ce:	bf00      	nop
 80090d0:	08009113 	.word	0x08009113
 80090d4:	080090e9 	.word	0x080090e9
 80090d8:	080090fb 	.word	0x080090fb
 80090dc:	08009113 	.word	0x08009113
 80090e0:	08009113 	.word	0x08009113
 80090e4:	08009113 	.word	0x08009113
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3304      	adds	r3, #4
 80090ec:	2101      	movs	r1, #1
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fdb4 	bl	8009c5c <RCCEx_PLL2_Config>
 80090f4:	4603      	mov	r3, r0
 80090f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80090f8:	e00c      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3324      	adds	r3, #36	; 0x24
 80090fe:	2101      	movs	r1, #1
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fe5d 	bl	8009dc0 <RCCEx_PLL3_Config>
 8009106:	4603      	mov	r3, r0
 8009108:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800910a:	e003      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	75fb      	strb	r3, [r7, #23]
      break;
 8009110:	e000      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d109      	bne.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800911a:	4b77      	ldr	r3, [pc, #476]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800911c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911e:	f023 0207 	bic.w	r2, r3, #7
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009126:	4974      	ldr	r1, [pc, #464]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009128:	4313      	orrs	r3, r2
 800912a:	654b      	str	r3, [r1, #84]	; 0x54
 800912c:	e001      	b.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0304 	and.w	r3, r3, #4
 800913a:	2b00      	cmp	r3, #0
 800913c:	d03a      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009144:	2b05      	cmp	r3, #5
 8009146:	d821      	bhi.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009148:	a201      	add	r2, pc, #4	; (adr r2, 8009150 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800914a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914e:	bf00      	nop
 8009150:	08009193 	.word	0x08009193
 8009154:	08009169 	.word	0x08009169
 8009158:	0800917b 	.word	0x0800917b
 800915c:	08009193 	.word	0x08009193
 8009160:	08009193 	.word	0x08009193
 8009164:	08009193 	.word	0x08009193
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3304      	adds	r3, #4
 800916c:	2101      	movs	r1, #1
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fd74 	bl	8009c5c <RCCEx_PLL2_Config>
 8009174:	4603      	mov	r3, r0
 8009176:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009178:	e00c      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3324      	adds	r3, #36	; 0x24
 800917e:	2101      	movs	r1, #1
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fe1d 	bl	8009dc0 <RCCEx_PLL3_Config>
 8009186:	4603      	mov	r3, r0
 8009188:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800918a:	e003      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	75fb      	strb	r3, [r7, #23]
      break;
 8009190:	e000      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009194:	7dfb      	ldrb	r3, [r7, #23]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10a      	bne.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800919a:	4b57      	ldr	r3, [pc, #348]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800919c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800919e:	f023 0207 	bic.w	r2, r3, #7
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a8:	4953      	ldr	r1, [pc, #332]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	658b      	str	r3, [r1, #88]	; 0x58
 80091ae:	e001      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0320 	and.w	r3, r3, #32
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d04b      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ca:	d02e      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80091cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091d0:	d828      	bhi.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80091d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d6:	d02a      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80091d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091dc:	d822      	bhi.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80091de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091e2:	d026      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80091e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091e8:	d81c      	bhi.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80091ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ee:	d010      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80091f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091f4:	d816      	bhi.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d01d      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80091fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091fe:	d111      	bne.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3304      	adds	r3, #4
 8009204:	2100      	movs	r1, #0
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fd28 	bl	8009c5c <RCCEx_PLL2_Config>
 800920c:	4603      	mov	r3, r0
 800920e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009210:	e012      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	3324      	adds	r3, #36	; 0x24
 8009216:	2102      	movs	r1, #2
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fdd1 	bl	8009dc0 <RCCEx_PLL3_Config>
 800921e:	4603      	mov	r3, r0
 8009220:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009222:	e009      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	75fb      	strb	r3, [r7, #23]
      break;
 8009228:	e006      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800922a:	bf00      	nop
 800922c:	e004      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800922e:	bf00      	nop
 8009230:	e002      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009232:	bf00      	nop
 8009234:	e000      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009238:	7dfb      	ldrb	r3, [r7, #23]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10a      	bne.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800923e:	4b2e      	ldr	r3, [pc, #184]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009242:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800924c:	492a      	ldr	r1, [pc, #168]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800924e:	4313      	orrs	r3, r2
 8009250:	654b      	str	r3, [r1, #84]	; 0x54
 8009252:	e001      	b.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009254:	7dfb      	ldrb	r3, [r7, #23]
 8009256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009260:	2b00      	cmp	r3, #0
 8009262:	d04d      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800926a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800926e:	d02e      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009270:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009274:	d828      	bhi.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800927a:	d02a      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800927c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009280:	d822      	bhi.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009282:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009286:	d026      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800928c:	d81c      	bhi.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800928e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009292:	d010      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009298:	d816      	bhi.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d01d      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800929e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092a2:	d111      	bne.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3304      	adds	r3, #4
 80092a8:	2100      	movs	r1, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fcd6 	bl	8009c5c <RCCEx_PLL2_Config>
 80092b0:	4603      	mov	r3, r0
 80092b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80092b4:	e012      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3324      	adds	r3, #36	; 0x24
 80092ba:	2102      	movs	r1, #2
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fd7f 	bl	8009dc0 <RCCEx_PLL3_Config>
 80092c2:	4603      	mov	r3, r0
 80092c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80092c6:	e009      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	75fb      	strb	r3, [r7, #23]
      break;
 80092cc:	e006      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80092ce:	bf00      	nop
 80092d0:	e004      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80092d2:	bf00      	nop
 80092d4:	e002      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80092d6:	bf00      	nop
 80092d8:	e000      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80092da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10c      	bne.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80092e2:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092f0:	4901      	ldr	r1, [pc, #4]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	658b      	str	r3, [r1, #88]	; 0x58
 80092f6:	e003      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80092f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
 80092fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009308:	2b00      	cmp	r3, #0
 800930a:	d04b      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009312:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009316:	d02e      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009318:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800931c:	d828      	bhi.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800931e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009322:	d02a      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009328:	d822      	bhi.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800932a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800932e:	d026      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009330:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009334:	d81c      	bhi.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800933a:	d010      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800933c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009340:	d816      	bhi.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009342:	2b00      	cmp	r3, #0
 8009344:	d01d      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800934a:	d111      	bne.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3304      	adds	r3, #4
 8009350:	2100      	movs	r1, #0
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fc82 	bl	8009c5c <RCCEx_PLL2_Config>
 8009358:	4603      	mov	r3, r0
 800935a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800935c:	e012      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3324      	adds	r3, #36	; 0x24
 8009362:	2102      	movs	r1, #2
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fd2b 	bl	8009dc0 <RCCEx_PLL3_Config>
 800936a:	4603      	mov	r3, r0
 800936c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800936e:	e009      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	75fb      	strb	r3, [r7, #23]
      break;
 8009374:	e006      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009376:	bf00      	nop
 8009378:	e004      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800937a:	bf00      	nop
 800937c:	e002      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800937e:	bf00      	nop
 8009380:	e000      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009384:	7dfb      	ldrb	r3, [r7, #23]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10a      	bne.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800938a:	4b9d      	ldr	r3, [pc, #628]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800938c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800938e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009398:	4999      	ldr	r1, [pc, #612]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800939a:	4313      	orrs	r3, r2
 800939c:	658b      	str	r3, [r1, #88]	; 0x58
 800939e:	e001      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0308 	and.w	r3, r3, #8
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01a      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ba:	d10a      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	3324      	adds	r3, #36	; 0x24
 80093c0:	2102      	movs	r1, #2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fcfc 	bl	8009dc0 <RCCEx_PLL3_Config>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80093d2:	4b8b      	ldr	r3, [pc, #556]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093e0:	4987      	ldr	r1, [pc, #540]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0310 	and.w	r3, r3, #16
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d01a      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093fc:	d10a      	bne.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3324      	adds	r3, #36	; 0x24
 8009402:	2102      	movs	r1, #2
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fcdb 	bl	8009dc0 <RCCEx_PLL3_Config>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009414:	4b7a      	ldr	r3, [pc, #488]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009422:	4977      	ldr	r1, [pc, #476]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009424:	4313      	orrs	r3, r2
 8009426:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d034      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800943a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800943e:	d01d      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009444:	d817      	bhi.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800944a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800944e:	d009      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009450:	e011      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3304      	adds	r3, #4
 8009456:	2100      	movs	r1, #0
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fbff 	bl	8009c5c <RCCEx_PLL2_Config>
 800945e:	4603      	mov	r3, r0
 8009460:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009462:	e00c      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3324      	adds	r3, #36	; 0x24
 8009468:	2102      	movs	r1, #2
 800946a:	4618      	mov	r0, r3
 800946c:	f000 fca8 	bl	8009dc0 <RCCEx_PLL3_Config>
 8009470:	4603      	mov	r3, r0
 8009472:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009474:	e003      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	75fb      	strb	r3, [r7, #23]
      break;
 800947a:	e000      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800947c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800947e:	7dfb      	ldrb	r3, [r7, #23]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10a      	bne.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009484:	4b5e      	ldr	r3, [pc, #376]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009492:	495b      	ldr	r1, [pc, #364]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009494:	4313      	orrs	r3, r2
 8009496:	658b      	str	r3, [r1, #88]	; 0x58
 8009498:	e001      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800949a:	7dfb      	ldrb	r3, [r7, #23]
 800949c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d033      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094b4:	d01c      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80094b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094ba:	d816      	bhi.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80094bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094c0:	d003      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80094c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094c6:	d007      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80094c8:	e00f      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ca:	4b4d      	ldr	r3, [pc, #308]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ce:	4a4c      	ldr	r2, [pc, #304]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80094d6:	e00c      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3324      	adds	r3, #36	; 0x24
 80094dc:	2101      	movs	r1, #1
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fc6e 	bl	8009dc0 <RCCEx_PLL3_Config>
 80094e4:	4603      	mov	r3, r0
 80094e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80094e8:	e003      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]
      break;
 80094ee:	e000      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80094f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10a      	bne.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094f8:	4b41      	ldr	r3, [pc, #260]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009506:	493e      	ldr	r1, [pc, #248]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009508:	4313      	orrs	r3, r2
 800950a:	654b      	str	r3, [r1, #84]	; 0x54
 800950c:	e001      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d029      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800952a:	d007      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800952c:	e00f      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800952e:	4b34      	ldr	r3, [pc, #208]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009532:	4a33      	ldr	r2, [pc, #204]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800953a:	e00b      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3304      	adds	r3, #4
 8009540:	2102      	movs	r1, #2
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fb8a 	bl	8009c5c <RCCEx_PLL2_Config>
 8009548:	4603      	mov	r3, r0
 800954a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800954c:	e002      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	75fb      	strb	r3, [r7, #23]
      break;
 8009552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009554:	7dfb      	ldrb	r3, [r7, #23]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d109      	bne.n	800956e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800955a:	4b29      	ldr	r3, [pc, #164]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800955c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800955e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009566:	4926      	ldr	r1, [pc, #152]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009568:	4313      	orrs	r3, r2
 800956a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800956c:	e001      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00a      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3324      	adds	r3, #36	; 0x24
 8009582:	2102      	movs	r1, #2
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fc1b 	bl	8009dc0 <RCCEx_PLL3_Config>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d033      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095a8:	d017      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80095aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095ae:	d811      	bhi.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80095b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095b4:	d013      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80095b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ba:	d80b      	bhi.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d010      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80095c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095c4:	d106      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095c6:	4b0e      	ldr	r3, [pc, #56]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ca:	4a0d      	ldr	r2, [pc, #52]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80095d2:	e007      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	75fb      	strb	r3, [r7, #23]
      break;
 80095d8:	e004      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80095da:	bf00      	nop
 80095dc:	e002      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80095de:	bf00      	nop
 80095e0:	e000      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80095e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10c      	bne.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095ea:	4b05      	ldr	r3, [pc, #20]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095f6:	4902      	ldr	r1, [pc, #8]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095f8:	4313      	orrs	r3, r2
 80095fa:	654b      	str	r3, [r1, #84]	; 0x54
 80095fc:	e004      	b.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80095fe:	bf00      	nop
 8009600:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d008      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009614:	4b31      	ldr	r3, [pc, #196]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009618:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009620:	492e      	ldr	r1, [pc, #184]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009622:	4313      	orrs	r3, r2
 8009624:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d009      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009632:	4b2a      	ldr	r3, [pc, #168]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009640:	4926      	ldr	r1, [pc, #152]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009642:	4313      	orrs	r3, r2
 8009644:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d008      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009652:	4b22      	ldr	r3, [pc, #136]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009656:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800965e:	491f      	ldr	r1, [pc, #124]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009660:	4313      	orrs	r3, r2
 8009662:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00d      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009670:	4b1a      	ldr	r3, [pc, #104]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	4a19      	ldr	r2, [pc, #100]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009676:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800967a:	6113      	str	r3, [r2, #16]
 800967c:	4b17      	ldr	r3, [pc, #92]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800967e:	691a      	ldr	r2, [r3, #16]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009686:	4915      	ldr	r1, [pc, #84]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009688:	4313      	orrs	r3, r2
 800968a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	da08      	bge.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009694:	4b11      	ldr	r3, [pc, #68]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009698:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a0:	490e      	ldr	r1, [pc, #56]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d009      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80096b2:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c0:	4906      	ldr	r1, [pc, #24]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80096c6:	7dbb      	ldrb	r3, [r7, #22]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	e000      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	58024400 	.word	0x58024400

080096e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80096e4:	f7ff f85a 	bl	800879c <HAL_RCC_GetHCLKFreq>
 80096e8:	4602      	mov	r2, r0
 80096ea:	4b06      	ldr	r3, [pc, #24]	; (8009704 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	091b      	lsrs	r3, r3, #4
 80096f0:	f003 0307 	and.w	r3, r3, #7
 80096f4:	4904      	ldr	r1, [pc, #16]	; (8009708 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80096f6:	5ccb      	ldrb	r3, [r1, r3]
 80096f8:	f003 031f 	and.w	r3, r3, #31
 80096fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009700:	4618      	mov	r0, r3
 8009702:	bd80      	pop	{r7, pc}
 8009704:	58024400 	.word	0x58024400
 8009708:	08011ba0 	.word	0x08011ba0

0800970c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800970c:	b480      	push	{r7}
 800970e:	b089      	sub	sp, #36	; 0x24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009714:	4ba1      	ldr	r3, [pc, #644]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009718:	f003 0303 	and.w	r3, r3, #3
 800971c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800971e:	4b9f      	ldr	r3, [pc, #636]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009722:	0b1b      	lsrs	r3, r3, #12
 8009724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009728:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800972a:	4b9c      	ldr	r3, [pc, #624]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972e:	091b      	lsrs	r3, r3, #4
 8009730:	f003 0301 	and.w	r3, r3, #1
 8009734:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009736:	4b99      	ldr	r3, [pc, #612]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800973a:	08db      	lsrs	r3, r3, #3
 800973c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	fb02 f303 	mul.w	r3, r2, r3
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2b00      	cmp	r3, #0
 8009756:	f000 8111 	beq.w	800997c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	2b02      	cmp	r3, #2
 800975e:	f000 8083 	beq.w	8009868 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	2b02      	cmp	r3, #2
 8009766:	f200 80a1 	bhi.w	80098ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d003      	beq.n	8009778 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d056      	beq.n	8009824 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009776:	e099      	b.n	80098ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009778:	4b88      	ldr	r3, [pc, #544]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0320 	and.w	r3, r3, #32
 8009780:	2b00      	cmp	r3, #0
 8009782:	d02d      	beq.n	80097e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009784:	4b85      	ldr	r3, [pc, #532]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	08db      	lsrs	r3, r3, #3
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	4a84      	ldr	r2, [pc, #528]	; (80099a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009790:	fa22 f303 	lsr.w	r3, r2, r3
 8009794:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	ee07 3a90 	vmov	s15, r3
 800979c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	ee07 3a90 	vmov	s15, r3
 80097a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ae:	4b7b      	ldr	r3, [pc, #492]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b6:	ee07 3a90 	vmov	s15, r3
 80097ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097be:	ed97 6a03 	vldr	s12, [r7, #12]
 80097c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80097de:	e087      	b.n	80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	ee07 3a90 	vmov	s15, r3
 80097e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80099a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80097ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097f2:	4b6a      	ldr	r3, [pc, #424]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097fa:	ee07 3a90 	vmov	s15, r3
 80097fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009802:	ed97 6a03 	vldr	s12, [r7, #12]
 8009806:	eddf 5a67 	vldr	s11, [pc, #412]	; 80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800980a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800980e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800981a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800981e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009822:	e065      	b.n	80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800982e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80099ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009836:	4b59      	ldr	r3, [pc, #356]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800983e:	ee07 3a90 	vmov	s15, r3
 8009842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009846:	ed97 6a03 	vldr	s12, [r7, #12]
 800984a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800984e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800985a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800985e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009862:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009866:	e043      	b.n	80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009872:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80099b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800987a:	4b48      	ldr	r3, [pc, #288]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800987c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009882:	ee07 3a90 	vmov	s15, r3
 8009886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800988a:	ed97 6a03 	vldr	s12, [r7, #12]
 800988e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800989a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800989e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098aa:	e021      	b.n	80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80099ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80098ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098be:	4b37      	ldr	r3, [pc, #220]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c6:	ee07 3a90 	vmov	s15, r3
 80098ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80098d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80098f0:	4b2a      	ldr	r3, [pc, #168]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f4:	0a5b      	lsrs	r3, r3, #9
 80098f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800990a:	edd7 6a07 	vldr	s13, [r7, #28]
 800990e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009916:	ee17 2a90 	vmov	r2, s15
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800991e:	4b1f      	ldr	r3, [pc, #124]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009922:	0c1b      	lsrs	r3, r3, #16
 8009924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009928:	ee07 3a90 	vmov	s15, r3
 800992c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009934:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009938:	edd7 6a07 	vldr	s13, [r7, #28]
 800993c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009944:	ee17 2a90 	vmov	r2, s15
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800994c:	4b13      	ldr	r3, [pc, #76]	; (800999c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009950:	0e1b      	lsrs	r3, r3, #24
 8009952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009962:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009966:	edd7 6a07 	vldr	s13, [r7, #28]
 800996a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800996e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009972:	ee17 2a90 	vmov	r2, s15
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800997a:	e008      	b.n	800998e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	609a      	str	r2, [r3, #8]
}
 800998e:	bf00      	nop
 8009990:	3724      	adds	r7, #36	; 0x24
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	58024400 	.word	0x58024400
 80099a0:	03d09000 	.word	0x03d09000
 80099a4:	46000000 	.word	0x46000000
 80099a8:	4c742400 	.word	0x4c742400
 80099ac:	4a742400 	.word	0x4a742400
 80099b0:	4bbebc20 	.word	0x4bbebc20

080099b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b089      	sub	sp, #36	; 0x24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099bc:	4ba1      	ldr	r3, [pc, #644]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80099c6:	4b9f      	ldr	r3, [pc, #636]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ca:	0d1b      	lsrs	r3, r3, #20
 80099cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80099d2:	4b9c      	ldr	r3, [pc, #624]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	0a1b      	lsrs	r3, r3, #8
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80099de:	4b99      	ldr	r3, [pc, #612]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e2:	08db      	lsrs	r3, r3, #3
 80099e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	fb02 f303 	mul.w	r3, r2, r3
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 8111 	beq.w	8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	f000 8083 	beq.w	8009b10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	f200 80a1 	bhi.w	8009b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d056      	beq.n	8009acc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009a1e:	e099      	b.n	8009b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a20:	4b88      	ldr	r3, [pc, #544]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0320 	and.w	r3, r3, #32
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d02d      	beq.n	8009a88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a2c:	4b85      	ldr	r3, [pc, #532]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	08db      	lsrs	r3, r3, #3
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	4a84      	ldr	r2, [pc, #528]	; (8009c48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009a38:	fa22 f303 	lsr.w	r3, r2, r3
 8009a3c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	ee07 3a90 	vmov	s15, r3
 8009a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a56:	4b7b      	ldr	r3, [pc, #492]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a86:	e087      	b.n	8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9a:	4b6a      	ldr	r3, [pc, #424]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009aca:	e065      	b.n	8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ade:	4b59      	ldr	r3, [pc, #356]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009af2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b0e:	e043      	b.n	8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b22:	4b48      	ldr	r3, [pc, #288]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b52:	e021      	b.n	8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b66:	4b37      	ldr	r3, [pc, #220]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009b98:	4b2a      	ldr	r3, [pc, #168]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9c:	0a5b      	lsrs	r3, r3, #9
 8009b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bbe:	ee17 2a90 	vmov	r2, s15
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009bc6:	4b1f      	ldr	r3, [pc, #124]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	0c1b      	lsrs	r3, r3, #16
 8009bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd0:	ee07 3a90 	vmov	s15, r3
 8009bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bec:	ee17 2a90 	vmov	r2, s15
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009bf4:	4b13      	ldr	r3, [pc, #76]	; (8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf8:	0e1b      	lsrs	r3, r3, #24
 8009bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c1a:	ee17 2a90 	vmov	r2, s15
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009c22:	e008      	b.n	8009c36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	609a      	str	r2, [r3, #8]
}
 8009c36:	bf00      	nop
 8009c38:	3724      	adds	r7, #36	; 0x24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	58024400 	.word	0x58024400
 8009c48:	03d09000 	.word	0x03d09000
 8009c4c:	46000000 	.word	0x46000000
 8009c50:	4c742400 	.word	0x4c742400
 8009c54:	4a742400 	.word	0x4a742400
 8009c58:	4bbebc20 	.word	0x4bbebc20

08009c5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c6a:	4b53      	ldr	r3, [pc, #332]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6e:	f003 0303 	and.w	r3, r3, #3
 8009c72:	2b03      	cmp	r3, #3
 8009c74:	d101      	bne.n	8009c7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e099      	b.n	8009dae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009c7a:	4b4f      	ldr	r3, [pc, #316]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a4e      	ldr	r2, [pc, #312]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009c80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c86:	f7fc fd13 	bl	80066b0 <HAL_GetTick>
 8009c8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c8c:	e008      	b.n	8009ca0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009c8e:	f7fc fd0f 	bl	80066b0 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d901      	bls.n	8009ca0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e086      	b.n	8009dae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ca0:	4b45      	ldr	r3, [pc, #276]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1f0      	bne.n	8009c8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009cac:	4b42      	ldr	r3, [pc, #264]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	031b      	lsls	r3, r3, #12
 8009cba:	493f      	ldr	r1, [pc, #252]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	628b      	str	r3, [r1, #40]	; 0x28
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	025b      	lsls	r3, r3, #9
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	041b      	lsls	r3, r3, #16
 8009cde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ce2:	431a      	orrs	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	061b      	lsls	r3, r3, #24
 8009cec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009cf0:	4931      	ldr	r1, [pc, #196]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009cf6:	4b30      	ldr	r3, [pc, #192]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	492d      	ldr	r1, [pc, #180]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009d08:	4b2b      	ldr	r3, [pc, #172]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0c:	f023 0220 	bic.w	r2, r3, #32
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	4928      	ldr	r1, [pc, #160]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009d1a:	4b27      	ldr	r3, [pc, #156]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1e:	4a26      	ldr	r2, [pc, #152]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d20:	f023 0310 	bic.w	r3, r3, #16
 8009d24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009d26:	4b24      	ldr	r3, [pc, #144]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d2a:	4b24      	ldr	r3, [pc, #144]	; (8009dbc <RCCEx_PLL2_Config+0x160>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	69d2      	ldr	r2, [r2, #28]
 8009d32:	00d2      	lsls	r2, r2, #3
 8009d34:	4920      	ldr	r1, [pc, #128]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009d3a:	4b1f      	ldr	r3, [pc, #124]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3e:	4a1e      	ldr	r2, [pc, #120]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d40:	f043 0310 	orr.w	r3, r3, #16
 8009d44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d106      	bne.n	8009d5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009d4c:	4b1a      	ldr	r3, [pc, #104]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	4a19      	ldr	r2, [pc, #100]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d58:	e00f      	b.n	8009d7a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d106      	bne.n	8009d6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009d60:	4b15      	ldr	r3, [pc, #84]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d64:	4a14      	ldr	r2, [pc, #80]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d6c:	e005      	b.n	8009d7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009d6e:	4b12      	ldr	r3, [pc, #72]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d72:	4a11      	ldr	r2, [pc, #68]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009d7a:	4b0f      	ldr	r3, [pc, #60]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a0e      	ldr	r2, [pc, #56]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d86:	f7fc fc93 	bl	80066b0 <HAL_GetTick>
 8009d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d8c:	e008      	b.n	8009da0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009d8e:	f7fc fc8f 	bl	80066b0 <HAL_GetTick>
 8009d92:	4602      	mov	r2, r0
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d901      	bls.n	8009da0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e006      	b.n	8009dae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009da0:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <RCCEx_PLL2_Config+0x15c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d0f0      	beq.n	8009d8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	58024400 	.word	0x58024400
 8009dbc:	ffff0007 	.word	0xffff0007

08009dc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dce:	4b53      	ldr	r3, [pc, #332]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd2:	f003 0303 	and.w	r3, r3, #3
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d101      	bne.n	8009dde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e099      	b.n	8009f12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009dde:	4b4f      	ldr	r3, [pc, #316]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a4e      	ldr	r2, [pc, #312]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dea:	f7fc fc61 	bl	80066b0 <HAL_GetTick>
 8009dee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009df0:	e008      	b.n	8009e04 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009df2:	f7fc fc5d 	bl	80066b0 <HAL_GetTick>
 8009df6:	4602      	mov	r2, r0
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d901      	bls.n	8009e04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e086      	b.n	8009f12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e04:	4b45      	ldr	r3, [pc, #276]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1f0      	bne.n	8009df2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009e10:	4b42      	ldr	r3, [pc, #264]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	051b      	lsls	r3, r3, #20
 8009e1e:	493f      	ldr	r1, [pc, #252]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e20:	4313      	orrs	r3, r2
 8009e22:	628b      	str	r3, [r1, #40]	; 0x28
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	3b01      	subs	r3, #1
 8009e34:	025b      	lsls	r3, r3, #9
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	041b      	lsls	r3, r3, #16
 8009e42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e46:	431a      	orrs	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	061b      	lsls	r3, r3, #24
 8009e50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e54:	4931      	ldr	r1, [pc, #196]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009e5a:	4b30      	ldr	r3, [pc, #192]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	492d      	ldr	r1, [pc, #180]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009e6c:	4b2b      	ldr	r3, [pc, #172]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	4928      	ldr	r1, [pc, #160]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009e7e:	4b27      	ldr	r3, [pc, #156]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e82:	4a26      	ldr	r2, [pc, #152]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009e8a:	4b24      	ldr	r3, [pc, #144]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e8e:	4b24      	ldr	r3, [pc, #144]	; (8009f20 <RCCEx_PLL3_Config+0x160>)
 8009e90:	4013      	ands	r3, r2
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	69d2      	ldr	r2, [r2, #28]
 8009e96:	00d2      	lsls	r2, r2, #3
 8009e98:	4920      	ldr	r1, [pc, #128]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009e9e:	4b1f      	ldr	r3, [pc, #124]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	4a1e      	ldr	r2, [pc, #120]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d106      	bne.n	8009ebe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009eb0:	4b1a      	ldr	r3, [pc, #104]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	4a19      	ldr	r2, [pc, #100]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009eb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009eba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ebc:	e00f      	b.n	8009ede <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d106      	bne.n	8009ed2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ec4:	4b15      	ldr	r3, [pc, #84]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	4a14      	ldr	r2, [pc, #80]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009eca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ed0:	e005      	b.n	8009ede <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009ed2:	4b12      	ldr	r3, [pc, #72]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed6:	4a11      	ldr	r2, [pc, #68]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009edc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a0e      	ldr	r2, [pc, #56]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eea:	f7fc fbe1 	bl	80066b0 <HAL_GetTick>
 8009eee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ef0:	e008      	b.n	8009f04 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ef2:	f7fc fbdd 	bl	80066b0 <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d901      	bls.n	8009f04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f00:	2303      	movs	r3, #3
 8009f02:	e006      	b.n	8009f12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f04:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <RCCEx_PLL3_Config+0x15c>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d0f0      	beq.n	8009ef2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	58024400 	.word	0x58024400
 8009f20:	ffff0007 	.word	0xffff0007

08009f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e049      	b.n	8009fca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d106      	bne.n	8009f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7fa f9ec 	bl	8004328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f001 f982 	bl	800b26c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d001      	beq.n	8009fec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e04c      	b.n	800a086 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2202      	movs	r2, #2
 8009ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a26      	ldr	r2, [pc, #152]	; (800a094 <HAL_TIM_Base_Start+0xc0>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d022      	beq.n	800a044 <HAL_TIM_Base_Start+0x70>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a006:	d01d      	beq.n	800a044 <HAL_TIM_Base_Start+0x70>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a22      	ldr	r2, [pc, #136]	; (800a098 <HAL_TIM_Base_Start+0xc4>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d018      	beq.n	800a044 <HAL_TIM_Base_Start+0x70>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a21      	ldr	r2, [pc, #132]	; (800a09c <HAL_TIM_Base_Start+0xc8>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d013      	beq.n	800a044 <HAL_TIM_Base_Start+0x70>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a1f      	ldr	r2, [pc, #124]	; (800a0a0 <HAL_TIM_Base_Start+0xcc>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00e      	beq.n	800a044 <HAL_TIM_Base_Start+0x70>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a1e      	ldr	r2, [pc, #120]	; (800a0a4 <HAL_TIM_Base_Start+0xd0>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d009      	beq.n	800a044 <HAL_TIM_Base_Start+0x70>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a1c      	ldr	r2, [pc, #112]	; (800a0a8 <HAL_TIM_Base_Start+0xd4>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d004      	beq.n	800a044 <HAL_TIM_Base_Start+0x70>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a1b      	ldr	r2, [pc, #108]	; (800a0ac <HAL_TIM_Base_Start+0xd8>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d115      	bne.n	800a070 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	4b19      	ldr	r3, [pc, #100]	; (800a0b0 <HAL_TIM_Base_Start+0xdc>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2b06      	cmp	r3, #6
 800a054:	d015      	beq.n	800a082 <HAL_TIM_Base_Start+0xae>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a05c:	d011      	beq.n	800a082 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f042 0201 	orr.w	r2, r2, #1
 800a06c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a06e:	e008      	b.n	800a082 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f042 0201 	orr.w	r2, r2, #1
 800a07e:	601a      	str	r2, [r3, #0]
 800a080:	e000      	b.n	800a084 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a082:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	40010000 	.word	0x40010000
 800a098:	40000400 	.word	0x40000400
 800a09c:	40000800 	.word	0x40000800
 800a0a0:	40000c00 	.word	0x40000c00
 800a0a4:	40010400 	.word	0x40010400
 800a0a8:	40001800 	.word	0x40001800
 800a0ac:	40014000 	.word	0x40014000
 800a0b0:	00010007 	.word	0x00010007

0800a0b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6a1a      	ldr	r2, [r3, #32]
 800a0c2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10f      	bne.n	800a0ec <HAL_TIM_Base_Stop+0x38>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6a1a      	ldr	r2, [r3, #32]
 800a0d2:	f240 4344 	movw	r3, #1092	; 0x444
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d107      	bne.n	800a0ec <HAL_TIM_Base_Stop+0x38>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f022 0201 	bic.w	r2, r2, #1
 800a0ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
	...

0800a104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b01      	cmp	r3, #1
 800a116:	d001      	beq.n	800a11c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e054      	b.n	800a1c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f042 0201 	orr.w	r2, r2, #1
 800a132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a26      	ldr	r2, [pc, #152]	; (800a1d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d022      	beq.n	800a184 <HAL_TIM_Base_Start_IT+0x80>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a146:	d01d      	beq.n	800a184 <HAL_TIM_Base_Start_IT+0x80>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a22      	ldr	r2, [pc, #136]	; (800a1d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d018      	beq.n	800a184 <HAL_TIM_Base_Start_IT+0x80>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a21      	ldr	r2, [pc, #132]	; (800a1dc <HAL_TIM_Base_Start_IT+0xd8>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d013      	beq.n	800a184 <HAL_TIM_Base_Start_IT+0x80>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a1f      	ldr	r2, [pc, #124]	; (800a1e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d00e      	beq.n	800a184 <HAL_TIM_Base_Start_IT+0x80>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a1e      	ldr	r2, [pc, #120]	; (800a1e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d009      	beq.n	800a184 <HAL_TIM_Base_Start_IT+0x80>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a1c      	ldr	r2, [pc, #112]	; (800a1e8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d004      	beq.n	800a184 <HAL_TIM_Base_Start_IT+0x80>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a1b      	ldr	r2, [pc, #108]	; (800a1ec <HAL_TIM_Base_Start_IT+0xe8>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d115      	bne.n	800a1b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	4b19      	ldr	r3, [pc, #100]	; (800a1f0 <HAL_TIM_Base_Start_IT+0xec>)
 800a18c:	4013      	ands	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b06      	cmp	r3, #6
 800a194:	d015      	beq.n	800a1c2 <HAL_TIM_Base_Start_IT+0xbe>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a19c:	d011      	beq.n	800a1c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f042 0201 	orr.w	r2, r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ae:	e008      	b.n	800a1c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f042 0201 	orr.w	r2, r2, #1
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	e000      	b.n	800a1c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	40000400 	.word	0x40000400
 800a1dc:	40000800 	.word	0x40000800
 800a1e0:	40000c00 	.word	0x40000c00
 800a1e4:	40010400 	.word	0x40010400
 800a1e8:	40001800 	.word	0x40001800
 800a1ec:	40014000 	.word	0x40014000
 800a1f0:	00010007 	.word	0x00010007

0800a1f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f022 0201 	bic.w	r2, r2, #1
 800a20a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6a1a      	ldr	r2, [r3, #32]
 800a212:	f241 1311 	movw	r3, #4369	; 0x1111
 800a216:	4013      	ands	r3, r2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10f      	bne.n	800a23c <HAL_TIM_Base_Stop_IT+0x48>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6a1a      	ldr	r2, [r3, #32]
 800a222:	f240 4344 	movw	r3, #1092	; 0x444
 800a226:	4013      	ands	r3, r2
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d107      	bne.n	800a23c <HAL_TIM_Base_Stop_IT+0x48>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f022 0201 	bic.w	r2, r2, #1
 800a23a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b082      	sub	sp, #8
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e049      	b.n	800a2f8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d106      	bne.n	800a27e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f841 	bl	800a300 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2202      	movs	r2, #2
 800a282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3304      	adds	r3, #4
 800a28e:	4619      	mov	r1, r3
 800a290:	4610      	mov	r0, r2
 800a292:	f000 ffeb 	bl	800b26c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d109      	bne.n	800a338 <HAL_TIM_PWM_Start+0x24>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	bf14      	ite	ne
 800a330:	2301      	movne	r3, #1
 800a332:	2300      	moveq	r3, #0
 800a334:	b2db      	uxtb	r3, r3
 800a336:	e03c      	b.n	800a3b2 <HAL_TIM_PWM_Start+0x9e>
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d109      	bne.n	800a352 <HAL_TIM_PWM_Start+0x3e>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b01      	cmp	r3, #1
 800a348:	bf14      	ite	ne
 800a34a:	2301      	movne	r3, #1
 800a34c:	2300      	moveq	r3, #0
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	e02f      	b.n	800a3b2 <HAL_TIM_PWM_Start+0x9e>
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b08      	cmp	r3, #8
 800a356:	d109      	bne.n	800a36c <HAL_TIM_PWM_Start+0x58>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b01      	cmp	r3, #1
 800a362:	bf14      	ite	ne
 800a364:	2301      	movne	r3, #1
 800a366:	2300      	moveq	r3, #0
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	e022      	b.n	800a3b2 <HAL_TIM_PWM_Start+0x9e>
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b0c      	cmp	r3, #12
 800a370:	d109      	bne.n	800a386 <HAL_TIM_PWM_Start+0x72>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	bf14      	ite	ne
 800a37e:	2301      	movne	r3, #1
 800a380:	2300      	moveq	r3, #0
 800a382:	b2db      	uxtb	r3, r3
 800a384:	e015      	b.n	800a3b2 <HAL_TIM_PWM_Start+0x9e>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b10      	cmp	r3, #16
 800a38a:	d109      	bne.n	800a3a0 <HAL_TIM_PWM_Start+0x8c>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b01      	cmp	r3, #1
 800a396:	bf14      	ite	ne
 800a398:	2301      	movne	r3, #1
 800a39a:	2300      	moveq	r3, #0
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	e008      	b.n	800a3b2 <HAL_TIM_PWM_Start+0x9e>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	bf14      	ite	ne
 800a3ac:	2301      	movne	r3, #1
 800a3ae:	2300      	moveq	r3, #0
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e0a1      	b.n	800a4fe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d104      	bne.n	800a3ca <HAL_TIM_PWM_Start+0xb6>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3c8:	e023      	b.n	800a412 <HAL_TIM_PWM_Start+0xfe>
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b04      	cmp	r3, #4
 800a3ce:	d104      	bne.n	800a3da <HAL_TIM_PWM_Start+0xc6>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3d8:	e01b      	b.n	800a412 <HAL_TIM_PWM_Start+0xfe>
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d104      	bne.n	800a3ea <HAL_TIM_PWM_Start+0xd6>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3e8:	e013      	b.n	800a412 <HAL_TIM_PWM_Start+0xfe>
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2b0c      	cmp	r3, #12
 800a3ee:	d104      	bne.n	800a3fa <HAL_TIM_PWM_Start+0xe6>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3f8:	e00b      	b.n	800a412 <HAL_TIM_PWM_Start+0xfe>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b10      	cmp	r3, #16
 800a3fe:	d104      	bne.n	800a40a <HAL_TIM_PWM_Start+0xf6>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2202      	movs	r2, #2
 800a404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a408:	e003      	b.n	800a412 <HAL_TIM_PWM_Start+0xfe>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2202      	movs	r2, #2
 800a40e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2201      	movs	r2, #1
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f001 fc5e 	bl	800bcdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a38      	ldr	r2, [pc, #224]	; (800a508 <HAL_TIM_PWM_Start+0x1f4>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d013      	beq.n	800a452 <HAL_TIM_PWM_Start+0x13e>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a37      	ldr	r2, [pc, #220]	; (800a50c <HAL_TIM_PWM_Start+0x1f8>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d00e      	beq.n	800a452 <HAL_TIM_PWM_Start+0x13e>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a35      	ldr	r2, [pc, #212]	; (800a510 <HAL_TIM_PWM_Start+0x1fc>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d009      	beq.n	800a452 <HAL_TIM_PWM_Start+0x13e>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a34      	ldr	r2, [pc, #208]	; (800a514 <HAL_TIM_PWM_Start+0x200>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d004      	beq.n	800a452 <HAL_TIM_PWM_Start+0x13e>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a32      	ldr	r2, [pc, #200]	; (800a518 <HAL_TIM_PWM_Start+0x204>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d101      	bne.n	800a456 <HAL_TIM_PWM_Start+0x142>
 800a452:	2301      	movs	r3, #1
 800a454:	e000      	b.n	800a458 <HAL_TIM_PWM_Start+0x144>
 800a456:	2300      	movs	r3, #0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d007      	beq.n	800a46c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a46a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a25      	ldr	r2, [pc, #148]	; (800a508 <HAL_TIM_PWM_Start+0x1f4>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d022      	beq.n	800a4bc <HAL_TIM_PWM_Start+0x1a8>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a47e:	d01d      	beq.n	800a4bc <HAL_TIM_PWM_Start+0x1a8>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a25      	ldr	r2, [pc, #148]	; (800a51c <HAL_TIM_PWM_Start+0x208>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d018      	beq.n	800a4bc <HAL_TIM_PWM_Start+0x1a8>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a24      	ldr	r2, [pc, #144]	; (800a520 <HAL_TIM_PWM_Start+0x20c>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d013      	beq.n	800a4bc <HAL_TIM_PWM_Start+0x1a8>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a22      	ldr	r2, [pc, #136]	; (800a524 <HAL_TIM_PWM_Start+0x210>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d00e      	beq.n	800a4bc <HAL_TIM_PWM_Start+0x1a8>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a1a      	ldr	r2, [pc, #104]	; (800a50c <HAL_TIM_PWM_Start+0x1f8>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d009      	beq.n	800a4bc <HAL_TIM_PWM_Start+0x1a8>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a1e      	ldr	r2, [pc, #120]	; (800a528 <HAL_TIM_PWM_Start+0x214>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d004      	beq.n	800a4bc <HAL_TIM_PWM_Start+0x1a8>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a16      	ldr	r2, [pc, #88]	; (800a510 <HAL_TIM_PWM_Start+0x1fc>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d115      	bne.n	800a4e8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689a      	ldr	r2, [r3, #8]
 800a4c2:	4b1a      	ldr	r3, [pc, #104]	; (800a52c <HAL_TIM_PWM_Start+0x218>)
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b06      	cmp	r3, #6
 800a4cc:	d015      	beq.n	800a4fa <HAL_TIM_PWM_Start+0x1e6>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4d4:	d011      	beq.n	800a4fa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f042 0201 	orr.w	r2, r2, #1
 800a4e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4e6:	e008      	b.n	800a4fa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f042 0201 	orr.w	r2, r2, #1
 800a4f6:	601a      	str	r2, [r3, #0]
 800a4f8:	e000      	b.n	800a4fc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	40010000 	.word	0x40010000
 800a50c:	40010400 	.word	0x40010400
 800a510:	40014000 	.word	0x40014000
 800a514:	40014400 	.word	0x40014400
 800a518:	40014800 	.word	0x40014800
 800a51c:	40000400 	.word	0x40000400
 800a520:	40000800 	.word	0x40000800
 800a524:	40000c00 	.word	0x40000c00
 800a528:	40001800 	.word	0x40001800
 800a52c:	00010007 	.word	0x00010007

0800a530 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2200      	movs	r2, #0
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f001 fbca 	bl	800bcdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a3e      	ldr	r2, [pc, #248]	; (800a648 <HAL_TIM_PWM_Stop+0x118>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d013      	beq.n	800a57a <HAL_TIM_PWM_Stop+0x4a>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a3d      	ldr	r2, [pc, #244]	; (800a64c <HAL_TIM_PWM_Stop+0x11c>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d00e      	beq.n	800a57a <HAL_TIM_PWM_Stop+0x4a>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a3b      	ldr	r2, [pc, #236]	; (800a650 <HAL_TIM_PWM_Stop+0x120>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d009      	beq.n	800a57a <HAL_TIM_PWM_Stop+0x4a>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a3a      	ldr	r2, [pc, #232]	; (800a654 <HAL_TIM_PWM_Stop+0x124>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d004      	beq.n	800a57a <HAL_TIM_PWM_Stop+0x4a>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a38      	ldr	r2, [pc, #224]	; (800a658 <HAL_TIM_PWM_Stop+0x128>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d101      	bne.n	800a57e <HAL_TIM_PWM_Stop+0x4e>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e000      	b.n	800a580 <HAL_TIM_PWM_Stop+0x50>
 800a57e:	2300      	movs	r3, #0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d017      	beq.n	800a5b4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6a1a      	ldr	r2, [r3, #32]
 800a58a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a58e:	4013      	ands	r3, r2
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10f      	bne.n	800a5b4 <HAL_TIM_PWM_Stop+0x84>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6a1a      	ldr	r2, [r3, #32]
 800a59a:	f240 4344 	movw	r3, #1092	; 0x444
 800a59e:	4013      	ands	r3, r2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d107      	bne.n	800a5b4 <HAL_TIM_PWM_Stop+0x84>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6a1a      	ldr	r2, [r3, #32]
 800a5ba:	f241 1311 	movw	r3, #4369	; 0x1111
 800a5be:	4013      	ands	r3, r2
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10f      	bne.n	800a5e4 <HAL_TIM_PWM_Stop+0xb4>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6a1a      	ldr	r2, [r3, #32]
 800a5ca:	f240 4344 	movw	r3, #1092	; 0x444
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d107      	bne.n	800a5e4 <HAL_TIM_PWM_Stop+0xb4>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f022 0201 	bic.w	r2, r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d104      	bne.n	800a5f4 <HAL_TIM_PWM_Stop+0xc4>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5f2:	e023      	b.n	800a63c <HAL_TIM_PWM_Stop+0x10c>
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b04      	cmp	r3, #4
 800a5f8:	d104      	bne.n	800a604 <HAL_TIM_PWM_Stop+0xd4>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a602:	e01b      	b.n	800a63c <HAL_TIM_PWM_Stop+0x10c>
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b08      	cmp	r3, #8
 800a608:	d104      	bne.n	800a614 <HAL_TIM_PWM_Stop+0xe4>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a612:	e013      	b.n	800a63c <HAL_TIM_PWM_Stop+0x10c>
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b0c      	cmp	r3, #12
 800a618:	d104      	bne.n	800a624 <HAL_TIM_PWM_Stop+0xf4>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a622:	e00b      	b.n	800a63c <HAL_TIM_PWM_Stop+0x10c>
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	2b10      	cmp	r3, #16
 800a628:	d104      	bne.n	800a634 <HAL_TIM_PWM_Stop+0x104>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a632:	e003      	b.n	800a63c <HAL_TIM_PWM_Stop+0x10c>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	40010000 	.word	0x40010000
 800a64c:	40010400 	.word	0x40010400
 800a650:	40014000 	.word	0x40014000
 800a654:	40014400 	.word	0x40014400
 800a658:	40014800 	.word	0x40014800

0800a65c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e049      	b.n	800a702 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a674:	b2db      	uxtb	r3, r3
 800a676:	2b00      	cmp	r3, #0
 800a678:	d106      	bne.n	800a688 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f841 	bl	800a70a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3304      	adds	r3, #4
 800a698:	4619      	mov	r1, r3
 800a69a:	4610      	mov	r0, r2
 800a69c:	f000 fde6 	bl	800b26c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2200      	movs	r2, #0
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	4618      	mov	r0, r3
 800a732:	f001 fad3 	bl	800bcdc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	6a1a      	ldr	r2, [r3, #32]
 800a73c:	f241 1311 	movw	r3, #4369	; 0x1111
 800a740:	4013      	ands	r3, r2
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10f      	bne.n	800a766 <HAL_TIM_IC_Stop+0x48>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6a1a      	ldr	r2, [r3, #32]
 800a74c:	f240 4344 	movw	r3, #1092	; 0x444
 800a750:	4013      	ands	r3, r2
 800a752:	2b00      	cmp	r3, #0
 800a754:	d107      	bne.n	800a766 <HAL_TIM_IC_Stop+0x48>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f022 0201 	bic.w	r2, r2, #1
 800a764:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d104      	bne.n	800a776 <HAL_TIM_IC_Stop+0x58>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a774:	e023      	b.n	800a7be <HAL_TIM_IC_Stop+0xa0>
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b04      	cmp	r3, #4
 800a77a:	d104      	bne.n	800a786 <HAL_TIM_IC_Stop+0x68>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a784:	e01b      	b.n	800a7be <HAL_TIM_IC_Stop+0xa0>
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b08      	cmp	r3, #8
 800a78a:	d104      	bne.n	800a796 <HAL_TIM_IC_Stop+0x78>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a794:	e013      	b.n	800a7be <HAL_TIM_IC_Stop+0xa0>
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b0c      	cmp	r3, #12
 800a79a:	d104      	bne.n	800a7a6 <HAL_TIM_IC_Stop+0x88>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7a4:	e00b      	b.n	800a7be <HAL_TIM_IC_Stop+0xa0>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2b10      	cmp	r3, #16
 800a7aa:	d104      	bne.n	800a7b6 <HAL_TIM_IC_Stop+0x98>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7b4:	e003      	b.n	800a7be <HAL_TIM_IC_Stop+0xa0>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d104      	bne.n	800a7ce <HAL_TIM_IC_Stop+0xb0>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7cc:	e013      	b.n	800a7f6 <HAL_TIM_IC_Stop+0xd8>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	d104      	bne.n	800a7de <HAL_TIM_IC_Stop+0xc0>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7dc:	e00b      	b.n	800a7f6 <HAL_TIM_IC_Stop+0xd8>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d104      	bne.n	800a7ee <HAL_TIM_IC_Stop+0xd0>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7ec:	e003      	b.n	800a7f6 <HAL_TIM_IC_Stop+0xd8>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d104      	bne.n	800a81e <HAL_TIM_IC_Start_IT+0x1e>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	e023      	b.n	800a866 <HAL_TIM_IC_Start_IT+0x66>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b04      	cmp	r3, #4
 800a822:	d104      	bne.n	800a82e <HAL_TIM_IC_Start_IT+0x2e>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	e01b      	b.n	800a866 <HAL_TIM_IC_Start_IT+0x66>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b08      	cmp	r3, #8
 800a832:	d104      	bne.n	800a83e <HAL_TIM_IC_Start_IT+0x3e>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	e013      	b.n	800a866 <HAL_TIM_IC_Start_IT+0x66>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2b0c      	cmp	r3, #12
 800a842:	d104      	bne.n	800a84e <HAL_TIM_IC_Start_IT+0x4e>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	e00b      	b.n	800a866 <HAL_TIM_IC_Start_IT+0x66>
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b10      	cmp	r3, #16
 800a852:	d104      	bne.n	800a85e <HAL_TIM_IC_Start_IT+0x5e>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	e003      	b.n	800a866 <HAL_TIM_IC_Start_IT+0x66>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a864:	b2db      	uxtb	r3, r3
 800a866:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d104      	bne.n	800a878 <HAL_TIM_IC_Start_IT+0x78>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a874:	b2db      	uxtb	r3, r3
 800a876:	e013      	b.n	800a8a0 <HAL_TIM_IC_Start_IT+0xa0>
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d104      	bne.n	800a888 <HAL_TIM_IC_Start_IT+0x88>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a884:	b2db      	uxtb	r3, r3
 800a886:	e00b      	b.n	800a8a0 <HAL_TIM_IC_Start_IT+0xa0>
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b08      	cmp	r3, #8
 800a88c:	d104      	bne.n	800a898 <HAL_TIM_IC_Start_IT+0x98>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a894:	b2db      	uxtb	r3, r3
 800a896:	e003      	b.n	800a8a0 <HAL_TIM_IC_Start_IT+0xa0>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d102      	bne.n	800a8ae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8a8:	7b7b      	ldrb	r3, [r7, #13]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d001      	beq.n	800a8b2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e0e2      	b.n	800aa78 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d104      	bne.n	800a8c2 <HAL_TIM_IC_Start_IT+0xc2>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8c0:	e023      	b.n	800a90a <HAL_TIM_IC_Start_IT+0x10a>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d104      	bne.n	800a8d2 <HAL_TIM_IC_Start_IT+0xd2>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8d0:	e01b      	b.n	800a90a <HAL_TIM_IC_Start_IT+0x10a>
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	2b08      	cmp	r3, #8
 800a8d6:	d104      	bne.n	800a8e2 <HAL_TIM_IC_Start_IT+0xe2>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8e0:	e013      	b.n	800a90a <HAL_TIM_IC_Start_IT+0x10a>
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b0c      	cmp	r3, #12
 800a8e6:	d104      	bne.n	800a8f2 <HAL_TIM_IC_Start_IT+0xf2>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8f0:	e00b      	b.n	800a90a <HAL_TIM_IC_Start_IT+0x10a>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	2b10      	cmp	r3, #16
 800a8f6:	d104      	bne.n	800a902 <HAL_TIM_IC_Start_IT+0x102>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a900:	e003      	b.n	800a90a <HAL_TIM_IC_Start_IT+0x10a>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2202      	movs	r2, #2
 800a906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d104      	bne.n	800a91a <HAL_TIM_IC_Start_IT+0x11a>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a918:	e013      	b.n	800a942 <HAL_TIM_IC_Start_IT+0x142>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	d104      	bne.n	800a92a <HAL_TIM_IC_Start_IT+0x12a>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2202      	movs	r2, #2
 800a924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a928:	e00b      	b.n	800a942 <HAL_TIM_IC_Start_IT+0x142>
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	2b08      	cmp	r3, #8
 800a92e:	d104      	bne.n	800a93a <HAL_TIM_IC_Start_IT+0x13a>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2202      	movs	r2, #2
 800a934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a938:	e003      	b.n	800a942 <HAL_TIM_IC_Start_IT+0x142>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2202      	movs	r2, #2
 800a93e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b0c      	cmp	r3, #12
 800a946:	d841      	bhi.n	800a9cc <HAL_TIM_IC_Start_IT+0x1cc>
 800a948:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <HAL_TIM_IC_Start_IT+0x150>)
 800a94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94e:	bf00      	nop
 800a950:	0800a985 	.word	0x0800a985
 800a954:	0800a9cd 	.word	0x0800a9cd
 800a958:	0800a9cd 	.word	0x0800a9cd
 800a95c:	0800a9cd 	.word	0x0800a9cd
 800a960:	0800a997 	.word	0x0800a997
 800a964:	0800a9cd 	.word	0x0800a9cd
 800a968:	0800a9cd 	.word	0x0800a9cd
 800a96c:	0800a9cd 	.word	0x0800a9cd
 800a970:	0800a9a9 	.word	0x0800a9a9
 800a974:	0800a9cd 	.word	0x0800a9cd
 800a978:	0800a9cd 	.word	0x0800a9cd
 800a97c:	0800a9cd 	.word	0x0800a9cd
 800a980:	0800a9bb 	.word	0x0800a9bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68da      	ldr	r2, [r3, #12]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f042 0202 	orr.w	r2, r2, #2
 800a992:	60da      	str	r2, [r3, #12]
      break;
 800a994:	e01d      	b.n	800a9d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68da      	ldr	r2, [r3, #12]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f042 0204 	orr.w	r2, r2, #4
 800a9a4:	60da      	str	r2, [r3, #12]
      break;
 800a9a6:	e014      	b.n	800a9d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68da      	ldr	r2, [r3, #12]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f042 0208 	orr.w	r2, r2, #8
 800a9b6:	60da      	str	r2, [r3, #12]
      break;
 800a9b8:	e00b      	b.n	800a9d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68da      	ldr	r2, [r3, #12]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f042 0210 	orr.w	r2, r2, #16
 800a9c8:	60da      	str	r2, [r3, #12]
      break;
 800a9ca:	e002      	b.n	800a9d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a9d0:	bf00      	nop
  }

  if (status == HAL_OK)
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d14e      	bne.n	800aa76 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f001 f97b 	bl	800bcdc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a25      	ldr	r2, [pc, #148]	; (800aa80 <HAL_TIM_IC_Start_IT+0x280>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d022      	beq.n	800aa36 <HAL_TIM_IC_Start_IT+0x236>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9f8:	d01d      	beq.n	800aa36 <HAL_TIM_IC_Start_IT+0x236>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a21      	ldr	r2, [pc, #132]	; (800aa84 <HAL_TIM_IC_Start_IT+0x284>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d018      	beq.n	800aa36 <HAL_TIM_IC_Start_IT+0x236>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a1f      	ldr	r2, [pc, #124]	; (800aa88 <HAL_TIM_IC_Start_IT+0x288>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d013      	beq.n	800aa36 <HAL_TIM_IC_Start_IT+0x236>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a1e      	ldr	r2, [pc, #120]	; (800aa8c <HAL_TIM_IC_Start_IT+0x28c>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d00e      	beq.n	800aa36 <HAL_TIM_IC_Start_IT+0x236>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a1c      	ldr	r2, [pc, #112]	; (800aa90 <HAL_TIM_IC_Start_IT+0x290>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d009      	beq.n	800aa36 <HAL_TIM_IC_Start_IT+0x236>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a1b      	ldr	r2, [pc, #108]	; (800aa94 <HAL_TIM_IC_Start_IT+0x294>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d004      	beq.n	800aa36 <HAL_TIM_IC_Start_IT+0x236>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a19      	ldr	r2, [pc, #100]	; (800aa98 <HAL_TIM_IC_Start_IT+0x298>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d115      	bne.n	800aa62 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	689a      	ldr	r2, [r3, #8]
 800aa3c:	4b17      	ldr	r3, [pc, #92]	; (800aa9c <HAL_TIM_IC_Start_IT+0x29c>)
 800aa3e:	4013      	ands	r3, r2
 800aa40:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	2b06      	cmp	r3, #6
 800aa46:	d015      	beq.n	800aa74 <HAL_TIM_IC_Start_IT+0x274>
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa4e:	d011      	beq.n	800aa74 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f042 0201 	orr.w	r2, r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa60:	e008      	b.n	800aa74 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f042 0201 	orr.w	r2, r2, #1
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	e000      	b.n	800aa76 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa74:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	40010000 	.word	0x40010000
 800aa84:	40000400 	.word	0x40000400
 800aa88:	40000800 	.word	0x40000800
 800aa8c:	40000c00 	.word	0x40000c00
 800aa90:	40010400 	.word	0x40010400
 800aa94:	40001800 	.word	0x40001800
 800aa98:	40014000 	.word	0x40014000
 800aa9c:	00010007 	.word	0x00010007

0800aaa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	f003 0302 	and.w	r3, r3, #2
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d122      	bne.n	800aafc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	f003 0302 	and.w	r3, r3, #2
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d11b      	bne.n	800aafc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f06f 0202 	mvn.w	r2, #2
 800aacc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2201      	movs	r2, #1
 800aad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	f003 0303 	and.w	r3, r3, #3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f7f8 f82e 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 800aae8:	e005      	b.n	800aaf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fba0 	bl	800b230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fba7 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	f003 0304 	and.w	r3, r3, #4
 800ab06:	2b04      	cmp	r3, #4
 800ab08:	d122      	bne.n	800ab50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	f003 0304 	and.w	r3, r3, #4
 800ab14:	2b04      	cmp	r3, #4
 800ab16:	d11b      	bne.n	800ab50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f06f 0204 	mvn.w	r2, #4
 800ab20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2202      	movs	r2, #2
 800ab26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d003      	beq.n	800ab3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7f8 f804 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 800ab3c:	e005      	b.n	800ab4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fb76 	bl	800b230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fb7d 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	f003 0308 	and.w	r3, r3, #8
 800ab5a:	2b08      	cmp	r3, #8
 800ab5c:	d122      	bne.n	800aba4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	f003 0308 	and.w	r3, r3, #8
 800ab68:	2b08      	cmp	r3, #8
 800ab6a:	d11b      	bne.n	800aba4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f06f 0208 	mvn.w	r2, #8
 800ab74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2204      	movs	r2, #4
 800ab7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	f003 0303 	and.w	r3, r3, #3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d003      	beq.n	800ab92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7f7 ffda 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 800ab90:	e005      	b.n	800ab9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fb4c 	bl	800b230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fb53 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	f003 0310 	and.w	r3, r3, #16
 800abae:	2b10      	cmp	r3, #16
 800abb0:	d122      	bne.n	800abf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	f003 0310 	and.w	r3, r3, #16
 800abbc:	2b10      	cmp	r3, #16
 800abbe:	d11b      	bne.n	800abf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f06f 0210 	mvn.w	r2, #16
 800abc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2208      	movs	r2, #8
 800abce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7f7 ffb0 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
 800abe4:	e005      	b.n	800abf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fb22 	bl	800b230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fb29 	bl	800b244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d10e      	bne.n	800ac24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	f003 0301 	and.w	r3, r3, #1
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d107      	bne.n	800ac24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f06f 0201 	mvn.w	r2, #1
 800ac1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7f7 ffe2 	bl	8002be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2e:	2b80      	cmp	r3, #128	; 0x80
 800ac30:	d10e      	bne.n	800ac50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3c:	2b80      	cmp	r3, #128	; 0x80
 800ac3e:	d107      	bne.n	800ac50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f001 f904 	bl	800be58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac5e:	d10e      	bne.n	800ac7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac6a:	2b80      	cmp	r3, #128	; 0x80
 800ac6c:	d107      	bne.n	800ac7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 f8f7 	bl	800be6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac88:	2b40      	cmp	r3, #64	; 0x40
 800ac8a:	d10e      	bne.n	800acaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac96:	2b40      	cmp	r3, #64	; 0x40
 800ac98:	d107      	bne.n	800acaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fad7 	bl	800b258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	f003 0320 	and.w	r3, r3, #32
 800acb4:	2b20      	cmp	r3, #32
 800acb6:	d10e      	bne.n	800acd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f003 0320 	and.w	r3, r3, #32
 800acc2:	2b20      	cmp	r3, #32
 800acc4:	d107      	bne.n	800acd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f06f 0220 	mvn.w	r2, #32
 800acce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f001 f8b7 	bl	800be44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b086      	sub	sp, #24
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	60f8      	str	r0, [r7, #12]
 800ace6:	60b9      	str	r1, [r7, #8]
 800ace8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d101      	bne.n	800acfc <HAL_TIM_IC_ConfigChannel+0x1e>
 800acf8:	2302      	movs	r3, #2
 800acfa:	e088      	b.n	800ae0e <HAL_TIM_IC_ConfigChannel+0x130>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d11b      	bne.n	800ad42 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6818      	ldr	r0, [r3, #0]
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	6819      	ldr	r1, [r3, #0]
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	685a      	ldr	r2, [r3, #4]
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	f000 fe17 	bl	800b94c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	699a      	ldr	r2, [r3, #24]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f022 020c 	bic.w	r2, r2, #12
 800ad2c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	6999      	ldr	r1, [r3, #24]
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	689a      	ldr	r2, [r3, #8]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	619a      	str	r2, [r3, #24]
 800ad40:	e060      	b.n	800ae04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	d11c      	bne.n	800ad82 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	6819      	ldr	r1, [r3, #0]
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f000 fe9b 	bl	800ba92 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699a      	ldr	r2, [r3, #24]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ad6a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6999      	ldr	r1, [r3, #24]
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	021a      	lsls	r2, r3, #8
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	430a      	orrs	r2, r1
 800ad7e:	619a      	str	r2, [r3, #24]
 800ad80:	e040      	b.n	800ae04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b08      	cmp	r3, #8
 800ad86:	d11b      	bne.n	800adc0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6818      	ldr	r0, [r3, #0]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	6819      	ldr	r1, [r3, #0]
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	685a      	ldr	r2, [r3, #4]
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	f000 fee8 	bl	800bb6c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	69da      	ldr	r2, [r3, #28]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f022 020c 	bic.w	r2, r2, #12
 800adaa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	69d9      	ldr	r1, [r3, #28]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	689a      	ldr	r2, [r3, #8]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	430a      	orrs	r2, r1
 800adbc:	61da      	str	r2, [r3, #28]
 800adbe:	e021      	b.n	800ae04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b0c      	cmp	r3, #12
 800adc4:	d11c      	bne.n	800ae00 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	6819      	ldr	r1, [r3, #0]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	f000 ff05 	bl	800bbe4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	69da      	ldr	r2, [r3, #28]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ade8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	69d9      	ldr	r1, [r3, #28]
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	021a      	lsls	r2, r3, #8
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	61da      	str	r2, [r3, #28]
 800adfe:	e001      	b.n	800ae04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d101      	bne.n	800ae36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae32:	2302      	movs	r3, #2
 800ae34:	e0ff      	b.n	800b036 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b14      	cmp	r3, #20
 800ae42:	f200 80f0 	bhi.w	800b026 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae46:	a201      	add	r2, pc, #4	; (adr r2, 800ae4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4c:	0800aea1 	.word	0x0800aea1
 800ae50:	0800b027 	.word	0x0800b027
 800ae54:	0800b027 	.word	0x0800b027
 800ae58:	0800b027 	.word	0x0800b027
 800ae5c:	0800aee1 	.word	0x0800aee1
 800ae60:	0800b027 	.word	0x0800b027
 800ae64:	0800b027 	.word	0x0800b027
 800ae68:	0800b027 	.word	0x0800b027
 800ae6c:	0800af23 	.word	0x0800af23
 800ae70:	0800b027 	.word	0x0800b027
 800ae74:	0800b027 	.word	0x0800b027
 800ae78:	0800b027 	.word	0x0800b027
 800ae7c:	0800af63 	.word	0x0800af63
 800ae80:	0800b027 	.word	0x0800b027
 800ae84:	0800b027 	.word	0x0800b027
 800ae88:	0800b027 	.word	0x0800b027
 800ae8c:	0800afa5 	.word	0x0800afa5
 800ae90:	0800b027 	.word	0x0800b027
 800ae94:	0800b027 	.word	0x0800b027
 800ae98:	0800b027 	.word	0x0800b027
 800ae9c:	0800afe5 	.word	0x0800afe5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68b9      	ldr	r1, [r7, #8]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 fa7a 	bl	800b3a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	699a      	ldr	r2, [r3, #24]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f042 0208 	orr.w	r2, r2, #8
 800aeba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	699a      	ldr	r2, [r3, #24]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f022 0204 	bic.w	r2, r2, #4
 800aeca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6999      	ldr	r1, [r3, #24]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	691a      	ldr	r2, [r3, #16]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	430a      	orrs	r2, r1
 800aedc:	619a      	str	r2, [r3, #24]
      break;
 800aede:	e0a5      	b.n	800b02c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68b9      	ldr	r1, [r7, #8]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 faea 	bl	800b4c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	699a      	ldr	r2, [r3, #24]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aefa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	699a      	ldr	r2, [r3, #24]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6999      	ldr	r1, [r3, #24]
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	021a      	lsls	r2, r3, #8
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	430a      	orrs	r2, r1
 800af1e:	619a      	str	r2, [r3, #24]
      break;
 800af20:	e084      	b.n	800b02c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68b9      	ldr	r1, [r7, #8]
 800af28:	4618      	mov	r0, r3
 800af2a:	f000 fb53 	bl	800b5d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	69da      	ldr	r2, [r3, #28]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f042 0208 	orr.w	r2, r2, #8
 800af3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	69da      	ldr	r2, [r3, #28]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f022 0204 	bic.w	r2, r2, #4
 800af4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69d9      	ldr	r1, [r3, #28]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	691a      	ldr	r2, [r3, #16]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	430a      	orrs	r2, r1
 800af5e:	61da      	str	r2, [r3, #28]
      break;
 800af60:	e064      	b.n	800b02c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fbbb 	bl	800b6e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	69da      	ldr	r2, [r3, #28]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	69da      	ldr	r2, [r3, #28]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	69d9      	ldr	r1, [r3, #28]
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	021a      	lsls	r2, r3, #8
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	61da      	str	r2, [r3, #28]
      break;
 800afa2:	e043      	b.n	800b02c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68b9      	ldr	r1, [r7, #8]
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 fc04 	bl	800b7b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f042 0208 	orr.w	r2, r2, #8
 800afbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f022 0204 	bic.w	r2, r2, #4
 800afce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	691a      	ldr	r2, [r3, #16]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	430a      	orrs	r2, r1
 800afe0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800afe2:	e023      	b.n	800b02c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68b9      	ldr	r1, [r7, #8]
 800afea:	4618      	mov	r0, r3
 800afec:	f000 fc48 	bl	800b880 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800affe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b00e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	021a      	lsls	r2, r3, #8
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	430a      	orrs	r2, r1
 800b022:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b024:	e002      	b.n	800b02c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	75fb      	strb	r3, [r7, #23]
      break;
 800b02a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b034:	7dfb      	ldrb	r3, [r7, #23]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop

0800b040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b054:	2b01      	cmp	r3, #1
 800b056:	d101      	bne.n	800b05c <HAL_TIM_ConfigClockSource+0x1c>
 800b058:	2302      	movs	r3, #2
 800b05a:	e0dc      	b.n	800b216 <HAL_TIM_ConfigClockSource+0x1d6>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2202      	movs	r2, #2
 800b068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	4b6a      	ldr	r3, [pc, #424]	; (800b220 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b078:	4013      	ands	r3, r2
 800b07a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b082:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a64      	ldr	r2, [pc, #400]	; (800b224 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b092:	4293      	cmp	r3, r2
 800b094:	f000 80a9 	beq.w	800b1ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b098:	4a62      	ldr	r2, [pc, #392]	; (800b224 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	f200 80ae 	bhi.w	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0a0:	4a61      	ldr	r2, [pc, #388]	; (800b228 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	f000 80a1 	beq.w	800b1ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b0a8:	4a5f      	ldr	r2, [pc, #380]	; (800b228 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	f200 80a6 	bhi.w	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0b0:	4a5e      	ldr	r2, [pc, #376]	; (800b22c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	f000 8099 	beq.w	800b1ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b0b8:	4a5c      	ldr	r2, [pc, #368]	; (800b22c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	f200 809e 	bhi.w	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b0c4:	f000 8091 	beq.w	800b1ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b0c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b0cc:	f200 8096 	bhi.w	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0d4:	f000 8089 	beq.w	800b1ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b0d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0dc:	f200 808e 	bhi.w	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0e4:	d03e      	beq.n	800b164 <HAL_TIM_ConfigClockSource+0x124>
 800b0e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0ea:	f200 8087 	bhi.w	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0f2:	f000 8086 	beq.w	800b202 <HAL_TIM_ConfigClockSource+0x1c2>
 800b0f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0fa:	d87f      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0fc:	2b70      	cmp	r3, #112	; 0x70
 800b0fe:	d01a      	beq.n	800b136 <HAL_TIM_ConfigClockSource+0xf6>
 800b100:	2b70      	cmp	r3, #112	; 0x70
 800b102:	d87b      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b104:	2b60      	cmp	r3, #96	; 0x60
 800b106:	d050      	beq.n	800b1aa <HAL_TIM_ConfigClockSource+0x16a>
 800b108:	2b60      	cmp	r3, #96	; 0x60
 800b10a:	d877      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b10c:	2b50      	cmp	r3, #80	; 0x50
 800b10e:	d03c      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0x14a>
 800b110:	2b50      	cmp	r3, #80	; 0x50
 800b112:	d873      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b114:	2b40      	cmp	r3, #64	; 0x40
 800b116:	d058      	beq.n	800b1ca <HAL_TIM_ConfigClockSource+0x18a>
 800b118:	2b40      	cmp	r3, #64	; 0x40
 800b11a:	d86f      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b11c:	2b30      	cmp	r3, #48	; 0x30
 800b11e:	d064      	beq.n	800b1ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b120:	2b30      	cmp	r3, #48	; 0x30
 800b122:	d86b      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b124:	2b20      	cmp	r3, #32
 800b126:	d060      	beq.n	800b1ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b128:	2b20      	cmp	r3, #32
 800b12a:	d867      	bhi.n	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d05c      	beq.n	800b1ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b130:	2b10      	cmp	r3, #16
 800b132:	d05a      	beq.n	800b1ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b134:	e062      	b.n	800b1fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6818      	ldr	r0, [r3, #0]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	6899      	ldr	r1, [r3, #8]
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685a      	ldr	r2, [r3, #4]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	f000 fda9 	bl	800bc9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	609a      	str	r2, [r3, #8]
      break;
 800b162:	e04f      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6818      	ldr	r0, [r3, #0]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	6899      	ldr	r1, [r3, #8]
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	f000 fd92 	bl	800bc9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689a      	ldr	r2, [r3, #8]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b186:	609a      	str	r2, [r3, #8]
      break;
 800b188:	e03c      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	6859      	ldr	r1, [r3, #4]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	461a      	mov	r2, r3
 800b198:	f000 fc4c 	bl	800ba34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2150      	movs	r1, #80	; 0x50
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 fd5c 	bl	800bc60 <TIM_ITRx_SetConfig>
      break;
 800b1a8:	e02c      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6818      	ldr	r0, [r3, #0]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	6859      	ldr	r1, [r3, #4]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f000 fca8 	bl	800bb0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2160      	movs	r1, #96	; 0x60
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 fd4c 	bl	800bc60 <TIM_ITRx_SetConfig>
      break;
 800b1c8:	e01c      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6818      	ldr	r0, [r3, #0]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	6859      	ldr	r1, [r3, #4]
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f000 fc2c 	bl	800ba34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2140      	movs	r1, #64	; 0x40
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 fd3c 	bl	800bc60 <TIM_ITRx_SetConfig>
      break;
 800b1e8:	e00c      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	f000 fd33 	bl	800bc60 <TIM_ITRx_SetConfig>
      break;
 800b1fa:	e003      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b200:	e000      	b.n	800b204 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b214:	7bfb      	ldrb	r3, [r7, #15]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	ffceff88 	.word	0xffceff88
 800b224:	00100040 	.word	0x00100040
 800b228:	00100030 	.word	0x00100030
 800b22c:	00100020 	.word	0x00100020

0800b230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a40      	ldr	r2, [pc, #256]	; (800b380 <TIM_Base_SetConfig+0x114>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d013      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b28a:	d00f      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a3d      	ldr	r2, [pc, #244]	; (800b384 <TIM_Base_SetConfig+0x118>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d00b      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a3c      	ldr	r2, [pc, #240]	; (800b388 <TIM_Base_SetConfig+0x11c>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d007      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a3b      	ldr	r2, [pc, #236]	; (800b38c <TIM_Base_SetConfig+0x120>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d003      	beq.n	800b2ac <TIM_Base_SetConfig+0x40>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a3a      	ldr	r2, [pc, #232]	; (800b390 <TIM_Base_SetConfig+0x124>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d108      	bne.n	800b2be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a2f      	ldr	r2, [pc, #188]	; (800b380 <TIM_Base_SetConfig+0x114>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d01f      	beq.n	800b306 <TIM_Base_SetConfig+0x9a>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2cc:	d01b      	beq.n	800b306 <TIM_Base_SetConfig+0x9a>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a2c      	ldr	r2, [pc, #176]	; (800b384 <TIM_Base_SetConfig+0x118>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d017      	beq.n	800b306 <TIM_Base_SetConfig+0x9a>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a2b      	ldr	r2, [pc, #172]	; (800b388 <TIM_Base_SetConfig+0x11c>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d013      	beq.n	800b306 <TIM_Base_SetConfig+0x9a>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a2a      	ldr	r2, [pc, #168]	; (800b38c <TIM_Base_SetConfig+0x120>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d00f      	beq.n	800b306 <TIM_Base_SetConfig+0x9a>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a29      	ldr	r2, [pc, #164]	; (800b390 <TIM_Base_SetConfig+0x124>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d00b      	beq.n	800b306 <TIM_Base_SetConfig+0x9a>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a28      	ldr	r2, [pc, #160]	; (800b394 <TIM_Base_SetConfig+0x128>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d007      	beq.n	800b306 <TIM_Base_SetConfig+0x9a>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a27      	ldr	r2, [pc, #156]	; (800b398 <TIM_Base_SetConfig+0x12c>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d003      	beq.n	800b306 <TIM_Base_SetConfig+0x9a>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a26      	ldr	r2, [pc, #152]	; (800b39c <TIM_Base_SetConfig+0x130>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d108      	bne.n	800b318 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b30c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	4313      	orrs	r3, r2
 800b316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	4313      	orrs	r3, r2
 800b324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	689a      	ldr	r2, [r3, #8]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a10      	ldr	r2, [pc, #64]	; (800b380 <TIM_Base_SetConfig+0x114>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d00f      	beq.n	800b364 <TIM_Base_SetConfig+0xf8>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a12      	ldr	r2, [pc, #72]	; (800b390 <TIM_Base_SetConfig+0x124>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d00b      	beq.n	800b364 <TIM_Base_SetConfig+0xf8>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a11      	ldr	r2, [pc, #68]	; (800b394 <TIM_Base_SetConfig+0x128>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d007      	beq.n	800b364 <TIM_Base_SetConfig+0xf8>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a10      	ldr	r2, [pc, #64]	; (800b398 <TIM_Base_SetConfig+0x12c>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d003      	beq.n	800b364 <TIM_Base_SetConfig+0xf8>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a0f      	ldr	r2, [pc, #60]	; (800b39c <TIM_Base_SetConfig+0x130>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d103      	bne.n	800b36c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	691a      	ldr	r2, [r3, #16]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	615a      	str	r2, [r3, #20]
}
 800b372:	bf00      	nop
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	40010000 	.word	0x40010000
 800b384:	40000400 	.word	0x40000400
 800b388:	40000800 	.word	0x40000800
 800b38c:	40000c00 	.word	0x40000c00
 800b390:	40010400 	.word	0x40010400
 800b394:	40014000 	.word	0x40014000
 800b398:	40014400 	.word	0x40014400
 800b39c:	40014800 	.word	0x40014800

0800b3a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	f023 0201 	bic.w	r2, r3, #1
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	4b37      	ldr	r3, [pc, #220]	; (800b4a8 <TIM_OC1_SetConfig+0x108>)
 800b3cc:	4013      	ands	r3, r2
 800b3ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f023 0303 	bic.w	r3, r3, #3
 800b3d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f023 0302 	bic.w	r3, r3, #2
 800b3e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a2d      	ldr	r2, [pc, #180]	; (800b4ac <TIM_OC1_SetConfig+0x10c>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d00f      	beq.n	800b41c <TIM_OC1_SetConfig+0x7c>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a2c      	ldr	r2, [pc, #176]	; (800b4b0 <TIM_OC1_SetConfig+0x110>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d00b      	beq.n	800b41c <TIM_OC1_SetConfig+0x7c>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a2b      	ldr	r2, [pc, #172]	; (800b4b4 <TIM_OC1_SetConfig+0x114>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d007      	beq.n	800b41c <TIM_OC1_SetConfig+0x7c>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a2a      	ldr	r2, [pc, #168]	; (800b4b8 <TIM_OC1_SetConfig+0x118>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d003      	beq.n	800b41c <TIM_OC1_SetConfig+0x7c>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a29      	ldr	r2, [pc, #164]	; (800b4bc <TIM_OC1_SetConfig+0x11c>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d10c      	bne.n	800b436 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	f023 0308 	bic.w	r3, r3, #8
 800b422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f023 0304 	bic.w	r3, r3, #4
 800b434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a1c      	ldr	r2, [pc, #112]	; (800b4ac <TIM_OC1_SetConfig+0x10c>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d00f      	beq.n	800b45e <TIM_OC1_SetConfig+0xbe>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a1b      	ldr	r2, [pc, #108]	; (800b4b0 <TIM_OC1_SetConfig+0x110>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d00b      	beq.n	800b45e <TIM_OC1_SetConfig+0xbe>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a1a      	ldr	r2, [pc, #104]	; (800b4b4 <TIM_OC1_SetConfig+0x114>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d007      	beq.n	800b45e <TIM_OC1_SetConfig+0xbe>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a19      	ldr	r2, [pc, #100]	; (800b4b8 <TIM_OC1_SetConfig+0x118>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d003      	beq.n	800b45e <TIM_OC1_SetConfig+0xbe>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a18      	ldr	r2, [pc, #96]	; (800b4bc <TIM_OC1_SetConfig+0x11c>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d111      	bne.n	800b482 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b46c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	4313      	orrs	r3, r2
 800b476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	4313      	orrs	r3, r2
 800b480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	621a      	str	r2, [r3, #32]
}
 800b49c:	bf00      	nop
 800b49e:	371c      	adds	r7, #28
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	fffeff8f 	.word	0xfffeff8f
 800b4ac:	40010000 	.word	0x40010000
 800b4b0:	40010400 	.word	0x40010400
 800b4b4:	40014000 	.word	0x40014000
 800b4b8:	40014400 	.word	0x40014400
 800b4bc:	40014800 	.word	0x40014800

0800b4c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b087      	sub	sp, #28
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	f023 0210 	bic.w	r2, r3, #16
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	4b34      	ldr	r3, [pc, #208]	; (800b5bc <TIM_OC2_SetConfig+0xfc>)
 800b4ec:	4013      	ands	r3, r2
 800b4ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	021b      	lsls	r3, r3, #8
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	4313      	orrs	r3, r2
 800b502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	f023 0320 	bic.w	r3, r3, #32
 800b50a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	4313      	orrs	r3, r2
 800b516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a29      	ldr	r2, [pc, #164]	; (800b5c0 <TIM_OC2_SetConfig+0x100>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d003      	beq.n	800b528 <TIM_OC2_SetConfig+0x68>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a28      	ldr	r2, [pc, #160]	; (800b5c4 <TIM_OC2_SetConfig+0x104>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d10d      	bne.n	800b544 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	011b      	lsls	r3, r3, #4
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	4313      	orrs	r3, r2
 800b53a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a1e      	ldr	r2, [pc, #120]	; (800b5c0 <TIM_OC2_SetConfig+0x100>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d00f      	beq.n	800b56c <TIM_OC2_SetConfig+0xac>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a1d      	ldr	r2, [pc, #116]	; (800b5c4 <TIM_OC2_SetConfig+0x104>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d00b      	beq.n	800b56c <TIM_OC2_SetConfig+0xac>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a1c      	ldr	r2, [pc, #112]	; (800b5c8 <TIM_OC2_SetConfig+0x108>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d007      	beq.n	800b56c <TIM_OC2_SetConfig+0xac>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a1b      	ldr	r2, [pc, #108]	; (800b5cc <TIM_OC2_SetConfig+0x10c>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d003      	beq.n	800b56c <TIM_OC2_SetConfig+0xac>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a1a      	ldr	r2, [pc, #104]	; (800b5d0 <TIM_OC2_SetConfig+0x110>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d113      	bne.n	800b594 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b57a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	4313      	orrs	r3, r2
 800b586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	4313      	orrs	r3, r2
 800b592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	685a      	ldr	r2, [r3, #4]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	621a      	str	r2, [r3, #32]
}
 800b5ae:	bf00      	nop
 800b5b0:	371c      	adds	r7, #28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	feff8fff 	.word	0xfeff8fff
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	40010400 	.word	0x40010400
 800b5c8:	40014000 	.word	0x40014000
 800b5cc:	40014400 	.word	0x40014400
 800b5d0:	40014800 	.word	0x40014800

0800b5d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a1b      	ldr	r3, [r3, #32]
 800b5e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	4b33      	ldr	r3, [pc, #204]	; (800b6cc <TIM_OC3_SetConfig+0xf8>)
 800b600:	4013      	ands	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f023 0303 	bic.w	r3, r3, #3
 800b60a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	4313      	orrs	r3, r2
 800b614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b61c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	021b      	lsls	r3, r3, #8
 800b624:	697a      	ldr	r2, [r7, #20]
 800b626:	4313      	orrs	r3, r2
 800b628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a28      	ldr	r2, [pc, #160]	; (800b6d0 <TIM_OC3_SetConfig+0xfc>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d003      	beq.n	800b63a <TIM_OC3_SetConfig+0x66>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a27      	ldr	r2, [pc, #156]	; (800b6d4 <TIM_OC3_SetConfig+0x100>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d10d      	bne.n	800b656 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	021b      	lsls	r3, r3, #8
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a1d      	ldr	r2, [pc, #116]	; (800b6d0 <TIM_OC3_SetConfig+0xfc>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d00f      	beq.n	800b67e <TIM_OC3_SetConfig+0xaa>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a1c      	ldr	r2, [pc, #112]	; (800b6d4 <TIM_OC3_SetConfig+0x100>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d00b      	beq.n	800b67e <TIM_OC3_SetConfig+0xaa>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a1b      	ldr	r2, [pc, #108]	; (800b6d8 <TIM_OC3_SetConfig+0x104>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d007      	beq.n	800b67e <TIM_OC3_SetConfig+0xaa>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a1a      	ldr	r2, [pc, #104]	; (800b6dc <TIM_OC3_SetConfig+0x108>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d003      	beq.n	800b67e <TIM_OC3_SetConfig+0xaa>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a19      	ldr	r2, [pc, #100]	; (800b6e0 <TIM_OC3_SetConfig+0x10c>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d113      	bne.n	800b6a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b68c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	011b      	lsls	r3, r3, #4
 800b694:	693a      	ldr	r2, [r7, #16]
 800b696:	4313      	orrs	r3, r2
 800b698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	699b      	ldr	r3, [r3, #24]
 800b69e:	011b      	lsls	r3, r3, #4
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	685a      	ldr	r2, [r3, #4]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	621a      	str	r2, [r3, #32]
}
 800b6c0:	bf00      	nop
 800b6c2:	371c      	adds	r7, #28
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	fffeff8f 	.word	0xfffeff8f
 800b6d0:	40010000 	.word	0x40010000
 800b6d4:	40010400 	.word	0x40010400
 800b6d8:	40014000 	.word	0x40014000
 800b6dc:	40014400 	.word	0x40014400
 800b6e0:	40014800 	.word	0x40014800

0800b6e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b087      	sub	sp, #28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a1b      	ldr	r3, [r3, #32]
 800b6f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	69db      	ldr	r3, [r3, #28]
 800b70a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	4b24      	ldr	r3, [pc, #144]	; (800b7a0 <TIM_OC4_SetConfig+0xbc>)
 800b710:	4013      	ands	r3, r2
 800b712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b71a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	021b      	lsls	r3, r3, #8
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	4313      	orrs	r3, r2
 800b726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b72e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	031b      	lsls	r3, r3, #12
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	4313      	orrs	r3, r2
 800b73a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a19      	ldr	r2, [pc, #100]	; (800b7a4 <TIM_OC4_SetConfig+0xc0>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d00f      	beq.n	800b764 <TIM_OC4_SetConfig+0x80>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a18      	ldr	r2, [pc, #96]	; (800b7a8 <TIM_OC4_SetConfig+0xc4>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d00b      	beq.n	800b764 <TIM_OC4_SetConfig+0x80>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a17      	ldr	r2, [pc, #92]	; (800b7ac <TIM_OC4_SetConfig+0xc8>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d007      	beq.n	800b764 <TIM_OC4_SetConfig+0x80>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a16      	ldr	r2, [pc, #88]	; (800b7b0 <TIM_OC4_SetConfig+0xcc>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d003      	beq.n	800b764 <TIM_OC4_SetConfig+0x80>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a15      	ldr	r2, [pc, #84]	; (800b7b4 <TIM_OC4_SetConfig+0xd0>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d109      	bne.n	800b778 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b76a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	695b      	ldr	r3, [r3, #20]
 800b770:	019b      	lsls	r3, r3, #6
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	4313      	orrs	r3, r2
 800b776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	685a      	ldr	r2, [r3, #4]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	693a      	ldr	r2, [r7, #16]
 800b790:	621a      	str	r2, [r3, #32]
}
 800b792:	bf00      	nop
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	feff8fff 	.word	0xfeff8fff
 800b7a4:	40010000 	.word	0x40010000
 800b7a8:	40010400 	.word	0x40010400
 800b7ac:	40014000 	.word	0x40014000
 800b7b0:	40014400 	.word	0x40014400
 800b7b4:	40014800 	.word	0x40014800

0800b7b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b087      	sub	sp, #28
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a1b      	ldr	r3, [r3, #32]
 800b7c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a1b      	ldr	r3, [r3, #32]
 800b7d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	4b21      	ldr	r3, [pc, #132]	; (800b868 <TIM_OC5_SetConfig+0xb0>)
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b7f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	041b      	lsls	r3, r3, #16
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	4313      	orrs	r3, r2
 800b804:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a18      	ldr	r2, [pc, #96]	; (800b86c <TIM_OC5_SetConfig+0xb4>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d00f      	beq.n	800b82e <TIM_OC5_SetConfig+0x76>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a17      	ldr	r2, [pc, #92]	; (800b870 <TIM_OC5_SetConfig+0xb8>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d00b      	beq.n	800b82e <TIM_OC5_SetConfig+0x76>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4a16      	ldr	r2, [pc, #88]	; (800b874 <TIM_OC5_SetConfig+0xbc>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d007      	beq.n	800b82e <TIM_OC5_SetConfig+0x76>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a15      	ldr	r2, [pc, #84]	; (800b878 <TIM_OC5_SetConfig+0xc0>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d003      	beq.n	800b82e <TIM_OC5_SetConfig+0x76>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a14      	ldr	r2, [pc, #80]	; (800b87c <TIM_OC5_SetConfig+0xc4>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d109      	bne.n	800b842 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b834:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	021b      	lsls	r3, r3, #8
 800b83c:	697a      	ldr	r2, [r7, #20]
 800b83e:	4313      	orrs	r3, r2
 800b840:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	621a      	str	r2, [r3, #32]
}
 800b85c:	bf00      	nop
 800b85e:	371c      	adds	r7, #28
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	fffeff8f 	.word	0xfffeff8f
 800b86c:	40010000 	.word	0x40010000
 800b870:	40010400 	.word	0x40010400
 800b874:	40014000 	.word	0x40014000
 800b878:	40014400 	.word	0x40014400
 800b87c:	40014800 	.word	0x40014800

0800b880 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b880:	b480      	push	{r7}
 800b882:	b087      	sub	sp, #28
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	4b22      	ldr	r3, [pc, #136]	; (800b934 <TIM_OC6_SetConfig+0xb4>)
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	021b      	lsls	r3, r3, #8
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	051b      	lsls	r3, r3, #20
 800b8ca:	693a      	ldr	r2, [r7, #16]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a19      	ldr	r2, [pc, #100]	; (800b938 <TIM_OC6_SetConfig+0xb8>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d00f      	beq.n	800b8f8 <TIM_OC6_SetConfig+0x78>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a18      	ldr	r2, [pc, #96]	; (800b93c <TIM_OC6_SetConfig+0xbc>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d00b      	beq.n	800b8f8 <TIM_OC6_SetConfig+0x78>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a17      	ldr	r2, [pc, #92]	; (800b940 <TIM_OC6_SetConfig+0xc0>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d007      	beq.n	800b8f8 <TIM_OC6_SetConfig+0x78>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a16      	ldr	r2, [pc, #88]	; (800b944 <TIM_OC6_SetConfig+0xc4>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d003      	beq.n	800b8f8 <TIM_OC6_SetConfig+0x78>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a15      	ldr	r2, [pc, #84]	; (800b948 <TIM_OC6_SetConfig+0xc8>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d109      	bne.n	800b90c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	695b      	ldr	r3, [r3, #20]
 800b904:	029b      	lsls	r3, r3, #10
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	4313      	orrs	r3, r2
 800b90a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	697a      	ldr	r2, [r7, #20]
 800b910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	621a      	str	r2, [r3, #32]
}
 800b926:	bf00      	nop
 800b928:	371c      	adds	r7, #28
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	feff8fff 	.word	0xfeff8fff
 800b938:	40010000 	.word	0x40010000
 800b93c:	40010400 	.word	0x40010400
 800b940:	40014000 	.word	0x40014000
 800b944:	40014400 	.word	0x40014400
 800b948:	40014800 	.word	0x40014800

0800b94c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b087      	sub	sp, #28
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	f023 0201 	bic.w	r2, r3, #1
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6a1b      	ldr	r3, [r3, #32]
 800b970:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	4a28      	ldr	r2, [pc, #160]	; (800ba18 <TIM_TI1_SetConfig+0xcc>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d01b      	beq.n	800b9b2 <TIM_TI1_SetConfig+0x66>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b980:	d017      	beq.n	800b9b2 <TIM_TI1_SetConfig+0x66>
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	4a25      	ldr	r2, [pc, #148]	; (800ba1c <TIM_TI1_SetConfig+0xd0>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d013      	beq.n	800b9b2 <TIM_TI1_SetConfig+0x66>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	4a24      	ldr	r2, [pc, #144]	; (800ba20 <TIM_TI1_SetConfig+0xd4>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d00f      	beq.n	800b9b2 <TIM_TI1_SetConfig+0x66>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	4a23      	ldr	r2, [pc, #140]	; (800ba24 <TIM_TI1_SetConfig+0xd8>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d00b      	beq.n	800b9b2 <TIM_TI1_SetConfig+0x66>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	4a22      	ldr	r2, [pc, #136]	; (800ba28 <TIM_TI1_SetConfig+0xdc>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d007      	beq.n	800b9b2 <TIM_TI1_SetConfig+0x66>
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	4a21      	ldr	r2, [pc, #132]	; (800ba2c <TIM_TI1_SetConfig+0xe0>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d003      	beq.n	800b9b2 <TIM_TI1_SetConfig+0x66>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	4a20      	ldr	r2, [pc, #128]	; (800ba30 <TIM_TI1_SetConfig+0xe4>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d101      	bne.n	800b9b6 <TIM_TI1_SetConfig+0x6a>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e000      	b.n	800b9b8 <TIM_TI1_SetConfig+0x6c>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d008      	beq.n	800b9ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	f023 0303 	bic.w	r3, r3, #3
 800b9c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	617b      	str	r3, [r7, #20]
 800b9cc:	e003      	b.n	800b9d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f043 0301 	orr.w	r3, r3, #1
 800b9d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	011b      	lsls	r3, r3, #4
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f023 030a 	bic.w	r3, r3, #10
 800b9f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	f003 030a 	and.w	r3, r3, #10
 800b9f8:	693a      	ldr	r2, [r7, #16]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	693a      	ldr	r2, [r7, #16]
 800ba08:	621a      	str	r2, [r3, #32]
}
 800ba0a:	bf00      	nop
 800ba0c:	371c      	adds	r7, #28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	40010000 	.word	0x40010000
 800ba1c:	40000400 	.word	0x40000400
 800ba20:	40000800 	.word	0x40000800
 800ba24:	40000c00 	.word	0x40000c00
 800ba28:	40010400 	.word	0x40010400
 800ba2c:	40001800 	.word	0x40001800
 800ba30:	40014000 	.word	0x40014000

0800ba34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b087      	sub	sp, #28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6a1b      	ldr	r3, [r3, #32]
 800ba44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6a1b      	ldr	r3, [r3, #32]
 800ba4a:	f023 0201 	bic.w	r2, r3, #1
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	699b      	ldr	r3, [r3, #24]
 800ba56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	011b      	lsls	r3, r3, #4
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f023 030a 	bic.w	r3, r3, #10
 800ba70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	697a      	ldr	r2, [r7, #20]
 800ba84:	621a      	str	r2, [r3, #32]
}
 800ba86:	bf00      	nop
 800ba88:	371c      	adds	r7, #28
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b087      	sub	sp, #28
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	607a      	str	r2, [r7, #4]
 800ba9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6a1b      	ldr	r3, [r3, #32]
 800baa4:	f023 0210 	bic.w	r2, r3, #16
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6a1b      	ldr	r3, [r3, #32]
 800bab6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800babe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	021b      	lsls	r3, r3, #8
 800bac4:	697a      	ldr	r2, [r7, #20]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	031b      	lsls	r3, r3, #12
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	4313      	orrs	r3, r2
 800badc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bae4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	011b      	lsls	r3, r3, #4
 800baea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800baee:	693a      	ldr	r2, [r7, #16]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	621a      	str	r2, [r3, #32]
}
 800bb00:	bf00      	nop
 800bb02:	371c      	adds	r7, #28
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b087      	sub	sp, #28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6a1b      	ldr	r3, [r3, #32]
 800bb1c:	f023 0210 	bic.w	r2, r3, #16
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6a1b      	ldr	r3, [r3, #32]
 800bb2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	031b      	lsls	r3, r3, #12
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	011b      	lsls	r3, r3, #4
 800bb4e:	693a      	ldr	r2, [r7, #16]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	693a      	ldr	r2, [r7, #16]
 800bb5e:	621a      	str	r2, [r3, #32]
}
 800bb60:	bf00      	nop
 800bb62:	371c      	adds	r7, #28
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b087      	sub	sp, #28
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
 800bb78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6a1b      	ldr	r3, [r3, #32]
 800bb7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f023 0303 	bic.w	r3, r3, #3
 800bb98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800bb9a:	697a      	ldr	r2, [r7, #20]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bba8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	011b      	lsls	r3, r3, #4
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bbbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	021b      	lsls	r3, r3, #8
 800bbc2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bbc6:	693a      	ldr	r2, [r7, #16]
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	621a      	str	r2, [r3, #32]
}
 800bbd8:	bf00      	nop
 800bbda:	371c      	adds	r7, #28
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b087      	sub	sp, #28
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
 800bbf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6a1b      	ldr	r3, [r3, #32]
 800bbf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	69db      	ldr	r3, [r3, #28]
 800bc02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6a1b      	ldr	r3, [r3, #32]
 800bc08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	021b      	lsls	r3, r3, #8
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	031b      	lsls	r3, r3, #12
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bc36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	031b      	lsls	r3, r3, #12
 800bc3c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	693a      	ldr	r2, [r7, #16]
 800bc50:	621a      	str	r2, [r3, #32]
}
 800bc52:	bf00      	nop
 800bc54:	371c      	adds	r7, #28
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
	...

0800bc60 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	4b09      	ldr	r3, [pc, #36]	; (800bc98 <TIM_ITRx_SetConfig+0x38>)
 800bc74:	4013      	ands	r3, r2
 800bc76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc78:	683a      	ldr	r2, [r7, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	f043 0307 	orr.w	r3, r3, #7
 800bc82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	609a      	str	r2, [r3, #8]
}
 800bc8a:	bf00      	nop
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	ffcfff8f 	.word	0xffcfff8f

0800bc9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
 800bca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	021a      	lsls	r2, r3, #8
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	431a      	orrs	r2, r3
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	609a      	str	r2, [r3, #8]
}
 800bcd0:	bf00      	nop
 800bcd2:	371c      	adds	r7, #28
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f003 031f 	and.w	r3, r3, #31
 800bcee:	2201      	movs	r2, #1
 800bcf0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6a1a      	ldr	r2, [r3, #32]
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	43db      	mvns	r3, r3
 800bcfe:	401a      	ands	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6a1a      	ldr	r2, [r3, #32]
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	f003 031f 	and.w	r3, r3, #31
 800bd0e:	6879      	ldr	r1, [r7, #4]
 800bd10:	fa01 f303 	lsl.w	r3, r1, r3
 800bd14:	431a      	orrs	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	621a      	str	r2, [r3, #32]
}
 800bd1a:	bf00      	nop
 800bd1c:	371c      	adds	r7, #28
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
	...

0800bd28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d101      	bne.n	800bd40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	e06d      	b.n	800be1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a30      	ldr	r2, [pc, #192]	; (800be28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d004      	beq.n	800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a2f      	ldr	r2, [pc, #188]	; (800be2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d108      	bne.n	800bd86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bd7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a20      	ldr	r2, [pc, #128]	; (800be28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d022      	beq.n	800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdb2:	d01d      	beq.n	800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a1d      	ldr	r2, [pc, #116]	; (800be30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d018      	beq.n	800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a1c      	ldr	r2, [pc, #112]	; (800be34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d013      	beq.n	800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a1a      	ldr	r2, [pc, #104]	; (800be38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d00e      	beq.n	800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a15      	ldr	r2, [pc, #84]	; (800be2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d009      	beq.n	800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a16      	ldr	r2, [pc, #88]	; (800be3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d004      	beq.n	800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a15      	ldr	r2, [pc, #84]	; (800be40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d10c      	bne.n	800be0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68ba      	ldr	r2, [r7, #8]
 800be08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2201      	movs	r2, #1
 800be0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3714      	adds	r7, #20
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr
 800be28:	40010000 	.word	0x40010000
 800be2c:	40010400 	.word	0x40010400
 800be30:	40000400 	.word	0x40000400
 800be34:	40000800 	.word	0x40000800
 800be38:	40000c00 	.word	0x40000c00
 800be3c:	40001800 	.word	0x40001800
 800be40:	40014000 	.word	0x40014000

0800be44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d101      	bne.n	800be92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	e042      	b.n	800bf18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d106      	bne.n	800beaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f7fa fa27 	bl	80062f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2224      	movs	r2, #36	; 0x24
 800beae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f022 0201 	bic.w	r2, r2, #1
 800bec0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fccc 	bl	800c860 <UART_SetConfig>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b01      	cmp	r3, #1
 800becc:	d101      	bne.n	800bed2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	e022      	b.n	800bf18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d002      	beq.n	800bee0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f001 fa28 	bl	800d330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800beee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	689a      	ldr	r2, [r3, #8]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800befe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f042 0201 	orr.w	r2, r2, #1
 800bf0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f001 faaf 	bl	800d474 <UART_CheckIdleState>
 800bf16:	4603      	mov	r3, r0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b08a      	sub	sp, #40	; 0x28
 800bf24:	af02      	add	r7, sp, #8
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	603b      	str	r3, [r7, #0]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf36:	2b20      	cmp	r3, #32
 800bf38:	f040 8083 	bne.w	800c042 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d002      	beq.n	800bf48 <HAL_UART_Transmit+0x28>
 800bf42:	88fb      	ldrh	r3, [r7, #6]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e07b      	b.n	800c044 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d101      	bne.n	800bf5a <HAL_UART_Transmit+0x3a>
 800bf56:	2302      	movs	r3, #2
 800bf58:	e074      	b.n	800c044 <HAL_UART_Transmit+0x124>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2221      	movs	r2, #33	; 0x21
 800bf6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf72:	f7fa fb9d 	bl	80066b0 <HAL_GetTick>
 800bf76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	88fa      	ldrh	r2, [r7, #6]
 800bf7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	88fa      	ldrh	r2, [r7, #6]
 800bf84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf90:	d108      	bne.n	800bfa4 <HAL_UART_Transmit+0x84>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d104      	bne.n	800bfa4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	61bb      	str	r3, [r7, #24]
 800bfa2:	e003      	b.n	800bfac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bfb4:	e02c      	b.n	800c010 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	2180      	movs	r1, #128	; 0x80
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f001 faa2 	bl	800d50a <UART_WaitOnFlagUntilTimeout>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	e039      	b.n	800c044 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10b      	bne.n	800bfee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfe4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	3302      	adds	r3, #2
 800bfea:	61bb      	str	r3, [r7, #24]
 800bfec:	e007      	b.n	800bffe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	781a      	ldrb	r2, [r3, #0]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	3301      	adds	r3, #1
 800bffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c004:	b29b      	uxth	r3, r3
 800c006:	3b01      	subs	r3, #1
 800c008:	b29a      	uxth	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c016:	b29b      	uxth	r3, r3
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1cc      	bne.n	800bfb6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	2200      	movs	r2, #0
 800c024:	2140      	movs	r1, #64	; 0x40
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f001 fa6f 	bl	800d50a <UART_WaitOnFlagUntilTimeout>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d001      	beq.n	800c036 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c032:	2303      	movs	r3, #3
 800c034:	e006      	b.n	800c044 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2220      	movs	r2, #32
 800c03a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c03e:	2300      	movs	r3, #0
 800c040:	e000      	b.n	800c044 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c042:	2302      	movs	r3, #2
  }
}
 800c044:	4618      	mov	r0, r3
 800c046:	3720      	adds	r7, #32
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08a      	sub	sp, #40	; 0x28
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	4613      	mov	r3, r2
 800c058:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c060:	2b20      	cmp	r3, #32
 800c062:	d142      	bne.n	800c0ea <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d002      	beq.n	800c070 <HAL_UART_Receive_IT+0x24>
 800c06a:	88fb      	ldrh	r3, [r7, #6]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	e03b      	b.n	800c0ec <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d101      	bne.n	800c082 <HAL_UART_Receive_IT+0x36>
 800c07e:	2302      	movs	r3, #2
 800c080:	e034      	b.n	800c0ec <HAL_UART_Receive_IT+0xa0>
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a17      	ldr	r2, [pc, #92]	; (800c0f4 <HAL_UART_Receive_IT+0xa8>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d01f      	beq.n	800c0da <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d018      	beq.n	800c0da <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	e853 3f00 	ldrex	r3, [r3]
 800c0b4:	613b      	str	r3, [r7, #16]
   return(result);
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0bc:	627b      	str	r3, [r7, #36]	; 0x24
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c6:	623b      	str	r3, [r7, #32]
 800c0c8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ca:	69f9      	ldr	r1, [r7, #28]
 800c0cc:	6a3a      	ldr	r2, [r7, #32]
 800c0ce:	e841 2300 	strex	r3, r2, [r1]
 800c0d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0d4:	69bb      	ldr	r3, [r7, #24]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1e6      	bne.n	800c0a8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c0da:	88fb      	ldrh	r3, [r7, #6]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	68b9      	ldr	r1, [r7, #8]
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f001 fadb 	bl	800d69c <UART_Start_Receive_IT>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	e000      	b.n	800c0ec <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c0ea:	2302      	movs	r3, #2
  }
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3728      	adds	r7, #40	; 0x28
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	58000c00 	.word	0x58000c00

0800c0f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b0ba      	sub	sp, #232	; 0xe8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c11e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c122:	f640 030f 	movw	r3, #2063	; 0x80f
 800c126:	4013      	ands	r3, r2
 800c128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c12c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c130:	2b00      	cmp	r3, #0
 800c132:	d11b      	bne.n	800c16c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c138:	f003 0320 	and.w	r3, r3, #32
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d015      	beq.n	800c16c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c144:	f003 0320 	and.w	r3, r3, #32
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d105      	bne.n	800c158 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c14c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d009      	beq.n	800c16c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 835a 	beq.w	800c816 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	4798      	blx	r3
      }
      return;
 800c16a:	e354      	b.n	800c816 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c16c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c170:	2b00      	cmp	r3, #0
 800c172:	f000 811f 	beq.w	800c3b4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c176:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c17a:	4b8b      	ldr	r3, [pc, #556]	; (800c3a8 <HAL_UART_IRQHandler+0x2b0>)
 800c17c:	4013      	ands	r3, r2
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d106      	bne.n	800c190 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c182:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c186:	4b89      	ldr	r3, [pc, #548]	; (800c3ac <HAL_UART_IRQHandler+0x2b4>)
 800c188:	4013      	ands	r3, r2
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f000 8112 	beq.w	800c3b4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d011      	beq.n	800c1c0 <HAL_UART_IRQHandler+0xc8>
 800c19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00b      	beq.n	800c1c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1b6:	f043 0201 	orr.w	r2, r3, #1
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1c4:	f003 0302 	and.w	r3, r3, #2
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d011      	beq.n	800c1f0 <HAL_UART_IRQHandler+0xf8>
 800c1cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1d0:	f003 0301 	and.w	r3, r3, #1
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00b      	beq.n	800c1f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2202      	movs	r2, #2
 800c1de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1e6:	f043 0204 	orr.w	r2, r3, #4
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1f4:	f003 0304 	and.w	r3, r3, #4
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d011      	beq.n	800c220 <HAL_UART_IRQHandler+0x128>
 800c1fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c200:	f003 0301 	and.w	r3, r3, #1
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00b      	beq.n	800c220 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2204      	movs	r2, #4
 800c20e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c216:	f043 0202 	orr.w	r2, r3, #2
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c224:	f003 0308 	and.w	r3, r3, #8
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d017      	beq.n	800c25c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c22c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c230:	f003 0320 	and.w	r3, r3, #32
 800c234:	2b00      	cmp	r3, #0
 800c236:	d105      	bne.n	800c244 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c238:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c23c:	4b5a      	ldr	r3, [pc, #360]	; (800c3a8 <HAL_UART_IRQHandler+0x2b0>)
 800c23e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00b      	beq.n	800c25c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2208      	movs	r2, #8
 800c24a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c252:	f043 0208 	orr.w	r2, r3, #8
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c25c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c264:	2b00      	cmp	r3, #0
 800c266:	d012      	beq.n	800c28e <HAL_UART_IRQHandler+0x196>
 800c268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c26c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00c      	beq.n	800c28e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c27c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c284:	f043 0220 	orr.w	r2, r3, #32
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 82c0 	beq.w	800c81a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c29e:	f003 0320 	and.w	r3, r3, #32
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d013      	beq.n	800c2ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c2a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2aa:	f003 0320 	and.w	r3, r3, #32
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d105      	bne.n	800c2be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d007      	beq.n	800c2ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d003      	beq.n	800c2ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e2:	2b40      	cmp	r3, #64	; 0x40
 800c2e4:	d005      	beq.n	800c2f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c2e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c2ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d04f      	beq.n	800c392 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f001 fafc 	bl	800d8f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c302:	2b40      	cmp	r3, #64	; 0x40
 800c304:	d141      	bne.n	800c38a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3308      	adds	r3, #8
 800c30c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c314:	e853 3f00 	ldrex	r3, [r3]
 800c318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c31c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3308      	adds	r3, #8
 800c32e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c332:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c33e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c342:	e841 2300 	strex	r3, r2, [r1]
 800c346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c34a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1d9      	bne.n	800c306 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c356:	2b00      	cmp	r3, #0
 800c358:	d013      	beq.n	800c382 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c35e:	4a14      	ldr	r2, [pc, #80]	; (800c3b0 <HAL_UART_IRQHandler+0x2b8>)
 800c360:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c366:	4618      	mov	r0, r3
 800c368:	f7fa fe3e 	bl	8006fe8 <HAL_DMA_Abort_IT>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d017      	beq.n	800c3a2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c37c:	4610      	mov	r0, r2
 800c37e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c380:	e00f      	b.n	800c3a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fa56 	bl	800c834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c388:	e00b      	b.n	800c3a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fa52 	bl	800c834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c390:	e007      	b.n	800c3a2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fa4e 	bl	800c834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c3a0:	e23b      	b.n	800c81a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3a2:	bf00      	nop
    return;
 800c3a4:	e239      	b.n	800c81a <HAL_UART_IRQHandler+0x722>
 800c3a6:	bf00      	nop
 800c3a8:	10000001 	.word	0x10000001
 800c3ac:	04000120 	.word	0x04000120
 800c3b0:	0800d9bd 	.word	0x0800d9bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	f040 81ce 	bne.w	800c75a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3c2:	f003 0310 	and.w	r3, r3, #16
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f000 81c7 	beq.w	800c75a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c3cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3d0:	f003 0310 	and.w	r3, r3, #16
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f000 81c0 	beq.w	800c75a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2210      	movs	r2, #16
 800c3e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ec:	2b40      	cmp	r3, #64	; 0x40
 800c3ee:	f040 813b 	bne.w	800c668 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a8b      	ldr	r2, [pc, #556]	; (800c628 <HAL_UART_IRQHandler+0x530>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d059      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a89      	ldr	r2, [pc, #548]	; (800c62c <HAL_UART_IRQHandler+0x534>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d053      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a87      	ldr	r2, [pc, #540]	; (800c630 <HAL_UART_IRQHandler+0x538>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d04d      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a85      	ldr	r2, [pc, #532]	; (800c634 <HAL_UART_IRQHandler+0x53c>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d047      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a83      	ldr	r2, [pc, #524]	; (800c638 <HAL_UART_IRQHandler+0x540>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d041      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a81      	ldr	r2, [pc, #516]	; (800c63c <HAL_UART_IRQHandler+0x544>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d03b      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a7f      	ldr	r2, [pc, #508]	; (800c640 <HAL_UART_IRQHandler+0x548>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d035      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a7d      	ldr	r2, [pc, #500]	; (800c644 <HAL_UART_IRQHandler+0x54c>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d02f      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a7b      	ldr	r2, [pc, #492]	; (800c648 <HAL_UART_IRQHandler+0x550>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d029      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a79      	ldr	r2, [pc, #484]	; (800c64c <HAL_UART_IRQHandler+0x554>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d023      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a77      	ldr	r2, [pc, #476]	; (800c650 <HAL_UART_IRQHandler+0x558>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d01d      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a75      	ldr	r2, [pc, #468]	; (800c654 <HAL_UART_IRQHandler+0x55c>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d017      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a73      	ldr	r2, [pc, #460]	; (800c658 <HAL_UART_IRQHandler+0x560>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d011      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a71      	ldr	r2, [pc, #452]	; (800c65c <HAL_UART_IRQHandler+0x564>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d00b      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a6f      	ldr	r2, [pc, #444]	; (800c660 <HAL_UART_IRQHandler+0x568>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d005      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x3ba>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a6d      	ldr	r2, [pc, #436]	; (800c664 <HAL_UART_IRQHandler+0x56c>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d105      	bne.n	800c4be <HAL_UART_IRQHandler+0x3c6>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	e004      	b.n	800c4c8 <HAL_UART_IRQHandler+0x3d0>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c4cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 81a4 	beq.w	800c81e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	f080 819c 	bcs.w	800c81e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4f4:	69db      	ldr	r3, [r3, #28]
 800c4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4fa:	f000 8086 	beq.w	800c60a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c506:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c50a:	e853 3f00 	ldrex	r3, [r3]
 800c50e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c516:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c51a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	461a      	mov	r2, r3
 800c524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c528:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c52c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c530:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c534:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c538:	e841 2300 	strex	r3, r2, [r1]
 800c53c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1da      	bne.n	800c4fe <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3308      	adds	r3, #8
 800c54e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c552:	e853 3f00 	ldrex	r3, [r3]
 800c556:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c55a:	f023 0301 	bic.w	r3, r3, #1
 800c55e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3308      	adds	r3, #8
 800c568:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c56c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c570:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c572:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c574:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c578:	e841 2300 	strex	r3, r2, [r1]
 800c57c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c57e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1e1      	bne.n	800c548 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	3308      	adds	r3, #8
 800c58a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c58e:	e853 3f00 	ldrex	r3, [r3]
 800c592:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c59a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3308      	adds	r3, #8
 800c5a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c5a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c5aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c5ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c5b0:	e841 2300 	strex	r3, r2, [r1]
 800c5b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c5b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1e3      	bne.n	800c584 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2220      	movs	r2, #32
 800c5c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d2:	e853 3f00 	ldrex	r3, [r3]
 800c5d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c5d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5da:	f023 0310 	bic.w	r3, r3, #16
 800c5de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5f4:	e841 2300 	strex	r3, r2, [r1]
 800c5f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1e4      	bne.n	800c5ca <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c604:	4618      	mov	r0, r3
 800c606:	f7fa f9d1 	bl	80069ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c616:	b29b      	uxth	r3, r3
 800c618:	1ad3      	subs	r3, r2, r3
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	4619      	mov	r1, r3
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f912 	bl	800c848 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c624:	e0fb      	b.n	800c81e <HAL_UART_IRQHandler+0x726>
 800c626:	bf00      	nop
 800c628:	40020010 	.word	0x40020010
 800c62c:	40020028 	.word	0x40020028
 800c630:	40020040 	.word	0x40020040
 800c634:	40020058 	.word	0x40020058
 800c638:	40020070 	.word	0x40020070
 800c63c:	40020088 	.word	0x40020088
 800c640:	400200a0 	.word	0x400200a0
 800c644:	400200b8 	.word	0x400200b8
 800c648:	40020410 	.word	0x40020410
 800c64c:	40020428 	.word	0x40020428
 800c650:	40020440 	.word	0x40020440
 800c654:	40020458 	.word	0x40020458
 800c658:	40020470 	.word	0x40020470
 800c65c:	40020488 	.word	0x40020488
 800c660:	400204a0 	.word	0x400204a0
 800c664:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c674:	b29b      	uxth	r3, r3
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c682:	b29b      	uxth	r3, r3
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 80cc 	beq.w	800c822 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c68a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f000 80c7 	beq.w	800c822 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69c:	e853 3f00 	ldrex	r3, [r3]
 800c6a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6b6:	647b      	str	r3, [r7, #68]	; 0x44
 800c6b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6be:	e841 2300 	strex	r3, r2, [r1]
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1e4      	bne.n	800c694 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	3308      	adds	r3, #8
 800c6d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d4:	e853 3f00 	ldrex	r3, [r3]
 800c6d8:	623b      	str	r3, [r7, #32]
   return(result);
 800c6da:	6a3a      	ldr	r2, [r7, #32]
 800c6dc:	4b54      	ldr	r3, [pc, #336]	; (800c830 <HAL_UART_IRQHandler+0x738>)
 800c6de:	4013      	ands	r3, r2
 800c6e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c6ee:	633a      	str	r2, [r7, #48]	; 0x30
 800c6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6f6:	e841 2300 	strex	r3, r2, [r1]
 800c6fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1e3      	bne.n	800c6ca <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2220      	movs	r2, #32
 800c706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	e853 3f00 	ldrex	r3, [r3]
 800c722:	60fb      	str	r3, [r7, #12]
   return(result);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f023 0310 	bic.w	r3, r3, #16
 800c72a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	461a      	mov	r2, r3
 800c734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c738:	61fb      	str	r3, [r7, #28]
 800c73a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73c:	69b9      	ldr	r1, [r7, #24]
 800c73e:	69fa      	ldr	r2, [r7, #28]
 800c740:	e841 2300 	strex	r3, r2, [r1]
 800c744:	617b      	str	r3, [r7, #20]
   return(result);
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1e4      	bne.n	800c716 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c74c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f878 	bl	800c848 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c758:	e063      	b.n	800c822 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c75a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c75e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00e      	beq.n	800c784 <HAL_UART_IRQHandler+0x68c>
 800c766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c76a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d008      	beq.n	800c784 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c77a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f001 fdbb 	bl	800e2f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c782:	e051      	b.n	800c828 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d014      	beq.n	800c7ba <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d105      	bne.n	800c7a8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c79c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d008      	beq.n	800c7ba <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d03a      	beq.n	800c826 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	4798      	blx	r3
    }
    return;
 800c7b8:	e035      	b.n	800c826 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d009      	beq.n	800c7da <HAL_UART_IRQHandler+0x6e2>
 800c7c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d003      	beq.n	800c7da <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f001 f908 	bl	800d9e8 <UART_EndTransmit_IT>
    return;
 800c7d8:	e026      	b.n	800c828 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d009      	beq.n	800c7fa <HAL_UART_IRQHandler+0x702>
 800c7e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d003      	beq.n	800c7fa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f001 fd94 	bl	800e320 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7f8:	e016      	b.n	800c828 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c7fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c802:	2b00      	cmp	r3, #0
 800c804:	d010      	beq.n	800c828 <HAL_UART_IRQHandler+0x730>
 800c806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	da0c      	bge.n	800c828 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f001 fd7c 	bl	800e30c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c814:	e008      	b.n	800c828 <HAL_UART_IRQHandler+0x730>
      return;
 800c816:	bf00      	nop
 800c818:	e006      	b.n	800c828 <HAL_UART_IRQHandler+0x730>
    return;
 800c81a:	bf00      	nop
 800c81c:	e004      	b.n	800c828 <HAL_UART_IRQHandler+0x730>
      return;
 800c81e:	bf00      	nop
 800c820:	e002      	b.n	800c828 <HAL_UART_IRQHandler+0x730>
      return;
 800c822:	bf00      	nop
 800c824:	e000      	b.n	800c828 <HAL_UART_IRQHandler+0x730>
    return;
 800c826:	bf00      	nop
  }
}
 800c828:	37e8      	adds	r7, #232	; 0xe8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	effffffe 	.word	0xeffffffe

0800c834 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c83c:	bf00      	nop
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	460b      	mov	r3, r1
 800c852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c864:	b092      	sub	sp, #72	; 0x48
 800c866:	af00      	add	r7, sp, #0
 800c868:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	689a      	ldr	r2, [r3, #8]
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	431a      	orrs	r2, r3
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	695b      	ldr	r3, [r3, #20]
 800c87e:	431a      	orrs	r2, r3
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	69db      	ldr	r3, [r3, #28]
 800c884:	4313      	orrs	r3, r2
 800c886:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	4bbe      	ldr	r3, [pc, #760]	; (800cb88 <UART_SetConfig+0x328>)
 800c890:	4013      	ands	r3, r2
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	6812      	ldr	r2, [r2, #0]
 800c896:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c898:	430b      	orrs	r3, r1
 800c89a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	68da      	ldr	r2, [r3, #12]
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	430a      	orrs	r2, r1
 800c8b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4ab3      	ldr	r2, [pc, #716]	; (800cb8c <UART_SetConfig+0x32c>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d004      	beq.n	800c8cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689a      	ldr	r2, [r3, #8]
 800c8d2:	4baf      	ldr	r3, [pc, #700]	; (800cb90 <UART_SetConfig+0x330>)
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	6812      	ldr	r2, [r2, #0]
 800c8da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c8dc:	430b      	orrs	r3, r1
 800c8de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e6:	f023 010f 	bic.w	r1, r3, #15
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	430a      	orrs	r2, r1
 800c8f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4aa6      	ldr	r2, [pc, #664]	; (800cb94 <UART_SetConfig+0x334>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d177      	bne.n	800c9f0 <UART_SetConfig+0x190>
 800c900:	4ba5      	ldr	r3, [pc, #660]	; (800cb98 <UART_SetConfig+0x338>)
 800c902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c904:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c908:	2b28      	cmp	r3, #40	; 0x28
 800c90a:	d86d      	bhi.n	800c9e8 <UART_SetConfig+0x188>
 800c90c:	a201      	add	r2, pc, #4	; (adr r2, 800c914 <UART_SetConfig+0xb4>)
 800c90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c912:	bf00      	nop
 800c914:	0800c9b9 	.word	0x0800c9b9
 800c918:	0800c9e9 	.word	0x0800c9e9
 800c91c:	0800c9e9 	.word	0x0800c9e9
 800c920:	0800c9e9 	.word	0x0800c9e9
 800c924:	0800c9e9 	.word	0x0800c9e9
 800c928:	0800c9e9 	.word	0x0800c9e9
 800c92c:	0800c9e9 	.word	0x0800c9e9
 800c930:	0800c9e9 	.word	0x0800c9e9
 800c934:	0800c9c1 	.word	0x0800c9c1
 800c938:	0800c9e9 	.word	0x0800c9e9
 800c93c:	0800c9e9 	.word	0x0800c9e9
 800c940:	0800c9e9 	.word	0x0800c9e9
 800c944:	0800c9e9 	.word	0x0800c9e9
 800c948:	0800c9e9 	.word	0x0800c9e9
 800c94c:	0800c9e9 	.word	0x0800c9e9
 800c950:	0800c9e9 	.word	0x0800c9e9
 800c954:	0800c9c9 	.word	0x0800c9c9
 800c958:	0800c9e9 	.word	0x0800c9e9
 800c95c:	0800c9e9 	.word	0x0800c9e9
 800c960:	0800c9e9 	.word	0x0800c9e9
 800c964:	0800c9e9 	.word	0x0800c9e9
 800c968:	0800c9e9 	.word	0x0800c9e9
 800c96c:	0800c9e9 	.word	0x0800c9e9
 800c970:	0800c9e9 	.word	0x0800c9e9
 800c974:	0800c9d1 	.word	0x0800c9d1
 800c978:	0800c9e9 	.word	0x0800c9e9
 800c97c:	0800c9e9 	.word	0x0800c9e9
 800c980:	0800c9e9 	.word	0x0800c9e9
 800c984:	0800c9e9 	.word	0x0800c9e9
 800c988:	0800c9e9 	.word	0x0800c9e9
 800c98c:	0800c9e9 	.word	0x0800c9e9
 800c990:	0800c9e9 	.word	0x0800c9e9
 800c994:	0800c9d9 	.word	0x0800c9d9
 800c998:	0800c9e9 	.word	0x0800c9e9
 800c99c:	0800c9e9 	.word	0x0800c9e9
 800c9a0:	0800c9e9 	.word	0x0800c9e9
 800c9a4:	0800c9e9 	.word	0x0800c9e9
 800c9a8:	0800c9e9 	.word	0x0800c9e9
 800c9ac:	0800c9e9 	.word	0x0800c9e9
 800c9b0:	0800c9e9 	.word	0x0800c9e9
 800c9b4:	0800c9e1 	.word	0x0800c9e1
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9be:	e222      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800c9c0:	2304      	movs	r3, #4
 800c9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c6:	e21e      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800c9c8:	2308      	movs	r3, #8
 800c9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ce:	e21a      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800c9d0:	2310      	movs	r3, #16
 800c9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d6:	e216      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800c9d8:	2320      	movs	r3, #32
 800c9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9de:	e212      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800c9e0:	2340      	movs	r3, #64	; 0x40
 800c9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e6:	e20e      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800c9e8:	2380      	movs	r3, #128	; 0x80
 800c9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ee:	e20a      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a69      	ldr	r2, [pc, #420]	; (800cb9c <UART_SetConfig+0x33c>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d130      	bne.n	800ca5c <UART_SetConfig+0x1fc>
 800c9fa:	4b67      	ldr	r3, [pc, #412]	; (800cb98 <UART_SetConfig+0x338>)
 800c9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9fe:	f003 0307 	and.w	r3, r3, #7
 800ca02:	2b05      	cmp	r3, #5
 800ca04:	d826      	bhi.n	800ca54 <UART_SetConfig+0x1f4>
 800ca06:	a201      	add	r2, pc, #4	; (adr r2, 800ca0c <UART_SetConfig+0x1ac>)
 800ca08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca0c:	0800ca25 	.word	0x0800ca25
 800ca10:	0800ca2d 	.word	0x0800ca2d
 800ca14:	0800ca35 	.word	0x0800ca35
 800ca18:	0800ca3d 	.word	0x0800ca3d
 800ca1c:	0800ca45 	.word	0x0800ca45
 800ca20:	0800ca4d 	.word	0x0800ca4d
 800ca24:	2300      	movs	r3, #0
 800ca26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2a:	e1ec      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ca2c:	2304      	movs	r3, #4
 800ca2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca32:	e1e8      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ca34:	2308      	movs	r3, #8
 800ca36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3a:	e1e4      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ca3c:	2310      	movs	r3, #16
 800ca3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca42:	e1e0      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ca44:	2320      	movs	r3, #32
 800ca46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4a:	e1dc      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ca4c:	2340      	movs	r3, #64	; 0x40
 800ca4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca52:	e1d8      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ca54:	2380      	movs	r3, #128	; 0x80
 800ca56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca5a:	e1d4      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a4f      	ldr	r2, [pc, #316]	; (800cba0 <UART_SetConfig+0x340>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d130      	bne.n	800cac8 <UART_SetConfig+0x268>
 800ca66:	4b4c      	ldr	r3, [pc, #304]	; (800cb98 <UART_SetConfig+0x338>)
 800ca68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca6a:	f003 0307 	and.w	r3, r3, #7
 800ca6e:	2b05      	cmp	r3, #5
 800ca70:	d826      	bhi.n	800cac0 <UART_SetConfig+0x260>
 800ca72:	a201      	add	r2, pc, #4	; (adr r2, 800ca78 <UART_SetConfig+0x218>)
 800ca74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca78:	0800ca91 	.word	0x0800ca91
 800ca7c:	0800ca99 	.word	0x0800ca99
 800ca80:	0800caa1 	.word	0x0800caa1
 800ca84:	0800caa9 	.word	0x0800caa9
 800ca88:	0800cab1 	.word	0x0800cab1
 800ca8c:	0800cab9 	.word	0x0800cab9
 800ca90:	2300      	movs	r3, #0
 800ca92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca96:	e1b6      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ca98:	2304      	movs	r3, #4
 800ca9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca9e:	e1b2      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800caa0:	2308      	movs	r3, #8
 800caa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caa6:	e1ae      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800caa8:	2310      	movs	r3, #16
 800caaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caae:	e1aa      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cab0:	2320      	movs	r3, #32
 800cab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cab6:	e1a6      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cab8:	2340      	movs	r3, #64	; 0x40
 800caba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cabe:	e1a2      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cac0:	2380      	movs	r3, #128	; 0x80
 800cac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cac6:	e19e      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a35      	ldr	r2, [pc, #212]	; (800cba4 <UART_SetConfig+0x344>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d130      	bne.n	800cb34 <UART_SetConfig+0x2d4>
 800cad2:	4b31      	ldr	r3, [pc, #196]	; (800cb98 <UART_SetConfig+0x338>)
 800cad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cad6:	f003 0307 	and.w	r3, r3, #7
 800cada:	2b05      	cmp	r3, #5
 800cadc:	d826      	bhi.n	800cb2c <UART_SetConfig+0x2cc>
 800cade:	a201      	add	r2, pc, #4	; (adr r2, 800cae4 <UART_SetConfig+0x284>)
 800cae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae4:	0800cafd 	.word	0x0800cafd
 800cae8:	0800cb05 	.word	0x0800cb05
 800caec:	0800cb0d 	.word	0x0800cb0d
 800caf0:	0800cb15 	.word	0x0800cb15
 800caf4:	0800cb1d 	.word	0x0800cb1d
 800caf8:	0800cb25 	.word	0x0800cb25
 800cafc:	2300      	movs	r3, #0
 800cafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb02:	e180      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cb04:	2304      	movs	r3, #4
 800cb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb0a:	e17c      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cb0c:	2308      	movs	r3, #8
 800cb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb12:	e178      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cb14:	2310      	movs	r3, #16
 800cb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1a:	e174      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cb1c:	2320      	movs	r3, #32
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb22:	e170      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cb24:	2340      	movs	r3, #64	; 0x40
 800cb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb2a:	e16c      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cb2c:	2380      	movs	r3, #128	; 0x80
 800cb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb32:	e168      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a1b      	ldr	r2, [pc, #108]	; (800cba8 <UART_SetConfig+0x348>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d142      	bne.n	800cbc4 <UART_SetConfig+0x364>
 800cb3e:	4b16      	ldr	r3, [pc, #88]	; (800cb98 <UART_SetConfig+0x338>)
 800cb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	2b05      	cmp	r3, #5
 800cb48:	d838      	bhi.n	800cbbc <UART_SetConfig+0x35c>
 800cb4a:	a201      	add	r2, pc, #4	; (adr r2, 800cb50 <UART_SetConfig+0x2f0>)
 800cb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb50:	0800cb69 	.word	0x0800cb69
 800cb54:	0800cb71 	.word	0x0800cb71
 800cb58:	0800cb79 	.word	0x0800cb79
 800cb5c:	0800cb81 	.word	0x0800cb81
 800cb60:	0800cbad 	.word	0x0800cbad
 800cb64:	0800cbb5 	.word	0x0800cbb5
 800cb68:	2300      	movs	r3, #0
 800cb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6e:	e14a      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cb70:	2304      	movs	r3, #4
 800cb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb76:	e146      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cb78:	2308      	movs	r3, #8
 800cb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb7e:	e142      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cb80:	2310      	movs	r3, #16
 800cb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb86:	e13e      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cb88:	cfff69f3 	.word	0xcfff69f3
 800cb8c:	58000c00 	.word	0x58000c00
 800cb90:	11fff4ff 	.word	0x11fff4ff
 800cb94:	40011000 	.word	0x40011000
 800cb98:	58024400 	.word	0x58024400
 800cb9c:	40004400 	.word	0x40004400
 800cba0:	40004800 	.word	0x40004800
 800cba4:	40004c00 	.word	0x40004c00
 800cba8:	40005000 	.word	0x40005000
 800cbac:	2320      	movs	r3, #32
 800cbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbb2:	e128      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cbb4:	2340      	movs	r3, #64	; 0x40
 800cbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbba:	e124      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cbbc:	2380      	movs	r3, #128	; 0x80
 800cbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbc2:	e120      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4acb      	ldr	r2, [pc, #812]	; (800cef8 <UART_SetConfig+0x698>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d176      	bne.n	800ccbc <UART_SetConfig+0x45c>
 800cbce:	4bcb      	ldr	r3, [pc, #812]	; (800cefc <UART_SetConfig+0x69c>)
 800cbd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbd6:	2b28      	cmp	r3, #40	; 0x28
 800cbd8:	d86c      	bhi.n	800ccb4 <UART_SetConfig+0x454>
 800cbda:	a201      	add	r2, pc, #4	; (adr r2, 800cbe0 <UART_SetConfig+0x380>)
 800cbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe0:	0800cc85 	.word	0x0800cc85
 800cbe4:	0800ccb5 	.word	0x0800ccb5
 800cbe8:	0800ccb5 	.word	0x0800ccb5
 800cbec:	0800ccb5 	.word	0x0800ccb5
 800cbf0:	0800ccb5 	.word	0x0800ccb5
 800cbf4:	0800ccb5 	.word	0x0800ccb5
 800cbf8:	0800ccb5 	.word	0x0800ccb5
 800cbfc:	0800ccb5 	.word	0x0800ccb5
 800cc00:	0800cc8d 	.word	0x0800cc8d
 800cc04:	0800ccb5 	.word	0x0800ccb5
 800cc08:	0800ccb5 	.word	0x0800ccb5
 800cc0c:	0800ccb5 	.word	0x0800ccb5
 800cc10:	0800ccb5 	.word	0x0800ccb5
 800cc14:	0800ccb5 	.word	0x0800ccb5
 800cc18:	0800ccb5 	.word	0x0800ccb5
 800cc1c:	0800ccb5 	.word	0x0800ccb5
 800cc20:	0800cc95 	.word	0x0800cc95
 800cc24:	0800ccb5 	.word	0x0800ccb5
 800cc28:	0800ccb5 	.word	0x0800ccb5
 800cc2c:	0800ccb5 	.word	0x0800ccb5
 800cc30:	0800ccb5 	.word	0x0800ccb5
 800cc34:	0800ccb5 	.word	0x0800ccb5
 800cc38:	0800ccb5 	.word	0x0800ccb5
 800cc3c:	0800ccb5 	.word	0x0800ccb5
 800cc40:	0800cc9d 	.word	0x0800cc9d
 800cc44:	0800ccb5 	.word	0x0800ccb5
 800cc48:	0800ccb5 	.word	0x0800ccb5
 800cc4c:	0800ccb5 	.word	0x0800ccb5
 800cc50:	0800ccb5 	.word	0x0800ccb5
 800cc54:	0800ccb5 	.word	0x0800ccb5
 800cc58:	0800ccb5 	.word	0x0800ccb5
 800cc5c:	0800ccb5 	.word	0x0800ccb5
 800cc60:	0800cca5 	.word	0x0800cca5
 800cc64:	0800ccb5 	.word	0x0800ccb5
 800cc68:	0800ccb5 	.word	0x0800ccb5
 800cc6c:	0800ccb5 	.word	0x0800ccb5
 800cc70:	0800ccb5 	.word	0x0800ccb5
 800cc74:	0800ccb5 	.word	0x0800ccb5
 800cc78:	0800ccb5 	.word	0x0800ccb5
 800cc7c:	0800ccb5 	.word	0x0800ccb5
 800cc80:	0800ccad 	.word	0x0800ccad
 800cc84:	2301      	movs	r3, #1
 800cc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8a:	e0bc      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cc8c:	2304      	movs	r3, #4
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc92:	e0b8      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cc94:	2308      	movs	r3, #8
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9a:	e0b4      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cc9c:	2310      	movs	r3, #16
 800cc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca2:	e0b0      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cca4:	2320      	movs	r3, #32
 800cca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccaa:	e0ac      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ccac:	2340      	movs	r3, #64	; 0x40
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb2:	e0a8      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ccb4:	2380      	movs	r3, #128	; 0x80
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccba:	e0a4      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a8f      	ldr	r2, [pc, #572]	; (800cf00 <UART_SetConfig+0x6a0>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d130      	bne.n	800cd28 <UART_SetConfig+0x4c8>
 800ccc6:	4b8d      	ldr	r3, [pc, #564]	; (800cefc <UART_SetConfig+0x69c>)
 800ccc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccca:	f003 0307 	and.w	r3, r3, #7
 800ccce:	2b05      	cmp	r3, #5
 800ccd0:	d826      	bhi.n	800cd20 <UART_SetConfig+0x4c0>
 800ccd2:	a201      	add	r2, pc, #4	; (adr r2, 800ccd8 <UART_SetConfig+0x478>)
 800ccd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd8:	0800ccf1 	.word	0x0800ccf1
 800ccdc:	0800ccf9 	.word	0x0800ccf9
 800cce0:	0800cd01 	.word	0x0800cd01
 800cce4:	0800cd09 	.word	0x0800cd09
 800cce8:	0800cd11 	.word	0x0800cd11
 800ccec:	0800cd19 	.word	0x0800cd19
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf6:	e086      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ccf8:	2304      	movs	r3, #4
 800ccfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccfe:	e082      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd00:	2308      	movs	r3, #8
 800cd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd06:	e07e      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd08:	2310      	movs	r3, #16
 800cd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd0e:	e07a      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd10:	2320      	movs	r3, #32
 800cd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd16:	e076      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd18:	2340      	movs	r3, #64	; 0x40
 800cd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd1e:	e072      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd20:	2380      	movs	r3, #128	; 0x80
 800cd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd26:	e06e      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a75      	ldr	r2, [pc, #468]	; (800cf04 <UART_SetConfig+0x6a4>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d130      	bne.n	800cd94 <UART_SetConfig+0x534>
 800cd32:	4b72      	ldr	r3, [pc, #456]	; (800cefc <UART_SetConfig+0x69c>)
 800cd34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd36:	f003 0307 	and.w	r3, r3, #7
 800cd3a:	2b05      	cmp	r3, #5
 800cd3c:	d826      	bhi.n	800cd8c <UART_SetConfig+0x52c>
 800cd3e:	a201      	add	r2, pc, #4	; (adr r2, 800cd44 <UART_SetConfig+0x4e4>)
 800cd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd44:	0800cd5d 	.word	0x0800cd5d
 800cd48:	0800cd65 	.word	0x0800cd65
 800cd4c:	0800cd6d 	.word	0x0800cd6d
 800cd50:	0800cd75 	.word	0x0800cd75
 800cd54:	0800cd7d 	.word	0x0800cd7d
 800cd58:	0800cd85 	.word	0x0800cd85
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd62:	e050      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd64:	2304      	movs	r3, #4
 800cd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd6a:	e04c      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd6c:	2308      	movs	r3, #8
 800cd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd72:	e048      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd74:	2310      	movs	r3, #16
 800cd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7a:	e044      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd7c:	2320      	movs	r3, #32
 800cd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd82:	e040      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd84:	2340      	movs	r3, #64	; 0x40
 800cd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd8a:	e03c      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd8c:	2380      	movs	r3, #128	; 0x80
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd92:	e038      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a5b      	ldr	r2, [pc, #364]	; (800cf08 <UART_SetConfig+0x6a8>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d130      	bne.n	800ce00 <UART_SetConfig+0x5a0>
 800cd9e:	4b57      	ldr	r3, [pc, #348]	; (800cefc <UART_SetConfig+0x69c>)
 800cda0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cda2:	f003 0307 	and.w	r3, r3, #7
 800cda6:	2b05      	cmp	r3, #5
 800cda8:	d826      	bhi.n	800cdf8 <UART_SetConfig+0x598>
 800cdaa:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <UART_SetConfig+0x550>)
 800cdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb0:	0800cdc9 	.word	0x0800cdc9
 800cdb4:	0800cdd1 	.word	0x0800cdd1
 800cdb8:	0800cdd9 	.word	0x0800cdd9
 800cdbc:	0800cde1 	.word	0x0800cde1
 800cdc0:	0800cde9 	.word	0x0800cde9
 800cdc4:	0800cdf1 	.word	0x0800cdf1
 800cdc8:	2302      	movs	r3, #2
 800cdca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdce:	e01a      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cdd0:	2304      	movs	r3, #4
 800cdd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdd6:	e016      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cdd8:	2308      	movs	r3, #8
 800cdda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdde:	e012      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cde0:	2310      	movs	r3, #16
 800cde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cde6:	e00e      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cde8:	2320      	movs	r3, #32
 800cdea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdee:	e00a      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cdf0:	2340      	movs	r3, #64	; 0x40
 800cdf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdf6:	e006      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800cdf8:	2380      	movs	r3, #128	; 0x80
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdfe:	e002      	b.n	800ce06 <UART_SetConfig+0x5a6>
 800ce00:	2380      	movs	r3, #128	; 0x80
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a3f      	ldr	r2, [pc, #252]	; (800cf08 <UART_SetConfig+0x6a8>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	f040 80f8 	bne.w	800d002 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce16:	2b20      	cmp	r3, #32
 800ce18:	dc46      	bgt.n	800cea8 <UART_SetConfig+0x648>
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	f2c0 8082 	blt.w	800cf24 <UART_SetConfig+0x6c4>
 800ce20:	3b02      	subs	r3, #2
 800ce22:	2b1e      	cmp	r3, #30
 800ce24:	d87e      	bhi.n	800cf24 <UART_SetConfig+0x6c4>
 800ce26:	a201      	add	r2, pc, #4	; (adr r2, 800ce2c <UART_SetConfig+0x5cc>)
 800ce28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2c:	0800ceaf 	.word	0x0800ceaf
 800ce30:	0800cf25 	.word	0x0800cf25
 800ce34:	0800ceb7 	.word	0x0800ceb7
 800ce38:	0800cf25 	.word	0x0800cf25
 800ce3c:	0800cf25 	.word	0x0800cf25
 800ce40:	0800cf25 	.word	0x0800cf25
 800ce44:	0800cec7 	.word	0x0800cec7
 800ce48:	0800cf25 	.word	0x0800cf25
 800ce4c:	0800cf25 	.word	0x0800cf25
 800ce50:	0800cf25 	.word	0x0800cf25
 800ce54:	0800cf25 	.word	0x0800cf25
 800ce58:	0800cf25 	.word	0x0800cf25
 800ce5c:	0800cf25 	.word	0x0800cf25
 800ce60:	0800cf25 	.word	0x0800cf25
 800ce64:	0800ced7 	.word	0x0800ced7
 800ce68:	0800cf25 	.word	0x0800cf25
 800ce6c:	0800cf25 	.word	0x0800cf25
 800ce70:	0800cf25 	.word	0x0800cf25
 800ce74:	0800cf25 	.word	0x0800cf25
 800ce78:	0800cf25 	.word	0x0800cf25
 800ce7c:	0800cf25 	.word	0x0800cf25
 800ce80:	0800cf25 	.word	0x0800cf25
 800ce84:	0800cf25 	.word	0x0800cf25
 800ce88:	0800cf25 	.word	0x0800cf25
 800ce8c:	0800cf25 	.word	0x0800cf25
 800ce90:	0800cf25 	.word	0x0800cf25
 800ce94:	0800cf25 	.word	0x0800cf25
 800ce98:	0800cf25 	.word	0x0800cf25
 800ce9c:	0800cf25 	.word	0x0800cf25
 800cea0:	0800cf25 	.word	0x0800cf25
 800cea4:	0800cf17 	.word	0x0800cf17
 800cea8:	2b40      	cmp	r3, #64	; 0x40
 800ceaa:	d037      	beq.n	800cf1c <UART_SetConfig+0x6bc>
 800ceac:	e03a      	b.n	800cf24 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ceae:	f7fc fc17 	bl	80096e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ceb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ceb4:	e03c      	b.n	800cf30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7fc fc26 	bl	800970c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec4:	e034      	b.n	800cf30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cec6:	f107 0318 	add.w	r3, r7, #24
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7fc fd72 	bl	80099b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced4:	e02c      	b.n	800cf30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ced6:	4b09      	ldr	r3, [pc, #36]	; (800cefc <UART_SetConfig+0x69c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f003 0320 	and.w	r3, r3, #32
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d016      	beq.n	800cf10 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cee2:	4b06      	ldr	r3, [pc, #24]	; (800cefc <UART_SetConfig+0x69c>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	08db      	lsrs	r3, r3, #3
 800cee8:	f003 0303 	and.w	r3, r3, #3
 800ceec:	4a07      	ldr	r2, [pc, #28]	; (800cf0c <UART_SetConfig+0x6ac>)
 800ceee:	fa22 f303 	lsr.w	r3, r2, r3
 800cef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cef4:	e01c      	b.n	800cf30 <UART_SetConfig+0x6d0>
 800cef6:	bf00      	nop
 800cef8:	40011400 	.word	0x40011400
 800cefc:	58024400 	.word	0x58024400
 800cf00:	40007800 	.word	0x40007800
 800cf04:	40007c00 	.word	0x40007c00
 800cf08:	58000c00 	.word	0x58000c00
 800cf0c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cf10:	4b9d      	ldr	r3, [pc, #628]	; (800d188 <UART_SetConfig+0x928>)
 800cf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf14:	e00c      	b.n	800cf30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf16:	4b9d      	ldr	r3, [pc, #628]	; (800d18c <UART_SetConfig+0x92c>)
 800cf18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf1a:	e009      	b.n	800cf30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf22:	e005      	b.n	800cf30 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cf24:	2300      	movs	r3, #0
 800cf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f000 81de 	beq.w	800d2f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3c:	4a94      	ldr	r2, [pc, #592]	; (800d190 <UART_SetConfig+0x930>)
 800cf3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf42:	461a      	mov	r2, r3
 800cf44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf46:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf4a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	685a      	ldr	r2, [r3, #4]
 800cf50:	4613      	mov	r3, r2
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	4413      	add	r3, r2
 800cf56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d305      	bcc.n	800cf68 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d903      	bls.n	800cf70 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cf6e:	e1c1      	b.n	800d2f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf72:	2200      	movs	r2, #0
 800cf74:	60bb      	str	r3, [r7, #8]
 800cf76:	60fa      	str	r2, [r7, #12]
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf7c:	4a84      	ldr	r2, [pc, #528]	; (800d190 <UART_SetConfig+0x930>)
 800cf7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	2200      	movs	r2, #0
 800cf86:	603b      	str	r3, [r7, #0]
 800cf88:	607a      	str	r2, [r7, #4]
 800cf8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf92:	f7f3 fbb9 	bl	8000708 <__aeabi_uldivmod>
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	f04f 0200 	mov.w	r2, #0
 800cfa2:	f04f 0300 	mov.w	r3, #0
 800cfa6:	020b      	lsls	r3, r1, #8
 800cfa8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cfac:	0202      	lsls	r2, r0, #8
 800cfae:	6979      	ldr	r1, [r7, #20]
 800cfb0:	6849      	ldr	r1, [r1, #4]
 800cfb2:	0849      	lsrs	r1, r1, #1
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	460c      	mov	r4, r1
 800cfb8:	4605      	mov	r5, r0
 800cfba:	eb12 0804 	adds.w	r8, r2, r4
 800cfbe:	eb43 0905 	adc.w	r9, r3, r5
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	469a      	mov	sl, r3
 800cfca:	4693      	mov	fp, r2
 800cfcc:	4652      	mov	r2, sl
 800cfce:	465b      	mov	r3, fp
 800cfd0:	4640      	mov	r0, r8
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	f7f3 fb98 	bl	8000708 <__aeabi_uldivmod>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	460b      	mov	r3, r1
 800cfdc:	4613      	mov	r3, r2
 800cfde:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfe6:	d308      	bcc.n	800cffa <UART_SetConfig+0x79a>
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfee:	d204      	bcs.n	800cffa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cff6:	60da      	str	r2, [r3, #12]
 800cff8:	e17c      	b.n	800d2f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d000:	e178      	b.n	800d2f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	69db      	ldr	r3, [r3, #28]
 800d006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d00a:	f040 80c5 	bne.w	800d198 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d00e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d012:	2b20      	cmp	r3, #32
 800d014:	dc48      	bgt.n	800d0a8 <UART_SetConfig+0x848>
 800d016:	2b00      	cmp	r3, #0
 800d018:	db7b      	blt.n	800d112 <UART_SetConfig+0x8b2>
 800d01a:	2b20      	cmp	r3, #32
 800d01c:	d879      	bhi.n	800d112 <UART_SetConfig+0x8b2>
 800d01e:	a201      	add	r2, pc, #4	; (adr r2, 800d024 <UART_SetConfig+0x7c4>)
 800d020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d024:	0800d0af 	.word	0x0800d0af
 800d028:	0800d0b7 	.word	0x0800d0b7
 800d02c:	0800d113 	.word	0x0800d113
 800d030:	0800d113 	.word	0x0800d113
 800d034:	0800d0bf 	.word	0x0800d0bf
 800d038:	0800d113 	.word	0x0800d113
 800d03c:	0800d113 	.word	0x0800d113
 800d040:	0800d113 	.word	0x0800d113
 800d044:	0800d0cf 	.word	0x0800d0cf
 800d048:	0800d113 	.word	0x0800d113
 800d04c:	0800d113 	.word	0x0800d113
 800d050:	0800d113 	.word	0x0800d113
 800d054:	0800d113 	.word	0x0800d113
 800d058:	0800d113 	.word	0x0800d113
 800d05c:	0800d113 	.word	0x0800d113
 800d060:	0800d113 	.word	0x0800d113
 800d064:	0800d0df 	.word	0x0800d0df
 800d068:	0800d113 	.word	0x0800d113
 800d06c:	0800d113 	.word	0x0800d113
 800d070:	0800d113 	.word	0x0800d113
 800d074:	0800d113 	.word	0x0800d113
 800d078:	0800d113 	.word	0x0800d113
 800d07c:	0800d113 	.word	0x0800d113
 800d080:	0800d113 	.word	0x0800d113
 800d084:	0800d113 	.word	0x0800d113
 800d088:	0800d113 	.word	0x0800d113
 800d08c:	0800d113 	.word	0x0800d113
 800d090:	0800d113 	.word	0x0800d113
 800d094:	0800d113 	.word	0x0800d113
 800d098:	0800d113 	.word	0x0800d113
 800d09c:	0800d113 	.word	0x0800d113
 800d0a0:	0800d113 	.word	0x0800d113
 800d0a4:	0800d105 	.word	0x0800d105
 800d0a8:	2b40      	cmp	r3, #64	; 0x40
 800d0aa:	d02e      	beq.n	800d10a <UART_SetConfig+0x8aa>
 800d0ac:	e031      	b.n	800d112 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0ae:	f7fb fba5 	bl	80087fc <HAL_RCC_GetPCLK1Freq>
 800d0b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0b4:	e033      	b.n	800d11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0b6:	f7fb fbb7 	bl	8008828 <HAL_RCC_GetPCLK2Freq>
 800d0ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0bc:	e02f      	b.n	800d11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fc fb22 	bl	800970c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0cc:	e027      	b.n	800d11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0ce:	f107 0318 	add.w	r3, r7, #24
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7fc fc6e 	bl	80099b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0dc:	e01f      	b.n	800d11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0de:	4b2d      	ldr	r3, [pc, #180]	; (800d194 <UART_SetConfig+0x934>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f003 0320 	and.w	r3, r3, #32
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d009      	beq.n	800d0fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0ea:	4b2a      	ldr	r3, [pc, #168]	; (800d194 <UART_SetConfig+0x934>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	08db      	lsrs	r3, r3, #3
 800d0f0:	f003 0303 	and.w	r3, r3, #3
 800d0f4:	4a24      	ldr	r2, [pc, #144]	; (800d188 <UART_SetConfig+0x928>)
 800d0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0fc:	e00f      	b.n	800d11e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d0fe:	4b22      	ldr	r3, [pc, #136]	; (800d188 <UART_SetConfig+0x928>)
 800d100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d102:	e00c      	b.n	800d11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d104:	4b21      	ldr	r3, [pc, #132]	; (800d18c <UART_SetConfig+0x92c>)
 800d106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d108:	e009      	b.n	800d11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d10a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d110:	e005      	b.n	800d11e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d112:	2300      	movs	r3, #0
 800d114:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d11c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d120:	2b00      	cmp	r3, #0
 800d122:	f000 80e7 	beq.w	800d2f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12a:	4a19      	ldr	r2, [pc, #100]	; (800d190 <UART_SetConfig+0x930>)
 800d12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d130:	461a      	mov	r2, r3
 800d132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d134:	fbb3 f3f2 	udiv	r3, r3, r2
 800d138:	005a      	lsls	r2, r3, #1
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	085b      	lsrs	r3, r3, #1
 800d140:	441a      	add	r2, r3
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	fbb2 f3f3 	udiv	r3, r2, r3
 800d14a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14e:	2b0f      	cmp	r3, #15
 800d150:	d916      	bls.n	800d180 <UART_SetConfig+0x920>
 800d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d158:	d212      	bcs.n	800d180 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	f023 030f 	bic.w	r3, r3, #15
 800d162:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	085b      	lsrs	r3, r3, #1
 800d168:	b29b      	uxth	r3, r3
 800d16a:	f003 0307 	and.w	r3, r3, #7
 800d16e:	b29a      	uxth	r2, r3
 800d170:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d172:	4313      	orrs	r3, r2
 800d174:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d17c:	60da      	str	r2, [r3, #12]
 800d17e:	e0b9      	b.n	800d2f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d180:	2301      	movs	r3, #1
 800d182:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d186:	e0b5      	b.n	800d2f4 <UART_SetConfig+0xa94>
 800d188:	03d09000 	.word	0x03d09000
 800d18c:	003d0900 	.word	0x003d0900
 800d190:	08011bb0 	.word	0x08011bb0
 800d194:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d198:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d19c:	2b20      	cmp	r3, #32
 800d19e:	dc49      	bgt.n	800d234 <UART_SetConfig+0x9d4>
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	db7c      	blt.n	800d29e <UART_SetConfig+0xa3e>
 800d1a4:	2b20      	cmp	r3, #32
 800d1a6:	d87a      	bhi.n	800d29e <UART_SetConfig+0xa3e>
 800d1a8:	a201      	add	r2, pc, #4	; (adr r2, 800d1b0 <UART_SetConfig+0x950>)
 800d1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ae:	bf00      	nop
 800d1b0:	0800d23b 	.word	0x0800d23b
 800d1b4:	0800d243 	.word	0x0800d243
 800d1b8:	0800d29f 	.word	0x0800d29f
 800d1bc:	0800d29f 	.word	0x0800d29f
 800d1c0:	0800d24b 	.word	0x0800d24b
 800d1c4:	0800d29f 	.word	0x0800d29f
 800d1c8:	0800d29f 	.word	0x0800d29f
 800d1cc:	0800d29f 	.word	0x0800d29f
 800d1d0:	0800d25b 	.word	0x0800d25b
 800d1d4:	0800d29f 	.word	0x0800d29f
 800d1d8:	0800d29f 	.word	0x0800d29f
 800d1dc:	0800d29f 	.word	0x0800d29f
 800d1e0:	0800d29f 	.word	0x0800d29f
 800d1e4:	0800d29f 	.word	0x0800d29f
 800d1e8:	0800d29f 	.word	0x0800d29f
 800d1ec:	0800d29f 	.word	0x0800d29f
 800d1f0:	0800d26b 	.word	0x0800d26b
 800d1f4:	0800d29f 	.word	0x0800d29f
 800d1f8:	0800d29f 	.word	0x0800d29f
 800d1fc:	0800d29f 	.word	0x0800d29f
 800d200:	0800d29f 	.word	0x0800d29f
 800d204:	0800d29f 	.word	0x0800d29f
 800d208:	0800d29f 	.word	0x0800d29f
 800d20c:	0800d29f 	.word	0x0800d29f
 800d210:	0800d29f 	.word	0x0800d29f
 800d214:	0800d29f 	.word	0x0800d29f
 800d218:	0800d29f 	.word	0x0800d29f
 800d21c:	0800d29f 	.word	0x0800d29f
 800d220:	0800d29f 	.word	0x0800d29f
 800d224:	0800d29f 	.word	0x0800d29f
 800d228:	0800d29f 	.word	0x0800d29f
 800d22c:	0800d29f 	.word	0x0800d29f
 800d230:	0800d291 	.word	0x0800d291
 800d234:	2b40      	cmp	r3, #64	; 0x40
 800d236:	d02e      	beq.n	800d296 <UART_SetConfig+0xa36>
 800d238:	e031      	b.n	800d29e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d23a:	f7fb fadf 	bl	80087fc <HAL_RCC_GetPCLK1Freq>
 800d23e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d240:	e033      	b.n	800d2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d242:	f7fb faf1 	bl	8008828 <HAL_RCC_GetPCLK2Freq>
 800d246:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d248:	e02f      	b.n	800d2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d24a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fc fa5c 	bl	800970c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d258:	e027      	b.n	800d2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d25a:	f107 0318 	add.w	r3, r7, #24
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fc fba8 	bl	80099b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d268:	e01f      	b.n	800d2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d26a:	4b2d      	ldr	r3, [pc, #180]	; (800d320 <UART_SetConfig+0xac0>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f003 0320 	and.w	r3, r3, #32
 800d272:	2b00      	cmp	r3, #0
 800d274:	d009      	beq.n	800d28a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d276:	4b2a      	ldr	r3, [pc, #168]	; (800d320 <UART_SetConfig+0xac0>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	08db      	lsrs	r3, r3, #3
 800d27c:	f003 0303 	and.w	r3, r3, #3
 800d280:	4a28      	ldr	r2, [pc, #160]	; (800d324 <UART_SetConfig+0xac4>)
 800d282:	fa22 f303 	lsr.w	r3, r2, r3
 800d286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d288:	e00f      	b.n	800d2aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d28a:	4b26      	ldr	r3, [pc, #152]	; (800d324 <UART_SetConfig+0xac4>)
 800d28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d28e:	e00c      	b.n	800d2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d290:	4b25      	ldr	r3, [pc, #148]	; (800d328 <UART_SetConfig+0xac8>)
 800d292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d294:	e009      	b.n	800d2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d29c:	e005      	b.n	800d2aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d2a8:	bf00      	nop
    }

    if (pclk != 0U)
 800d2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d021      	beq.n	800d2f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b4:	4a1d      	ldr	r2, [pc, #116]	; (800d32c <UART_SetConfig+0xacc>)
 800d2b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2be:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	085b      	lsrs	r3, r3, #1
 800d2c8:	441a      	add	r2, r3
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d6:	2b0f      	cmp	r3, #15
 800d2d8:	d909      	bls.n	800d2ee <UART_SetConfig+0xa8e>
 800d2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2e0:	d205      	bcs.n	800d2ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	60da      	str	r2, [r3, #12]
 800d2ec:	e002      	b.n	800d2f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	2201      	movs	r2, #1
 800d300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	2200      	movs	r2, #0
 800d308:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	2200      	movs	r2, #0
 800d30e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d310:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d314:	4618      	mov	r0, r3
 800d316:	3748      	adds	r7, #72	; 0x48
 800d318:	46bd      	mov	sp, r7
 800d31a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d31e:	bf00      	nop
 800d320:	58024400 	.word	0x58024400
 800d324:	03d09000 	.word	0x03d09000
 800d328:	003d0900 	.word	0x003d0900
 800d32c:	08011bb0 	.word	0x08011bb0

0800d330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00a      	beq.n	800d35a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	430a      	orrs	r2, r1
 800d358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d35e:	f003 0302 	and.w	r3, r3, #2
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00a      	beq.n	800d37c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	430a      	orrs	r2, r1
 800d37a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d380:	f003 0304 	and.w	r3, r3, #4
 800d384:	2b00      	cmp	r3, #0
 800d386:	d00a      	beq.n	800d39e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	430a      	orrs	r2, r1
 800d39c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a2:	f003 0308 	and.w	r3, r3, #8
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00a      	beq.n	800d3c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	430a      	orrs	r2, r1
 800d3be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c4:	f003 0310 	and.w	r3, r3, #16
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00a      	beq.n	800d3e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	430a      	orrs	r2, r1
 800d3e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e6:	f003 0320 	and.w	r3, r3, #32
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00a      	beq.n	800d404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	430a      	orrs	r2, r1
 800d402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d01a      	beq.n	800d446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	430a      	orrs	r2, r1
 800d424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d42a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d42e:	d10a      	bne.n	800d446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	430a      	orrs	r2, r1
 800d444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d44a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00a      	beq.n	800d468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	430a      	orrs	r2, r1
 800d466:	605a      	str	r2, [r3, #4]
  }
}
 800d468:	bf00      	nop
 800d46a:	370c      	adds	r7, #12
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b086      	sub	sp, #24
 800d478:	af02      	add	r7, sp, #8
 800d47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d484:	f7f9 f914 	bl	80066b0 <HAL_GetTick>
 800d488:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f003 0308 	and.w	r3, r3, #8
 800d494:	2b08      	cmp	r3, #8
 800d496:	d10e      	bne.n	800d4b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 f82f 	bl	800d50a <UART_WaitOnFlagUntilTimeout>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d001      	beq.n	800d4b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4b2:	2303      	movs	r3, #3
 800d4b4:	e025      	b.n	800d502 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f003 0304 	and.w	r3, r3, #4
 800d4c0:	2b04      	cmp	r3, #4
 800d4c2:	d10e      	bne.n	800d4e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f819 	bl	800d50a <UART_WaitOnFlagUntilTimeout>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d001      	beq.n	800d4e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4de:	2303      	movs	r3, #3
 800d4e0:	e00f      	b.n	800d502 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2220      	movs	r2, #32
 800d4e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2220      	movs	r2, #32
 800d4ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d500:	2300      	movs	r3, #0
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b09c      	sub	sp, #112	; 0x70
 800d50e:	af00      	add	r7, sp, #0
 800d510:	60f8      	str	r0, [r7, #12]
 800d512:	60b9      	str	r1, [r7, #8]
 800d514:	603b      	str	r3, [r7, #0]
 800d516:	4613      	mov	r3, r2
 800d518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d51a:	e0a9      	b.n	800d670 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d51c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d522:	f000 80a5 	beq.w	800d670 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d526:	f7f9 f8c3 	bl	80066b0 <HAL_GetTick>
 800d52a:	4602      	mov	r2, r0
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	1ad3      	subs	r3, r2, r3
 800d530:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d532:	429a      	cmp	r2, r3
 800d534:	d302      	bcc.n	800d53c <UART_WaitOnFlagUntilTimeout+0x32>
 800d536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d140      	bne.n	800d5be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d544:	e853 3f00 	ldrex	r3, [r3]
 800d548:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d54c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d550:	667b      	str	r3, [r7, #100]	; 0x64
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	461a      	mov	r2, r3
 800d558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d55a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d55c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d55e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d562:	e841 2300 	strex	r3, r2, [r1]
 800d566:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1e6      	bne.n	800d53c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	3308      	adds	r3, #8
 800d574:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d578:	e853 3f00 	ldrex	r3, [r3]
 800d57c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d580:	f023 0301 	bic.w	r3, r3, #1
 800d584:	663b      	str	r3, [r7, #96]	; 0x60
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	3308      	adds	r3, #8
 800d58c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d58e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d596:	e841 2300 	strex	r3, r2, [r1]
 800d59a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d1e5      	bne.n	800d56e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2220      	movs	r2, #32
 800d5a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2220      	movs	r2, #32
 800d5ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e069      	b.n	800d692 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f003 0304 	and.w	r3, r3, #4
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d051      	beq.n	800d670 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	69db      	ldr	r3, [r3, #28]
 800d5d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5da:	d149      	bne.n	800d670 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ee:	e853 3f00 	ldrex	r3, [r3]
 800d5f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d5fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	461a      	mov	r2, r3
 800d602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d604:	637b      	str	r3, [r7, #52]	; 0x34
 800d606:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d60a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d60c:	e841 2300 	strex	r3, r2, [r1]
 800d610:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d614:	2b00      	cmp	r3, #0
 800d616:	d1e6      	bne.n	800d5e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3308      	adds	r3, #8
 800d61e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	e853 3f00 	ldrex	r3, [r3]
 800d626:	613b      	str	r3, [r7, #16]
   return(result);
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	f023 0301 	bic.w	r3, r3, #1
 800d62e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	3308      	adds	r3, #8
 800d636:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d638:	623a      	str	r2, [r7, #32]
 800d63a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d63c:	69f9      	ldr	r1, [r7, #28]
 800d63e:	6a3a      	ldr	r2, [r7, #32]
 800d640:	e841 2300 	strex	r3, r2, [r1]
 800d644:	61bb      	str	r3, [r7, #24]
   return(result);
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d1e5      	bne.n	800d618 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2220      	movs	r2, #32
 800d650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2220      	movs	r2, #32
 800d658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2220      	movs	r2, #32
 800d660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2200      	movs	r2, #0
 800d668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d66c:	2303      	movs	r3, #3
 800d66e:	e010      	b.n	800d692 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	69da      	ldr	r2, [r3, #28]
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	4013      	ands	r3, r2
 800d67a:	68ba      	ldr	r2, [r7, #8]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	bf0c      	ite	eq
 800d680:	2301      	moveq	r3, #1
 800d682:	2300      	movne	r3, #0
 800d684:	b2db      	uxtb	r3, r3
 800d686:	461a      	mov	r2, r3
 800d688:	79fb      	ldrb	r3, [r7, #7]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	f43f af46 	beq.w	800d51c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	3770      	adds	r7, #112	; 0x70
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
	...

0800d69c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b0a3      	sub	sp, #140	; 0x8c
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	68ba      	ldr	r2, [r7, #8]
 800d6ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	88fa      	ldrh	r2, [r7, #6]
 800d6b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	88fa      	ldrh	r2, [r7, #6]
 800d6bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6ce:	d10e      	bne.n	800d6ee <UART_Start_Receive_IT+0x52>
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d105      	bne.n	800d6e4 <UART_Start_Receive_IT+0x48>
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d6de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6e2:	e02d      	b.n	800d740 <UART_Start_Receive_IT+0xa4>
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	22ff      	movs	r2, #255	; 0xff
 800d6e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6ec:	e028      	b.n	800d740 <UART_Start_Receive_IT+0xa4>
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d10d      	bne.n	800d712 <UART_Start_Receive_IT+0x76>
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d104      	bne.n	800d708 <UART_Start_Receive_IT+0x6c>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	22ff      	movs	r2, #255	; 0xff
 800d702:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d706:	e01b      	b.n	800d740 <UART_Start_Receive_IT+0xa4>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	227f      	movs	r2, #127	; 0x7f
 800d70c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d710:	e016      	b.n	800d740 <UART_Start_Receive_IT+0xa4>
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d71a:	d10d      	bne.n	800d738 <UART_Start_Receive_IT+0x9c>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	691b      	ldr	r3, [r3, #16]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d104      	bne.n	800d72e <UART_Start_Receive_IT+0x92>
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	227f      	movs	r2, #127	; 0x7f
 800d728:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d72c:	e008      	b.n	800d740 <UART_Start_Receive_IT+0xa4>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	223f      	movs	r2, #63	; 0x3f
 800d732:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d736:	e003      	b.n	800d740 <UART_Start_Receive_IT+0xa4>
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2222      	movs	r2, #34	; 0x22
 800d74c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	3308      	adds	r3, #8
 800d756:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d75a:	e853 3f00 	ldrex	r3, [r3]
 800d75e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d762:	f043 0301 	orr.w	r3, r3, #1
 800d766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	3308      	adds	r3, #8
 800d770:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d774:	673a      	str	r2, [r7, #112]	; 0x70
 800d776:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d778:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d77a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d77c:	e841 2300 	strex	r3, r2, [r1]
 800d780:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d784:	2b00      	cmp	r3, #0
 800d786:	d1e3      	bne.n	800d750 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d78c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d790:	d153      	bne.n	800d83a <UART_Start_Receive_IT+0x19e>
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d798:	88fa      	ldrh	r2, [r7, #6]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d34d      	bcc.n	800d83a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7a6:	d107      	bne.n	800d7b8 <UART_Start_Receive_IT+0x11c>
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d103      	bne.n	800d7b8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	4a4b      	ldr	r2, [pc, #300]	; (800d8e0 <UART_Start_Receive_IT+0x244>)
 800d7b4:	671a      	str	r2, [r3, #112]	; 0x70
 800d7b6:	e002      	b.n	800d7be <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	4a4a      	ldr	r2, [pc, #296]	; (800d8e4 <UART_Start_Receive_IT+0x248>)
 800d7bc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	691b      	ldr	r3, [r3, #16]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d01a      	beq.n	800d804 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7d6:	e853 3f00 	ldrex	r3, [r3]
 800d7da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d7dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d7f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7f2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d7f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d7f8:	e841 2300 	strex	r3, r2, [r1]
 800d7fc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d7fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1e4      	bne.n	800d7ce <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	3308      	adds	r3, #8
 800d80a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d80e:	e853 3f00 	ldrex	r3, [r3]
 800d812:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d81a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	3308      	adds	r3, #8
 800d822:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d824:	64ba      	str	r2, [r7, #72]	; 0x48
 800d826:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d828:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d82a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d82c:	e841 2300 	strex	r3, r2, [r1]
 800d830:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1e5      	bne.n	800d804 <UART_Start_Receive_IT+0x168>
 800d838:	e04a      	b.n	800d8d0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d842:	d107      	bne.n	800d854 <UART_Start_Receive_IT+0x1b8>
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d103      	bne.n	800d854 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	4a26      	ldr	r2, [pc, #152]	; (800d8e8 <UART_Start_Receive_IT+0x24c>)
 800d850:	671a      	str	r2, [r3, #112]	; 0x70
 800d852:	e002      	b.n	800d85a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	4a25      	ldr	r2, [pc, #148]	; (800d8ec <UART_Start_Receive_IT+0x250>)
 800d858:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	691b      	ldr	r3, [r3, #16]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d019      	beq.n	800d89e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d872:	e853 3f00 	ldrex	r3, [r3]
 800d876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d87e:	677b      	str	r3, [r7, #116]	; 0x74
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	461a      	mov	r2, r3
 800d886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d888:	637b      	str	r3, [r7, #52]	; 0x34
 800d88a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d88c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d88e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d890:	e841 2300 	strex	r3, r2, [r1]
 800d894:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d1e6      	bne.n	800d86a <UART_Start_Receive_IT+0x1ce>
 800d89c:	e018      	b.n	800d8d0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	e853 3f00 	ldrex	r3, [r3]
 800d8aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	f043 0320 	orr.w	r3, r3, #32
 800d8b2:	67bb      	str	r3, [r7, #120]	; 0x78
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8bc:	623b      	str	r3, [r7, #32]
 800d8be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c0:	69f9      	ldr	r1, [r7, #28]
 800d8c2:	6a3a      	ldr	r2, [r7, #32]
 800d8c4:	e841 2300 	strex	r3, r2, [r1]
 800d8c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d1e6      	bne.n	800d89e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	378c      	adds	r7, #140	; 0x8c
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr
 800d8de:	bf00      	nop
 800d8e0:	0800dff9 	.word	0x0800dff9
 800d8e4:	0800dd01 	.word	0x0800dd01
 800d8e8:	0800db9f 	.word	0x0800db9f
 800d8ec:	0800da3f 	.word	0x0800da3f

0800d8f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b095      	sub	sp, #84	; 0x54
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d900:	e853 3f00 	ldrex	r3, [r3]
 800d904:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d90c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	461a      	mov	r2, r3
 800d914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d916:	643b      	str	r3, [r7, #64]	; 0x40
 800d918:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d91c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d91e:	e841 2300 	strex	r3, r2, [r1]
 800d922:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1e6      	bne.n	800d8f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	3308      	adds	r3, #8
 800d930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d932:	6a3b      	ldr	r3, [r7, #32]
 800d934:	e853 3f00 	ldrex	r3, [r3]
 800d938:	61fb      	str	r3, [r7, #28]
   return(result);
 800d93a:	69fa      	ldr	r2, [r7, #28]
 800d93c:	4b1e      	ldr	r3, [pc, #120]	; (800d9b8 <UART_EndRxTransfer+0xc8>)
 800d93e:	4013      	ands	r3, r2
 800d940:	64bb      	str	r3, [r7, #72]	; 0x48
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	3308      	adds	r3, #8
 800d948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d94a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d94c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d94e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d952:	e841 2300 	strex	r3, r2, [r1]
 800d956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1e5      	bne.n	800d92a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d962:	2b01      	cmp	r3, #1
 800d964:	d118      	bne.n	800d998 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	e853 3f00 	ldrex	r3, [r3]
 800d972:	60bb      	str	r3, [r7, #8]
   return(result);
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	f023 0310 	bic.w	r3, r3, #16
 800d97a:	647b      	str	r3, [r7, #68]	; 0x44
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	461a      	mov	r2, r3
 800d982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d984:	61bb      	str	r3, [r7, #24]
 800d986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d988:	6979      	ldr	r1, [r7, #20]
 800d98a:	69ba      	ldr	r2, [r7, #24]
 800d98c:	e841 2300 	strex	r3, r2, [r1]
 800d990:	613b      	str	r3, [r7, #16]
   return(result);
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1e6      	bne.n	800d966 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2220      	movs	r2, #32
 800d99c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d9ac:	bf00      	nop
 800d9ae:	3754      	adds	r7, #84	; 0x54
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr
 800d9b8:	effffffe 	.word	0xeffffffe

0800d9bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f7fe ff2a 	bl	800c834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9e0:	bf00      	nop
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b088      	sub	sp, #32
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	e853 3f00 	ldrex	r3, [r3]
 800d9fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da04:	61fb      	str	r3, [r7, #28]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	461a      	mov	r2, r3
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	61bb      	str	r3, [r7, #24]
 800da10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da12:	6979      	ldr	r1, [r7, #20]
 800da14:	69ba      	ldr	r2, [r7, #24]
 800da16:	e841 2300 	strex	r3, r2, [r1]
 800da1a:	613b      	str	r3, [r7, #16]
   return(result);
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1e6      	bne.n	800d9f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2220      	movs	r2, #32
 800da26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f7f5 f87b 	bl	8002b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da36:	bf00      	nop
 800da38:	3720      	adds	r7, #32
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b096      	sub	sp, #88	; 0x58
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da56:	2b22      	cmp	r3, #34	; 0x22
 800da58:	f040 8095 	bne.w	800db86 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da62:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800da66:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800da6a:	b2d9      	uxtb	r1, r3
 800da6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800da70:	b2da      	uxtb	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da76:	400a      	ands	r2, r1
 800da78:	b2d2      	uxtb	r2, r2
 800da7a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da80:	1c5a      	adds	r2, r3, #1
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	3b01      	subs	r3, #1
 800da90:	b29a      	uxth	r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d178      	bne.n	800db96 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daac:	e853 3f00 	ldrex	r3, [r3]
 800dab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dab8:	653b      	str	r3, [r7, #80]	; 0x50
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	461a      	mov	r2, r3
 800dac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dac2:	647b      	str	r3, [r7, #68]	; 0x44
 800dac4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800daca:	e841 2300 	strex	r3, r2, [r1]
 800dace:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1e6      	bne.n	800daa4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3308      	adds	r3, #8
 800dadc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	e853 3f00 	ldrex	r3, [r3]
 800dae4:	623b      	str	r3, [r7, #32]
   return(result);
 800dae6:	6a3b      	ldr	r3, [r7, #32]
 800dae8:	f023 0301 	bic.w	r3, r3, #1
 800daec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	3308      	adds	r3, #8
 800daf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800daf6:	633a      	str	r2, [r7, #48]	; 0x30
 800daf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dafe:	e841 2300 	strex	r3, r2, [r1]
 800db02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1e5      	bne.n	800dad6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2220      	movs	r2, #32
 800db0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d12e      	bne.n	800db7e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	e853 3f00 	ldrex	r3, [r3]
 800db32:	60fb      	str	r3, [r7, #12]
   return(result);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f023 0310 	bic.w	r3, r3, #16
 800db3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	461a      	mov	r2, r3
 800db42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db44:	61fb      	str	r3, [r7, #28]
 800db46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db48:	69b9      	ldr	r1, [r7, #24]
 800db4a:	69fa      	ldr	r2, [r7, #28]
 800db4c:	e841 2300 	strex	r3, r2, [r1]
 800db50:	617b      	str	r3, [r7, #20]
   return(result);
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d1e6      	bne.n	800db26 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	69db      	ldr	r3, [r3, #28]
 800db5e:	f003 0310 	and.w	r3, r3, #16
 800db62:	2b10      	cmp	r3, #16
 800db64:	d103      	bne.n	800db6e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2210      	movs	r2, #16
 800db6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db74:	4619      	mov	r1, r3
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7fe fe66 	bl	800c848 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db7c:	e00b      	b.n	800db96 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7f4 ff60 	bl	8002a44 <HAL_UART_RxCpltCallback>
}
 800db84:	e007      	b.n	800db96 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	699a      	ldr	r2, [r3, #24]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f042 0208 	orr.w	r2, r2, #8
 800db94:	619a      	str	r2, [r3, #24]
}
 800db96:	bf00      	nop
 800db98:	3758      	adds	r7, #88	; 0x58
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b096      	sub	sp, #88	; 0x58
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dbac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbb6:	2b22      	cmp	r3, #34	; 0x22
 800dbb8:	f040 8095 	bne.w	800dce6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800dbcc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800dbd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	b29a      	uxth	r2, r3
 800dbd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbda:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbe0:	1c9a      	adds	r2, r3, #2
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	3b01      	subs	r3, #1
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d178      	bne.n	800dcf6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc0c:	e853 3f00 	ldrex	r3, [r3]
 800dc10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	461a      	mov	r2, r3
 800dc20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc22:	643b      	str	r3, [r7, #64]	; 0x40
 800dc24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc2a:	e841 2300 	strex	r3, r2, [r1]
 800dc2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d1e6      	bne.n	800dc04 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	3308      	adds	r3, #8
 800dc3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc3e:	6a3b      	ldr	r3, [r7, #32]
 800dc40:	e853 3f00 	ldrex	r3, [r3]
 800dc44:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	f023 0301 	bic.w	r3, r3, #1
 800dc4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	3308      	adds	r3, #8
 800dc54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc56:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc5e:	e841 2300 	strex	r3, r2, [r1]
 800dc62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1e5      	bne.n	800dc36 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2220      	movs	r2, #32
 800dc6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d12e      	bne.n	800dcde <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	e853 3f00 	ldrex	r3, [r3]
 800dc92:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	f023 0310 	bic.w	r3, r3, #16
 800dc9a:	647b      	str	r3, [r7, #68]	; 0x44
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	461a      	mov	r2, r3
 800dca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dca4:	61bb      	str	r3, [r7, #24]
 800dca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca8:	6979      	ldr	r1, [r7, #20]
 800dcaa:	69ba      	ldr	r2, [r7, #24]
 800dcac:	e841 2300 	strex	r3, r2, [r1]
 800dcb0:	613b      	str	r3, [r7, #16]
   return(result);
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d1e6      	bne.n	800dc86 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	69db      	ldr	r3, [r3, #28]
 800dcbe:	f003 0310 	and.w	r3, r3, #16
 800dcc2:	2b10      	cmp	r3, #16
 800dcc4:	d103      	bne.n	800dcce <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2210      	movs	r2, #16
 800dccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f7fe fdb6 	bl	800c848 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dcdc:	e00b      	b.n	800dcf6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7f4 feb0 	bl	8002a44 <HAL_UART_RxCpltCallback>
}
 800dce4:	e007      	b.n	800dcf6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	699a      	ldr	r2, [r3, #24]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f042 0208 	orr.w	r2, r2, #8
 800dcf4:	619a      	str	r2, [r3, #24]
}
 800dcf6:	bf00      	nop
 800dcf8:	3758      	adds	r7, #88	; 0x58
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
	...

0800dd00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b0a6      	sub	sp, #152	; 0x98
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd0e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	69db      	ldr	r3, [r3, #28]
 800dd18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd36:	2b22      	cmp	r3, #34	; 0x22
 800dd38:	f040 814d 	bne.w	800dfd6 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dd42:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dd46:	e0f4      	b.n	800df32 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dd52:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800dd56:	b2d9      	uxtb	r1, r3
 800dd58:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd62:	400a      	ands	r2, r1
 800dd64:	b2d2      	uxtb	r2, r2
 800dd66:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd6c:	1c5a      	adds	r2, r3, #1
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	3b01      	subs	r3, #1
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	69db      	ldr	r3, [r3, #28]
 800dd8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dd8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd92:	f003 0307 	and.w	r3, r3, #7
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d053      	beq.n	800de42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd9e:	f003 0301 	and.w	r3, r3, #1
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d011      	beq.n	800ddca <UART_RxISR_8BIT_FIFOEN+0xca>
 800dda6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d00b      	beq.n	800ddca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddc0:	f043 0201 	orr.w	r2, r3, #1
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddce:	f003 0302 	and.w	r3, r3, #2
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d011      	beq.n	800ddfa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ddd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ddda:	f003 0301 	and.w	r3, r3, #1
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00b      	beq.n	800ddfa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2202      	movs	r2, #2
 800dde8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddf0:	f043 0204 	orr.w	r2, r3, #4
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddfe:	f003 0304 	and.w	r3, r3, #4
 800de02:	2b00      	cmp	r3, #0
 800de04:	d011      	beq.n	800de2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800de06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de0a:	f003 0301 	and.w	r3, r3, #1
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00b      	beq.n	800de2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2204      	movs	r2, #4
 800de18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de20:	f043 0202 	orr.w	r2, r3, #2
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de30:	2b00      	cmp	r3, #0
 800de32:	d006      	beq.n	800de42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7fe fcfd 	bl	800c834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de48:	b29b      	uxth	r3, r3
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d171      	bne.n	800df32 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de56:	e853 3f00 	ldrex	r3, [r3]
 800de5a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800de5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	461a      	mov	r2, r3
 800de6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de70:	66bb      	str	r3, [r7, #104]	; 0x68
 800de72:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800de76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800de78:	e841 2300 	strex	r3, r2, [r1]
 800de7c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800de7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de80:	2b00      	cmp	r3, #0
 800de82:	d1e4      	bne.n	800de4e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	3308      	adds	r3, #8
 800de8a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de8e:	e853 3f00 	ldrex	r3, [r3]
 800de92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800de94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de96:	4b56      	ldr	r3, [pc, #344]	; (800dff0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800de98:	4013      	ands	r3, r2
 800de9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	3308      	adds	r3, #8
 800dea2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dea4:	657a      	str	r2, [r7, #84]	; 0x54
 800dea6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800deaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800deac:	e841 2300 	strex	r3, r2, [r1]
 800deb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800deb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1e5      	bne.n	800de84 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2220      	movs	r2, #32
 800debc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deca:	2b01      	cmp	r3, #1
 800decc:	d12e      	bne.n	800df2c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dedc:	e853 3f00 	ldrex	r3, [r3]
 800dee0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee4:	f023 0310 	bic.w	r3, r3, #16
 800dee8:	67bb      	str	r3, [r7, #120]	; 0x78
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	461a      	mov	r2, r3
 800def0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800def2:	643b      	str	r3, [r7, #64]	; 0x40
 800def4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800def8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800defa:	e841 2300 	strex	r3, r2, [r1]
 800defe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1e6      	bne.n	800ded4 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	69db      	ldr	r3, [r3, #28]
 800df0c:	f003 0310 	and.w	r3, r3, #16
 800df10:	2b10      	cmp	r3, #16
 800df12:	d103      	bne.n	800df1c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	2210      	movs	r2, #16
 800df1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df22:	4619      	mov	r1, r3
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f7fe fc8f 	bl	800c848 <HAL_UARTEx_RxEventCallback>
 800df2a:	e002      	b.n	800df32 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7f4 fd89 	bl	8002a44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800df32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800df36:	2b00      	cmp	r3, #0
 800df38:	d006      	beq.n	800df48 <UART_RxISR_8BIT_FIFOEN+0x248>
 800df3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df3e:	f003 0320 	and.w	r3, r3, #32
 800df42:	2b00      	cmp	r3, #0
 800df44:	f47f af00 	bne.w	800dd48 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800df52:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800df56:	2b00      	cmp	r3, #0
 800df58:	d045      	beq.n	800dfe6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800df64:	429a      	cmp	r2, r3
 800df66:	d23e      	bcs.n	800dfe6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	3308      	adds	r3, #8
 800df6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df70:	6a3b      	ldr	r3, [r7, #32]
 800df72:	e853 3f00 	ldrex	r3, [r3]
 800df76:	61fb      	str	r3, [r7, #28]
   return(result);
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df7e:	673b      	str	r3, [r7, #112]	; 0x70
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	3308      	adds	r3, #8
 800df86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df88:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df90:	e841 2300 	strex	r3, r2, [r1]
 800df94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1e5      	bne.n	800df68 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4a15      	ldr	r2, [pc, #84]	; (800dff4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800dfa0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	e853 3f00 	ldrex	r3, [r3]
 800dfae:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	f043 0320 	orr.w	r3, r3, #32
 800dfb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfc0:	61bb      	str	r3, [r7, #24]
 800dfc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc4:	6979      	ldr	r1, [r7, #20]
 800dfc6:	69ba      	ldr	r2, [r7, #24]
 800dfc8:	e841 2300 	strex	r3, r2, [r1]
 800dfcc:	613b      	str	r3, [r7, #16]
   return(result);
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1e6      	bne.n	800dfa2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dfd4:	e007      	b.n	800dfe6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	699a      	ldr	r2, [r3, #24]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f042 0208 	orr.w	r2, r2, #8
 800dfe4:	619a      	str	r2, [r3, #24]
}
 800dfe6:	bf00      	nop
 800dfe8:	3798      	adds	r7, #152	; 0x98
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	effffffe 	.word	0xeffffffe
 800dff4:	0800da3f 	.word	0x0800da3f

0800dff8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b0a8      	sub	sp, #160	; 0xa0
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e006:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	69db      	ldr	r3, [r3, #28]
 800e010:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e02e:	2b22      	cmp	r3, #34	; 0x22
 800e030:	f040 8151 	bne.w	800e2d6 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e03a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e03e:	e0f8      	b.n	800e232 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e04e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e052:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e056:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e05a:	4013      	ands	r3, r2
 800e05c:	b29a      	uxth	r2, r3
 800e05e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e062:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e068:	1c9a      	adds	r2, r3, #2
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e074:	b29b      	uxth	r3, r3
 800e076:	3b01      	subs	r3, #1
 800e078:	b29a      	uxth	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	69db      	ldr	r3, [r3, #28]
 800e086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e08a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e08e:	f003 0307 	and.w	r3, r3, #7
 800e092:	2b00      	cmp	r3, #0
 800e094:	d053      	beq.n	800e13e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e096:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d011      	beq.n	800e0c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e0a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e0a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00b      	beq.n	800e0c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0bc:	f043 0201 	orr.w	r2, r3, #1
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0ca:	f003 0302 	and.w	r3, r3, #2
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d011      	beq.n	800e0f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e0d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0d6:	f003 0301 	and.w	r3, r3, #1
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d00b      	beq.n	800e0f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	2202      	movs	r2, #2
 800e0e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0ec:	f043 0204 	orr.w	r2, r3, #4
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0fa:	f003 0304 	and.w	r3, r3, #4
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d011      	beq.n	800e126 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e102:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e106:	f003 0301 	and.w	r3, r3, #1
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00b      	beq.n	800e126 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2204      	movs	r2, #4
 800e114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e11c:	f043 0202 	orr.w	r2, r3, #2
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d006      	beq.n	800e13e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7fe fb7f 	bl	800c834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e144:	b29b      	uxth	r3, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	d173      	bne.n	800e232 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e152:	e853 3f00 	ldrex	r3, [r3]
 800e156:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e15a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e15e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	461a      	mov	r2, r3
 800e168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e16c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e16e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e170:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e172:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e174:	e841 2300 	strex	r3, r2, [r1]
 800e178:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e17a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d1e4      	bne.n	800e14a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	3308      	adds	r3, #8
 800e186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e18a:	e853 3f00 	ldrex	r3, [r3]
 800e18e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e192:	4b57      	ldr	r3, [pc, #348]	; (800e2f0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800e194:	4013      	ands	r3, r2
 800e196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	3308      	adds	r3, #8
 800e1a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e1a4:	65ba      	str	r2, [r7, #88]	; 0x58
 800e1a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e1aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e1ac:	e841 2300 	strex	r3, r2, [r1]
 800e1b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1e3      	bne.n	800e180 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2220      	movs	r2, #32
 800e1bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d12e      	bne.n	800e22c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1dc:	e853 3f00 	ldrex	r3, [r3]
 800e1e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1e4:	f023 0310 	bic.w	r3, r3, #16
 800e1e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e1f2:	647b      	str	r3, [r7, #68]	; 0x44
 800e1f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1fa:	e841 2300 	strex	r3, r2, [r1]
 800e1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e202:	2b00      	cmp	r3, #0
 800e204:	d1e6      	bne.n	800e1d4 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	69db      	ldr	r3, [r3, #28]
 800e20c:	f003 0310 	and.w	r3, r3, #16
 800e210:	2b10      	cmp	r3, #16
 800e212:	d103      	bne.n	800e21c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	2210      	movs	r2, #16
 800e21a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e222:	4619      	mov	r1, r3
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7fe fb0f 	bl	800c848 <HAL_UARTEx_RxEventCallback>
 800e22a:	e002      	b.n	800e232 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f7f4 fc09 	bl	8002a44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e232:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e236:	2b00      	cmp	r3, #0
 800e238:	d006      	beq.n	800e248 <UART_RxISR_16BIT_FIFOEN+0x250>
 800e23a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e23e:	f003 0320 	and.w	r3, r3, #32
 800e242:	2b00      	cmp	r3, #0
 800e244:	f47f aefc 	bne.w	800e040 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e24e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e252:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e256:	2b00      	cmp	r3, #0
 800e258:	d045      	beq.n	800e2e6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e260:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e264:	429a      	cmp	r2, r3
 800e266:	d23e      	bcs.n	800e2e6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	3308      	adds	r3, #8
 800e26e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e272:	e853 3f00 	ldrex	r3, [r3]
 800e276:	623b      	str	r3, [r7, #32]
   return(result);
 800e278:	6a3b      	ldr	r3, [r7, #32]
 800e27a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e27e:	677b      	str	r3, [r7, #116]	; 0x74
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	3308      	adds	r3, #8
 800e286:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e288:	633a      	str	r2, [r7, #48]	; 0x30
 800e28a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e28c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e28e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e290:	e841 2300 	strex	r3, r2, [r1]
 800e294:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1e5      	bne.n	800e268 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	4a15      	ldr	r2, [pc, #84]	; (800e2f4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e2a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	e853 3f00 	ldrex	r3, [r3]
 800e2ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f043 0320 	orr.w	r3, r3, #32
 800e2b6:	673b      	str	r3, [r7, #112]	; 0x70
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	461a      	mov	r2, r3
 800e2be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2c0:	61fb      	str	r3, [r7, #28]
 800e2c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c4:	69b9      	ldr	r1, [r7, #24]
 800e2c6:	69fa      	ldr	r2, [r7, #28]
 800e2c8:	e841 2300 	strex	r3, r2, [r1]
 800e2cc:	617b      	str	r3, [r7, #20]
   return(result);
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d1e6      	bne.n	800e2a2 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2d4:	e007      	b.n	800e2e6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	699a      	ldr	r2, [r3, #24]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f042 0208 	orr.w	r2, r2, #8
 800e2e4:	619a      	str	r2, [r3, #24]
}
 800e2e6:	bf00      	nop
 800e2e8:	37a0      	adds	r7, #160	; 0xa0
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	effffffe 	.word	0xeffffffe
 800e2f4:	0800db9f 	.word	0x0800db9f

0800e2f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e300:	bf00      	nop
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e314:	bf00      	nop
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e328:	bf00      	nop
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e342:	2b01      	cmp	r3, #1
 800e344:	d101      	bne.n	800e34a <HAL_UARTEx_DisableFifoMode+0x16>
 800e346:	2302      	movs	r3, #2
 800e348:	e027      	b.n	800e39a <HAL_UARTEx_DisableFifoMode+0x66>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2201      	movs	r2, #1
 800e34e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2224      	movs	r2, #36	; 0x24
 800e356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f022 0201 	bic.w	r2, r2, #1
 800e370:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e378:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2220      	movs	r2, #32
 800e38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr

0800e3a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b084      	sub	sp, #16
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
 800e3ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d101      	bne.n	800e3be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e3ba:	2302      	movs	r3, #2
 800e3bc:	e02d      	b.n	800e41a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2224      	movs	r2, #36	; 0x24
 800e3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f022 0201 	bic.w	r2, r2, #1
 800e3e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	689b      	ldr	r3, [r3, #8]
 800e3ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	683a      	ldr	r2, [r7, #0]
 800e3f6:	430a      	orrs	r2, r1
 800e3f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f850 	bl	800e4a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2220      	movs	r2, #32
 800e40c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e418:	2300      	movs	r3, #0
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b084      	sub	sp, #16
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e432:	2b01      	cmp	r3, #1
 800e434:	d101      	bne.n	800e43a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e436:	2302      	movs	r3, #2
 800e438:	e02d      	b.n	800e496 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2201      	movs	r2, #1
 800e43e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2224      	movs	r2, #36	; 0x24
 800e446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f022 0201 	bic.w	r2, r2, #1
 800e460:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	683a      	ldr	r2, [r7, #0]
 800e472:	430a      	orrs	r2, r1
 800e474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 f812 	bl	800e4a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2220      	movs	r2, #32
 800e488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
	...

0800e4a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d108      	bne.n	800e4c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e4c0:	e031      	b.n	800e526 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e4c2:	2310      	movs	r3, #16
 800e4c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e4c6:	2310      	movs	r3, #16
 800e4c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	0e5b      	lsrs	r3, r3, #25
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	f003 0307 	and.w	r3, r3, #7
 800e4d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	0f5b      	lsrs	r3, r3, #29
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	f003 0307 	and.w	r3, r3, #7
 800e4e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e4ea:	7bbb      	ldrb	r3, [r7, #14]
 800e4ec:	7b3a      	ldrb	r2, [r7, #12]
 800e4ee:	4911      	ldr	r1, [pc, #68]	; (800e534 <UARTEx_SetNbDataToProcess+0x94>)
 800e4f0:	5c8a      	ldrb	r2, [r1, r2]
 800e4f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e4f6:	7b3a      	ldrb	r2, [r7, #12]
 800e4f8:	490f      	ldr	r1, [pc, #60]	; (800e538 <UARTEx_SetNbDataToProcess+0x98>)
 800e4fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e4fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e500:	b29a      	uxth	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e508:	7bfb      	ldrb	r3, [r7, #15]
 800e50a:	7b7a      	ldrb	r2, [r7, #13]
 800e50c:	4909      	ldr	r1, [pc, #36]	; (800e534 <UARTEx_SetNbDataToProcess+0x94>)
 800e50e:	5c8a      	ldrb	r2, [r1, r2]
 800e510:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e514:	7b7a      	ldrb	r2, [r7, #13]
 800e516:	4908      	ldr	r1, [pc, #32]	; (800e538 <UARTEx_SetNbDataToProcess+0x98>)
 800e518:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e51a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e51e:	b29a      	uxth	r2, r3
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e526:	bf00      	nop
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	08011bc8 	.word	0x08011bc8
 800e538:	08011bd0 	.word	0x08011bd0

0800e53c <__errno>:
 800e53c:	4b01      	ldr	r3, [pc, #4]	; (800e544 <__errno+0x8>)
 800e53e:	6818      	ldr	r0, [r3, #0]
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop
 800e544:	24000068 	.word	0x24000068

0800e548 <__libc_init_array>:
 800e548:	b570      	push	{r4, r5, r6, lr}
 800e54a:	4d0d      	ldr	r5, [pc, #52]	; (800e580 <__libc_init_array+0x38>)
 800e54c:	4c0d      	ldr	r4, [pc, #52]	; (800e584 <__libc_init_array+0x3c>)
 800e54e:	1b64      	subs	r4, r4, r5
 800e550:	10a4      	asrs	r4, r4, #2
 800e552:	2600      	movs	r6, #0
 800e554:	42a6      	cmp	r6, r4
 800e556:	d109      	bne.n	800e56c <__libc_init_array+0x24>
 800e558:	4d0b      	ldr	r5, [pc, #44]	; (800e588 <__libc_init_array+0x40>)
 800e55a:	4c0c      	ldr	r4, [pc, #48]	; (800e58c <__libc_init_array+0x44>)
 800e55c:	f003 faea 	bl	8011b34 <_init>
 800e560:	1b64      	subs	r4, r4, r5
 800e562:	10a4      	asrs	r4, r4, #2
 800e564:	2600      	movs	r6, #0
 800e566:	42a6      	cmp	r6, r4
 800e568:	d105      	bne.n	800e576 <__libc_init_array+0x2e>
 800e56a:	bd70      	pop	{r4, r5, r6, pc}
 800e56c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e570:	4798      	blx	r3
 800e572:	3601      	adds	r6, #1
 800e574:	e7ee      	b.n	800e554 <__libc_init_array+0xc>
 800e576:	f855 3b04 	ldr.w	r3, [r5], #4
 800e57a:	4798      	blx	r3
 800e57c:	3601      	adds	r6, #1
 800e57e:	e7f2      	b.n	800e566 <__libc_init_array+0x1e>
 800e580:	080138c8 	.word	0x080138c8
 800e584:	080138c8 	.word	0x080138c8
 800e588:	080138c8 	.word	0x080138c8
 800e58c:	080138cc 	.word	0x080138cc

0800e590 <memset>:
 800e590:	4402      	add	r2, r0
 800e592:	4603      	mov	r3, r0
 800e594:	4293      	cmp	r3, r2
 800e596:	d100      	bne.n	800e59a <memset+0xa>
 800e598:	4770      	bx	lr
 800e59a:	f803 1b01 	strb.w	r1, [r3], #1
 800e59e:	e7f9      	b.n	800e594 <memset+0x4>

0800e5a0 <sulp>:
 800e5a0:	b570      	push	{r4, r5, r6, lr}
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	460d      	mov	r5, r1
 800e5a6:	4616      	mov	r6, r2
 800e5a8:	ec45 4b10 	vmov	d0, r4, r5
 800e5ac:	f001 fcd8 	bl	800ff60 <__ulp>
 800e5b0:	b17e      	cbz	r6, 800e5d2 <sulp+0x32>
 800e5b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e5b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	dd09      	ble.n	800e5d2 <sulp+0x32>
 800e5be:	051b      	lsls	r3, r3, #20
 800e5c0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e5c4:	2000      	movs	r0, #0
 800e5c6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800e5ca:	ec41 0b17 	vmov	d7, r0, r1
 800e5ce:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e5d2:	bd70      	pop	{r4, r5, r6, pc}
 800e5d4:	0000      	movs	r0, r0
	...

0800e5d8 <_strtod_l>:
 800e5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5dc:	ed2d 8b0e 	vpush	{d8-d14}
 800e5e0:	b097      	sub	sp, #92	; 0x5c
 800e5e2:	461f      	mov	r7, r3
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	9312      	str	r3, [sp, #72]	; 0x48
 800e5e8:	4ba1      	ldr	r3, [pc, #644]	; (800e870 <_strtod_l+0x298>)
 800e5ea:	920d      	str	r2, [sp, #52]	; 0x34
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	9307      	str	r3, [sp, #28]
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	468b      	mov	fp, r1
 800e5f6:	f7f1 fe73 	bl	80002e0 <strlen>
 800e5fa:	f04f 0800 	mov.w	r8, #0
 800e5fe:	4605      	mov	r5, r0
 800e600:	f04f 0900 	mov.w	r9, #0
 800e604:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e608:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e60a:	7813      	ldrb	r3, [r2, #0]
 800e60c:	2b2b      	cmp	r3, #43	; 0x2b
 800e60e:	d04d      	beq.n	800e6ac <_strtod_l+0xd4>
 800e610:	d83a      	bhi.n	800e688 <_strtod_l+0xb0>
 800e612:	2b0d      	cmp	r3, #13
 800e614:	d833      	bhi.n	800e67e <_strtod_l+0xa6>
 800e616:	2b08      	cmp	r3, #8
 800e618:	d833      	bhi.n	800e682 <_strtod_l+0xaa>
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d03d      	beq.n	800e69a <_strtod_l+0xc2>
 800e61e:	2300      	movs	r3, #0
 800e620:	9308      	str	r3, [sp, #32]
 800e622:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e624:	7833      	ldrb	r3, [r6, #0]
 800e626:	2b30      	cmp	r3, #48	; 0x30
 800e628:	f040 80b0 	bne.w	800e78c <_strtod_l+0x1b4>
 800e62c:	7873      	ldrb	r3, [r6, #1]
 800e62e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e632:	2b58      	cmp	r3, #88	; 0x58
 800e634:	d167      	bne.n	800e706 <_strtod_l+0x12e>
 800e636:	9b08      	ldr	r3, [sp, #32]
 800e638:	9301      	str	r3, [sp, #4]
 800e63a:	ab12      	add	r3, sp, #72	; 0x48
 800e63c:	9702      	str	r7, [sp, #8]
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	4a8c      	ldr	r2, [pc, #560]	; (800e874 <_strtod_l+0x29c>)
 800e642:	ab13      	add	r3, sp, #76	; 0x4c
 800e644:	a911      	add	r1, sp, #68	; 0x44
 800e646:	4620      	mov	r0, r4
 800e648:	f000 fdf0 	bl	800f22c <__gethex>
 800e64c:	f010 0507 	ands.w	r5, r0, #7
 800e650:	4607      	mov	r7, r0
 800e652:	d005      	beq.n	800e660 <_strtod_l+0x88>
 800e654:	2d06      	cmp	r5, #6
 800e656:	d12b      	bne.n	800e6b0 <_strtod_l+0xd8>
 800e658:	3601      	adds	r6, #1
 800e65a:	2300      	movs	r3, #0
 800e65c:	9611      	str	r6, [sp, #68]	; 0x44
 800e65e:	9308      	str	r3, [sp, #32]
 800e660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e662:	2b00      	cmp	r3, #0
 800e664:	f040 854e 	bne.w	800f104 <_strtod_l+0xb2c>
 800e668:	9b08      	ldr	r3, [sp, #32]
 800e66a:	b1e3      	cbz	r3, 800e6a6 <_strtod_l+0xce>
 800e66c:	ec49 8b17 	vmov	d7, r8, r9
 800e670:	eeb1 0b47 	vneg.f64	d0, d7
 800e674:	b017      	add	sp, #92	; 0x5c
 800e676:	ecbd 8b0e 	vpop	{d8-d14}
 800e67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e67e:	2b20      	cmp	r3, #32
 800e680:	d1cd      	bne.n	800e61e <_strtod_l+0x46>
 800e682:	3201      	adds	r2, #1
 800e684:	9211      	str	r2, [sp, #68]	; 0x44
 800e686:	e7bf      	b.n	800e608 <_strtod_l+0x30>
 800e688:	2b2d      	cmp	r3, #45	; 0x2d
 800e68a:	d1c8      	bne.n	800e61e <_strtod_l+0x46>
 800e68c:	2301      	movs	r3, #1
 800e68e:	9308      	str	r3, [sp, #32]
 800e690:	1c53      	adds	r3, r2, #1
 800e692:	9311      	str	r3, [sp, #68]	; 0x44
 800e694:	7853      	ldrb	r3, [r2, #1]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1c3      	bne.n	800e622 <_strtod_l+0x4a>
 800e69a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e69c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f040 852d 	bne.w	800f100 <_strtod_l+0xb28>
 800e6a6:	ec49 8b10 	vmov	d0, r8, r9
 800e6aa:	e7e3      	b.n	800e674 <_strtod_l+0x9c>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	e7ee      	b.n	800e68e <_strtod_l+0xb6>
 800e6b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e6b2:	b13a      	cbz	r2, 800e6c4 <_strtod_l+0xec>
 800e6b4:	2135      	movs	r1, #53	; 0x35
 800e6b6:	a814      	add	r0, sp, #80	; 0x50
 800e6b8:	f001 fd5a 	bl	8010170 <__copybits>
 800e6bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f001 f91c 	bl	800f8fc <_Bfree>
 800e6c4:	3d01      	subs	r5, #1
 800e6c6:	2d04      	cmp	r5, #4
 800e6c8:	d806      	bhi.n	800e6d8 <_strtod_l+0x100>
 800e6ca:	e8df f005 	tbb	[pc, r5]
 800e6ce:	030a      	.short	0x030a
 800e6d0:	1714      	.short	0x1714
 800e6d2:	0a          	.byte	0x0a
 800e6d3:	00          	.byte	0x00
 800e6d4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800e6d8:	073f      	lsls	r7, r7, #28
 800e6da:	d5c1      	bpl.n	800e660 <_strtod_l+0x88>
 800e6dc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e6e0:	e7be      	b.n	800e660 <_strtod_l+0x88>
 800e6e2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800e6e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e6e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e6ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e6f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e6f4:	e7f0      	b.n	800e6d8 <_strtod_l+0x100>
 800e6f6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800e878 <_strtod_l+0x2a0>
 800e6fa:	e7ed      	b.n	800e6d8 <_strtod_l+0x100>
 800e6fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e700:	f04f 38ff 	mov.w	r8, #4294967295
 800e704:	e7e8      	b.n	800e6d8 <_strtod_l+0x100>
 800e706:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e708:	1c5a      	adds	r2, r3, #1
 800e70a:	9211      	str	r2, [sp, #68]	; 0x44
 800e70c:	785b      	ldrb	r3, [r3, #1]
 800e70e:	2b30      	cmp	r3, #48	; 0x30
 800e710:	d0f9      	beq.n	800e706 <_strtod_l+0x12e>
 800e712:	2b00      	cmp	r3, #0
 800e714:	d0a4      	beq.n	800e660 <_strtod_l+0x88>
 800e716:	2301      	movs	r3, #1
 800e718:	f04f 0a00 	mov.w	sl, #0
 800e71c:	9304      	str	r3, [sp, #16]
 800e71e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e720:	930a      	str	r3, [sp, #40]	; 0x28
 800e722:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e726:	f8cd a018 	str.w	sl, [sp, #24]
 800e72a:	220a      	movs	r2, #10
 800e72c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e72e:	7807      	ldrb	r7, [r0, #0]
 800e730:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e734:	b2d9      	uxtb	r1, r3
 800e736:	2909      	cmp	r1, #9
 800e738:	d92a      	bls.n	800e790 <_strtod_l+0x1b8>
 800e73a:	9907      	ldr	r1, [sp, #28]
 800e73c:	462a      	mov	r2, r5
 800e73e:	f001 fe1f 	bl	8010380 <strncmp>
 800e742:	2800      	cmp	r0, #0
 800e744:	d033      	beq.n	800e7ae <_strtod_l+0x1d6>
 800e746:	2000      	movs	r0, #0
 800e748:	9b06      	ldr	r3, [sp, #24]
 800e74a:	463a      	mov	r2, r7
 800e74c:	4601      	mov	r1, r0
 800e74e:	4607      	mov	r7, r0
 800e750:	2a65      	cmp	r2, #101	; 0x65
 800e752:	d001      	beq.n	800e758 <_strtod_l+0x180>
 800e754:	2a45      	cmp	r2, #69	; 0x45
 800e756:	d117      	bne.n	800e788 <_strtod_l+0x1b0>
 800e758:	b91b      	cbnz	r3, 800e762 <_strtod_l+0x18a>
 800e75a:	9b04      	ldr	r3, [sp, #16]
 800e75c:	4303      	orrs	r3, r0
 800e75e:	d09c      	beq.n	800e69a <_strtod_l+0xc2>
 800e760:	2300      	movs	r3, #0
 800e762:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800e766:	f10b 0201 	add.w	r2, fp, #1
 800e76a:	9211      	str	r2, [sp, #68]	; 0x44
 800e76c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800e770:	2a2b      	cmp	r2, #43	; 0x2b
 800e772:	d071      	beq.n	800e858 <_strtod_l+0x280>
 800e774:	2a2d      	cmp	r2, #45	; 0x2d
 800e776:	d077      	beq.n	800e868 <_strtod_l+0x290>
 800e778:	f04f 0e00 	mov.w	lr, #0
 800e77c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e780:	2d09      	cmp	r5, #9
 800e782:	d97f      	bls.n	800e884 <_strtod_l+0x2ac>
 800e784:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e788:	2500      	movs	r5, #0
 800e78a:	e09b      	b.n	800e8c4 <_strtod_l+0x2ec>
 800e78c:	2300      	movs	r3, #0
 800e78e:	e7c3      	b.n	800e718 <_strtod_l+0x140>
 800e790:	9906      	ldr	r1, [sp, #24]
 800e792:	2908      	cmp	r1, #8
 800e794:	bfdd      	ittte	le
 800e796:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e798:	fb02 3301 	mlale	r3, r2, r1, r3
 800e79c:	9309      	strle	r3, [sp, #36]	; 0x24
 800e79e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e7a2:	9b06      	ldr	r3, [sp, #24]
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	9306      	str	r3, [sp, #24]
 800e7aa:	9011      	str	r0, [sp, #68]	; 0x44
 800e7ac:	e7be      	b.n	800e72c <_strtod_l+0x154>
 800e7ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7b0:	195a      	adds	r2, r3, r5
 800e7b2:	9211      	str	r2, [sp, #68]	; 0x44
 800e7b4:	5d5a      	ldrb	r2, [r3, r5]
 800e7b6:	9b06      	ldr	r3, [sp, #24]
 800e7b8:	b3a3      	cbz	r3, 800e824 <_strtod_l+0x24c>
 800e7ba:	4607      	mov	r7, r0
 800e7bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e7c0:	2909      	cmp	r1, #9
 800e7c2:	d912      	bls.n	800e7ea <_strtod_l+0x212>
 800e7c4:	2101      	movs	r1, #1
 800e7c6:	e7c3      	b.n	800e750 <_strtod_l+0x178>
 800e7c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	9211      	str	r2, [sp, #68]	; 0x44
 800e7ce:	785a      	ldrb	r2, [r3, #1]
 800e7d0:	3001      	adds	r0, #1
 800e7d2:	2a30      	cmp	r2, #48	; 0x30
 800e7d4:	d0f8      	beq.n	800e7c8 <_strtod_l+0x1f0>
 800e7d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e7da:	2b08      	cmp	r3, #8
 800e7dc:	f200 8497 	bhi.w	800f10e <_strtod_l+0xb36>
 800e7e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7e2:	930a      	str	r3, [sp, #40]	; 0x28
 800e7e4:	4607      	mov	r7, r0
 800e7e6:	2000      	movs	r0, #0
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	3a30      	subs	r2, #48	; 0x30
 800e7ec:	f100 0101 	add.w	r1, r0, #1
 800e7f0:	d012      	beq.n	800e818 <_strtod_l+0x240>
 800e7f2:	440f      	add	r7, r1
 800e7f4:	eb00 0c03 	add.w	ip, r0, r3
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	250a      	movs	r5, #10
 800e7fc:	4561      	cmp	r1, ip
 800e7fe:	d113      	bne.n	800e828 <_strtod_l+0x250>
 800e800:	1819      	adds	r1, r3, r0
 800e802:	2908      	cmp	r1, #8
 800e804:	f103 0301 	add.w	r3, r3, #1
 800e808:	4403      	add	r3, r0
 800e80a:	dc1c      	bgt.n	800e846 <_strtod_l+0x26e>
 800e80c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e80e:	210a      	movs	r1, #10
 800e810:	fb01 2200 	mla	r2, r1, r0, r2
 800e814:	9209      	str	r2, [sp, #36]	; 0x24
 800e816:	2100      	movs	r1, #0
 800e818:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e81a:	1c50      	adds	r0, r2, #1
 800e81c:	9011      	str	r0, [sp, #68]	; 0x44
 800e81e:	7852      	ldrb	r2, [r2, #1]
 800e820:	4608      	mov	r0, r1
 800e822:	e7cb      	b.n	800e7bc <_strtod_l+0x1e4>
 800e824:	9806      	ldr	r0, [sp, #24]
 800e826:	e7d4      	b.n	800e7d2 <_strtod_l+0x1fa>
 800e828:	2908      	cmp	r1, #8
 800e82a:	dc04      	bgt.n	800e836 <_strtod_l+0x25e>
 800e82c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e82e:	436e      	muls	r6, r5
 800e830:	9609      	str	r6, [sp, #36]	; 0x24
 800e832:	3101      	adds	r1, #1
 800e834:	e7e2      	b.n	800e7fc <_strtod_l+0x224>
 800e836:	f101 0e01 	add.w	lr, r1, #1
 800e83a:	f1be 0f10 	cmp.w	lr, #16
 800e83e:	bfd8      	it	le
 800e840:	fb05 fa0a 	mulle.w	sl, r5, sl
 800e844:	e7f5      	b.n	800e832 <_strtod_l+0x25a>
 800e846:	2b10      	cmp	r3, #16
 800e848:	bfdc      	itt	le
 800e84a:	210a      	movle	r1, #10
 800e84c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800e850:	e7e1      	b.n	800e816 <_strtod_l+0x23e>
 800e852:	2700      	movs	r7, #0
 800e854:	2101      	movs	r1, #1
 800e856:	e780      	b.n	800e75a <_strtod_l+0x182>
 800e858:	f04f 0e00 	mov.w	lr, #0
 800e85c:	f10b 0202 	add.w	r2, fp, #2
 800e860:	9211      	str	r2, [sp, #68]	; 0x44
 800e862:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800e866:	e789      	b.n	800e77c <_strtod_l+0x1a4>
 800e868:	f04f 0e01 	mov.w	lr, #1
 800e86c:	e7f6      	b.n	800e85c <_strtod_l+0x284>
 800e86e:	bf00      	nop
 800e870:	08011cb0 	.word	0x08011cb0
 800e874:	08011be8 	.word	0x08011be8
 800e878:	7ff00000 	.word	0x7ff00000
 800e87c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e87e:	1c55      	adds	r5, r2, #1
 800e880:	9511      	str	r5, [sp, #68]	; 0x44
 800e882:	7852      	ldrb	r2, [r2, #1]
 800e884:	2a30      	cmp	r2, #48	; 0x30
 800e886:	d0f9      	beq.n	800e87c <_strtod_l+0x2a4>
 800e888:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800e88c:	2d08      	cmp	r5, #8
 800e88e:	f63f af7b 	bhi.w	800e788 <_strtod_l+0x1b0>
 800e892:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e896:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e898:	9207      	str	r2, [sp, #28]
 800e89a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e89c:	1c55      	adds	r5, r2, #1
 800e89e:	9511      	str	r5, [sp, #68]	; 0x44
 800e8a0:	7852      	ldrb	r2, [r2, #1]
 800e8a2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e8a6:	2e09      	cmp	r6, #9
 800e8a8:	d937      	bls.n	800e91a <_strtod_l+0x342>
 800e8aa:	9e07      	ldr	r6, [sp, #28]
 800e8ac:	1bad      	subs	r5, r5, r6
 800e8ae:	2d08      	cmp	r5, #8
 800e8b0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e8b4:	dc02      	bgt.n	800e8bc <_strtod_l+0x2e4>
 800e8b6:	4565      	cmp	r5, ip
 800e8b8:	bfa8      	it	ge
 800e8ba:	4665      	movge	r5, ip
 800e8bc:	f1be 0f00 	cmp.w	lr, #0
 800e8c0:	d000      	beq.n	800e8c4 <_strtod_l+0x2ec>
 800e8c2:	426d      	negs	r5, r5
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d14d      	bne.n	800e964 <_strtod_l+0x38c>
 800e8c8:	9b04      	ldr	r3, [sp, #16]
 800e8ca:	4303      	orrs	r3, r0
 800e8cc:	f47f aec8 	bne.w	800e660 <_strtod_l+0x88>
 800e8d0:	2900      	cmp	r1, #0
 800e8d2:	f47f aee2 	bne.w	800e69a <_strtod_l+0xc2>
 800e8d6:	2a69      	cmp	r2, #105	; 0x69
 800e8d8:	d027      	beq.n	800e92a <_strtod_l+0x352>
 800e8da:	dc24      	bgt.n	800e926 <_strtod_l+0x34e>
 800e8dc:	2a49      	cmp	r2, #73	; 0x49
 800e8de:	d024      	beq.n	800e92a <_strtod_l+0x352>
 800e8e0:	2a4e      	cmp	r2, #78	; 0x4e
 800e8e2:	f47f aeda 	bne.w	800e69a <_strtod_l+0xc2>
 800e8e6:	4996      	ldr	r1, [pc, #600]	; (800eb40 <_strtod_l+0x568>)
 800e8e8:	a811      	add	r0, sp, #68	; 0x44
 800e8ea:	f000 fef7 	bl	800f6dc <__match>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	f43f aed3 	beq.w	800e69a <_strtod_l+0xc2>
 800e8f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	2b28      	cmp	r3, #40	; 0x28
 800e8fa:	d12d      	bne.n	800e958 <_strtod_l+0x380>
 800e8fc:	4991      	ldr	r1, [pc, #580]	; (800eb44 <_strtod_l+0x56c>)
 800e8fe:	aa14      	add	r2, sp, #80	; 0x50
 800e900:	a811      	add	r0, sp, #68	; 0x44
 800e902:	f000 feff 	bl	800f704 <__hexnan>
 800e906:	2805      	cmp	r0, #5
 800e908:	d126      	bne.n	800e958 <_strtod_l+0x380>
 800e90a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e90c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e910:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e914:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e918:	e6a2      	b.n	800e660 <_strtod_l+0x88>
 800e91a:	250a      	movs	r5, #10
 800e91c:	fb05 250c 	mla	r5, r5, ip, r2
 800e920:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800e924:	e7b9      	b.n	800e89a <_strtod_l+0x2c2>
 800e926:	2a6e      	cmp	r2, #110	; 0x6e
 800e928:	e7db      	b.n	800e8e2 <_strtod_l+0x30a>
 800e92a:	4987      	ldr	r1, [pc, #540]	; (800eb48 <_strtod_l+0x570>)
 800e92c:	a811      	add	r0, sp, #68	; 0x44
 800e92e:	f000 fed5 	bl	800f6dc <__match>
 800e932:	2800      	cmp	r0, #0
 800e934:	f43f aeb1 	beq.w	800e69a <_strtod_l+0xc2>
 800e938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e93a:	4984      	ldr	r1, [pc, #528]	; (800eb4c <_strtod_l+0x574>)
 800e93c:	3b01      	subs	r3, #1
 800e93e:	a811      	add	r0, sp, #68	; 0x44
 800e940:	9311      	str	r3, [sp, #68]	; 0x44
 800e942:	f000 fecb 	bl	800f6dc <__match>
 800e946:	b910      	cbnz	r0, 800e94e <_strtod_l+0x376>
 800e948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e94a:	3301      	adds	r3, #1
 800e94c:	9311      	str	r3, [sp, #68]	; 0x44
 800e94e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800eb60 <_strtod_l+0x588>
 800e952:	f04f 0800 	mov.w	r8, #0
 800e956:	e683      	b.n	800e660 <_strtod_l+0x88>
 800e958:	487d      	ldr	r0, [pc, #500]	; (800eb50 <_strtod_l+0x578>)
 800e95a:	f001 fcf9 	bl	8010350 <nan>
 800e95e:	ec59 8b10 	vmov	r8, r9, d0
 800e962:	e67d      	b.n	800e660 <_strtod_l+0x88>
 800e964:	1bea      	subs	r2, r5, r7
 800e966:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800e96a:	9207      	str	r2, [sp, #28]
 800e96c:	9a06      	ldr	r2, [sp, #24]
 800e96e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e972:	2a00      	cmp	r2, #0
 800e974:	bf08      	it	eq
 800e976:	461a      	moveq	r2, r3
 800e978:	2b10      	cmp	r3, #16
 800e97a:	9206      	str	r2, [sp, #24]
 800e97c:	461a      	mov	r2, r3
 800e97e:	bfa8      	it	ge
 800e980:	2210      	movge	r2, #16
 800e982:	2b09      	cmp	r3, #9
 800e984:	ec59 8b17 	vmov	r8, r9, d7
 800e988:	dd0c      	ble.n	800e9a4 <_strtod_l+0x3cc>
 800e98a:	4972      	ldr	r1, [pc, #456]	; (800eb54 <_strtod_l+0x57c>)
 800e98c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e990:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800e994:	ee06 aa90 	vmov	s13, sl
 800e998:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e99c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e9a0:	ec59 8b16 	vmov	r8, r9, d6
 800e9a4:	2b0f      	cmp	r3, #15
 800e9a6:	dc36      	bgt.n	800ea16 <_strtod_l+0x43e>
 800e9a8:	9907      	ldr	r1, [sp, #28]
 800e9aa:	2900      	cmp	r1, #0
 800e9ac:	f43f ae58 	beq.w	800e660 <_strtod_l+0x88>
 800e9b0:	dd23      	ble.n	800e9fa <_strtod_l+0x422>
 800e9b2:	2916      	cmp	r1, #22
 800e9b4:	dc0b      	bgt.n	800e9ce <_strtod_l+0x3f6>
 800e9b6:	4b67      	ldr	r3, [pc, #412]	; (800eb54 <_strtod_l+0x57c>)
 800e9b8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e9bc:	ed93 7b00 	vldr	d7, [r3]
 800e9c0:	ec49 8b16 	vmov	d6, r8, r9
 800e9c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9c8:	ec59 8b17 	vmov	r8, r9, d7
 800e9cc:	e648      	b.n	800e660 <_strtod_l+0x88>
 800e9ce:	9807      	ldr	r0, [sp, #28]
 800e9d0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800e9d4:	4281      	cmp	r1, r0
 800e9d6:	db1e      	blt.n	800ea16 <_strtod_l+0x43e>
 800e9d8:	4a5e      	ldr	r2, [pc, #376]	; (800eb54 <_strtod_l+0x57c>)
 800e9da:	f1c3 030f 	rsb	r3, r3, #15
 800e9de:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e9e2:	ed91 7b00 	vldr	d7, [r1]
 800e9e6:	ec49 8b16 	vmov	d6, r8, r9
 800e9ea:	1ac3      	subs	r3, r0, r3
 800e9ec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e9f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9f4:	ed92 6b00 	vldr	d6, [r2]
 800e9f8:	e7e4      	b.n	800e9c4 <_strtod_l+0x3ec>
 800e9fa:	9907      	ldr	r1, [sp, #28]
 800e9fc:	3116      	adds	r1, #22
 800e9fe:	db0a      	blt.n	800ea16 <_strtod_l+0x43e>
 800ea00:	4b54      	ldr	r3, [pc, #336]	; (800eb54 <_strtod_l+0x57c>)
 800ea02:	1b7d      	subs	r5, r7, r5
 800ea04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ea08:	ed95 7b00 	vldr	d7, [r5]
 800ea0c:	ec49 8b16 	vmov	d6, r8, r9
 800ea10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ea14:	e7d8      	b.n	800e9c8 <_strtod_l+0x3f0>
 800ea16:	9907      	ldr	r1, [sp, #28]
 800ea18:	1a9a      	subs	r2, r3, r2
 800ea1a:	440a      	add	r2, r1
 800ea1c:	2a00      	cmp	r2, #0
 800ea1e:	dd6f      	ble.n	800eb00 <_strtod_l+0x528>
 800ea20:	f012 000f 	ands.w	r0, r2, #15
 800ea24:	d00a      	beq.n	800ea3c <_strtod_l+0x464>
 800ea26:	494b      	ldr	r1, [pc, #300]	; (800eb54 <_strtod_l+0x57c>)
 800ea28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ea2c:	ed91 7b00 	vldr	d7, [r1]
 800ea30:	ec49 8b16 	vmov	d6, r8, r9
 800ea34:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea38:	ec59 8b17 	vmov	r8, r9, d7
 800ea3c:	f032 020f 	bics.w	r2, r2, #15
 800ea40:	d04f      	beq.n	800eae2 <_strtod_l+0x50a>
 800ea42:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800ea46:	dd22      	ble.n	800ea8e <_strtod_l+0x4b6>
 800ea48:	2500      	movs	r5, #0
 800ea4a:	462e      	mov	r6, r5
 800ea4c:	9506      	str	r5, [sp, #24]
 800ea4e:	462f      	mov	r7, r5
 800ea50:	2322      	movs	r3, #34	; 0x22
 800ea52:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800eb60 <_strtod_l+0x588>
 800ea56:	6023      	str	r3, [r4, #0]
 800ea58:	f04f 0800 	mov.w	r8, #0
 800ea5c:	9b06      	ldr	r3, [sp, #24]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	f43f adfe 	beq.w	800e660 <_strtod_l+0x88>
 800ea64:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ea66:	4620      	mov	r0, r4
 800ea68:	f000 ff48 	bl	800f8fc <_Bfree>
 800ea6c:	4639      	mov	r1, r7
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f000 ff44 	bl	800f8fc <_Bfree>
 800ea74:	4631      	mov	r1, r6
 800ea76:	4620      	mov	r0, r4
 800ea78:	f000 ff40 	bl	800f8fc <_Bfree>
 800ea7c:	9906      	ldr	r1, [sp, #24]
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f000 ff3c 	bl	800f8fc <_Bfree>
 800ea84:	4629      	mov	r1, r5
 800ea86:	4620      	mov	r0, r4
 800ea88:	f000 ff38 	bl	800f8fc <_Bfree>
 800ea8c:	e5e8      	b.n	800e660 <_strtod_l+0x88>
 800ea8e:	2000      	movs	r0, #0
 800ea90:	ec49 8b17 	vmov	d7, r8, r9
 800ea94:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800eb58 <_strtod_l+0x580>
 800ea98:	1112      	asrs	r2, r2, #4
 800ea9a:	4601      	mov	r1, r0
 800ea9c:	2a01      	cmp	r2, #1
 800ea9e:	dc23      	bgt.n	800eae8 <_strtod_l+0x510>
 800eaa0:	b108      	cbz	r0, 800eaa6 <_strtod_l+0x4ce>
 800eaa2:	ec59 8b17 	vmov	r8, r9, d7
 800eaa6:	4a2c      	ldr	r2, [pc, #176]	; (800eb58 <_strtod_l+0x580>)
 800eaa8:	482c      	ldr	r0, [pc, #176]	; (800eb5c <_strtod_l+0x584>)
 800eaaa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800eaae:	ed92 7b00 	vldr	d7, [r2]
 800eab2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800eab6:	ec49 8b16 	vmov	d6, r8, r9
 800eaba:	4a29      	ldr	r2, [pc, #164]	; (800eb60 <_strtod_l+0x588>)
 800eabc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eac0:	ee17 1a90 	vmov	r1, s15
 800eac4:	400a      	ands	r2, r1
 800eac6:	4282      	cmp	r2, r0
 800eac8:	ec59 8b17 	vmov	r8, r9, d7
 800eacc:	d8bc      	bhi.n	800ea48 <_strtod_l+0x470>
 800eace:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800ead2:	4282      	cmp	r2, r0
 800ead4:	bf86      	itte	hi
 800ead6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800eb64 <_strtod_l+0x58c>
 800eada:	f04f 38ff 	movhi.w	r8, #4294967295
 800eade:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800eae2:	2200      	movs	r2, #0
 800eae4:	9204      	str	r2, [sp, #16]
 800eae6:	e078      	b.n	800ebda <_strtod_l+0x602>
 800eae8:	07d6      	lsls	r6, r2, #31
 800eaea:	d504      	bpl.n	800eaf6 <_strtod_l+0x51e>
 800eaec:	ed9c 6b00 	vldr	d6, [ip]
 800eaf0:	2001      	movs	r0, #1
 800eaf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eaf6:	3101      	adds	r1, #1
 800eaf8:	1052      	asrs	r2, r2, #1
 800eafa:	f10c 0c08 	add.w	ip, ip, #8
 800eafe:	e7cd      	b.n	800ea9c <_strtod_l+0x4c4>
 800eb00:	d0ef      	beq.n	800eae2 <_strtod_l+0x50a>
 800eb02:	4252      	negs	r2, r2
 800eb04:	f012 000f 	ands.w	r0, r2, #15
 800eb08:	d00a      	beq.n	800eb20 <_strtod_l+0x548>
 800eb0a:	4912      	ldr	r1, [pc, #72]	; (800eb54 <_strtod_l+0x57c>)
 800eb0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800eb10:	ed91 7b00 	vldr	d7, [r1]
 800eb14:	ec49 8b16 	vmov	d6, r8, r9
 800eb18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800eb1c:	ec59 8b17 	vmov	r8, r9, d7
 800eb20:	1112      	asrs	r2, r2, #4
 800eb22:	d0de      	beq.n	800eae2 <_strtod_l+0x50a>
 800eb24:	2a1f      	cmp	r2, #31
 800eb26:	dd1f      	ble.n	800eb68 <_strtod_l+0x590>
 800eb28:	2500      	movs	r5, #0
 800eb2a:	462e      	mov	r6, r5
 800eb2c:	9506      	str	r5, [sp, #24]
 800eb2e:	462f      	mov	r7, r5
 800eb30:	2322      	movs	r3, #34	; 0x22
 800eb32:	f04f 0800 	mov.w	r8, #0
 800eb36:	f04f 0900 	mov.w	r9, #0
 800eb3a:	6023      	str	r3, [r4, #0]
 800eb3c:	e78e      	b.n	800ea5c <_strtod_l+0x484>
 800eb3e:	bf00      	nop
 800eb40:	08011be5 	.word	0x08011be5
 800eb44:	08011bfc 	.word	0x08011bfc
 800eb48:	08011bdc 	.word	0x08011bdc
 800eb4c:	08011bdf 	.word	0x08011bdf
 800eb50:	08011e6f 	.word	0x08011e6f
 800eb54:	08011d60 	.word	0x08011d60
 800eb58:	08011d38 	.word	0x08011d38
 800eb5c:	7ca00000 	.word	0x7ca00000
 800eb60:	7ff00000 	.word	0x7ff00000
 800eb64:	7fefffff 	.word	0x7fefffff
 800eb68:	f012 0110 	ands.w	r1, r2, #16
 800eb6c:	bf18      	it	ne
 800eb6e:	216a      	movne	r1, #106	; 0x6a
 800eb70:	9104      	str	r1, [sp, #16]
 800eb72:	ec49 8b17 	vmov	d7, r8, r9
 800eb76:	49be      	ldr	r1, [pc, #760]	; (800ee70 <_strtod_l+0x898>)
 800eb78:	2000      	movs	r0, #0
 800eb7a:	07d6      	lsls	r6, r2, #31
 800eb7c:	d504      	bpl.n	800eb88 <_strtod_l+0x5b0>
 800eb7e:	ed91 6b00 	vldr	d6, [r1]
 800eb82:	2001      	movs	r0, #1
 800eb84:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb88:	1052      	asrs	r2, r2, #1
 800eb8a:	f101 0108 	add.w	r1, r1, #8
 800eb8e:	d1f4      	bne.n	800eb7a <_strtod_l+0x5a2>
 800eb90:	b108      	cbz	r0, 800eb96 <_strtod_l+0x5be>
 800eb92:	ec59 8b17 	vmov	r8, r9, d7
 800eb96:	9a04      	ldr	r2, [sp, #16]
 800eb98:	b1c2      	cbz	r2, 800ebcc <_strtod_l+0x5f4>
 800eb9a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800eb9e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800eba2:	2a00      	cmp	r2, #0
 800eba4:	4648      	mov	r0, r9
 800eba6:	dd11      	ble.n	800ebcc <_strtod_l+0x5f4>
 800eba8:	2a1f      	cmp	r2, #31
 800ebaa:	f340 812e 	ble.w	800ee0a <_strtod_l+0x832>
 800ebae:	2a34      	cmp	r2, #52	; 0x34
 800ebb0:	bfde      	ittt	le
 800ebb2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800ebb6:	f04f 32ff 	movle.w	r2, #4294967295
 800ebba:	fa02 f101 	lslle.w	r1, r2, r1
 800ebbe:	f04f 0800 	mov.w	r8, #0
 800ebc2:	bfcc      	ite	gt
 800ebc4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ebc8:	ea01 0900 	andle.w	r9, r1, r0
 800ebcc:	ec49 8b17 	vmov	d7, r8, r9
 800ebd0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ebd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd8:	d0a6      	beq.n	800eb28 <_strtod_l+0x550>
 800ebda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebdc:	9200      	str	r2, [sp, #0]
 800ebde:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ebe0:	9a06      	ldr	r2, [sp, #24]
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 fef2 	bl	800f9cc <__s2b>
 800ebe8:	9006      	str	r0, [sp, #24]
 800ebea:	2800      	cmp	r0, #0
 800ebec:	f43f af2c 	beq.w	800ea48 <_strtod_l+0x470>
 800ebf0:	9b07      	ldr	r3, [sp, #28]
 800ebf2:	1b7d      	subs	r5, r7, r5
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	bfb4      	ite	lt
 800ebf8:	462b      	movlt	r3, r5
 800ebfa:	2300      	movge	r3, #0
 800ebfc:	9309      	str	r3, [sp, #36]	; 0x24
 800ebfe:	9b07      	ldr	r3, [sp, #28]
 800ec00:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800ee50 <_strtod_l+0x878>
 800ec04:	ed9f ab94 	vldr	d10, [pc, #592]	; 800ee58 <_strtod_l+0x880>
 800ec08:	ed9f bb95 	vldr	d11, [pc, #596]	; 800ee60 <_strtod_l+0x888>
 800ec0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ec10:	2500      	movs	r5, #0
 800ec12:	930c      	str	r3, [sp, #48]	; 0x30
 800ec14:	462e      	mov	r6, r5
 800ec16:	9b06      	ldr	r3, [sp, #24]
 800ec18:	4620      	mov	r0, r4
 800ec1a:	6859      	ldr	r1, [r3, #4]
 800ec1c:	f000 fe2e 	bl	800f87c <_Balloc>
 800ec20:	4607      	mov	r7, r0
 800ec22:	2800      	cmp	r0, #0
 800ec24:	f43f af14 	beq.w	800ea50 <_strtod_l+0x478>
 800ec28:	9b06      	ldr	r3, [sp, #24]
 800ec2a:	691a      	ldr	r2, [r3, #16]
 800ec2c:	3202      	adds	r2, #2
 800ec2e:	f103 010c 	add.w	r1, r3, #12
 800ec32:	0092      	lsls	r2, r2, #2
 800ec34:	300c      	adds	r0, #12
 800ec36:	f000 fe13 	bl	800f860 <memcpy>
 800ec3a:	ec49 8b10 	vmov	d0, r8, r9
 800ec3e:	aa14      	add	r2, sp, #80	; 0x50
 800ec40:	a913      	add	r1, sp, #76	; 0x4c
 800ec42:	4620      	mov	r0, r4
 800ec44:	f001 fa08 	bl	8010058 <__d2b>
 800ec48:	ec49 8b18 	vmov	d8, r8, r9
 800ec4c:	9012      	str	r0, [sp, #72]	; 0x48
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	f43f aefe 	beq.w	800ea50 <_strtod_l+0x478>
 800ec54:	2101      	movs	r1, #1
 800ec56:	4620      	mov	r0, r4
 800ec58:	f000 ff52 	bl	800fb00 <__i2b>
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	f43f aef6 	beq.w	800ea50 <_strtod_l+0x478>
 800ec64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec66:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	bfab      	itete	ge
 800ec6c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800ec6e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800ec70:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800ec74:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ec78:	bfac      	ite	ge
 800ec7a:	eb03 0b02 	addge.w	fp, r3, r2
 800ec7e:	eba2 0a03 	sublt.w	sl, r2, r3
 800ec82:	9a04      	ldr	r2, [sp, #16]
 800ec84:	1a9b      	subs	r3, r3, r2
 800ec86:	440b      	add	r3, r1
 800ec88:	4a7a      	ldr	r2, [pc, #488]	; (800ee74 <_strtod_l+0x89c>)
 800ec8a:	3b01      	subs	r3, #1
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ec92:	f280 80cd 	bge.w	800ee30 <_strtod_l+0x858>
 800ec96:	1ad2      	subs	r2, r2, r3
 800ec98:	2a1f      	cmp	r2, #31
 800ec9a:	eba1 0102 	sub.w	r1, r1, r2
 800ec9e:	f04f 0001 	mov.w	r0, #1
 800eca2:	f300 80b9 	bgt.w	800ee18 <_strtod_l+0x840>
 800eca6:	fa00 f302 	lsl.w	r3, r0, r2
 800ecaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecac:	2300      	movs	r3, #0
 800ecae:	930a      	str	r3, [sp, #40]	; 0x28
 800ecb0:	eb0b 0301 	add.w	r3, fp, r1
 800ecb4:	9a04      	ldr	r2, [sp, #16]
 800ecb6:	459b      	cmp	fp, r3
 800ecb8:	448a      	add	sl, r1
 800ecba:	4492      	add	sl, r2
 800ecbc:	465a      	mov	r2, fp
 800ecbe:	bfa8      	it	ge
 800ecc0:	461a      	movge	r2, r3
 800ecc2:	4552      	cmp	r2, sl
 800ecc4:	bfa8      	it	ge
 800ecc6:	4652      	movge	r2, sl
 800ecc8:	2a00      	cmp	r2, #0
 800ecca:	bfc2      	ittt	gt
 800eccc:	1a9b      	subgt	r3, r3, r2
 800ecce:	ebaa 0a02 	subgt.w	sl, sl, r2
 800ecd2:	ebab 0b02 	subgt.w	fp, fp, r2
 800ecd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecd8:	2a00      	cmp	r2, #0
 800ecda:	dd18      	ble.n	800ed0e <_strtod_l+0x736>
 800ecdc:	4631      	mov	r1, r6
 800ecde:	4620      	mov	r0, r4
 800ece0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ece2:	f000 ffcd 	bl	800fc80 <__pow5mult>
 800ece6:	4606      	mov	r6, r0
 800ece8:	2800      	cmp	r0, #0
 800ecea:	f43f aeb1 	beq.w	800ea50 <_strtod_l+0x478>
 800ecee:	4601      	mov	r1, r0
 800ecf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	f000 ff1a 	bl	800fb2c <__multiply>
 800ecf8:	900e      	str	r0, [sp, #56]	; 0x38
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	f43f aea8 	beq.w	800ea50 <_strtod_l+0x478>
 800ed00:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 fdfa 	bl	800f8fc <_Bfree>
 800ed08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed0c:	9212      	str	r2, [sp, #72]	; 0x48
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f300 8093 	bgt.w	800ee3a <_strtod_l+0x862>
 800ed14:	9b07      	ldr	r3, [sp, #28]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	dd08      	ble.n	800ed2c <_strtod_l+0x754>
 800ed1a:	4639      	mov	r1, r7
 800ed1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f000 ffae 	bl	800fc80 <__pow5mult>
 800ed24:	4607      	mov	r7, r0
 800ed26:	2800      	cmp	r0, #0
 800ed28:	f43f ae92 	beq.w	800ea50 <_strtod_l+0x478>
 800ed2c:	f1ba 0f00 	cmp.w	sl, #0
 800ed30:	dd08      	ble.n	800ed44 <_strtod_l+0x76c>
 800ed32:	4639      	mov	r1, r7
 800ed34:	4652      	mov	r2, sl
 800ed36:	4620      	mov	r0, r4
 800ed38:	f000 fffc 	bl	800fd34 <__lshift>
 800ed3c:	4607      	mov	r7, r0
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	f43f ae86 	beq.w	800ea50 <_strtod_l+0x478>
 800ed44:	f1bb 0f00 	cmp.w	fp, #0
 800ed48:	dd08      	ble.n	800ed5c <_strtod_l+0x784>
 800ed4a:	4631      	mov	r1, r6
 800ed4c:	465a      	mov	r2, fp
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 fff0 	bl	800fd34 <__lshift>
 800ed54:	4606      	mov	r6, r0
 800ed56:	2800      	cmp	r0, #0
 800ed58:	f43f ae7a 	beq.w	800ea50 <_strtod_l+0x478>
 800ed5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ed5e:	463a      	mov	r2, r7
 800ed60:	4620      	mov	r0, r4
 800ed62:	f001 f873 	bl	800fe4c <__mdiff>
 800ed66:	4605      	mov	r5, r0
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	f43f ae71 	beq.w	800ea50 <_strtod_l+0x478>
 800ed6e:	2300      	movs	r3, #0
 800ed70:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800ed74:	60c3      	str	r3, [r0, #12]
 800ed76:	4631      	mov	r1, r6
 800ed78:	f001 f84c 	bl	800fe14 <__mcmp>
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	da7d      	bge.n	800ee7c <_strtod_l+0x8a4>
 800ed80:	ea5a 0308 	orrs.w	r3, sl, r8
 800ed84:	f040 80a3 	bne.w	800eece <_strtod_l+0x8f6>
 800ed88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	f040 809e 	bne.w	800eece <_strtod_l+0x8f6>
 800ed92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ed96:	0d1b      	lsrs	r3, r3, #20
 800ed98:	051b      	lsls	r3, r3, #20
 800ed9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ed9e:	f240 8096 	bls.w	800eece <_strtod_l+0x8f6>
 800eda2:	696b      	ldr	r3, [r5, #20]
 800eda4:	b91b      	cbnz	r3, 800edae <_strtod_l+0x7d6>
 800eda6:	692b      	ldr	r3, [r5, #16]
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	f340 8090 	ble.w	800eece <_strtod_l+0x8f6>
 800edae:	4629      	mov	r1, r5
 800edb0:	2201      	movs	r2, #1
 800edb2:	4620      	mov	r0, r4
 800edb4:	f000 ffbe 	bl	800fd34 <__lshift>
 800edb8:	4631      	mov	r1, r6
 800edba:	4605      	mov	r5, r0
 800edbc:	f001 f82a 	bl	800fe14 <__mcmp>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	f340 8084 	ble.w	800eece <_strtod_l+0x8f6>
 800edc6:	9904      	ldr	r1, [sp, #16]
 800edc8:	4a2b      	ldr	r2, [pc, #172]	; (800ee78 <_strtod_l+0x8a0>)
 800edca:	464b      	mov	r3, r9
 800edcc:	2900      	cmp	r1, #0
 800edce:	f000 809d 	beq.w	800ef0c <_strtod_l+0x934>
 800edd2:	ea02 0109 	and.w	r1, r2, r9
 800edd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800edda:	f300 8097 	bgt.w	800ef0c <_strtod_l+0x934>
 800edde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ede2:	f77f aea5 	ble.w	800eb30 <_strtod_l+0x558>
 800ede6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ee68 <_strtod_l+0x890>
 800edea:	ec49 8b16 	vmov	d6, r8, r9
 800edee:	ee26 7b07 	vmul.f64	d7, d6, d7
 800edf2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800edf6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800edfa:	4313      	orrs	r3, r2
 800edfc:	bf08      	it	eq
 800edfe:	2322      	moveq	r3, #34	; 0x22
 800ee00:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ee04:	bf08      	it	eq
 800ee06:	6023      	streq	r3, [r4, #0]
 800ee08:	e62c      	b.n	800ea64 <_strtod_l+0x48c>
 800ee0a:	f04f 31ff 	mov.w	r1, #4294967295
 800ee0e:	fa01 f202 	lsl.w	r2, r1, r2
 800ee12:	ea02 0808 	and.w	r8, r2, r8
 800ee16:	e6d9      	b.n	800ebcc <_strtod_l+0x5f4>
 800ee18:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ee1c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ee20:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ee24:	33e2      	adds	r3, #226	; 0xe2
 800ee26:	fa00 f303 	lsl.w	r3, r0, r3
 800ee2a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800ee2e:	e73f      	b.n	800ecb0 <_strtod_l+0x6d8>
 800ee30:	2200      	movs	r2, #0
 800ee32:	2301      	movs	r3, #1
 800ee34:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ee38:	e73a      	b.n	800ecb0 <_strtod_l+0x6d8>
 800ee3a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f000 ff78 	bl	800fd34 <__lshift>
 800ee44:	9012      	str	r0, [sp, #72]	; 0x48
 800ee46:	2800      	cmp	r0, #0
 800ee48:	f47f af64 	bne.w	800ed14 <_strtod_l+0x73c>
 800ee4c:	e600      	b.n	800ea50 <_strtod_l+0x478>
 800ee4e:	bf00      	nop
 800ee50:	94a03595 	.word	0x94a03595
 800ee54:	3fcfffff 	.word	0x3fcfffff
 800ee58:	94a03595 	.word	0x94a03595
 800ee5c:	3fdfffff 	.word	0x3fdfffff
 800ee60:	35afe535 	.word	0x35afe535
 800ee64:	3fe00000 	.word	0x3fe00000
 800ee68:	00000000 	.word	0x00000000
 800ee6c:	39500000 	.word	0x39500000
 800ee70:	08011c10 	.word	0x08011c10
 800ee74:	fffffc02 	.word	0xfffffc02
 800ee78:	7ff00000 	.word	0x7ff00000
 800ee7c:	46cb      	mov	fp, r9
 800ee7e:	d15f      	bne.n	800ef40 <_strtod_l+0x968>
 800ee80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee84:	f1ba 0f00 	cmp.w	sl, #0
 800ee88:	d02a      	beq.n	800eee0 <_strtod_l+0x908>
 800ee8a:	4aa7      	ldr	r2, [pc, #668]	; (800f128 <_strtod_l+0xb50>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d12b      	bne.n	800eee8 <_strtod_l+0x910>
 800ee90:	9b04      	ldr	r3, [sp, #16]
 800ee92:	4642      	mov	r2, r8
 800ee94:	b1fb      	cbz	r3, 800eed6 <_strtod_l+0x8fe>
 800ee96:	4ba5      	ldr	r3, [pc, #660]	; (800f12c <_strtod_l+0xb54>)
 800ee98:	ea09 0303 	and.w	r3, r9, r3
 800ee9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eea0:	f04f 31ff 	mov.w	r1, #4294967295
 800eea4:	d81a      	bhi.n	800eedc <_strtod_l+0x904>
 800eea6:	0d1b      	lsrs	r3, r3, #20
 800eea8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eeac:	fa01 f303 	lsl.w	r3, r1, r3
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d119      	bne.n	800eee8 <_strtod_l+0x910>
 800eeb4:	4b9e      	ldr	r3, [pc, #632]	; (800f130 <_strtod_l+0xb58>)
 800eeb6:	459b      	cmp	fp, r3
 800eeb8:	d102      	bne.n	800eec0 <_strtod_l+0x8e8>
 800eeba:	3201      	adds	r2, #1
 800eebc:	f43f adc8 	beq.w	800ea50 <_strtod_l+0x478>
 800eec0:	4b9a      	ldr	r3, [pc, #616]	; (800f12c <_strtod_l+0xb54>)
 800eec2:	ea0b 0303 	and.w	r3, fp, r3
 800eec6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800eeca:	f04f 0800 	mov.w	r8, #0
 800eece:	9b04      	ldr	r3, [sp, #16]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d188      	bne.n	800ede6 <_strtod_l+0x80e>
 800eed4:	e5c6      	b.n	800ea64 <_strtod_l+0x48c>
 800eed6:	f04f 33ff 	mov.w	r3, #4294967295
 800eeda:	e7e9      	b.n	800eeb0 <_strtod_l+0x8d8>
 800eedc:	460b      	mov	r3, r1
 800eede:	e7e7      	b.n	800eeb0 <_strtod_l+0x8d8>
 800eee0:	ea53 0308 	orrs.w	r3, r3, r8
 800eee4:	f43f af6f 	beq.w	800edc6 <_strtod_l+0x7ee>
 800eee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeea:	b1cb      	cbz	r3, 800ef20 <_strtod_l+0x948>
 800eeec:	ea13 0f0b 	tst.w	r3, fp
 800eef0:	d0ed      	beq.n	800eece <_strtod_l+0x8f6>
 800eef2:	9a04      	ldr	r2, [sp, #16]
 800eef4:	4640      	mov	r0, r8
 800eef6:	4649      	mov	r1, r9
 800eef8:	f1ba 0f00 	cmp.w	sl, #0
 800eefc:	d014      	beq.n	800ef28 <_strtod_l+0x950>
 800eefe:	f7ff fb4f 	bl	800e5a0 <sulp>
 800ef02:	ee38 7b00 	vadd.f64	d7, d8, d0
 800ef06:	ec59 8b17 	vmov	r8, r9, d7
 800ef0a:	e7e0      	b.n	800eece <_strtod_l+0x8f6>
 800ef0c:	4013      	ands	r3, r2
 800ef0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ef12:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ef16:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ef1a:	f04f 38ff 	mov.w	r8, #4294967295
 800ef1e:	e7d6      	b.n	800eece <_strtod_l+0x8f6>
 800ef20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef22:	ea13 0f08 	tst.w	r3, r8
 800ef26:	e7e3      	b.n	800eef0 <_strtod_l+0x918>
 800ef28:	f7ff fb3a 	bl	800e5a0 <sulp>
 800ef2c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800ef30:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ef34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef38:	ec59 8b10 	vmov	r8, r9, d0
 800ef3c:	d1c7      	bne.n	800eece <_strtod_l+0x8f6>
 800ef3e:	e5f7      	b.n	800eb30 <_strtod_l+0x558>
 800ef40:	4631      	mov	r1, r6
 800ef42:	4628      	mov	r0, r5
 800ef44:	f001 f8e4 	bl	8010110 <__ratio>
 800ef48:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ef4c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ef50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef54:	d865      	bhi.n	800f022 <_strtod_l+0xa4a>
 800ef56:	f1ba 0f00 	cmp.w	sl, #0
 800ef5a:	d042      	beq.n	800efe2 <_strtod_l+0xa0a>
 800ef5c:	4b75      	ldr	r3, [pc, #468]	; (800f134 <_strtod_l+0xb5c>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ef64:	4871      	ldr	r0, [pc, #452]	; (800f12c <_strtod_l+0xb54>)
 800ef66:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800f140 <_strtod_l+0xb68>
 800ef6a:	ea0b 0100 	and.w	r1, fp, r0
 800ef6e:	4561      	cmp	r1, ip
 800ef70:	f040 808e 	bne.w	800f090 <_strtod_l+0xab8>
 800ef74:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800ef78:	ec49 8b10 	vmov	d0, r8, r9
 800ef7c:	ec43 2b1c 	vmov	d12, r2, r3
 800ef80:	910a      	str	r1, [sp, #40]	; 0x28
 800ef82:	f000 ffed 	bl	800ff60 <__ulp>
 800ef86:	ec49 8b1e 	vmov	d14, r8, r9
 800ef8a:	4868      	ldr	r0, [pc, #416]	; (800f12c <_strtod_l+0xb54>)
 800ef8c:	eeac eb00 	vfma.f64	d14, d12, d0
 800ef90:	ee1e 3a90 	vmov	r3, s29
 800ef94:	4a68      	ldr	r2, [pc, #416]	; (800f138 <_strtod_l+0xb60>)
 800ef96:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ef98:	4018      	ands	r0, r3
 800ef9a:	4290      	cmp	r0, r2
 800ef9c:	ec59 8b1e 	vmov	r8, r9, d14
 800efa0:	d94e      	bls.n	800f040 <_strtod_l+0xa68>
 800efa2:	ee18 3a90 	vmov	r3, s17
 800efa6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800efaa:	4293      	cmp	r3, r2
 800efac:	d104      	bne.n	800efb8 <_strtod_l+0x9e0>
 800efae:	ee18 3a10 	vmov	r3, s16
 800efb2:	3301      	adds	r3, #1
 800efb4:	f43f ad4c 	beq.w	800ea50 <_strtod_l+0x478>
 800efb8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800f130 <_strtod_l+0xb58>
 800efbc:	f04f 38ff 	mov.w	r8, #4294967295
 800efc0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800efc2:	4620      	mov	r0, r4
 800efc4:	f000 fc9a 	bl	800f8fc <_Bfree>
 800efc8:	4639      	mov	r1, r7
 800efca:	4620      	mov	r0, r4
 800efcc:	f000 fc96 	bl	800f8fc <_Bfree>
 800efd0:	4631      	mov	r1, r6
 800efd2:	4620      	mov	r0, r4
 800efd4:	f000 fc92 	bl	800f8fc <_Bfree>
 800efd8:	4629      	mov	r1, r5
 800efda:	4620      	mov	r0, r4
 800efdc:	f000 fc8e 	bl	800f8fc <_Bfree>
 800efe0:	e619      	b.n	800ec16 <_strtod_l+0x63e>
 800efe2:	f1b8 0f00 	cmp.w	r8, #0
 800efe6:	d112      	bne.n	800f00e <_strtod_l+0xa36>
 800efe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800efec:	b9b3      	cbnz	r3, 800f01c <_strtod_l+0xa44>
 800efee:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800eff2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800eff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800effa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800effe:	bf58      	it	pl
 800f000:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800f004:	eeb1 7b4d 	vneg.f64	d7, d13
 800f008:	ec53 2b17 	vmov	r2, r3, d7
 800f00c:	e7aa      	b.n	800ef64 <_strtod_l+0x98c>
 800f00e:	f1b8 0f01 	cmp.w	r8, #1
 800f012:	d103      	bne.n	800f01c <_strtod_l+0xa44>
 800f014:	f1b9 0f00 	cmp.w	r9, #0
 800f018:	f43f ad8a 	beq.w	800eb30 <_strtod_l+0x558>
 800f01c:	4b47      	ldr	r3, [pc, #284]	; (800f13c <_strtod_l+0xb64>)
 800f01e:	2200      	movs	r2, #0
 800f020:	e79e      	b.n	800ef60 <_strtod_l+0x988>
 800f022:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f026:	ee20 db0d 	vmul.f64	d13, d0, d13
 800f02a:	f1ba 0f00 	cmp.w	sl, #0
 800f02e:	d104      	bne.n	800f03a <_strtod_l+0xa62>
 800f030:	eeb1 7b4d 	vneg.f64	d7, d13
 800f034:	ec53 2b17 	vmov	r2, r3, d7
 800f038:	e794      	b.n	800ef64 <_strtod_l+0x98c>
 800f03a:	eeb0 7b4d 	vmov.f64	d7, d13
 800f03e:	e7f9      	b.n	800f034 <_strtod_l+0xa5c>
 800f040:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f044:	9b04      	ldr	r3, [sp, #16]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1ba      	bne.n	800efc0 <_strtod_l+0x9e8>
 800f04a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f04e:	0d1b      	lsrs	r3, r3, #20
 800f050:	051b      	lsls	r3, r3, #20
 800f052:	4299      	cmp	r1, r3
 800f054:	d1b4      	bne.n	800efc0 <_strtod_l+0x9e8>
 800f056:	ec51 0b1d 	vmov	r0, r1, d13
 800f05a:	f7f1 fb6d 	bl	8000738 <__aeabi_d2lz>
 800f05e:	f7f1 fb25 	bl	80006ac <__aeabi_l2d>
 800f062:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f066:	ec41 0b17 	vmov	d7, r0, r1
 800f06a:	ea43 0308 	orr.w	r3, r3, r8
 800f06e:	ea53 030a 	orrs.w	r3, r3, sl
 800f072:	ee3d db47 	vsub.f64	d13, d13, d7
 800f076:	d03c      	beq.n	800f0f2 <_strtod_l+0xb1a>
 800f078:	eeb4 dbca 	vcmpe.f64	d13, d10
 800f07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f080:	f53f acf0 	bmi.w	800ea64 <_strtod_l+0x48c>
 800f084:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800f088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f08c:	dd98      	ble.n	800efc0 <_strtod_l+0x9e8>
 800f08e:	e4e9      	b.n	800ea64 <_strtod_l+0x48c>
 800f090:	9804      	ldr	r0, [sp, #16]
 800f092:	b1f0      	cbz	r0, 800f0d2 <_strtod_l+0xafa>
 800f094:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800f098:	d81b      	bhi.n	800f0d2 <_strtod_l+0xafa>
 800f09a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800f120 <_strtod_l+0xb48>
 800f09e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800f0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a6:	d811      	bhi.n	800f0cc <_strtod_l+0xaf4>
 800f0a8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800f0ac:	ee1d 3a10 	vmov	r3, s26
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	bf38      	it	cc
 800f0b4:	2301      	movcc	r3, #1
 800f0b6:	ee0d 3a10 	vmov	s26, r3
 800f0ba:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800f0be:	f1ba 0f00 	cmp.w	sl, #0
 800f0c2:	d113      	bne.n	800f0ec <_strtod_l+0xb14>
 800f0c4:	eeb1 7b4d 	vneg.f64	d7, d13
 800f0c8:	ec53 2b17 	vmov	r2, r3, d7
 800f0cc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800f0d0:	1a43      	subs	r3, r0, r1
 800f0d2:	eeb0 0b48 	vmov.f64	d0, d8
 800f0d6:	ec43 2b1c 	vmov	d12, r2, r3
 800f0da:	910a      	str	r1, [sp, #40]	; 0x28
 800f0dc:	f000 ff40 	bl	800ff60 <__ulp>
 800f0e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f0e2:	eeac 8b00 	vfma.f64	d8, d12, d0
 800f0e6:	ec59 8b18 	vmov	r8, r9, d8
 800f0ea:	e7ab      	b.n	800f044 <_strtod_l+0xa6c>
 800f0ec:	eeb0 7b4d 	vmov.f64	d7, d13
 800f0f0:	e7ea      	b.n	800f0c8 <_strtod_l+0xaf0>
 800f0f2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800f0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0fa:	f57f af61 	bpl.w	800efc0 <_strtod_l+0x9e8>
 800f0fe:	e4b1      	b.n	800ea64 <_strtod_l+0x48c>
 800f100:	2300      	movs	r3, #0
 800f102:	9308      	str	r3, [sp, #32]
 800f104:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f108:	6013      	str	r3, [r2, #0]
 800f10a:	f7ff baad 	b.w	800e668 <_strtod_l+0x90>
 800f10e:	2a65      	cmp	r2, #101	; 0x65
 800f110:	f43f ab9f 	beq.w	800e852 <_strtod_l+0x27a>
 800f114:	2a45      	cmp	r2, #69	; 0x45
 800f116:	f43f ab9c 	beq.w	800e852 <_strtod_l+0x27a>
 800f11a:	2101      	movs	r1, #1
 800f11c:	f7ff bbd4 	b.w	800e8c8 <_strtod_l+0x2f0>
 800f120:	ffc00000 	.word	0xffc00000
 800f124:	41dfffff 	.word	0x41dfffff
 800f128:	000fffff 	.word	0x000fffff
 800f12c:	7ff00000 	.word	0x7ff00000
 800f130:	7fefffff 	.word	0x7fefffff
 800f134:	3ff00000 	.word	0x3ff00000
 800f138:	7c9fffff 	.word	0x7c9fffff
 800f13c:	bff00000 	.word	0xbff00000
 800f140:	7fe00000 	.word	0x7fe00000

0800f144 <strtod>:
 800f144:	460a      	mov	r2, r1
 800f146:	4601      	mov	r1, r0
 800f148:	4802      	ldr	r0, [pc, #8]	; (800f154 <strtod+0x10>)
 800f14a:	4b03      	ldr	r3, [pc, #12]	; (800f158 <strtod+0x14>)
 800f14c:	6800      	ldr	r0, [r0, #0]
 800f14e:	f7ff ba43 	b.w	800e5d8 <_strtod_l>
 800f152:	bf00      	nop
 800f154:	24000068 	.word	0x24000068
 800f158:	240000d0 	.word	0x240000d0

0800f15c <rshift>:
 800f15c:	6903      	ldr	r3, [r0, #16]
 800f15e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f162:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f166:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f16a:	f100 0414 	add.w	r4, r0, #20
 800f16e:	dd45      	ble.n	800f1fc <rshift+0xa0>
 800f170:	f011 011f 	ands.w	r1, r1, #31
 800f174:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f178:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f17c:	d10c      	bne.n	800f198 <rshift+0x3c>
 800f17e:	f100 0710 	add.w	r7, r0, #16
 800f182:	4629      	mov	r1, r5
 800f184:	42b1      	cmp	r1, r6
 800f186:	d334      	bcc.n	800f1f2 <rshift+0x96>
 800f188:	1a9b      	subs	r3, r3, r2
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	1eea      	subs	r2, r5, #3
 800f18e:	4296      	cmp	r6, r2
 800f190:	bf38      	it	cc
 800f192:	2300      	movcc	r3, #0
 800f194:	4423      	add	r3, r4
 800f196:	e015      	b.n	800f1c4 <rshift+0x68>
 800f198:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f19c:	f1c1 0820 	rsb	r8, r1, #32
 800f1a0:	40cf      	lsrs	r7, r1
 800f1a2:	f105 0e04 	add.w	lr, r5, #4
 800f1a6:	46a1      	mov	r9, r4
 800f1a8:	4576      	cmp	r6, lr
 800f1aa:	46f4      	mov	ip, lr
 800f1ac:	d815      	bhi.n	800f1da <rshift+0x7e>
 800f1ae:	1a9a      	subs	r2, r3, r2
 800f1b0:	0092      	lsls	r2, r2, #2
 800f1b2:	3a04      	subs	r2, #4
 800f1b4:	3501      	adds	r5, #1
 800f1b6:	42ae      	cmp	r6, r5
 800f1b8:	bf38      	it	cc
 800f1ba:	2200      	movcc	r2, #0
 800f1bc:	18a3      	adds	r3, r4, r2
 800f1be:	50a7      	str	r7, [r4, r2]
 800f1c0:	b107      	cbz	r7, 800f1c4 <rshift+0x68>
 800f1c2:	3304      	adds	r3, #4
 800f1c4:	1b1a      	subs	r2, r3, r4
 800f1c6:	42a3      	cmp	r3, r4
 800f1c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f1cc:	bf08      	it	eq
 800f1ce:	2300      	moveq	r3, #0
 800f1d0:	6102      	str	r2, [r0, #16]
 800f1d2:	bf08      	it	eq
 800f1d4:	6143      	streq	r3, [r0, #20]
 800f1d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1da:	f8dc c000 	ldr.w	ip, [ip]
 800f1de:	fa0c fc08 	lsl.w	ip, ip, r8
 800f1e2:	ea4c 0707 	orr.w	r7, ip, r7
 800f1e6:	f849 7b04 	str.w	r7, [r9], #4
 800f1ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f1ee:	40cf      	lsrs	r7, r1
 800f1f0:	e7da      	b.n	800f1a8 <rshift+0x4c>
 800f1f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f1f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f1fa:	e7c3      	b.n	800f184 <rshift+0x28>
 800f1fc:	4623      	mov	r3, r4
 800f1fe:	e7e1      	b.n	800f1c4 <rshift+0x68>

0800f200 <__hexdig_fun>:
 800f200:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f204:	2b09      	cmp	r3, #9
 800f206:	d802      	bhi.n	800f20e <__hexdig_fun+0xe>
 800f208:	3820      	subs	r0, #32
 800f20a:	b2c0      	uxtb	r0, r0
 800f20c:	4770      	bx	lr
 800f20e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f212:	2b05      	cmp	r3, #5
 800f214:	d801      	bhi.n	800f21a <__hexdig_fun+0x1a>
 800f216:	3847      	subs	r0, #71	; 0x47
 800f218:	e7f7      	b.n	800f20a <__hexdig_fun+0xa>
 800f21a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f21e:	2b05      	cmp	r3, #5
 800f220:	d801      	bhi.n	800f226 <__hexdig_fun+0x26>
 800f222:	3827      	subs	r0, #39	; 0x27
 800f224:	e7f1      	b.n	800f20a <__hexdig_fun+0xa>
 800f226:	2000      	movs	r0, #0
 800f228:	4770      	bx	lr
	...

0800f22c <__gethex>:
 800f22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f230:	ed2d 8b02 	vpush	{d8}
 800f234:	b089      	sub	sp, #36	; 0x24
 800f236:	ee08 0a10 	vmov	s16, r0
 800f23a:	9304      	str	r3, [sp, #16]
 800f23c:	4bb4      	ldr	r3, [pc, #720]	; (800f510 <__gethex+0x2e4>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	9301      	str	r3, [sp, #4]
 800f242:	4618      	mov	r0, r3
 800f244:	468b      	mov	fp, r1
 800f246:	4690      	mov	r8, r2
 800f248:	f7f1 f84a 	bl	80002e0 <strlen>
 800f24c:	9b01      	ldr	r3, [sp, #4]
 800f24e:	f8db 2000 	ldr.w	r2, [fp]
 800f252:	4403      	add	r3, r0
 800f254:	4682      	mov	sl, r0
 800f256:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f25a:	9305      	str	r3, [sp, #20]
 800f25c:	1c93      	adds	r3, r2, #2
 800f25e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f262:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f266:	32fe      	adds	r2, #254	; 0xfe
 800f268:	18d1      	adds	r1, r2, r3
 800f26a:	461f      	mov	r7, r3
 800f26c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f270:	9100      	str	r1, [sp, #0]
 800f272:	2830      	cmp	r0, #48	; 0x30
 800f274:	d0f8      	beq.n	800f268 <__gethex+0x3c>
 800f276:	f7ff ffc3 	bl	800f200 <__hexdig_fun>
 800f27a:	4604      	mov	r4, r0
 800f27c:	2800      	cmp	r0, #0
 800f27e:	d13a      	bne.n	800f2f6 <__gethex+0xca>
 800f280:	9901      	ldr	r1, [sp, #4]
 800f282:	4652      	mov	r2, sl
 800f284:	4638      	mov	r0, r7
 800f286:	f001 f87b 	bl	8010380 <strncmp>
 800f28a:	4605      	mov	r5, r0
 800f28c:	2800      	cmp	r0, #0
 800f28e:	d168      	bne.n	800f362 <__gethex+0x136>
 800f290:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f294:	eb07 060a 	add.w	r6, r7, sl
 800f298:	f7ff ffb2 	bl	800f200 <__hexdig_fun>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d062      	beq.n	800f366 <__gethex+0x13a>
 800f2a0:	4633      	mov	r3, r6
 800f2a2:	7818      	ldrb	r0, [r3, #0]
 800f2a4:	2830      	cmp	r0, #48	; 0x30
 800f2a6:	461f      	mov	r7, r3
 800f2a8:	f103 0301 	add.w	r3, r3, #1
 800f2ac:	d0f9      	beq.n	800f2a2 <__gethex+0x76>
 800f2ae:	f7ff ffa7 	bl	800f200 <__hexdig_fun>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	fab0 f480 	clz	r4, r0
 800f2b8:	0964      	lsrs	r4, r4, #5
 800f2ba:	4635      	mov	r5, r6
 800f2bc:	9300      	str	r3, [sp, #0]
 800f2be:	463a      	mov	r2, r7
 800f2c0:	4616      	mov	r6, r2
 800f2c2:	3201      	adds	r2, #1
 800f2c4:	7830      	ldrb	r0, [r6, #0]
 800f2c6:	f7ff ff9b 	bl	800f200 <__hexdig_fun>
 800f2ca:	2800      	cmp	r0, #0
 800f2cc:	d1f8      	bne.n	800f2c0 <__gethex+0x94>
 800f2ce:	9901      	ldr	r1, [sp, #4]
 800f2d0:	4652      	mov	r2, sl
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	f001 f854 	bl	8010380 <strncmp>
 800f2d8:	b980      	cbnz	r0, 800f2fc <__gethex+0xd0>
 800f2da:	b94d      	cbnz	r5, 800f2f0 <__gethex+0xc4>
 800f2dc:	eb06 050a 	add.w	r5, r6, sl
 800f2e0:	462a      	mov	r2, r5
 800f2e2:	4616      	mov	r6, r2
 800f2e4:	3201      	adds	r2, #1
 800f2e6:	7830      	ldrb	r0, [r6, #0]
 800f2e8:	f7ff ff8a 	bl	800f200 <__hexdig_fun>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d1f8      	bne.n	800f2e2 <__gethex+0xb6>
 800f2f0:	1bad      	subs	r5, r5, r6
 800f2f2:	00ad      	lsls	r5, r5, #2
 800f2f4:	e004      	b.n	800f300 <__gethex+0xd4>
 800f2f6:	2400      	movs	r4, #0
 800f2f8:	4625      	mov	r5, r4
 800f2fa:	e7e0      	b.n	800f2be <__gethex+0x92>
 800f2fc:	2d00      	cmp	r5, #0
 800f2fe:	d1f7      	bne.n	800f2f0 <__gethex+0xc4>
 800f300:	7833      	ldrb	r3, [r6, #0]
 800f302:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f306:	2b50      	cmp	r3, #80	; 0x50
 800f308:	d13b      	bne.n	800f382 <__gethex+0x156>
 800f30a:	7873      	ldrb	r3, [r6, #1]
 800f30c:	2b2b      	cmp	r3, #43	; 0x2b
 800f30e:	d02c      	beq.n	800f36a <__gethex+0x13e>
 800f310:	2b2d      	cmp	r3, #45	; 0x2d
 800f312:	d02e      	beq.n	800f372 <__gethex+0x146>
 800f314:	1c71      	adds	r1, r6, #1
 800f316:	f04f 0900 	mov.w	r9, #0
 800f31a:	7808      	ldrb	r0, [r1, #0]
 800f31c:	f7ff ff70 	bl	800f200 <__hexdig_fun>
 800f320:	1e43      	subs	r3, r0, #1
 800f322:	b2db      	uxtb	r3, r3
 800f324:	2b18      	cmp	r3, #24
 800f326:	d82c      	bhi.n	800f382 <__gethex+0x156>
 800f328:	f1a0 0210 	sub.w	r2, r0, #16
 800f32c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f330:	f7ff ff66 	bl	800f200 <__hexdig_fun>
 800f334:	1e43      	subs	r3, r0, #1
 800f336:	b2db      	uxtb	r3, r3
 800f338:	2b18      	cmp	r3, #24
 800f33a:	d91d      	bls.n	800f378 <__gethex+0x14c>
 800f33c:	f1b9 0f00 	cmp.w	r9, #0
 800f340:	d000      	beq.n	800f344 <__gethex+0x118>
 800f342:	4252      	negs	r2, r2
 800f344:	4415      	add	r5, r2
 800f346:	f8cb 1000 	str.w	r1, [fp]
 800f34a:	b1e4      	cbz	r4, 800f386 <__gethex+0x15a>
 800f34c:	9b00      	ldr	r3, [sp, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	bf14      	ite	ne
 800f352:	2700      	movne	r7, #0
 800f354:	2706      	moveq	r7, #6
 800f356:	4638      	mov	r0, r7
 800f358:	b009      	add	sp, #36	; 0x24
 800f35a:	ecbd 8b02 	vpop	{d8}
 800f35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f362:	463e      	mov	r6, r7
 800f364:	4625      	mov	r5, r4
 800f366:	2401      	movs	r4, #1
 800f368:	e7ca      	b.n	800f300 <__gethex+0xd4>
 800f36a:	f04f 0900 	mov.w	r9, #0
 800f36e:	1cb1      	adds	r1, r6, #2
 800f370:	e7d3      	b.n	800f31a <__gethex+0xee>
 800f372:	f04f 0901 	mov.w	r9, #1
 800f376:	e7fa      	b.n	800f36e <__gethex+0x142>
 800f378:	230a      	movs	r3, #10
 800f37a:	fb03 0202 	mla	r2, r3, r2, r0
 800f37e:	3a10      	subs	r2, #16
 800f380:	e7d4      	b.n	800f32c <__gethex+0x100>
 800f382:	4631      	mov	r1, r6
 800f384:	e7df      	b.n	800f346 <__gethex+0x11a>
 800f386:	1bf3      	subs	r3, r6, r7
 800f388:	3b01      	subs	r3, #1
 800f38a:	4621      	mov	r1, r4
 800f38c:	2b07      	cmp	r3, #7
 800f38e:	dc0b      	bgt.n	800f3a8 <__gethex+0x17c>
 800f390:	ee18 0a10 	vmov	r0, s16
 800f394:	f000 fa72 	bl	800f87c <_Balloc>
 800f398:	4604      	mov	r4, r0
 800f39a:	b940      	cbnz	r0, 800f3ae <__gethex+0x182>
 800f39c:	4b5d      	ldr	r3, [pc, #372]	; (800f514 <__gethex+0x2e8>)
 800f39e:	4602      	mov	r2, r0
 800f3a0:	21de      	movs	r1, #222	; 0xde
 800f3a2:	485d      	ldr	r0, [pc, #372]	; (800f518 <__gethex+0x2ec>)
 800f3a4:	f001 f80e 	bl	80103c4 <__assert_func>
 800f3a8:	3101      	adds	r1, #1
 800f3aa:	105b      	asrs	r3, r3, #1
 800f3ac:	e7ee      	b.n	800f38c <__gethex+0x160>
 800f3ae:	f100 0914 	add.w	r9, r0, #20
 800f3b2:	f04f 0b00 	mov.w	fp, #0
 800f3b6:	f1ca 0301 	rsb	r3, sl, #1
 800f3ba:	f8cd 9008 	str.w	r9, [sp, #8]
 800f3be:	f8cd b000 	str.w	fp, [sp]
 800f3c2:	9306      	str	r3, [sp, #24]
 800f3c4:	42b7      	cmp	r7, r6
 800f3c6:	d340      	bcc.n	800f44a <__gethex+0x21e>
 800f3c8:	9802      	ldr	r0, [sp, #8]
 800f3ca:	9b00      	ldr	r3, [sp, #0]
 800f3cc:	f840 3b04 	str.w	r3, [r0], #4
 800f3d0:	eba0 0009 	sub.w	r0, r0, r9
 800f3d4:	1080      	asrs	r0, r0, #2
 800f3d6:	0146      	lsls	r6, r0, #5
 800f3d8:	6120      	str	r0, [r4, #16]
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f000 fb40 	bl	800fa60 <__hi0bits>
 800f3e0:	1a30      	subs	r0, r6, r0
 800f3e2:	f8d8 6000 	ldr.w	r6, [r8]
 800f3e6:	42b0      	cmp	r0, r6
 800f3e8:	dd63      	ble.n	800f4b2 <__gethex+0x286>
 800f3ea:	1b87      	subs	r7, r0, r6
 800f3ec:	4639      	mov	r1, r7
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f000 fee1 	bl	80101b6 <__any_on>
 800f3f4:	4682      	mov	sl, r0
 800f3f6:	b1a8      	cbz	r0, 800f424 <__gethex+0x1f8>
 800f3f8:	1e7b      	subs	r3, r7, #1
 800f3fa:	1159      	asrs	r1, r3, #5
 800f3fc:	f003 021f 	and.w	r2, r3, #31
 800f400:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f404:	f04f 0a01 	mov.w	sl, #1
 800f408:	fa0a f202 	lsl.w	r2, sl, r2
 800f40c:	420a      	tst	r2, r1
 800f40e:	d009      	beq.n	800f424 <__gethex+0x1f8>
 800f410:	4553      	cmp	r3, sl
 800f412:	dd05      	ble.n	800f420 <__gethex+0x1f4>
 800f414:	1eb9      	subs	r1, r7, #2
 800f416:	4620      	mov	r0, r4
 800f418:	f000 fecd 	bl	80101b6 <__any_on>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d145      	bne.n	800f4ac <__gethex+0x280>
 800f420:	f04f 0a02 	mov.w	sl, #2
 800f424:	4639      	mov	r1, r7
 800f426:	4620      	mov	r0, r4
 800f428:	f7ff fe98 	bl	800f15c <rshift>
 800f42c:	443d      	add	r5, r7
 800f42e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f432:	42ab      	cmp	r3, r5
 800f434:	da4c      	bge.n	800f4d0 <__gethex+0x2a4>
 800f436:	ee18 0a10 	vmov	r0, s16
 800f43a:	4621      	mov	r1, r4
 800f43c:	f000 fa5e 	bl	800f8fc <_Bfree>
 800f440:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f442:	2300      	movs	r3, #0
 800f444:	6013      	str	r3, [r2, #0]
 800f446:	27a3      	movs	r7, #163	; 0xa3
 800f448:	e785      	b.n	800f356 <__gethex+0x12a>
 800f44a:	1e73      	subs	r3, r6, #1
 800f44c:	9a05      	ldr	r2, [sp, #20]
 800f44e:	9303      	str	r3, [sp, #12]
 800f450:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f454:	4293      	cmp	r3, r2
 800f456:	d019      	beq.n	800f48c <__gethex+0x260>
 800f458:	f1bb 0f20 	cmp.w	fp, #32
 800f45c:	d107      	bne.n	800f46e <__gethex+0x242>
 800f45e:	9b02      	ldr	r3, [sp, #8]
 800f460:	9a00      	ldr	r2, [sp, #0]
 800f462:	f843 2b04 	str.w	r2, [r3], #4
 800f466:	9302      	str	r3, [sp, #8]
 800f468:	2300      	movs	r3, #0
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	469b      	mov	fp, r3
 800f46e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f472:	f7ff fec5 	bl	800f200 <__hexdig_fun>
 800f476:	9b00      	ldr	r3, [sp, #0]
 800f478:	f000 000f 	and.w	r0, r0, #15
 800f47c:	fa00 f00b 	lsl.w	r0, r0, fp
 800f480:	4303      	orrs	r3, r0
 800f482:	9300      	str	r3, [sp, #0]
 800f484:	f10b 0b04 	add.w	fp, fp, #4
 800f488:	9b03      	ldr	r3, [sp, #12]
 800f48a:	e00d      	b.n	800f4a8 <__gethex+0x27c>
 800f48c:	9b03      	ldr	r3, [sp, #12]
 800f48e:	9a06      	ldr	r2, [sp, #24]
 800f490:	4413      	add	r3, r2
 800f492:	42bb      	cmp	r3, r7
 800f494:	d3e0      	bcc.n	800f458 <__gethex+0x22c>
 800f496:	4618      	mov	r0, r3
 800f498:	9901      	ldr	r1, [sp, #4]
 800f49a:	9307      	str	r3, [sp, #28]
 800f49c:	4652      	mov	r2, sl
 800f49e:	f000 ff6f 	bl	8010380 <strncmp>
 800f4a2:	9b07      	ldr	r3, [sp, #28]
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d1d7      	bne.n	800f458 <__gethex+0x22c>
 800f4a8:	461e      	mov	r6, r3
 800f4aa:	e78b      	b.n	800f3c4 <__gethex+0x198>
 800f4ac:	f04f 0a03 	mov.w	sl, #3
 800f4b0:	e7b8      	b.n	800f424 <__gethex+0x1f8>
 800f4b2:	da0a      	bge.n	800f4ca <__gethex+0x29e>
 800f4b4:	1a37      	subs	r7, r6, r0
 800f4b6:	4621      	mov	r1, r4
 800f4b8:	ee18 0a10 	vmov	r0, s16
 800f4bc:	463a      	mov	r2, r7
 800f4be:	f000 fc39 	bl	800fd34 <__lshift>
 800f4c2:	1bed      	subs	r5, r5, r7
 800f4c4:	4604      	mov	r4, r0
 800f4c6:	f100 0914 	add.w	r9, r0, #20
 800f4ca:	f04f 0a00 	mov.w	sl, #0
 800f4ce:	e7ae      	b.n	800f42e <__gethex+0x202>
 800f4d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f4d4:	42a8      	cmp	r0, r5
 800f4d6:	dd72      	ble.n	800f5be <__gethex+0x392>
 800f4d8:	1b45      	subs	r5, r0, r5
 800f4da:	42ae      	cmp	r6, r5
 800f4dc:	dc36      	bgt.n	800f54c <__gethex+0x320>
 800f4de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f4e2:	2b02      	cmp	r3, #2
 800f4e4:	d02a      	beq.n	800f53c <__gethex+0x310>
 800f4e6:	2b03      	cmp	r3, #3
 800f4e8:	d02c      	beq.n	800f544 <__gethex+0x318>
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d11c      	bne.n	800f528 <__gethex+0x2fc>
 800f4ee:	42ae      	cmp	r6, r5
 800f4f0:	d11a      	bne.n	800f528 <__gethex+0x2fc>
 800f4f2:	2e01      	cmp	r6, #1
 800f4f4:	d112      	bne.n	800f51c <__gethex+0x2f0>
 800f4f6:	9a04      	ldr	r2, [sp, #16]
 800f4f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f4fc:	6013      	str	r3, [r2, #0]
 800f4fe:	2301      	movs	r3, #1
 800f500:	6123      	str	r3, [r4, #16]
 800f502:	f8c9 3000 	str.w	r3, [r9]
 800f506:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f508:	2762      	movs	r7, #98	; 0x62
 800f50a:	601c      	str	r4, [r3, #0]
 800f50c:	e723      	b.n	800f356 <__gethex+0x12a>
 800f50e:	bf00      	nop
 800f510:	08011cb0 	.word	0x08011cb0
 800f514:	08011c38 	.word	0x08011c38
 800f518:	08011c49 	.word	0x08011c49
 800f51c:	1e71      	subs	r1, r6, #1
 800f51e:	4620      	mov	r0, r4
 800f520:	f000 fe49 	bl	80101b6 <__any_on>
 800f524:	2800      	cmp	r0, #0
 800f526:	d1e6      	bne.n	800f4f6 <__gethex+0x2ca>
 800f528:	ee18 0a10 	vmov	r0, s16
 800f52c:	4621      	mov	r1, r4
 800f52e:	f000 f9e5 	bl	800f8fc <_Bfree>
 800f532:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f534:	2300      	movs	r3, #0
 800f536:	6013      	str	r3, [r2, #0]
 800f538:	2750      	movs	r7, #80	; 0x50
 800f53a:	e70c      	b.n	800f356 <__gethex+0x12a>
 800f53c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d1f2      	bne.n	800f528 <__gethex+0x2fc>
 800f542:	e7d8      	b.n	800f4f6 <__gethex+0x2ca>
 800f544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1d5      	bne.n	800f4f6 <__gethex+0x2ca>
 800f54a:	e7ed      	b.n	800f528 <__gethex+0x2fc>
 800f54c:	1e6f      	subs	r7, r5, #1
 800f54e:	f1ba 0f00 	cmp.w	sl, #0
 800f552:	d131      	bne.n	800f5b8 <__gethex+0x38c>
 800f554:	b127      	cbz	r7, 800f560 <__gethex+0x334>
 800f556:	4639      	mov	r1, r7
 800f558:	4620      	mov	r0, r4
 800f55a:	f000 fe2c 	bl	80101b6 <__any_on>
 800f55e:	4682      	mov	sl, r0
 800f560:	117b      	asrs	r3, r7, #5
 800f562:	2101      	movs	r1, #1
 800f564:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f568:	f007 071f 	and.w	r7, r7, #31
 800f56c:	fa01 f707 	lsl.w	r7, r1, r7
 800f570:	421f      	tst	r7, r3
 800f572:	4629      	mov	r1, r5
 800f574:	4620      	mov	r0, r4
 800f576:	bf18      	it	ne
 800f578:	f04a 0a02 	orrne.w	sl, sl, #2
 800f57c:	1b76      	subs	r6, r6, r5
 800f57e:	f7ff fded 	bl	800f15c <rshift>
 800f582:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f586:	2702      	movs	r7, #2
 800f588:	f1ba 0f00 	cmp.w	sl, #0
 800f58c:	d048      	beq.n	800f620 <__gethex+0x3f4>
 800f58e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f592:	2b02      	cmp	r3, #2
 800f594:	d015      	beq.n	800f5c2 <__gethex+0x396>
 800f596:	2b03      	cmp	r3, #3
 800f598:	d017      	beq.n	800f5ca <__gethex+0x39e>
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d109      	bne.n	800f5b2 <__gethex+0x386>
 800f59e:	f01a 0f02 	tst.w	sl, #2
 800f5a2:	d006      	beq.n	800f5b2 <__gethex+0x386>
 800f5a4:	f8d9 0000 	ldr.w	r0, [r9]
 800f5a8:	ea4a 0a00 	orr.w	sl, sl, r0
 800f5ac:	f01a 0f01 	tst.w	sl, #1
 800f5b0:	d10e      	bne.n	800f5d0 <__gethex+0x3a4>
 800f5b2:	f047 0710 	orr.w	r7, r7, #16
 800f5b6:	e033      	b.n	800f620 <__gethex+0x3f4>
 800f5b8:	f04f 0a01 	mov.w	sl, #1
 800f5bc:	e7d0      	b.n	800f560 <__gethex+0x334>
 800f5be:	2701      	movs	r7, #1
 800f5c0:	e7e2      	b.n	800f588 <__gethex+0x35c>
 800f5c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5c4:	f1c3 0301 	rsb	r3, r3, #1
 800f5c8:	9315      	str	r3, [sp, #84]	; 0x54
 800f5ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d0f0      	beq.n	800f5b2 <__gethex+0x386>
 800f5d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f5d4:	f104 0314 	add.w	r3, r4, #20
 800f5d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f5dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f5e0:	f04f 0c00 	mov.w	ip, #0
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f5ee:	d01c      	beq.n	800f62a <__gethex+0x3fe>
 800f5f0:	3201      	adds	r2, #1
 800f5f2:	6002      	str	r2, [r0, #0]
 800f5f4:	2f02      	cmp	r7, #2
 800f5f6:	f104 0314 	add.w	r3, r4, #20
 800f5fa:	d13f      	bne.n	800f67c <__gethex+0x450>
 800f5fc:	f8d8 2000 	ldr.w	r2, [r8]
 800f600:	3a01      	subs	r2, #1
 800f602:	42b2      	cmp	r2, r6
 800f604:	d10a      	bne.n	800f61c <__gethex+0x3f0>
 800f606:	1171      	asrs	r1, r6, #5
 800f608:	2201      	movs	r2, #1
 800f60a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f60e:	f006 061f 	and.w	r6, r6, #31
 800f612:	fa02 f606 	lsl.w	r6, r2, r6
 800f616:	421e      	tst	r6, r3
 800f618:	bf18      	it	ne
 800f61a:	4617      	movne	r7, r2
 800f61c:	f047 0720 	orr.w	r7, r7, #32
 800f620:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f622:	601c      	str	r4, [r3, #0]
 800f624:	9b04      	ldr	r3, [sp, #16]
 800f626:	601d      	str	r5, [r3, #0]
 800f628:	e695      	b.n	800f356 <__gethex+0x12a>
 800f62a:	4299      	cmp	r1, r3
 800f62c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f630:	d8d8      	bhi.n	800f5e4 <__gethex+0x3b8>
 800f632:	68a3      	ldr	r3, [r4, #8]
 800f634:	459b      	cmp	fp, r3
 800f636:	db19      	blt.n	800f66c <__gethex+0x440>
 800f638:	6861      	ldr	r1, [r4, #4]
 800f63a:	ee18 0a10 	vmov	r0, s16
 800f63e:	3101      	adds	r1, #1
 800f640:	f000 f91c 	bl	800f87c <_Balloc>
 800f644:	4681      	mov	r9, r0
 800f646:	b918      	cbnz	r0, 800f650 <__gethex+0x424>
 800f648:	4b1a      	ldr	r3, [pc, #104]	; (800f6b4 <__gethex+0x488>)
 800f64a:	4602      	mov	r2, r0
 800f64c:	2184      	movs	r1, #132	; 0x84
 800f64e:	e6a8      	b.n	800f3a2 <__gethex+0x176>
 800f650:	6922      	ldr	r2, [r4, #16]
 800f652:	3202      	adds	r2, #2
 800f654:	f104 010c 	add.w	r1, r4, #12
 800f658:	0092      	lsls	r2, r2, #2
 800f65a:	300c      	adds	r0, #12
 800f65c:	f000 f900 	bl	800f860 <memcpy>
 800f660:	4621      	mov	r1, r4
 800f662:	ee18 0a10 	vmov	r0, s16
 800f666:	f000 f949 	bl	800f8fc <_Bfree>
 800f66a:	464c      	mov	r4, r9
 800f66c:	6923      	ldr	r3, [r4, #16]
 800f66e:	1c5a      	adds	r2, r3, #1
 800f670:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f674:	6122      	str	r2, [r4, #16]
 800f676:	2201      	movs	r2, #1
 800f678:	615a      	str	r2, [r3, #20]
 800f67a:	e7bb      	b.n	800f5f4 <__gethex+0x3c8>
 800f67c:	6922      	ldr	r2, [r4, #16]
 800f67e:	455a      	cmp	r2, fp
 800f680:	dd0b      	ble.n	800f69a <__gethex+0x46e>
 800f682:	2101      	movs	r1, #1
 800f684:	4620      	mov	r0, r4
 800f686:	f7ff fd69 	bl	800f15c <rshift>
 800f68a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f68e:	3501      	adds	r5, #1
 800f690:	42ab      	cmp	r3, r5
 800f692:	f6ff aed0 	blt.w	800f436 <__gethex+0x20a>
 800f696:	2701      	movs	r7, #1
 800f698:	e7c0      	b.n	800f61c <__gethex+0x3f0>
 800f69a:	f016 061f 	ands.w	r6, r6, #31
 800f69e:	d0fa      	beq.n	800f696 <__gethex+0x46a>
 800f6a0:	4453      	add	r3, sl
 800f6a2:	f1c6 0620 	rsb	r6, r6, #32
 800f6a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f6aa:	f000 f9d9 	bl	800fa60 <__hi0bits>
 800f6ae:	42b0      	cmp	r0, r6
 800f6b0:	dbe7      	blt.n	800f682 <__gethex+0x456>
 800f6b2:	e7f0      	b.n	800f696 <__gethex+0x46a>
 800f6b4:	08011c38 	.word	0x08011c38

0800f6b8 <L_shift>:
 800f6b8:	f1c2 0208 	rsb	r2, r2, #8
 800f6bc:	0092      	lsls	r2, r2, #2
 800f6be:	b570      	push	{r4, r5, r6, lr}
 800f6c0:	f1c2 0620 	rsb	r6, r2, #32
 800f6c4:	6843      	ldr	r3, [r0, #4]
 800f6c6:	6804      	ldr	r4, [r0, #0]
 800f6c8:	fa03 f506 	lsl.w	r5, r3, r6
 800f6cc:	432c      	orrs	r4, r5
 800f6ce:	40d3      	lsrs	r3, r2
 800f6d0:	6004      	str	r4, [r0, #0]
 800f6d2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f6d6:	4288      	cmp	r0, r1
 800f6d8:	d3f4      	bcc.n	800f6c4 <L_shift+0xc>
 800f6da:	bd70      	pop	{r4, r5, r6, pc}

0800f6dc <__match>:
 800f6dc:	b530      	push	{r4, r5, lr}
 800f6de:	6803      	ldr	r3, [r0, #0]
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6e6:	b914      	cbnz	r4, 800f6ee <__match+0x12>
 800f6e8:	6003      	str	r3, [r0, #0]
 800f6ea:	2001      	movs	r0, #1
 800f6ec:	bd30      	pop	{r4, r5, pc}
 800f6ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f6f6:	2d19      	cmp	r5, #25
 800f6f8:	bf98      	it	ls
 800f6fa:	3220      	addls	r2, #32
 800f6fc:	42a2      	cmp	r2, r4
 800f6fe:	d0f0      	beq.n	800f6e2 <__match+0x6>
 800f700:	2000      	movs	r0, #0
 800f702:	e7f3      	b.n	800f6ec <__match+0x10>

0800f704 <__hexnan>:
 800f704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f708:	680b      	ldr	r3, [r1, #0]
 800f70a:	115e      	asrs	r6, r3, #5
 800f70c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f710:	f013 031f 	ands.w	r3, r3, #31
 800f714:	b087      	sub	sp, #28
 800f716:	bf18      	it	ne
 800f718:	3604      	addne	r6, #4
 800f71a:	2500      	movs	r5, #0
 800f71c:	1f37      	subs	r7, r6, #4
 800f71e:	4690      	mov	r8, r2
 800f720:	6802      	ldr	r2, [r0, #0]
 800f722:	9301      	str	r3, [sp, #4]
 800f724:	4682      	mov	sl, r0
 800f726:	f846 5c04 	str.w	r5, [r6, #-4]
 800f72a:	46b9      	mov	r9, r7
 800f72c:	463c      	mov	r4, r7
 800f72e:	9502      	str	r5, [sp, #8]
 800f730:	46ab      	mov	fp, r5
 800f732:	7851      	ldrb	r1, [r2, #1]
 800f734:	1c53      	adds	r3, r2, #1
 800f736:	9303      	str	r3, [sp, #12]
 800f738:	b341      	cbz	r1, 800f78c <__hexnan+0x88>
 800f73a:	4608      	mov	r0, r1
 800f73c:	9205      	str	r2, [sp, #20]
 800f73e:	9104      	str	r1, [sp, #16]
 800f740:	f7ff fd5e 	bl	800f200 <__hexdig_fun>
 800f744:	2800      	cmp	r0, #0
 800f746:	d14f      	bne.n	800f7e8 <__hexnan+0xe4>
 800f748:	9904      	ldr	r1, [sp, #16]
 800f74a:	9a05      	ldr	r2, [sp, #20]
 800f74c:	2920      	cmp	r1, #32
 800f74e:	d818      	bhi.n	800f782 <__hexnan+0x7e>
 800f750:	9b02      	ldr	r3, [sp, #8]
 800f752:	459b      	cmp	fp, r3
 800f754:	dd13      	ble.n	800f77e <__hexnan+0x7a>
 800f756:	454c      	cmp	r4, r9
 800f758:	d206      	bcs.n	800f768 <__hexnan+0x64>
 800f75a:	2d07      	cmp	r5, #7
 800f75c:	dc04      	bgt.n	800f768 <__hexnan+0x64>
 800f75e:	462a      	mov	r2, r5
 800f760:	4649      	mov	r1, r9
 800f762:	4620      	mov	r0, r4
 800f764:	f7ff ffa8 	bl	800f6b8 <L_shift>
 800f768:	4544      	cmp	r4, r8
 800f76a:	d950      	bls.n	800f80e <__hexnan+0x10a>
 800f76c:	2300      	movs	r3, #0
 800f76e:	f1a4 0904 	sub.w	r9, r4, #4
 800f772:	f844 3c04 	str.w	r3, [r4, #-4]
 800f776:	f8cd b008 	str.w	fp, [sp, #8]
 800f77a:	464c      	mov	r4, r9
 800f77c:	461d      	mov	r5, r3
 800f77e:	9a03      	ldr	r2, [sp, #12]
 800f780:	e7d7      	b.n	800f732 <__hexnan+0x2e>
 800f782:	2929      	cmp	r1, #41	; 0x29
 800f784:	d156      	bne.n	800f834 <__hexnan+0x130>
 800f786:	3202      	adds	r2, #2
 800f788:	f8ca 2000 	str.w	r2, [sl]
 800f78c:	f1bb 0f00 	cmp.w	fp, #0
 800f790:	d050      	beq.n	800f834 <__hexnan+0x130>
 800f792:	454c      	cmp	r4, r9
 800f794:	d206      	bcs.n	800f7a4 <__hexnan+0xa0>
 800f796:	2d07      	cmp	r5, #7
 800f798:	dc04      	bgt.n	800f7a4 <__hexnan+0xa0>
 800f79a:	462a      	mov	r2, r5
 800f79c:	4649      	mov	r1, r9
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f7ff ff8a 	bl	800f6b8 <L_shift>
 800f7a4:	4544      	cmp	r4, r8
 800f7a6:	d934      	bls.n	800f812 <__hexnan+0x10e>
 800f7a8:	f1a8 0204 	sub.w	r2, r8, #4
 800f7ac:	4623      	mov	r3, r4
 800f7ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800f7b2:	f842 1f04 	str.w	r1, [r2, #4]!
 800f7b6:	429f      	cmp	r7, r3
 800f7b8:	d2f9      	bcs.n	800f7ae <__hexnan+0xaa>
 800f7ba:	1b3b      	subs	r3, r7, r4
 800f7bc:	f023 0303 	bic.w	r3, r3, #3
 800f7c0:	3304      	adds	r3, #4
 800f7c2:	3401      	adds	r4, #1
 800f7c4:	3e03      	subs	r6, #3
 800f7c6:	42b4      	cmp	r4, r6
 800f7c8:	bf88      	it	hi
 800f7ca:	2304      	movhi	r3, #4
 800f7cc:	4443      	add	r3, r8
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f843 2b04 	str.w	r2, [r3], #4
 800f7d4:	429f      	cmp	r7, r3
 800f7d6:	d2fb      	bcs.n	800f7d0 <__hexnan+0xcc>
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	b91b      	cbnz	r3, 800f7e4 <__hexnan+0xe0>
 800f7dc:	4547      	cmp	r7, r8
 800f7de:	d127      	bne.n	800f830 <__hexnan+0x12c>
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	603b      	str	r3, [r7, #0]
 800f7e4:	2005      	movs	r0, #5
 800f7e6:	e026      	b.n	800f836 <__hexnan+0x132>
 800f7e8:	3501      	adds	r5, #1
 800f7ea:	2d08      	cmp	r5, #8
 800f7ec:	f10b 0b01 	add.w	fp, fp, #1
 800f7f0:	dd06      	ble.n	800f800 <__hexnan+0xfc>
 800f7f2:	4544      	cmp	r4, r8
 800f7f4:	d9c3      	bls.n	800f77e <__hexnan+0x7a>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7fc:	2501      	movs	r5, #1
 800f7fe:	3c04      	subs	r4, #4
 800f800:	6822      	ldr	r2, [r4, #0]
 800f802:	f000 000f 	and.w	r0, r0, #15
 800f806:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f80a:	6022      	str	r2, [r4, #0]
 800f80c:	e7b7      	b.n	800f77e <__hexnan+0x7a>
 800f80e:	2508      	movs	r5, #8
 800f810:	e7b5      	b.n	800f77e <__hexnan+0x7a>
 800f812:	9b01      	ldr	r3, [sp, #4]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d0df      	beq.n	800f7d8 <__hexnan+0xd4>
 800f818:	f04f 32ff 	mov.w	r2, #4294967295
 800f81c:	f1c3 0320 	rsb	r3, r3, #32
 800f820:	fa22 f303 	lsr.w	r3, r2, r3
 800f824:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f828:	401a      	ands	r2, r3
 800f82a:	f846 2c04 	str.w	r2, [r6, #-4]
 800f82e:	e7d3      	b.n	800f7d8 <__hexnan+0xd4>
 800f830:	3f04      	subs	r7, #4
 800f832:	e7d1      	b.n	800f7d8 <__hexnan+0xd4>
 800f834:	2004      	movs	r0, #4
 800f836:	b007      	add	sp, #28
 800f838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f83c <__ascii_mbtowc>:
 800f83c:	b082      	sub	sp, #8
 800f83e:	b901      	cbnz	r1, 800f842 <__ascii_mbtowc+0x6>
 800f840:	a901      	add	r1, sp, #4
 800f842:	b142      	cbz	r2, 800f856 <__ascii_mbtowc+0x1a>
 800f844:	b14b      	cbz	r3, 800f85a <__ascii_mbtowc+0x1e>
 800f846:	7813      	ldrb	r3, [r2, #0]
 800f848:	600b      	str	r3, [r1, #0]
 800f84a:	7812      	ldrb	r2, [r2, #0]
 800f84c:	1e10      	subs	r0, r2, #0
 800f84e:	bf18      	it	ne
 800f850:	2001      	movne	r0, #1
 800f852:	b002      	add	sp, #8
 800f854:	4770      	bx	lr
 800f856:	4610      	mov	r0, r2
 800f858:	e7fb      	b.n	800f852 <__ascii_mbtowc+0x16>
 800f85a:	f06f 0001 	mvn.w	r0, #1
 800f85e:	e7f8      	b.n	800f852 <__ascii_mbtowc+0x16>

0800f860 <memcpy>:
 800f860:	440a      	add	r2, r1
 800f862:	4291      	cmp	r1, r2
 800f864:	f100 33ff 	add.w	r3, r0, #4294967295
 800f868:	d100      	bne.n	800f86c <memcpy+0xc>
 800f86a:	4770      	bx	lr
 800f86c:	b510      	push	{r4, lr}
 800f86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f872:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f876:	4291      	cmp	r1, r2
 800f878:	d1f9      	bne.n	800f86e <memcpy+0xe>
 800f87a:	bd10      	pop	{r4, pc}

0800f87c <_Balloc>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f880:	4604      	mov	r4, r0
 800f882:	460d      	mov	r5, r1
 800f884:	b976      	cbnz	r6, 800f8a4 <_Balloc+0x28>
 800f886:	2010      	movs	r0, #16
 800f888:	f000 fdcc 	bl	8010424 <malloc>
 800f88c:	4602      	mov	r2, r0
 800f88e:	6260      	str	r0, [r4, #36]	; 0x24
 800f890:	b920      	cbnz	r0, 800f89c <_Balloc+0x20>
 800f892:	4b18      	ldr	r3, [pc, #96]	; (800f8f4 <_Balloc+0x78>)
 800f894:	4818      	ldr	r0, [pc, #96]	; (800f8f8 <_Balloc+0x7c>)
 800f896:	2166      	movs	r1, #102	; 0x66
 800f898:	f000 fd94 	bl	80103c4 <__assert_func>
 800f89c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8a0:	6006      	str	r6, [r0, #0]
 800f8a2:	60c6      	str	r6, [r0, #12]
 800f8a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f8a6:	68f3      	ldr	r3, [r6, #12]
 800f8a8:	b183      	cbz	r3, 800f8cc <_Balloc+0x50>
 800f8aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8b2:	b9b8      	cbnz	r0, 800f8e4 <_Balloc+0x68>
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	fa01 f605 	lsl.w	r6, r1, r5
 800f8ba:	1d72      	adds	r2, r6, #5
 800f8bc:	0092      	lsls	r2, r2, #2
 800f8be:	4620      	mov	r0, r4
 800f8c0:	f000 fc9a 	bl	80101f8 <_calloc_r>
 800f8c4:	b160      	cbz	r0, 800f8e0 <_Balloc+0x64>
 800f8c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f8ca:	e00e      	b.n	800f8ea <_Balloc+0x6e>
 800f8cc:	2221      	movs	r2, #33	; 0x21
 800f8ce:	2104      	movs	r1, #4
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f000 fc91 	bl	80101f8 <_calloc_r>
 800f8d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8d8:	60f0      	str	r0, [r6, #12]
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d1e4      	bne.n	800f8aa <_Balloc+0x2e>
 800f8e0:	2000      	movs	r0, #0
 800f8e2:	bd70      	pop	{r4, r5, r6, pc}
 800f8e4:	6802      	ldr	r2, [r0, #0]
 800f8e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8f0:	e7f7      	b.n	800f8e2 <_Balloc+0x66>
 800f8f2:	bf00      	nop
 800f8f4:	08011cc4 	.word	0x08011cc4
 800f8f8:	08011cdb 	.word	0x08011cdb

0800f8fc <_Bfree>:
 800f8fc:	b570      	push	{r4, r5, r6, lr}
 800f8fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f900:	4605      	mov	r5, r0
 800f902:	460c      	mov	r4, r1
 800f904:	b976      	cbnz	r6, 800f924 <_Bfree+0x28>
 800f906:	2010      	movs	r0, #16
 800f908:	f000 fd8c 	bl	8010424 <malloc>
 800f90c:	4602      	mov	r2, r0
 800f90e:	6268      	str	r0, [r5, #36]	; 0x24
 800f910:	b920      	cbnz	r0, 800f91c <_Bfree+0x20>
 800f912:	4b09      	ldr	r3, [pc, #36]	; (800f938 <_Bfree+0x3c>)
 800f914:	4809      	ldr	r0, [pc, #36]	; (800f93c <_Bfree+0x40>)
 800f916:	218a      	movs	r1, #138	; 0x8a
 800f918:	f000 fd54 	bl	80103c4 <__assert_func>
 800f91c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f920:	6006      	str	r6, [r0, #0]
 800f922:	60c6      	str	r6, [r0, #12]
 800f924:	b13c      	cbz	r4, 800f936 <_Bfree+0x3a>
 800f926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f928:	6862      	ldr	r2, [r4, #4]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f930:	6021      	str	r1, [r4, #0]
 800f932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f936:	bd70      	pop	{r4, r5, r6, pc}
 800f938:	08011cc4 	.word	0x08011cc4
 800f93c:	08011cdb 	.word	0x08011cdb

0800f940 <__multadd>:
 800f940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f944:	690d      	ldr	r5, [r1, #16]
 800f946:	4607      	mov	r7, r0
 800f948:	460c      	mov	r4, r1
 800f94a:	461e      	mov	r6, r3
 800f94c:	f101 0c14 	add.w	ip, r1, #20
 800f950:	2000      	movs	r0, #0
 800f952:	f8dc 3000 	ldr.w	r3, [ip]
 800f956:	b299      	uxth	r1, r3
 800f958:	fb02 6101 	mla	r1, r2, r1, r6
 800f95c:	0c1e      	lsrs	r6, r3, #16
 800f95e:	0c0b      	lsrs	r3, r1, #16
 800f960:	fb02 3306 	mla	r3, r2, r6, r3
 800f964:	b289      	uxth	r1, r1
 800f966:	3001      	adds	r0, #1
 800f968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f96c:	4285      	cmp	r5, r0
 800f96e:	f84c 1b04 	str.w	r1, [ip], #4
 800f972:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f976:	dcec      	bgt.n	800f952 <__multadd+0x12>
 800f978:	b30e      	cbz	r6, 800f9be <__multadd+0x7e>
 800f97a:	68a3      	ldr	r3, [r4, #8]
 800f97c:	42ab      	cmp	r3, r5
 800f97e:	dc19      	bgt.n	800f9b4 <__multadd+0x74>
 800f980:	6861      	ldr	r1, [r4, #4]
 800f982:	4638      	mov	r0, r7
 800f984:	3101      	adds	r1, #1
 800f986:	f7ff ff79 	bl	800f87c <_Balloc>
 800f98a:	4680      	mov	r8, r0
 800f98c:	b928      	cbnz	r0, 800f99a <__multadd+0x5a>
 800f98e:	4602      	mov	r2, r0
 800f990:	4b0c      	ldr	r3, [pc, #48]	; (800f9c4 <__multadd+0x84>)
 800f992:	480d      	ldr	r0, [pc, #52]	; (800f9c8 <__multadd+0x88>)
 800f994:	21b5      	movs	r1, #181	; 0xb5
 800f996:	f000 fd15 	bl	80103c4 <__assert_func>
 800f99a:	6922      	ldr	r2, [r4, #16]
 800f99c:	3202      	adds	r2, #2
 800f99e:	f104 010c 	add.w	r1, r4, #12
 800f9a2:	0092      	lsls	r2, r2, #2
 800f9a4:	300c      	adds	r0, #12
 800f9a6:	f7ff ff5b 	bl	800f860 <memcpy>
 800f9aa:	4621      	mov	r1, r4
 800f9ac:	4638      	mov	r0, r7
 800f9ae:	f7ff ffa5 	bl	800f8fc <_Bfree>
 800f9b2:	4644      	mov	r4, r8
 800f9b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f9b8:	3501      	adds	r5, #1
 800f9ba:	615e      	str	r6, [r3, #20]
 800f9bc:	6125      	str	r5, [r4, #16]
 800f9be:	4620      	mov	r0, r4
 800f9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c4:	08011c38 	.word	0x08011c38
 800f9c8:	08011cdb 	.word	0x08011cdb

0800f9cc <__s2b>:
 800f9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9d0:	460c      	mov	r4, r1
 800f9d2:	4615      	mov	r5, r2
 800f9d4:	461f      	mov	r7, r3
 800f9d6:	2209      	movs	r2, #9
 800f9d8:	3308      	adds	r3, #8
 800f9da:	4606      	mov	r6, r0
 800f9dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9e0:	2100      	movs	r1, #0
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	db09      	blt.n	800f9fc <__s2b+0x30>
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f7ff ff47 	bl	800f87c <_Balloc>
 800f9ee:	b940      	cbnz	r0, 800fa02 <__s2b+0x36>
 800f9f0:	4602      	mov	r2, r0
 800f9f2:	4b19      	ldr	r3, [pc, #100]	; (800fa58 <__s2b+0x8c>)
 800f9f4:	4819      	ldr	r0, [pc, #100]	; (800fa5c <__s2b+0x90>)
 800f9f6:	21ce      	movs	r1, #206	; 0xce
 800f9f8:	f000 fce4 	bl	80103c4 <__assert_func>
 800f9fc:	0052      	lsls	r2, r2, #1
 800f9fe:	3101      	adds	r1, #1
 800fa00:	e7f0      	b.n	800f9e4 <__s2b+0x18>
 800fa02:	9b08      	ldr	r3, [sp, #32]
 800fa04:	6143      	str	r3, [r0, #20]
 800fa06:	2d09      	cmp	r5, #9
 800fa08:	f04f 0301 	mov.w	r3, #1
 800fa0c:	6103      	str	r3, [r0, #16]
 800fa0e:	dd16      	ble.n	800fa3e <__s2b+0x72>
 800fa10:	f104 0909 	add.w	r9, r4, #9
 800fa14:	46c8      	mov	r8, r9
 800fa16:	442c      	add	r4, r5
 800fa18:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa1c:	4601      	mov	r1, r0
 800fa1e:	3b30      	subs	r3, #48	; 0x30
 800fa20:	220a      	movs	r2, #10
 800fa22:	4630      	mov	r0, r6
 800fa24:	f7ff ff8c 	bl	800f940 <__multadd>
 800fa28:	45a0      	cmp	r8, r4
 800fa2a:	d1f5      	bne.n	800fa18 <__s2b+0x4c>
 800fa2c:	f1a5 0408 	sub.w	r4, r5, #8
 800fa30:	444c      	add	r4, r9
 800fa32:	1b2d      	subs	r5, r5, r4
 800fa34:	1963      	adds	r3, r4, r5
 800fa36:	42bb      	cmp	r3, r7
 800fa38:	db04      	blt.n	800fa44 <__s2b+0x78>
 800fa3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa3e:	340a      	adds	r4, #10
 800fa40:	2509      	movs	r5, #9
 800fa42:	e7f6      	b.n	800fa32 <__s2b+0x66>
 800fa44:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa48:	4601      	mov	r1, r0
 800fa4a:	3b30      	subs	r3, #48	; 0x30
 800fa4c:	220a      	movs	r2, #10
 800fa4e:	4630      	mov	r0, r6
 800fa50:	f7ff ff76 	bl	800f940 <__multadd>
 800fa54:	e7ee      	b.n	800fa34 <__s2b+0x68>
 800fa56:	bf00      	nop
 800fa58:	08011c38 	.word	0x08011c38
 800fa5c:	08011cdb 	.word	0x08011cdb

0800fa60 <__hi0bits>:
 800fa60:	0c03      	lsrs	r3, r0, #16
 800fa62:	041b      	lsls	r3, r3, #16
 800fa64:	b9d3      	cbnz	r3, 800fa9c <__hi0bits+0x3c>
 800fa66:	0400      	lsls	r0, r0, #16
 800fa68:	2310      	movs	r3, #16
 800fa6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fa6e:	bf04      	itt	eq
 800fa70:	0200      	lsleq	r0, r0, #8
 800fa72:	3308      	addeq	r3, #8
 800fa74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fa78:	bf04      	itt	eq
 800fa7a:	0100      	lsleq	r0, r0, #4
 800fa7c:	3304      	addeq	r3, #4
 800fa7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fa82:	bf04      	itt	eq
 800fa84:	0080      	lsleq	r0, r0, #2
 800fa86:	3302      	addeq	r3, #2
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	db05      	blt.n	800fa98 <__hi0bits+0x38>
 800fa8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fa90:	f103 0301 	add.w	r3, r3, #1
 800fa94:	bf08      	it	eq
 800fa96:	2320      	moveq	r3, #32
 800fa98:	4618      	mov	r0, r3
 800fa9a:	4770      	bx	lr
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	e7e4      	b.n	800fa6a <__hi0bits+0xa>

0800faa0 <__lo0bits>:
 800faa0:	6803      	ldr	r3, [r0, #0]
 800faa2:	f013 0207 	ands.w	r2, r3, #7
 800faa6:	4601      	mov	r1, r0
 800faa8:	d00b      	beq.n	800fac2 <__lo0bits+0x22>
 800faaa:	07da      	lsls	r2, r3, #31
 800faac:	d423      	bmi.n	800faf6 <__lo0bits+0x56>
 800faae:	0798      	lsls	r0, r3, #30
 800fab0:	bf49      	itett	mi
 800fab2:	085b      	lsrmi	r3, r3, #1
 800fab4:	089b      	lsrpl	r3, r3, #2
 800fab6:	2001      	movmi	r0, #1
 800fab8:	600b      	strmi	r3, [r1, #0]
 800faba:	bf5c      	itt	pl
 800fabc:	600b      	strpl	r3, [r1, #0]
 800fabe:	2002      	movpl	r0, #2
 800fac0:	4770      	bx	lr
 800fac2:	b298      	uxth	r0, r3
 800fac4:	b9a8      	cbnz	r0, 800faf2 <__lo0bits+0x52>
 800fac6:	0c1b      	lsrs	r3, r3, #16
 800fac8:	2010      	movs	r0, #16
 800faca:	b2da      	uxtb	r2, r3
 800facc:	b90a      	cbnz	r2, 800fad2 <__lo0bits+0x32>
 800face:	3008      	adds	r0, #8
 800fad0:	0a1b      	lsrs	r3, r3, #8
 800fad2:	071a      	lsls	r2, r3, #28
 800fad4:	bf04      	itt	eq
 800fad6:	091b      	lsreq	r3, r3, #4
 800fad8:	3004      	addeq	r0, #4
 800fada:	079a      	lsls	r2, r3, #30
 800fadc:	bf04      	itt	eq
 800fade:	089b      	lsreq	r3, r3, #2
 800fae0:	3002      	addeq	r0, #2
 800fae2:	07da      	lsls	r2, r3, #31
 800fae4:	d403      	bmi.n	800faee <__lo0bits+0x4e>
 800fae6:	085b      	lsrs	r3, r3, #1
 800fae8:	f100 0001 	add.w	r0, r0, #1
 800faec:	d005      	beq.n	800fafa <__lo0bits+0x5a>
 800faee:	600b      	str	r3, [r1, #0]
 800faf0:	4770      	bx	lr
 800faf2:	4610      	mov	r0, r2
 800faf4:	e7e9      	b.n	800faca <__lo0bits+0x2a>
 800faf6:	2000      	movs	r0, #0
 800faf8:	4770      	bx	lr
 800fafa:	2020      	movs	r0, #32
 800fafc:	4770      	bx	lr
	...

0800fb00 <__i2b>:
 800fb00:	b510      	push	{r4, lr}
 800fb02:	460c      	mov	r4, r1
 800fb04:	2101      	movs	r1, #1
 800fb06:	f7ff feb9 	bl	800f87c <_Balloc>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	b928      	cbnz	r0, 800fb1a <__i2b+0x1a>
 800fb0e:	4b05      	ldr	r3, [pc, #20]	; (800fb24 <__i2b+0x24>)
 800fb10:	4805      	ldr	r0, [pc, #20]	; (800fb28 <__i2b+0x28>)
 800fb12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fb16:	f000 fc55 	bl	80103c4 <__assert_func>
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	6144      	str	r4, [r0, #20]
 800fb1e:	6103      	str	r3, [r0, #16]
 800fb20:	bd10      	pop	{r4, pc}
 800fb22:	bf00      	nop
 800fb24:	08011c38 	.word	0x08011c38
 800fb28:	08011cdb 	.word	0x08011cdb

0800fb2c <__multiply>:
 800fb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb30:	4691      	mov	r9, r2
 800fb32:	690a      	ldr	r2, [r1, #16]
 800fb34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	bfb8      	it	lt
 800fb3c:	460b      	movlt	r3, r1
 800fb3e:	460c      	mov	r4, r1
 800fb40:	bfbc      	itt	lt
 800fb42:	464c      	movlt	r4, r9
 800fb44:	4699      	movlt	r9, r3
 800fb46:	6927      	ldr	r7, [r4, #16]
 800fb48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fb4c:	68a3      	ldr	r3, [r4, #8]
 800fb4e:	6861      	ldr	r1, [r4, #4]
 800fb50:	eb07 060a 	add.w	r6, r7, sl
 800fb54:	42b3      	cmp	r3, r6
 800fb56:	b085      	sub	sp, #20
 800fb58:	bfb8      	it	lt
 800fb5a:	3101      	addlt	r1, #1
 800fb5c:	f7ff fe8e 	bl	800f87c <_Balloc>
 800fb60:	b930      	cbnz	r0, 800fb70 <__multiply+0x44>
 800fb62:	4602      	mov	r2, r0
 800fb64:	4b44      	ldr	r3, [pc, #272]	; (800fc78 <__multiply+0x14c>)
 800fb66:	4845      	ldr	r0, [pc, #276]	; (800fc7c <__multiply+0x150>)
 800fb68:	f240 115d 	movw	r1, #349	; 0x15d
 800fb6c:	f000 fc2a 	bl	80103c4 <__assert_func>
 800fb70:	f100 0514 	add.w	r5, r0, #20
 800fb74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fb78:	462b      	mov	r3, r5
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	4543      	cmp	r3, r8
 800fb7e:	d321      	bcc.n	800fbc4 <__multiply+0x98>
 800fb80:	f104 0314 	add.w	r3, r4, #20
 800fb84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fb88:	f109 0314 	add.w	r3, r9, #20
 800fb8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fb90:	9202      	str	r2, [sp, #8]
 800fb92:	1b3a      	subs	r2, r7, r4
 800fb94:	3a15      	subs	r2, #21
 800fb96:	f022 0203 	bic.w	r2, r2, #3
 800fb9a:	3204      	adds	r2, #4
 800fb9c:	f104 0115 	add.w	r1, r4, #21
 800fba0:	428f      	cmp	r7, r1
 800fba2:	bf38      	it	cc
 800fba4:	2204      	movcc	r2, #4
 800fba6:	9201      	str	r2, [sp, #4]
 800fba8:	9a02      	ldr	r2, [sp, #8]
 800fbaa:	9303      	str	r3, [sp, #12]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d80c      	bhi.n	800fbca <__multiply+0x9e>
 800fbb0:	2e00      	cmp	r6, #0
 800fbb2:	dd03      	ble.n	800fbbc <__multiply+0x90>
 800fbb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d05a      	beq.n	800fc72 <__multiply+0x146>
 800fbbc:	6106      	str	r6, [r0, #16]
 800fbbe:	b005      	add	sp, #20
 800fbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc4:	f843 2b04 	str.w	r2, [r3], #4
 800fbc8:	e7d8      	b.n	800fb7c <__multiply+0x50>
 800fbca:	f8b3 a000 	ldrh.w	sl, [r3]
 800fbce:	f1ba 0f00 	cmp.w	sl, #0
 800fbd2:	d024      	beq.n	800fc1e <__multiply+0xf2>
 800fbd4:	f104 0e14 	add.w	lr, r4, #20
 800fbd8:	46a9      	mov	r9, r5
 800fbda:	f04f 0c00 	mov.w	ip, #0
 800fbde:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fbe2:	f8d9 1000 	ldr.w	r1, [r9]
 800fbe6:	fa1f fb82 	uxth.w	fp, r2
 800fbea:	b289      	uxth	r1, r1
 800fbec:	fb0a 110b 	mla	r1, sl, fp, r1
 800fbf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fbf4:	f8d9 2000 	ldr.w	r2, [r9]
 800fbf8:	4461      	add	r1, ip
 800fbfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fbfe:	fb0a c20b 	mla	r2, sl, fp, ip
 800fc02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fc06:	b289      	uxth	r1, r1
 800fc08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fc0c:	4577      	cmp	r7, lr
 800fc0e:	f849 1b04 	str.w	r1, [r9], #4
 800fc12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fc16:	d8e2      	bhi.n	800fbde <__multiply+0xb2>
 800fc18:	9a01      	ldr	r2, [sp, #4]
 800fc1a:	f845 c002 	str.w	ip, [r5, r2]
 800fc1e:	9a03      	ldr	r2, [sp, #12]
 800fc20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fc24:	3304      	adds	r3, #4
 800fc26:	f1b9 0f00 	cmp.w	r9, #0
 800fc2a:	d020      	beq.n	800fc6e <__multiply+0x142>
 800fc2c:	6829      	ldr	r1, [r5, #0]
 800fc2e:	f104 0c14 	add.w	ip, r4, #20
 800fc32:	46ae      	mov	lr, r5
 800fc34:	f04f 0a00 	mov.w	sl, #0
 800fc38:	f8bc b000 	ldrh.w	fp, [ip]
 800fc3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fc40:	fb09 220b 	mla	r2, r9, fp, r2
 800fc44:	4492      	add	sl, r2
 800fc46:	b289      	uxth	r1, r1
 800fc48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fc4c:	f84e 1b04 	str.w	r1, [lr], #4
 800fc50:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fc54:	f8be 1000 	ldrh.w	r1, [lr]
 800fc58:	0c12      	lsrs	r2, r2, #16
 800fc5a:	fb09 1102 	mla	r1, r9, r2, r1
 800fc5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fc62:	4567      	cmp	r7, ip
 800fc64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fc68:	d8e6      	bhi.n	800fc38 <__multiply+0x10c>
 800fc6a:	9a01      	ldr	r2, [sp, #4]
 800fc6c:	50a9      	str	r1, [r5, r2]
 800fc6e:	3504      	adds	r5, #4
 800fc70:	e79a      	b.n	800fba8 <__multiply+0x7c>
 800fc72:	3e01      	subs	r6, #1
 800fc74:	e79c      	b.n	800fbb0 <__multiply+0x84>
 800fc76:	bf00      	nop
 800fc78:	08011c38 	.word	0x08011c38
 800fc7c:	08011cdb 	.word	0x08011cdb

0800fc80 <__pow5mult>:
 800fc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc84:	4615      	mov	r5, r2
 800fc86:	f012 0203 	ands.w	r2, r2, #3
 800fc8a:	4606      	mov	r6, r0
 800fc8c:	460f      	mov	r7, r1
 800fc8e:	d007      	beq.n	800fca0 <__pow5mult+0x20>
 800fc90:	4c25      	ldr	r4, [pc, #148]	; (800fd28 <__pow5mult+0xa8>)
 800fc92:	3a01      	subs	r2, #1
 800fc94:	2300      	movs	r3, #0
 800fc96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc9a:	f7ff fe51 	bl	800f940 <__multadd>
 800fc9e:	4607      	mov	r7, r0
 800fca0:	10ad      	asrs	r5, r5, #2
 800fca2:	d03d      	beq.n	800fd20 <__pow5mult+0xa0>
 800fca4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fca6:	b97c      	cbnz	r4, 800fcc8 <__pow5mult+0x48>
 800fca8:	2010      	movs	r0, #16
 800fcaa:	f000 fbbb 	bl	8010424 <malloc>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	6270      	str	r0, [r6, #36]	; 0x24
 800fcb2:	b928      	cbnz	r0, 800fcc0 <__pow5mult+0x40>
 800fcb4:	4b1d      	ldr	r3, [pc, #116]	; (800fd2c <__pow5mult+0xac>)
 800fcb6:	481e      	ldr	r0, [pc, #120]	; (800fd30 <__pow5mult+0xb0>)
 800fcb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fcbc:	f000 fb82 	bl	80103c4 <__assert_func>
 800fcc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcc4:	6004      	str	r4, [r0, #0]
 800fcc6:	60c4      	str	r4, [r0, #12]
 800fcc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fccc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fcd0:	b94c      	cbnz	r4, 800fce6 <__pow5mult+0x66>
 800fcd2:	f240 2171 	movw	r1, #625	; 0x271
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	f7ff ff12 	bl	800fb00 <__i2b>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	f8c8 0008 	str.w	r0, [r8, #8]
 800fce2:	4604      	mov	r4, r0
 800fce4:	6003      	str	r3, [r0, #0]
 800fce6:	f04f 0900 	mov.w	r9, #0
 800fcea:	07eb      	lsls	r3, r5, #31
 800fcec:	d50a      	bpl.n	800fd04 <__pow5mult+0x84>
 800fcee:	4639      	mov	r1, r7
 800fcf0:	4622      	mov	r2, r4
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	f7ff ff1a 	bl	800fb2c <__multiply>
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	4680      	mov	r8, r0
 800fcfc:	4630      	mov	r0, r6
 800fcfe:	f7ff fdfd 	bl	800f8fc <_Bfree>
 800fd02:	4647      	mov	r7, r8
 800fd04:	106d      	asrs	r5, r5, #1
 800fd06:	d00b      	beq.n	800fd20 <__pow5mult+0xa0>
 800fd08:	6820      	ldr	r0, [r4, #0]
 800fd0a:	b938      	cbnz	r0, 800fd1c <__pow5mult+0x9c>
 800fd0c:	4622      	mov	r2, r4
 800fd0e:	4621      	mov	r1, r4
 800fd10:	4630      	mov	r0, r6
 800fd12:	f7ff ff0b 	bl	800fb2c <__multiply>
 800fd16:	6020      	str	r0, [r4, #0]
 800fd18:	f8c0 9000 	str.w	r9, [r0]
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	e7e4      	b.n	800fcea <__pow5mult+0x6a>
 800fd20:	4638      	mov	r0, r7
 800fd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd26:	bf00      	nop
 800fd28:	08011e28 	.word	0x08011e28
 800fd2c:	08011cc4 	.word	0x08011cc4
 800fd30:	08011cdb 	.word	0x08011cdb

0800fd34 <__lshift>:
 800fd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd38:	460c      	mov	r4, r1
 800fd3a:	6849      	ldr	r1, [r1, #4]
 800fd3c:	6923      	ldr	r3, [r4, #16]
 800fd3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd42:	68a3      	ldr	r3, [r4, #8]
 800fd44:	4607      	mov	r7, r0
 800fd46:	4691      	mov	r9, r2
 800fd48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd4c:	f108 0601 	add.w	r6, r8, #1
 800fd50:	42b3      	cmp	r3, r6
 800fd52:	db0b      	blt.n	800fd6c <__lshift+0x38>
 800fd54:	4638      	mov	r0, r7
 800fd56:	f7ff fd91 	bl	800f87c <_Balloc>
 800fd5a:	4605      	mov	r5, r0
 800fd5c:	b948      	cbnz	r0, 800fd72 <__lshift+0x3e>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	4b2a      	ldr	r3, [pc, #168]	; (800fe0c <__lshift+0xd8>)
 800fd62:	482b      	ldr	r0, [pc, #172]	; (800fe10 <__lshift+0xdc>)
 800fd64:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fd68:	f000 fb2c 	bl	80103c4 <__assert_func>
 800fd6c:	3101      	adds	r1, #1
 800fd6e:	005b      	lsls	r3, r3, #1
 800fd70:	e7ee      	b.n	800fd50 <__lshift+0x1c>
 800fd72:	2300      	movs	r3, #0
 800fd74:	f100 0114 	add.w	r1, r0, #20
 800fd78:	f100 0210 	add.w	r2, r0, #16
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	4553      	cmp	r3, sl
 800fd80:	db37      	blt.n	800fdf2 <__lshift+0xbe>
 800fd82:	6920      	ldr	r0, [r4, #16]
 800fd84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd88:	f104 0314 	add.w	r3, r4, #20
 800fd8c:	f019 091f 	ands.w	r9, r9, #31
 800fd90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fd98:	d02f      	beq.n	800fdfa <__lshift+0xc6>
 800fd9a:	f1c9 0e20 	rsb	lr, r9, #32
 800fd9e:	468a      	mov	sl, r1
 800fda0:	f04f 0c00 	mov.w	ip, #0
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	fa02 f209 	lsl.w	r2, r2, r9
 800fdaa:	ea42 020c 	orr.w	r2, r2, ip
 800fdae:	f84a 2b04 	str.w	r2, [sl], #4
 800fdb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdb6:	4298      	cmp	r0, r3
 800fdb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fdbc:	d8f2      	bhi.n	800fda4 <__lshift+0x70>
 800fdbe:	1b03      	subs	r3, r0, r4
 800fdc0:	3b15      	subs	r3, #21
 800fdc2:	f023 0303 	bic.w	r3, r3, #3
 800fdc6:	3304      	adds	r3, #4
 800fdc8:	f104 0215 	add.w	r2, r4, #21
 800fdcc:	4290      	cmp	r0, r2
 800fdce:	bf38      	it	cc
 800fdd0:	2304      	movcc	r3, #4
 800fdd2:	f841 c003 	str.w	ip, [r1, r3]
 800fdd6:	f1bc 0f00 	cmp.w	ip, #0
 800fdda:	d001      	beq.n	800fde0 <__lshift+0xac>
 800fddc:	f108 0602 	add.w	r6, r8, #2
 800fde0:	3e01      	subs	r6, #1
 800fde2:	4638      	mov	r0, r7
 800fde4:	612e      	str	r6, [r5, #16]
 800fde6:	4621      	mov	r1, r4
 800fde8:	f7ff fd88 	bl	800f8fc <_Bfree>
 800fdec:	4628      	mov	r0, r5
 800fdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	e7c1      	b.n	800fd7e <__lshift+0x4a>
 800fdfa:	3904      	subs	r1, #4
 800fdfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe00:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe04:	4298      	cmp	r0, r3
 800fe06:	d8f9      	bhi.n	800fdfc <__lshift+0xc8>
 800fe08:	e7ea      	b.n	800fde0 <__lshift+0xac>
 800fe0a:	bf00      	nop
 800fe0c:	08011c38 	.word	0x08011c38
 800fe10:	08011cdb 	.word	0x08011cdb

0800fe14 <__mcmp>:
 800fe14:	b530      	push	{r4, r5, lr}
 800fe16:	6902      	ldr	r2, [r0, #16]
 800fe18:	690c      	ldr	r4, [r1, #16]
 800fe1a:	1b12      	subs	r2, r2, r4
 800fe1c:	d10e      	bne.n	800fe3c <__mcmp+0x28>
 800fe1e:	f100 0314 	add.w	r3, r0, #20
 800fe22:	3114      	adds	r1, #20
 800fe24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fe28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fe2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fe30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fe34:	42a5      	cmp	r5, r4
 800fe36:	d003      	beq.n	800fe40 <__mcmp+0x2c>
 800fe38:	d305      	bcc.n	800fe46 <__mcmp+0x32>
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	4610      	mov	r0, r2
 800fe3e:	bd30      	pop	{r4, r5, pc}
 800fe40:	4283      	cmp	r3, r0
 800fe42:	d3f3      	bcc.n	800fe2c <__mcmp+0x18>
 800fe44:	e7fa      	b.n	800fe3c <__mcmp+0x28>
 800fe46:	f04f 32ff 	mov.w	r2, #4294967295
 800fe4a:	e7f7      	b.n	800fe3c <__mcmp+0x28>

0800fe4c <__mdiff>:
 800fe4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe50:	460c      	mov	r4, r1
 800fe52:	4606      	mov	r6, r0
 800fe54:	4611      	mov	r1, r2
 800fe56:	4620      	mov	r0, r4
 800fe58:	4690      	mov	r8, r2
 800fe5a:	f7ff ffdb 	bl	800fe14 <__mcmp>
 800fe5e:	1e05      	subs	r5, r0, #0
 800fe60:	d110      	bne.n	800fe84 <__mdiff+0x38>
 800fe62:	4629      	mov	r1, r5
 800fe64:	4630      	mov	r0, r6
 800fe66:	f7ff fd09 	bl	800f87c <_Balloc>
 800fe6a:	b930      	cbnz	r0, 800fe7a <__mdiff+0x2e>
 800fe6c:	4b3a      	ldr	r3, [pc, #232]	; (800ff58 <__mdiff+0x10c>)
 800fe6e:	4602      	mov	r2, r0
 800fe70:	f240 2132 	movw	r1, #562	; 0x232
 800fe74:	4839      	ldr	r0, [pc, #228]	; (800ff5c <__mdiff+0x110>)
 800fe76:	f000 faa5 	bl	80103c4 <__assert_func>
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe84:	bfa4      	itt	ge
 800fe86:	4643      	movge	r3, r8
 800fe88:	46a0      	movge	r8, r4
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fe90:	bfa6      	itte	ge
 800fe92:	461c      	movge	r4, r3
 800fe94:	2500      	movge	r5, #0
 800fe96:	2501      	movlt	r5, #1
 800fe98:	f7ff fcf0 	bl	800f87c <_Balloc>
 800fe9c:	b920      	cbnz	r0, 800fea8 <__mdiff+0x5c>
 800fe9e:	4b2e      	ldr	r3, [pc, #184]	; (800ff58 <__mdiff+0x10c>)
 800fea0:	4602      	mov	r2, r0
 800fea2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fea6:	e7e5      	b.n	800fe74 <__mdiff+0x28>
 800fea8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800feac:	6926      	ldr	r6, [r4, #16]
 800feae:	60c5      	str	r5, [r0, #12]
 800feb0:	f104 0914 	add.w	r9, r4, #20
 800feb4:	f108 0514 	add.w	r5, r8, #20
 800feb8:	f100 0e14 	add.w	lr, r0, #20
 800febc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fec0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fec4:	f108 0210 	add.w	r2, r8, #16
 800fec8:	46f2      	mov	sl, lr
 800feca:	2100      	movs	r1, #0
 800fecc:	f859 3b04 	ldr.w	r3, [r9], #4
 800fed0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fed4:	fa1f f883 	uxth.w	r8, r3
 800fed8:	fa11 f18b 	uxtah	r1, r1, fp
 800fedc:	0c1b      	lsrs	r3, r3, #16
 800fede:	eba1 0808 	sub.w	r8, r1, r8
 800fee2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fee6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800feea:	fa1f f888 	uxth.w	r8, r8
 800feee:	1419      	asrs	r1, r3, #16
 800fef0:	454e      	cmp	r6, r9
 800fef2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fef6:	f84a 3b04 	str.w	r3, [sl], #4
 800fefa:	d8e7      	bhi.n	800fecc <__mdiff+0x80>
 800fefc:	1b33      	subs	r3, r6, r4
 800fefe:	3b15      	subs	r3, #21
 800ff00:	f023 0303 	bic.w	r3, r3, #3
 800ff04:	3304      	adds	r3, #4
 800ff06:	3415      	adds	r4, #21
 800ff08:	42a6      	cmp	r6, r4
 800ff0a:	bf38      	it	cc
 800ff0c:	2304      	movcc	r3, #4
 800ff0e:	441d      	add	r5, r3
 800ff10:	4473      	add	r3, lr
 800ff12:	469e      	mov	lr, r3
 800ff14:	462e      	mov	r6, r5
 800ff16:	4566      	cmp	r6, ip
 800ff18:	d30e      	bcc.n	800ff38 <__mdiff+0xec>
 800ff1a:	f10c 0203 	add.w	r2, ip, #3
 800ff1e:	1b52      	subs	r2, r2, r5
 800ff20:	f022 0203 	bic.w	r2, r2, #3
 800ff24:	3d03      	subs	r5, #3
 800ff26:	45ac      	cmp	ip, r5
 800ff28:	bf38      	it	cc
 800ff2a:	2200      	movcc	r2, #0
 800ff2c:	441a      	add	r2, r3
 800ff2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ff32:	b17b      	cbz	r3, 800ff54 <__mdiff+0x108>
 800ff34:	6107      	str	r7, [r0, #16]
 800ff36:	e7a3      	b.n	800fe80 <__mdiff+0x34>
 800ff38:	f856 8b04 	ldr.w	r8, [r6], #4
 800ff3c:	fa11 f288 	uxtah	r2, r1, r8
 800ff40:	1414      	asrs	r4, r2, #16
 800ff42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ff46:	b292      	uxth	r2, r2
 800ff48:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ff4c:	f84e 2b04 	str.w	r2, [lr], #4
 800ff50:	1421      	asrs	r1, r4, #16
 800ff52:	e7e0      	b.n	800ff16 <__mdiff+0xca>
 800ff54:	3f01      	subs	r7, #1
 800ff56:	e7ea      	b.n	800ff2e <__mdiff+0xe2>
 800ff58:	08011c38 	.word	0x08011c38
 800ff5c:	08011cdb 	.word	0x08011cdb

0800ff60 <__ulp>:
 800ff60:	b082      	sub	sp, #8
 800ff62:	ed8d 0b00 	vstr	d0, [sp]
 800ff66:	9b01      	ldr	r3, [sp, #4]
 800ff68:	4912      	ldr	r1, [pc, #72]	; (800ffb4 <__ulp+0x54>)
 800ff6a:	4019      	ands	r1, r3
 800ff6c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ff70:	2900      	cmp	r1, #0
 800ff72:	dd05      	ble.n	800ff80 <__ulp+0x20>
 800ff74:	2200      	movs	r2, #0
 800ff76:	460b      	mov	r3, r1
 800ff78:	ec43 2b10 	vmov	d0, r2, r3
 800ff7c:	b002      	add	sp, #8
 800ff7e:	4770      	bx	lr
 800ff80:	4249      	negs	r1, r1
 800ff82:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ff86:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ff8a:	f04f 0200 	mov.w	r2, #0
 800ff8e:	f04f 0300 	mov.w	r3, #0
 800ff92:	da04      	bge.n	800ff9e <__ulp+0x3e>
 800ff94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ff98:	fa41 f300 	asr.w	r3, r1, r0
 800ff9c:	e7ec      	b.n	800ff78 <__ulp+0x18>
 800ff9e:	f1a0 0114 	sub.w	r1, r0, #20
 800ffa2:	291e      	cmp	r1, #30
 800ffa4:	bfda      	itte	le
 800ffa6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ffaa:	fa20 f101 	lsrle.w	r1, r0, r1
 800ffae:	2101      	movgt	r1, #1
 800ffb0:	460a      	mov	r2, r1
 800ffb2:	e7e1      	b.n	800ff78 <__ulp+0x18>
 800ffb4:	7ff00000 	.word	0x7ff00000

0800ffb8 <__b2d>:
 800ffb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffba:	6905      	ldr	r5, [r0, #16]
 800ffbc:	f100 0714 	add.w	r7, r0, #20
 800ffc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ffc4:	1f2e      	subs	r6, r5, #4
 800ffc6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f7ff fd48 	bl	800fa60 <__hi0bits>
 800ffd0:	f1c0 0320 	rsb	r3, r0, #32
 800ffd4:	280a      	cmp	r0, #10
 800ffd6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010054 <__b2d+0x9c>
 800ffda:	600b      	str	r3, [r1, #0]
 800ffdc:	dc14      	bgt.n	8010008 <__b2d+0x50>
 800ffde:	f1c0 0e0b 	rsb	lr, r0, #11
 800ffe2:	fa24 f10e 	lsr.w	r1, r4, lr
 800ffe6:	42b7      	cmp	r7, r6
 800ffe8:	ea41 030c 	orr.w	r3, r1, ip
 800ffec:	bf34      	ite	cc
 800ffee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fff2:	2100      	movcs	r1, #0
 800fff4:	3015      	adds	r0, #21
 800fff6:	fa04 f000 	lsl.w	r0, r4, r0
 800fffa:	fa21 f10e 	lsr.w	r1, r1, lr
 800fffe:	ea40 0201 	orr.w	r2, r0, r1
 8010002:	ec43 2b10 	vmov	d0, r2, r3
 8010006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010008:	42b7      	cmp	r7, r6
 801000a:	bf3a      	itte	cc
 801000c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010010:	f1a5 0608 	subcc.w	r6, r5, #8
 8010014:	2100      	movcs	r1, #0
 8010016:	380b      	subs	r0, #11
 8010018:	d017      	beq.n	801004a <__b2d+0x92>
 801001a:	f1c0 0c20 	rsb	ip, r0, #32
 801001e:	fa04 f500 	lsl.w	r5, r4, r0
 8010022:	42be      	cmp	r6, r7
 8010024:	fa21 f40c 	lsr.w	r4, r1, ip
 8010028:	ea45 0504 	orr.w	r5, r5, r4
 801002c:	bf8c      	ite	hi
 801002e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010032:	2400      	movls	r4, #0
 8010034:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010038:	fa01 f000 	lsl.w	r0, r1, r0
 801003c:	fa24 f40c 	lsr.w	r4, r4, ip
 8010040:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010044:	ea40 0204 	orr.w	r2, r0, r4
 8010048:	e7db      	b.n	8010002 <__b2d+0x4a>
 801004a:	ea44 030c 	orr.w	r3, r4, ip
 801004e:	460a      	mov	r2, r1
 8010050:	e7d7      	b.n	8010002 <__b2d+0x4a>
 8010052:	bf00      	nop
 8010054:	3ff00000 	.word	0x3ff00000

08010058 <__d2b>:
 8010058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801005c:	4689      	mov	r9, r1
 801005e:	2101      	movs	r1, #1
 8010060:	ec57 6b10 	vmov	r6, r7, d0
 8010064:	4690      	mov	r8, r2
 8010066:	f7ff fc09 	bl	800f87c <_Balloc>
 801006a:	4604      	mov	r4, r0
 801006c:	b930      	cbnz	r0, 801007c <__d2b+0x24>
 801006e:	4602      	mov	r2, r0
 8010070:	4b25      	ldr	r3, [pc, #148]	; (8010108 <__d2b+0xb0>)
 8010072:	4826      	ldr	r0, [pc, #152]	; (801010c <__d2b+0xb4>)
 8010074:	f240 310a 	movw	r1, #778	; 0x30a
 8010078:	f000 f9a4 	bl	80103c4 <__assert_func>
 801007c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010084:	bb35      	cbnz	r5, 80100d4 <__d2b+0x7c>
 8010086:	2e00      	cmp	r6, #0
 8010088:	9301      	str	r3, [sp, #4]
 801008a:	d028      	beq.n	80100de <__d2b+0x86>
 801008c:	4668      	mov	r0, sp
 801008e:	9600      	str	r6, [sp, #0]
 8010090:	f7ff fd06 	bl	800faa0 <__lo0bits>
 8010094:	9900      	ldr	r1, [sp, #0]
 8010096:	b300      	cbz	r0, 80100da <__d2b+0x82>
 8010098:	9a01      	ldr	r2, [sp, #4]
 801009a:	f1c0 0320 	rsb	r3, r0, #32
 801009e:	fa02 f303 	lsl.w	r3, r2, r3
 80100a2:	430b      	orrs	r3, r1
 80100a4:	40c2      	lsrs	r2, r0
 80100a6:	6163      	str	r3, [r4, #20]
 80100a8:	9201      	str	r2, [sp, #4]
 80100aa:	9b01      	ldr	r3, [sp, #4]
 80100ac:	61a3      	str	r3, [r4, #24]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	bf14      	ite	ne
 80100b2:	2202      	movne	r2, #2
 80100b4:	2201      	moveq	r2, #1
 80100b6:	6122      	str	r2, [r4, #16]
 80100b8:	b1d5      	cbz	r5, 80100f0 <__d2b+0x98>
 80100ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80100be:	4405      	add	r5, r0
 80100c0:	f8c9 5000 	str.w	r5, [r9]
 80100c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80100c8:	f8c8 0000 	str.w	r0, [r8]
 80100cc:	4620      	mov	r0, r4
 80100ce:	b003      	add	sp, #12
 80100d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80100d8:	e7d5      	b.n	8010086 <__d2b+0x2e>
 80100da:	6161      	str	r1, [r4, #20]
 80100dc:	e7e5      	b.n	80100aa <__d2b+0x52>
 80100de:	a801      	add	r0, sp, #4
 80100e0:	f7ff fcde 	bl	800faa0 <__lo0bits>
 80100e4:	9b01      	ldr	r3, [sp, #4]
 80100e6:	6163      	str	r3, [r4, #20]
 80100e8:	2201      	movs	r2, #1
 80100ea:	6122      	str	r2, [r4, #16]
 80100ec:	3020      	adds	r0, #32
 80100ee:	e7e3      	b.n	80100b8 <__d2b+0x60>
 80100f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80100f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80100f8:	f8c9 0000 	str.w	r0, [r9]
 80100fc:	6918      	ldr	r0, [r3, #16]
 80100fe:	f7ff fcaf 	bl	800fa60 <__hi0bits>
 8010102:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010106:	e7df      	b.n	80100c8 <__d2b+0x70>
 8010108:	08011c38 	.word	0x08011c38
 801010c:	08011cdb 	.word	0x08011cdb

08010110 <__ratio>:
 8010110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010114:	4688      	mov	r8, r1
 8010116:	4669      	mov	r1, sp
 8010118:	4681      	mov	r9, r0
 801011a:	f7ff ff4d 	bl	800ffb8 <__b2d>
 801011e:	a901      	add	r1, sp, #4
 8010120:	4640      	mov	r0, r8
 8010122:	ec55 4b10 	vmov	r4, r5, d0
 8010126:	ee10 aa10 	vmov	sl, s0
 801012a:	f7ff ff45 	bl	800ffb8 <__b2d>
 801012e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010132:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010136:	1a59      	subs	r1, r3, r1
 8010138:	e9dd 2300 	ldrd	r2, r3, [sp]
 801013c:	1ad3      	subs	r3, r2, r3
 801013e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010142:	ec57 6b10 	vmov	r6, r7, d0
 8010146:	2b00      	cmp	r3, #0
 8010148:	bfd6      	itet	le
 801014a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801014e:	462a      	movgt	r2, r5
 8010150:	463a      	movle	r2, r7
 8010152:	46ab      	mov	fp, r5
 8010154:	bfd6      	itet	le
 8010156:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801015a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801015e:	ee00 3a90 	vmovle	s1, r3
 8010162:	ec4b ab17 	vmov	d7, sl, fp
 8010166:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801016a:	b003      	add	sp, #12
 801016c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010170 <__copybits>:
 8010170:	3901      	subs	r1, #1
 8010172:	b570      	push	{r4, r5, r6, lr}
 8010174:	1149      	asrs	r1, r1, #5
 8010176:	6914      	ldr	r4, [r2, #16]
 8010178:	3101      	adds	r1, #1
 801017a:	f102 0314 	add.w	r3, r2, #20
 801017e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010182:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010186:	1f05      	subs	r5, r0, #4
 8010188:	42a3      	cmp	r3, r4
 801018a:	d30c      	bcc.n	80101a6 <__copybits+0x36>
 801018c:	1aa3      	subs	r3, r4, r2
 801018e:	3b11      	subs	r3, #17
 8010190:	f023 0303 	bic.w	r3, r3, #3
 8010194:	3211      	adds	r2, #17
 8010196:	42a2      	cmp	r2, r4
 8010198:	bf88      	it	hi
 801019a:	2300      	movhi	r3, #0
 801019c:	4418      	add	r0, r3
 801019e:	2300      	movs	r3, #0
 80101a0:	4288      	cmp	r0, r1
 80101a2:	d305      	bcc.n	80101b0 <__copybits+0x40>
 80101a4:	bd70      	pop	{r4, r5, r6, pc}
 80101a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80101aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80101ae:	e7eb      	b.n	8010188 <__copybits+0x18>
 80101b0:	f840 3b04 	str.w	r3, [r0], #4
 80101b4:	e7f4      	b.n	80101a0 <__copybits+0x30>

080101b6 <__any_on>:
 80101b6:	f100 0214 	add.w	r2, r0, #20
 80101ba:	6900      	ldr	r0, [r0, #16]
 80101bc:	114b      	asrs	r3, r1, #5
 80101be:	4298      	cmp	r0, r3
 80101c0:	b510      	push	{r4, lr}
 80101c2:	db11      	blt.n	80101e8 <__any_on+0x32>
 80101c4:	dd0a      	ble.n	80101dc <__any_on+0x26>
 80101c6:	f011 011f 	ands.w	r1, r1, #31
 80101ca:	d007      	beq.n	80101dc <__any_on+0x26>
 80101cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80101d0:	fa24 f001 	lsr.w	r0, r4, r1
 80101d4:	fa00 f101 	lsl.w	r1, r0, r1
 80101d8:	428c      	cmp	r4, r1
 80101da:	d10b      	bne.n	80101f4 <__any_on+0x3e>
 80101dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d803      	bhi.n	80101ec <__any_on+0x36>
 80101e4:	2000      	movs	r0, #0
 80101e6:	bd10      	pop	{r4, pc}
 80101e8:	4603      	mov	r3, r0
 80101ea:	e7f7      	b.n	80101dc <__any_on+0x26>
 80101ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101f0:	2900      	cmp	r1, #0
 80101f2:	d0f5      	beq.n	80101e0 <__any_on+0x2a>
 80101f4:	2001      	movs	r0, #1
 80101f6:	e7f6      	b.n	80101e6 <__any_on+0x30>

080101f8 <_calloc_r>:
 80101f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101fa:	fba1 2402 	umull	r2, r4, r1, r2
 80101fe:	b94c      	cbnz	r4, 8010214 <_calloc_r+0x1c>
 8010200:	4611      	mov	r1, r2
 8010202:	9201      	str	r2, [sp, #4]
 8010204:	f000 f82e 	bl	8010264 <_malloc_r>
 8010208:	9a01      	ldr	r2, [sp, #4]
 801020a:	4605      	mov	r5, r0
 801020c:	b930      	cbnz	r0, 801021c <_calloc_r+0x24>
 801020e:	4628      	mov	r0, r5
 8010210:	b003      	add	sp, #12
 8010212:	bd30      	pop	{r4, r5, pc}
 8010214:	220c      	movs	r2, #12
 8010216:	6002      	str	r2, [r0, #0]
 8010218:	2500      	movs	r5, #0
 801021a:	e7f8      	b.n	801020e <_calloc_r+0x16>
 801021c:	4621      	mov	r1, r4
 801021e:	f7fe f9b7 	bl	800e590 <memset>
 8010222:	e7f4      	b.n	801020e <_calloc_r+0x16>

08010224 <sbrk_aligned>:
 8010224:	b570      	push	{r4, r5, r6, lr}
 8010226:	4e0e      	ldr	r6, [pc, #56]	; (8010260 <sbrk_aligned+0x3c>)
 8010228:	460c      	mov	r4, r1
 801022a:	6831      	ldr	r1, [r6, #0]
 801022c:	4605      	mov	r5, r0
 801022e:	b911      	cbnz	r1, 8010236 <sbrk_aligned+0x12>
 8010230:	f000 f896 	bl	8010360 <_sbrk_r>
 8010234:	6030      	str	r0, [r6, #0]
 8010236:	4621      	mov	r1, r4
 8010238:	4628      	mov	r0, r5
 801023a:	f000 f891 	bl	8010360 <_sbrk_r>
 801023e:	1c43      	adds	r3, r0, #1
 8010240:	d00a      	beq.n	8010258 <sbrk_aligned+0x34>
 8010242:	1cc4      	adds	r4, r0, #3
 8010244:	f024 0403 	bic.w	r4, r4, #3
 8010248:	42a0      	cmp	r0, r4
 801024a:	d007      	beq.n	801025c <sbrk_aligned+0x38>
 801024c:	1a21      	subs	r1, r4, r0
 801024e:	4628      	mov	r0, r5
 8010250:	f000 f886 	bl	8010360 <_sbrk_r>
 8010254:	3001      	adds	r0, #1
 8010256:	d101      	bne.n	801025c <sbrk_aligned+0x38>
 8010258:	f04f 34ff 	mov.w	r4, #4294967295
 801025c:	4620      	mov	r0, r4
 801025e:	bd70      	pop	{r4, r5, r6, pc}
 8010260:	24000a50 	.word	0x24000a50

08010264 <_malloc_r>:
 8010264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010268:	1ccd      	adds	r5, r1, #3
 801026a:	f025 0503 	bic.w	r5, r5, #3
 801026e:	3508      	adds	r5, #8
 8010270:	2d0c      	cmp	r5, #12
 8010272:	bf38      	it	cc
 8010274:	250c      	movcc	r5, #12
 8010276:	2d00      	cmp	r5, #0
 8010278:	4607      	mov	r7, r0
 801027a:	db01      	blt.n	8010280 <_malloc_r+0x1c>
 801027c:	42a9      	cmp	r1, r5
 801027e:	d905      	bls.n	801028c <_malloc_r+0x28>
 8010280:	230c      	movs	r3, #12
 8010282:	603b      	str	r3, [r7, #0]
 8010284:	2600      	movs	r6, #0
 8010286:	4630      	mov	r0, r6
 8010288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801028c:	4e2e      	ldr	r6, [pc, #184]	; (8010348 <_malloc_r+0xe4>)
 801028e:	f000 f8d1 	bl	8010434 <__malloc_lock>
 8010292:	6833      	ldr	r3, [r6, #0]
 8010294:	461c      	mov	r4, r3
 8010296:	bb34      	cbnz	r4, 80102e6 <_malloc_r+0x82>
 8010298:	4629      	mov	r1, r5
 801029a:	4638      	mov	r0, r7
 801029c:	f7ff ffc2 	bl	8010224 <sbrk_aligned>
 80102a0:	1c43      	adds	r3, r0, #1
 80102a2:	4604      	mov	r4, r0
 80102a4:	d14d      	bne.n	8010342 <_malloc_r+0xde>
 80102a6:	6834      	ldr	r4, [r6, #0]
 80102a8:	4626      	mov	r6, r4
 80102aa:	2e00      	cmp	r6, #0
 80102ac:	d140      	bne.n	8010330 <_malloc_r+0xcc>
 80102ae:	6823      	ldr	r3, [r4, #0]
 80102b0:	4631      	mov	r1, r6
 80102b2:	4638      	mov	r0, r7
 80102b4:	eb04 0803 	add.w	r8, r4, r3
 80102b8:	f000 f852 	bl	8010360 <_sbrk_r>
 80102bc:	4580      	cmp	r8, r0
 80102be:	d13a      	bne.n	8010336 <_malloc_r+0xd2>
 80102c0:	6821      	ldr	r1, [r4, #0]
 80102c2:	3503      	adds	r5, #3
 80102c4:	1a6d      	subs	r5, r5, r1
 80102c6:	f025 0503 	bic.w	r5, r5, #3
 80102ca:	3508      	adds	r5, #8
 80102cc:	2d0c      	cmp	r5, #12
 80102ce:	bf38      	it	cc
 80102d0:	250c      	movcc	r5, #12
 80102d2:	4629      	mov	r1, r5
 80102d4:	4638      	mov	r0, r7
 80102d6:	f7ff ffa5 	bl	8010224 <sbrk_aligned>
 80102da:	3001      	adds	r0, #1
 80102dc:	d02b      	beq.n	8010336 <_malloc_r+0xd2>
 80102de:	6823      	ldr	r3, [r4, #0]
 80102e0:	442b      	add	r3, r5
 80102e2:	6023      	str	r3, [r4, #0]
 80102e4:	e00e      	b.n	8010304 <_malloc_r+0xa0>
 80102e6:	6822      	ldr	r2, [r4, #0]
 80102e8:	1b52      	subs	r2, r2, r5
 80102ea:	d41e      	bmi.n	801032a <_malloc_r+0xc6>
 80102ec:	2a0b      	cmp	r2, #11
 80102ee:	d916      	bls.n	801031e <_malloc_r+0xba>
 80102f0:	1961      	adds	r1, r4, r5
 80102f2:	42a3      	cmp	r3, r4
 80102f4:	6025      	str	r5, [r4, #0]
 80102f6:	bf18      	it	ne
 80102f8:	6059      	strne	r1, [r3, #4]
 80102fa:	6863      	ldr	r3, [r4, #4]
 80102fc:	bf08      	it	eq
 80102fe:	6031      	streq	r1, [r6, #0]
 8010300:	5162      	str	r2, [r4, r5]
 8010302:	604b      	str	r3, [r1, #4]
 8010304:	4638      	mov	r0, r7
 8010306:	f104 060b 	add.w	r6, r4, #11
 801030a:	f000 f899 	bl	8010440 <__malloc_unlock>
 801030e:	f026 0607 	bic.w	r6, r6, #7
 8010312:	1d23      	adds	r3, r4, #4
 8010314:	1af2      	subs	r2, r6, r3
 8010316:	d0b6      	beq.n	8010286 <_malloc_r+0x22>
 8010318:	1b9b      	subs	r3, r3, r6
 801031a:	50a3      	str	r3, [r4, r2]
 801031c:	e7b3      	b.n	8010286 <_malloc_r+0x22>
 801031e:	6862      	ldr	r2, [r4, #4]
 8010320:	42a3      	cmp	r3, r4
 8010322:	bf0c      	ite	eq
 8010324:	6032      	streq	r2, [r6, #0]
 8010326:	605a      	strne	r2, [r3, #4]
 8010328:	e7ec      	b.n	8010304 <_malloc_r+0xa0>
 801032a:	4623      	mov	r3, r4
 801032c:	6864      	ldr	r4, [r4, #4]
 801032e:	e7b2      	b.n	8010296 <_malloc_r+0x32>
 8010330:	4634      	mov	r4, r6
 8010332:	6876      	ldr	r6, [r6, #4]
 8010334:	e7b9      	b.n	80102aa <_malloc_r+0x46>
 8010336:	230c      	movs	r3, #12
 8010338:	603b      	str	r3, [r7, #0]
 801033a:	4638      	mov	r0, r7
 801033c:	f000 f880 	bl	8010440 <__malloc_unlock>
 8010340:	e7a1      	b.n	8010286 <_malloc_r+0x22>
 8010342:	6025      	str	r5, [r4, #0]
 8010344:	e7de      	b.n	8010304 <_malloc_r+0xa0>
 8010346:	bf00      	nop
 8010348:	24000a4c 	.word	0x24000a4c
 801034c:	00000000 	.word	0x00000000

08010350 <nan>:
 8010350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010358 <nan+0x8>
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop
 8010358:	00000000 	.word	0x00000000
 801035c:	7ff80000 	.word	0x7ff80000

08010360 <_sbrk_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4d06      	ldr	r5, [pc, #24]	; (801037c <_sbrk_r+0x1c>)
 8010364:	2300      	movs	r3, #0
 8010366:	4604      	mov	r4, r0
 8010368:	4608      	mov	r0, r1
 801036a:	602b      	str	r3, [r5, #0]
 801036c:	f7f3 fc60 	bl	8003c30 <_sbrk>
 8010370:	1c43      	adds	r3, r0, #1
 8010372:	d102      	bne.n	801037a <_sbrk_r+0x1a>
 8010374:	682b      	ldr	r3, [r5, #0]
 8010376:	b103      	cbz	r3, 801037a <_sbrk_r+0x1a>
 8010378:	6023      	str	r3, [r4, #0]
 801037a:	bd38      	pop	{r3, r4, r5, pc}
 801037c:	24000a54 	.word	0x24000a54

08010380 <strncmp>:
 8010380:	b510      	push	{r4, lr}
 8010382:	b17a      	cbz	r2, 80103a4 <strncmp+0x24>
 8010384:	4603      	mov	r3, r0
 8010386:	3901      	subs	r1, #1
 8010388:	1884      	adds	r4, r0, r2
 801038a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801038e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010392:	4290      	cmp	r0, r2
 8010394:	d101      	bne.n	801039a <strncmp+0x1a>
 8010396:	42a3      	cmp	r3, r4
 8010398:	d101      	bne.n	801039e <strncmp+0x1e>
 801039a:	1a80      	subs	r0, r0, r2
 801039c:	bd10      	pop	{r4, pc}
 801039e:	2800      	cmp	r0, #0
 80103a0:	d1f3      	bne.n	801038a <strncmp+0xa>
 80103a2:	e7fa      	b.n	801039a <strncmp+0x1a>
 80103a4:	4610      	mov	r0, r2
 80103a6:	e7f9      	b.n	801039c <strncmp+0x1c>

080103a8 <__ascii_wctomb>:
 80103a8:	b149      	cbz	r1, 80103be <__ascii_wctomb+0x16>
 80103aa:	2aff      	cmp	r2, #255	; 0xff
 80103ac:	bf85      	ittet	hi
 80103ae:	238a      	movhi	r3, #138	; 0x8a
 80103b0:	6003      	strhi	r3, [r0, #0]
 80103b2:	700a      	strbls	r2, [r1, #0]
 80103b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80103b8:	bf98      	it	ls
 80103ba:	2001      	movls	r0, #1
 80103bc:	4770      	bx	lr
 80103be:	4608      	mov	r0, r1
 80103c0:	4770      	bx	lr
	...

080103c4 <__assert_func>:
 80103c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103c6:	4614      	mov	r4, r2
 80103c8:	461a      	mov	r2, r3
 80103ca:	4b09      	ldr	r3, [pc, #36]	; (80103f0 <__assert_func+0x2c>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4605      	mov	r5, r0
 80103d0:	68d8      	ldr	r0, [r3, #12]
 80103d2:	b14c      	cbz	r4, 80103e8 <__assert_func+0x24>
 80103d4:	4b07      	ldr	r3, [pc, #28]	; (80103f4 <__assert_func+0x30>)
 80103d6:	9100      	str	r1, [sp, #0]
 80103d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80103dc:	4906      	ldr	r1, [pc, #24]	; (80103f8 <__assert_func+0x34>)
 80103de:	462b      	mov	r3, r5
 80103e0:	f000 f80e 	bl	8010400 <fiprintf>
 80103e4:	f000 fc2c 	bl	8010c40 <abort>
 80103e8:	4b04      	ldr	r3, [pc, #16]	; (80103fc <__assert_func+0x38>)
 80103ea:	461c      	mov	r4, r3
 80103ec:	e7f3      	b.n	80103d6 <__assert_func+0x12>
 80103ee:	bf00      	nop
 80103f0:	24000068 	.word	0x24000068
 80103f4:	08011e34 	.word	0x08011e34
 80103f8:	08011e41 	.word	0x08011e41
 80103fc:	08011e6f 	.word	0x08011e6f

08010400 <fiprintf>:
 8010400:	b40e      	push	{r1, r2, r3}
 8010402:	b503      	push	{r0, r1, lr}
 8010404:	4601      	mov	r1, r0
 8010406:	ab03      	add	r3, sp, #12
 8010408:	4805      	ldr	r0, [pc, #20]	; (8010420 <fiprintf+0x20>)
 801040a:	f853 2b04 	ldr.w	r2, [r3], #4
 801040e:	6800      	ldr	r0, [r0, #0]
 8010410:	9301      	str	r3, [sp, #4]
 8010412:	f000 f891 	bl	8010538 <_vfiprintf_r>
 8010416:	b002      	add	sp, #8
 8010418:	f85d eb04 	ldr.w	lr, [sp], #4
 801041c:	b003      	add	sp, #12
 801041e:	4770      	bx	lr
 8010420:	24000068 	.word	0x24000068

08010424 <malloc>:
 8010424:	4b02      	ldr	r3, [pc, #8]	; (8010430 <malloc+0xc>)
 8010426:	4601      	mov	r1, r0
 8010428:	6818      	ldr	r0, [r3, #0]
 801042a:	f7ff bf1b 	b.w	8010264 <_malloc_r>
 801042e:	bf00      	nop
 8010430:	24000068 	.word	0x24000068

08010434 <__malloc_lock>:
 8010434:	4801      	ldr	r0, [pc, #4]	; (801043c <__malloc_lock+0x8>)
 8010436:	f000 bdc3 	b.w	8010fc0 <__retarget_lock_acquire_recursive>
 801043a:	bf00      	nop
 801043c:	24000a58 	.word	0x24000a58

08010440 <__malloc_unlock>:
 8010440:	4801      	ldr	r0, [pc, #4]	; (8010448 <__malloc_unlock+0x8>)
 8010442:	f000 bdbe 	b.w	8010fc2 <__retarget_lock_release_recursive>
 8010446:	bf00      	nop
 8010448:	24000a58 	.word	0x24000a58

0801044c <_free_r>:
 801044c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801044e:	2900      	cmp	r1, #0
 8010450:	d044      	beq.n	80104dc <_free_r+0x90>
 8010452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010456:	9001      	str	r0, [sp, #4]
 8010458:	2b00      	cmp	r3, #0
 801045a:	f1a1 0404 	sub.w	r4, r1, #4
 801045e:	bfb8      	it	lt
 8010460:	18e4      	addlt	r4, r4, r3
 8010462:	f7ff ffe7 	bl	8010434 <__malloc_lock>
 8010466:	4a1e      	ldr	r2, [pc, #120]	; (80104e0 <_free_r+0x94>)
 8010468:	9801      	ldr	r0, [sp, #4]
 801046a:	6813      	ldr	r3, [r2, #0]
 801046c:	b933      	cbnz	r3, 801047c <_free_r+0x30>
 801046e:	6063      	str	r3, [r4, #4]
 8010470:	6014      	str	r4, [r2, #0]
 8010472:	b003      	add	sp, #12
 8010474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010478:	f7ff bfe2 	b.w	8010440 <__malloc_unlock>
 801047c:	42a3      	cmp	r3, r4
 801047e:	d908      	bls.n	8010492 <_free_r+0x46>
 8010480:	6825      	ldr	r5, [r4, #0]
 8010482:	1961      	adds	r1, r4, r5
 8010484:	428b      	cmp	r3, r1
 8010486:	bf01      	itttt	eq
 8010488:	6819      	ldreq	r1, [r3, #0]
 801048a:	685b      	ldreq	r3, [r3, #4]
 801048c:	1949      	addeq	r1, r1, r5
 801048e:	6021      	streq	r1, [r4, #0]
 8010490:	e7ed      	b.n	801046e <_free_r+0x22>
 8010492:	461a      	mov	r2, r3
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	b10b      	cbz	r3, 801049c <_free_r+0x50>
 8010498:	42a3      	cmp	r3, r4
 801049a:	d9fa      	bls.n	8010492 <_free_r+0x46>
 801049c:	6811      	ldr	r1, [r2, #0]
 801049e:	1855      	adds	r5, r2, r1
 80104a0:	42a5      	cmp	r5, r4
 80104a2:	d10b      	bne.n	80104bc <_free_r+0x70>
 80104a4:	6824      	ldr	r4, [r4, #0]
 80104a6:	4421      	add	r1, r4
 80104a8:	1854      	adds	r4, r2, r1
 80104aa:	42a3      	cmp	r3, r4
 80104ac:	6011      	str	r1, [r2, #0]
 80104ae:	d1e0      	bne.n	8010472 <_free_r+0x26>
 80104b0:	681c      	ldr	r4, [r3, #0]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	6053      	str	r3, [r2, #4]
 80104b6:	4421      	add	r1, r4
 80104b8:	6011      	str	r1, [r2, #0]
 80104ba:	e7da      	b.n	8010472 <_free_r+0x26>
 80104bc:	d902      	bls.n	80104c4 <_free_r+0x78>
 80104be:	230c      	movs	r3, #12
 80104c0:	6003      	str	r3, [r0, #0]
 80104c2:	e7d6      	b.n	8010472 <_free_r+0x26>
 80104c4:	6825      	ldr	r5, [r4, #0]
 80104c6:	1961      	adds	r1, r4, r5
 80104c8:	428b      	cmp	r3, r1
 80104ca:	bf04      	itt	eq
 80104cc:	6819      	ldreq	r1, [r3, #0]
 80104ce:	685b      	ldreq	r3, [r3, #4]
 80104d0:	6063      	str	r3, [r4, #4]
 80104d2:	bf04      	itt	eq
 80104d4:	1949      	addeq	r1, r1, r5
 80104d6:	6021      	streq	r1, [r4, #0]
 80104d8:	6054      	str	r4, [r2, #4]
 80104da:	e7ca      	b.n	8010472 <_free_r+0x26>
 80104dc:	b003      	add	sp, #12
 80104de:	bd30      	pop	{r4, r5, pc}
 80104e0:	24000a4c 	.word	0x24000a4c

080104e4 <__sfputc_r>:
 80104e4:	6893      	ldr	r3, [r2, #8]
 80104e6:	3b01      	subs	r3, #1
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	b410      	push	{r4}
 80104ec:	6093      	str	r3, [r2, #8]
 80104ee:	da08      	bge.n	8010502 <__sfputc_r+0x1e>
 80104f0:	6994      	ldr	r4, [r2, #24]
 80104f2:	42a3      	cmp	r3, r4
 80104f4:	db01      	blt.n	80104fa <__sfputc_r+0x16>
 80104f6:	290a      	cmp	r1, #10
 80104f8:	d103      	bne.n	8010502 <__sfputc_r+0x1e>
 80104fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104fe:	f000 badf 	b.w	8010ac0 <__swbuf_r>
 8010502:	6813      	ldr	r3, [r2, #0]
 8010504:	1c58      	adds	r0, r3, #1
 8010506:	6010      	str	r0, [r2, #0]
 8010508:	7019      	strb	r1, [r3, #0]
 801050a:	4608      	mov	r0, r1
 801050c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010510:	4770      	bx	lr

08010512 <__sfputs_r>:
 8010512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010514:	4606      	mov	r6, r0
 8010516:	460f      	mov	r7, r1
 8010518:	4614      	mov	r4, r2
 801051a:	18d5      	adds	r5, r2, r3
 801051c:	42ac      	cmp	r4, r5
 801051e:	d101      	bne.n	8010524 <__sfputs_r+0x12>
 8010520:	2000      	movs	r0, #0
 8010522:	e007      	b.n	8010534 <__sfputs_r+0x22>
 8010524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010528:	463a      	mov	r2, r7
 801052a:	4630      	mov	r0, r6
 801052c:	f7ff ffda 	bl	80104e4 <__sfputc_r>
 8010530:	1c43      	adds	r3, r0, #1
 8010532:	d1f3      	bne.n	801051c <__sfputs_r+0xa>
 8010534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010538 <_vfiprintf_r>:
 8010538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801053c:	460d      	mov	r5, r1
 801053e:	b09d      	sub	sp, #116	; 0x74
 8010540:	4614      	mov	r4, r2
 8010542:	4698      	mov	r8, r3
 8010544:	4606      	mov	r6, r0
 8010546:	b118      	cbz	r0, 8010550 <_vfiprintf_r+0x18>
 8010548:	6983      	ldr	r3, [r0, #24]
 801054a:	b90b      	cbnz	r3, 8010550 <_vfiprintf_r+0x18>
 801054c:	f000 fc9a 	bl	8010e84 <__sinit>
 8010550:	4b89      	ldr	r3, [pc, #548]	; (8010778 <_vfiprintf_r+0x240>)
 8010552:	429d      	cmp	r5, r3
 8010554:	d11b      	bne.n	801058e <_vfiprintf_r+0x56>
 8010556:	6875      	ldr	r5, [r6, #4]
 8010558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801055a:	07d9      	lsls	r1, r3, #31
 801055c:	d405      	bmi.n	801056a <_vfiprintf_r+0x32>
 801055e:	89ab      	ldrh	r3, [r5, #12]
 8010560:	059a      	lsls	r2, r3, #22
 8010562:	d402      	bmi.n	801056a <_vfiprintf_r+0x32>
 8010564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010566:	f000 fd2b 	bl	8010fc0 <__retarget_lock_acquire_recursive>
 801056a:	89ab      	ldrh	r3, [r5, #12]
 801056c:	071b      	lsls	r3, r3, #28
 801056e:	d501      	bpl.n	8010574 <_vfiprintf_r+0x3c>
 8010570:	692b      	ldr	r3, [r5, #16]
 8010572:	b9eb      	cbnz	r3, 80105b0 <_vfiprintf_r+0x78>
 8010574:	4629      	mov	r1, r5
 8010576:	4630      	mov	r0, r6
 8010578:	f000 faf4 	bl	8010b64 <__swsetup_r>
 801057c:	b1c0      	cbz	r0, 80105b0 <_vfiprintf_r+0x78>
 801057e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010580:	07dc      	lsls	r4, r3, #31
 8010582:	d50e      	bpl.n	80105a2 <_vfiprintf_r+0x6a>
 8010584:	f04f 30ff 	mov.w	r0, #4294967295
 8010588:	b01d      	add	sp, #116	; 0x74
 801058a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801058e:	4b7b      	ldr	r3, [pc, #492]	; (801077c <_vfiprintf_r+0x244>)
 8010590:	429d      	cmp	r5, r3
 8010592:	d101      	bne.n	8010598 <_vfiprintf_r+0x60>
 8010594:	68b5      	ldr	r5, [r6, #8]
 8010596:	e7df      	b.n	8010558 <_vfiprintf_r+0x20>
 8010598:	4b79      	ldr	r3, [pc, #484]	; (8010780 <_vfiprintf_r+0x248>)
 801059a:	429d      	cmp	r5, r3
 801059c:	bf08      	it	eq
 801059e:	68f5      	ldreq	r5, [r6, #12]
 80105a0:	e7da      	b.n	8010558 <_vfiprintf_r+0x20>
 80105a2:	89ab      	ldrh	r3, [r5, #12]
 80105a4:	0598      	lsls	r0, r3, #22
 80105a6:	d4ed      	bmi.n	8010584 <_vfiprintf_r+0x4c>
 80105a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105aa:	f000 fd0a 	bl	8010fc2 <__retarget_lock_release_recursive>
 80105ae:	e7e9      	b.n	8010584 <_vfiprintf_r+0x4c>
 80105b0:	2300      	movs	r3, #0
 80105b2:	9309      	str	r3, [sp, #36]	; 0x24
 80105b4:	2320      	movs	r3, #32
 80105b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80105be:	2330      	movs	r3, #48	; 0x30
 80105c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010784 <_vfiprintf_r+0x24c>
 80105c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105c8:	f04f 0901 	mov.w	r9, #1
 80105cc:	4623      	mov	r3, r4
 80105ce:	469a      	mov	sl, r3
 80105d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105d4:	b10a      	cbz	r2, 80105da <_vfiprintf_r+0xa2>
 80105d6:	2a25      	cmp	r2, #37	; 0x25
 80105d8:	d1f9      	bne.n	80105ce <_vfiprintf_r+0x96>
 80105da:	ebba 0b04 	subs.w	fp, sl, r4
 80105de:	d00b      	beq.n	80105f8 <_vfiprintf_r+0xc0>
 80105e0:	465b      	mov	r3, fp
 80105e2:	4622      	mov	r2, r4
 80105e4:	4629      	mov	r1, r5
 80105e6:	4630      	mov	r0, r6
 80105e8:	f7ff ff93 	bl	8010512 <__sfputs_r>
 80105ec:	3001      	adds	r0, #1
 80105ee:	f000 80aa 	beq.w	8010746 <_vfiprintf_r+0x20e>
 80105f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105f4:	445a      	add	r2, fp
 80105f6:	9209      	str	r2, [sp, #36]	; 0x24
 80105f8:	f89a 3000 	ldrb.w	r3, [sl]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	f000 80a2 	beq.w	8010746 <_vfiprintf_r+0x20e>
 8010602:	2300      	movs	r3, #0
 8010604:	f04f 32ff 	mov.w	r2, #4294967295
 8010608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801060c:	f10a 0a01 	add.w	sl, sl, #1
 8010610:	9304      	str	r3, [sp, #16]
 8010612:	9307      	str	r3, [sp, #28]
 8010614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010618:	931a      	str	r3, [sp, #104]	; 0x68
 801061a:	4654      	mov	r4, sl
 801061c:	2205      	movs	r2, #5
 801061e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010622:	4858      	ldr	r0, [pc, #352]	; (8010784 <_vfiprintf_r+0x24c>)
 8010624:	f7ef fe64 	bl	80002f0 <memchr>
 8010628:	9a04      	ldr	r2, [sp, #16]
 801062a:	b9d8      	cbnz	r0, 8010664 <_vfiprintf_r+0x12c>
 801062c:	06d1      	lsls	r1, r2, #27
 801062e:	bf44      	itt	mi
 8010630:	2320      	movmi	r3, #32
 8010632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010636:	0713      	lsls	r3, r2, #28
 8010638:	bf44      	itt	mi
 801063a:	232b      	movmi	r3, #43	; 0x2b
 801063c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010640:	f89a 3000 	ldrb.w	r3, [sl]
 8010644:	2b2a      	cmp	r3, #42	; 0x2a
 8010646:	d015      	beq.n	8010674 <_vfiprintf_r+0x13c>
 8010648:	9a07      	ldr	r2, [sp, #28]
 801064a:	4654      	mov	r4, sl
 801064c:	2000      	movs	r0, #0
 801064e:	f04f 0c0a 	mov.w	ip, #10
 8010652:	4621      	mov	r1, r4
 8010654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010658:	3b30      	subs	r3, #48	; 0x30
 801065a:	2b09      	cmp	r3, #9
 801065c:	d94e      	bls.n	80106fc <_vfiprintf_r+0x1c4>
 801065e:	b1b0      	cbz	r0, 801068e <_vfiprintf_r+0x156>
 8010660:	9207      	str	r2, [sp, #28]
 8010662:	e014      	b.n	801068e <_vfiprintf_r+0x156>
 8010664:	eba0 0308 	sub.w	r3, r0, r8
 8010668:	fa09 f303 	lsl.w	r3, r9, r3
 801066c:	4313      	orrs	r3, r2
 801066e:	9304      	str	r3, [sp, #16]
 8010670:	46a2      	mov	sl, r4
 8010672:	e7d2      	b.n	801061a <_vfiprintf_r+0xe2>
 8010674:	9b03      	ldr	r3, [sp, #12]
 8010676:	1d19      	adds	r1, r3, #4
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	9103      	str	r1, [sp, #12]
 801067c:	2b00      	cmp	r3, #0
 801067e:	bfbb      	ittet	lt
 8010680:	425b      	neglt	r3, r3
 8010682:	f042 0202 	orrlt.w	r2, r2, #2
 8010686:	9307      	strge	r3, [sp, #28]
 8010688:	9307      	strlt	r3, [sp, #28]
 801068a:	bfb8      	it	lt
 801068c:	9204      	strlt	r2, [sp, #16]
 801068e:	7823      	ldrb	r3, [r4, #0]
 8010690:	2b2e      	cmp	r3, #46	; 0x2e
 8010692:	d10c      	bne.n	80106ae <_vfiprintf_r+0x176>
 8010694:	7863      	ldrb	r3, [r4, #1]
 8010696:	2b2a      	cmp	r3, #42	; 0x2a
 8010698:	d135      	bne.n	8010706 <_vfiprintf_r+0x1ce>
 801069a:	9b03      	ldr	r3, [sp, #12]
 801069c:	1d1a      	adds	r2, r3, #4
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	9203      	str	r2, [sp, #12]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	bfb8      	it	lt
 80106a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80106aa:	3402      	adds	r4, #2
 80106ac:	9305      	str	r3, [sp, #20]
 80106ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010794 <_vfiprintf_r+0x25c>
 80106b2:	7821      	ldrb	r1, [r4, #0]
 80106b4:	2203      	movs	r2, #3
 80106b6:	4650      	mov	r0, sl
 80106b8:	f7ef fe1a 	bl	80002f0 <memchr>
 80106bc:	b140      	cbz	r0, 80106d0 <_vfiprintf_r+0x198>
 80106be:	2340      	movs	r3, #64	; 0x40
 80106c0:	eba0 000a 	sub.w	r0, r0, sl
 80106c4:	fa03 f000 	lsl.w	r0, r3, r0
 80106c8:	9b04      	ldr	r3, [sp, #16]
 80106ca:	4303      	orrs	r3, r0
 80106cc:	3401      	adds	r4, #1
 80106ce:	9304      	str	r3, [sp, #16]
 80106d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106d4:	482c      	ldr	r0, [pc, #176]	; (8010788 <_vfiprintf_r+0x250>)
 80106d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106da:	2206      	movs	r2, #6
 80106dc:	f7ef fe08 	bl	80002f0 <memchr>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	d03f      	beq.n	8010764 <_vfiprintf_r+0x22c>
 80106e4:	4b29      	ldr	r3, [pc, #164]	; (801078c <_vfiprintf_r+0x254>)
 80106e6:	bb1b      	cbnz	r3, 8010730 <_vfiprintf_r+0x1f8>
 80106e8:	9b03      	ldr	r3, [sp, #12]
 80106ea:	3307      	adds	r3, #7
 80106ec:	f023 0307 	bic.w	r3, r3, #7
 80106f0:	3308      	adds	r3, #8
 80106f2:	9303      	str	r3, [sp, #12]
 80106f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106f6:	443b      	add	r3, r7
 80106f8:	9309      	str	r3, [sp, #36]	; 0x24
 80106fa:	e767      	b.n	80105cc <_vfiprintf_r+0x94>
 80106fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010700:	460c      	mov	r4, r1
 8010702:	2001      	movs	r0, #1
 8010704:	e7a5      	b.n	8010652 <_vfiprintf_r+0x11a>
 8010706:	2300      	movs	r3, #0
 8010708:	3401      	adds	r4, #1
 801070a:	9305      	str	r3, [sp, #20]
 801070c:	4619      	mov	r1, r3
 801070e:	f04f 0c0a 	mov.w	ip, #10
 8010712:	4620      	mov	r0, r4
 8010714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010718:	3a30      	subs	r2, #48	; 0x30
 801071a:	2a09      	cmp	r2, #9
 801071c:	d903      	bls.n	8010726 <_vfiprintf_r+0x1ee>
 801071e:	2b00      	cmp	r3, #0
 8010720:	d0c5      	beq.n	80106ae <_vfiprintf_r+0x176>
 8010722:	9105      	str	r1, [sp, #20]
 8010724:	e7c3      	b.n	80106ae <_vfiprintf_r+0x176>
 8010726:	fb0c 2101 	mla	r1, ip, r1, r2
 801072a:	4604      	mov	r4, r0
 801072c:	2301      	movs	r3, #1
 801072e:	e7f0      	b.n	8010712 <_vfiprintf_r+0x1da>
 8010730:	ab03      	add	r3, sp, #12
 8010732:	9300      	str	r3, [sp, #0]
 8010734:	462a      	mov	r2, r5
 8010736:	4b16      	ldr	r3, [pc, #88]	; (8010790 <_vfiprintf_r+0x258>)
 8010738:	a904      	add	r1, sp, #16
 801073a:	4630      	mov	r0, r6
 801073c:	f3af 8000 	nop.w
 8010740:	4607      	mov	r7, r0
 8010742:	1c78      	adds	r0, r7, #1
 8010744:	d1d6      	bne.n	80106f4 <_vfiprintf_r+0x1bc>
 8010746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010748:	07d9      	lsls	r1, r3, #31
 801074a:	d405      	bmi.n	8010758 <_vfiprintf_r+0x220>
 801074c:	89ab      	ldrh	r3, [r5, #12]
 801074e:	059a      	lsls	r2, r3, #22
 8010750:	d402      	bmi.n	8010758 <_vfiprintf_r+0x220>
 8010752:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010754:	f000 fc35 	bl	8010fc2 <__retarget_lock_release_recursive>
 8010758:	89ab      	ldrh	r3, [r5, #12]
 801075a:	065b      	lsls	r3, r3, #25
 801075c:	f53f af12 	bmi.w	8010584 <_vfiprintf_r+0x4c>
 8010760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010762:	e711      	b.n	8010588 <_vfiprintf_r+0x50>
 8010764:	ab03      	add	r3, sp, #12
 8010766:	9300      	str	r3, [sp, #0]
 8010768:	462a      	mov	r2, r5
 801076a:	4b09      	ldr	r3, [pc, #36]	; (8010790 <_vfiprintf_r+0x258>)
 801076c:	a904      	add	r1, sp, #16
 801076e:	4630      	mov	r0, r6
 8010770:	f000 f880 	bl	8010874 <_printf_i>
 8010774:	e7e4      	b.n	8010740 <_vfiprintf_r+0x208>
 8010776:	bf00      	nop
 8010778:	08011fc4 	.word	0x08011fc4
 801077c:	08011fe4 	.word	0x08011fe4
 8010780:	08011fa4 	.word	0x08011fa4
 8010784:	08011f71 	.word	0x08011f71
 8010788:	08011f7b 	.word	0x08011f7b
 801078c:	00000000 	.word	0x00000000
 8010790:	08010513 	.word	0x08010513
 8010794:	08011f77 	.word	0x08011f77

08010798 <_printf_common>:
 8010798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801079c:	4616      	mov	r6, r2
 801079e:	4699      	mov	r9, r3
 80107a0:	688a      	ldr	r2, [r1, #8]
 80107a2:	690b      	ldr	r3, [r1, #16]
 80107a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80107a8:	4293      	cmp	r3, r2
 80107aa:	bfb8      	it	lt
 80107ac:	4613      	movlt	r3, r2
 80107ae:	6033      	str	r3, [r6, #0]
 80107b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80107b4:	4607      	mov	r7, r0
 80107b6:	460c      	mov	r4, r1
 80107b8:	b10a      	cbz	r2, 80107be <_printf_common+0x26>
 80107ba:	3301      	adds	r3, #1
 80107bc:	6033      	str	r3, [r6, #0]
 80107be:	6823      	ldr	r3, [r4, #0]
 80107c0:	0699      	lsls	r1, r3, #26
 80107c2:	bf42      	ittt	mi
 80107c4:	6833      	ldrmi	r3, [r6, #0]
 80107c6:	3302      	addmi	r3, #2
 80107c8:	6033      	strmi	r3, [r6, #0]
 80107ca:	6825      	ldr	r5, [r4, #0]
 80107cc:	f015 0506 	ands.w	r5, r5, #6
 80107d0:	d106      	bne.n	80107e0 <_printf_common+0x48>
 80107d2:	f104 0a19 	add.w	sl, r4, #25
 80107d6:	68e3      	ldr	r3, [r4, #12]
 80107d8:	6832      	ldr	r2, [r6, #0]
 80107da:	1a9b      	subs	r3, r3, r2
 80107dc:	42ab      	cmp	r3, r5
 80107de:	dc26      	bgt.n	801082e <_printf_common+0x96>
 80107e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80107e4:	1e13      	subs	r3, r2, #0
 80107e6:	6822      	ldr	r2, [r4, #0]
 80107e8:	bf18      	it	ne
 80107ea:	2301      	movne	r3, #1
 80107ec:	0692      	lsls	r2, r2, #26
 80107ee:	d42b      	bmi.n	8010848 <_printf_common+0xb0>
 80107f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80107f4:	4649      	mov	r1, r9
 80107f6:	4638      	mov	r0, r7
 80107f8:	47c0      	blx	r8
 80107fa:	3001      	adds	r0, #1
 80107fc:	d01e      	beq.n	801083c <_printf_common+0xa4>
 80107fe:	6823      	ldr	r3, [r4, #0]
 8010800:	68e5      	ldr	r5, [r4, #12]
 8010802:	6832      	ldr	r2, [r6, #0]
 8010804:	f003 0306 	and.w	r3, r3, #6
 8010808:	2b04      	cmp	r3, #4
 801080a:	bf08      	it	eq
 801080c:	1aad      	subeq	r5, r5, r2
 801080e:	68a3      	ldr	r3, [r4, #8]
 8010810:	6922      	ldr	r2, [r4, #16]
 8010812:	bf0c      	ite	eq
 8010814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010818:	2500      	movne	r5, #0
 801081a:	4293      	cmp	r3, r2
 801081c:	bfc4      	itt	gt
 801081e:	1a9b      	subgt	r3, r3, r2
 8010820:	18ed      	addgt	r5, r5, r3
 8010822:	2600      	movs	r6, #0
 8010824:	341a      	adds	r4, #26
 8010826:	42b5      	cmp	r5, r6
 8010828:	d11a      	bne.n	8010860 <_printf_common+0xc8>
 801082a:	2000      	movs	r0, #0
 801082c:	e008      	b.n	8010840 <_printf_common+0xa8>
 801082e:	2301      	movs	r3, #1
 8010830:	4652      	mov	r2, sl
 8010832:	4649      	mov	r1, r9
 8010834:	4638      	mov	r0, r7
 8010836:	47c0      	blx	r8
 8010838:	3001      	adds	r0, #1
 801083a:	d103      	bne.n	8010844 <_printf_common+0xac>
 801083c:	f04f 30ff 	mov.w	r0, #4294967295
 8010840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010844:	3501      	adds	r5, #1
 8010846:	e7c6      	b.n	80107d6 <_printf_common+0x3e>
 8010848:	18e1      	adds	r1, r4, r3
 801084a:	1c5a      	adds	r2, r3, #1
 801084c:	2030      	movs	r0, #48	; 0x30
 801084e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010852:	4422      	add	r2, r4
 8010854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801085c:	3302      	adds	r3, #2
 801085e:	e7c7      	b.n	80107f0 <_printf_common+0x58>
 8010860:	2301      	movs	r3, #1
 8010862:	4622      	mov	r2, r4
 8010864:	4649      	mov	r1, r9
 8010866:	4638      	mov	r0, r7
 8010868:	47c0      	blx	r8
 801086a:	3001      	adds	r0, #1
 801086c:	d0e6      	beq.n	801083c <_printf_common+0xa4>
 801086e:	3601      	adds	r6, #1
 8010870:	e7d9      	b.n	8010826 <_printf_common+0x8e>
	...

08010874 <_printf_i>:
 8010874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010878:	7e0f      	ldrb	r7, [r1, #24]
 801087a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801087c:	2f78      	cmp	r7, #120	; 0x78
 801087e:	4691      	mov	r9, r2
 8010880:	4680      	mov	r8, r0
 8010882:	460c      	mov	r4, r1
 8010884:	469a      	mov	sl, r3
 8010886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801088a:	d807      	bhi.n	801089c <_printf_i+0x28>
 801088c:	2f62      	cmp	r7, #98	; 0x62
 801088e:	d80a      	bhi.n	80108a6 <_printf_i+0x32>
 8010890:	2f00      	cmp	r7, #0
 8010892:	f000 80d8 	beq.w	8010a46 <_printf_i+0x1d2>
 8010896:	2f58      	cmp	r7, #88	; 0x58
 8010898:	f000 80a3 	beq.w	80109e2 <_printf_i+0x16e>
 801089c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80108a4:	e03a      	b.n	801091c <_printf_i+0xa8>
 80108a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80108aa:	2b15      	cmp	r3, #21
 80108ac:	d8f6      	bhi.n	801089c <_printf_i+0x28>
 80108ae:	a101      	add	r1, pc, #4	; (adr r1, 80108b4 <_printf_i+0x40>)
 80108b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80108b4:	0801090d 	.word	0x0801090d
 80108b8:	08010921 	.word	0x08010921
 80108bc:	0801089d 	.word	0x0801089d
 80108c0:	0801089d 	.word	0x0801089d
 80108c4:	0801089d 	.word	0x0801089d
 80108c8:	0801089d 	.word	0x0801089d
 80108cc:	08010921 	.word	0x08010921
 80108d0:	0801089d 	.word	0x0801089d
 80108d4:	0801089d 	.word	0x0801089d
 80108d8:	0801089d 	.word	0x0801089d
 80108dc:	0801089d 	.word	0x0801089d
 80108e0:	08010a2d 	.word	0x08010a2d
 80108e4:	08010951 	.word	0x08010951
 80108e8:	08010a0f 	.word	0x08010a0f
 80108ec:	0801089d 	.word	0x0801089d
 80108f0:	0801089d 	.word	0x0801089d
 80108f4:	08010a4f 	.word	0x08010a4f
 80108f8:	0801089d 	.word	0x0801089d
 80108fc:	08010951 	.word	0x08010951
 8010900:	0801089d 	.word	0x0801089d
 8010904:	0801089d 	.word	0x0801089d
 8010908:	08010a17 	.word	0x08010a17
 801090c:	682b      	ldr	r3, [r5, #0]
 801090e:	1d1a      	adds	r2, r3, #4
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	602a      	str	r2, [r5, #0]
 8010914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801091c:	2301      	movs	r3, #1
 801091e:	e0a3      	b.n	8010a68 <_printf_i+0x1f4>
 8010920:	6820      	ldr	r0, [r4, #0]
 8010922:	6829      	ldr	r1, [r5, #0]
 8010924:	0606      	lsls	r6, r0, #24
 8010926:	f101 0304 	add.w	r3, r1, #4
 801092a:	d50a      	bpl.n	8010942 <_printf_i+0xce>
 801092c:	680e      	ldr	r6, [r1, #0]
 801092e:	602b      	str	r3, [r5, #0]
 8010930:	2e00      	cmp	r6, #0
 8010932:	da03      	bge.n	801093c <_printf_i+0xc8>
 8010934:	232d      	movs	r3, #45	; 0x2d
 8010936:	4276      	negs	r6, r6
 8010938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801093c:	485e      	ldr	r0, [pc, #376]	; (8010ab8 <_printf_i+0x244>)
 801093e:	230a      	movs	r3, #10
 8010940:	e019      	b.n	8010976 <_printf_i+0x102>
 8010942:	680e      	ldr	r6, [r1, #0]
 8010944:	602b      	str	r3, [r5, #0]
 8010946:	f010 0f40 	tst.w	r0, #64	; 0x40
 801094a:	bf18      	it	ne
 801094c:	b236      	sxthne	r6, r6
 801094e:	e7ef      	b.n	8010930 <_printf_i+0xbc>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	6820      	ldr	r0, [r4, #0]
 8010954:	1d19      	adds	r1, r3, #4
 8010956:	6029      	str	r1, [r5, #0]
 8010958:	0601      	lsls	r1, r0, #24
 801095a:	d501      	bpl.n	8010960 <_printf_i+0xec>
 801095c:	681e      	ldr	r6, [r3, #0]
 801095e:	e002      	b.n	8010966 <_printf_i+0xf2>
 8010960:	0646      	lsls	r6, r0, #25
 8010962:	d5fb      	bpl.n	801095c <_printf_i+0xe8>
 8010964:	881e      	ldrh	r6, [r3, #0]
 8010966:	4854      	ldr	r0, [pc, #336]	; (8010ab8 <_printf_i+0x244>)
 8010968:	2f6f      	cmp	r7, #111	; 0x6f
 801096a:	bf0c      	ite	eq
 801096c:	2308      	moveq	r3, #8
 801096e:	230a      	movne	r3, #10
 8010970:	2100      	movs	r1, #0
 8010972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010976:	6865      	ldr	r5, [r4, #4]
 8010978:	60a5      	str	r5, [r4, #8]
 801097a:	2d00      	cmp	r5, #0
 801097c:	bfa2      	ittt	ge
 801097e:	6821      	ldrge	r1, [r4, #0]
 8010980:	f021 0104 	bicge.w	r1, r1, #4
 8010984:	6021      	strge	r1, [r4, #0]
 8010986:	b90e      	cbnz	r6, 801098c <_printf_i+0x118>
 8010988:	2d00      	cmp	r5, #0
 801098a:	d04d      	beq.n	8010a28 <_printf_i+0x1b4>
 801098c:	4615      	mov	r5, r2
 801098e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010992:	fb03 6711 	mls	r7, r3, r1, r6
 8010996:	5dc7      	ldrb	r7, [r0, r7]
 8010998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801099c:	4637      	mov	r7, r6
 801099e:	42bb      	cmp	r3, r7
 80109a0:	460e      	mov	r6, r1
 80109a2:	d9f4      	bls.n	801098e <_printf_i+0x11a>
 80109a4:	2b08      	cmp	r3, #8
 80109a6:	d10b      	bne.n	80109c0 <_printf_i+0x14c>
 80109a8:	6823      	ldr	r3, [r4, #0]
 80109aa:	07de      	lsls	r6, r3, #31
 80109ac:	d508      	bpl.n	80109c0 <_printf_i+0x14c>
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	6861      	ldr	r1, [r4, #4]
 80109b2:	4299      	cmp	r1, r3
 80109b4:	bfde      	ittt	le
 80109b6:	2330      	movle	r3, #48	; 0x30
 80109b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80109bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80109c0:	1b52      	subs	r2, r2, r5
 80109c2:	6122      	str	r2, [r4, #16]
 80109c4:	f8cd a000 	str.w	sl, [sp]
 80109c8:	464b      	mov	r3, r9
 80109ca:	aa03      	add	r2, sp, #12
 80109cc:	4621      	mov	r1, r4
 80109ce:	4640      	mov	r0, r8
 80109d0:	f7ff fee2 	bl	8010798 <_printf_common>
 80109d4:	3001      	adds	r0, #1
 80109d6:	d14c      	bne.n	8010a72 <_printf_i+0x1fe>
 80109d8:	f04f 30ff 	mov.w	r0, #4294967295
 80109dc:	b004      	add	sp, #16
 80109de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109e2:	4835      	ldr	r0, [pc, #212]	; (8010ab8 <_printf_i+0x244>)
 80109e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80109e8:	6829      	ldr	r1, [r5, #0]
 80109ea:	6823      	ldr	r3, [r4, #0]
 80109ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80109f0:	6029      	str	r1, [r5, #0]
 80109f2:	061d      	lsls	r5, r3, #24
 80109f4:	d514      	bpl.n	8010a20 <_printf_i+0x1ac>
 80109f6:	07df      	lsls	r7, r3, #31
 80109f8:	bf44      	itt	mi
 80109fa:	f043 0320 	orrmi.w	r3, r3, #32
 80109fe:	6023      	strmi	r3, [r4, #0]
 8010a00:	b91e      	cbnz	r6, 8010a0a <_printf_i+0x196>
 8010a02:	6823      	ldr	r3, [r4, #0]
 8010a04:	f023 0320 	bic.w	r3, r3, #32
 8010a08:	6023      	str	r3, [r4, #0]
 8010a0a:	2310      	movs	r3, #16
 8010a0c:	e7b0      	b.n	8010970 <_printf_i+0xfc>
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	f043 0320 	orr.w	r3, r3, #32
 8010a14:	6023      	str	r3, [r4, #0]
 8010a16:	2378      	movs	r3, #120	; 0x78
 8010a18:	4828      	ldr	r0, [pc, #160]	; (8010abc <_printf_i+0x248>)
 8010a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a1e:	e7e3      	b.n	80109e8 <_printf_i+0x174>
 8010a20:	0659      	lsls	r1, r3, #25
 8010a22:	bf48      	it	mi
 8010a24:	b2b6      	uxthmi	r6, r6
 8010a26:	e7e6      	b.n	80109f6 <_printf_i+0x182>
 8010a28:	4615      	mov	r5, r2
 8010a2a:	e7bb      	b.n	80109a4 <_printf_i+0x130>
 8010a2c:	682b      	ldr	r3, [r5, #0]
 8010a2e:	6826      	ldr	r6, [r4, #0]
 8010a30:	6961      	ldr	r1, [r4, #20]
 8010a32:	1d18      	adds	r0, r3, #4
 8010a34:	6028      	str	r0, [r5, #0]
 8010a36:	0635      	lsls	r5, r6, #24
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	d501      	bpl.n	8010a40 <_printf_i+0x1cc>
 8010a3c:	6019      	str	r1, [r3, #0]
 8010a3e:	e002      	b.n	8010a46 <_printf_i+0x1d2>
 8010a40:	0670      	lsls	r0, r6, #25
 8010a42:	d5fb      	bpl.n	8010a3c <_printf_i+0x1c8>
 8010a44:	8019      	strh	r1, [r3, #0]
 8010a46:	2300      	movs	r3, #0
 8010a48:	6123      	str	r3, [r4, #16]
 8010a4a:	4615      	mov	r5, r2
 8010a4c:	e7ba      	b.n	80109c4 <_printf_i+0x150>
 8010a4e:	682b      	ldr	r3, [r5, #0]
 8010a50:	1d1a      	adds	r2, r3, #4
 8010a52:	602a      	str	r2, [r5, #0]
 8010a54:	681d      	ldr	r5, [r3, #0]
 8010a56:	6862      	ldr	r2, [r4, #4]
 8010a58:	2100      	movs	r1, #0
 8010a5a:	4628      	mov	r0, r5
 8010a5c:	f7ef fc48 	bl	80002f0 <memchr>
 8010a60:	b108      	cbz	r0, 8010a66 <_printf_i+0x1f2>
 8010a62:	1b40      	subs	r0, r0, r5
 8010a64:	6060      	str	r0, [r4, #4]
 8010a66:	6863      	ldr	r3, [r4, #4]
 8010a68:	6123      	str	r3, [r4, #16]
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a70:	e7a8      	b.n	80109c4 <_printf_i+0x150>
 8010a72:	6923      	ldr	r3, [r4, #16]
 8010a74:	462a      	mov	r2, r5
 8010a76:	4649      	mov	r1, r9
 8010a78:	4640      	mov	r0, r8
 8010a7a:	47d0      	blx	sl
 8010a7c:	3001      	adds	r0, #1
 8010a7e:	d0ab      	beq.n	80109d8 <_printf_i+0x164>
 8010a80:	6823      	ldr	r3, [r4, #0]
 8010a82:	079b      	lsls	r3, r3, #30
 8010a84:	d413      	bmi.n	8010aae <_printf_i+0x23a>
 8010a86:	68e0      	ldr	r0, [r4, #12]
 8010a88:	9b03      	ldr	r3, [sp, #12]
 8010a8a:	4298      	cmp	r0, r3
 8010a8c:	bfb8      	it	lt
 8010a8e:	4618      	movlt	r0, r3
 8010a90:	e7a4      	b.n	80109dc <_printf_i+0x168>
 8010a92:	2301      	movs	r3, #1
 8010a94:	4632      	mov	r2, r6
 8010a96:	4649      	mov	r1, r9
 8010a98:	4640      	mov	r0, r8
 8010a9a:	47d0      	blx	sl
 8010a9c:	3001      	adds	r0, #1
 8010a9e:	d09b      	beq.n	80109d8 <_printf_i+0x164>
 8010aa0:	3501      	adds	r5, #1
 8010aa2:	68e3      	ldr	r3, [r4, #12]
 8010aa4:	9903      	ldr	r1, [sp, #12]
 8010aa6:	1a5b      	subs	r3, r3, r1
 8010aa8:	42ab      	cmp	r3, r5
 8010aaa:	dcf2      	bgt.n	8010a92 <_printf_i+0x21e>
 8010aac:	e7eb      	b.n	8010a86 <_printf_i+0x212>
 8010aae:	2500      	movs	r5, #0
 8010ab0:	f104 0619 	add.w	r6, r4, #25
 8010ab4:	e7f5      	b.n	8010aa2 <_printf_i+0x22e>
 8010ab6:	bf00      	nop
 8010ab8:	08011f82 	.word	0x08011f82
 8010abc:	08011f93 	.word	0x08011f93

08010ac0 <__swbuf_r>:
 8010ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ac2:	460e      	mov	r6, r1
 8010ac4:	4614      	mov	r4, r2
 8010ac6:	4605      	mov	r5, r0
 8010ac8:	b118      	cbz	r0, 8010ad2 <__swbuf_r+0x12>
 8010aca:	6983      	ldr	r3, [r0, #24]
 8010acc:	b90b      	cbnz	r3, 8010ad2 <__swbuf_r+0x12>
 8010ace:	f000 f9d9 	bl	8010e84 <__sinit>
 8010ad2:	4b21      	ldr	r3, [pc, #132]	; (8010b58 <__swbuf_r+0x98>)
 8010ad4:	429c      	cmp	r4, r3
 8010ad6:	d12b      	bne.n	8010b30 <__swbuf_r+0x70>
 8010ad8:	686c      	ldr	r4, [r5, #4]
 8010ada:	69a3      	ldr	r3, [r4, #24]
 8010adc:	60a3      	str	r3, [r4, #8]
 8010ade:	89a3      	ldrh	r3, [r4, #12]
 8010ae0:	071a      	lsls	r2, r3, #28
 8010ae2:	d52f      	bpl.n	8010b44 <__swbuf_r+0x84>
 8010ae4:	6923      	ldr	r3, [r4, #16]
 8010ae6:	b36b      	cbz	r3, 8010b44 <__swbuf_r+0x84>
 8010ae8:	6923      	ldr	r3, [r4, #16]
 8010aea:	6820      	ldr	r0, [r4, #0]
 8010aec:	1ac0      	subs	r0, r0, r3
 8010aee:	6963      	ldr	r3, [r4, #20]
 8010af0:	b2f6      	uxtb	r6, r6
 8010af2:	4283      	cmp	r3, r0
 8010af4:	4637      	mov	r7, r6
 8010af6:	dc04      	bgt.n	8010b02 <__swbuf_r+0x42>
 8010af8:	4621      	mov	r1, r4
 8010afa:	4628      	mov	r0, r5
 8010afc:	f000 f92e 	bl	8010d5c <_fflush_r>
 8010b00:	bb30      	cbnz	r0, 8010b50 <__swbuf_r+0x90>
 8010b02:	68a3      	ldr	r3, [r4, #8]
 8010b04:	3b01      	subs	r3, #1
 8010b06:	60a3      	str	r3, [r4, #8]
 8010b08:	6823      	ldr	r3, [r4, #0]
 8010b0a:	1c5a      	adds	r2, r3, #1
 8010b0c:	6022      	str	r2, [r4, #0]
 8010b0e:	701e      	strb	r6, [r3, #0]
 8010b10:	6963      	ldr	r3, [r4, #20]
 8010b12:	3001      	adds	r0, #1
 8010b14:	4283      	cmp	r3, r0
 8010b16:	d004      	beq.n	8010b22 <__swbuf_r+0x62>
 8010b18:	89a3      	ldrh	r3, [r4, #12]
 8010b1a:	07db      	lsls	r3, r3, #31
 8010b1c:	d506      	bpl.n	8010b2c <__swbuf_r+0x6c>
 8010b1e:	2e0a      	cmp	r6, #10
 8010b20:	d104      	bne.n	8010b2c <__swbuf_r+0x6c>
 8010b22:	4621      	mov	r1, r4
 8010b24:	4628      	mov	r0, r5
 8010b26:	f000 f919 	bl	8010d5c <_fflush_r>
 8010b2a:	b988      	cbnz	r0, 8010b50 <__swbuf_r+0x90>
 8010b2c:	4638      	mov	r0, r7
 8010b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b30:	4b0a      	ldr	r3, [pc, #40]	; (8010b5c <__swbuf_r+0x9c>)
 8010b32:	429c      	cmp	r4, r3
 8010b34:	d101      	bne.n	8010b3a <__swbuf_r+0x7a>
 8010b36:	68ac      	ldr	r4, [r5, #8]
 8010b38:	e7cf      	b.n	8010ada <__swbuf_r+0x1a>
 8010b3a:	4b09      	ldr	r3, [pc, #36]	; (8010b60 <__swbuf_r+0xa0>)
 8010b3c:	429c      	cmp	r4, r3
 8010b3e:	bf08      	it	eq
 8010b40:	68ec      	ldreq	r4, [r5, #12]
 8010b42:	e7ca      	b.n	8010ada <__swbuf_r+0x1a>
 8010b44:	4621      	mov	r1, r4
 8010b46:	4628      	mov	r0, r5
 8010b48:	f000 f80c 	bl	8010b64 <__swsetup_r>
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	d0cb      	beq.n	8010ae8 <__swbuf_r+0x28>
 8010b50:	f04f 37ff 	mov.w	r7, #4294967295
 8010b54:	e7ea      	b.n	8010b2c <__swbuf_r+0x6c>
 8010b56:	bf00      	nop
 8010b58:	08011fc4 	.word	0x08011fc4
 8010b5c:	08011fe4 	.word	0x08011fe4
 8010b60:	08011fa4 	.word	0x08011fa4

08010b64 <__swsetup_r>:
 8010b64:	4b32      	ldr	r3, [pc, #200]	; (8010c30 <__swsetup_r+0xcc>)
 8010b66:	b570      	push	{r4, r5, r6, lr}
 8010b68:	681d      	ldr	r5, [r3, #0]
 8010b6a:	4606      	mov	r6, r0
 8010b6c:	460c      	mov	r4, r1
 8010b6e:	b125      	cbz	r5, 8010b7a <__swsetup_r+0x16>
 8010b70:	69ab      	ldr	r3, [r5, #24]
 8010b72:	b913      	cbnz	r3, 8010b7a <__swsetup_r+0x16>
 8010b74:	4628      	mov	r0, r5
 8010b76:	f000 f985 	bl	8010e84 <__sinit>
 8010b7a:	4b2e      	ldr	r3, [pc, #184]	; (8010c34 <__swsetup_r+0xd0>)
 8010b7c:	429c      	cmp	r4, r3
 8010b7e:	d10f      	bne.n	8010ba0 <__swsetup_r+0x3c>
 8010b80:	686c      	ldr	r4, [r5, #4]
 8010b82:	89a3      	ldrh	r3, [r4, #12]
 8010b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b88:	0719      	lsls	r1, r3, #28
 8010b8a:	d42c      	bmi.n	8010be6 <__swsetup_r+0x82>
 8010b8c:	06dd      	lsls	r5, r3, #27
 8010b8e:	d411      	bmi.n	8010bb4 <__swsetup_r+0x50>
 8010b90:	2309      	movs	r3, #9
 8010b92:	6033      	str	r3, [r6, #0]
 8010b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b98:	81a3      	strh	r3, [r4, #12]
 8010b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b9e:	e03e      	b.n	8010c1e <__swsetup_r+0xba>
 8010ba0:	4b25      	ldr	r3, [pc, #148]	; (8010c38 <__swsetup_r+0xd4>)
 8010ba2:	429c      	cmp	r4, r3
 8010ba4:	d101      	bne.n	8010baa <__swsetup_r+0x46>
 8010ba6:	68ac      	ldr	r4, [r5, #8]
 8010ba8:	e7eb      	b.n	8010b82 <__swsetup_r+0x1e>
 8010baa:	4b24      	ldr	r3, [pc, #144]	; (8010c3c <__swsetup_r+0xd8>)
 8010bac:	429c      	cmp	r4, r3
 8010bae:	bf08      	it	eq
 8010bb0:	68ec      	ldreq	r4, [r5, #12]
 8010bb2:	e7e6      	b.n	8010b82 <__swsetup_r+0x1e>
 8010bb4:	0758      	lsls	r0, r3, #29
 8010bb6:	d512      	bpl.n	8010bde <__swsetup_r+0x7a>
 8010bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bba:	b141      	cbz	r1, 8010bce <__swsetup_r+0x6a>
 8010bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bc0:	4299      	cmp	r1, r3
 8010bc2:	d002      	beq.n	8010bca <__swsetup_r+0x66>
 8010bc4:	4630      	mov	r0, r6
 8010bc6:	f7ff fc41 	bl	801044c <_free_r>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8010bce:	89a3      	ldrh	r3, [r4, #12]
 8010bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010bd4:	81a3      	strh	r3, [r4, #12]
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	6063      	str	r3, [r4, #4]
 8010bda:	6923      	ldr	r3, [r4, #16]
 8010bdc:	6023      	str	r3, [r4, #0]
 8010bde:	89a3      	ldrh	r3, [r4, #12]
 8010be0:	f043 0308 	orr.w	r3, r3, #8
 8010be4:	81a3      	strh	r3, [r4, #12]
 8010be6:	6923      	ldr	r3, [r4, #16]
 8010be8:	b94b      	cbnz	r3, 8010bfe <__swsetup_r+0x9a>
 8010bea:	89a3      	ldrh	r3, [r4, #12]
 8010bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bf4:	d003      	beq.n	8010bfe <__swsetup_r+0x9a>
 8010bf6:	4621      	mov	r1, r4
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	f000 fa09 	bl	8011010 <__smakebuf_r>
 8010bfe:	89a0      	ldrh	r0, [r4, #12]
 8010c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c04:	f010 0301 	ands.w	r3, r0, #1
 8010c08:	d00a      	beq.n	8010c20 <__swsetup_r+0xbc>
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	60a3      	str	r3, [r4, #8]
 8010c0e:	6963      	ldr	r3, [r4, #20]
 8010c10:	425b      	negs	r3, r3
 8010c12:	61a3      	str	r3, [r4, #24]
 8010c14:	6923      	ldr	r3, [r4, #16]
 8010c16:	b943      	cbnz	r3, 8010c2a <__swsetup_r+0xc6>
 8010c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c1c:	d1ba      	bne.n	8010b94 <__swsetup_r+0x30>
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}
 8010c20:	0781      	lsls	r1, r0, #30
 8010c22:	bf58      	it	pl
 8010c24:	6963      	ldrpl	r3, [r4, #20]
 8010c26:	60a3      	str	r3, [r4, #8]
 8010c28:	e7f4      	b.n	8010c14 <__swsetup_r+0xb0>
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	e7f7      	b.n	8010c1e <__swsetup_r+0xba>
 8010c2e:	bf00      	nop
 8010c30:	24000068 	.word	0x24000068
 8010c34:	08011fc4 	.word	0x08011fc4
 8010c38:	08011fe4 	.word	0x08011fe4
 8010c3c:	08011fa4 	.word	0x08011fa4

08010c40 <abort>:
 8010c40:	b508      	push	{r3, lr}
 8010c42:	2006      	movs	r0, #6
 8010c44:	f000 fa4c 	bl	80110e0 <raise>
 8010c48:	2001      	movs	r0, #1
 8010c4a:	f7f2 ff79 	bl	8003b40 <_exit>
	...

08010c50 <__sflush_r>:
 8010c50:	898a      	ldrh	r2, [r1, #12]
 8010c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c56:	4605      	mov	r5, r0
 8010c58:	0710      	lsls	r0, r2, #28
 8010c5a:	460c      	mov	r4, r1
 8010c5c:	d458      	bmi.n	8010d10 <__sflush_r+0xc0>
 8010c5e:	684b      	ldr	r3, [r1, #4]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	dc05      	bgt.n	8010c70 <__sflush_r+0x20>
 8010c64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	dc02      	bgt.n	8010c70 <__sflush_r+0x20>
 8010c6a:	2000      	movs	r0, #0
 8010c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c72:	2e00      	cmp	r6, #0
 8010c74:	d0f9      	beq.n	8010c6a <__sflush_r+0x1a>
 8010c76:	2300      	movs	r3, #0
 8010c78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c7c:	682f      	ldr	r7, [r5, #0]
 8010c7e:	602b      	str	r3, [r5, #0]
 8010c80:	d032      	beq.n	8010ce8 <__sflush_r+0x98>
 8010c82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c84:	89a3      	ldrh	r3, [r4, #12]
 8010c86:	075a      	lsls	r2, r3, #29
 8010c88:	d505      	bpl.n	8010c96 <__sflush_r+0x46>
 8010c8a:	6863      	ldr	r3, [r4, #4]
 8010c8c:	1ac0      	subs	r0, r0, r3
 8010c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c90:	b10b      	cbz	r3, 8010c96 <__sflush_r+0x46>
 8010c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c94:	1ac0      	subs	r0, r0, r3
 8010c96:	2300      	movs	r3, #0
 8010c98:	4602      	mov	r2, r0
 8010c9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c9c:	6a21      	ldr	r1, [r4, #32]
 8010c9e:	4628      	mov	r0, r5
 8010ca0:	47b0      	blx	r6
 8010ca2:	1c43      	adds	r3, r0, #1
 8010ca4:	89a3      	ldrh	r3, [r4, #12]
 8010ca6:	d106      	bne.n	8010cb6 <__sflush_r+0x66>
 8010ca8:	6829      	ldr	r1, [r5, #0]
 8010caa:	291d      	cmp	r1, #29
 8010cac:	d82c      	bhi.n	8010d08 <__sflush_r+0xb8>
 8010cae:	4a2a      	ldr	r2, [pc, #168]	; (8010d58 <__sflush_r+0x108>)
 8010cb0:	40ca      	lsrs	r2, r1
 8010cb2:	07d6      	lsls	r6, r2, #31
 8010cb4:	d528      	bpl.n	8010d08 <__sflush_r+0xb8>
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	6062      	str	r2, [r4, #4]
 8010cba:	04d9      	lsls	r1, r3, #19
 8010cbc:	6922      	ldr	r2, [r4, #16]
 8010cbe:	6022      	str	r2, [r4, #0]
 8010cc0:	d504      	bpl.n	8010ccc <__sflush_r+0x7c>
 8010cc2:	1c42      	adds	r2, r0, #1
 8010cc4:	d101      	bne.n	8010cca <__sflush_r+0x7a>
 8010cc6:	682b      	ldr	r3, [r5, #0]
 8010cc8:	b903      	cbnz	r3, 8010ccc <__sflush_r+0x7c>
 8010cca:	6560      	str	r0, [r4, #84]	; 0x54
 8010ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cce:	602f      	str	r7, [r5, #0]
 8010cd0:	2900      	cmp	r1, #0
 8010cd2:	d0ca      	beq.n	8010c6a <__sflush_r+0x1a>
 8010cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cd8:	4299      	cmp	r1, r3
 8010cda:	d002      	beq.n	8010ce2 <__sflush_r+0x92>
 8010cdc:	4628      	mov	r0, r5
 8010cde:	f7ff fbb5 	bl	801044c <_free_r>
 8010ce2:	2000      	movs	r0, #0
 8010ce4:	6360      	str	r0, [r4, #52]	; 0x34
 8010ce6:	e7c1      	b.n	8010c6c <__sflush_r+0x1c>
 8010ce8:	6a21      	ldr	r1, [r4, #32]
 8010cea:	2301      	movs	r3, #1
 8010cec:	4628      	mov	r0, r5
 8010cee:	47b0      	blx	r6
 8010cf0:	1c41      	adds	r1, r0, #1
 8010cf2:	d1c7      	bne.n	8010c84 <__sflush_r+0x34>
 8010cf4:	682b      	ldr	r3, [r5, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d0c4      	beq.n	8010c84 <__sflush_r+0x34>
 8010cfa:	2b1d      	cmp	r3, #29
 8010cfc:	d001      	beq.n	8010d02 <__sflush_r+0xb2>
 8010cfe:	2b16      	cmp	r3, #22
 8010d00:	d101      	bne.n	8010d06 <__sflush_r+0xb6>
 8010d02:	602f      	str	r7, [r5, #0]
 8010d04:	e7b1      	b.n	8010c6a <__sflush_r+0x1a>
 8010d06:	89a3      	ldrh	r3, [r4, #12]
 8010d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d0c:	81a3      	strh	r3, [r4, #12]
 8010d0e:	e7ad      	b.n	8010c6c <__sflush_r+0x1c>
 8010d10:	690f      	ldr	r7, [r1, #16]
 8010d12:	2f00      	cmp	r7, #0
 8010d14:	d0a9      	beq.n	8010c6a <__sflush_r+0x1a>
 8010d16:	0793      	lsls	r3, r2, #30
 8010d18:	680e      	ldr	r6, [r1, #0]
 8010d1a:	bf08      	it	eq
 8010d1c:	694b      	ldreq	r3, [r1, #20]
 8010d1e:	600f      	str	r7, [r1, #0]
 8010d20:	bf18      	it	ne
 8010d22:	2300      	movne	r3, #0
 8010d24:	eba6 0807 	sub.w	r8, r6, r7
 8010d28:	608b      	str	r3, [r1, #8]
 8010d2a:	f1b8 0f00 	cmp.w	r8, #0
 8010d2e:	dd9c      	ble.n	8010c6a <__sflush_r+0x1a>
 8010d30:	6a21      	ldr	r1, [r4, #32]
 8010d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d34:	4643      	mov	r3, r8
 8010d36:	463a      	mov	r2, r7
 8010d38:	4628      	mov	r0, r5
 8010d3a:	47b0      	blx	r6
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	dc06      	bgt.n	8010d4e <__sflush_r+0xfe>
 8010d40:	89a3      	ldrh	r3, [r4, #12]
 8010d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d46:	81a3      	strh	r3, [r4, #12]
 8010d48:	f04f 30ff 	mov.w	r0, #4294967295
 8010d4c:	e78e      	b.n	8010c6c <__sflush_r+0x1c>
 8010d4e:	4407      	add	r7, r0
 8010d50:	eba8 0800 	sub.w	r8, r8, r0
 8010d54:	e7e9      	b.n	8010d2a <__sflush_r+0xda>
 8010d56:	bf00      	nop
 8010d58:	20400001 	.word	0x20400001

08010d5c <_fflush_r>:
 8010d5c:	b538      	push	{r3, r4, r5, lr}
 8010d5e:	690b      	ldr	r3, [r1, #16]
 8010d60:	4605      	mov	r5, r0
 8010d62:	460c      	mov	r4, r1
 8010d64:	b913      	cbnz	r3, 8010d6c <_fflush_r+0x10>
 8010d66:	2500      	movs	r5, #0
 8010d68:	4628      	mov	r0, r5
 8010d6a:	bd38      	pop	{r3, r4, r5, pc}
 8010d6c:	b118      	cbz	r0, 8010d76 <_fflush_r+0x1a>
 8010d6e:	6983      	ldr	r3, [r0, #24]
 8010d70:	b90b      	cbnz	r3, 8010d76 <_fflush_r+0x1a>
 8010d72:	f000 f887 	bl	8010e84 <__sinit>
 8010d76:	4b14      	ldr	r3, [pc, #80]	; (8010dc8 <_fflush_r+0x6c>)
 8010d78:	429c      	cmp	r4, r3
 8010d7a:	d11b      	bne.n	8010db4 <_fflush_r+0x58>
 8010d7c:	686c      	ldr	r4, [r5, #4]
 8010d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d0ef      	beq.n	8010d66 <_fflush_r+0xa>
 8010d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d88:	07d0      	lsls	r0, r2, #31
 8010d8a:	d404      	bmi.n	8010d96 <_fflush_r+0x3a>
 8010d8c:	0599      	lsls	r1, r3, #22
 8010d8e:	d402      	bmi.n	8010d96 <_fflush_r+0x3a>
 8010d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d92:	f000 f915 	bl	8010fc0 <__retarget_lock_acquire_recursive>
 8010d96:	4628      	mov	r0, r5
 8010d98:	4621      	mov	r1, r4
 8010d9a:	f7ff ff59 	bl	8010c50 <__sflush_r>
 8010d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010da0:	07da      	lsls	r2, r3, #31
 8010da2:	4605      	mov	r5, r0
 8010da4:	d4e0      	bmi.n	8010d68 <_fflush_r+0xc>
 8010da6:	89a3      	ldrh	r3, [r4, #12]
 8010da8:	059b      	lsls	r3, r3, #22
 8010daa:	d4dd      	bmi.n	8010d68 <_fflush_r+0xc>
 8010dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dae:	f000 f908 	bl	8010fc2 <__retarget_lock_release_recursive>
 8010db2:	e7d9      	b.n	8010d68 <_fflush_r+0xc>
 8010db4:	4b05      	ldr	r3, [pc, #20]	; (8010dcc <_fflush_r+0x70>)
 8010db6:	429c      	cmp	r4, r3
 8010db8:	d101      	bne.n	8010dbe <_fflush_r+0x62>
 8010dba:	68ac      	ldr	r4, [r5, #8]
 8010dbc:	e7df      	b.n	8010d7e <_fflush_r+0x22>
 8010dbe:	4b04      	ldr	r3, [pc, #16]	; (8010dd0 <_fflush_r+0x74>)
 8010dc0:	429c      	cmp	r4, r3
 8010dc2:	bf08      	it	eq
 8010dc4:	68ec      	ldreq	r4, [r5, #12]
 8010dc6:	e7da      	b.n	8010d7e <_fflush_r+0x22>
 8010dc8:	08011fc4 	.word	0x08011fc4
 8010dcc:	08011fe4 	.word	0x08011fe4
 8010dd0:	08011fa4 	.word	0x08011fa4

08010dd4 <std>:
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	b510      	push	{r4, lr}
 8010dd8:	4604      	mov	r4, r0
 8010dda:	e9c0 3300 	strd	r3, r3, [r0]
 8010dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010de2:	6083      	str	r3, [r0, #8]
 8010de4:	8181      	strh	r1, [r0, #12]
 8010de6:	6643      	str	r3, [r0, #100]	; 0x64
 8010de8:	81c2      	strh	r2, [r0, #14]
 8010dea:	6183      	str	r3, [r0, #24]
 8010dec:	4619      	mov	r1, r3
 8010dee:	2208      	movs	r2, #8
 8010df0:	305c      	adds	r0, #92	; 0x5c
 8010df2:	f7fd fbcd 	bl	800e590 <memset>
 8010df6:	4b05      	ldr	r3, [pc, #20]	; (8010e0c <std+0x38>)
 8010df8:	6263      	str	r3, [r4, #36]	; 0x24
 8010dfa:	4b05      	ldr	r3, [pc, #20]	; (8010e10 <std+0x3c>)
 8010dfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8010dfe:	4b05      	ldr	r3, [pc, #20]	; (8010e14 <std+0x40>)
 8010e00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e02:	4b05      	ldr	r3, [pc, #20]	; (8010e18 <std+0x44>)
 8010e04:	6224      	str	r4, [r4, #32]
 8010e06:	6323      	str	r3, [r4, #48]	; 0x30
 8010e08:	bd10      	pop	{r4, pc}
 8010e0a:	bf00      	nop
 8010e0c:	08011119 	.word	0x08011119
 8010e10:	0801113b 	.word	0x0801113b
 8010e14:	08011173 	.word	0x08011173
 8010e18:	08011197 	.word	0x08011197

08010e1c <_cleanup_r>:
 8010e1c:	4901      	ldr	r1, [pc, #4]	; (8010e24 <_cleanup_r+0x8>)
 8010e1e:	f000 b8af 	b.w	8010f80 <_fwalk_reent>
 8010e22:	bf00      	nop
 8010e24:	08010d5d 	.word	0x08010d5d

08010e28 <__sfmoreglue>:
 8010e28:	b570      	push	{r4, r5, r6, lr}
 8010e2a:	2268      	movs	r2, #104	; 0x68
 8010e2c:	1e4d      	subs	r5, r1, #1
 8010e2e:	4355      	muls	r5, r2
 8010e30:	460e      	mov	r6, r1
 8010e32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e36:	f7ff fa15 	bl	8010264 <_malloc_r>
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	b140      	cbz	r0, 8010e50 <__sfmoreglue+0x28>
 8010e3e:	2100      	movs	r1, #0
 8010e40:	e9c0 1600 	strd	r1, r6, [r0]
 8010e44:	300c      	adds	r0, #12
 8010e46:	60a0      	str	r0, [r4, #8]
 8010e48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e4c:	f7fd fba0 	bl	800e590 <memset>
 8010e50:	4620      	mov	r0, r4
 8010e52:	bd70      	pop	{r4, r5, r6, pc}

08010e54 <__sfp_lock_acquire>:
 8010e54:	4801      	ldr	r0, [pc, #4]	; (8010e5c <__sfp_lock_acquire+0x8>)
 8010e56:	f000 b8b3 	b.w	8010fc0 <__retarget_lock_acquire_recursive>
 8010e5a:	bf00      	nop
 8010e5c:	24000a59 	.word	0x24000a59

08010e60 <__sfp_lock_release>:
 8010e60:	4801      	ldr	r0, [pc, #4]	; (8010e68 <__sfp_lock_release+0x8>)
 8010e62:	f000 b8ae 	b.w	8010fc2 <__retarget_lock_release_recursive>
 8010e66:	bf00      	nop
 8010e68:	24000a59 	.word	0x24000a59

08010e6c <__sinit_lock_acquire>:
 8010e6c:	4801      	ldr	r0, [pc, #4]	; (8010e74 <__sinit_lock_acquire+0x8>)
 8010e6e:	f000 b8a7 	b.w	8010fc0 <__retarget_lock_acquire_recursive>
 8010e72:	bf00      	nop
 8010e74:	24000a5a 	.word	0x24000a5a

08010e78 <__sinit_lock_release>:
 8010e78:	4801      	ldr	r0, [pc, #4]	; (8010e80 <__sinit_lock_release+0x8>)
 8010e7a:	f000 b8a2 	b.w	8010fc2 <__retarget_lock_release_recursive>
 8010e7e:	bf00      	nop
 8010e80:	24000a5a 	.word	0x24000a5a

08010e84 <__sinit>:
 8010e84:	b510      	push	{r4, lr}
 8010e86:	4604      	mov	r4, r0
 8010e88:	f7ff fff0 	bl	8010e6c <__sinit_lock_acquire>
 8010e8c:	69a3      	ldr	r3, [r4, #24]
 8010e8e:	b11b      	cbz	r3, 8010e98 <__sinit+0x14>
 8010e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e94:	f7ff bff0 	b.w	8010e78 <__sinit_lock_release>
 8010e98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010e9c:	6523      	str	r3, [r4, #80]	; 0x50
 8010e9e:	4b13      	ldr	r3, [pc, #76]	; (8010eec <__sinit+0x68>)
 8010ea0:	4a13      	ldr	r2, [pc, #76]	; (8010ef0 <__sinit+0x6c>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	62a2      	str	r2, [r4, #40]	; 0x28
 8010ea6:	42a3      	cmp	r3, r4
 8010ea8:	bf04      	itt	eq
 8010eaa:	2301      	moveq	r3, #1
 8010eac:	61a3      	streq	r3, [r4, #24]
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f000 f820 	bl	8010ef4 <__sfp>
 8010eb4:	6060      	str	r0, [r4, #4]
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	f000 f81c 	bl	8010ef4 <__sfp>
 8010ebc:	60a0      	str	r0, [r4, #8]
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f000 f818 	bl	8010ef4 <__sfp>
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	60e0      	str	r0, [r4, #12]
 8010ec8:	2104      	movs	r1, #4
 8010eca:	6860      	ldr	r0, [r4, #4]
 8010ecc:	f7ff ff82 	bl	8010dd4 <std>
 8010ed0:	68a0      	ldr	r0, [r4, #8]
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	2109      	movs	r1, #9
 8010ed6:	f7ff ff7d 	bl	8010dd4 <std>
 8010eda:	68e0      	ldr	r0, [r4, #12]
 8010edc:	2202      	movs	r2, #2
 8010ede:	2112      	movs	r1, #18
 8010ee0:	f7ff ff78 	bl	8010dd4 <std>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	61a3      	str	r3, [r4, #24]
 8010ee8:	e7d2      	b.n	8010e90 <__sinit+0xc>
 8010eea:	bf00      	nop
 8010eec:	08011bd8 	.word	0x08011bd8
 8010ef0:	08010e1d 	.word	0x08010e1d

08010ef4 <__sfp>:
 8010ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ef6:	4607      	mov	r7, r0
 8010ef8:	f7ff ffac 	bl	8010e54 <__sfp_lock_acquire>
 8010efc:	4b1e      	ldr	r3, [pc, #120]	; (8010f78 <__sfp+0x84>)
 8010efe:	681e      	ldr	r6, [r3, #0]
 8010f00:	69b3      	ldr	r3, [r6, #24]
 8010f02:	b913      	cbnz	r3, 8010f0a <__sfp+0x16>
 8010f04:	4630      	mov	r0, r6
 8010f06:	f7ff ffbd 	bl	8010e84 <__sinit>
 8010f0a:	3648      	adds	r6, #72	; 0x48
 8010f0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f10:	3b01      	subs	r3, #1
 8010f12:	d503      	bpl.n	8010f1c <__sfp+0x28>
 8010f14:	6833      	ldr	r3, [r6, #0]
 8010f16:	b30b      	cbz	r3, 8010f5c <__sfp+0x68>
 8010f18:	6836      	ldr	r6, [r6, #0]
 8010f1a:	e7f7      	b.n	8010f0c <__sfp+0x18>
 8010f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010f20:	b9d5      	cbnz	r5, 8010f58 <__sfp+0x64>
 8010f22:	4b16      	ldr	r3, [pc, #88]	; (8010f7c <__sfp+0x88>)
 8010f24:	60e3      	str	r3, [r4, #12]
 8010f26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010f2a:	6665      	str	r5, [r4, #100]	; 0x64
 8010f2c:	f000 f847 	bl	8010fbe <__retarget_lock_init_recursive>
 8010f30:	f7ff ff96 	bl	8010e60 <__sfp_lock_release>
 8010f34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010f38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010f3c:	6025      	str	r5, [r4, #0]
 8010f3e:	61a5      	str	r5, [r4, #24]
 8010f40:	2208      	movs	r2, #8
 8010f42:	4629      	mov	r1, r5
 8010f44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f48:	f7fd fb22 	bl	800e590 <memset>
 8010f4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f54:	4620      	mov	r0, r4
 8010f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f58:	3468      	adds	r4, #104	; 0x68
 8010f5a:	e7d9      	b.n	8010f10 <__sfp+0x1c>
 8010f5c:	2104      	movs	r1, #4
 8010f5e:	4638      	mov	r0, r7
 8010f60:	f7ff ff62 	bl	8010e28 <__sfmoreglue>
 8010f64:	4604      	mov	r4, r0
 8010f66:	6030      	str	r0, [r6, #0]
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	d1d5      	bne.n	8010f18 <__sfp+0x24>
 8010f6c:	f7ff ff78 	bl	8010e60 <__sfp_lock_release>
 8010f70:	230c      	movs	r3, #12
 8010f72:	603b      	str	r3, [r7, #0]
 8010f74:	e7ee      	b.n	8010f54 <__sfp+0x60>
 8010f76:	bf00      	nop
 8010f78:	08011bd8 	.word	0x08011bd8
 8010f7c:	ffff0001 	.word	0xffff0001

08010f80 <_fwalk_reent>:
 8010f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f84:	4606      	mov	r6, r0
 8010f86:	4688      	mov	r8, r1
 8010f88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f8c:	2700      	movs	r7, #0
 8010f8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f92:	f1b9 0901 	subs.w	r9, r9, #1
 8010f96:	d505      	bpl.n	8010fa4 <_fwalk_reent+0x24>
 8010f98:	6824      	ldr	r4, [r4, #0]
 8010f9a:	2c00      	cmp	r4, #0
 8010f9c:	d1f7      	bne.n	8010f8e <_fwalk_reent+0xe>
 8010f9e:	4638      	mov	r0, r7
 8010fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fa4:	89ab      	ldrh	r3, [r5, #12]
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d907      	bls.n	8010fba <_fwalk_reent+0x3a>
 8010faa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	d003      	beq.n	8010fba <_fwalk_reent+0x3a>
 8010fb2:	4629      	mov	r1, r5
 8010fb4:	4630      	mov	r0, r6
 8010fb6:	47c0      	blx	r8
 8010fb8:	4307      	orrs	r7, r0
 8010fba:	3568      	adds	r5, #104	; 0x68
 8010fbc:	e7e9      	b.n	8010f92 <_fwalk_reent+0x12>

08010fbe <__retarget_lock_init_recursive>:
 8010fbe:	4770      	bx	lr

08010fc0 <__retarget_lock_acquire_recursive>:
 8010fc0:	4770      	bx	lr

08010fc2 <__retarget_lock_release_recursive>:
 8010fc2:	4770      	bx	lr

08010fc4 <__swhatbuf_r>:
 8010fc4:	b570      	push	{r4, r5, r6, lr}
 8010fc6:	460e      	mov	r6, r1
 8010fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fcc:	2900      	cmp	r1, #0
 8010fce:	b096      	sub	sp, #88	; 0x58
 8010fd0:	4614      	mov	r4, r2
 8010fd2:	461d      	mov	r5, r3
 8010fd4:	da08      	bge.n	8010fe8 <__swhatbuf_r+0x24>
 8010fd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	602a      	str	r2, [r5, #0]
 8010fde:	061a      	lsls	r2, r3, #24
 8010fe0:	d410      	bmi.n	8011004 <__swhatbuf_r+0x40>
 8010fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fe6:	e00e      	b.n	8011006 <__swhatbuf_r+0x42>
 8010fe8:	466a      	mov	r2, sp
 8010fea:	f000 f8fb 	bl	80111e4 <_fstat_r>
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	dbf1      	blt.n	8010fd6 <__swhatbuf_r+0x12>
 8010ff2:	9a01      	ldr	r2, [sp, #4]
 8010ff4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010ff8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ffc:	425a      	negs	r2, r3
 8010ffe:	415a      	adcs	r2, r3
 8011000:	602a      	str	r2, [r5, #0]
 8011002:	e7ee      	b.n	8010fe2 <__swhatbuf_r+0x1e>
 8011004:	2340      	movs	r3, #64	; 0x40
 8011006:	2000      	movs	r0, #0
 8011008:	6023      	str	r3, [r4, #0]
 801100a:	b016      	add	sp, #88	; 0x58
 801100c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011010 <__smakebuf_r>:
 8011010:	898b      	ldrh	r3, [r1, #12]
 8011012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011014:	079d      	lsls	r5, r3, #30
 8011016:	4606      	mov	r6, r0
 8011018:	460c      	mov	r4, r1
 801101a:	d507      	bpl.n	801102c <__smakebuf_r+0x1c>
 801101c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011020:	6023      	str	r3, [r4, #0]
 8011022:	6123      	str	r3, [r4, #16]
 8011024:	2301      	movs	r3, #1
 8011026:	6163      	str	r3, [r4, #20]
 8011028:	b002      	add	sp, #8
 801102a:	bd70      	pop	{r4, r5, r6, pc}
 801102c:	ab01      	add	r3, sp, #4
 801102e:	466a      	mov	r2, sp
 8011030:	f7ff ffc8 	bl	8010fc4 <__swhatbuf_r>
 8011034:	9900      	ldr	r1, [sp, #0]
 8011036:	4605      	mov	r5, r0
 8011038:	4630      	mov	r0, r6
 801103a:	f7ff f913 	bl	8010264 <_malloc_r>
 801103e:	b948      	cbnz	r0, 8011054 <__smakebuf_r+0x44>
 8011040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011044:	059a      	lsls	r2, r3, #22
 8011046:	d4ef      	bmi.n	8011028 <__smakebuf_r+0x18>
 8011048:	f023 0303 	bic.w	r3, r3, #3
 801104c:	f043 0302 	orr.w	r3, r3, #2
 8011050:	81a3      	strh	r3, [r4, #12]
 8011052:	e7e3      	b.n	801101c <__smakebuf_r+0xc>
 8011054:	4b0d      	ldr	r3, [pc, #52]	; (801108c <__smakebuf_r+0x7c>)
 8011056:	62b3      	str	r3, [r6, #40]	; 0x28
 8011058:	89a3      	ldrh	r3, [r4, #12]
 801105a:	6020      	str	r0, [r4, #0]
 801105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011060:	81a3      	strh	r3, [r4, #12]
 8011062:	9b00      	ldr	r3, [sp, #0]
 8011064:	6163      	str	r3, [r4, #20]
 8011066:	9b01      	ldr	r3, [sp, #4]
 8011068:	6120      	str	r0, [r4, #16]
 801106a:	b15b      	cbz	r3, 8011084 <__smakebuf_r+0x74>
 801106c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011070:	4630      	mov	r0, r6
 8011072:	f000 f8c9 	bl	8011208 <_isatty_r>
 8011076:	b128      	cbz	r0, 8011084 <__smakebuf_r+0x74>
 8011078:	89a3      	ldrh	r3, [r4, #12]
 801107a:	f023 0303 	bic.w	r3, r3, #3
 801107e:	f043 0301 	orr.w	r3, r3, #1
 8011082:	81a3      	strh	r3, [r4, #12]
 8011084:	89a0      	ldrh	r0, [r4, #12]
 8011086:	4305      	orrs	r5, r0
 8011088:	81a5      	strh	r5, [r4, #12]
 801108a:	e7cd      	b.n	8011028 <__smakebuf_r+0x18>
 801108c:	08010e1d 	.word	0x08010e1d

08011090 <_raise_r>:
 8011090:	291f      	cmp	r1, #31
 8011092:	b538      	push	{r3, r4, r5, lr}
 8011094:	4604      	mov	r4, r0
 8011096:	460d      	mov	r5, r1
 8011098:	d904      	bls.n	80110a4 <_raise_r+0x14>
 801109a:	2316      	movs	r3, #22
 801109c:	6003      	str	r3, [r0, #0]
 801109e:	f04f 30ff 	mov.w	r0, #4294967295
 80110a2:	bd38      	pop	{r3, r4, r5, pc}
 80110a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80110a6:	b112      	cbz	r2, 80110ae <_raise_r+0x1e>
 80110a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80110ac:	b94b      	cbnz	r3, 80110c2 <_raise_r+0x32>
 80110ae:	4620      	mov	r0, r4
 80110b0:	f000 f830 	bl	8011114 <_getpid_r>
 80110b4:	462a      	mov	r2, r5
 80110b6:	4601      	mov	r1, r0
 80110b8:	4620      	mov	r0, r4
 80110ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110be:	f000 b817 	b.w	80110f0 <_kill_r>
 80110c2:	2b01      	cmp	r3, #1
 80110c4:	d00a      	beq.n	80110dc <_raise_r+0x4c>
 80110c6:	1c59      	adds	r1, r3, #1
 80110c8:	d103      	bne.n	80110d2 <_raise_r+0x42>
 80110ca:	2316      	movs	r3, #22
 80110cc:	6003      	str	r3, [r0, #0]
 80110ce:	2001      	movs	r0, #1
 80110d0:	e7e7      	b.n	80110a2 <_raise_r+0x12>
 80110d2:	2400      	movs	r4, #0
 80110d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80110d8:	4628      	mov	r0, r5
 80110da:	4798      	blx	r3
 80110dc:	2000      	movs	r0, #0
 80110de:	e7e0      	b.n	80110a2 <_raise_r+0x12>

080110e0 <raise>:
 80110e0:	4b02      	ldr	r3, [pc, #8]	; (80110ec <raise+0xc>)
 80110e2:	4601      	mov	r1, r0
 80110e4:	6818      	ldr	r0, [r3, #0]
 80110e6:	f7ff bfd3 	b.w	8011090 <_raise_r>
 80110ea:	bf00      	nop
 80110ec:	24000068 	.word	0x24000068

080110f0 <_kill_r>:
 80110f0:	b538      	push	{r3, r4, r5, lr}
 80110f2:	4d07      	ldr	r5, [pc, #28]	; (8011110 <_kill_r+0x20>)
 80110f4:	2300      	movs	r3, #0
 80110f6:	4604      	mov	r4, r0
 80110f8:	4608      	mov	r0, r1
 80110fa:	4611      	mov	r1, r2
 80110fc:	602b      	str	r3, [r5, #0]
 80110fe:	f7f2 fd0f 	bl	8003b20 <_kill>
 8011102:	1c43      	adds	r3, r0, #1
 8011104:	d102      	bne.n	801110c <_kill_r+0x1c>
 8011106:	682b      	ldr	r3, [r5, #0]
 8011108:	b103      	cbz	r3, 801110c <_kill_r+0x1c>
 801110a:	6023      	str	r3, [r4, #0]
 801110c:	bd38      	pop	{r3, r4, r5, pc}
 801110e:	bf00      	nop
 8011110:	24000a54 	.word	0x24000a54

08011114 <_getpid_r>:
 8011114:	f7f2 bcfc 	b.w	8003b10 <_getpid>

08011118 <__sread>:
 8011118:	b510      	push	{r4, lr}
 801111a:	460c      	mov	r4, r1
 801111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011120:	f000 f894 	bl	801124c <_read_r>
 8011124:	2800      	cmp	r0, #0
 8011126:	bfab      	itete	ge
 8011128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801112a:	89a3      	ldrhlt	r3, [r4, #12]
 801112c:	181b      	addge	r3, r3, r0
 801112e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011132:	bfac      	ite	ge
 8011134:	6563      	strge	r3, [r4, #84]	; 0x54
 8011136:	81a3      	strhlt	r3, [r4, #12]
 8011138:	bd10      	pop	{r4, pc}

0801113a <__swrite>:
 801113a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801113e:	461f      	mov	r7, r3
 8011140:	898b      	ldrh	r3, [r1, #12]
 8011142:	05db      	lsls	r3, r3, #23
 8011144:	4605      	mov	r5, r0
 8011146:	460c      	mov	r4, r1
 8011148:	4616      	mov	r6, r2
 801114a:	d505      	bpl.n	8011158 <__swrite+0x1e>
 801114c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011150:	2302      	movs	r3, #2
 8011152:	2200      	movs	r2, #0
 8011154:	f000 f868 	bl	8011228 <_lseek_r>
 8011158:	89a3      	ldrh	r3, [r4, #12]
 801115a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801115e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011162:	81a3      	strh	r3, [r4, #12]
 8011164:	4632      	mov	r2, r6
 8011166:	463b      	mov	r3, r7
 8011168:	4628      	mov	r0, r5
 801116a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801116e:	f000 b817 	b.w	80111a0 <_write_r>

08011172 <__sseek>:
 8011172:	b510      	push	{r4, lr}
 8011174:	460c      	mov	r4, r1
 8011176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801117a:	f000 f855 	bl	8011228 <_lseek_r>
 801117e:	1c43      	adds	r3, r0, #1
 8011180:	89a3      	ldrh	r3, [r4, #12]
 8011182:	bf15      	itete	ne
 8011184:	6560      	strne	r0, [r4, #84]	; 0x54
 8011186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801118a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801118e:	81a3      	strheq	r3, [r4, #12]
 8011190:	bf18      	it	ne
 8011192:	81a3      	strhne	r3, [r4, #12]
 8011194:	bd10      	pop	{r4, pc}

08011196 <__sclose>:
 8011196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801119a:	f000 b813 	b.w	80111c4 <_close_r>
	...

080111a0 <_write_r>:
 80111a0:	b538      	push	{r3, r4, r5, lr}
 80111a2:	4d07      	ldr	r5, [pc, #28]	; (80111c0 <_write_r+0x20>)
 80111a4:	4604      	mov	r4, r0
 80111a6:	4608      	mov	r0, r1
 80111a8:	4611      	mov	r1, r2
 80111aa:	2200      	movs	r2, #0
 80111ac:	602a      	str	r2, [r5, #0]
 80111ae:	461a      	mov	r2, r3
 80111b0:	f7f2 fced 	bl	8003b8e <_write>
 80111b4:	1c43      	adds	r3, r0, #1
 80111b6:	d102      	bne.n	80111be <_write_r+0x1e>
 80111b8:	682b      	ldr	r3, [r5, #0]
 80111ba:	b103      	cbz	r3, 80111be <_write_r+0x1e>
 80111bc:	6023      	str	r3, [r4, #0]
 80111be:	bd38      	pop	{r3, r4, r5, pc}
 80111c0:	24000a54 	.word	0x24000a54

080111c4 <_close_r>:
 80111c4:	b538      	push	{r3, r4, r5, lr}
 80111c6:	4d06      	ldr	r5, [pc, #24]	; (80111e0 <_close_r+0x1c>)
 80111c8:	2300      	movs	r3, #0
 80111ca:	4604      	mov	r4, r0
 80111cc:	4608      	mov	r0, r1
 80111ce:	602b      	str	r3, [r5, #0]
 80111d0:	f7f2 fcf9 	bl	8003bc6 <_close>
 80111d4:	1c43      	adds	r3, r0, #1
 80111d6:	d102      	bne.n	80111de <_close_r+0x1a>
 80111d8:	682b      	ldr	r3, [r5, #0]
 80111da:	b103      	cbz	r3, 80111de <_close_r+0x1a>
 80111dc:	6023      	str	r3, [r4, #0]
 80111de:	bd38      	pop	{r3, r4, r5, pc}
 80111e0:	24000a54 	.word	0x24000a54

080111e4 <_fstat_r>:
 80111e4:	b538      	push	{r3, r4, r5, lr}
 80111e6:	4d07      	ldr	r5, [pc, #28]	; (8011204 <_fstat_r+0x20>)
 80111e8:	2300      	movs	r3, #0
 80111ea:	4604      	mov	r4, r0
 80111ec:	4608      	mov	r0, r1
 80111ee:	4611      	mov	r1, r2
 80111f0:	602b      	str	r3, [r5, #0]
 80111f2:	f7f2 fcf4 	bl	8003bde <_fstat>
 80111f6:	1c43      	adds	r3, r0, #1
 80111f8:	d102      	bne.n	8011200 <_fstat_r+0x1c>
 80111fa:	682b      	ldr	r3, [r5, #0]
 80111fc:	b103      	cbz	r3, 8011200 <_fstat_r+0x1c>
 80111fe:	6023      	str	r3, [r4, #0]
 8011200:	bd38      	pop	{r3, r4, r5, pc}
 8011202:	bf00      	nop
 8011204:	24000a54 	.word	0x24000a54

08011208 <_isatty_r>:
 8011208:	b538      	push	{r3, r4, r5, lr}
 801120a:	4d06      	ldr	r5, [pc, #24]	; (8011224 <_isatty_r+0x1c>)
 801120c:	2300      	movs	r3, #0
 801120e:	4604      	mov	r4, r0
 8011210:	4608      	mov	r0, r1
 8011212:	602b      	str	r3, [r5, #0]
 8011214:	f7f2 fcf3 	bl	8003bfe <_isatty>
 8011218:	1c43      	adds	r3, r0, #1
 801121a:	d102      	bne.n	8011222 <_isatty_r+0x1a>
 801121c:	682b      	ldr	r3, [r5, #0]
 801121e:	b103      	cbz	r3, 8011222 <_isatty_r+0x1a>
 8011220:	6023      	str	r3, [r4, #0]
 8011222:	bd38      	pop	{r3, r4, r5, pc}
 8011224:	24000a54 	.word	0x24000a54

08011228 <_lseek_r>:
 8011228:	b538      	push	{r3, r4, r5, lr}
 801122a:	4d07      	ldr	r5, [pc, #28]	; (8011248 <_lseek_r+0x20>)
 801122c:	4604      	mov	r4, r0
 801122e:	4608      	mov	r0, r1
 8011230:	4611      	mov	r1, r2
 8011232:	2200      	movs	r2, #0
 8011234:	602a      	str	r2, [r5, #0]
 8011236:	461a      	mov	r2, r3
 8011238:	f7f2 fcec 	bl	8003c14 <_lseek>
 801123c:	1c43      	adds	r3, r0, #1
 801123e:	d102      	bne.n	8011246 <_lseek_r+0x1e>
 8011240:	682b      	ldr	r3, [r5, #0]
 8011242:	b103      	cbz	r3, 8011246 <_lseek_r+0x1e>
 8011244:	6023      	str	r3, [r4, #0]
 8011246:	bd38      	pop	{r3, r4, r5, pc}
 8011248:	24000a54 	.word	0x24000a54

0801124c <_read_r>:
 801124c:	b538      	push	{r3, r4, r5, lr}
 801124e:	4d07      	ldr	r5, [pc, #28]	; (801126c <_read_r+0x20>)
 8011250:	4604      	mov	r4, r0
 8011252:	4608      	mov	r0, r1
 8011254:	4611      	mov	r1, r2
 8011256:	2200      	movs	r2, #0
 8011258:	602a      	str	r2, [r5, #0]
 801125a:	461a      	mov	r2, r3
 801125c:	f7f2 fc7a 	bl	8003b54 <_read>
 8011260:	1c43      	adds	r3, r0, #1
 8011262:	d102      	bne.n	801126a <_read_r+0x1e>
 8011264:	682b      	ldr	r3, [r5, #0]
 8011266:	b103      	cbz	r3, 801126a <_read_r+0x1e>
 8011268:	6023      	str	r3, [r4, #0]
 801126a:	bd38      	pop	{r3, r4, r5, pc}
 801126c:	24000a54 	.word	0x24000a54

08011270 <checkint>:
 8011270:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011274:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011278:	429a      	cmp	r2, r3
 801127a:	b570      	push	{r4, r5, r6, lr}
 801127c:	dd2a      	ble.n	80112d4 <checkint+0x64>
 801127e:	f240 4333 	movw	r3, #1075	; 0x433
 8011282:	429a      	cmp	r2, r3
 8011284:	dc24      	bgt.n	80112d0 <checkint+0x60>
 8011286:	1a9b      	subs	r3, r3, r2
 8011288:	f1a3 0620 	sub.w	r6, r3, #32
 801128c:	f04f 32ff 	mov.w	r2, #4294967295
 8011290:	fa02 f403 	lsl.w	r4, r2, r3
 8011294:	fa02 f606 	lsl.w	r6, r2, r6
 8011298:	f1c3 0520 	rsb	r5, r3, #32
 801129c:	fa22 f505 	lsr.w	r5, r2, r5
 80112a0:	4334      	orrs	r4, r6
 80112a2:	432c      	orrs	r4, r5
 80112a4:	409a      	lsls	r2, r3
 80112a6:	ea20 0202 	bic.w	r2, r0, r2
 80112aa:	ea21 0404 	bic.w	r4, r1, r4
 80112ae:	4322      	orrs	r2, r4
 80112b0:	f1a3 0420 	sub.w	r4, r3, #32
 80112b4:	f1c3 0220 	rsb	r2, r3, #32
 80112b8:	d10c      	bne.n	80112d4 <checkint+0x64>
 80112ba:	40d8      	lsrs	r0, r3
 80112bc:	fa01 f302 	lsl.w	r3, r1, r2
 80112c0:	4318      	orrs	r0, r3
 80112c2:	40e1      	lsrs	r1, r4
 80112c4:	4308      	orrs	r0, r1
 80112c6:	f000 0001 	and.w	r0, r0, #1
 80112ca:	f1d0 0002 	rsbs	r0, r0, #2
 80112ce:	bd70      	pop	{r4, r5, r6, pc}
 80112d0:	2002      	movs	r0, #2
 80112d2:	e7fc      	b.n	80112ce <checkint+0x5e>
 80112d4:	2000      	movs	r0, #0
 80112d6:	e7fa      	b.n	80112ce <checkint+0x5e>

080112d8 <pow>:
 80112d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112dc:	ee10 4a90 	vmov	r4, s1
 80112e0:	ed2d 8b0a 	vpush	{d8-d12}
 80112e4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80112e8:	ee11 7a90 	vmov	r7, s3
 80112ec:	f10a 32ff 	add.w	r2, sl, #4294967295
 80112f0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80112f4:	429a      	cmp	r2, r3
 80112f6:	ee10 6a10 	vmov	r6, s0
 80112fa:	ee11 0a10 	vmov	r0, s2
 80112fe:	b086      	sub	sp, #24
 8011300:	46d4      	mov	ip, sl
 8011302:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8011306:	d806      	bhi.n	8011316 <pow+0x3e>
 8011308:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801130c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011310:	2b7f      	cmp	r3, #127	; 0x7f
 8011312:	f240 8156 	bls.w	80115c2 <pow+0x2ea>
 8011316:	1802      	adds	r2, r0, r0
 8011318:	eb47 0107 	adc.w	r1, r7, r7
 801131c:	f06f 0e01 	mvn.w	lr, #1
 8011320:	f112 39ff 	adds.w	r9, r2, #4294967295
 8011324:	f141 38ff 	adc.w	r8, r1, #4294967295
 8011328:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801132c:	45ce      	cmp	lr, r9
 801132e:	eb73 0808 	sbcs.w	r8, r3, r8
 8011332:	d23f      	bcs.n	80113b4 <pow+0xdc>
 8011334:	ea52 0301 	orrs.w	r3, r2, r1
 8011338:	f04f 0300 	mov.w	r3, #0
 801133c:	d10c      	bne.n	8011358 <pow+0x80>
 801133e:	19b6      	adds	r6, r6, r6
 8011340:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8011344:	4164      	adcs	r4, r4
 8011346:	42b3      	cmp	r3, r6
 8011348:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801134c:	41a3      	sbcs	r3, r4
 801134e:	f0c0 808c 	bcc.w	801146a <pow+0x192>
 8011352:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011356:	e028      	b.n	80113aa <pow+0xd2>
 8011358:	4da3      	ldr	r5, [pc, #652]	; (80115e8 <pow+0x310>)
 801135a:	42ac      	cmp	r4, r5
 801135c:	bf08      	it	eq
 801135e:	429e      	cmpeq	r6, r3
 8011360:	d107      	bne.n	8011372 <pow+0x9a>
 8011362:	1800      	adds	r0, r0, r0
 8011364:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011368:	417f      	adcs	r7, r7
 801136a:	4283      	cmp	r3, r0
 801136c:	4b9f      	ldr	r3, [pc, #636]	; (80115ec <pow+0x314>)
 801136e:	41bb      	sbcs	r3, r7
 8011370:	e7ed      	b.n	801134e <pow+0x76>
 8011372:	19b6      	adds	r6, r6, r6
 8011374:	489e      	ldr	r0, [pc, #632]	; (80115f0 <pow+0x318>)
 8011376:	4164      	adcs	r4, r4
 8011378:	42b3      	cmp	r3, r6
 801137a:	eb70 0504 	sbcs.w	r5, r0, r4
 801137e:	d374      	bcc.n	801146a <pow+0x192>
 8011380:	4281      	cmp	r1, r0
 8011382:	bf08      	it	eq
 8011384:	429a      	cmpeq	r2, r3
 8011386:	d170      	bne.n	801146a <pow+0x192>
 8011388:	4a9a      	ldr	r2, [pc, #616]	; (80115f4 <pow+0x31c>)
 801138a:	4294      	cmp	r4, r2
 801138c:	bf08      	it	eq
 801138e:	429e      	cmpeq	r6, r3
 8011390:	d0df      	beq.n	8011352 <pow+0x7a>
 8011392:	4294      	cmp	r4, r2
 8011394:	ea6f 0707 	mvn.w	r7, r7
 8011398:	bf34      	ite	cc
 801139a:	2400      	movcc	r4, #0
 801139c:	2401      	movcs	r4, #1
 801139e:	0fff      	lsrs	r7, r7, #31
 80113a0:	42bc      	cmp	r4, r7
 80113a2:	f040 81d9 	bne.w	8011758 <pow+0x480>
 80113a6:	ee21 0b01 	vmul.f64	d0, d1, d1
 80113aa:	b006      	add	sp, #24
 80113ac:	ecbd 8b0a 	vpop	{d8-d12}
 80113b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113b4:	eb16 0806 	adds.w	r8, r6, r6
 80113b8:	eb44 0904 	adc.w	r9, r4, r4
 80113bc:	f118 31ff 	adds.w	r1, r8, #4294967295
 80113c0:	f169 0200 	sbc.w	r2, r9, #0
 80113c4:	458e      	cmp	lr, r1
 80113c6:	4193      	sbcs	r3, r2
 80113c8:	d223      	bcs.n	8011412 <pow+0x13a>
 80113ca:	ee20 0b00 	vmul.f64	d0, d0, d0
 80113ce:	2c00      	cmp	r4, #0
 80113d0:	da12      	bge.n	80113f8 <pow+0x120>
 80113d2:	4639      	mov	r1, r7
 80113d4:	f7ff ff4c 	bl	8011270 <checkint>
 80113d8:	2801      	cmp	r0, #1
 80113da:	d10d      	bne.n	80113f8 <pow+0x120>
 80113dc:	eeb1 0b40 	vneg.f64	d0, d0
 80113e0:	ea58 0309 	orrs.w	r3, r8, r9
 80113e4:	d10a      	bne.n	80113fc <pow+0x124>
 80113e6:	2f00      	cmp	r7, #0
 80113e8:	dadf      	bge.n	80113aa <pow+0xd2>
 80113ea:	b006      	add	sp, #24
 80113ec:	ecbd 8b0a 	vpop	{d8-d12}
 80113f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f4:	f000 bb50 	b.w	8011a98 <__math_divzero>
 80113f8:	2000      	movs	r0, #0
 80113fa:	e7f1      	b.n	80113e0 <pow+0x108>
 80113fc:	2f00      	cmp	r7, #0
 80113fe:	dad4      	bge.n	80113aa <pow+0xd2>
 8011400:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011404:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011408:	ed8d 7b00 	vstr	d7, [sp]
 801140c:	ed9d 0b00 	vldr	d0, [sp]
 8011410:	e7cb      	b.n	80113aa <pow+0xd2>
 8011412:	2c00      	cmp	r4, #0
 8011414:	da2c      	bge.n	8011470 <pow+0x198>
 8011416:	4639      	mov	r1, r7
 8011418:	f7ff ff2a 	bl	8011270 <checkint>
 801141c:	b930      	cbnz	r0, 801142c <pow+0x154>
 801141e:	b006      	add	sp, #24
 8011420:	ecbd 8b0a 	vpop	{d8-d12}
 8011424:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011428:	f000 bb4e 	b.w	8011ac8 <__math_invalid>
 801142c:	2801      	cmp	r0, #1
 801142e:	bf14      	ite	ne
 8011430:	2000      	movne	r0, #0
 8011432:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011436:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801143a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801143e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011442:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011446:	2b7f      	cmp	r3, #127	; 0x7f
 8011448:	d92d      	bls.n	80114a6 <pow+0x1ce>
 801144a:	4b67      	ldr	r3, [pc, #412]	; (80115e8 <pow+0x310>)
 801144c:	2000      	movs	r0, #0
 801144e:	429c      	cmp	r4, r3
 8011450:	bf08      	it	eq
 8011452:	4286      	cmpeq	r6, r0
 8011454:	f43f af7d 	beq.w	8011352 <pow+0x7a>
 8011458:	f240 31bd 	movw	r1, #957	; 0x3bd
 801145c:	428a      	cmp	r2, r1
 801145e:	d80c      	bhi.n	801147a <pow+0x1a2>
 8011460:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011464:	42b0      	cmp	r0, r6
 8011466:	41a3      	sbcs	r3, r4
 8011468:	d204      	bcs.n	8011474 <pow+0x19c>
 801146a:	ee31 0b00 	vadd.f64	d0, d1, d0
 801146e:	e79c      	b.n	80113aa <pow+0xd2>
 8011470:	2000      	movs	r0, #0
 8011472:	e7e4      	b.n	801143e <pow+0x166>
 8011474:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011478:	e797      	b.n	80113aa <pow+0xd2>
 801147a:	2e01      	cmp	r6, #1
 801147c:	eb74 0303 	sbcs.w	r3, r4, r3
 8011480:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011484:	bf34      	ite	cc
 8011486:	2301      	movcc	r3, #1
 8011488:	2300      	movcs	r3, #0
 801148a:	4295      	cmp	r5, r2
 801148c:	bf8c      	ite	hi
 801148e:	2500      	movhi	r5, #0
 8011490:	2501      	movls	r5, #1
 8011492:	42ab      	cmp	r3, r5
 8011494:	f000 809d 	beq.w	80115d2 <pow+0x2fa>
 8011498:	b006      	add	sp, #24
 801149a:	ecbd 8b0a 	vpop	{d8-d12}
 801149e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114a2:	f000 baf1 	b.w	8011a88 <__math_oflow>
 80114a6:	f1bc 0f00 	cmp.w	ip, #0
 80114aa:	d10b      	bne.n	80114c4 <pow+0x1ec>
 80114ac:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80115e0 <pow+0x308>
 80114b0:	ee20 7b07 	vmul.f64	d7, d0, d7
 80114b4:	ec53 2b17 	vmov	r2, r3, d7
 80114b8:	ee17 6a10 	vmov	r6, s14
 80114bc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80114c0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80114c4:	4b4c      	ldr	r3, [pc, #304]	; (80115f8 <pow+0x320>)
 80114c6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80114ca:	4423      	add	r3, r4
 80114cc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80114d0:	1519      	asrs	r1, r3, #20
 80114d2:	0d1b      	lsrs	r3, r3, #20
 80114d4:	051b      	lsls	r3, r3, #20
 80114d6:	eba4 0903 	sub.w	r9, r4, r3
 80114da:	4b48      	ldr	r3, [pc, #288]	; (80115fc <pow+0x324>)
 80114dc:	ee04 1a10 	vmov	s8, r1
 80114e0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80114e4:	f1b6 0800 	subs.w	r8, r6, #0
 80114e8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80114ec:	ec49 8b15 	vmov	d5, r8, r9
 80114f0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80114f4:	eea5 6b07 	vfma.f64	d6, d5, d7
 80114f8:	ed93 7b00 	vldr	d7, [r3]
 80114fc:	ed93 5b02 	vldr	d5, [r3, #8]
 8011500:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011504:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011508:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801150c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011510:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8011514:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011518:	ed93 5b04 	vldr	d5, [r3, #16]
 801151c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011520:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011524:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011528:	ed93 4b08 	vldr	d4, [r3, #32]
 801152c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011530:	eeb0 9b40 	vmov.f64	d9, d0
 8011534:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011538:	ed93 5b06 	vldr	d5, [r3, #24]
 801153c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011540:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011544:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011548:	eea6 5b04 	vfma.f64	d5, d6, d4
 801154c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011550:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011554:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011558:	ee3a ab00 	vadd.f64	d10, d10, d0
 801155c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011560:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011564:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011568:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801156c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011570:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011574:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011578:	eeab ab05 	vfma.f64	d10, d11, d5
 801157c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011580:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011584:	ee17 3a90 	vmov	r3, s15
 8011588:	eeb0 5b47 	vmov.f64	d5, d7
 801158c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011590:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011594:	18b2      	adds	r2, r6, r2
 8011596:	2a3e      	cmp	r2, #62	; 0x3e
 8011598:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801159c:	ee38 8b46 	vsub.f64	d8, d8, d6
 80115a0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80115a4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80115a8:	d92b      	bls.n	8011602 <pow+0x32a>
 80115aa:	2a00      	cmp	r2, #0
 80115ac:	da0b      	bge.n	80115c6 <pow+0x2ee>
 80115ae:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80115b2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80115b6:	2800      	cmp	r0, #0
 80115b8:	f43f aef7 	beq.w	80113aa <pow+0xd2>
 80115bc:	eeb1 0b40 	vneg.f64	d0, d0
 80115c0:	e6f3      	b.n	80113aa <pow+0xd2>
 80115c2:	2000      	movs	r0, #0
 80115c4:	e77e      	b.n	80114c4 <pow+0x1ec>
 80115c6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 80115ca:	d919      	bls.n	8011600 <pow+0x328>
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	f6bf af63 	bge.w	8011498 <pow+0x1c0>
 80115d2:	b006      	add	sp, #24
 80115d4:	ecbd 8b0a 	vpop	{d8-d12}
 80115d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115dc:	f000 ba4c 	b.w	8011a78 <__math_uflow>
 80115e0:	00000000 	.word	0x00000000
 80115e4:	43300000 	.word	0x43300000
 80115e8:	3ff00000 	.word	0x3ff00000
 80115ec:	fff00000 	.word	0xfff00000
 80115f0:	ffe00000 	.word	0xffe00000
 80115f4:	7fe00000 	.word	0x7fe00000
 80115f8:	c0196aab 	.word	0xc0196aab
 80115fc:	08012008 	.word	0x08012008
 8011600:	2600      	movs	r6, #0
 8011602:	495d      	ldr	r1, [pc, #372]	; (8011778 <pow+0x4a0>)
 8011604:	ed91 4b02 	vldr	d4, [r1, #8]
 8011608:	ed91 3b00 	vldr	d3, [r1]
 801160c:	eeb0 6b44 	vmov.f64	d6, d4
 8011610:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011614:	ee16 5a10 	vmov	r5, s12
 8011618:	ee36 6b44 	vsub.f64	d6, d6, d4
 801161c:	ed91 4b04 	vldr	d4, [r1, #16]
 8011620:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011624:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011628:	eeb0 0b47 	vmov.f64	d0, d7
 801162c:	ed91 7b06 	vldr	d7, [r1, #24]
 8011630:	18dc      	adds	r4, r3, r3
 8011632:	f104 030f 	add.w	r3, r4, #15
 8011636:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801163a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801163e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011642:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011646:	ee20 6b00 	vmul.f64	d6, d0, d0
 801164a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801164e:	ed91 5b08 	vldr	d5, [r1, #32]
 8011652:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011656:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801165a:	eea0 5b04 	vfma.f64	d5, d0, d4
 801165e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011662:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011666:	ee26 6b06 	vmul.f64	d6, d6, d6
 801166a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801166e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011672:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011676:	eea0 5b04 	vfma.f64	d5, d0, d4
 801167a:	1940      	adds	r0, r0, r5
 801167c:	2700      	movs	r7, #0
 801167e:	eb17 020c 	adds.w	r2, r7, ip
 8011682:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011686:	eea6 7b05 	vfma.f64	d7, d6, d5
 801168a:	2e00      	cmp	r6, #0
 801168c:	d15f      	bne.n	801174e <pow+0x476>
 801168e:	42bd      	cmp	r5, r7
 8011690:	db13      	blt.n	80116ba <pow+0x3e2>
 8011692:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011696:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801169a:	4610      	mov	r0, r2
 801169c:	ec41 0b10 	vmov	d0, r0, r1
 80116a0:	eea7 0b00 	vfma.f64	d0, d7, d0
 80116a4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011760 <pow+0x488>
 80116a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80116ac:	b006      	add	sp, #24
 80116ae:	ecbd 8b0a 	vpop	{d8-d12}
 80116b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116b6:	f000 ba1f 	b.w	8011af8 <__math_check_oflow>
 80116ba:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80116be:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80116c2:	4610      	mov	r0, r2
 80116c4:	ec41 0b15 	vmov	d5, r0, r1
 80116c8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80116cc:	ee27 6b05 	vmul.f64	d6, d7, d5
 80116d0:	ee35 7b06 	vadd.f64	d7, d5, d6
 80116d4:	eeb0 3bc7 	vabs.f64	d3, d7
 80116d8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80116dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011768 <pow+0x490>
 80116e4:	d52a      	bpl.n	801173c <pow+0x464>
 80116e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80116ea:	ee35 5b47 	vsub.f64	d5, d5, d7
 80116ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116f2:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80116f6:	ee35 6b06 	vadd.f64	d6, d5, d6
 80116fa:	bf48      	it	mi
 80116fc:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011700:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011704:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011708:	ee35 7b07 	vadd.f64	d7, d5, d7
 801170c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011710:	ee37 7b03 	vadd.f64	d7, d7, d3
 8011714:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011718:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801171c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011720:	d104      	bne.n	801172c <pow+0x454>
 8011722:	4632      	mov	r2, r6
 8011724:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011728:	ec43 2b17 	vmov	d7, r2, r3
 801172c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011730:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011734:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011738:	ed8d 6b04 	vstr	d6, [sp, #16]
 801173c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011740:	b006      	add	sp, #24
 8011742:	ecbd 8b0a 	vpop	{d8-d12}
 8011746:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801174a:	f000 b9cc 	b.w	8011ae6 <__math_check_uflow>
 801174e:	ec43 2b10 	vmov	d0, r2, r3
 8011752:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011756:	e628      	b.n	80113aa <pow+0xd2>
 8011758:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011770 <pow+0x498>
 801175c:	e625      	b.n	80113aa <pow+0xd2>
 801175e:	bf00      	nop
 8011760:	00000000 	.word	0x00000000
 8011764:	7f000000 	.word	0x7f000000
 8011768:	00000000 	.word	0x00000000
 801176c:	00100000 	.word	0x00100000
	...
 8011778:	08013050 	.word	0x08013050

0801177c <asin>:
 801177c:	b508      	push	{r3, lr}
 801177e:	ed2d 8b04 	vpush	{d8-d9}
 8011782:	eeb0 8b40 	vmov.f64	d8, d0
 8011786:	f000 f847 	bl	8011818 <__ieee754_asin>
 801178a:	eeb4 8b48 	vcmp.f64	d8, d8
 801178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011792:	eeb0 9b40 	vmov.f64	d9, d0
 8011796:	d615      	bvs.n	80117c4 <asin+0x48>
 8011798:	eeb0 0b48 	vmov.f64	d0, d8
 801179c:	f000 f9c0 	bl	8011b20 <fabs>
 80117a0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80117a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80117a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ac:	dd0a      	ble.n	80117c4 <asin+0x48>
 80117ae:	f7fc fec5 	bl	800e53c <__errno>
 80117b2:	ecbd 8b04 	vpop	{d8-d9}
 80117b6:	2321      	movs	r3, #33	; 0x21
 80117b8:	6003      	str	r3, [r0, #0]
 80117ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80117be:	4804      	ldr	r0, [pc, #16]	; (80117d0 <asin+0x54>)
 80117c0:	f7fe bdc6 	b.w	8010350 <nan>
 80117c4:	eeb0 0b49 	vmov.f64	d0, d9
 80117c8:	ecbd 8b04 	vpop	{d8-d9}
 80117cc:	bd08      	pop	{r3, pc}
 80117ce:	bf00      	nop
 80117d0:	08011e6f 	.word	0x08011e6f
 80117d4:	00000000 	.word	0x00000000

080117d8 <sqrt>:
 80117d8:	b508      	push	{r3, lr}
 80117da:	ed2d 8b04 	vpush	{d8-d9}
 80117de:	eeb0 8b40 	vmov.f64	d8, d0
 80117e2:	f000 f927 	bl	8011a34 <__ieee754_sqrt>
 80117e6:	eeb4 8b48 	vcmp.f64	d8, d8
 80117ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ee:	d60c      	bvs.n	801180a <sqrt+0x32>
 80117f0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8011810 <sqrt+0x38>
 80117f4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80117f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117fc:	d505      	bpl.n	801180a <sqrt+0x32>
 80117fe:	f7fc fe9d 	bl	800e53c <__errno>
 8011802:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011806:	2321      	movs	r3, #33	; 0x21
 8011808:	6003      	str	r3, [r0, #0]
 801180a:	ecbd 8b04 	vpop	{d8-d9}
 801180e:	bd08      	pop	{r3, pc}
	...

08011818 <__ieee754_asin>:
 8011818:	b538      	push	{r3, r4, r5, lr}
 801181a:	ee10 5a90 	vmov	r5, s1
 801181e:	4b82      	ldr	r3, [pc, #520]	; (8011a28 <__ieee754_asin+0x210>)
 8011820:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011824:	429c      	cmp	r4, r3
 8011826:	ed2d 8b06 	vpush	{d8-d10}
 801182a:	dd19      	ble.n	8011860 <__ieee754_asin+0x48>
 801182c:	ee10 3a10 	vmov	r3, s0
 8011830:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011834:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011838:	4323      	orrs	r3, r4
 801183a:	d10c      	bne.n	8011856 <__ieee754_asin+0x3e>
 801183c:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 80119b0 <__ieee754_asin+0x198>
 8011840:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 80119b8 <__ieee754_asin+0x1a0>
 8011844:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011848:	eea0 7b06 	vfma.f64	d7, d0, d6
 801184c:	eeb0 0b47 	vmov.f64	d0, d7
 8011850:	ecbd 8b06 	vpop	{d8-d10}
 8011854:	bd38      	pop	{r3, r4, r5, pc}
 8011856:	ee30 7b40 	vsub.f64	d7, d0, d0
 801185a:	ee87 0b07 	vdiv.f64	d0, d7, d7
 801185e:	e7f7      	b.n	8011850 <__ieee754_asin+0x38>
 8011860:	4b72      	ldr	r3, [pc, #456]	; (8011a2c <__ieee754_asin+0x214>)
 8011862:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8011866:	429c      	cmp	r4, r3
 8011868:	dc0b      	bgt.n	8011882 <__ieee754_asin+0x6a>
 801186a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 801186e:	da52      	bge.n	8011916 <__ieee754_asin+0xfe>
 8011870:	ed9f 7b53 	vldr	d7, [pc, #332]	; 80119c0 <__ieee754_asin+0x1a8>
 8011874:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011878:	eeb4 7bc9 	vcmpe.f64	d7, d9
 801187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011880:	dce6      	bgt.n	8011850 <__ieee754_asin+0x38>
 8011882:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011886:	f000 f94b 	bl	8011b20 <fabs>
 801188a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80119c8 <__ieee754_asin+0x1b0>
 801188e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011892:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011896:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80119d0 <__ieee754_asin+0x1b8>
 801189a:	eeb0 0b48 	vmov.f64	d0, d8
 801189e:	eea8 6b07 	vfma.f64	d6, d8, d7
 80118a2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80119d8 <__ieee754_asin+0x1c0>
 80118a6:	eea6 7b08 	vfma.f64	d7, d6, d8
 80118aa:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80119e0 <__ieee754_asin+0x1c8>
 80118ae:	ed9f ab4e 	vldr	d10, [pc, #312]	; 80119e8 <__ieee754_asin+0x1d0>
 80118b2:	eea7 6b08 	vfma.f64	d6, d7, d8
 80118b6:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 80119f0 <__ieee754_asin+0x1d8>
 80118ba:	eea6 7b08 	vfma.f64	d7, d6, d8
 80118be:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80119f8 <__ieee754_asin+0x1e0>
 80118c2:	eea7 ab08 	vfma.f64	d10, d7, d8
 80118c6:	ee2a ab08 	vmul.f64	d10, d10, d8
 80118ca:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011a00 <__ieee754_asin+0x1e8>
 80118ce:	eea8 7b06 	vfma.f64	d7, d8, d6
 80118d2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8011a08 <__ieee754_asin+0x1f0>
 80118d6:	eea7 6b08 	vfma.f64	d6, d7, d8
 80118da:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011a10 <__ieee754_asin+0x1f8>
 80118de:	eea6 7b08 	vfma.f64	d7, d6, d8
 80118e2:	eea7 9b08 	vfma.f64	d9, d7, d8
 80118e6:	f000 f8a5 	bl	8011a34 <__ieee754_sqrt>
 80118ea:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 80118ee:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80118f2:	4b4f      	ldr	r3, [pc, #316]	; (8011a30 <__ieee754_asin+0x218>)
 80118f4:	429c      	cmp	r4, r3
 80118f6:	dd3d      	ble.n	8011974 <__ieee754_asin+0x15c>
 80118f8:	eea0 0b05 	vfma.f64	d0, d0, d5
 80118fc:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011a18 <__ieee754_asin+0x200>
 8011900:	eea0 7b04 	vfma.f64	d7, d0, d4
 8011904:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 80119b8 <__ieee754_asin+0x1a0>
 8011908:	ee30 0b47 	vsub.f64	d0, d0, d7
 801190c:	2d00      	cmp	r5, #0
 801190e:	bfd8      	it	le
 8011910:	eeb1 0b40 	vnegle.f64	d0, d0
 8011914:	e79c      	b.n	8011850 <__ieee754_asin+0x38>
 8011916:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80119c8 <__ieee754_asin+0x1b0>
 801191a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801191e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80119d0 <__ieee754_asin+0x1b8>
 8011922:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011926:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80119d8 <__ieee754_asin+0x1c0>
 801192a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801192e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80119e0 <__ieee754_asin+0x1c8>
 8011932:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011936:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80119f0 <__ieee754_asin+0x1d8>
 801193a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801193e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80119e8 <__ieee754_asin+0x1d0>
 8011942:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 80119f8 <__ieee754_asin+0x1e0>
 8011946:	eea5 6b07 	vfma.f64	d6, d5, d7
 801194a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801194e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011a00 <__ieee754_asin+0x1e8>
 8011952:	eea7 5b04 	vfma.f64	d5, d7, d4
 8011956:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8011a08 <__ieee754_asin+0x1f0>
 801195a:	eea5 4b07 	vfma.f64	d4, d5, d7
 801195e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011a10 <__ieee754_asin+0x1f8>
 8011962:	eea4 5b07 	vfma.f64	d5, d4, d7
 8011966:	eea5 9b07 	vfma.f64	d9, d5, d7
 801196a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801196e:	eea0 0b07 	vfma.f64	d0, d0, d7
 8011972:	e76d      	b.n	8011850 <__ieee754_asin+0x38>
 8011974:	ec53 2b10 	vmov	r2, r3, d0
 8011978:	2200      	movs	r2, #0
 801197a:	ec43 2b16 	vmov	d6, r2, r3
 801197e:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011982:	eea6 8b46 	vfms.f64	d8, d6, d6
 8011986:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801198a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80119b0 <__ieee754_asin+0x198>
 801198e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011992:	eea3 7b44 	vfms.f64	d7, d3, d4
 8011996:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801199a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8011a20 <__ieee754_asin+0x208>
 801199e:	eeb0 0b45 	vmov.f64	d0, d5
 80119a2:	eea6 0b44 	vfms.f64	d0, d6, d4
 80119a6:	ee37 0b40 	vsub.f64	d0, d7, d0
 80119aa:	ee35 0b40 	vsub.f64	d0, d5, d0
 80119ae:	e7ad      	b.n	801190c <__ieee754_asin+0xf4>
 80119b0:	33145c07 	.word	0x33145c07
 80119b4:	3c91a626 	.word	0x3c91a626
 80119b8:	54442d18 	.word	0x54442d18
 80119bc:	3ff921fb 	.word	0x3ff921fb
 80119c0:	8800759c 	.word	0x8800759c
 80119c4:	7e37e43c 	.word	0x7e37e43c
 80119c8:	0dfdf709 	.word	0x0dfdf709
 80119cc:	3f023de1 	.word	0x3f023de1
 80119d0:	7501b288 	.word	0x7501b288
 80119d4:	3f49efe0 	.word	0x3f49efe0
 80119d8:	b5688f3b 	.word	0xb5688f3b
 80119dc:	bfa48228 	.word	0xbfa48228
 80119e0:	0e884455 	.word	0x0e884455
 80119e4:	3fc9c155 	.word	0x3fc9c155
 80119e8:	55555555 	.word	0x55555555
 80119ec:	3fc55555 	.word	0x3fc55555
 80119f0:	03eb6f7d 	.word	0x03eb6f7d
 80119f4:	bfd4d612 	.word	0xbfd4d612
 80119f8:	b12e9282 	.word	0xb12e9282
 80119fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8011a00:	1b8d0159 	.word	0x1b8d0159
 8011a04:	bfe6066c 	.word	0xbfe6066c
 8011a08:	9c598ac8 	.word	0x9c598ac8
 8011a0c:	40002ae5 	.word	0x40002ae5
 8011a10:	1c8a2d4b 	.word	0x1c8a2d4b
 8011a14:	c0033a27 	.word	0xc0033a27
 8011a18:	33145c07 	.word	0x33145c07
 8011a1c:	bc91a626 	.word	0xbc91a626
 8011a20:	54442d18 	.word	0x54442d18
 8011a24:	3fe921fb 	.word	0x3fe921fb
 8011a28:	3fefffff 	.word	0x3fefffff
 8011a2c:	3fdfffff 	.word	0x3fdfffff
 8011a30:	3fef3332 	.word	0x3fef3332

08011a34 <__ieee754_sqrt>:
 8011a34:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011a38:	4770      	bx	lr

08011a3a <with_errno>:
 8011a3a:	b513      	push	{r0, r1, r4, lr}
 8011a3c:	4604      	mov	r4, r0
 8011a3e:	ed8d 0b00 	vstr	d0, [sp]
 8011a42:	f7fc fd7b 	bl	800e53c <__errno>
 8011a46:	ed9d 0b00 	vldr	d0, [sp]
 8011a4a:	6004      	str	r4, [r0, #0]
 8011a4c:	b002      	add	sp, #8
 8011a4e:	bd10      	pop	{r4, pc}

08011a50 <xflow>:
 8011a50:	b082      	sub	sp, #8
 8011a52:	b158      	cbz	r0, 8011a6c <xflow+0x1c>
 8011a54:	eeb1 7b40 	vneg.f64	d7, d0
 8011a58:	ed8d 7b00 	vstr	d7, [sp]
 8011a5c:	ed9d 7b00 	vldr	d7, [sp]
 8011a60:	2022      	movs	r0, #34	; 0x22
 8011a62:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011a66:	b002      	add	sp, #8
 8011a68:	f7ff bfe7 	b.w	8011a3a <with_errno>
 8011a6c:	eeb0 7b40 	vmov.f64	d7, d0
 8011a70:	e7f2      	b.n	8011a58 <xflow+0x8>
 8011a72:	0000      	movs	r0, r0
 8011a74:	0000      	movs	r0, r0
	...

08011a78 <__math_uflow>:
 8011a78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a80 <__math_uflow+0x8>
 8011a7c:	f7ff bfe8 	b.w	8011a50 <xflow>
 8011a80:	00000000 	.word	0x00000000
 8011a84:	10000000 	.word	0x10000000

08011a88 <__math_oflow>:
 8011a88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a90 <__math_oflow+0x8>
 8011a8c:	f7ff bfe0 	b.w	8011a50 <xflow>
 8011a90:	00000000 	.word	0x00000000
 8011a94:	70000000 	.word	0x70000000

08011a98 <__math_divzero>:
 8011a98:	b082      	sub	sp, #8
 8011a9a:	2800      	cmp	r0, #0
 8011a9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011aa0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011aa4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011aa8:	ed8d 7b00 	vstr	d7, [sp]
 8011aac:	ed9d 0b00 	vldr	d0, [sp]
 8011ab0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011ac0 <__math_divzero+0x28>
 8011ab4:	2022      	movs	r0, #34	; 0x22
 8011ab6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011aba:	b002      	add	sp, #8
 8011abc:	f7ff bfbd 	b.w	8011a3a <with_errno>
	...

08011ac8 <__math_invalid>:
 8011ac8:	eeb0 7b40 	vmov.f64	d7, d0
 8011acc:	eeb4 7b47 	vcmp.f64	d7, d7
 8011ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011ad8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011adc:	d602      	bvs.n	8011ae4 <__math_invalid+0x1c>
 8011ade:	2021      	movs	r0, #33	; 0x21
 8011ae0:	f7ff bfab 	b.w	8011a3a <with_errno>
 8011ae4:	4770      	bx	lr

08011ae6 <__math_check_uflow>:
 8011ae6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aee:	d102      	bne.n	8011af6 <__math_check_uflow+0x10>
 8011af0:	2022      	movs	r0, #34	; 0x22
 8011af2:	f7ff bfa2 	b.w	8011a3a <with_errno>
 8011af6:	4770      	bx	lr

08011af8 <__math_check_oflow>:
 8011af8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011b18 <__math_check_oflow+0x20>
 8011afc:	eeb0 7bc0 	vabs.f64	d7, d0
 8011b00:	eeb4 7b46 	vcmp.f64	d7, d6
 8011b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b08:	dd02      	ble.n	8011b10 <__math_check_oflow+0x18>
 8011b0a:	2022      	movs	r0, #34	; 0x22
 8011b0c:	f7ff bf95 	b.w	8011a3a <with_errno>
 8011b10:	4770      	bx	lr
 8011b12:	bf00      	nop
 8011b14:	f3af 8000 	nop.w
 8011b18:	ffffffff 	.word	0xffffffff
 8011b1c:	7fefffff 	.word	0x7fefffff

08011b20 <fabs>:
 8011b20:	ec51 0b10 	vmov	r0, r1, d0
 8011b24:	ee10 2a10 	vmov	r2, s0
 8011b28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b2c:	ec43 2b10 	vmov	d0, r2, r3
 8011b30:	4770      	bx	lr
	...

08011b34 <_init>:
 8011b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b36:	bf00      	nop
 8011b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b3a:	bc08      	pop	{r3}
 8011b3c:	469e      	mov	lr, r3
 8011b3e:	4770      	bx	lr

08011b40 <_fini>:
 8011b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b42:	bf00      	nop
 8011b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b46:	bc08      	pop	{r3}
 8011b48:	469e      	mov	lr, r3
 8011b4a:	4770      	bx	lr
