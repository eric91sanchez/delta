
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011fac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e20  08012250  08012250  00022250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014070  08014070  00030284  2**0
                  CONTENTS
  4 .ARM          00000008  08014070  08014070  00024070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014078  08014078  00030284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014078  08014078  00024078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801407c  0801407c  0002407c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  24000000  08014080  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b0c  24000288  08014304  00030288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000d94  08014304  00030d94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1fc  00000000  00000000  000302b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a1  00000000  00000000  0004c4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0004fa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00050d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039536  00000000  00000000  00051f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d08b  00000000  00000000  0008b45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165306  00000000  00000000  000a84e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020d7ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006268  00000000  00000000  0020d840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000288 	.word	0x24000288
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012234 	.word	0x08012234

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400028c 	.word	0x2400028c
 80002dc:	08012234 	.word	0x08012234

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	0000      	movs	r0, r0
	...

08000a80 <cinematicaInversa>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void cinematicaInversa(Vec3D _Pfin) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	ed2d 8b04 	vpush	{d8-d9}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	eeb0 5b40 	vmov.f64	d5, d0
 8000a8e:	eeb0 6b41 	vmov.f64	d6, d1
 8000a92:	eeb0 7b42 	vmov.f64	d7, d2
 8000a96:	ed87 5b00 	vstr	d5, [r7]
 8000a9a:	ed87 6b02 	vstr	d6, [r7, #8]
 8000a9e:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8000aa2:	ed97 7b02 	vldr	d7, [r7, #8]
 8000aa6:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8000e60 <cinematicaInversa+0x3e0>
 8000aaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000aae:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8000e68 <cinematicaInversa+0x3e8>
 8000ab2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ab6:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000aba:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000abe:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ac2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ac6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000aca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000ace:	eeb0 0b45 	vmov.f64	d0, d5
 8000ad2:	f010 ff81 	bl	80119d8 <pow>
 8000ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8000ada:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ade:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ae2:	4bf9      	ldr	r3, [pc, #996]	; (8000ec8 <cinematicaInversa+0x448>)
 8000ae4:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8000ae8:	ed97 7b00 	vldr	d7, [r7]
 8000aec:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e70 <cinematicaInversa+0x3f0>
 8000af0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000af4:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e78 <cinematicaInversa+0x3f8>
 8000af8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000afc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e80 <cinematicaInversa+0x400>
 8000b00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b04:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b08:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8000e88 <cinematicaInversa+0x408>
 8000b0c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000b10:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b14:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b18:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b1c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b20:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b24:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000b28:	eeb0 0b45 	vmov.f64	d0, d5
 8000b2c:	f010 ff54 	bl	80119d8 <pow>
 8000b30:	eeb0 7b40 	vmov.f64	d7, d0
 8000b34:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b3c:	4be3      	ldr	r3, [pc, #908]	; (8000ecc <cinematicaInversa+0x44c>)
 8000b3e:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8000b42:	ed97 7b00 	vldr	d7, [r7]
 8000b46:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8000e70 <cinematicaInversa+0x3f0>
 8000b4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000b4e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8000e78 <cinematicaInversa+0x3f8>
 8000b52:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b56:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b5a:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8000e88 <cinematicaInversa+0x408>
 8000b5e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000b62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b6a:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8000e90 <cinematicaInversa+0x410>
 8000b6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b72:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8000e68 <cinematicaInversa+0x3e8>
 8000b76:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000b7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b82:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b86:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000b8a:	eeb0 0b45 	vmov.f64	d0, d5
 8000b8e:	f010 ff23 	bl	80119d8 <pow>
 8000b92:	eeb0 7b40 	vmov.f64	d7, d0
 8000b96:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b9e:	4bcc      	ldr	r3, [pc, #816]	; (8000ed0 <cinematicaInversa+0x450>)
 8000ba0:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8000ba4:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ba8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8000e60 <cinematicaInversa+0x3e0>
 8000bac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bb0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8000e68 <cinematicaInversa+0x3e8>
 8000bb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bb8:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000bbc:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000bc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000bc4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000bc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000bcc:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000bd0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000bd4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8000e60 <cinematicaInversa+0x3e0>
 8000bd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bdc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000be0:	eeb0 0b47 	vmov.f64	d0, d7
 8000be4:	f010 fef8 	bl	80119d8 <pow>
 8000be8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bec:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8000e98 <cinematicaInversa+0x418>
 8000bf0:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000bf4:	ed97 7b04 	vldr	d7, [r7, #16]
 8000bf8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000bfc:	eeb0 0b47 	vmov.f64	d0, d7
 8000c00:	f010 feea 	bl	80119d8 <pow>
 8000c04:	eeb0 7b40 	vmov.f64	d7, d0
 8000c08:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000c0c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8000ea0 <cinematicaInversa+0x420>
 8000c10:	ee37 9b46 	vsub.f64	d9, d7, d6
 8000c14:	ed97 7b00 	vldr	d7, [r7]
 8000c18:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c20:	f010 feda 	bl	80119d8 <pow>
 8000c24:	eeb0 7b40 	vmov.f64	d7, d0
 8000c28:	ee39 5b07 	vadd.f64	d5, d9, d7
 8000c2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c30:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000c34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c38:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000c3c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8000ea8 <cinematicaInversa+0x428>
 8000c40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c44:	4ba3      	ldr	r3, [pc, #652]	; (8000ed4 <cinematicaInversa+0x454>)
 8000c46:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8000c4a:	ed97 7b00 	vldr	d7, [r7]
 8000c4e:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8000e70 <cinematicaInversa+0x3f0>
 8000c52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c56:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8000eb0 <cinematicaInversa+0x430>
 8000c5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c5e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000c62:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8000e88 <cinematicaInversa+0x408>
 8000c66:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000c6a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c72:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8000e80 <cinematicaInversa+0x400>
 8000c76:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000c7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c7e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000c82:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c86:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000c8a:	ed97 7b00 	vldr	d7, [r7]
 8000c8e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8000e70 <cinematicaInversa+0x3f0>
 8000c92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c96:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000c9a:	eeb0 0b47 	vmov.f64	d0, d7
 8000c9e:	f010 fe9b 	bl	80119d8 <pow>
 8000ca2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ca6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8000e98 <cinematicaInversa+0x418>
 8000caa:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000cae:	ed97 7b02 	vldr	d7, [r7, #8]
 8000cb2:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8000e88 <cinematicaInversa+0x408>
 8000cb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000cbe:	eeb0 0b47 	vmov.f64	d0, d7
 8000cc2:	f010 fe89 	bl	80119d8 <pow>
 8000cc6:	eeb0 7b40 	vmov.f64	d7, d0
 8000cca:	ee39 9b07 	vadd.f64	d9, d9, d7
 8000cce:	ed97 7b04 	vldr	d7, [r7, #16]
 8000cd2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000cd6:	eeb0 0b47 	vmov.f64	d0, d7
 8000cda:	f010 fe7d 	bl	80119d8 <pow>
 8000cde:	eeb0 7b40 	vmov.f64	d7, d0
 8000ce2:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000ce6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8000ea0 <cinematicaInversa+0x420>
 8000cea:	ee37 5b46 	vsub.f64	d5, d7, d6
 8000cee:	ed97 7b04 	vldr	d7, [r7, #16]
 8000cf2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000cf6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000cfa:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000cfe:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8000e80 <cinematicaInversa+0x400>
 8000d02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d06:	4b74      	ldr	r3, [pc, #464]	; (8000ed8 <cinematicaInversa+0x458>)
 8000d08:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8000d0c:	ed97 7b00 	vldr	d7, [r7]
 8000d10:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000e70 <cinematicaInversa+0x3f0>
 8000d14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d18:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000e78 <cinematicaInversa+0x3f8>
 8000d1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d20:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d24:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8000e88 <cinematicaInversa+0x408>
 8000d28:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000d2c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d34:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8000e90 <cinematicaInversa+0x410>
 8000d38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d3c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8000e68 <cinematicaInversa+0x3e8>
 8000d40:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000d44:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d48:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000d4c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d50:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000d54:	ed97 7b00 	vldr	d7, [r7]
 8000d58:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8000e70 <cinematicaInversa+0x3f0>
 8000d5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d60:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d64:	eeb0 0b47 	vmov.f64	d0, d7
 8000d68:	f010 fe36 	bl	80119d8 <pow>
 8000d6c:	eeb0 9b40 	vmov.f64	d9, d0
 8000d70:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d74:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8000e88 <cinematicaInversa+0x408>
 8000d78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d7c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d80:	eeb0 0b47 	vmov.f64	d0, d7
 8000d84:	f010 fe28 	bl	80119d8 <pow>
 8000d88:	eeb0 7b40 	vmov.f64	d7, d0
 8000d8c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8000d90:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d94:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d98:	eeb0 0b47 	vmov.f64	d0, d7
 8000d9c:	f010 fe1c 	bl	80119d8 <pow>
 8000da0:	eeb0 7b40 	vmov.f64	d7, d0
 8000da4:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000da8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000ea0 <cinematicaInversa+0x420>
 8000dac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000db0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000eb8 <cinematicaInversa+0x438>
 8000db4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000db8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000ec0 <cinematicaInversa+0x440>
 8000dbc:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000dc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000dc4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000dc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dcc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000dd0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000e80 <cinematicaInversa+0x400>
 8000dd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dd8:	4b40      	ldr	r3, [pc, #256]	; (8000edc <cinematicaInversa+0x45c>)
 8000dda:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8000dde:	ed97 7b02 	vldr	d7, [r7, #8]
 8000de2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8000e60 <cinematicaInversa+0x3e0>
 8000de6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000dee:	eeb0 0b47 	vmov.f64	d0, d7
 8000df2:	f010 fdf1 	bl	80119d8 <pow>
 8000df6:	eeb0 8b40 	vmov.f64	d8, d0
 8000dfa:	ed97 7b04 	vldr	d7, [r7, #16]
 8000dfe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e02:	eeb0 0b47 	vmov.f64	d0, d7
 8000e06:	f010 fde7 	bl	80119d8 <pow>
 8000e0a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e0e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000e12:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000ea0 <cinematicaInversa+0x420>
 8000e16:	ee37 8b46 	vsub.f64	d8, d7, d6
 8000e1a:	ed97 7b00 	vldr	d7, [r7]
 8000e1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e22:	eeb0 0b47 	vmov.f64	d0, d7
 8000e26:	f010 fdd7 	bl	80119d8 <pow>
 8000e2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e2e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000e32:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000eb8 <cinematicaInversa+0x438>
 8000e36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e3a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000ec0 <cinematicaInversa+0x440>
 8000e3e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000e42:	ed97 7b04 	vldr	d7, [r7, #16]
 8000e46:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000e4a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000e4e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e52:	eeb0 0b45 	vmov.f64	d0, d5
 8000e56:	f010 fdbf 	bl	80119d8 <pow>
 8000e5a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e5e:	e03f      	b.n	8000ee0 <cinematicaInversa+0x460>
 8000e60:	1eb851ec 	.word	0x1eb851ec
 8000e64:	3fb1eb85 	.word	0x3fb1eb85
 8000e68:	24dd2f1b 	.word	0x24dd2f1b
 8000e6c:	3fc58106 	.word	0x3fc58106
 8000e70:	5625749b 	.word	0x5625749b
 8000e74:	3faf09d1 	.word	0x3faf09d1
 8000e78:	e8584caa 	.word	0xe8584caa
 8000e7c:	400bb67a 	.word	0x400bb67a
 8000e80:	24dd2f1d 	.word	0x24dd2f1d
 8000e84:	3fe58106 	.word	0x3fe58106
 8000e88:	1eb851ec 	.word	0x1eb851ec
 8000e8c:	3fa1eb85 	.word	0x3fa1eb85
 8000e90:	9ba5e356 	.word	0x9ba5e356
 8000e94:	3fe020c4 	.word	0x3fe020c4
 8000e98:	3532e7b5 	.word	0x3532e7b5
 8000e9c:	3fc0de09 	.word	0x3fc0de09
 8000ea0:	70a3d70a 	.word	0x70a3d70a
 8000ea4:	3fd70a3d 	.word	0x3fd70a3d
 8000ea8:	24dd2f1b 	.word	0x24dd2f1b
 8000eac:	3fd58106 	.word	0x3fd58106
 8000eb0:	e8584caa 	.word	0xe8584caa
 8000eb4:	c00bb67a 	.word	0xc00bb67a
 8000eb8:	93d96639 	.word	0x93d96639
 8000ebc:	3f9ce6c0 	.word	0x3f9ce6c0
 8000ec0:	47ae147c 	.word	0x47ae147c
 8000ec4:	3fc47ae1 	.word	0x3fc47ae1
 8000ec8:	240002a8 	.word	0x240002a8
 8000ecc:	240002f0 	.word	0x240002f0
 8000ed0:	24000338 	.word	0x24000338
 8000ed4:	240002b0 	.word	0x240002b0
 8000ed8:	240002f8 	.word	0x240002f8
 8000edc:	24000340 	.word	0x24000340
 8000ee0:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001260 <cinematicaInversa+0x7e0>
 8000ee4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ee8:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001268 <cinematicaInversa+0x7e8>
 8000eec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ef0:	4be7      	ldr	r3, [pc, #924]	; (8001290 <cinematicaInversa+0x810>)
 8000ef2:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8000ef6:	ed97 7b00 	vldr	d7, [r7]
 8000efa:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001270 <cinematicaInversa+0x7f0>
 8000efe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f02:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f06:	eeb0 0b47 	vmov.f64	d0, d7
 8000f0a:	f010 fd65 	bl	80119d8 <pow>
 8000f0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000f12:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001278 <cinematicaInversa+0x7f8>
 8000f16:	ee37 8b06 	vadd.f64	d8, d7, d6
 8000f1a:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f1e:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001280 <cinematicaInversa+0x800>
 8000f22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f26:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f2a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f2e:	f010 fd53 	bl	80119d8 <pow>
 8000f32:	eeb0 7b40 	vmov.f64	d7, d0
 8000f36:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000f3a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f42:	eeb0 0b47 	vmov.f64	d0, d7
 8000f46:	f010 fd47 	bl	80119d8 <pow>
 8000f4a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f4e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f52:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001288 <cinematicaInversa+0x808>
 8000f56:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000f5a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f62:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000f66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f6a:	eeb0 0b45 	vmov.f64	d0, d5
 8000f6e:	f010 fd33 	bl	80119d8 <pow>
 8000f72:	eeb0 7b40 	vmov.f64	d7, d0
 8000f76:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001278 <cinematicaInversa+0x7f8>
 8000f7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f7e:	4bc5      	ldr	r3, [pc, #788]	; (8001294 <cinematicaInversa+0x814>)
 8000f80:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8000f84:	ed97 7b00 	vldr	d7, [r7]
 8000f88:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001270 <cinematicaInversa+0x7f0>
 8000f8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f90:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f94:	eeb0 0b47 	vmov.f64	d0, d7
 8000f98:	f010 fd1e 	bl	80119d8 <pow>
 8000f9c:	eeb0 8b40 	vmov.f64	d8, d0
 8000fa0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fa4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001280 <cinematicaInversa+0x800>
 8000fa8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8000fb4:	f010 fd10 	bl	80119d8 <pow>
 8000fb8:	eeb0 7b40 	vmov.f64	d7, d0
 8000fbc:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000fc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000fc4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fc8:	eeb0 0b47 	vmov.f64	d0, d7
 8000fcc:	f010 fd04 	bl	80119d8 <pow>
 8000fd0:	eeb0 7b40 	vmov.f64	d7, d0
 8000fd4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000fd8:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001288 <cinematicaInversa+0x808>
 8000fdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fe0:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001268 <cinematicaInversa+0x7e8>
 8000fe4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fe8:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001260 <cinematicaInversa+0x7e0>
 8000fec:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000ff0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ff4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ff8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ffc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001000:	eeb0 0b45 	vmov.f64	d0, d5
 8001004:	f010 fce8 	bl	80119d8 <pow>
 8001008:	eeb0 7b40 	vmov.f64	d7, d0
 800100c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001278 <cinematicaInversa+0x7f8>
 8001010:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001014:	4ba0      	ldr	r3, [pc, #640]	; (8001298 <cinematicaInversa+0x818>)
 8001016:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800101a:	4ba0      	ldr	r3, [pc, #640]	; (800129c <cinematicaInversa+0x81c>)
 800101c:	ed93 7b00 	vldr	d7, [r3]
 8001020:	eeb1 8b47 	vneg.f64	d8, d7
 8001024:	4b9d      	ldr	r3, [pc, #628]	; (800129c <cinematicaInversa+0x81c>)
 8001026:	ed93 7b00 	vldr	d7, [r3]
 800102a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800102e:	eeb0 0b47 	vmov.f64	d0, d7
 8001032:	f010 fcd1 	bl	80119d8 <pow>
 8001036:	eeb0 5b40 	vmov.f64	d5, d0
 800103a:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <cinematicaInversa+0x820>)
 800103c:	ed93 7b00 	vldr	d7, [r3]
 8001040:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001044:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001048:	4b91      	ldr	r3, [pc, #580]	; (8001290 <cinematicaInversa+0x810>)
 800104a:	ed93 7b00 	vldr	d7, [r3]
 800104e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001052:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001056:	eeb0 0b47 	vmov.f64	d0, d7
 800105a:	f010 ff3d 	bl	8011ed8 <sqrt>
 800105e:	eeb0 7b40 	vmov.f64	d7, d0
 8001062:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001066:	4b8e      	ldr	r3, [pc, #568]	; (80012a0 <cinematicaInversa+0x820>)
 8001068:	ed93 7b00 	vldr	d7, [r3]
 800106c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001070:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001074:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <cinematicaInversa+0x824>)
 8001076:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800107a:	4b88      	ldr	r3, [pc, #544]	; (800129c <cinematicaInversa+0x81c>)
 800107c:	ed93 7b00 	vldr	d7, [r3]
 8001080:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001084:	eeb0 0b47 	vmov.f64	d0, d7
 8001088:	f010 fca6 	bl	80119d8 <pow>
 800108c:	eeb0 5b40 	vmov.f64	d5, d0
 8001090:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <cinematicaInversa+0x820>)
 8001092:	ed93 7b00 	vldr	d7, [r3]
 8001096:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800109a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800109e:	4b7c      	ldr	r3, [pc, #496]	; (8001290 <cinematicaInversa+0x810>)
 80010a0:	ed93 7b00 	vldr	d7, [r3]
 80010a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80010ac:	eeb0 0b47 	vmov.f64	d0, d7
 80010b0:	f010 ff12 	bl	8011ed8 <sqrt>
 80010b4:	eeb0 6b40 	vmov.f64	d6, d0
 80010b8:	4b78      	ldr	r3, [pc, #480]	; (800129c <cinematicaInversa+0x81c>)
 80010ba:	ed93 7b00 	vldr	d7, [r3]
 80010be:	ee36 5b47 	vsub.f64	d5, d6, d7
 80010c2:	4b77      	ldr	r3, [pc, #476]	; (80012a0 <cinematicaInversa+0x820>)
 80010c4:	ed93 7b00 	vldr	d7, [r3]
 80010c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80010cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010d0:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <cinematicaInversa+0x828>)
 80010d2:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80010d6:	4b75      	ldr	r3, [pc, #468]	; (80012ac <cinematicaInversa+0x82c>)
 80010d8:	ed93 7b00 	vldr	d7, [r3]
 80010dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80010e0:	eeb0 0b47 	vmov.f64	d0, d7
 80010e4:	f010 fc78 	bl	80119d8 <pow>
 80010e8:	eeb0 5b40 	vmov.f64	d5, d0
 80010ec:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <cinematicaInversa+0x830>)
 80010ee:	ed93 7b00 	vldr	d7, [r3]
 80010f2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80010f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <cinematicaInversa+0x814>)
 80010fc:	ed93 7b00 	vldr	d7, [r3]
 8001100:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001104:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001108:	eeb0 0b47 	vmov.f64	d0, d7
 800110c:	f010 fee4 	bl	8011ed8 <sqrt>
 8001110:	eeb0 6b40 	vmov.f64	d6, d0
 8001114:	4b65      	ldr	r3, [pc, #404]	; (80012ac <cinematicaInversa+0x82c>)
 8001116:	ed93 7b00 	vldr	d7, [r3]
 800111a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800111e:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <cinematicaInversa+0x830>)
 8001120:	ed93 7b00 	vldr	d7, [r3]
 8001124:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001128:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800112c:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <cinematicaInversa+0x834>)
 800112e:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001132:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <cinematicaInversa+0x82c>)
 8001134:	ed93 7b00 	vldr	d7, [r3]
 8001138:	eeb1 8b47 	vneg.f64	d8, d7
 800113c:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <cinematicaInversa+0x82c>)
 800113e:	ed93 7b00 	vldr	d7, [r3]
 8001142:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001146:	eeb0 0b47 	vmov.f64	d0, d7
 800114a:	f010 fc45 	bl	80119d8 <pow>
 800114e:	eeb0 5b40 	vmov.f64	d5, d0
 8001152:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <cinematicaInversa+0x830>)
 8001154:	ed93 7b00 	vldr	d7, [r3]
 8001158:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800115c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <cinematicaInversa+0x814>)
 8001162:	ed93 7b00 	vldr	d7, [r3]
 8001166:	ee26 7b07 	vmul.f64	d7, d6, d7
 800116a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800116e:	eeb0 0b47 	vmov.f64	d0, d7
 8001172:	f010 feb1 	bl	8011ed8 <sqrt>
 8001176:	eeb0 7b40 	vmov.f64	d7, d0
 800117a:	ee38 5b47 	vsub.f64	d5, d8, d7
 800117e:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <cinematicaInversa+0x830>)
 8001180:	ed93 7b00 	vldr	d7, [r3]
 8001184:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001188:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800118c:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <cinematicaInversa+0x838>)
 800118e:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <cinematicaInversa+0x83c>)
 8001194:	ed93 7b00 	vldr	d7, [r3]
 8001198:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800119c:	eeb0 0b47 	vmov.f64	d0, d7
 80011a0:	f010 fc1a 	bl	80119d8 <pow>
 80011a4:	eeb0 5b40 	vmov.f64	d5, d0
 80011a8:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <cinematicaInversa+0x840>)
 80011aa:	ed93 7b00 	vldr	d7, [r3]
 80011ae:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80011b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <cinematicaInversa+0x818>)
 80011b8:	ed93 7b00 	vldr	d7, [r3]
 80011bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80011c4:	eeb0 0b47 	vmov.f64	d0, d7
 80011c8:	f010 fe86 	bl	8011ed8 <sqrt>
 80011cc:	eeb0 6b40 	vmov.f64	d6, d0
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <cinematicaInversa+0x83c>)
 80011d2:	ed93 7b00 	vldr	d7, [r3]
 80011d6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <cinematicaInversa+0x840>)
 80011dc:	ed93 7b00 	vldr	d7, [r3]
 80011e0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80011e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <cinematicaInversa+0x844>)
 80011ea:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <cinematicaInversa+0x83c>)
 80011f0:	ed93 7b00 	vldr	d7, [r3]
 80011f4:	eeb1 8b47 	vneg.f64	d8, d7
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <cinematicaInversa+0x83c>)
 80011fa:	ed93 7b00 	vldr	d7, [r3]
 80011fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001202:	eeb0 0b47 	vmov.f64	d0, d7
 8001206:	f010 fbe7 	bl	80119d8 <pow>
 800120a:	eeb0 5b40 	vmov.f64	d5, d0
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <cinematicaInversa+0x840>)
 8001210:	ed93 7b00 	vldr	d7, [r3]
 8001214:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001218:	ee27 6b06 	vmul.f64	d6, d7, d6
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <cinematicaInversa+0x818>)
 800121e:	ed93 7b00 	vldr	d7, [r3]
 8001222:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001226:	ee35 7b47 	vsub.f64	d7, d5, d7
 800122a:	eeb0 0b47 	vmov.f64	d0, d7
 800122e:	f010 fe53 	bl	8011ed8 <sqrt>
 8001232:	eeb0 7b40 	vmov.f64	d7, d0
 8001236:	ee38 5b47 	vsub.f64	d5, d8, d7
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <cinematicaInversa+0x840>)
 800123c:	ed93 7b00 	vldr	d7, [r3]
 8001240:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001244:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <cinematicaInversa+0x848>)
 800124a:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 800124e:	491f      	ldr	r1, [pc, #124]	; (80012cc <cinematicaInversa+0x84c>)
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	e9c1 2300 	strd	r2, r3, [r1]
 800125c:	e038      	b.n	80012d0 <cinematicaInversa+0x850>
 800125e:	bf00      	nop
 8001260:	47ae147c 	.word	0x47ae147c
 8001264:	3fc47ae1 	.word	0x3fc47ae1
 8001268:	93d96639 	.word	0x93d96639
 800126c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001270:	5625749b 	.word	0x5625749b
 8001274:	3faf09d1 	.word	0x3faf09d1
 8001278:	3532e7b5 	.word	0x3532e7b5
 800127c:	3fc0de09 	.word	0x3fc0de09
 8001280:	1eb851ec 	.word	0x1eb851ec
 8001284:	3fa1eb85 	.word	0x3fa1eb85
 8001288:	70a3d70a 	.word	0x70a3d70a
 800128c:	3fd70a3d 	.word	0x3fd70a3d
 8001290:	240002b8 	.word	0x240002b8
 8001294:	24000300 	.word	0x24000300
 8001298:	24000348 	.word	0x24000348
 800129c:	240002b0 	.word	0x240002b0
 80012a0:	240002a8 	.word	0x240002a8
 80012a4:	240002d0 	.word	0x240002d0
 80012a8:	240002d8 	.word	0x240002d8
 80012ac:	240002f8 	.word	0x240002f8
 80012b0:	240002f0 	.word	0x240002f0
 80012b4:	24000318 	.word	0x24000318
 80012b8:	24000320 	.word	0x24000320
 80012bc:	24000340 	.word	0x24000340
 80012c0:	24000338 	.word	0x24000338
 80012c4:	24000360 	.word	0x24000360
 80012c8:	24000368 	.word	0x24000368
 80012cc:	240002c0 	.word	0x240002c0
	XJ1_2 = 0;
 80012d0:	49f1      	ldr	r1, [pc, #964]	; (8001698 <cinematicaInversa+0xc18>)
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 80012de:	4bef      	ldr	r3, [pc, #956]	; (800169c <cinematicaInversa+0xc1c>)
 80012e0:	ed93 7b00 	vldr	d7, [r3]
 80012e4:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8001630 <cinematicaInversa+0xbb0>
 80012e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012ec:	4bec      	ldr	r3, [pc, #944]	; (80016a0 <cinematicaInversa+0xc20>)
 80012ee:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 80012f2:	4bec      	ldr	r3, [pc, #944]	; (80016a4 <cinematicaInversa+0xc24>)
 80012f4:	ed93 7b00 	vldr	d7, [r3]
 80012f8:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001630 <cinematicaInversa+0xbb0>
 80012fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001300:	4be9      	ldr	r3, [pc, #932]	; (80016a8 <cinematicaInversa+0xc28>)
 8001302:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001306:	4be9      	ldr	r3, [pc, #932]	; (80016ac <cinematicaInversa+0xc2c>)
 8001308:	ed93 7b00 	vldr	d7, [r3]
 800130c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001638 <cinematicaInversa+0xbb8>
 8001310:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001314:	4be6      	ldr	r3, [pc, #920]	; (80016b0 <cinematicaInversa+0xc30>)
 8001316:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 800131a:	4be6      	ldr	r3, [pc, #920]	; (80016b4 <cinematicaInversa+0xc34>)
 800131c:	ed93 7b00 	vldr	d7, [r3]
 8001320:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8001638 <cinematicaInversa+0xbb8>
 8001324:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001328:	4be3      	ldr	r3, [pc, #908]	; (80016b8 <cinematicaInversa+0xc38>)
 800132a:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 800132e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001332:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001640 <cinematicaInversa+0xbc0>
 8001336:	ee37 7b46 	vsub.f64	d7, d7, d6
 800133a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001648 <cinematicaInversa+0xbc8>
 800133e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001342:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001346:	ee27 5b06 	vmul.f64	d5, d7, d6
 800134a:	ed97 7b04 	vldr	d7, [r7, #16]
 800134e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001352:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001356:	4bd9      	ldr	r3, [pc, #868]	; (80016bc <cinematicaInversa+0xc3c>)
 8001358:	ed93 7b00 	vldr	d7, [r3]
 800135c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001360:	ed97 7b02 	vldr	d7, [r7, #8]
 8001364:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001640 <cinematicaInversa+0xbc0>
 8001368:	ee37 7b46 	vsub.f64	d7, d7, d6
 800136c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001370:	eeb0 0b47 	vmov.f64	d0, d7
 8001374:	f010 fb30 	bl	80119d8 <pow>
 8001378:	eeb0 9b40 	vmov.f64	d9, d0
 800137c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001380:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001384:	eeb0 0b47 	vmov.f64	d0, d7
 8001388:	f010 fb26 	bl	80119d8 <pow>
 800138c:	eeb0 7b40 	vmov.f64	d7, d0
 8001390:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001394:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8001650 <cinematicaInversa+0xbd0>
 8001398:	ee37 9b46 	vsub.f64	d9, d7, d6
 800139c:	ed97 7b00 	vldr	d7, [r7]
 80013a0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013a4:	eeb0 0b47 	vmov.f64	d0, d7
 80013a8:	f010 fb16 	bl	80119d8 <pow>
 80013ac:	eeb0 7b40 	vmov.f64	d7, d0
 80013b0:	ee39 7b07 	vadd.f64	d7, d9, d7
 80013b4:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001658 <cinematicaInversa+0xbd8>
 80013b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013bc:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001660 <cinematicaInversa+0xbe0>
 80013c0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80013c4:	ed97 7b04 	vldr	d7, [r7, #16]
 80013c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80013cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013d0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013d4:	4bba      	ldr	r3, [pc, #744]	; (80016c0 <cinematicaInversa+0xc40>)
 80013d6:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 80013da:	ed97 7b02 	vldr	d7, [r7, #8]
 80013de:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8001640 <cinematicaInversa+0xbc0>
 80013e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013e6:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8001648 <cinematicaInversa+0xbc8>
 80013ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013ee:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80013f2:	ee27 5b06 	vmul.f64	d5, d7, d6
 80013f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80013fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80013fe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001402:	4bb0      	ldr	r3, [pc, #704]	; (80016c4 <cinematicaInversa+0xc44>)
 8001404:	ed93 7b00 	vldr	d7, [r3]
 8001408:	ee26 8b07 	vmul.f64	d8, d6, d7
 800140c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001410:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8001640 <cinematicaInversa+0xbc0>
 8001414:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001418:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800141c:	eeb0 0b47 	vmov.f64	d0, d7
 8001420:	f010 fada 	bl	80119d8 <pow>
 8001424:	eeb0 9b40 	vmov.f64	d9, d0
 8001428:	ed97 7b04 	vldr	d7, [r7, #16]
 800142c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001430:	eeb0 0b47 	vmov.f64	d0, d7
 8001434:	f010 fad0 	bl	80119d8 <pow>
 8001438:	eeb0 7b40 	vmov.f64	d7, d0
 800143c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001440:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001650 <cinematicaInversa+0xbd0>
 8001444:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001448:	ed97 7b00 	vldr	d7, [r7]
 800144c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001450:	eeb0 0b47 	vmov.f64	d0, d7
 8001454:	f010 fac0 	bl	80119d8 <pow>
 8001458:	eeb0 7b40 	vmov.f64	d7, d0
 800145c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001460:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001658 <cinematicaInversa+0xbd8>
 8001464:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001468:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001660 <cinematicaInversa+0xbe0>
 800146c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001470:	ed97 7b04 	vldr	d7, [r7, #16]
 8001474:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001478:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800147c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001480:	4b91      	ldr	r3, [pc, #580]	; (80016c8 <cinematicaInversa+0xc48>)
 8001482:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001486:	ed97 7b00 	vldr	d7, [r7]
 800148a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001668 <cinematicaInversa+0xbe8>
 800148e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001492:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001670 <cinematicaInversa+0xbf0>
 8001496:	ee27 6b06 	vmul.f64	d6, d7, d6
 800149a:	ed97 7b02 	vldr	d7, [r7, #8]
 800149e:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8001678 <cinematicaInversa+0xbf8>
 80014a2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80014a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80014aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014ae:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8001680 <cinematicaInversa+0xc00>
 80014b2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80014b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80014ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80014be:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80014c2:	4b76      	ldr	r3, [pc, #472]	; (800169c <cinematicaInversa+0xc1c>)
 80014c4:	ed93 7b00 	vldr	d7, [r3]
 80014c8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80014cc:	ed97 7b00 	vldr	d7, [r7]
 80014d0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001668 <cinematicaInversa+0xbe8>
 80014d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014dc:	eeb0 0b47 	vmov.f64	d0, d7
 80014e0:	f010 fa7a 	bl	80119d8 <pow>
 80014e4:	eeb0 7b40 	vmov.f64	d7, d0
 80014e8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001688 <cinematicaInversa+0xc08>
 80014ec:	ee37 9b06 	vadd.f64	d9, d7, d6
 80014f0:	ed97 7b02 	vldr	d7, [r7, #8]
 80014f4:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001678 <cinematicaInversa+0xbf8>
 80014f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014fc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001500:	eeb0 0b47 	vmov.f64	d0, d7
 8001504:	f010 fa68 	bl	80119d8 <pow>
 8001508:	eeb0 7b40 	vmov.f64	d7, d0
 800150c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001510:	ed97 7b04 	vldr	d7, [r7, #16]
 8001514:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001518:	eeb0 0b47 	vmov.f64	d0, d7
 800151c:	f010 fa5c 	bl	80119d8 <pow>
 8001520:	eeb0 7b40 	vmov.f64	d7, d0
 8001524:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001528:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001650 <cinematicaInversa+0xbd0>
 800152c:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001530:	ed97 7b04 	vldr	d7, [r7, #16]
 8001534:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001538:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800153c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001540:	4b62      	ldr	r3, [pc, #392]	; (80016cc <cinematicaInversa+0xc4c>)
 8001542:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001546:	ed97 7b00 	vldr	d7, [r7]
 800154a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001668 <cinematicaInversa+0xbe8>
 800154e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001552:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001670 <cinematicaInversa+0xbf0>
 8001556:	ee27 6b06 	vmul.f64	d6, d7, d6
 800155a:	ed97 7b02 	vldr	d7, [r7, #8]
 800155e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001678 <cinematicaInversa+0xbf8>
 8001562:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001566:	ee37 7b07 	vadd.f64	d7, d7, d7
 800156a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800156e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001680 <cinematicaInversa+0xc00>
 8001572:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001576:	ed97 7b04 	vldr	d7, [r7, #16]
 800157a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800157e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001582:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <cinematicaInversa+0xc24>)
 8001584:	ed93 7b00 	vldr	d7, [r3]
 8001588:	ee26 8b07 	vmul.f64	d8, d6, d7
 800158c:	ed97 7b00 	vldr	d7, [r7]
 8001590:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001668 <cinematicaInversa+0xbe8>
 8001594:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001598:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800159c:	eeb0 0b47 	vmov.f64	d0, d7
 80015a0:	f010 fa1a 	bl	80119d8 <pow>
 80015a4:	eeb0 7b40 	vmov.f64	d7, d0
 80015a8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8001688 <cinematicaInversa+0xc08>
 80015ac:	ee37 9b06 	vadd.f64	d9, d7, d6
 80015b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80015b4:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8001678 <cinematicaInversa+0xbf8>
 80015b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015bc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015c0:	eeb0 0b47 	vmov.f64	d0, d7
 80015c4:	f010 fa08 	bl	80119d8 <pow>
 80015c8:	eeb0 7b40 	vmov.f64	d7, d0
 80015cc:	ee39 9b07 	vadd.f64	d9, d9, d7
 80015d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80015d4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015d8:	eeb0 0b47 	vmov.f64	d0, d7
 80015dc:	f010 f9fc 	bl	80119d8 <pow>
 80015e0:	eeb0 7b40 	vmov.f64	d7, d0
 80015e4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80015e8:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001650 <cinematicaInversa+0xbd0>
 80015ec:	ee37 5b46 	vsub.f64	d5, d7, d6
 80015f0:	ed97 7b04 	vldr	d7, [r7, #16]
 80015f4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80015f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015fc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <cinematicaInversa+0xc50>)
 8001602:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001606:	ed97 7b00 	vldr	d7, [r7]
 800160a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001668 <cinematicaInversa+0xbe8>
 800160e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001612:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001690 <cinematicaInversa+0xc10>
 8001616:	ee27 6b06 	vmul.f64	d6, d7, d6
 800161a:	ed97 7b02 	vldr	d7, [r7, #8]
 800161e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8001678 <cinematicaInversa+0xbf8>
 8001622:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001626:	ee37 7b07 	vadd.f64	d7, d7, d7
 800162a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800162e:	e051      	b.n	80016d4 <cinematicaInversa+0xc54>
 8001630:	e8584caa 	.word	0xe8584caa
 8001634:	3ffbb67a 	.word	0x3ffbb67a
 8001638:	e8584caa 	.word	0xe8584caa
 800163c:	bffbb67a 	.word	0xbffbb67a
 8001640:	1eb851ec 	.word	0x1eb851ec
 8001644:	3fb1eb85 	.word	0x3fb1eb85
 8001648:	24dd2f1b 	.word	0x24dd2f1b
 800164c:	3fc58106 	.word	0x3fc58106
 8001650:	70a3d70a 	.word	0x70a3d70a
 8001654:	3fd70a3d 	.word	0x3fd70a3d
 8001658:	93d96639 	.word	0x93d96639
 800165c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001660:	47ae147c 	.word	0x47ae147c
 8001664:	3fc47ae1 	.word	0x3fc47ae1
 8001668:	5625749b 	.word	0x5625749b
 800166c:	3faf09d1 	.word	0x3faf09d1
 8001670:	e8584caa 	.word	0xe8584caa
 8001674:	c00bb67a 	.word	0xc00bb67a
 8001678:	1eb851ec 	.word	0x1eb851ec
 800167c:	3fa1eb85 	.word	0x3fa1eb85
 8001680:	24dd2f1d 	.word	0x24dd2f1d
 8001684:	3fe58106 	.word	0x3fe58106
 8001688:	3532e7b5 	.word	0x3532e7b5
 800168c:	3fc0de09 	.word	0x3fc0de09
 8001690:	e8584caa 	.word	0xe8584caa
 8001694:	400bb67a 	.word	0x400bb67a
 8001698:	240002c8 	.word	0x240002c8
 800169c:	24000318 	.word	0x24000318
 80016a0:	24000308 	.word	0x24000308
 80016a4:	24000320 	.word	0x24000320
 80016a8:	24000310 	.word	0x24000310
 80016ac:	24000360 	.word	0x24000360
 80016b0:	24000350 	.word	0x24000350
 80016b4:	24000368 	.word	0x24000368
 80016b8:	24000358 	.word	0x24000358
 80016bc:	240002d0 	.word	0x240002d0
 80016c0:	240002e0 	.word	0x240002e0
 80016c4:	240002d8 	.word	0x240002d8
 80016c8:	240002e8 	.word	0x240002e8
 80016cc:	24000328 	.word	0x24000328
 80016d0:	24000330 	.word	0x24000330
 80016d4:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8001918 <cinematicaInversa+0xe98>
 80016d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016dc:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8001920 <cinematicaInversa+0xea0>
 80016e0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80016e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80016e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016ec:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016f0:	4b9f      	ldr	r3, [pc, #636]	; (8001970 <cinematicaInversa+0xef0>)
 80016f2:	ed93 7b00 	vldr	d7, [r3]
 80016f6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80016fa:	ed97 7b00 	vldr	d7, [r7]
 80016fe:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8001928 <cinematicaInversa+0xea8>
 8001702:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001706:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800170a:	eeb0 0b47 	vmov.f64	d0, d7
 800170e:	f010 f963 	bl	80119d8 <pow>
 8001712:	eeb0 9b40 	vmov.f64	d9, d0
 8001716:	ed97 7b02 	vldr	d7, [r7, #8]
 800171a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8001930 <cinematicaInversa+0xeb0>
 800171e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001722:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001726:	eeb0 0b47 	vmov.f64	d0, d7
 800172a:	f010 f955 	bl	80119d8 <pow>
 800172e:	eeb0 7b40 	vmov.f64	d7, d0
 8001732:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001736:	ed97 7b04 	vldr	d7, [r7, #16]
 800173a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800173e:	eeb0 0b47 	vmov.f64	d0, d7
 8001742:	f010 f949 	bl	80119d8 <pow>
 8001746:	eeb0 7b40 	vmov.f64	d7, d0
 800174a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800174e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001938 <cinematicaInversa+0xeb8>
 8001752:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001756:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001940 <cinematicaInversa+0xec0>
 800175a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800175e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001948 <cinematicaInversa+0xec8>
 8001762:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001766:	ed97 7b04 	vldr	d7, [r7, #16]
 800176a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800176e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001772:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001776:	4b7f      	ldr	r3, [pc, #508]	; (8001974 <cinematicaInversa+0xef4>)
 8001778:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800177c:	ed97 7b00 	vldr	d7, [r7]
 8001780:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001928 <cinematicaInversa+0xea8>
 8001784:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001788:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8001950 <cinematicaInversa+0xed0>
 800178c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001790:	ed97 7b02 	vldr	d7, [r7, #8]
 8001794:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8001930 <cinematicaInversa+0xeb0>
 8001798:	ee37 7b05 	vadd.f64	d7, d7, d5
 800179c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017a4:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001918 <cinematicaInversa+0xe98>
 80017a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017ac:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001920 <cinematicaInversa+0xea0>
 80017b0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80017b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80017b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017c0:	4b6d      	ldr	r3, [pc, #436]	; (8001978 <cinematicaInversa+0xef8>)
 80017c2:	ed93 7b00 	vldr	d7, [r3]
 80017c6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80017ca:	ed97 7b00 	vldr	d7, [r7]
 80017ce:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001928 <cinematicaInversa+0xea8>
 80017d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017da:	eeb0 0b47 	vmov.f64	d0, d7
 80017de:	f010 f8fb 	bl	80119d8 <pow>
 80017e2:	eeb0 9b40 	vmov.f64	d9, d0
 80017e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80017ea:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8001930 <cinematicaInversa+0xeb0>
 80017ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017f2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017f6:	eeb0 0b47 	vmov.f64	d0, d7
 80017fa:	f010 f8ed 	bl	80119d8 <pow>
 80017fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001802:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001806:	ed97 7b04 	vldr	d7, [r7, #16]
 800180a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800180e:	eeb0 0b47 	vmov.f64	d0, d7
 8001812:	f010 f8e1 	bl	80119d8 <pow>
 8001816:	eeb0 7b40 	vmov.f64	d7, d0
 800181a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800181e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001938 <cinematicaInversa+0xeb8>
 8001822:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001826:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001940 <cinematicaInversa+0xec0>
 800182a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800182e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001948 <cinematicaInversa+0xec8>
 8001832:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001836:	ed97 7b04 	vldr	d7, [r7, #16]
 800183a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800183e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001842:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001846:	4b4d      	ldr	r3, [pc, #308]	; (800197c <cinematicaInversa+0xefc>)
 8001848:	ed83 7b00 	vstr	d7, [r3]

	titha1 = -1.0 * asin(ZJ1_1 / L1);
 800184c:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <cinematicaInversa+0xf00>)
 800184e:	ed93 7b00 	vldr	d7, [r3]
 8001852:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001958 <cinematicaInversa+0xed8>
 8001856:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800185a:	eeb0 0b46 	vmov.f64	d0, d6
 800185e:	f010 fb0d 	bl	8011e7c <asin>
 8001862:	eeb0 7b40 	vmov.f64	d7, d0
 8001866:	eeb1 7b47 	vneg.f64	d7, d7
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <cinematicaInversa+0xf04>)
 800186c:	ed83 7b00 	vstr	d7, [r3]
	titha1 = titha1 * RAD_TO_DEG;
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <cinematicaInversa+0xf04>)
 8001872:	ed93 7b00 	vldr	d7, [r3]
 8001876:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001960 <cinematicaInversa+0xee0>
 800187a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800187e:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8001968 <cinematicaInversa+0xee8>
 8001882:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <cinematicaInversa+0xf04>)
 8001888:	ed83 7b00 	vstr	d7, [r3]
	titha2 = -1.0 * asin(ZJ2_1 / L1);
 800188c:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <cinematicaInversa+0xf08>)
 800188e:	ed93 7b00 	vldr	d7, [r3]
 8001892:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001958 <cinematicaInversa+0xed8>
 8001896:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800189a:	eeb0 0b46 	vmov.f64	d0, d6
 800189e:	f010 faed 	bl	8011e7c <asin>
 80018a2:	eeb0 7b40 	vmov.f64	d7, d0
 80018a6:	eeb1 7b47 	vneg.f64	d7, d7
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <cinematicaInversa+0xf0c>)
 80018ac:	ed83 7b00 	vstr	d7, [r3]
	titha2 = titha2 * RAD_TO_DEG;
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <cinematicaInversa+0xf0c>)
 80018b2:	ed93 7b00 	vldr	d7, [r3]
 80018b6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001960 <cinematicaInversa+0xee0>
 80018ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018be:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001968 <cinematicaInversa+0xee8>
 80018c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <cinematicaInversa+0xf0c>)
 80018c8:	ed83 7b00 	vstr	d7, [r3]
	titha3 = -1.0 * asin(ZJ3_1 / L1);
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <cinematicaInversa+0xef4>)
 80018ce:	ed93 7b00 	vldr	d7, [r3]
 80018d2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001958 <cinematicaInversa+0xed8>
 80018d6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80018da:	eeb0 0b46 	vmov.f64	d0, d6
 80018de:	f010 facd 	bl	8011e7c <asin>
 80018e2:	eeb0 7b40 	vmov.f64	d7, d0
 80018e6:	eeb1 7b47 	vneg.f64	d7, d7
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <cinematicaInversa+0xf10>)
 80018ec:	ed83 7b00 	vstr	d7, [r3]
	titha3 = titha3 * RAD_TO_DEG;
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <cinematicaInversa+0xf10>)
 80018f2:	ed93 7b00 	vldr	d7, [r3]
 80018f6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001960 <cinematicaInversa+0xee0>
 80018fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018fe:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8001968 <cinematicaInversa+0xee8>
 8001902:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <cinematicaInversa+0xf10>)
 8001908:	ed83 7b00 	vstr	d7, [r3]
}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	ecbd 8b04 	vpop	{d8-d9}
 8001916:	bd80      	pop	{r7, pc}
 8001918:	9ba5e356 	.word	0x9ba5e356
 800191c:	3fe020c4 	.word	0x3fe020c4
 8001920:	24dd2f1b 	.word	0x24dd2f1b
 8001924:	3fc58106 	.word	0x3fc58106
 8001928:	5625749b 	.word	0x5625749b
 800192c:	3faf09d1 	.word	0x3faf09d1
 8001930:	1eb851ec 	.word	0x1eb851ec
 8001934:	3fa1eb85 	.word	0x3fa1eb85
 8001938:	70a3d70a 	.word	0x70a3d70a
 800193c:	3fd70a3d 	.word	0x3fd70a3d
 8001940:	93d96639 	.word	0x93d96639
 8001944:	3f9ce6c0 	.word	0x3f9ce6c0
 8001948:	47ae147c 	.word	0x47ae147c
 800194c:	3fc47ae1 	.word	0x3fc47ae1
 8001950:	e8584caa 	.word	0xe8584caa
 8001954:	400bb67a 	.word	0x400bb67a
 8001958:	9999999a 	.word	0x9999999a
 800195c:	3fd99999 	.word	0x3fd99999
 8001960:	00000000 	.word	0x00000000
 8001964:	40668000 	.word	0x40668000
 8001968:	54442eea 	.word	0x54442eea
 800196c:	400921fb 	.word	0x400921fb
 8001970:	24000360 	.word	0x24000360
 8001974:	24000370 	.word	0x24000370
 8001978:	24000368 	.word	0x24000368
 800197c:	24000378 	.word	0x24000378
 8001980:	240002e0 	.word	0x240002e0
 8001984:	240003c0 	.word	0x240003c0
 8001988:	24000328 	.word	0x24000328
 800198c:	240003c8 	.word	0x240003c8
 8001990:	240003d0 	.word	0x240003d0

08001994 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019aa:	4b74      	ldr	r3, [pc, #464]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	4a72      	ldr	r2, [pc, #456]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ba:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b6c      	ldr	r3, [pc, #432]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ce:	4a6b      	ldr	r2, [pc, #428]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	4a63      	ldr	r2, [pc, #396]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ee:	f043 0320 	orr.w	r3, r3, #32
 80019f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f6:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a04:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	4a5c      	ldr	r2, [pc, #368]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a32:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	4a4d      	ldr	r2, [pc, #308]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a50:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5e:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	4a45      	ldr	r2, [pc, #276]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001a82:	483f      	ldr	r0, [pc, #252]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001a84:	f006 f9f2 	bl	8007e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2170      	movs	r1, #112	; 0x70
 8001a8c:	483d      	ldr	r0, [pc, #244]	; (8001b84 <MX_GPIO_Init+0x1f0>)
 8001a8e:	f006 f9ed 	bl	8007e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8001a92:	233f      	movs	r3, #63	; 0x3f
 8001a94:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4838      	ldr	r0, [pc, #224]	; (8001b88 <MX_GPIO_Init+0x1f4>)
 8001aa8:	f006 f818 	bl	8007adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	482f      	ldr	r0, [pc, #188]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001ac4:	f006 f80a 	bl	8007adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8001ac8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4827      	ldr	r0, [pc, #156]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001ae2:	f005 fffb 	bl	8007adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8001ae6:	2370      	movs	r3, #112	; 0x70
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	4821      	ldr	r0, [pc, #132]	; (8001b84 <MX_GPIO_Init+0x1f0>)
 8001afe:	f005 ffed 	bl	8007adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2101      	movs	r1, #1
 8001b06:	2006      	movs	r0, #6
 8001b08:	f005 fa41 	bl	8006f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b0c:	2006      	movs	r0, #6
 8001b0e:	f005 fa58 	bl	8006fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2101      	movs	r1, #1
 8001b16:	2007      	movs	r0, #7
 8001b18:	f005 fa39 	bl	8006f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b1c:	2007      	movs	r0, #7
 8001b1e:	f005 fa50 	bl	8006fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	2008      	movs	r0, #8
 8001b28:	f005 fa31 	bl	8006f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b2c:	2008      	movs	r0, #8
 8001b2e:	f005 fa48 	bl	8006fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2101      	movs	r1, #1
 8001b36:	2009      	movs	r0, #9
 8001b38:	f005 fa29 	bl	8006f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b3c:	2009      	movs	r0, #9
 8001b3e:	f005 fa40 	bl	8006fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2101      	movs	r1, #1
 8001b46:	200a      	movs	r0, #10
 8001b48:	f005 fa21 	bl	8006f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f005 fa38 	bl	8006fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2101      	movs	r1, #1
 8001b56:	2017      	movs	r0, #23
 8001b58:	f005 fa19 	bl	8006f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b5c:	2017      	movs	r0, #23
 8001b5e:	f005 fa30 	bl	8006fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2102      	movs	r1, #2
 8001b66:	2028      	movs	r0, #40	; 0x28
 8001b68:	f005 fa11 	bl	8006f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b6c:	2028      	movs	r0, #40	; 0x28
 8001b6e:	f005 fa28 	bl	8006fc2 <HAL_NVIC_EnableIRQ>

}
 8001b72:	bf00      	nop
 8001b74:	3730      	adds	r7, #48	; 0x30
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	58020800 	.word	0x58020800
 8001b84:	58020c00 	.word	0x58020c00
 8001b88:	58021000 	.word	0x58021000
 8001b8c:	00000000 	.word	0x00000000

08001b90 <homingAprox>:
#include "homing.h"
uint8_t homeOk;			//Flag de aproximacion de homing
double rpm;


void homingAprox(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
	homeOk = 0;
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <homingAprox+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);//Apago interrupcion input capture motor 1
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4821      	ldr	r0, [pc, #132]	; (8001c24 <homingAprox+0x94>)
 8001ba0:	f009 fa42 	bl	800b028 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);//Apago interrupcion input capture motor 2
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4820      	ldr	r0, [pc, #128]	; (8001c28 <homingAprox+0x98>)
 8001ba8:	f009 fa3e 	bl	800b028 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);//Apago interrupcion input capture motor 3
 8001bac:	2100      	movs	r1, #0
 8001bae:	481f      	ldr	r0, [pc, #124]	; (8001c2c <homingAprox+0x9c>)
 8001bb0:	f009 fa3a 	bl	800b028 <HAL_TIM_IC_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8001bb4:	2006      	movs	r0, #6
 8001bb6:	f005 fa12 	bl	8006fde <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8001bba:	2007      	movs	r0, #7
 8001bbc:	f005 fa0f 	bl	8006fde <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8001bc0:	2008      	movs	r0, #8
 8001bc2:	f005 fa0c 	bl	8006fde <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8001bc6:	2009      	movs	r0, #9
 8001bc8:	f005 fa09 	bl	8006fde <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8001bcc:	200a      	movs	r0, #10
 8001bce:	f005 fa06 	bl	8006fde <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8001bd2:	2017      	movs	r0, #23
 8001bd4:	f005 fa03 	bl	8006fde <HAL_NVIC_DisableIRQ>
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);//Set direccion con la misma convencion que motor.c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bde:	4814      	ldr	r0, [pc, #80]	; (8001c30 <homingAprox+0xa0>)
 8001be0:	f006 f944 	bl	8007e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bea:	4811      	ldr	r0, [pc, #68]	; (8001c30 <homingAprox+0xa0>)
 8001bec:	f006 f93e 	bl	8007e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf6:	480e      	ldr	r0, [pc, #56]	; (8001c30 <homingAprox+0xa0>)
 8001bf8:	f006 f938 	bl	8007e6c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001bfc:	2014      	movs	r0, #20
 8001bfe:	f005 f897 	bl	8006d30 <HAL_Delay>
	rpm = 0.1;
 8001c02:	490c      	ldr	r1, [pc, #48]	; (8001c34 <homingAprox+0xa4>)
 8001c04:	a304      	add	r3, pc, #16	; (adr r3, 8001c18 <homingAprox+0x88>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	e9c1 2300 	strd	r2, r3, [r1]
	uint32_t hom = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]


	while (homeOk == 0) {
 8001c12:	e17d      	b.n	8001f10 <homingAprox+0x380>
 8001c14:	f3af 8000 	nop.w
 8001c18:	9999999a 	.word	0x9999999a
 8001c1c:	3fb99999 	.word	0x3fb99999
 8001c20:	24000380 	.word	0x24000380
 8001c24:	240005d4 	.word	0x240005d4
 8001c28:	24000620 	.word	0x24000620
 8001c2c:	2400066c 	.word	0x2400066c
 8001c30:	58020800 	.word	0x58020800
 8001c34:	24000388 	.word	0x24000388
		if(rpm<=4){
 8001c38:	4bc3      	ldr	r3, [pc, #780]	; (8001f48 <homingAprox+0x3b8>)
 8001c3a:	ed93 7b00 	vldr	d7, [r3]
 8001c3e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	d809      	bhi.n	8001c60 <homingAprox+0xd0>
			rpm = rpm + 0.001;
 8001c4c:	4bbe      	ldr	r3, [pc, #760]	; (8001f48 <homingAprox+0x3b8>)
 8001c4e:	ed93 7b00 	vldr	d7, [r3]
 8001c52:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8001f30 <homingAprox+0x3a0>
 8001c56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c5a:	4bbb      	ldr	r3, [pc, #748]	; (8001f48 <homingAprox+0x3b8>)
 8001c5c:	ed83 7b00 	vstr	d7, [r3]
		//TIM12->CNT=0;




		periodoM[0]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 8001c60:	4bba      	ldr	r3, [pc, #744]	; (8001f4c <homingAprox+0x3bc>)
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c70:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001c74:	4bb4      	ldr	r3, [pc, #720]	; (8001f48 <homingAprox+0x3b8>)
 8001c76:	ed93 7b00 	vldr	d7, [r3]
 8001c7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c7e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8001f38 <homingAprox+0x3a8>
 8001c82:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c86:	ed9f 5bae 	vldr	d5, [pc, #696]	; 8001f40 <homingAprox+0x3b0>
 8001c8a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c8e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c96:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c9e:	4bac      	ldr	r3, [pc, #688]	; (8001f50 <homingAprox+0x3c0>)
 8001ca0:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8001ca4:	4bab      	ldr	r3, [pc, #684]	; (8001f54 <homingAprox+0x3c4>)
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001cb0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cb4:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001cb8:	4ba3      	ldr	r3, [pc, #652]	; (8001f48 <homingAprox+0x3b8>)
 8001cba:	ed93 7b00 	vldr	d7, [r3]
 8001cbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cc2:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001f38 <homingAprox+0x3a8>
 8001cc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cca:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 8001f40 <homingAprox+0x3b0>
 8001cce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cd2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cda:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cde:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ce2:	4b9b      	ldr	r3, [pc, #620]	; (8001f50 <homingAprox+0x3c0>)
 8001ce4:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 8001ce8:	4b9b      	ldr	r3, [pc, #620]	; (8001f58 <homingAprox+0x3c8>)
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001cf4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cf8:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001cfc:	4b92      	ldr	r3, [pc, #584]	; (8001f48 <homingAprox+0x3b8>)
 8001cfe:	ed93 7b00 	vldr	d7, [r3]
 8001d02:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d06:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8001f38 <homingAprox+0x3a8>
 8001d0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d0e:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8001f40 <homingAprox+0x3b0>
 8001d12:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d16:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d1e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d26:	4b8a      	ldr	r3, [pc, #552]	; (8001f50 <homingAprox+0x3c0>)
 8001d28:	ed83 7b04 	vstr	d7, [r3, #16]


		if (TIM12->CNT > periodoM[0]) {
 8001d2c:	4b87      	ldr	r3, [pc, #540]	; (8001f4c <homingAprox+0x3bc>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d38:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <homingAprox+0x3c0>)
 8001d3a:	ed93 7b00 	vldr	d7, [r3]
 8001d3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	dd0c      	ble.n	8001d62 <homingAprox+0x1d2>
					TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001d48:	4b81      	ldr	r3, [pc, #516]	; (8001f50 <homingAprox+0x3c0>)
 8001d4a:	ed93 7b00 	vldr	d7, [r3]
 8001d4e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d56:	4b7d      	ldr	r3, [pc, #500]	; (8001f4c <homingAprox+0x3bc>)
 8001d58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d5c:	ee17 2a90 	vmov	r2, s15
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM13->CNT > periodoM[1]) {
 8001d62:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <homingAprox+0x3c4>)
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d6e:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <homingAprox+0x3c0>)
 8001d70:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	dd0c      	ble.n	8001d98 <homingAprox+0x208>
					TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001d7e:	4b74      	ldr	r3, [pc, #464]	; (8001f50 <homingAprox+0x3c0>)
 8001d80:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d8c:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <homingAprox+0x3c4>)
 8001d8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d92:	ee17 2a90 	vmov	r2, s15
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM14->CNT > periodoM[2]) {
 8001d98:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <homingAprox+0x3c8>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001da4:	4b6a      	ldr	r3, [pc, #424]	; (8001f50 <homingAprox+0x3c0>)
 8001da6:	ed93 7b04 	vldr	d7, [r3, #16]
 8001daa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	dd0c      	ble.n	8001dce <homingAprox+0x23e>
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001db4:	4b66      	ldr	r3, [pc, #408]	; (8001f50 <homingAprox+0x3c0>)
 8001db6:	ed93 7b04 	vldr	d7, [r3, #16]
 8001dba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001dbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dc2:	4b65      	ldr	r3, [pc, #404]	; (8001f58 <homingAprox+0x3c8>)
 8001dc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dc8:	ee17 2a90 	vmov	r2, s15
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
		}

		TIM12->ARR =periodoM[0];
 8001dce:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <homingAprox+0x3c0>)
 8001dd0:	ed93 7b00 	vldr	d7, [r3]
 8001dd4:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <homingAprox+0x3bc>)
 8001dd6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dda:	ee17 2a90 	vmov	r2, s15
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8001de0:	4b5a      	ldr	r3, [pc, #360]	; (8001f4c <homingAprox+0x3bc>)
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001dec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001df0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001df4:	4b55      	ldr	r3, [pc, #340]	; (8001f4c <homingAprox+0x3bc>)
 8001df6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dfa:	ee17 2a90 	vmov	r2, s15
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->ARR =periodoM[1];
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <homingAprox+0x3c0>)
 8001e02:	ed93 7b02 	vldr	d7, [r3, #8]
 8001e06:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <homingAprox+0x3c4>)
 8001e08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e0c:	ee17 2a90 	vmov	r2, s15
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8001e12:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <homingAprox+0x3c4>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001e1e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001e22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e26:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <homingAprox+0x3c4>)
 8001e28:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e2c:	ee17 2a90 	vmov	r2, s15
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->ARR =periodoM[2];
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <homingAprox+0x3c0>)
 8001e34:	ed93 7b04 	vldr	d7, [r3, #16]
 8001e38:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <homingAprox+0x3c8>)
 8001e3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e3e:	ee17 2a90 	vmov	r2, s15
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8001e44:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <homingAprox+0x3c8>)
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001e50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001e54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e58:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <homingAprox+0x3c8>)
 8001e5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e5e:	ee17 2a90 	vmov	r2, s15
 8001e62:	635a      	str	r2, [r3, #52]	; 0x34


		if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8001e64:	2101      	movs	r1, #1
 8001e66:	483d      	ldr	r0, [pc, #244]	; (8001f5c <homingAprox+0x3cc>)
 8001e68:	f005 ffe8 	bl	8007e3c <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <homingAprox+0x2fe>
 8001e72:	2104      	movs	r1, #4
 8001e74:	4839      	ldr	r0, [pc, #228]	; (8001f5c <homingAprox+0x3cc>)
 8001e76:	f005 ffe1 	bl	8007e3c <HAL_GPIO_ReadPin>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <homingAprox+0x2fe>
 8001e80:	2110      	movs	r1, #16
 8001e82:	4836      	ldr	r0, [pc, #216]	; (8001f5c <homingAprox+0x3cc>)
 8001e84:	f005 ffda 	bl	8007e3c <HAL_GPIO_ReadPin>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d126      	bne.n	8001edc <homingAprox+0x34c>
			HAL_Delay(30);
 8001e8e:	201e      	movs	r0, #30
 8001e90:	f004 ff4e 	bl	8006d30 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8001e94:	2101      	movs	r1, #1
 8001e96:	4831      	ldr	r0, [pc, #196]	; (8001f5c <homingAprox+0x3cc>)
 8001e98:	f005 ffd0 	bl	8007e3c <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00d      	beq.n	8001ebe <homingAprox+0x32e>
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	482d      	ldr	r0, [pc, #180]	; (8001f5c <homingAprox+0x3cc>)
 8001ea6:	f005 ffc9 	bl	8007e3c <HAL_GPIO_ReadPin>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <homingAprox+0x32e>
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	482a      	ldr	r0, [pc, #168]	; (8001f5c <homingAprox+0x3cc>)
 8001eb4:	f005 ffc2 	bl	8007e3c <HAL_GPIO_ReadPin>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10e      	bne.n	8001edc <homingAprox+0x34c>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4827      	ldr	r0, [pc, #156]	; (8001f60 <homingAprox+0x3d0>)
 8001ec2:	f008 fe69 	bl	800ab98 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4826      	ldr	r0, [pc, #152]	; (8001f64 <homingAprox+0x3d4>)
 8001eca:	f008 fe65 	bl	800ab98 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4825      	ldr	r0, [pc, #148]	; (8001f68 <homingAprox+0x3d8>)
 8001ed2:	f008 fe61 	bl	800ab98 <HAL_TIM_PWM_Stop>
				homeOk = 1;
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <homingAprox+0x3dc>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
			}
		}
		if(hom==0){
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d113      	bne.n	8001f0a <homingAprox+0x37a>
			hom=1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart3,(uint8_t *)"hola k ace\n\r", 12, 100);
 8001ee6:	2364      	movs	r3, #100	; 0x64
 8001ee8:	220c      	movs	r2, #12
 8001eea:	4921      	ldr	r1, [pc, #132]	; (8001f70 <homingAprox+0x3e0>)
 8001eec:	4821      	ldr	r0, [pc, #132]	; (8001f74 <homingAprox+0x3e4>)
 8001eee:	f00a fb99 	bl	800c624 <HAL_UART_Transmit>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	481a      	ldr	r0, [pc, #104]	; (8001f60 <homingAprox+0x3d0>)
 8001ef6:	f008 fd41 	bl	800a97c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001efa:	2100      	movs	r1, #0
 8001efc:	4819      	ldr	r0, [pc, #100]	; (8001f64 <homingAprox+0x3d4>)
 8001efe:	f008 fd3d 	bl	800a97c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001f02:	2100      	movs	r1, #0
 8001f04:	4818      	ldr	r0, [pc, #96]	; (8001f68 <homingAprox+0x3d8>)
 8001f06:	f008 fd39 	bl	800a97c <HAL_TIM_PWM_Start>
		}
		HAL_Delay(1);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f004 ff10 	bl	8006d30 <HAL_Delay>
	while (homeOk == 0) {
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <homingAprox+0x3dc>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f43f ae8f 	beq.w	8001c38 <homingAprox+0xa8>
	}
	HAL_UART_Transmit(&huart3,(uint8_t *)"Fin_Aprox\n\r", 11, 100);
 8001f1a:	2364      	movs	r3, #100	; 0x64
 8001f1c:	220b      	movs	r2, #11
 8001f1e:	4916      	ldr	r1, [pc, #88]	; (8001f78 <homingAprox+0x3e8>)
 8001f20:	4814      	ldr	r0, [pc, #80]	; (8001f74 <homingAprox+0x3e4>)
 8001f22:	f00a fb7f 	bl	800c624 <HAL_UART_Transmit>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f34:	3f50624d 	.word	0x3f50624d
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	40c2c000 	.word	0x40c2c000
 8001f40:	00000000 	.word	0x00000000
 8001f44:	41ec9c38 	.word	0x41ec9c38
 8001f48:	24000388 	.word	0x24000388
 8001f4c:	40001800 	.word	0x40001800
 8001f50:	24000500 	.word	0x24000500
 8001f54:	40001c00 	.word	0x40001c00
 8001f58:	40002000 	.word	0x40002000
 8001f5c:	58021000 	.word	0x58021000
 8001f60:	24000704 	.word	0x24000704
 8001f64:	24000750 	.word	0x24000750
 8001f68:	2400079c 	.word	0x2400079c
 8001f6c:	24000380 	.word	0x24000380
 8001f70:	08012250 	.word	0x08012250
 8001f74:	24000cf0 	.word	0x24000cf0
 8001f78:	08012260 	.word	0x08012260
 8001f7c:	00000000 	.word	0x00000000

08001f80 <homingArm1>:

void homingArm1(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
	double flagEndStop=0;
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8001f92:	2100      	movs	r1, #0
 8001f94:	485e      	ldr	r0, [pc, #376]	; (8002110 <homingArm1+0x190>)
 8001f96:	f008 fdff 	bl	800ab98 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8001f9a:	495e      	ldr	r1, [pc, #376]	; (8002114 <homingArm1+0x194>)
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <homingArm1+0x198>)
 8001fa2:	e9c1 2300 	strd	r2, r3, [r1]
	TIM12->ARR = ((FCL * 60) / (rpm * ((TIM12->PSC) + 1) * 9600)) - 1;
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <homingArm1+0x19c>)
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	3301      	adds	r3, #1
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001fb4:	4b57      	ldr	r3, [pc, #348]	; (8002114 <homingArm1+0x194>)
 8001fb6:	ed93 7b00 	vldr	d7, [r3]
 8001fba:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001fbe:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8002100 <homingArm1+0x180>
 8001fc2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fc6:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8002108 <homingArm1+0x188>
 8001fca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001fce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001fd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fd6:	4b51      	ldr	r3, [pc, #324]	; (800211c <homingArm1+0x19c>)
 8001fd8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fdc:	ee17 2a90 	vmov	r2, s15
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM12->CCR1 = (TIM12->ARR) / 2;
 8001fe2:	4b4e      	ldr	r3, [pc, #312]	; (800211c <homingArm1+0x19c>)
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	4a4d      	ldr	r2, [pc, #308]	; (800211c <homingArm1+0x19c>)
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 8001fec:	2101      	movs	r1, #1
 8001fee:	484c      	ldr	r0, [pc, #304]	; (8002120 <homingArm1+0x1a0>)
 8001ff0:	f005 ff24 	bl	8007e3c <HAL_GPIO_ReadPin>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d114      	bne.n	8002024 <homingArm1+0xa4>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 8001ffa:	e00c      	b.n	8002016 <homingArm1+0x96>
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002002:	4848      	ldr	r0, [pc, #288]	; (8002124 <homingArm1+0x1a4>)
 8002004:	f005 ff32 	bl	8007e6c <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002008:	2100      	movs	r1, #0
 800200a:	4841      	ldr	r0, [pc, #260]	; (8002110 <homingArm1+0x190>)
 800200c:	f008 fcb6 	bl	800a97c <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 8002010:	201e      	movs	r0, #30
 8002012:	f004 fe8d 	bl	8006d30 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 8002016:	2101      	movs	r1, #1
 8002018:	4841      	ldr	r0, [pc, #260]	; (8002120 <homingArm1+0x1a0>)
 800201a:	f005 ff0f 	bl	8007e3c <HAL_GPIO_ReadPin>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0eb      	beq.n	8001ffc <homingArm1+0x7c>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 8002024:	2200      	movs	r2, #0
 8002026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202a:	483e      	ldr	r0, [pc, #248]	; (8002124 <homingArm1+0x1a4>)
 800202c:	f005 ff1e 	bl	8007e6c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002030:	2100      	movs	r1, #0
 8002032:	4837      	ldr	r0, [pc, #220]	; (8002110 <homingArm1+0x190>)
 8002034:	f008 fca2 	bl	800a97c <HAL_TIM_PWM_Start>
	homeOk = 0;
 8002038:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <homingArm1+0x1a8>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800203e:	e056      	b.n	80020ee <homingArm1+0x16e>
		if (flagEndStop==0 && !(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 8002040:	ed97 7b00 	vldr	d7, [r7]
 8002044:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204c:	d121      	bne.n	8002092 <homingArm1+0x112>
 800204e:	2101      	movs	r1, #1
 8002050:	4833      	ldr	r0, [pc, #204]	; (8002120 <homingArm1+0x1a0>)
 8002052:	f005 fef3 	bl	8007e3c <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d11a      	bne.n	8002092 <homingArm1+0x112>
			HAL_Delay(30);		//Para filtrar transitorio
 800205c:	201e      	movs	r0, #30
 800205e:	f004 fe67 	bl	8006d30 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin))) {
 8002062:	2101      	movs	r1, #1
 8002064:	482e      	ldr	r0, [pc, #184]	; (8002120 <homingArm1+0x1a0>)
 8002066:	f005 fee9 	bl	8007e3c <HAL_GPIO_ReadPin>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d110      	bne.n	8002092 <homingArm1+0x112>
				HAL_UART_Transmit(&huart3,(uint8_t *)"EndStop1_Pulsado\n\r", 18, 100);
 8002070:	2364      	movs	r3, #100	; 0x64
 8002072:	2212      	movs	r2, #18
 8002074:	492d      	ldr	r1, [pc, #180]	; (800212c <homingArm1+0x1ac>)
 8002076:	482e      	ldr	r0, [pc, #184]	; (8002130 <homingArm1+0x1b0>)
 8002078:	f00a fad4 	bl	800c624 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002082:	4828      	ldr	r0, [pc, #160]	; (8002124 <homingArm1+0x1a4>)
 8002084:	f005 fef2 	bl	8007e6c <HAL_GPIO_WritePin>
				flagEndStop = 1;
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	4b29      	ldr	r3, [pc, #164]	; (8002134 <homingArm1+0x1b4>)
 800208e:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop==1 && HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 8002092:	ed97 7b00 	vldr	d7, [r7]
 8002096:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800209a:	eeb4 7b46 	vcmp.f64	d7, d6
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	d124      	bne.n	80020ee <homingArm1+0x16e>
 80020a4:	2101      	movs	r1, #1
 80020a6:	481e      	ldr	r0, [pc, #120]	; (8002120 <homingArm1+0x1a0>)
 80020a8:	f005 fec8 	bl	8007e3c <HAL_GPIO_ReadPin>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01d      	beq.n	80020ee <homingArm1+0x16e>
			HAL_Delay(30);		//Para filtrar transitorio
 80020b2:	201e      	movs	r0, #30
 80020b4:	f004 fe3c 	bl	8006d30 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 80020b8:	2101      	movs	r1, #1
 80020ba:	4819      	ldr	r0, [pc, #100]	; (8002120 <homingArm1+0x1a0>)
 80020bc:	f005 febe 	bl	8007e3c <HAL_GPIO_ReadPin>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d013      	beq.n	80020ee <homingArm1+0x16e>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 80020c6:	2100      	movs	r1, #0
 80020c8:	4811      	ldr	r0, [pc, #68]	; (8002110 <homingArm1+0x190>)
 80020ca:	f008 fd65 	bl	800ab98 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"FinArm1\n\r", 9, 100);
 80020ce:	2364      	movs	r3, #100	; 0x64
 80020d0:	2209      	movs	r2, #9
 80020d2:	4919      	ldr	r1, [pc, #100]	; (8002138 <homingArm1+0x1b8>)
 80020d4:	4816      	ldr	r0, [pc, #88]	; (8002130 <homingArm1+0x1b0>)
 80020d6:	f00a faa5 	bl	800c624 <HAL_UART_Transmit>
				titha1 = 0;
 80020da:	4918      	ldr	r1, [pc, #96]	; (800213c <homingArm1+0x1bc>)
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <homingArm1+0x1a8>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <homingArm1+0x1a8>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0a4      	beq.n	8002040 <homingArm1+0xc0>
			}
		}
	}
}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	00000000 	.word	0x00000000
 8002104:	40c2c000 	.word	0x40c2c000
 8002108:	00000000 	.word	0x00000000
 800210c:	c1bb1e40 	.word	0xc1bb1e40
 8002110:	24000704 	.word	0x24000704
 8002114:	24000388 	.word	0x24000388
 8002118:	3fe00000 	.word	0x3fe00000
 800211c:	40001800 	.word	0x40001800
 8002120:	58021000 	.word	0x58021000
 8002124:	58020800 	.word	0x58020800
 8002128:	24000380 	.word	0x24000380
 800212c:	0801226c 	.word	0x0801226c
 8002130:	24000cf0 	.word	0x24000cf0
 8002134:	3ff00000 	.word	0x3ff00000
 8002138:	08012280 	.word	0x08012280
 800213c:	240003c0 	.word	0x240003c0

08002140 <homingArm2>:

void homingArm2(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8002152:	2100      	movs	r1, #0
 8002154:	486e      	ldr	r0, [pc, #440]	; (8002310 <homingArm2+0x1d0>)
 8002156:	f008 fd1f 	bl	800ab98 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 800215a:	496e      	ldr	r1, [pc, #440]	; (8002314 <homingArm2+0x1d4>)
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <homingArm2+0x1d8>)
 8002162:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = ((FCL * 60) / (rpm * ((TIM13->PSC) + 1) * 9600)) - 1;
 8002166:	4b6d      	ldr	r3, [pc, #436]	; (800231c <homingArm2+0x1dc>)
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	3301      	adds	r3, #1
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002174:	4b67      	ldr	r3, [pc, #412]	; (8002314 <homingArm2+0x1d4>)
 8002176:	ed93 7b00 	vldr	d7, [r3]
 800217a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800217e:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002300 <homingArm2+0x1c0>
 8002182:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002186:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8002308 <homingArm2+0x1c8>
 800218a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800218e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002192:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002196:	4b61      	ldr	r3, [pc, #388]	; (800231c <homingArm2+0x1dc>)
 8002198:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800219c:	ee17 2a90 	vmov	r2, s15
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 80021a2:	4b5e      	ldr	r3, [pc, #376]	; (800231c <homingArm2+0x1dc>)
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	4a5d      	ldr	r2, [pc, #372]	; (800231c <homingArm2+0x1dc>)
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 80021ac:	2104      	movs	r1, #4
 80021ae:	485c      	ldr	r0, [pc, #368]	; (8002320 <homingArm2+0x1e0>)
 80021b0:	f005 fe44 	bl	8007e3c <HAL_GPIO_ReadPin>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d114      	bne.n	80021e4 <homingArm2+0xa4>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 80021ba:	e00c      	b.n	80021d6 <homingArm2+0x96>
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 80021bc:	2201      	movs	r2, #1
 80021be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021c2:	4858      	ldr	r0, [pc, #352]	; (8002324 <homingArm2+0x1e4>)
 80021c4:	f005 fe52 	bl	8007e6c <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80021c8:	2100      	movs	r1, #0
 80021ca:	4851      	ldr	r0, [pc, #324]	; (8002310 <homingArm2+0x1d0>)
 80021cc:	f008 fbd6 	bl	800a97c <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 80021d0:	201e      	movs	r0, #30
 80021d2:	f004 fdad 	bl	8006d30 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 80021d6:	2104      	movs	r1, #4
 80021d8:	4851      	ldr	r0, [pc, #324]	; (8002320 <homingArm2+0x1e0>)
 80021da:	f005 fe2f 	bl	8007e3c <HAL_GPIO_ReadPin>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0eb      	beq.n	80021bc <homingArm2+0x7c>
		}

	}
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 80021e4:	2100      	movs	r1, #0
 80021e6:	484a      	ldr	r0, [pc, #296]	; (8002310 <homingArm2+0x1d0>)
 80021e8:	f008 fcd6 	bl	800ab98 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 80021ec:	4949      	ldr	r1, [pc, #292]	; (8002314 <homingArm2+0x1d4>)
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	4b49      	ldr	r3, [pc, #292]	; (8002318 <homingArm2+0x1d8>)
 80021f4:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = ((FCL * 60) / (rpm * ((TIM13->PSC) + 1) * 9600)) - 1;
 80021f8:	4b48      	ldr	r3, [pc, #288]	; (800231c <homingArm2+0x1dc>)
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	3301      	adds	r3, #1
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002206:	4b43      	ldr	r3, [pc, #268]	; (8002314 <homingArm2+0x1d4>)
 8002208:	ed93 7b00 	vldr	d7, [r3]
 800220c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002210:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8002300 <homingArm2+0x1c0>
 8002214:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002218:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8002308 <homingArm2+0x1c8>
 800221c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002220:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002224:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002228:	4b3c      	ldr	r3, [pc, #240]	; (800231c <homingArm2+0x1dc>)
 800222a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800222e:	ee17 2a90 	vmov	r2, s15
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 8002234:	4b39      	ldr	r3, [pc, #228]	; (800231c <homingArm2+0x1dc>)
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	4a38      	ldr	r2, [pc, #224]	; (800231c <homingArm2+0x1dc>)
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002244:	4837      	ldr	r0, [pc, #220]	; (8002324 <homingArm2+0x1e4>)
 8002246:	f005 fe11 	bl	8007e6c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800224a:	2100      	movs	r1, #0
 800224c:	4830      	ldr	r0, [pc, #192]	; (8002310 <homingArm2+0x1d0>)
 800224e:	f008 fb95 	bl	800a97c <HAL_TIM_PWM_Start>
	homeOk = 0;
 8002252:	4b35      	ldr	r3, [pc, #212]	; (8002328 <homingArm2+0x1e8>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8002258:	e049      	b.n	80022ee <homingArm2+0x1ae>
		if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 800225a:	2104      	movs	r1, #4
 800225c:	4830      	ldr	r0, [pc, #192]	; (8002320 <homingArm2+0x1e0>)
 800225e:	f005 fded 	bl	8007e3c <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d114      	bne.n	8002292 <homingArm2+0x152>
			HAL_Delay(30);		//Para filtrar transitorio
 8002268:	201e      	movs	r0, #30
 800226a:	f004 fd61 	bl	8006d30 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin))) {
 800226e:	2104      	movs	r1, #4
 8002270:	482b      	ldr	r0, [pc, #172]	; (8002320 <homingArm2+0x1e0>)
 8002272:	f005 fde3 	bl	8007e3c <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <homingArm2+0x152>
				HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 800227c:	2201      	movs	r2, #1
 800227e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002282:	4828      	ldr	r0, [pc, #160]	; (8002324 <homingArm2+0x1e4>)
 8002284:	f005 fdf2 	bl	8007e6c <HAL_GPIO_WritePin>
				flagEndStop = 1;
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <homingArm2+0x1ec>)
 800228e:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 8002292:	ed97 7b00 	vldr	d7, [r7]
 8002296:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800229a:	eeb4 7b46 	vcmp.f64	d7, d6
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	d124      	bne.n	80022ee <homingArm2+0x1ae>
 80022a4:	2104      	movs	r1, #4
 80022a6:	481e      	ldr	r0, [pc, #120]	; (8002320 <homingArm2+0x1e0>)
 80022a8:	f005 fdc8 	bl	8007e3c <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01d      	beq.n	80022ee <homingArm2+0x1ae>
			HAL_Delay(30);		//Para filtrar transitorio
 80022b2:	201e      	movs	r0, #30
 80022b4:	f004 fd3c 	bl	8006d30 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 80022b8:	2104      	movs	r1, #4
 80022ba:	4819      	ldr	r0, [pc, #100]	; (8002320 <homingArm2+0x1e0>)
 80022bc:	f005 fdbe 	bl	8007e3c <HAL_GPIO_ReadPin>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d013      	beq.n	80022ee <homingArm2+0x1ae>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 80022c6:	2100      	movs	r1, #0
 80022c8:	4811      	ldr	r0, [pc, #68]	; (8002310 <homingArm2+0x1d0>)
 80022ca:	f008 fc65 	bl	800ab98 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"FinArm2\n\r", 9, 100);
 80022ce:	2364      	movs	r3, #100	; 0x64
 80022d0:	2209      	movs	r2, #9
 80022d2:	4917      	ldr	r1, [pc, #92]	; (8002330 <homingArm2+0x1f0>)
 80022d4:	4817      	ldr	r0, [pc, #92]	; (8002334 <homingArm2+0x1f4>)
 80022d6:	f00a f9a5 	bl	800c624 <HAL_UART_Transmit>
				titha2 = 0;
 80022da:	4917      	ldr	r1, [pc, #92]	; (8002338 <homingArm2+0x1f8>)
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <homingArm2+0x1e8>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <homingArm2+0x1e8>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0b1      	beq.n	800225a <homingArm2+0x11a>
			}
		}
	}
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	00000000 	.word	0x00000000
 8002304:	40c2c000 	.word	0x40c2c000
 8002308:	00000000 	.word	0x00000000
 800230c:	c1bb1e40 	.word	0xc1bb1e40
 8002310:	24000750 	.word	0x24000750
 8002314:	24000388 	.word	0x24000388
 8002318:	3fe00000 	.word	0x3fe00000
 800231c:	40001c00 	.word	0x40001c00
 8002320:	58021000 	.word	0x58021000
 8002324:	58020800 	.word	0x58020800
 8002328:	24000380 	.word	0x24000380
 800232c:	3ff00000 	.word	0x3ff00000
 8002330:	0801228c 	.word	0x0801228c
 8002334:	24000cf0 	.word	0x24000cf0
 8002338:	240003c8 	.word	0x240003c8
 800233c:	00000000 	.word	0x00000000

08002340 <homingArm3>:

void homingArm3(void) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8002352:	2100      	movs	r1, #0
 8002354:	485e      	ldr	r0, [pc, #376]	; (80024d0 <homingArm3+0x190>)
 8002356:	f008 fc1f 	bl	800ab98 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 800235a:	495e      	ldr	r1, [pc, #376]	; (80024d4 <homingArm3+0x194>)
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b5d      	ldr	r3, [pc, #372]	; (80024d8 <homingArm3+0x198>)
 8002362:	e9c1 2300 	strd	r2, r3, [r1]
	TIM14->ARR = ((FCL * 60) / (rpm * ((TIM14->PSC) + 1) * 9600)) - 1;
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <homingArm3+0x19c>)
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	3301      	adds	r3, #1
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002374:	4b57      	ldr	r3, [pc, #348]	; (80024d4 <homingArm3+0x194>)
 8002376:	ed93 7b00 	vldr	d7, [r3]
 800237a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800237e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80024c0 <homingArm3+0x180>
 8002382:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002386:	ed9f 5b50 	vldr	d5, [pc, #320]	; 80024c8 <homingArm3+0x188>
 800238a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800238e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002392:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002396:	4b51      	ldr	r3, [pc, #324]	; (80024dc <homingArm3+0x19c>)
 8002398:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800239c:	ee17 2a90 	vmov	r2, s15
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->CCR1 = (TIM14->ARR) / 2;
 80023a2:	4b4e      	ldr	r3, [pc, #312]	; (80024dc <homingArm3+0x19c>)
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	4a4d      	ldr	r2, [pc, #308]	; (80024dc <homingArm3+0x19c>)
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 80023ac:	2110      	movs	r1, #16
 80023ae:	484c      	ldr	r0, [pc, #304]	; (80024e0 <homingArm3+0x1a0>)
 80023b0:	f005 fd44 	bl	8007e3c <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d114      	bne.n	80023e4 <homingArm3+0xa4>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 80023ba:	e00c      	b.n	80023d6 <homingArm3+0x96>
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 80023bc:	2201      	movs	r2, #1
 80023be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023c2:	4848      	ldr	r0, [pc, #288]	; (80024e4 <homingArm3+0x1a4>)
 80023c4:	f005 fd52 	bl	8007e6c <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80023c8:	2100      	movs	r1, #0
 80023ca:	4841      	ldr	r0, [pc, #260]	; (80024d0 <homingArm3+0x190>)
 80023cc:	f008 fad6 	bl	800a97c <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 80023d0:	201e      	movs	r0, #30
 80023d2:	f004 fcad 	bl	8006d30 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 80023d6:	2110      	movs	r1, #16
 80023d8:	4841      	ldr	r0, [pc, #260]	; (80024e0 <homingArm3+0x1a0>)
 80023da:	f005 fd2f 	bl	8007e3c <HAL_GPIO_ReadPin>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0eb      	beq.n	80023bc <homingArm3+0x7c>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 80023e4:	2200      	movs	r2, #0
 80023e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ea:	483e      	ldr	r0, [pc, #248]	; (80024e4 <homingArm3+0x1a4>)
 80023ec:	f005 fd3e 	bl	8007e6c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80023f0:	2100      	movs	r1, #0
 80023f2:	4837      	ldr	r0, [pc, #220]	; (80024d0 <homingArm3+0x190>)
 80023f4:	f008 fac2 	bl	800a97c <HAL_TIM_PWM_Start>
	homeOk = 0;
 80023f8:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <homingArm3+0x1a8>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80023fe:	e049      	b.n	8002494 <homingArm3+0x154>
		if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8002400:	2110      	movs	r1, #16
 8002402:	4837      	ldr	r0, [pc, #220]	; (80024e0 <homingArm3+0x1a0>)
 8002404:	f005 fd1a 	bl	8007e3c <HAL_GPIO_ReadPin>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d114      	bne.n	8002438 <homingArm3+0xf8>
			HAL_Delay(30);		//Para filtrar transitorio
 800240e:	201e      	movs	r0, #30
 8002410:	f004 fc8e 	bl	8006d30 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8002414:	2110      	movs	r1, #16
 8002416:	4832      	ldr	r0, [pc, #200]	; (80024e0 <homingArm3+0x1a0>)
 8002418:	f005 fd10 	bl	8007e3c <HAL_GPIO_ReadPin>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <homingArm3+0xf8>
				HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002428:	482e      	ldr	r0, [pc, #184]	; (80024e4 <homingArm3+0x1a4>)
 800242a:	f005 fd1f 	bl	8007e6c <HAL_GPIO_WritePin>
				flagEndStop = 1;
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <homingArm3+0x1ac>)
 8002434:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 8002438:	ed97 7b00 	vldr	d7, [r7]
 800243c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002440:	eeb4 7b46 	vcmp.f64	d7, d6
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	d124      	bne.n	8002494 <homingArm3+0x154>
 800244a:	2110      	movs	r1, #16
 800244c:	4824      	ldr	r0, [pc, #144]	; (80024e0 <homingArm3+0x1a0>)
 800244e:	f005 fcf5 	bl	8007e3c <HAL_GPIO_ReadPin>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01d      	beq.n	8002494 <homingArm3+0x154>
			HAL_Delay(30);		//Para filtrar transitorio
 8002458:	201e      	movs	r0, #30
 800245a:	f004 fc69 	bl	8006d30 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 800245e:	2110      	movs	r1, #16
 8002460:	481f      	ldr	r0, [pc, #124]	; (80024e0 <homingArm3+0x1a0>)
 8002462:	f005 fceb 	bl	8007e3c <HAL_GPIO_ReadPin>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <homingArm3+0x154>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 800246c:	2100      	movs	r1, #0
 800246e:	4818      	ldr	r0, [pc, #96]	; (80024d0 <homingArm3+0x190>)
 8002470:	f008 fb92 	bl	800ab98 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"FinArm3\n\r", 9, 100);
 8002474:	2364      	movs	r3, #100	; 0x64
 8002476:	2209      	movs	r2, #9
 8002478:	491d      	ldr	r1, [pc, #116]	; (80024f0 <homingArm3+0x1b0>)
 800247a:	481e      	ldr	r0, [pc, #120]	; (80024f4 <homingArm3+0x1b4>)
 800247c:	f00a f8d2 	bl	800c624 <HAL_UART_Transmit>
				titha3 = 0;
 8002480:	491d      	ldr	r1, [pc, #116]	; (80024f8 <homingArm3+0x1b8>)
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <homingArm3+0x1a8>)
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <homingArm3+0x1a8>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0b1      	beq.n	8002400 <homingArm3+0xc0>
			}
		}
	}
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 800249c:	2100      	movs	r1, #0
 800249e:	4817      	ldr	r0, [pc, #92]	; (80024fc <homingArm3+0x1bc>)
 80024a0:	f008 fc72 	bl	800ad88 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 80024a4:	2100      	movs	r1, #0
 80024a6:	4816      	ldr	r0, [pc, #88]	; (8002500 <homingArm3+0x1c0>)
 80024a8:	f008 fc6e 	bl	800ad88 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 80024ac:	2100      	movs	r1, #0
 80024ae:	4815      	ldr	r0, [pc, #84]	; (8002504 <homingArm3+0x1c4>)
 80024b0:	f008 fc6a 	bl	800ad88 <HAL_TIM_IC_Start_IT>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior*/
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	f3af 8000 	nop.w
 80024c0:	00000000 	.word	0x00000000
 80024c4:	40c2c000 	.word	0x40c2c000
 80024c8:	00000000 	.word	0x00000000
 80024cc:	c1bb1e40 	.word	0xc1bb1e40
 80024d0:	2400079c 	.word	0x2400079c
 80024d4:	24000388 	.word	0x24000388
 80024d8:	3fe00000 	.word	0x3fe00000
 80024dc:	40002000 	.word	0x40002000
 80024e0:	58021000 	.word	0x58021000
 80024e4:	58020800 	.word	0x58020800
 80024e8:	24000380 	.word	0x24000380
 80024ec:	3ff00000 	.word	0x3ff00000
 80024f0:	08012298 	.word	0x08012298
 80024f4:	24000cf0 	.word	0x24000cf0
 80024f8:	240003d0 	.word	0x240003d0
 80024fc:	240005d4 	.word	0x240005d4
 8002500:	24000620 	.word	0x24000620
 8002504:	2400066c 	.word	0x2400066c

08002508 <interpretaComando>:


volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 800250e:	4bb2      	ldr	r3, [pc, #712]	; (80027d8 <interpretaComando+0x2d0>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	3b48      	subs	r3, #72	; 0x48
 8002514:	2b2e      	cmp	r3, #46	; 0x2e
 8002516:	f200 829d 	bhi.w	8002a54 <interpretaComando+0x54c>
 800251a:	a201      	add	r2, pc, #4	; (adr r2, 8002520 <interpretaComando+0x18>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	080029e5 	.word	0x080029e5
 8002524:	08002a55 	.word	0x08002a55
 8002528:	08002a55 	.word	0x08002a55
 800252c:	08002a55 	.word	0x08002a55
 8002530:	08002a55 	.word	0x08002a55
 8002534:	080026d1 	.word	0x080026d1
 8002538:	08002a55 	.word	0x08002a55
 800253c:	08002a55 	.word	0x08002a55
 8002540:	0800283b 	.word	0x0800283b
 8002544:	08002a55 	.word	0x08002a55
 8002548:	08002a55 	.word	0x08002a55
 800254c:	08002a55 	.word	0x08002a55
 8002550:	08002a55 	.word	0x08002a55
 8002554:	08002a55 	.word	0x08002a55
 8002558:	08002a55 	.word	0x08002a55
 800255c:	08002a55 	.word	0x08002a55
 8002560:	08002a55 	.word	0x08002a55
 8002564:	08002a55 	.word	0x08002a55
 8002568:	08002a55 	.word	0x08002a55
 800256c:	08002a55 	.word	0x08002a55
 8002570:	08002a55 	.word	0x08002a55
 8002574:	08002a55 	.word	0x08002a55
 8002578:	08002a55 	.word	0x08002a55
 800257c:	08002a55 	.word	0x08002a55
 8002580:	08002a55 	.word	0x08002a55
 8002584:	08002661 	.word	0x08002661
 8002588:	08002a55 	.word	0x08002a55
 800258c:	08002a55 	.word	0x08002a55
 8002590:	08002a55 	.word	0x08002a55
 8002594:	08002a55 	.word	0x08002a55
 8002598:	08002a55 	.word	0x08002a55
 800259c:	08002a55 	.word	0x08002a55
 80025a0:	080029e5 	.word	0x080029e5
 80025a4:	08002a55 	.word	0x08002a55
 80025a8:	08002699 	.word	0x08002699
 80025ac:	08002a55 	.word	0x08002a55
 80025b0:	08002a55 	.word	0x08002a55
 80025b4:	080026d1 	.word	0x080026d1
 80025b8:	08002a55 	.word	0x08002a55
 80025bc:	08002a55 	.word	0x08002a55
 80025c0:	0800283b 	.word	0x0800283b
 80025c4:	08002a55 	.word	0x08002a55
 80025c8:	08002a55 	.word	0x08002a55
 80025cc:	08002a55 	.word	0x08002a55
 80025d0:	08002a55 	.word	0x08002a55
 80025d4:	08002a55 	.word	0x08002a55
 80025d8:	080025dd 	.word	0x080025dd

	case 'v':                     //velocidad vi , vf , vmax
		switch(rx_buffer[1]){
 80025dc:	4b7e      	ldr	r3, [pc, #504]	; (80027d8 <interpretaComando+0x2d0>)
 80025de:	785b      	ldrb	r3, [r3, #1]
 80025e0:	2b6d      	cmp	r3, #109	; 0x6d
 80025e2:	d025      	beq.n	8002630 <interpretaComando+0x128>
 80025e4:	2b6d      	cmp	r3, #109	; 0x6d
 80025e6:	dc33      	bgt.n	8002650 <interpretaComando+0x148>
 80025e8:	2b66      	cmp	r3, #102	; 0x66
 80025ea:	d011      	beq.n	8002610 <interpretaComando+0x108>
 80025ec:	2b69      	cmp	r3, #105	; 0x69
 80025ee:	d12f      	bne.n	8002650 <interpretaComando+0x148>
		case 'i':
			//HAL_UART_Transmit(&huart3,(uint8_t *)"vi\n", 4, 100);
			aux =  strtod(&rx_buffer[2], NULL);
 80025f0:	2100      	movs	r1, #0
 80025f2:	487a      	ldr	r0, [pc, #488]	; (80027dc <interpretaComando+0x2d4>)
 80025f4:	f00d f936 	bl	800f864 <strtod>
 80025f8:	eeb0 7b40 	vmov.f64	d7, d0
 80025fc:	4b78      	ldr	r3, [pc, #480]	; (80027e0 <interpretaComando+0x2d8>)
 80025fe:	ed83 7b00 	vstr	d7, [r3]
			vi=aux;
 8002602:	4b77      	ldr	r3, [pc, #476]	; (80027e0 <interpretaComando+0x2d8>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	4976      	ldr	r1, [pc, #472]	; (80027e4 <interpretaComando+0x2dc>)
 800260a:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800260e:	e026      	b.n	800265e <interpretaComando+0x156>
		case 'f':
			//HAL_UART_Transmit(&huart3,(uint8_t *)"vf\n", 4, 100);
			aux =  strtod(&rx_buffer[2], NULL);
 8002610:	2100      	movs	r1, #0
 8002612:	4872      	ldr	r0, [pc, #456]	; (80027dc <interpretaComando+0x2d4>)
 8002614:	f00d f926 	bl	800f864 <strtod>
 8002618:	eeb0 7b40 	vmov.f64	d7, d0
 800261c:	4b70      	ldr	r3, [pc, #448]	; (80027e0 <interpretaComando+0x2d8>)
 800261e:	ed83 7b00 	vstr	d7, [r3]
			vf=aux;
 8002622:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <interpretaComando+0x2d8>)
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	496f      	ldr	r1, [pc, #444]	; (80027e8 <interpretaComando+0x2e0>)
 800262a:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 800262e:	e016      	b.n	800265e <interpretaComando+0x156>
		case 'm':
			//HAL_UART_Transmit(&huart3,(uint8_t *)"vm\n", 4, 100);
			aux =  strtod(&rx_buffer[2], NULL);
 8002630:	2100      	movs	r1, #0
 8002632:	486a      	ldr	r0, [pc, #424]	; (80027dc <interpretaComando+0x2d4>)
 8002634:	f00d f916 	bl	800f864 <strtod>
 8002638:	eeb0 7b40 	vmov.f64	d7, d0
 800263c:	4b68      	ldr	r3, [pc, #416]	; (80027e0 <interpretaComando+0x2d8>)
 800263e:	ed83 7b00 	vstr	d7, [r3]
			vmax=aux;
 8002642:	4b67      	ldr	r3, [pc, #412]	; (80027e0 <interpretaComando+0x2d8>)
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	4968      	ldr	r1, [pc, #416]	; (80027ec <interpretaComando+0x2e4>)
 800264a:	e9c1 2300 	strd	r2, r3, [r1]

			break;
 800264e:	e006      	b.n	800265e <interpretaComando+0x156>
		default:
			HAL_UART_Transmit(&huart3,(uint8_t *)"Error\n", 7, 100);
 8002650:	2364      	movs	r3, #100	; 0x64
 8002652:	2207      	movs	r2, #7
 8002654:	4966      	ldr	r1, [pc, #408]	; (80027f0 <interpretaComando+0x2e8>)
 8002656:	4867      	ldr	r0, [pc, #412]	; (80027f4 <interpretaComando+0x2ec>)
 8002658:	f009 ffe4 	bl	800c624 <HAL_UART_Transmit>
			break;
 800265c:	bf00      	nop
		}
		break;
 800265e:	e1f9      	b.n	8002a54 <interpretaComando+0x54c>

	case 'a': 					//aceleracion amax
		switch(rx_buffer[1]){
 8002660:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <interpretaComando+0x2d0>)
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	2b6d      	cmp	r3, #109	; 0x6d
 8002666:	d10f      	bne.n	8002688 <interpretaComando+0x180>
		case 'm':
			//HAL_UART_Transmit(&huart3,(uint8_t *)"am\n", 4, 100);
			aux =  strtod(&rx_buffer[2], NULL);
 8002668:	2100      	movs	r1, #0
 800266a:	485c      	ldr	r0, [pc, #368]	; (80027dc <interpretaComando+0x2d4>)
 800266c:	f00d f8fa 	bl	800f864 <strtod>
 8002670:	eeb0 7b40 	vmov.f64	d7, d0
 8002674:	4b5a      	ldr	r3, [pc, #360]	; (80027e0 <interpretaComando+0x2d8>)
 8002676:	ed83 7b00 	vstr	d7, [r3]
			amax=aux;
 800267a:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <interpretaComando+0x2d8>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	495d      	ldr	r1, [pc, #372]	; (80027f8 <interpretaComando+0x2f0>)
 8002682:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8002686:	e006      	b.n	8002696 <interpretaComando+0x18e>

		default:
			HAL_UART_Transmit(&huart3,(uint8_t *)"Error\n", 7, 100);
 8002688:	2364      	movs	r3, #100	; 0x64
 800268a:	2207      	movs	r2, #7
 800268c:	4958      	ldr	r1, [pc, #352]	; (80027f0 <interpretaComando+0x2e8>)
 800268e:	4859      	ldr	r0, [pc, #356]	; (80027f4 <interpretaComando+0x2ec>)
 8002690:	f009 ffc8 	bl	800c624 <HAL_UART_Transmit>
			break;
 8002694:	bf00      	nop
		}

		break;
 8002696:	e1dd      	b.n	8002a54 <interpretaComando+0x54c>

	case 'j': 					//jerk jmax
		switch(rx_buffer[1]){
 8002698:	4b4f      	ldr	r3, [pc, #316]	; (80027d8 <interpretaComando+0x2d0>)
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	2b6d      	cmp	r3, #109	; 0x6d
 800269e:	d10f      	bne.n	80026c0 <interpretaComando+0x1b8>
		case 'm':
			//HAL_UART_Transmit(&huart3,(uint8_t *)"jm\n", 4, 100);
			aux =  strtod(&rx_buffer[2], NULL);
 80026a0:	2100      	movs	r1, #0
 80026a2:	484e      	ldr	r0, [pc, #312]	; (80027dc <interpretaComando+0x2d4>)
 80026a4:	f00d f8de 	bl	800f864 <strtod>
 80026a8:	eeb0 7b40 	vmov.f64	d7, d0
 80026ac:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <interpretaComando+0x2d8>)
 80026ae:	ed83 7b00 	vstr	d7, [r3]
			jmax=aux;
 80026b2:	4b4b      	ldr	r3, [pc, #300]	; (80027e0 <interpretaComando+0x2d8>)
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	4950      	ldr	r1, [pc, #320]	; (80027fc <interpretaComando+0x2f4>)
 80026ba:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 80026be:	e006      	b.n	80026ce <interpretaComando+0x1c6>

		default:
			HAL_UART_Transmit(&huart3,(uint8_t *)"Error\n", 7, 100);
 80026c0:	2364      	movs	r3, #100	; 0x64
 80026c2:	2207      	movs	r2, #7
 80026c4:	494a      	ldr	r1, [pc, #296]	; (80027f0 <interpretaComando+0x2e8>)
 80026c6:	484b      	ldr	r0, [pc, #300]	; (80027f4 <interpretaComando+0x2ec>)
 80026c8:	f009 ffac 	bl	800c624 <HAL_UART_Transmit>
			break;
 80026cc:	bf00      	nop
		}
		break;
 80026ce:	e1c1      	b.n	8002a54 <interpretaComando+0x54c>



	case 'M':						//:M(motor) + numero de motor (1. 2. 3) + Angulo de 0 a 90
	case 'm':
		switch(rx_buffer[1]){
 80026d0:	4b41      	ldr	r3, [pc, #260]	; (80027d8 <interpretaComando+0x2d0>)
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	2b33      	cmp	r3, #51	; 0x33
 80026d6:	d05c      	beq.n	8002792 <interpretaComando+0x28a>
 80026d8:	2b33      	cmp	r3, #51	; 0x33
 80026da:	f300 80a6 	bgt.w	800282a <interpretaComando+0x322>
 80026de:	2b31      	cmp	r3, #49	; 0x31
 80026e0:	d002      	beq.n	80026e8 <interpretaComando+0x1e0>
 80026e2:	2b32      	cmp	r3, #50	; 0x32
 80026e4:	d02f      	beq.n	8002746 <interpretaComando+0x23e>
 80026e6:	e0a0      	b.n	800282a <interpretaComando+0x322>
		case '1':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor1\n\r", 8, 100);
 80026e8:	2364      	movs	r3, #100	; 0x64
 80026ea:	2208      	movs	r2, #8
 80026ec:	4944      	ldr	r1, [pc, #272]	; (8002800 <interpretaComando+0x2f8>)
 80026ee:	4841      	ldr	r0, [pc, #260]	; (80027f4 <interpretaComando+0x2ec>)
 80026f0:	f009 ff98 	bl	800c624 <HAL_UART_Transmit>
			aux =  strtod(&rx_buffer[2], NULL);
 80026f4:	2100      	movs	r1, #0
 80026f6:	4839      	ldr	r0, [pc, #228]	; (80027dc <interpretaComando+0x2d4>)
 80026f8:	f00d f8b4 	bl	800f864 <strtod>
 80026fc:	eeb0 7b40 	vmov.f64	d7, d0
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <interpretaComando+0x2d8>)
 8002702:	ed83 7b00 	vstr	d7, [r3]
			if(aux>=0 && aux<=90){  // verificacion de limites articulares
 8002706:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <interpretaComando+0x2d8>)
 8002708:	ed93 7b00 	vldr	d7, [r3]
 800270c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	db10      	blt.n	8002738 <interpretaComando+0x230>
 8002716:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <interpretaComando+0x2d8>)
 8002718:	ed93 7b00 	vldr	d7, [r3]
 800271c:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80027d0 <interpretaComando+0x2c8>
 8002720:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	d806      	bhi.n	8002738 <interpretaComando+0x230>
				titha1 = aux;
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <interpretaComando+0x2d8>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	4934      	ldr	r1, [pc, #208]	; (8002804 <interpretaComando+0x2fc>)
 8002732:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 8002736:	e07f      	b.n	8002838 <interpretaComando+0x330>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 8002738:	2364      	movs	r3, #100	; 0x64
 800273a:	220a      	movs	r2, #10
 800273c:	4932      	ldr	r1, [pc, #200]	; (8002808 <interpretaComando+0x300>)
 800273e:	482d      	ldr	r0, [pc, #180]	; (80027f4 <interpretaComando+0x2ec>)
 8002740:	f009 ff70 	bl	800c624 <HAL_UART_Transmit>
			break;
 8002744:	e078      	b.n	8002838 <interpretaComando+0x330>
		case '2':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor2\n\r", 8, 100);
 8002746:	2364      	movs	r3, #100	; 0x64
 8002748:	2208      	movs	r2, #8
 800274a:	4930      	ldr	r1, [pc, #192]	; (800280c <interpretaComando+0x304>)
 800274c:	4829      	ldr	r0, [pc, #164]	; (80027f4 <interpretaComando+0x2ec>)
 800274e:	f009 ff69 	bl	800c624 <HAL_UART_Transmit>
			if(aux>=0 && aux<=90){  // verificacion de limites articulares
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <interpretaComando+0x2d8>)
 8002754:	ed93 7b00 	vldr	d7, [r3]
 8002758:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002760:	db10      	blt.n	8002784 <interpretaComando+0x27c>
 8002762:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <interpretaComando+0x2d8>)
 8002764:	ed93 7b00 	vldr	d7, [r3]
 8002768:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80027d0 <interpretaComando+0x2c8>
 800276c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	d806      	bhi.n	8002784 <interpretaComando+0x27c>
				titha2 = aux;
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <interpretaComando+0x2d8>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	4924      	ldr	r1, [pc, #144]	; (8002810 <interpretaComando+0x308>)
 800277e:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 8002782:	e059      	b.n	8002838 <interpretaComando+0x330>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 8002784:	2364      	movs	r3, #100	; 0x64
 8002786:	220a      	movs	r2, #10
 8002788:	491f      	ldr	r1, [pc, #124]	; (8002808 <interpretaComando+0x300>)
 800278a:	481a      	ldr	r0, [pc, #104]	; (80027f4 <interpretaComando+0x2ec>)
 800278c:	f009 ff4a 	bl	800c624 <HAL_UART_Transmit>
			break;
 8002790:	e052      	b.n	8002838 <interpretaComando+0x330>
		case '3':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor3\n\r", 8, 100);
 8002792:	2364      	movs	r3, #100	; 0x64
 8002794:	2208      	movs	r2, #8
 8002796:	491f      	ldr	r1, [pc, #124]	; (8002814 <interpretaComando+0x30c>)
 8002798:	4816      	ldr	r0, [pc, #88]	; (80027f4 <interpretaComando+0x2ec>)
 800279a:	f009 ff43 	bl	800c624 <HAL_UART_Transmit>
			if(aux>=0 && aux<=90){   // verificacion de limites articulares
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <interpretaComando+0x2d8>)
 80027a0:	ed93 7b00 	vldr	d7, [r3]
 80027a4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80027a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ac:	db36      	blt.n	800281c <interpretaComando+0x314>
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <interpretaComando+0x2d8>)
 80027b0:	ed93 7b00 	vldr	d7, [r3]
 80027b4:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80027d0 <interpretaComando+0x2c8>
 80027b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80027bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c0:	d82c      	bhi.n	800281c <interpretaComando+0x314>
				titha3 = aux;
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <interpretaComando+0x2d8>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	4913      	ldr	r1, [pc, #76]	; (8002818 <interpretaComando+0x310>)
 80027ca:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 80027ce:	e033      	b.n	8002838 <interpretaComando+0x330>
 80027d0:	00000000 	.word	0x00000000
 80027d4:	40568000 	.word	0x40568000
 80027d8:	24000494 	.word	0x24000494
 80027dc:	24000496 	.word	0x24000496
 80027e0:	24000390 	.word	0x24000390
 80027e4:	240003f0 	.word	0x240003f0
 80027e8:	240003f8 	.word	0x240003f8
 80027ec:	240003d8 	.word	0x240003d8
 80027f0:	080122a4 	.word	0x080122a4
 80027f4:	24000cf0 	.word	0x24000cf0
 80027f8:	240003e0 	.word	0x240003e0
 80027fc:	240003e8 	.word	0x240003e8
 8002800:	080122ac 	.word	0x080122ac
 8002804:	240003c0 	.word	0x240003c0
 8002808:	080122b8 	.word	0x080122b8
 800280c:	080122c4 	.word	0x080122c4
 8002810:	240003c8 	.word	0x240003c8
 8002814:	080122d0 	.word	0x080122d0
 8002818:	240003d0 	.word	0x240003d0
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 800281c:	2364      	movs	r3, #100	; 0x64
 800281e:	220a      	movs	r2, #10
 8002820:	4991      	ldr	r1, [pc, #580]	; (8002a68 <interpretaComando+0x560>)
 8002822:	4892      	ldr	r0, [pc, #584]	; (8002a6c <interpretaComando+0x564>)
 8002824:	f009 fefe 	bl	800c624 <HAL_UART_Transmit>
			break;
 8002828:	e006      	b.n	8002838 <interpretaComando+0x330>

		default:
			HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorMotor\n\r", 12, 100);
 800282a:	2364      	movs	r3, #100	; 0x64
 800282c:	220c      	movs	r2, #12
 800282e:	4990      	ldr	r1, [pc, #576]	; (8002a70 <interpretaComando+0x568>)
 8002830:	488e      	ldr	r0, [pc, #568]	; (8002a6c <interpretaComando+0x564>)
 8002832:	f009 fef7 	bl	800c624 <HAL_UART_Transmit>
			break;
 8002836:	bf00      	nop
		}
		break;
 8002838:	e10c      	b.n	8002a54 <interpretaComando+0x54c>



	case 'P':												//:Px0.1 y0.1 z-0.5 \0 (Eje, valor, espacio, Eje, valor, espacio, Eje, valor, espacio)
	case 'p':
		HAL_UART_Transmit(&huart3,(uint8_t *)"Punto\n\r", 7, 100);
 800283a:	2364      	movs	r3, #100	; 0x64
 800283c:	2207      	movs	r2, #7
 800283e:	498d      	ldr	r1, [pc, #564]	; (8002a74 <interpretaComando+0x56c>)
 8002840:	488a      	ldr	r0, [pc, #552]	; (8002a6c <interpretaComando+0x564>)
 8002842:	f009 feef 	bl	800c624 <HAL_UART_Transmit>
		flagErrorEndStop = 0;
 8002846:	498c      	ldr	r1, [pc, #560]	; (8002a78 <interpretaComando+0x570>)
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 800285c:	e0ac      	b.n	80029b8 <interpretaComando+0x4b0>
			if(rx_buffer[i] == 'x'){
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	4a86      	ldr	r2, [pc, #536]	; (8002a7c <interpretaComando+0x574>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	2b78      	cmp	r3, #120	; 0x78
 8002866:	d133      	bne.n	80028d0 <interpretaComando+0x3c8>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002868:	e00c      	b.n	8002884 <interpretaComando+0x37c>
					auxString[j] = rx_buffer[i+1];
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	7bbb      	ldrb	r3, [r7, #14]
 8002870:	4982      	ldr	r1, [pc, #520]	; (8002a7c <interpretaComando+0x574>)
 8002872:	5c89      	ldrb	r1, [r1, r2]
 8002874:	4a82      	ldr	r2, [pc, #520]	; (8002a80 <interpretaComando+0x578>)
 8002876:	54d1      	strb	r1, [r2, r3]
					j++;
 8002878:	7bbb      	ldrb	r3, [r7, #14]
 800287a:	3301      	adds	r3, #1
 800287c:	73bb      	strb	r3, [r7, #14]
					i++;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	3301      	adds	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	3301      	adds	r3, #1
 8002888:	4a7c      	ldr	r2, [pc, #496]	; (8002a7c <interpretaComando+0x574>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	2b20      	cmp	r3, #32
 800288e:	d1ec      	bne.n	800286a <interpretaComando+0x362>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 8002890:	2100      	movs	r1, #0
 8002892:	487b      	ldr	r0, [pc, #492]	; (8002a80 <interpretaComando+0x578>)
 8002894:	f00c ffe6 	bl	800f864 <strtod>
 8002898:	eeb0 7b40 	vmov.f64	d7, d0
 800289c:	4b79      	ldr	r3, [pc, #484]	; (8002a84 <interpretaComando+0x57c>)
 800289e:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	e007      	b.n	80028b8 <interpretaComando+0x3b0>
					auxString[k] = 0;
 80028a8:	4a75      	ldr	r2, [pc, #468]	; (8002a80 <interpretaComando+0x578>)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4413      	add	r3, r2
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3301      	adds	r3, #1
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b0a      	cmp	r3, #10
 80028bc:	ddf4      	ble.n	80028a8 <interpretaComando+0x3a0>
				}
				j=0;
 80028be:	2300      	movs	r3, #0
 80028c0:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *)"PuntoX_ok\n\r", 11, 100);
 80028c2:	2364      	movs	r3, #100	; 0x64
 80028c4:	220b      	movs	r2, #11
 80028c6:	4970      	ldr	r1, [pc, #448]	; (8002a88 <interpretaComando+0x580>)
 80028c8:	4868      	ldr	r0, [pc, #416]	; (8002a6c <interpretaComando+0x564>)
 80028ca:	f009 feab 	bl	800c624 <HAL_UART_Transmit>
 80028ce:	e070      	b.n	80029b2 <interpretaComando+0x4aa>
			}
			else if(rx_buffer[i] == 'y'){
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	4a6a      	ldr	r2, [pc, #424]	; (8002a7c <interpretaComando+0x574>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	2b79      	cmp	r3, #121	; 0x79
 80028d8:	d133      	bne.n	8002942 <interpretaComando+0x43a>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80028da:	e00c      	b.n	80028f6 <interpretaComando+0x3ee>
					auxString[j] = rx_buffer[i+1];
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	4966      	ldr	r1, [pc, #408]	; (8002a7c <interpretaComando+0x574>)
 80028e4:	5c89      	ldrb	r1, [r1, r2]
 80028e6:	4a66      	ldr	r2, [pc, #408]	; (8002a80 <interpretaComando+0x578>)
 80028e8:	54d1      	strb	r1, [r2, r3]
					j++;
 80028ea:	7bbb      	ldrb	r3, [r7, #14]
 80028ec:	3301      	adds	r3, #1
 80028ee:	73bb      	strb	r3, [r7, #14]
					i++;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	3301      	adds	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	3301      	adds	r3, #1
 80028fa:	4a60      	ldr	r2, [pc, #384]	; (8002a7c <interpretaComando+0x574>)
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d1ec      	bne.n	80028dc <interpretaComando+0x3d4>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 8002902:	2100      	movs	r1, #0
 8002904:	485e      	ldr	r0, [pc, #376]	; (8002a80 <interpretaComando+0x578>)
 8002906:	f00c ffad 	bl	800f864 <strtod>
 800290a:	eeb0 7b40 	vmov.f64	d7, d0
 800290e:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <interpretaComando+0x57c>)
 8002910:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8002914:	2300      	movs	r3, #0
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	e007      	b.n	800292a <interpretaComando+0x422>
					auxString[k] = 0;
 800291a:	4a59      	ldr	r2, [pc, #356]	; (8002a80 <interpretaComando+0x578>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3301      	adds	r3, #1
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b0a      	cmp	r3, #10
 800292e:	ddf4      	ble.n	800291a <interpretaComando+0x412>
				}
				j=0;
 8002930:	2300      	movs	r3, #0
 8002932:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"PuntoY_ok\n\r", 11, 100);
 8002934:	2364      	movs	r3, #100	; 0x64
 8002936:	220b      	movs	r2, #11
 8002938:	4954      	ldr	r1, [pc, #336]	; (8002a8c <interpretaComando+0x584>)
 800293a:	484c      	ldr	r0, [pc, #304]	; (8002a6c <interpretaComando+0x564>)
 800293c:	f009 fe72 	bl	800c624 <HAL_UART_Transmit>
 8002940:	e037      	b.n	80029b2 <interpretaComando+0x4aa>
			}
			else if(rx_buffer[i] == 'z'){
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	4a4d      	ldr	r2, [pc, #308]	; (8002a7c <interpretaComando+0x574>)
 8002946:	5cd3      	ldrb	r3, [r2, r3]
 8002948:	2b7a      	cmp	r3, #122	; 0x7a
 800294a:	d132      	bne.n	80029b2 <interpretaComando+0x4aa>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800294c:	e00c      	b.n	8002968 <interpretaComando+0x460>
					auxString[j] = rx_buffer[i+1];
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	7bbb      	ldrb	r3, [r7, #14]
 8002954:	4949      	ldr	r1, [pc, #292]	; (8002a7c <interpretaComando+0x574>)
 8002956:	5c89      	ldrb	r1, [r1, r2]
 8002958:	4a49      	ldr	r2, [pc, #292]	; (8002a80 <interpretaComando+0x578>)
 800295a:	54d1      	strb	r1, [r2, r3]
					j++;
 800295c:	7bbb      	ldrb	r3, [r7, #14]
 800295e:	3301      	adds	r3, #1
 8002960:	73bb      	strb	r3, [r7, #14]
					i++;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	3301      	adds	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	3301      	adds	r3, #1
 800296c:	4a43      	ldr	r2, [pc, #268]	; (8002a7c <interpretaComando+0x574>)
 800296e:	5cd3      	ldrb	r3, [r2, r3]
 8002970:	2b20      	cmp	r3, #32
 8002972:	d1ec      	bne.n	800294e <interpretaComando+0x446>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 8002974:	2100      	movs	r1, #0
 8002976:	4842      	ldr	r0, [pc, #264]	; (8002a80 <interpretaComando+0x578>)
 8002978:	f00c ff74 	bl	800f864 <strtod>
 800297c:	eeb0 7b40 	vmov.f64	d7, d0
 8002980:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <interpretaComando+0x57c>)
 8002982:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 8002986:	2300      	movs	r3, #0
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	e007      	b.n	800299c <interpretaComando+0x494>
					auxString[k] = 0;
 800298c:	4a3c      	ldr	r2, [pc, #240]	; (8002a80 <interpretaComando+0x578>)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	4413      	add	r3, r2
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	3301      	adds	r3, #1
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b0a      	cmp	r3, #10
 80029a0:	ddf4      	ble.n	800298c <interpretaComando+0x484>
				}
				j=0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"PuntoZ_ok\n\r", 11, 100);
 80029a6:	2364      	movs	r3, #100	; 0x64
 80029a8:	220b      	movs	r2, #11
 80029aa:	4939      	ldr	r1, [pc, #228]	; (8002a90 <interpretaComando+0x588>)
 80029ac:	482f      	ldr	r0, [pc, #188]	; (8002a6c <interpretaComando+0x564>)
 80029ae:	f009 fe39 	bl	800c624 <HAL_UART_Transmit>
			}
			i++;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	3301      	adds	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <interpretaComando+0x574>)
 80029bc:	5cd3      	ldrb	r3, [r2, r3]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f47f af4d 	bne.w	800285e <interpretaComando+0x356>
		}
		cinematicaInversa(Pfin);
 80029c4:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <interpretaComando+0x57c>)
 80029c6:	ed93 5b00 	vldr	d5, [r3]
 80029ca:	ed93 6b02 	vldr	d6, [r3, #8]
 80029ce:	ed93 7b04 	vldr	d7, [r3, #16]
 80029d2:	eeb0 0b45 	vmov.f64	d0, d5
 80029d6:	eeb0 1b46 	vmov.f64	d1, d6
 80029da:	eeb0 2b47 	vmov.f64	d2, d7
 80029de:	f7fe f84f 	bl	8000a80 <cinematicaInversa>
		break;
 80029e2:	e037      	b.n	8002a54 <interpretaComando+0x54c>
	case 'H':
	case 'h':
		HAL_UART_Transmit(&huart3,(uint8_t *)"Homing\n\r", 8, 100);
 80029e4:	2364      	movs	r3, #100	; 0x64
 80029e6:	2208      	movs	r2, #8
 80029e8:	492a      	ldr	r1, [pc, #168]	; (8002a94 <interpretaComando+0x58c>)
 80029ea:	4820      	ldr	r0, [pc, #128]	; (8002a6c <interpretaComando+0x564>)
 80029ec:	f009 fe1a 	bl	800c624 <HAL_UART_Transmit>
		//PREGUNTA : se activan los enables en el homming para asegurarse de que el robot empiece a operar en una posicion segura  ?
		HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);  //activo Enable
 80029f0:	2200      	movs	r2, #0
 80029f2:	2110      	movs	r1, #16
 80029f4:	4828      	ldr	r0, [pc, #160]	; (8002a98 <interpretaComando+0x590>)
 80029f6:	f005 fa39 	bl	8007e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2120      	movs	r1, #32
 80029fe:	4826      	ldr	r0, [pc, #152]	; (8002a98 <interpretaComando+0x590>)
 8002a00:	f005 fa34 	bl	8007e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2140      	movs	r1, #64	; 0x40
 8002a08:	4823      	ldr	r0, [pc, #140]	; (8002a98 <interpretaComando+0x590>)
 8002a0a:	f005 fa2f 	bl	8007e6c <HAL_GPIO_WritePin>
		homingAprox();
 8002a0e:	f7ff f8bf 	bl	8001b90 <homingAprox>
		homingArm1();
 8002a12:	f7ff fab5 	bl	8001f80 <homingArm1>
		homingArm2();
 8002a16:	f7ff fb93 	bl	8002140 <homingArm2>
		homingArm3();
 8002a1a:	f7ff fc91 	bl	8002340 <homingArm3>
		Pini.x=0;
 8002a1e:	491f      	ldr	r1, [pc, #124]	; (8002a9c <interpretaComando+0x594>)
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y=0;
 8002a2c:	491b      	ldr	r1, [pc, #108]	; (8002a9c <interpretaComando+0x594>)
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = -0.334658034417224;
 8002a3a:	4918      	ldr	r1, [pc, #96]	; (8002a9c <interpretaComando+0x594>)
 8002a3c:	a308      	add	r3, pc, #32	; (adr r3, 8002a60 <interpretaComando+0x558>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	e9c1 2304 	strd	r2, r3, [r1, #16]
		HAL_UART_Transmit(&huart3,(uint8_t *)"Fin_Homing\n\r", 12, 100);
 8002a46:	2364      	movs	r3, #100	; 0x64
 8002a48:	220c      	movs	r2, #12
 8002a4a:	4915      	ldr	r1, [pc, #84]	; (8002aa0 <interpretaComando+0x598>)
 8002a4c:	4807      	ldr	r0, [pc, #28]	; (8002a6c <interpretaComando+0x564>)
 8002a4e:	f009 fde9 	bl	800c624 <HAL_UART_Transmit>

	break;
 8002a52:	bf00      	nop

	}

}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	f3af 8000 	nop.w
 8002a60:	884a9983 	.word	0x884a9983
 8002a64:	bfd56b09 	.word	0xbfd56b09
 8002a68:	080122b8 	.word	0x080122b8
 8002a6c:	24000cf0 	.word	0x24000cf0
 8002a70:	080122dc 	.word	0x080122dc
 8002a74:	080122ec 	.word	0x080122ec
 8002a78:	24000520 	.word	0x24000520
 8002a7c:	24000494 	.word	0x24000494
 8002a80:	24000398 	.word	0x24000398
 8002a84:	24000418 	.word	0x24000418
 8002a88:	080122f4 	.word	0x080122f4
 8002a8c:	08012300 	.word	0x08012300
 8002a90:	0801230c 	.word	0x0801230c
 8002a94:	08012318 	.word	0x08012318
 8002a98:	58020c00 	.word	0x58020c00
 8002a9c:	24000400 	.word	0x24000400
 8002aa0:	08012324 	.word	0x08012324
 8002aa4:	00000000 	.word	0x00000000

08002aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	ed2d 8b02 	vpush	{d8}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ab0:	f004 f8ac 	bl	8006c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ab4:	f000 f96c 	bl	8002d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ab8:	f7fe ff6c 	bl	8001994 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002abc:	f001 faac 	bl	8004018 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002ac0:	f001 fb1a 	bl	80040f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002ac4:	f001 fb8a 	bl	80041dc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8002ac8:	f003 fefe 	bl	80068c8 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8002acc:	f001 fc48 	bl	8004360 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002ad0:	f001 fcaa 	bl	8004428 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002ad4:	f001 fcf8 	bl	80044c8 <MX_TIM14_Init>
  MX_TIM5_Init();
 8002ad8:	f001 fbf2 	bl	80042c0 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002adc:	f001 fd44 	bl	8004568 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8002ae0:	f003 fe5a 	bl	8006798 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002ae4:	f003 fea4 	bl	8006830 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, data, sizeof(data), 100); //Enviamos el mensaje: Start
 8002ae8:	2364      	movs	r3, #100	; 0x64
 8002aea:	2207      	movs	r2, #7
 8002aec:	498a      	ldr	r1, [pc, #552]	; (8002d18 <main+0x270>)
 8002aee:	488b      	ldr	r0, [pc, #556]	; (8002d1c <main+0x274>)
 8002af0:	f009 fd98 	bl	800c624 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002af4:	2201      	movs	r2, #1
 8002af6:	498a      	ldr	r1, [pc, #552]	; (8002d20 <main+0x278>)
 8002af8:	4888      	ldr	r0, [pc, #544]	; (8002d1c <main+0x274>)
 8002afa:	f009 fe29 	bl	800c750 <HAL_UART_Receive_IT>


	HAL_TIM_Base_Start(&htim12);
 8002afe:	4889      	ldr	r0, [pc, #548]	; (8002d24 <main+0x27c>)
 8002b00:	f007 fd9c 	bl	800a63c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002b04:	4888      	ldr	r0, [pc, #544]	; (8002d28 <main+0x280>)
 8002b06:	f007 fd99 	bl	800a63c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002b0a:	4888      	ldr	r0, [pc, #544]	; (8002d2c <main+0x284>)
 8002b0c:	f007 fd96 	bl	800a63c <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 8002b10:	2100      	movs	r1, #0
 8002b12:	4887      	ldr	r0, [pc, #540]	; (8002d30 <main+0x288>)
 8002b14:	f008 f938 	bl	800ad88 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4886      	ldr	r0, [pc, #536]	; (8002d34 <main+0x28c>)
 8002b1c:	f008 f934 	bl	800ad88 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 8002b20:	2100      	movs	r1, #0
 8002b22:	4885      	ldr	r0, [pc, #532]	; (8002d38 <main+0x290>)
 8002b24:	f008 f930 	bl	800ad88 <HAL_TIM_IC_Start_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Ejemplo :px0 y0 z-0.8 \nr", 24, 100);
 8002b28:	2364      	movs	r3, #100	; 0x64
 8002b2a:	2218      	movs	r2, #24
 8002b2c:	4983      	ldr	r1, [pc, #524]	; (8002d3c <main+0x294>)
 8002b2e:	487b      	ldr	r0, [pc, #492]	; (8002d1c <main+0x274>)
 8002b30:	f009 fd78 	bl	800c624 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (FlagButton == 1) {
 8002b34:	4b82      	ldr	r3, [pc, #520]	; (8002d40 <main+0x298>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d1fb      	bne.n	8002b34 <main+0x8c>
			FlagButton = 0;
 8002b3c:	4b80      	ldr	r3, [pc, #512]	; (8002d40 <main+0x298>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
			distancia = sqrt(pow(Pfin.x - Pini.x, 2) + pow(Pfin.y - Pini.y, 2) + pow(Pfin.z - Pini.z, 2));
 8002b42:	4b80      	ldr	r3, [pc, #512]	; (8002d44 <main+0x29c>)
 8002b44:	ed93 6b00 	vldr	d6, [r3]
 8002b48:	4b7f      	ldr	r3, [pc, #508]	; (8002d48 <main+0x2a0>)
 8002b4a:	ed93 7b00 	vldr	d7, [r3]
 8002b4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b52:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002b56:	eeb0 0b47 	vmov.f64	d0, d7
 8002b5a:	f00e ff3d 	bl	80119d8 <pow>
 8002b5e:	eeb0 8b40 	vmov.f64	d8, d0
 8002b62:	4b78      	ldr	r3, [pc, #480]	; (8002d44 <main+0x29c>)
 8002b64:	ed93 6b02 	vldr	d6, [r3, #8]
 8002b68:	4b77      	ldr	r3, [pc, #476]	; (8002d48 <main+0x2a0>)
 8002b6a:	ed93 7b02 	vldr	d7, [r3, #8]
 8002b6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b72:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002b76:	eeb0 0b47 	vmov.f64	d0, d7
 8002b7a:	f00e ff2d 	bl	80119d8 <pow>
 8002b7e:	eeb0 7b40 	vmov.f64	d7, d0
 8002b82:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002b86:	4b6f      	ldr	r3, [pc, #444]	; (8002d44 <main+0x29c>)
 8002b88:	ed93 6b04 	vldr	d6, [r3, #16]
 8002b8c:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <main+0x2a0>)
 8002b8e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002b92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b96:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002b9a:	eeb0 0b47 	vmov.f64	d0, d7
 8002b9e:	f00e ff1b 	bl	80119d8 <pow>
 8002ba2:	eeb0 7b40 	vmov.f64	d7, d0
 8002ba6:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002baa:	eeb0 0b47 	vmov.f64	d0, d7
 8002bae:	f00f f993 	bl	8011ed8 <sqrt>
 8002bb2:	eeb0 7b40 	vmov.f64	d7, d0
 8002bb6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bba:	4b64      	ldr	r3, [pc, #400]	; (8002d4c <main+0x2a4>)
 8002bbc:	edc3 7a00 	vstr	s15, [r3]
			vDirector[0] = (Pfin.x - Pini.x) / distancia;	//Vector director en X
 8002bc0:	4b60      	ldr	r3, [pc, #384]	; (8002d44 <main+0x29c>)
 8002bc2:	ed93 6b00 	vldr	d6, [r3]
 8002bc6:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <main+0x2a0>)
 8002bc8:	ed93 7b00 	vldr	d7, [r3]
 8002bcc:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002bd0:	4b5e      	ldr	r3, [pc, #376]	; (8002d4c <main+0x2a4>)
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002bda:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002bde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002be2:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <main+0x2a8>)
 8002be4:	edc3 7a00 	vstr	s15, [r3]
			vDirector[1] = (Pfin.y - Pini.y) / distancia;	//Vector director en Y
 8002be8:	4b56      	ldr	r3, [pc, #344]	; (8002d44 <main+0x29c>)
 8002bea:	ed93 6b02 	vldr	d6, [r3, #8]
 8002bee:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <main+0x2a0>)
 8002bf0:	ed93 7b02 	vldr	d7, [r3, #8]
 8002bf4:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002bf8:	4b54      	ldr	r3, [pc, #336]	; (8002d4c <main+0x2a4>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002c02:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002c06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c0a:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <main+0x2a8>)
 8002c0c:	edc3 7a01 	vstr	s15, [r3, #4]
			vDirector[2] = (Pfin.z - Pini.z) / distancia;	//Vector director en Z
 8002c10:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <main+0x29c>)
 8002c12:	ed93 6b04 	vldr	d6, [r3, #16]
 8002c16:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <main+0x2a0>)
 8002c18:	ed93 7b04 	vldr	d7, [r3, #16]
 8002c1c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002c20:	4b4a      	ldr	r3, [pc, #296]	; (8002d4c <main+0x2a4>)
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002c2a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002c2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c32:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <main+0x2a8>)
 8002c34:	edc3 7a02 	vstr	s15, [r3, #8]
			configStepMotor1(titha1);
 8002c38:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <main+0x2ac>)
 8002c3a:	ed93 7b00 	vldr	d7, [r3]
 8002c3e:	eeb0 0b47 	vmov.f64	d0, d7
 8002c42:	f000 fb91 	bl	8003368 <configStepMotor1>
			configStepMotor2(titha2);
 8002c46:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <main+0x2b0>)
 8002c48:	ed93 7b00 	vldr	d7, [r3]
 8002c4c:	eeb0 0b47 	vmov.f64	d0, d7
 8002c50:	f000 fc4a 	bl	80034e8 <configStepMotor2>
			configStepMotor3(titha3);
 8002c54:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <main+0x2b4>)
 8002c56:	ed93 7b00 	vldr	d7, [r3]
 8002c5a:	eeb0 0b47 	vmov.f64	d0, d7
 8002c5e:	f000 fd03 	bl	8003668 <configStepMotor3>
			inicializarTrayectoria(0, distancia, 0, 0, 0.4, 4, 1); //(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)
 8002c62:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <main+0x2a4>)
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002c70:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002c74:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8002d08 <main+0x260>
 8002c78:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8002d10 <main+0x268>
 8002c7c:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8002d10 <main+0x268>
 8002c80:	eeb0 1b47 	vmov.f64	d1, d7
 8002c84:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8002d10 <main+0x268>
 8002c88:	f001 fe9a 	bl	80049c0 <inicializarTrayectoria>
			FlagTiempo = 0;
 8002c8c:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <main+0x2b8>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
			FlagTrayectoM1 = 0;
 8002c92:	4934      	ldr	r1, [pc, #208]	; (8002d64 <main+0x2bc>)
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM2 = 0;
 8002ca0:	4931      	ldr	r1, [pc, #196]	; (8002d68 <main+0x2c0>)
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM3 = 0;
 8002cae:	492f      	ldr	r1, [pc, #188]	; (8002d6c <main+0x2c4>)
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9c1 2300 	strd	r2, r3, [r1]
			Start=1;
 8002cbc:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <main+0x2c8>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
			rpm1 = 0;
 8002cc2:	492c      	ldr	r1, [pc, #176]	; (8002d74 <main+0x2cc>)
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9c1 2300 	strd	r2, r3, [r1]
			rpm2 = 0;
 8002cd0:	4929      	ldr	r1, [pc, #164]	; (8002d78 <main+0x2d0>)
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9c1 2300 	strd	r2, r3, [r1]
			rpm3 = 0;
 8002cde:	4927      	ldr	r1, [pc, #156]	; (8002d7c <main+0x2d4>)
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9c1 2300 	strd	r2, r3, [r1]
			mandalemecha = 1;
 8002cec:	4924      	ldr	r1, [pc, #144]	; (8002d80 <main+0x2d8>)
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <main+0x2dc>)
 8002cf4:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_TIM_Base_Start(&htim5);
 8002cf8:	4823      	ldr	r0, [pc, #140]	; (8002d88 <main+0x2e0>)
 8002cfa:	f007 fc9f 	bl	800a63c <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 8002cfe:	4823      	ldr	r0, [pc, #140]	; (8002d8c <main+0x2e4>)
 8002d00:	f007 fd34 	bl	800a76c <HAL_TIM_Base_Start_IT>
		if (FlagButton == 1) {
 8002d04:	e716      	b.n	8002b34 <main+0x8c>
 8002d06:	bf00      	nop
 8002d08:	9999999a 	.word	0x9999999a
 8002d0c:	3fd99999 	.word	0x3fd99999
	...
 8002d18:	24000000 	.word	0x24000000
 8002d1c:	24000cf0 	.word	0x24000cf0
 8002d20:	240004b2 	.word	0x240004b2
 8002d24:	24000704 	.word	0x24000704
 8002d28:	24000750 	.word	0x24000750
 8002d2c:	2400079c 	.word	0x2400079c
 8002d30:	240005d4 	.word	0x240005d4
 8002d34:	24000620 	.word	0x24000620
 8002d38:	2400066c 	.word	0x2400066c
 8002d3c:	08012334 	.word	0x08012334
 8002d40:	24000518 	.word	0x24000518
 8002d44:	24000418 	.word	0x24000418
 8002d48:	24000400 	.word	0x24000400
 8002d4c:	24000430 	.word	0x24000430
 8002d50:	24000434 	.word	0x24000434
 8002d54:	240003c0 	.word	0x240003c0
 8002d58:	240003c8 	.word	0x240003c8
 8002d5c:	240003d0 	.word	0x240003d0
 8002d60:	240004b4 	.word	0x240004b4
 8002d64:	240004d8 	.word	0x240004d8
 8002d68:	240004e0 	.word	0x240004e0
 8002d6c:	24000008 	.word	0x24000008
 8002d70:	24000570 	.word	0x24000570
 8002d74:	24000528 	.word	0x24000528
 8002d78:	24000530 	.word	0x24000530
 8002d7c:	24000538 	.word	0x24000538
 8002d80:	24000578 	.word	0x24000578
 8002d84:	3ff00000 	.word	0x3ff00000
 8002d88:	240006b8 	.word	0x240006b8
 8002d8c:	240007e8 	.word	0x240007e8

08002d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b09c      	sub	sp, #112	; 0x70
 8002d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9a:	224c      	movs	r2, #76	; 0x4c
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f00b ff86 	bl	800ecb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	2220      	movs	r2, #32
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f00b ff80 	bl	800ecb0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002db0:	2002      	movs	r0, #2
 8002db2:	f005 f88f 	bl	8007ed4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002db6:	2300      	movs	r3, #0
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <SystemClock_Config+0xf4>)
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	4a31      	ldr	r2, [pc, #196]	; (8002e84 <SystemClock_Config+0xf4>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002dc6:	4b2f      	ldr	r3, [pc, #188]	; (8002e84 <SystemClock_Config+0xf4>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <SystemClock_Config+0xf8>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002dd8:	4a2b      	ldr	r2, [pc, #172]	; (8002e88 <SystemClock_Config+0xf8>)
 8002dda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dde:	6193      	str	r3, [r2, #24]
 8002de0:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <SystemClock_Config+0xf8>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002dec:	bf00      	nop
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <SystemClock_Config+0xf8>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfa:	d1f8      	bne.n	8002dee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002e00:	2301      	movs	r3, #1
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e04:	2340      	movs	r3, #64	; 0x40
 8002e06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e10:	2304      	movs	r3, #4
 8002e12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002e14:	2310      	movs	r3, #16
 8002e16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002e20:	2302      	movs	r3, #2
 8002e22:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002e24:	230c      	movs	r3, #12
 8002e26:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e34:	4618      	mov	r0, r3
 8002e36:	f005 f887 	bl	8007f48 <HAL_RCC_OscConfig>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002e40:	f000 fa8a 	bl	8003358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e44:	233f      	movs	r3, #63	; 0x3f
 8002e46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002e50:	2308      	movs	r3, #8
 8002e52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002e58:	2340      	movs	r3, #64	; 0x40
 8002e5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f005 fc9a 	bl	80087a4 <HAL_RCC_ClockConfig>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002e76:	f000 fa6f 	bl	8003358 <Error_Handler>
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3770      	adds	r7, #112	; 0x70
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	58000400 	.word	0x58000400
 8002e88:	58024800 	.word	0x58024800

08002e8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9c:	d103      	bne.n	8002ea6 <HAL_GPIO_EXTI_Callback+0x1a>
	case BUTTON_Pin:
		FlagButton = 1;
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_GPIO_EXTI_Callback+0x28>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
		break;
 8002ea4:	e000      	b.n	8002ea8 <HAL_GPIO_EXTI_Callback+0x1c>
		 HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);	//Apago el PWM del motor 3
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/
	default:

		break;
 8002ea6:	bf00      	nop
	}

}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	24000518 	.word	0x24000518

08002eb8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a30      	ldr	r2, [pc, #192]	; (8002f88 <HAL_UART_RxCpltCallback+0xd0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d14d      	bne.n	8002f66 <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8002eca:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <HAL_UART_RxCpltCallback+0xd4>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b3a      	cmp	r3, #58	; 0x3a
 8002ed4:	d006      	beq.n	8002ee4 <HAL_UART_RxCpltCallback+0x2c>
 8002ed6:	2b3a      	cmp	r3, #58	; 0x3a
 8002ed8:	dc36      	bgt.n	8002f48 <HAL_UART_RxCpltCallback+0x90>
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d009      	beq.n	8002ef2 <HAL_UART_RxCpltCallback+0x3a>
 8002ede:	2b0d      	cmp	r3, #13
 8002ee0:	d01e      	beq.n	8002f20 <HAL_UART_RxCpltCallback+0x68>
 8002ee2:	e031      	b.n	8002f48 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8002ee4:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8002eea:	4b2a      	ldr	r3, [pc, #168]	; (8002f94 <HAL_UART_RxCpltCallback+0xdc>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
			break;
 8002ef0:	e040      	b.n	8002f74 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 8002ef2:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d037      	beq.n	8002f6a <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8002efa:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002f04:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002f06:	e030      	b.n	8002f6a <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <HAL_UART_RxCpltCallback+0xe0>)
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002f1e:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b1e      	cmp	r3, #30
 8002f26:	d1ef      	bne.n	8002f08 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_UART_RxCpltCallback+0xdc>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d11e      	bne.n	8002f6e <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8002f30:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <HAL_UART_RxCpltCallback+0xe0>)
 8002f38:	2100      	movs	r1, #0
 8002f3a:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8002f3c:	f7ff fae4 	bl	8002508 <interpretaComando>
				cm0 = 0;
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <HAL_UART_RxCpltCallback+0xdc>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002f46:	e012      	b.n	8002f6e <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b1d      	cmp	r3, #29
 8002f4e:	d810      	bhi.n	8002f72 <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	b2d1      	uxtb	r1, r2
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_UART_RxCpltCallback+0xd8>)
 8002f5a:	7011      	strb	r1, [r2, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <HAL_UART_RxCpltCallback+0xe0>)
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	5453      	strb	r3, [r2, r1]
			}
			break;
 8002f64:	e005      	b.n	8002f72 <HAL_UART_RxCpltCallback+0xba>
		}
	}
 8002f66:	bf00      	nop
 8002f68:	e004      	b.n	8002f74 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002f6a:	bf00      	nop
 8002f6c:	e002      	b.n	8002f74 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002f6e:	bf00      	nop
 8002f70:	e000      	b.n	8002f74 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002f72:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8002f74:	2201      	movs	r2, #1
 8002f76:	4905      	ldr	r1, [pc, #20]	; (8002f8c <HAL_UART_RxCpltCallback+0xd4>)
 8002f78:	4808      	ldr	r0, [pc, #32]	; (8002f9c <HAL_UART_RxCpltCallback+0xe4>)
 8002f7a:	f009 fbe9 	bl	800c750 <HAL_UART_Receive_IT>
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40004800 	.word	0x40004800
 8002f8c:	240004b2 	.word	0x240004b2
 8002f90:	24000490 	.word	0x24000490
 8002f94:	240004b3 	.word	0x240004b3
 8002f98:	24000494 	.word	0x24000494
 8002f9c:	24000cf0 	.word	0x24000cf0

08002fa0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	__NOP();
 8002fa8:	bf00      	nop
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d116      	bne.n	8002ff8 <HAL_TIM_IC_CaptureCallback+0x40>
		if (pMotor1 == numStep1) {
 8002fca:	4b29      	ldr	r3, [pc, #164]	; (8003070 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b29      	ldr	r3, [pc, #164]	; (8003074 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d10a      	bne.n	8002fec <HAL_TIM_IC_CaptureCallback+0x34>
			HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1); //Apago el PWM del motor 1
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4827      	ldr	r0, [pc, #156]	; (8003078 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002fda:	f007 fddd 	bl	800ab98 <HAL_TIM_PWM_Stop>
			FlagTrayectoM1 = 1;
 8002fde:	4927      	ldr	r1, [pc, #156]	; (800307c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	4b26      	ldr	r3, [pc, #152]	; (8003080 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002fe6:	e9c1 2300 	strd	r2, r3, [r1]
		} else {
			pMotor3++;
		}

	}
}
 8002fea:	e03c      	b.n	8003066 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor1++;
 8002fec:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002ff4:	6013      	str	r3, [r2, #0]
}
 8002ff6:	e036      	b.n	8003066 <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM3) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a21      	ldr	r2, [pc, #132]	; (8003084 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d116      	bne.n	8003030 <HAL_TIM_IC_CaptureCallback+0x78>
		if (pMotor2 == numStep2) {
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d10a      	bne.n	8003024 <HAL_TIM_IC_CaptureCallback+0x6c>
			HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);//Apago el PWM del motor 1
 800300e:	2100      	movs	r1, #0
 8003010:	481f      	ldr	r0, [pc, #124]	; (8003090 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003012:	f007 fdc1 	bl	800ab98 <HAL_TIM_PWM_Stop>
			FlagTrayectoM2 = 1;
 8003016:	491f      	ldr	r1, [pc, #124]	; (8003094 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	4b18      	ldr	r3, [pc, #96]	; (8003080 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800301e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003022:	e020      	b.n	8003066 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor2++;
 8003024:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	4a17      	ldr	r2, [pc, #92]	; (8003088 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800302c:	6013      	str	r3, [r2, #0]
}
 800302e:	e01a      	b.n	8003066 <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM4) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a18      	ldr	r2, [pc, #96]	; (8003098 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d115      	bne.n	8003066 <HAL_TIM_IC_CaptureCallback+0xae>
		if (pMotor3 == numStep3) {
 800303a:	4b18      	ldr	r3, [pc, #96]	; (800309c <HAL_TIM_IC_CaptureCallback+0xe4>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d10a      	bne.n	800305c <HAL_TIM_IC_CaptureCallback+0xa4>
			HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);//Apago el PWM del motor 1
 8003046:	2100      	movs	r1, #0
 8003048:	4816      	ldr	r0, [pc, #88]	; (80030a4 <HAL_TIM_IC_CaptureCallback+0xec>)
 800304a:	f007 fda5 	bl	800ab98 <HAL_TIM_PWM_Stop>
			FlagTrayectoM3 = 1;
 800304e:	4916      	ldr	r1, [pc, #88]	; (80030a8 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8003056:	e9c1 2300 	strd	r2, r3, [r1]
}
 800305a:	e004      	b.n	8003066 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor3++;
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_TIM_IC_CaptureCallback+0xe4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8003064:	6013      	str	r3, [r2, #0]
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	240003a4 	.word	0x240003a4
 8003074:	240003b0 	.word	0x240003b0
 8003078:	24000704 	.word	0x24000704
 800307c:	240004d8 	.word	0x240004d8
 8003080:	3ff00000 	.word	0x3ff00000
 8003084:	40000400 	.word	0x40000400
 8003088:	240003a8 	.word	0x240003a8
 800308c:	240003b4 	.word	0x240003b4
 8003090:	24000750 	.word	0x24000750
 8003094:	240004e0 	.word	0x240004e0
 8003098:	40000800 	.word	0x40000800
 800309c:	240003ac 	.word	0x240003ac
 80030a0:	240003b8 	.word	0x240003b8
 80030a4:	2400079c 	.word	0x2400079c
 80030a8:	24000008 	.word	0x24000008
 80030ac:	00000000 	.word	0x00000000

080030b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	if (htim == &htim15) {  //Timer que actualiza curva de velocidad
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a91      	ldr	r2, [pc, #580]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	f040 8110 	bne.w	80032e2 <HAL_TIM_PeriodElapsedCallback+0x232>
		if (FlagTrayectoM1 == 1 && FlagTrayectoM2 == 1 && FlagTrayectoM3 == 1) {
 80030c2:	4b90      	ldr	r3, [pc, #576]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80030c4:	ed93 7b00 	vldr	d7, [r3]
 80030c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80030cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80030d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d4:	d133      	bne.n	800313e <HAL_TIM_PeriodElapsedCallback+0x8e>
 80030d6:	4b8c      	ldr	r3, [pc, #560]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80030d8:	ed93 7b00 	vldr	d7, [r3]
 80030dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80030e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80030e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e8:	d129      	bne.n	800313e <HAL_TIM_PeriodElapsedCallback+0x8e>
 80030ea:	4b88      	ldr	r3, [pc, #544]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80030ec:	ed93 7b00 	vldr	d7, [r3]
 80030f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80030f4:	eeb4 7b46 	vcmp.f64	d7, d6
 80030f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fc:	d11f      	bne.n	800313e <HAL_TIM_PeriodElapsedCallback+0x8e>
			HAL_TIM_Base_Stop_IT(&htim15);
 80030fe:	4880      	ldr	r0, [pc, #512]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003100:	f007 fbac 	bl	800a85c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 8003104:	4882      	ldr	r0, [pc, #520]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003106:	f007 fb09 	bl	800a71c <HAL_TIM_Base_Stop>
			Pini.x = Pfin.x;
 800310a:	4b82      	ldr	r3, [pc, #520]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	4981      	ldr	r1, [pc, #516]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003112:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y = Pfin.y;
 8003116:	4b7f      	ldr	r3, [pc, #508]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003118:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800311c:	497e      	ldr	r1, [pc, #504]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800311e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z = Pfin.z;
 8003122:	4b7c      	ldr	r3, [pc, #496]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003124:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003128:	497b      	ldr	r1, [pc, #492]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800312a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			mandalemecha = 0;
 800312e:	497b      	ldr	r1, [pc, #492]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
			}
		}
	}
}
 800313c:	e0d1      	b.n	80032e2 <HAL_TIM_PeriodElapsedCallback+0x232>
			if (!FlagTiempo) {
 800313e:	4b78      	ldr	r3, [pc, #480]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d105      	bne.n	8003152 <HAL_TIM_PeriodElapsedCallback+0xa2>
				FlagTiempo = 1;
 8003146:	4b76      	ldr	r3, [pc, #472]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
				TIM5->CNT = 0;	// comienzo a contabilizar el tiempo recien acá
 800314c:	4b75      	ldr	r3, [pc, #468]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800314e:	2200      	movs	r2, #0
 8003150:	625a      	str	r2, [r3, #36]	; 0x24
			Tiempo = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / 64000000.0));
 8003152:	4b74      	ldr	r3, [pc, #464]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800315e:	4b71      	ldr	r3, [pc, #452]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	3301      	adds	r3, #1
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800316c:	ed9f 4b60 	vldr	d4, [pc, #384]	; 80032f0 <HAL_TIM_PeriodElapsedCallback+0x240>
 8003170:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8003174:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003178:	4b6b      	ldr	r3, [pc, #428]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800317a:	ed83 7b00 	vstr	d7, [r3]
			obtenerVelCurva(Tiempo);
 800317e:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003180:	ed93 7b00 	vldr	d7, [r3]
 8003184:	eeb0 0b47 	vmov.f64	d0, d7
 8003188:	f002 f9c0 	bl	800550c <obtenerVelCurva>
			Recta3D[0] = Pini.x + X * vDirector[0];
 800318c:	4b62      	ldr	r3, [pc, #392]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800318e:	ed93 6b00 	vldr	d6, [r3]
 8003192:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800319c:	4b64      	ldr	r3, [pc, #400]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800319e:	ed93 7b00 	vldr	d7, [r3]
 80031a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80031a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031aa:	4b62      	ldr	r3, [pc, #392]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80031ac:	ed83 7b00 	vstr	d7, [r3]
			Recta3D[1] = Pini.y + X * vDirector[1];
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80031b2:	ed93 6b02 	vldr	d6, [r3, #8]
 80031b6:	4b5d      	ldr	r3, [pc, #372]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80031b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80031bc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80031c0:	4b5b      	ldr	r3, [pc, #364]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80031c2:	ed93 7b00 	vldr	d7, [r3]
 80031c6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80031ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031ce:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80031d0:	ed83 7b02 	vstr	d7, [r3, #8]
			Recta3D[2] = Pini.z + X * vDirector[2];
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80031d6:	ed93 6b04 	vldr	d6, [r3, #16]
 80031da:	4b54      	ldr	r3, [pc, #336]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80031dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80031e0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80031e4:	4b52      	ldr	r3, [pc, #328]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80031e6:	ed93 7b00 	vldr	d7, [r3]
 80031ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80031ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031f2:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80031f4:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3D[0] = 0 + DX * vDirector[0];
 80031f8:	4b4c      	ldr	r3, [pc, #304]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003202:	4b4d      	ldr	r3, [pc, #308]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003204:	ed93 7b00 	vldr	d7, [r3]
 8003208:	ee26 7b07 	vmul.f64	d7, d6, d7
 800320c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80032f8 <HAL_TIM_PeriodElapsedCallback+0x248>
 8003210:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003214:	4b49      	ldr	r3, [pc, #292]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003216:	ed83 7b00 	vstr	d7, [r3]
			dRecta3D[1] = 0 + DX * vDirector[1];
 800321a:	4b44      	ldr	r3, [pc, #272]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800321c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003220:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003224:	4b44      	ldr	r3, [pc, #272]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003226:	ed93 7b00 	vldr	d7, [r3]
 800322a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800322e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80032f8 <HAL_TIM_PeriodElapsedCallback+0x248>
 8003232:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003236:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003238:	ed83 7b02 	vstr	d7, [r3, #8]
			dRecta3D[2] = 0 + DX * vDirector[2];
 800323c:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800323e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003242:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003246:	4b3c      	ldr	r3, [pc, #240]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003248:	ed93 7b00 	vldr	d7, [r3]
 800324c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003250:	ed9f 6b29 	vldr	d6, [pc, #164]	; 80032f8 <HAL_TIM_PeriodElapsedCallback+0x248>
 8003254:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003258:	4b38      	ldr	r3, [pc, #224]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800325a:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3DZ=dRecta3D[2];
 800325e:	4b37      	ldr	r3, [pc, #220]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003260:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003264:	4936      	ldr	r1, [pc, #216]	; (8003340 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003266:	e9c1 2300 	strd	r2, r3, [r1]
			jacobianoInverso(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
 800326a:	4b34      	ldr	r3, [pc, #208]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800326c:	ed93 7b00 	vldr	d7, [r3]
 8003270:	4b32      	ldr	r3, [pc, #200]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003272:	ed93 6b02 	vldr	d6, [r3, #8]
 8003276:	4b31      	ldr	r3, [pc, #196]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003278:	ed93 2b04 	vldr	d2, [r3, #16]
 800327c:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800327e:	ed93 3b00 	vldr	d3, [r3]
 8003282:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003284:	ed93 4b02 	vldr	d4, [r3, #8]
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800328a:	ed93 5b04 	vldr	d5, [r3, #16]
 800328e:	eeb0 1b46 	vmov.f64	d1, d6
 8003292:	eeb0 0b47 	vmov.f64	d0, d7
 8003296:	f002 fccf 	bl	8005c38 <jacobianoInverso>
			SetPerfilTimers(omega[0], omega[1], omega[2]);
 800329a:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800329c:	ed93 7b00 	vldr	d7, [r3]
 80032a0:	4b28      	ldr	r3, [pc, #160]	; (8003344 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80032a2:	ed93 6b02 	vldr	d6, [r3, #8]
 80032a6:	4b27      	ldr	r3, [pc, #156]	; (8003344 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80032a8:	ed93 5b04 	vldr	d5, [r3, #16]
 80032ac:	eeb0 2b45 	vmov.f64	d2, d5
 80032b0:	eeb0 1b46 	vmov.f64	d1, d6
 80032b4:	eeb0 0b47 	vmov.f64	d0, d7
 80032b8:	f002 ffe6 	bl	8006288 <SetPerfilTimers>
			if(Start==1){
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10e      	bne.n	80032e2 <HAL_TIM_PeriodElapsedCallback+0x232>
				Start=0;
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);	// Activar generacion de pwm
 80032ca:	2100      	movs	r1, #0
 80032cc:	481f      	ldr	r0, [pc, #124]	; (800334c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80032ce:	f007 fb55 	bl	800a97c <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
 80032d2:	2100      	movs	r1, #0
 80032d4:	481e      	ldr	r0, [pc, #120]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80032d6:	f007 fb51 	bl	800a97c <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
 80032da:	2100      	movs	r1, #0
 80032dc:	481d      	ldr	r0, [pc, #116]	; (8003354 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80032de:	f007 fb4d 	bl	800a97c <HAL_TIM_PWM_Start>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	f3af 8000 	nop.w
 80032f0:	00000000 	.word	0x00000000
 80032f4:	418e8480 	.word	0x418e8480
	...
 8003300:	240007e8 	.word	0x240007e8
 8003304:	240004d8 	.word	0x240004d8
 8003308:	240004e0 	.word	0x240004e0
 800330c:	24000008 	.word	0x24000008
 8003310:	240006b8 	.word	0x240006b8
 8003314:	24000418 	.word	0x24000418
 8003318:	24000400 	.word	0x24000400
 800331c:	24000578 	.word	0x24000578
 8003320:	240004b4 	.word	0x240004b4
 8003324:	40000c00 	.word	0x40000c00
 8003328:	240004b8 	.word	0x240004b8
 800332c:	24000434 	.word	0x24000434
 8003330:	240004c0 	.word	0x240004c0
 8003334:	24000440 	.word	0x24000440
 8003338:	240004c8 	.word	0x240004c8
 800333c:	24000458 	.word	0x24000458
 8003340:	24000580 	.word	0x24000580
 8003344:	24000470 	.word	0x24000470
 8003348:	24000570 	.word	0x24000570
 800334c:	24000704 	.word	0x24000704
 8003350:	24000750 	.word	0x24000750
 8003354:	2400079c 	.word	0x2400079c

08003358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <configStepMotor1>:
double remanente3;
double Periodo;		//periodo de timer PWM
//double ErrorPeriodo;
//double ErrorAcumuladoPeriodo[3];

void configStepMotor1(double angulo) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor1 = 0;
 8003372:	4b53      	ldr	r3, [pc, #332]	; (80034c0 <configStepMotor1+0x158>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual1) {
 8003378:	4b52      	ldr	r3, [pc, #328]	; (80034c4 <configStepMotor1+0x15c>)
 800337a:	ed93 7b00 	vldr	d7, [r3]
 800337e:	ed97 6b00 	vldr	d6, [r7]
 8003382:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	db22      	blt.n	80033d2 <configStepMotor1+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Inf_GPIO_Port, E_EndStop1_Inf_Pin))){
 800338c:	2102      	movs	r1, #2
 800338e:	484e      	ldr	r0, [pc, #312]	; (80034c8 <configStepMotor1+0x160>)
 8003390:	f004 fd54 	bl	8007e3c <HAL_GPIO_ReadPin>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <configStepMotor1+0x40>
			flagErrorEndStop = 1;
 800339a:	494c      	ldr	r1, [pc, #304]	; (80034cc <configStepMotor1+0x164>)
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	4b4b      	ldr	r3, [pc, #300]	; (80034d0 <configStepMotor1+0x168>)
 80033a2:	e9c1 2300 	strd	r2, r3, [r1]
 80033a6:	e036      	b.n	8003416 <configStepMotor1+0xae>
		} else {
			anguloDif = angulo - anguloActual1;	//Calculo cuantos grados se tiene que mover.
 80033a8:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <configStepMotor1+0x15c>)
 80033aa:	ed93 7b00 	vldr	d7, [r3]
 80033ae:	ed97 6b00 	vldr	d6, [r7]
 80033b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80033b6:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 80033ba:	4942      	ldr	r1, [pc, #264]	; (80034c4 <configStepMotor1+0x15c>)
 80033bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033c0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET); //Antihorario visto de frente
 80033c4:	2201      	movs	r2, #1
 80033c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ca:	4842      	ldr	r0, [pc, #264]	; (80034d4 <configStepMotor1+0x16c>)
 80033cc:	f004 fd4e 	bl	8007e6c <HAL_GPIO_WritePin>
 80033d0:	e021      	b.n	8003416 <configStepMotor1+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 80033d2:	2101      	movs	r1, #1
 80033d4:	483c      	ldr	r0, [pc, #240]	; (80034c8 <configStepMotor1+0x160>)
 80033d6:	f004 fd31 	bl	8007e3c <HAL_GPIO_ReadPin>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d106      	bne.n	80033ee <configStepMotor1+0x86>
			flagErrorEndStop = 1;
 80033e0:	493a      	ldr	r1, [pc, #232]	; (80034cc <configStepMotor1+0x164>)
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <configStepMotor1+0x168>)
 80033e8:	e9c1 2300 	strd	r2, r3, [r1]
 80033ec:	e013      	b.n	8003416 <configStepMotor1+0xae>
		} else {
			anguloDif = anguloActual1 - angulo;	//Calculo cuantos grados se tiene que mover.
 80033ee:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <configStepMotor1+0x15c>)
 80033f0:	ed93 6b00 	vldr	d6, [r3]
 80033f4:	ed97 7b00 	vldr	d7, [r7]
 80033f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80033fc:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8003400:	4930      	ldr	r1, [pc, #192]	; (80034c4 <configStepMotor1+0x15c>)
 8003402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003406:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET); // Horario visto de frente
 800340a:	2200      	movs	r2, #0
 800340c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003410:	4830      	ldr	r0, [pc, #192]	; (80034d4 <configStepMotor1+0x16c>)
 8003412:	f004 fd2b 	bl	8007e6c <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep1 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 8003416:	ed97 7b02 	vldr	d7, [r7, #8]
 800341a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80034b0 <configStepMotor1+0x148>
 800341e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003422:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8003426:	ee27 6b06 	vmul.f64	d6, d7, d6
 800342a:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80034b8 <configStepMotor1+0x150>
 800342e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003432:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <configStepMotor1+0x170>)
 8003434:	ed83 7b00 	vstr	d7, [r3]
	numStep1 = (uint32_t) calculoStep1;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003438:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <configStepMotor1+0x170>)
 800343a:	ed93 7b00 	vldr	d7, [r3]
 800343e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003442:	ee17 2a90 	vmov	r2, s15
 8003446:	4b25      	ldr	r3, [pc, #148]	; (80034dc <configStepMotor1+0x174>)
 8003448:	601a      	str	r2, [r3, #0]
	remanente1 = remanente1 + (calculoStep1 - numStep1);// que el error no se amplifique.
 800344a:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <configStepMotor1+0x170>)
 800344c:	ed93 6b00 	vldr	d6, [r3]
 8003450:	4b22      	ldr	r3, [pc, #136]	; (80034dc <configStepMotor1+0x174>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	ee07 3a90 	vmov	s15, r3
 8003458:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800345c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003460:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <configStepMotor1+0x178>)
 8003462:	ed93 7b00 	vldr	d7, [r3]
 8003466:	ee36 7b07 	vadd.f64	d7, d6, d7
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <configStepMotor1+0x178>)
 800346c:	ed83 7b00 	vstr	d7, [r3]
	if (remanente1 >= 1) {
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <configStepMotor1+0x178>)
 8003472:	ed93 7b00 	vldr	d7, [r3]
 8003476:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800347a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003482:	da00      	bge.n	8003486 <configStepMotor1+0x11e>
		remanente1 = remanente1 - 1;
		numStep1 = numStep1 + 1;
	}
}
 8003484:	e00e      	b.n	80034a4 <configStepMotor1+0x13c>
		remanente1 = remanente1 - 1;
 8003486:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <configStepMotor1+0x178>)
 8003488:	ed93 7b00 	vldr	d7, [r3]
 800348c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003490:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003494:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <configStepMotor1+0x178>)
 8003496:	ed83 7b00 	vstr	d7, [r3]
		numStep1 = numStep1 + 1;
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <configStepMotor1+0x174>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3301      	adds	r3, #1
 80034a0:	4a0e      	ldr	r2, [pc, #56]	; (80034dc <configStepMotor1+0x174>)
 80034a2:	6013      	str	r3, [r2, #0]
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	f3af 8000 	nop.w
 80034b0:	00000000 	.word	0x00000000
 80034b4:	40990000 	.word	0x40990000
 80034b8:	00000000 	.word	0x00000000
 80034bc:	40768000 	.word	0x40768000
 80034c0:	240003a4 	.word	0x240003a4
 80034c4:	24000588 	.word	0x24000588
 80034c8:	58021000 	.word	0x58021000
 80034cc:	24000520 	.word	0x24000520
 80034d0:	3ff00000 	.word	0x3ff00000
 80034d4:	58020800 	.word	0x58020800
 80034d8:	240005a0 	.word	0x240005a0
 80034dc:	240003b0 	.word	0x240003b0
 80034e0:	240005b8 	.word	0x240005b8
 80034e4:	00000000 	.word	0x00000000

080034e8 <configStepMotor2>:

void configStepMotor2(double angulo) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor2 = 0;
 80034f2:	4b53      	ldr	r3, [pc, #332]	; (8003640 <configStepMotor2+0x158>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual2) {
 80034f8:	4b52      	ldr	r3, [pc, #328]	; (8003644 <configStepMotor2+0x15c>)
 80034fa:	ed93 7b00 	vldr	d7, [r3]
 80034fe:	ed97 6b00 	vldr	d6, [r7]
 8003502:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350a:	db22      	blt.n	8003552 <configStepMotor2+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Inf_GPIO_Port, E_EndStop2_Inf_Pin))){
 800350c:	2108      	movs	r1, #8
 800350e:	484e      	ldr	r0, [pc, #312]	; (8003648 <configStepMotor2+0x160>)
 8003510:	f004 fc94 	bl	8007e3c <HAL_GPIO_ReadPin>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <configStepMotor2+0x40>
			flagErrorEndStop = 1;
 800351a:	494c      	ldr	r1, [pc, #304]	; (800364c <configStepMotor2+0x164>)
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <configStepMotor2+0x168>)
 8003522:	e9c1 2300 	strd	r2, r3, [r1]
 8003526:	e036      	b.n	8003596 <configStepMotor2+0xae>
		} else {
			anguloDif = angulo - anguloActual2;	//Calculo cuantos grados se tiene que mover.
 8003528:	4b46      	ldr	r3, [pc, #280]	; (8003644 <configStepMotor2+0x15c>)
 800352a:	ed93 7b00 	vldr	d7, [r3]
 800352e:	ed97 6b00 	vldr	d6, [r7]
 8003532:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003536:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 800353a:	4942      	ldr	r1, [pc, #264]	; (8003644 <configStepMotor2+0x15c>)
 800353c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003540:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET); // VERIFICAR SENTIDO DE GIRO
 8003544:	2201      	movs	r2, #1
 8003546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800354a:	4842      	ldr	r0, [pc, #264]	; (8003654 <configStepMotor2+0x16c>)
 800354c:	f004 fc8e 	bl	8007e6c <HAL_GPIO_WritePin>
 8003550:	e021      	b.n	8003596 <configStepMotor2+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 8003552:	2104      	movs	r1, #4
 8003554:	483c      	ldr	r0, [pc, #240]	; (8003648 <configStepMotor2+0x160>)
 8003556:	f004 fc71 	bl	8007e3c <HAL_GPIO_ReadPin>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <configStepMotor2+0x86>
			flagErrorEndStop = 1;
 8003560:	493a      	ldr	r1, [pc, #232]	; (800364c <configStepMotor2+0x164>)
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	4b3a      	ldr	r3, [pc, #232]	; (8003650 <configStepMotor2+0x168>)
 8003568:	e9c1 2300 	strd	r2, r3, [r1]
 800356c:	e013      	b.n	8003596 <configStepMotor2+0xae>
		} else {
			anguloDif = anguloActual2 - angulo;	//Calculo cuantos grados se tiene que mover.
 800356e:	4b35      	ldr	r3, [pc, #212]	; (8003644 <configStepMotor2+0x15c>)
 8003570:	ed93 6b00 	vldr	d6, [r3]
 8003574:	ed97 7b00 	vldr	d7, [r7]
 8003578:	ee36 7b47 	vsub.f64	d7, d6, d7
 800357c:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 8003580:	4930      	ldr	r1, [pc, #192]	; (8003644 <configStepMotor2+0x15c>)
 8003582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003586:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET); // VERIFICAR SENTIDO DE GIRO
 800358a:	2200      	movs	r2, #0
 800358c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003590:	4830      	ldr	r0, [pc, #192]	; (8003654 <configStepMotor2+0x16c>)
 8003592:	f004 fc6b 	bl	8007e6c <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep2 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 8003596:	ed97 7b02 	vldr	d7, [r7, #8]
 800359a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003630 <configStepMotor2+0x148>
 800359e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035a2:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80035a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80035aa:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003638 <configStepMotor2+0x150>
 80035ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035b2:	4b29      	ldr	r3, [pc, #164]	; (8003658 <configStepMotor2+0x170>)
 80035b4:	ed83 7b00 	vstr	d7, [r3]
	numStep2 = (uint32_t) calculoStep2;	// cuando pasa la unidad lo sumo al numero de pasos para
 80035b8:	4b27      	ldr	r3, [pc, #156]	; (8003658 <configStepMotor2+0x170>)
 80035ba:	ed93 7b00 	vldr	d7, [r3]
 80035be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035c2:	ee17 2a90 	vmov	r2, s15
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <configStepMotor2+0x174>)
 80035c8:	601a      	str	r2, [r3, #0]
	remanente2 = remanente2 + (calculoStep2 - numStep2);// que el error no se amplifique.
 80035ca:	4b23      	ldr	r3, [pc, #140]	; (8003658 <configStepMotor2+0x170>)
 80035cc:	ed93 6b00 	vldr	d6, [r3]
 80035d0:	4b22      	ldr	r3, [pc, #136]	; (800365c <configStepMotor2+0x174>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80035dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80035e0:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <configStepMotor2+0x178>)
 80035e2:	ed93 7b00 	vldr	d7, [r3]
 80035e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80035ea:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <configStepMotor2+0x178>)
 80035ec:	ed83 7b00 	vstr	d7, [r3]
	if (remanente2 >= 1) {
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <configStepMotor2+0x178>)
 80035f2:	ed93 7b00 	vldr	d7, [r3]
 80035f6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80035fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80035fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003602:	da00      	bge.n	8003606 <configStepMotor2+0x11e>
		remanente2 = remanente2 - 1;
		numStep2 = numStep2 + 1;
	}
}
 8003604:	e00e      	b.n	8003624 <configStepMotor2+0x13c>
		remanente2 = remanente2 - 1;
 8003606:	4b16      	ldr	r3, [pc, #88]	; (8003660 <configStepMotor2+0x178>)
 8003608:	ed93 7b00 	vldr	d7, [r3]
 800360c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003610:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003614:	4b12      	ldr	r3, [pc, #72]	; (8003660 <configStepMotor2+0x178>)
 8003616:	ed83 7b00 	vstr	d7, [r3]
		numStep2 = numStep2 + 1;
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <configStepMotor2+0x174>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	4a0e      	ldr	r2, [pc, #56]	; (800365c <configStepMotor2+0x174>)
 8003622:	6013      	str	r3, [r2, #0]
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	f3af 8000 	nop.w
 8003630:	00000000 	.word	0x00000000
 8003634:	40990000 	.word	0x40990000
 8003638:	00000000 	.word	0x00000000
 800363c:	40768000 	.word	0x40768000
 8003640:	240003a8 	.word	0x240003a8
 8003644:	24000590 	.word	0x24000590
 8003648:	58021000 	.word	0x58021000
 800364c:	24000520 	.word	0x24000520
 8003650:	3ff00000 	.word	0x3ff00000
 8003654:	58020800 	.word	0x58020800
 8003658:	240005a8 	.word	0x240005a8
 800365c:	240003b4 	.word	0x240003b4
 8003660:	240005c0 	.word	0x240005c0
 8003664:	00000000 	.word	0x00000000

08003668 <configStepMotor3>:

void configStepMotor3(double angulo) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor3 = 0;
 8003672:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <configStepMotor3+0x158>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual3) {
 8003678:	4b52      	ldr	r3, [pc, #328]	; (80037c4 <configStepMotor3+0x15c>)
 800367a:	ed93 7b00 	vldr	d7, [r3]
 800367e:	ed97 6b00 	vldr	d6, [r7]
 8003682:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368a:	db22      	blt.n	80036d2 <configStepMotor3+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 800368c:	2120      	movs	r1, #32
 800368e:	484e      	ldr	r0, [pc, #312]	; (80037c8 <configStepMotor3+0x160>)
 8003690:	f004 fbd4 	bl	8007e3c <HAL_GPIO_ReadPin>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <configStepMotor3+0x40>
			flagErrorEndStop = 1;
 800369a:	494c      	ldr	r1, [pc, #304]	; (80037cc <configStepMotor3+0x164>)
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	4b4b      	ldr	r3, [pc, #300]	; (80037d0 <configStepMotor3+0x168>)
 80036a2:	e9c1 2300 	strd	r2, r3, [r1]
 80036a6:	e036      	b.n	8003716 <configStepMotor3+0xae>
		} else {
			anguloDif = angulo - anguloActual3;	//Calculo cuantos grados se tiene que mover.
 80036a8:	4b46      	ldr	r3, [pc, #280]	; (80037c4 <configStepMotor3+0x15c>)
 80036aa:	ed93 7b00 	vldr	d7, [r3]
 80036ae:	ed97 6b00 	vldr	d6, [r7]
 80036b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80036b6:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 80036ba:	4942      	ldr	r1, [pc, #264]	; (80037c4 <configStepMotor3+0x15c>)
 80036bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036c0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET); // Brazo Baja (Antihorario)
 80036c4:	2201      	movs	r2, #1
 80036c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036ca:	4842      	ldr	r0, [pc, #264]	; (80037d4 <configStepMotor3+0x16c>)
 80036cc:	f004 fbce 	bl	8007e6c <HAL_GPIO_WritePin>
 80036d0:	e021      	b.n	8003716 <configStepMotor3+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 80036d2:	2120      	movs	r1, #32
 80036d4:	483c      	ldr	r0, [pc, #240]	; (80037c8 <configStepMotor3+0x160>)
 80036d6:	f004 fbb1 	bl	8007e3c <HAL_GPIO_ReadPin>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <configStepMotor3+0x86>
					flagErrorEndStop = 1;
 80036e0:	493a      	ldr	r1, [pc, #232]	; (80037cc <configStepMotor3+0x164>)
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <configStepMotor3+0x168>)
 80036e8:	e9c1 2300 	strd	r2, r3, [r1]
 80036ec:	e013      	b.n	8003716 <configStepMotor3+0xae>
		} else {
			anguloDif = anguloActual3 - angulo;	//Calculo cuantos grados se tiene que mover.
 80036ee:	4b35      	ldr	r3, [pc, #212]	; (80037c4 <configStepMotor3+0x15c>)
 80036f0:	ed93 6b00 	vldr	d6, [r3]
 80036f4:	ed97 7b00 	vldr	d7, [r7]
 80036f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80036fc:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8003700:	4930      	ldr	r1, [pc, #192]	; (80037c4 <configStepMotor3+0x15c>)
 8003702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003706:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET); // Brazo Sube (Horario)
 800370a:	2200      	movs	r2, #0
 800370c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003710:	4830      	ldr	r0, [pc, #192]	; (80037d4 <configStepMotor3+0x16c>)
 8003712:	f004 fbab 	bl	8007e6c <HAL_GPIO_WritePin>
		}
	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep3 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 8003716:	ed97 7b02 	vldr	d7, [r7, #8]
 800371a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80037b0 <configStepMotor3+0x148>
 800371e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003722:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8003726:	ee27 6b06 	vmul.f64	d6, d7, d6
 800372a:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80037b8 <configStepMotor3+0x150>
 800372e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003732:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <configStepMotor3+0x170>)
 8003734:	ed83 7b00 	vstr	d7, [r3]
	numStep3 = (uint32_t) calculoStep3;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003738:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <configStepMotor3+0x170>)
 800373a:	ed93 7b00 	vldr	d7, [r3]
 800373e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003742:	ee17 2a90 	vmov	r2, s15
 8003746:	4b25      	ldr	r3, [pc, #148]	; (80037dc <configStepMotor3+0x174>)
 8003748:	601a      	str	r2, [r3, #0]
	remanente3 = remanente3 + (calculoStep3 - numStep3);// que el error no se amplifique.
 800374a:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <configStepMotor3+0x170>)
 800374c:	ed93 6b00 	vldr	d6, [r3]
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <configStepMotor3+0x174>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800375c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003760:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <configStepMotor3+0x178>)
 8003762:	ed93 7b00 	vldr	d7, [r3]
 8003766:	ee36 7b07 	vadd.f64	d7, d6, d7
 800376a:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <configStepMotor3+0x178>)
 800376c:	ed83 7b00 	vstr	d7, [r3]
	if (remanente3 >= 1) {
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <configStepMotor3+0x178>)
 8003772:	ed93 7b00 	vldr	d7, [r3]
 8003776:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800377a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	da00      	bge.n	8003786 <configStepMotor3+0x11e>
		remanente3 = remanente3 - 1;
		numStep3 = numStep3 + 1;
	}
}
 8003784:	e00e      	b.n	80037a4 <configStepMotor3+0x13c>
		remanente3 = remanente3 - 1;
 8003786:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <configStepMotor3+0x178>)
 8003788:	ed93 7b00 	vldr	d7, [r3]
 800378c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003790:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <configStepMotor3+0x178>)
 8003796:	ed83 7b00 	vstr	d7, [r3]
		numStep3 = numStep3 + 1;
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <configStepMotor3+0x174>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	4a0e      	ldr	r2, [pc, #56]	; (80037dc <configStepMotor3+0x174>)
 80037a2:	6013      	str	r3, [r2, #0]
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	f3af 8000 	nop.w
 80037b0:	00000000 	.word	0x00000000
 80037b4:	40990000 	.word	0x40990000
 80037b8:	00000000 	.word	0x00000000
 80037bc:	40768000 	.word	0x40768000
 80037c0:	240003ac 	.word	0x240003ac
 80037c4:	24000598 	.word	0x24000598
 80037c8:	58021000 	.word	0x58021000
 80037cc:	24000520 	.word	0x24000520
 80037d0:	3ff00000 	.word	0x3ff00000
 80037d4:	58020800 	.word	0x58020800
 80037d8:	240005b0 	.word	0x240005b0
 80037dc:	240003b8 	.word	0x240003b8
 80037e0:	240005c8 	.word	0x240005c8

080037e4 <transpuesta>:
 *      Author: EliasC
 */

#include <operaciones.h>

array2D transpuesta(double Maux[3][3]) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b096      	sub	sp, #88	; 0x58
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
	array2D MTaux;
	for (int i = 0; i < 3; ++i) {
 80037ee:	2300      	movs	r3, #0
 80037f0:	657b      	str	r3, [r7, #84]	; 0x54
 80037f2:	e024      	b.n	800383e <transpuesta+0x5a>
		for (int j = 0; j < 3; ++j) {
 80037f4:	2300      	movs	r3, #0
 80037f6:	653b      	str	r3, [r7, #80]	; 0x50
 80037f8:	e01b      	b.n	8003832 <transpuesta+0x4e>
			MTaux.m[j][i] = Maux[i][j];	//transpuesta de la matriz l2 JP=[l21';l22';l23'];
 80037fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	461a      	mov	r2, r3
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	441a      	add	r2, r3
 800380a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003814:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800381e:	4413      	add	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	3358      	adds	r3, #88	; 0x58
 8003824:	443b      	add	r3, r7
 8003826:	3b50      	subs	r3, #80	; 0x50
 8003828:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < 3; ++j) {
 800382c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382e:	3301      	adds	r3, #1
 8003830:	653b      	str	r3, [r7, #80]	; 0x50
 8003832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003834:	2b02      	cmp	r3, #2
 8003836:	dde0      	ble.n	80037fa <transpuesta+0x16>
	for (int i = 0; i < 3; ++i) {
 8003838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800383a:	3301      	adds	r3, #1
 800383c:	657b      	str	r3, [r7, #84]	; 0x54
 800383e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003840:	2b02      	cmp	r3, #2
 8003842:	ddd7      	ble.n	80037f4 <transpuesta+0x10>
		}
	}
	return MTaux;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4618      	mov	r0, r3
 8003848:	f107 0308 	add.w	r3, r7, #8
 800384c:	2248      	movs	r2, #72	; 0x48
 800384e:	4619      	mov	r1, r3
 8003850:	f00b fa20 	bl	800ec94 <memcpy>
}
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	3758      	adds	r7, #88	; 0x58
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <productDot>:

double productDot(double VectA[], double VectB[]) {
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
	double dotaux = 0;
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e016      	b.n	80038a6 <productDot+0x4a>
		dotaux = dotaux + VectA[i] * VectB[i];
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	ed93 6b00 	vldr	d6, [r3]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	4413      	add	r3, r2
 800388c:	ed93 7b00 	vldr	d7, [r3]
 8003890:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003894:	ed97 6b04 	vldr	d6, [r7, #16]
 8003898:	ee36 7b07 	vadd.f64	d7, d6, d7
 800389c:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	dde5      	ble.n	8003878 <productDot+0x1c>
	}
	return dotaux;
 80038ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80038b4:	eeb0 0b47 	vmov.f64	d0, d7
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <determinante>:

double determinante(double Maux[3][3]) {
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
	double det;
	det = Maux[0][0] * Maux[1][1] * Maux[2][2]; // + Maux[0][1] * Maux[1][2] * Maux[2][0] + Maux[1][0] * Maux[2][1] * Maux[0][2] - Maux[2][0] * Maux[1][1] * Maux[0][2] - Maux[1][0] * Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[1][2] * Maux[0][0];
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	ed93 6b00 	vldr	d6, [r3]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3318      	adds	r3, #24
 80038d4:	ed93 7b02 	vldr	d7, [r3, #8]
 80038d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3330      	adds	r3, #48	; 0x30
 80038e0:	ed93 7b04 	vldr	d7, [r3, #16]
 80038e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80038e8:	ed87 7b02 	vstr	d7, [r7, #8]
	return det;
 80038ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80038f4:	eeb0 0b47 	vmov.f64	d0, d7
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <adjunta>:

array2D adjunta(double Maux[3][3]) {
 8003902:	b580      	push	{r7, lr}
 8003904:	b094      	sub	sp, #80	; 0x50
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
	array2D adj;
	adj.m[0][0] = Maux[1][1] * Maux[2][2] - Maux[2][1] * Maux[1][2];
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	3318      	adds	r3, #24
 8003910:	ed93 6b02 	vldr	d6, [r3, #8]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	3330      	adds	r3, #48	; 0x30
 8003918:	ed93 7b04 	vldr	d7, [r3, #16]
 800391c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	3330      	adds	r3, #48	; 0x30
 8003924:	ed93 5b02 	vldr	d5, [r3, #8]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	3318      	adds	r3, #24
 800392c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003930:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003934:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003938:	ed87 7b02 	vstr	d7, [r7, #8]
	adj.m[0][1] = Maux[1][0] * Maux[2][2] - Maux[2][0] * Maux[1][2];
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	3318      	adds	r3, #24
 8003940:	ed93 6b00 	vldr	d6, [r3]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	3330      	adds	r3, #48	; 0x30
 8003948:	ed93 7b04 	vldr	d7, [r3, #16]
 800394c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	3330      	adds	r3, #48	; 0x30
 8003954:	ed93 5b00 	vldr	d5, [r3]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	3318      	adds	r3, #24
 800395c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003960:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003964:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003968:	ed87 7b04 	vstr	d7, [r7, #16]
	adj.m[0][2] = Maux[1][0] * Maux[2][1] - Maux[2][0] * Maux[1][1];
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	3318      	adds	r3, #24
 8003970:	ed93 6b00 	vldr	d6, [r3]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	3330      	adds	r3, #48	; 0x30
 8003978:	ed93 7b02 	vldr	d7, [r3, #8]
 800397c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	3330      	adds	r3, #48	; 0x30
 8003984:	ed93 5b00 	vldr	d5, [r3]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	3318      	adds	r3, #24
 800398c:	ed93 7b02 	vldr	d7, [r3, #8]
 8003990:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003994:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003998:	ed87 7b06 	vstr	d7, [r7, #24]
	adj.m[1][0] = Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[0][2];
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	ed93 6b02 	vldr	d6, [r3, #8]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	3330      	adds	r3, #48	; 0x30
 80039a6:	ed93 7b04 	vldr	d7, [r3, #16]
 80039aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	3330      	adds	r3, #48	; 0x30
 80039b2:	ed93 5b02 	vldr	d5, [r3, #8]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	ed93 7b04 	vldr	d7, [r3, #16]
 80039bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039c4:	ed87 7b08 	vstr	d7, [r7, #32]
	adj.m[1][1] = Maux[0][0] * Maux[2][2] - Maux[2][0] * Maux[0][2];
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	ed93 6b00 	vldr	d6, [r3]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	3330      	adds	r3, #48	; 0x30
 80039d2:	ed93 7b04 	vldr	d7, [r3, #16]
 80039d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	3330      	adds	r3, #48	; 0x30
 80039de:	ed93 5b00 	vldr	d5, [r3]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	ed93 7b04 	vldr	d7, [r3, #16]
 80039e8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039f0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	adj.m[1][2] = Maux[0][0] * Maux[2][1] - Maux[2][0] * Maux[0][1];
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	ed93 6b00 	vldr	d6, [r3]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	3330      	adds	r3, #48	; 0x30
 80039fe:	ed93 7b02 	vldr	d7, [r3, #8]
 8003a02:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	3330      	adds	r3, #48	; 0x30
 8003a0a:	ed93 5b00 	vldr	d5, [r3]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	ed93 7b02 	vldr	d7, [r3, #8]
 8003a14:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a18:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003a1c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	adj.m[2][0] = Maux[0][1] * Maux[1][2] - Maux[1][1] * Maux[0][2];
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	ed93 6b02 	vldr	d6, [r3, #8]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	3318      	adds	r3, #24
 8003a2a:	ed93 7b04 	vldr	d7, [r3, #16]
 8003a2e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	3318      	adds	r3, #24
 8003a36:	ed93 5b02 	vldr	d5, [r3, #8]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003a40:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a44:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003a48:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	adj.m[2][1] = Maux[0][0] * Maux[1][2] - Maux[1][0] * Maux[0][2];
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	ed93 6b00 	vldr	d6, [r3]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	3318      	adds	r3, #24
 8003a56:	ed93 7b04 	vldr	d7, [r3, #16]
 8003a5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	3318      	adds	r3, #24
 8003a62:	ed93 5b00 	vldr	d5, [r3]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	ed93 7b04 	vldr	d7, [r3, #16]
 8003a6c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003a74:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	adj.m[2][2] = Maux[0][0] * Maux[1][1] - Maux[1][0] * Maux[0][1];
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	ed93 6b00 	vldr	d6, [r3]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	3318      	adds	r3, #24
 8003a82:	ed93 7b02 	vldr	d7, [r3, #8]
 8003a86:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	3318      	adds	r3, #24
 8003a8e:	ed93 5b00 	vldr	d5, [r3]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	ed93 7b02 	vldr	d7, [r3, #8]
 8003a98:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a9c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003aa0:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	return adj;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f107 0308 	add.w	r3, r7, #8
 8003aac:	2248      	movs	r2, #72	; 0x48
 8003aae:	4619      	mov	r1, r3
 8003ab0:	f00b f8f0 	bl	800ec94 <memcpy>
}
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	3750      	adds	r7, #80	; 0x50
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <inversa>:

array2D inversa(double A[3][3]) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b0bc      	sub	sp, #240	; 0xf0
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003ac4:	64b9      	str	r1, [r7, #72]	; 0x48
	array2D Minv;
	array2D Maux;
	double det;
	Maux = adjunta(A);
 8003ac6:	463b      	mov	r3, r7
 8003ac8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ff19 	bl	8003902 <adjunta>
 8003ad0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ad4:	4639      	mov	r1, r7
 8003ad6:	2248      	movs	r2, #72	; 0x48
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f00b f8db 	bl	800ec94 <memcpy>
	Maux = transpuesta(Maux.m);
 8003ade:	463b      	mov	r3, r7
 8003ae0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fe7c 	bl	80037e4 <transpuesta>
 8003aec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003af0:	4639      	mov	r1, r7
 8003af2:	2248      	movs	r2, #72	; 0x48
 8003af4:	4618      	mov	r0, r3
 8003af6:	f00b f8cd 	bl	800ec94 <memcpy>
	det = determinante(A);
 8003afa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003afc:	f7ff fee1 	bl	80038c2 <determinante>
 8003b00:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	for (int i = 0; i < 3; ++i) {
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b0a:	e035      	b.n	8003b78 <inversa+0xbc>
		for (int j = 0; j < 3; ++j) {
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b12:	e028      	b.n	8003b66 <inversa+0xaa>
			Minv.m[i][j] = (1 / det) * Maux.m[i][j];
 8003b14:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003b18:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8003b1c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003b20:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003b24:	4613      	mov	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4413      	add	r3, r2
 8003b2a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003b2e:	4413      	add	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	33f0      	adds	r3, #240	; 0xf0
 8003b34:	443b      	add	r3, r7
 8003b36:	3ba0      	subs	r3, #160	; 0xa0
 8003b38:	ed93 7b00 	vldr	d7, [r3]
 8003b3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003b40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	33f0      	adds	r3, #240	; 0xf0
 8003b54:	443b      	add	r3, r7
 8003b56:	3b58      	subs	r3, #88	; 0x58
 8003b58:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; ++j) {
 8003b5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b60:	3301      	adds	r3, #1
 8003b62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	ddd2      	ble.n	8003b14 <inversa+0x58>
	for (int i = 0; i < 3; ++i) {
 8003b6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b72:	3301      	adds	r3, #1
 8003b74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	ddc5      	ble.n	8003b0c <inversa+0x50>
		}
	}
	return Minv;
 8003b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b82:	4618      	mov	r0, r3
 8003b84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b88:	2248      	movs	r2, #72	; 0x48
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f00b f882 	bl	800ec94 <memcpy>
}
 8003b90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003b92:	37f0      	adds	r7, #240	; 0xf0
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <productMatriz>:

array2D productMatriz(double MatrizA[3][3], double MatrizB[3][3]) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b09c      	sub	sp, #112	; 0x70
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
	array2D producto;

	for (int k = 0; k < 3; ++k) {
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ba8:	e04b      	b.n	8003c42 <productMatriz+0xaa>
		for (int i = 0; i < 3; ++i) {
 8003baa:	2300      	movs	r3, #0
 8003bac:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bae:	e042      	b.n	8003c36 <productMatriz+0x9e>
			double suma = 0;
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc0:	e024      	b.n	8003c0c <productMatriz+0x74>
				suma += MatrizA[i][j] * MatrizB[j][k];
 8003bc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	441a      	add	r2, r3
 8003bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	ed93 6b00 	vldr	d6, [r3]
 8003bdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	461a      	mov	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	441a      	add	r2, r3
 8003bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	ed93 7b00 	vldr	d7, [r3]
 8003bf6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003bfa:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8003bfe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c02:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8003c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c08:	3301      	adds	r3, #1
 8003c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	ddd7      	ble.n	8003bc2 <productMatriz+0x2a>
			}
			producto.m[i][k] = suma;
 8003c12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	3370      	adds	r3, #112	; 0x70
 8003c22:	443b      	add	r3, r7
 8003c24:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8003c28:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003c2c:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8003c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c32:	3301      	adds	r3, #1
 8003c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	ddb9      	ble.n	8003bb0 <productMatriz+0x18>
	for (int k = 0; k < 3; ++k) {
 8003c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3e:	3301      	adds	r3, #1
 8003c40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	ddb0      	ble.n	8003baa <productMatriz+0x12>
		}
	}
	return producto;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f107 0310 	add.w	r3, r7, #16
 8003c50:	2248      	movs	r2, #72	; 0x48
 8003c52:	4619      	mov	r1, r3
 8003c54:	f00b f81e 	bl	800ec94 <memcpy>
}
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	3770      	adds	r7, #112	; 0x70
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_MspInit+0x44>)
 8003c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <HAL_MspInit+0x44>)
 8003c6e:	f043 0302 	orr.w	r3, r3, #2
 8003c72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_MspInit+0x44>)
 8003c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003c84:	2005      	movs	r0, #5
 8003c86:	f003 f977 	bl	8006f78 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	2051      	movs	r0, #81	; 0x51
 8003c90:	f003 f97d 	bl	8006f8e <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003c94:	2051      	movs	r0, #81	; 0x51
 8003c96:	f003 f994 	bl	8006fc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	58024400 	.word	0x58024400

08003ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cba:	e7fe      	b.n	8003cba <HardFault_Handler+0x4>

08003cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cc0:	e7fe      	b.n	8003cc0 <MemManage_Handler+0x4>

08003cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cc6:	e7fe      	b.n	8003cc6 <BusFault_Handler+0x4>

08003cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ccc:	e7fe      	b.n	8003ccc <UsageFault_Handler+0x4>

08003cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cfc:	f002 fff8 	bl	8006cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f004 f8c8 	bl	8007e9e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003d16:	2002      	movs	r0, #2
 8003d18:	f004 f8c1 	bl	8007e9e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003d1c:	bf00      	nop
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8003d24:	2004      	movs	r0, #4
 8003d26:	f004 f8ba 	bl	8007e9e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003d32:	2008      	movs	r0, #8
 8003d34:	f004 f8b3 	bl	8007e9e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003d38:	bf00      	nop
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003d40:	2010      	movs	r0, #16
 8003d42:	f004 f8ac 	bl	8007e9e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003d4e:	2020      	movs	r0, #32
 8003d50:	f004 f8a5 	bl	8007e9e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d5c:	4802      	ldr	r0, [pc, #8]	; (8003d68 <TIM2_IRQHandler+0x10>)
 8003d5e:	f007 fa21 	bl	800b1a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	240005d4 	.word	0x240005d4

08003d6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d70:	4802      	ldr	r0, [pc, #8]	; (8003d7c <TIM3_IRQHandler+0x10>)
 8003d72:	f007 fa17 	bl	800b1a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	24000620 	.word	0x24000620

08003d80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d84:	4802      	ldr	r0, [pc, #8]	; (8003d90 <TIM4_IRQHandler+0x10>)
 8003d86:	f007 fa0d 	bl	800b1a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2400066c 	.word	0x2400066c

08003d94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d98:	4802      	ldr	r0, [pc, #8]	; (8003da4 <USART3_IRQHandler+0x10>)
 8003d9a:	f008 fd2f 	bl	800c7fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	24000cf0 	.word	0x24000cf0

08003da8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003dac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003db0:	f004 f875 	bl	8007e9e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003db4:	bf00      	nop
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <TIM15_IRQHandler+0x10>)
 8003dce:	f007 f9e9 	bl	800b1a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	240007e8 	.word	0x240007e8

08003ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
	return 1;
 8003de0:	2301      	movs	r3, #1
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <_kill>:

int _kill(int pid, int sig)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003df6:	f00a ff23 	bl	800ec40 <__errno>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2216      	movs	r2, #22
 8003dfe:	601a      	str	r2, [r3, #0]
	return -1;
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_exit>:

void _exit (int status)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ffe7 	bl	8003dec <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e1e:	e7fe      	b.n	8003e1e <_exit+0x12>

08003e20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	e00a      	b.n	8003e48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e32:	f3af 8000 	nop.w
 8003e36:	4601      	mov	r1, r0
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	60ba      	str	r2, [r7, #8]
 8003e3e:	b2ca      	uxtb	r2, r1
 8003e40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	3301      	adds	r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	dbf0      	blt.n	8003e32 <_read+0x12>
	}

return len;
 8003e50:	687b      	ldr	r3, [r7, #4]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	e009      	b.n	8003e80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	60ba      	str	r2, [r7, #8]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	dbf1      	blt.n	8003e6c <_write+0x12>
	}
	return len;
 8003e88:	687b      	ldr	r3, [r7, #4]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <_close>:

int _close(int file)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
	return -1;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eba:	605a      	str	r2, [r3, #4]
	return 0;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <_isatty>:

int _isatty(int file)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
	return 1;
 8003ed2:	2301      	movs	r3, #1
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
	return 0;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003f04:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <_sbrk+0x50>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <_sbrk+0x16>
		heap_end = &end;
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <_sbrk+0x50>)
 8003f0e:	4a10      	ldr	r2, [pc, #64]	; (8003f50 <_sbrk+0x54>)
 8003f10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003f12:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <_sbrk+0x50>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <_sbrk+0x50>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4413      	add	r3, r2
 8003f20:	466a      	mov	r2, sp
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d907      	bls.n	8003f36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003f26:	f00a fe8b 	bl	800ec40 <__errno>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	220c      	movs	r2, #12
 8003f2e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003f30:	f04f 33ff 	mov.w	r3, #4294967295
 8003f34:	e006      	b.n	8003f44 <_sbrk+0x48>
	}

	heap_end += incr;
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <_sbrk+0x50>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4a03      	ldr	r2, [pc, #12]	; (8003f4c <_sbrk+0x50>)
 8003f40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	240005d0 	.word	0x240005d0
 8003f50:	24000d98 	.word	0x24000d98

08003f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f58:	4b29      	ldr	r3, [pc, #164]	; (8004000 <SystemInit+0xac>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	4a28      	ldr	r2, [pc, #160]	; (8004000 <SystemInit+0xac>)
 8003f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f68:	4b26      	ldr	r3, [pc, #152]	; (8004004 <SystemInit+0xb0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a25      	ldr	r2, [pc, #148]	; (8004004 <SystemInit+0xb0>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f74:	4b23      	ldr	r3, [pc, #140]	; (8004004 <SystemInit+0xb0>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <SystemInit+0xb0>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4921      	ldr	r1, [pc, #132]	; (8004004 <SystemInit+0xb0>)
 8003f80:	4b21      	ldr	r3, [pc, #132]	; (8004008 <SystemInit+0xb4>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f86:	4b1f      	ldr	r3, [pc, #124]	; (8004004 <SystemInit+0xb0>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <SystemInit+0xb0>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003f92:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <SystemInit+0xb0>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003f98:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <SystemInit+0xb0>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003f9e:	4b19      	ldr	r3, [pc, #100]	; (8004004 <SystemInit+0xb0>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003fa4:	4b17      	ldr	r3, [pc, #92]	; (8004004 <SystemInit+0xb0>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003faa:	4b16      	ldr	r3, [pc, #88]	; (8004004 <SystemInit+0xb0>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <SystemInit+0xb0>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003fb6:	4b13      	ldr	r3, [pc, #76]	; (8004004 <SystemInit+0xb0>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003fbc:	4b11      	ldr	r3, [pc, #68]	; (8004004 <SystemInit+0xb0>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <SystemInit+0xb0>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <SystemInit+0xb0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	; (8004004 <SystemInit+0xb0>)
 8003fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <SystemInit+0xb0>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <SystemInit+0xb8>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <SystemInit+0xbc>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fe6:	d202      	bcs.n	8003fee <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <SystemInit+0xc0>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <SystemInit+0xac>)
 8003ff0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ff4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003ff6:	bf00      	nop
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000ed00 	.word	0xe000ed00
 8004004:	58024400 	.word	0x58024400
 8004008:	eaf6ed7f 	.word	0xeaf6ed7f
 800400c:	5c001000 	.word	0x5c001000
 8004010:	ffff0000 	.word	0xffff0000
 8004014:	51008108 	.word	0x51008108

08004018 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08c      	sub	sp, #48	; 0x30
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800401e:	f107 0320 	add.w	r3, r7, #32
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	609a      	str	r2, [r3, #8]
 800402a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004044:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <MX_TIM2_Init+0xdc>)
 8004046:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800404a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800404c:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <MX_TIM2_Init+0xdc>)
 800404e:	2200      	movs	r2, #0
 8004050:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004052:	4b28      	ldr	r3, [pc, #160]	; (80040f4 <MX_TIM2_Init+0xdc>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004058:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <MX_TIM2_Init+0xdc>)
 800405a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800405e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004060:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <MX_TIM2_Init+0xdc>)
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004066:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <MX_TIM2_Init+0xdc>)
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800406c:	4821      	ldr	r0, [pc, #132]	; (80040f4 <MX_TIM2_Init+0xdc>)
 800406e:	f006 fa8d 	bl	800a58c <HAL_TIM_Base_Init>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8004078:	f7ff f96e 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800407c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004080:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004082:	f107 0320 	add.w	r3, r7, #32
 8004086:	4619      	mov	r1, r3
 8004088:	481a      	ldr	r0, [pc, #104]	; (80040f4 <MX_TIM2_Init+0xdc>)
 800408a:	f007 fb5b 	bl	800b744 <HAL_TIM_ConfigClockSource>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004094:	f7ff f960 	bl	8003358 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004098:	4816      	ldr	r0, [pc, #88]	; (80040f4 <MX_TIM2_Init+0xdc>)
 800409a:	f006 fe13 	bl	800acc4 <HAL_TIM_IC_Init>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80040a4:	f7ff f958 	bl	8003358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80040b0:	f107 0314 	add.w	r3, r7, #20
 80040b4:	4619      	mov	r1, r3
 80040b6:	480f      	ldr	r0, [pc, #60]	; (80040f4 <MX_TIM2_Init+0xdc>)
 80040b8:	f008 f9b8 	bl	800c42c <HAL_TIMEx_MasterConfigSynchronization>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80040c2:	f7ff f949 	bl	8003358 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80040ca:	2301      	movs	r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	2200      	movs	r2, #0
 80040da:	4619      	mov	r1, r3
 80040dc:	4805      	ldr	r0, [pc, #20]	; (80040f4 <MX_TIM2_Init+0xdc>)
 80040de:	f007 f980 	bl	800b3e2 <HAL_TIM_IC_ConfigChannel>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80040e8:	f7ff f936 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80040ec:	bf00      	nop
 80040ee:	3730      	adds	r7, #48	; 0x30
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	240005d4 	.word	0x240005d4

080040f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08c      	sub	sp, #48	; 0x30
 80040fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040fe:	f107 0320 	add.w	r3, r7, #32
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	609a      	str	r2, [r3, #8]
 800410a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800410c:	f107 0314 	add.w	r3, r7, #20
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	609a      	str	r2, [r3, #8]
 8004122:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004124:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <MX_TIM3_Init+0xdc>)
 8004126:	4a2c      	ldr	r2, [pc, #176]	; (80041d8 <MX_TIM3_Init+0xe0>)
 8004128:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800412a:	4b2a      	ldr	r3, [pc, #168]	; (80041d4 <MX_TIM3_Init+0xdc>)
 800412c:	2200      	movs	r2, #0
 800412e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004130:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <MX_TIM3_Init+0xdc>)
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004136:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <MX_TIM3_Init+0xdc>)
 8004138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800413c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800413e:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <MX_TIM3_Init+0xdc>)
 8004140:	2200      	movs	r2, #0
 8004142:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004144:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <MX_TIM3_Init+0xdc>)
 8004146:	2200      	movs	r2, #0
 8004148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800414a:	4822      	ldr	r0, [pc, #136]	; (80041d4 <MX_TIM3_Init+0xdc>)
 800414c:	f006 fa1e 	bl	800a58c <HAL_TIM_Base_Init>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8004156:	f7ff f8ff 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800415a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800415e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004160:	f107 0320 	add.w	r3, r7, #32
 8004164:	4619      	mov	r1, r3
 8004166:	481b      	ldr	r0, [pc, #108]	; (80041d4 <MX_TIM3_Init+0xdc>)
 8004168:	f007 faec 	bl	800b744 <HAL_TIM_ConfigClockSource>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004172:	f7ff f8f1 	bl	8003358 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004176:	4817      	ldr	r0, [pc, #92]	; (80041d4 <MX_TIM3_Init+0xdc>)
 8004178:	f006 fda4 	bl	800acc4 <HAL_TIM_IC_Init>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8004182:	f7ff f8e9 	bl	8003358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800418e:	f107 0314 	add.w	r3, r7, #20
 8004192:	4619      	mov	r1, r3
 8004194:	480f      	ldr	r0, [pc, #60]	; (80041d4 <MX_TIM3_Init+0xdc>)
 8004196:	f008 f949 	bl	800c42c <HAL_TIMEx_MasterConfigSynchronization>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80041a0:	f7ff f8da 	bl	8003358 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80041a4:	2300      	movs	r3, #0
 80041a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80041a8:	2301      	movs	r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	2200      	movs	r2, #0
 80041b8:	4619      	mov	r1, r3
 80041ba:	4806      	ldr	r0, [pc, #24]	; (80041d4 <MX_TIM3_Init+0xdc>)
 80041bc:	f007 f911 	bl	800b3e2 <HAL_TIM_IC_ConfigChannel>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80041c6:	f7ff f8c7 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80041ca:	bf00      	nop
 80041cc:	3730      	adds	r7, #48	; 0x30
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	24000620 	.word	0x24000620
 80041d8:	40000400 	.word	0x40000400

080041dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08c      	sub	sp, #48	; 0x30
 80041e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041e2:	f107 0320 	add.w	r3, r7, #32
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	605a      	str	r2, [r3, #4]
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004208:	4b2b      	ldr	r3, [pc, #172]	; (80042b8 <MX_TIM4_Init+0xdc>)
 800420a:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <MX_TIM4_Init+0xe0>)
 800420c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800420e:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <MX_TIM4_Init+0xdc>)
 8004210:	2200      	movs	r2, #0
 8004212:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004214:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <MX_TIM4_Init+0xdc>)
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800421a:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <MX_TIM4_Init+0xdc>)
 800421c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004220:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004222:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <MX_TIM4_Init+0xdc>)
 8004224:	2200      	movs	r2, #0
 8004226:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004228:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <MX_TIM4_Init+0xdc>)
 800422a:	2200      	movs	r2, #0
 800422c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800422e:	4822      	ldr	r0, [pc, #136]	; (80042b8 <MX_TIM4_Init+0xdc>)
 8004230:	f006 f9ac 	bl	800a58c <HAL_TIM_Base_Init>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800423a:	f7ff f88d 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800423e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004242:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004244:	f107 0320 	add.w	r3, r7, #32
 8004248:	4619      	mov	r1, r3
 800424a:	481b      	ldr	r0, [pc, #108]	; (80042b8 <MX_TIM4_Init+0xdc>)
 800424c:	f007 fa7a 	bl	800b744 <HAL_TIM_ConfigClockSource>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004256:	f7ff f87f 	bl	8003358 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800425a:	4817      	ldr	r0, [pc, #92]	; (80042b8 <MX_TIM4_Init+0xdc>)
 800425c:	f006 fd32 	bl	800acc4 <HAL_TIM_IC_Init>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004266:	f7ff f877 	bl	8003358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004272:	f107 0314 	add.w	r3, r7, #20
 8004276:	4619      	mov	r1, r3
 8004278:	480f      	ldr	r0, [pc, #60]	; (80042b8 <MX_TIM4_Init+0xdc>)
 800427a:	f008 f8d7 	bl	800c42c <HAL_TIMEx_MasterConfigSynchronization>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8004284:	f7ff f868 	bl	8003358 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004288:	2300      	movs	r3, #0
 800428a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800428c:	2301      	movs	r3, #1
 800428e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004298:	1d3b      	adds	r3, r7, #4
 800429a:	2200      	movs	r2, #0
 800429c:	4619      	mov	r1, r3
 800429e:	4806      	ldr	r0, [pc, #24]	; (80042b8 <MX_TIM4_Init+0xdc>)
 80042a0:	f007 f89f 	bl	800b3e2 <HAL_TIM_IC_ConfigChannel>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80042aa:	f7ff f855 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80042ae:	bf00      	nop
 80042b0:	3730      	adds	r7, #48	; 0x30
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	2400066c 	.word	0x2400066c
 80042bc:	40000800 	.word	0x40000800

080042c0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042c6:	f107 0310 	add.w	r3, r7, #16
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <MX_TIM5_Init+0x98>)
 80042e0:	4a1e      	ldr	r2, [pc, #120]	; (800435c <MX_TIM5_Init+0x9c>)
 80042e2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64000-1;
 80042e4:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <MX_TIM5_Init+0x98>)
 80042e6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80042ea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ec:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <MX_TIM5_Init+0x98>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80042f2:	4b19      	ldr	r3, [pc, #100]	; (8004358 <MX_TIM5_Init+0x98>)
 80042f4:	f04f 32ff 	mov.w	r2, #4294967295
 80042f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042fa:	4b17      	ldr	r3, [pc, #92]	; (8004358 <MX_TIM5_Init+0x98>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004300:	4b15      	ldr	r3, [pc, #84]	; (8004358 <MX_TIM5_Init+0x98>)
 8004302:	2200      	movs	r2, #0
 8004304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004306:	4814      	ldr	r0, [pc, #80]	; (8004358 <MX_TIM5_Init+0x98>)
 8004308:	f006 f940 	bl	800a58c <HAL_TIM_Base_Init>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8004312:	f7ff f821 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800431a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800431c:	f107 0310 	add.w	r3, r7, #16
 8004320:	4619      	mov	r1, r3
 8004322:	480d      	ldr	r0, [pc, #52]	; (8004358 <MX_TIM5_Init+0x98>)
 8004324:	f007 fa0e 	bl	800b744 <HAL_TIM_ConfigClockSource>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800432e:	f7ff f813 	bl	8003358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800433a:	1d3b      	adds	r3, r7, #4
 800433c:	4619      	mov	r1, r3
 800433e:	4806      	ldr	r0, [pc, #24]	; (8004358 <MX_TIM5_Init+0x98>)
 8004340:	f008 f874 	bl	800c42c <HAL_TIMEx_MasterConfigSynchronization>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800434a:	f7ff f805 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800434e:	bf00      	nop
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	240006b8 	.word	0x240006b8
 800435c:	40000c00 	.word	0x40000c00

08004360 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08c      	sub	sp, #48	; 0x30
 8004364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004366:	f107 0320 	add.w	r3, r7, #32
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	609a      	str	r2, [r3, #8]
 8004372:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	609a      	str	r2, [r3, #8]
 800437e:	60da      	str	r2, [r3, #12]
 8004380:	611a      	str	r2, [r3, #16]
 8004382:	615a      	str	r2, [r3, #20]
 8004384:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004386:	4b26      	ldr	r3, [pc, #152]	; (8004420 <MX_TIM12_Init+0xc0>)
 8004388:	4a26      	ldr	r2, [pc, #152]	; (8004424 <MX_TIM12_Init+0xc4>)
 800438a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 500-1;
 800438c:	4b24      	ldr	r3, [pc, #144]	; (8004420 <MX_TIM12_Init+0xc0>)
 800438e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004392:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004394:	4b22      	ldr	r3, [pc, #136]	; (8004420 <MX_TIM12_Init+0xc0>)
 8004396:	2200      	movs	r2, #0
 8004398:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 40000;
 800439a:	4b21      	ldr	r3, [pc, #132]	; (8004420 <MX_TIM12_Init+0xc0>)
 800439c:	f649 4240 	movw	r2, #40000	; 0x9c40
 80043a0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043a2:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <MX_TIM12_Init+0xc0>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <MX_TIM12_Init+0xc0>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80043ae:	481c      	ldr	r0, [pc, #112]	; (8004420 <MX_TIM12_Init+0xc0>)
 80043b0:	f006 f8ec 	bl	800a58c <HAL_TIM_Base_Init>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 80043ba:	f7fe ffcd 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80043c4:	f107 0320 	add.w	r3, r7, #32
 80043c8:	4619      	mov	r1, r3
 80043ca:	4815      	ldr	r0, [pc, #84]	; (8004420 <MX_TIM12_Init+0xc0>)
 80043cc:	f007 f9ba 	bl	800b744 <HAL_TIM_ConfigClockSource>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 80043d6:	f7fe ffbf 	bl	8003358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80043da:	4811      	ldr	r0, [pc, #68]	; (8004420 <MX_TIM12_Init+0xc0>)
 80043dc:	f006 fa6d 	bl	800a8ba <HAL_TIM_PWM_Init>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80043e6:	f7fe ffb7 	bl	8003358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043ea:	2360      	movs	r3, #96	; 0x60
 80043ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 80043ee:	f644 6320 	movw	r3, #20000	; 0x4e20
 80043f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043fc:	1d3b      	adds	r3, r7, #4
 80043fe:	2200      	movs	r2, #0
 8004400:	4619      	mov	r1, r3
 8004402:	4807      	ldr	r0, [pc, #28]	; (8004420 <MX_TIM12_Init+0xc0>)
 8004404:	f007 f88a 	bl	800b51c <HAL_TIM_PWM_ConfigChannel>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800440e:	f7fe ffa3 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004412:	4803      	ldr	r0, [pc, #12]	; (8004420 <MX_TIM12_Init+0xc0>)
 8004414:	f000 fa44 	bl	80048a0 <HAL_TIM_MspPostInit>

}
 8004418:	bf00      	nop
 800441a:	3730      	adds	r7, #48	; 0x30
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	24000704 	.word	0x24000704
 8004424:	40001800 	.word	0x40001800

08004428 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	60da      	str	r2, [r3, #12]
 800443a:	611a      	str	r2, [r3, #16]
 800443c:	615a      	str	r2, [r3, #20]
 800443e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004440:	4b1f      	ldr	r3, [pc, #124]	; (80044c0 <MX_TIM13_Init+0x98>)
 8004442:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <MX_TIM13_Init+0x9c>)
 8004444:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 500-1;
 8004446:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <MX_TIM13_Init+0x98>)
 8004448:	f240 12f3 	movw	r2, #499	; 0x1f3
 800444c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800444e:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <MX_TIM13_Init+0x98>)
 8004450:	2200      	movs	r2, #0
 8004452:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 40000;
 8004454:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <MX_TIM13_Init+0x98>)
 8004456:	f649 4240 	movw	r2, #40000	; 0x9c40
 800445a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800445c:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <MX_TIM13_Init+0x98>)
 800445e:	2200      	movs	r2, #0
 8004460:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004462:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <MX_TIM13_Init+0x98>)
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004468:	4815      	ldr	r0, [pc, #84]	; (80044c0 <MX_TIM13_Init+0x98>)
 800446a:	f006 f88f 	bl	800a58c <HAL_TIM_Base_Init>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8004474:	f7fe ff70 	bl	8003358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004478:	4811      	ldr	r0, [pc, #68]	; (80044c0 <MX_TIM13_Init+0x98>)
 800447a:	f006 fa1e 	bl	800a8ba <HAL_TIM_PWM_Init>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8004484:	f7fe ff68 	bl	8003358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004488:	2360      	movs	r3, #96	; 0x60
 800448a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 800448c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004490:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800449a:	1d3b      	adds	r3, r7, #4
 800449c:	2200      	movs	r2, #0
 800449e:	4619      	mov	r1, r3
 80044a0:	4807      	ldr	r0, [pc, #28]	; (80044c0 <MX_TIM13_Init+0x98>)
 80044a2:	f007 f83b 	bl	800b51c <HAL_TIM_PWM_ConfigChannel>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 80044ac:	f7fe ff54 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80044b0:	4803      	ldr	r0, [pc, #12]	; (80044c0 <MX_TIM13_Init+0x98>)
 80044b2:	f000 f9f5 	bl	80048a0 <HAL_TIM_MspPostInit>

}
 80044b6:	bf00      	nop
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	24000750 	.word	0x24000750
 80044c4:	40001c00 	.word	0x40001c00

080044c8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80044ce:	1d3b      	adds	r3, r7, #4
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	611a      	str	r2, [r3, #16]
 80044dc:	615a      	str	r2, [r3, #20]
 80044de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80044e0:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <MX_TIM14_Init+0x98>)
 80044e2:	4a20      	ldr	r2, [pc, #128]	; (8004564 <MX_TIM14_Init+0x9c>)
 80044e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 500-1;
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <MX_TIM14_Init+0x98>)
 80044e8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80044ec:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ee:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <MX_TIM14_Init+0x98>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 40000;
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <MX_TIM14_Init+0x98>)
 80044f6:	f649 4240 	movw	r2, #40000	; 0x9c40
 80044fa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044fc:	4b18      	ldr	r3, [pc, #96]	; (8004560 <MX_TIM14_Init+0x98>)
 80044fe:	2200      	movs	r2, #0
 8004500:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004502:	4b17      	ldr	r3, [pc, #92]	; (8004560 <MX_TIM14_Init+0x98>)
 8004504:	2200      	movs	r2, #0
 8004506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004508:	4815      	ldr	r0, [pc, #84]	; (8004560 <MX_TIM14_Init+0x98>)
 800450a:	f006 f83f 	bl	800a58c <HAL_TIM_Base_Init>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8004514:	f7fe ff20 	bl	8003358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004518:	4811      	ldr	r0, [pc, #68]	; (8004560 <MX_TIM14_Init+0x98>)
 800451a:	f006 f9ce 	bl	800a8ba <HAL_TIM_PWM_Init>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8004524:	f7fe ff18 	bl	8003358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004528:	2360      	movs	r3, #96	; 0x60
 800452a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 800452c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004530:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800453a:	1d3b      	adds	r3, r7, #4
 800453c:	2200      	movs	r2, #0
 800453e:	4619      	mov	r1, r3
 8004540:	4807      	ldr	r0, [pc, #28]	; (8004560 <MX_TIM14_Init+0x98>)
 8004542:	f006 ffeb 	bl	800b51c <HAL_TIM_PWM_ConfigChannel>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 800454c:	f7fe ff04 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004550:	4803      	ldr	r0, [pc, #12]	; (8004560 <MX_TIM14_Init+0x98>)
 8004552:	f000 f9a5 	bl	80048a0 <HAL_TIM_MspPostInit>

}
 8004556:	bf00      	nop
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	2400079c 	.word	0x2400079c
 8004564:	40002000 	.word	0x40002000

08004568 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800456e:	f107 0310 	add.w	r3, r7, #16
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	605a      	str	r2, [r3, #4]
 8004578:	609a      	str	r2, [r3, #8]
 800457a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800457c:	1d3b      	adds	r3, r7, #4
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004586:	4b1f      	ldr	r3, [pc, #124]	; (8004604 <MX_TIM15_Init+0x9c>)
 8004588:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <MX_TIM15_Init+0xa0>)
 800458a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <MX_TIM15_Init+0x9c>)
 800458e:	2201      	movs	r2, #1
 8004590:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004592:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <MX_TIM15_Init+0x9c>)
 8004594:	2200      	movs	r2, #0
 8004596:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8004598:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <MX_TIM15_Init+0x9c>)
 800459a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800459e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045a0:	4b18      	ldr	r3, [pc, #96]	; (8004604 <MX_TIM15_Init+0x9c>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80045a6:	4b17      	ldr	r3, [pc, #92]	; (8004604 <MX_TIM15_Init+0x9c>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ac:	4b15      	ldr	r3, [pc, #84]	; (8004604 <MX_TIM15_Init+0x9c>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80045b2:	4814      	ldr	r0, [pc, #80]	; (8004604 <MX_TIM15_Init+0x9c>)
 80045b4:	f005 ffea 	bl	800a58c <HAL_TIM_Base_Init>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80045be:	f7fe fecb 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80045c8:	f107 0310 	add.w	r3, r7, #16
 80045cc:	4619      	mov	r1, r3
 80045ce:	480d      	ldr	r0, [pc, #52]	; (8004604 <MX_TIM15_Init+0x9c>)
 80045d0:	f007 f8b8 	bl	800b744 <HAL_TIM_ConfigClockSource>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80045da:	f7fe febd 	bl	8003358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4806      	ldr	r0, [pc, #24]	; (8004604 <MX_TIM15_Init+0x9c>)
 80045ec:	f007 ff1e 	bl	800c42c <HAL_TIMEx_MasterConfigSynchronization>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80045f6:	f7fe feaf 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80045fa:	bf00      	nop
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	240007e8 	.word	0x240007e8
 8004608:	40014000 	.word	0x40014000

0800460c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b092      	sub	sp, #72	; 0x48
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004614:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462c:	d136      	bne.n	800469c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800462e:	4b92      	ldr	r3, [pc, #584]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004634:	4a90      	ldr	r2, [pc, #576]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800463e:	4b8e      	ldr	r3, [pc, #568]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800464c:	4b8a      	ldr	r3, [pc, #552]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 800464e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004652:	4a89      	ldr	r2, [pc, #548]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800465c:	4b86      	ldr	r3, [pc, #536]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 800465e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = E_CountPap1_Pin;
 800466a:	2320      	movs	r3, #32
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466e:	2302      	movs	r3, #2
 8004670:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004672:	2302      	movs	r3, #2
 8004674:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004676:	2300      	movs	r3, #0
 8004678:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800467a:	2301      	movs	r3, #1
 800467c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPap1_GPIO_Port, &GPIO_InitStruct);
 800467e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004682:	4619      	mov	r1, r3
 8004684:	487d      	ldr	r0, [pc, #500]	; (800487c <HAL_TIM_Base_MspInit+0x270>)
 8004686:	f003 fa29 	bl	8007adc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800468a:	2200      	movs	r2, #0
 800468c:	2101      	movs	r1, #1
 800468e:	201c      	movs	r0, #28
 8004690:	f002 fc7d 	bl	8006f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004694:	201c      	movs	r0, #28
 8004696:	f002 fc94 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800469a:	e0e8      	b.n	800486e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a77      	ldr	r2, [pc, #476]	; (8004880 <HAL_TIM_Base_MspInit+0x274>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d136      	bne.n	8004714 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046a6:	4b74      	ldr	r3, [pc, #464]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80046a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046ac:	4a72      	ldr	r2, [pc, #456]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80046ae:	f043 0302 	orr.w	r3, r3, #2
 80046b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046b6:	4b70      	ldr	r3, [pc, #448]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80046b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c4:	4b6c      	ldr	r3, [pc, #432]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80046c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ca:	4a6b      	ldr	r2, [pc, #428]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046d4:	4b68      	ldr	r3, [pc, #416]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80046d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = E_CountPaP2_Pin;
 80046e2:	2340      	movs	r3, #64	; 0x40
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e6:	2302      	movs	r3, #2
 80046e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046ea:	2302      	movs	r3, #2
 80046ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ee:	2300      	movs	r3, #0
 80046f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046f2:	2302      	movs	r3, #2
 80046f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP2_GPIO_Port, &GPIO_InitStruct);
 80046f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046fa:	4619      	mov	r1, r3
 80046fc:	485f      	ldr	r0, [pc, #380]	; (800487c <HAL_TIM_Base_MspInit+0x270>)
 80046fe:	f003 f9ed 	bl	8007adc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004702:	2200      	movs	r2, #0
 8004704:	2101      	movs	r1, #1
 8004706:	201d      	movs	r0, #29
 8004708:	f002 fc41 	bl	8006f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800470c:	201d      	movs	r0, #29
 800470e:	f002 fc58 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
}
 8004712:	e0ac      	b.n	800486e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a5a      	ldr	r2, [pc, #360]	; (8004884 <HAL_TIM_Base_MspInit+0x278>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d137      	bne.n	800478e <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800471e:	4b56      	ldr	r3, [pc, #344]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004724:	4a54      	ldr	r2, [pc, #336]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800472e:	4b52      	ldr	r3, [pc, #328]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	623b      	str	r3, [r7, #32]
 800473a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800473c:	4b4e      	ldr	r3, [pc, #312]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 800473e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004742:	4a4d      	ldr	r2, [pc, #308]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004744:	f043 0308 	orr.w	r3, r3, #8
 8004748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800474c:	4b4a      	ldr	r3, [pc, #296]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 800474e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = E_CountPaP3_Pin;
 800475a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004760:	2302      	movs	r3, #2
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004764:	2302      	movs	r3, #2
 8004766:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004768:	2300      	movs	r3, #0
 800476a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800476c:	2302      	movs	r3, #2
 800476e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP3_GPIO_Port, &GPIO_InitStruct);
 8004770:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004774:	4619      	mov	r1, r3
 8004776:	4844      	ldr	r0, [pc, #272]	; (8004888 <HAL_TIM_Base_MspInit+0x27c>)
 8004778:	f003 f9b0 	bl	8007adc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800477c:	2200      	movs	r2, #0
 800477e:	2101      	movs	r1, #1
 8004780:	201e      	movs	r0, #30
 8004782:	f002 fc04 	bl	8006f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004786:	201e      	movs	r0, #30
 8004788:	f002 fc1b 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
}
 800478c:	e06f      	b.n	800486e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a3e      	ldr	r2, [pc, #248]	; (800488c <HAL_TIM_Base_MspInit+0x280>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10f      	bne.n	80047b8 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004798:	4b37      	ldr	r3, [pc, #220]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 800479a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800479e:	4a36      	ldr	r2, [pc, #216]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80047a0:	f043 0308 	orr.w	r3, r3, #8
 80047a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047a8:	4b33      	ldr	r3, [pc, #204]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80047aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	69bb      	ldr	r3, [r7, #24]
}
 80047b6:	e05a      	b.n	800486e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a34      	ldr	r2, [pc, #208]	; (8004890 <HAL_TIM_Base_MspInit+0x284>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d10f      	bne.n	80047e2 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80047c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047c8:	4a2b      	ldr	r2, [pc, #172]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80047ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047d2:	4b29      	ldr	r3, [pc, #164]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80047d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	697b      	ldr	r3, [r7, #20]
}
 80047e0:	e045      	b.n	800486e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2b      	ldr	r2, [pc, #172]	; (8004894 <HAL_TIM_Base_MspInit+0x288>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d10f      	bne.n	800480c <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80047ec:	4b22      	ldr	r3, [pc, #136]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80047ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047f2:	4a21      	ldr	r2, [pc, #132]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80047f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047fc:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 80047fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	693b      	ldr	r3, [r7, #16]
}
 800480a:	e030      	b.n	800486e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <HAL_TIM_Base_MspInit+0x28c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d10f      	bne.n	8004836 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004816:	4b18      	ldr	r3, [pc, #96]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800481c:	4a16      	ldr	r2, [pc, #88]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 800481e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004822:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]
}
 8004834:	e01b      	b.n	800486e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a18      	ldr	r2, [pc, #96]	; (800489c <HAL_TIM_Base_MspInit+0x290>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d116      	bne.n	800486e <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004846:	4a0c      	ldr	r2, [pc, #48]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_TIM_Base_MspInit+0x26c>)
 8004852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 800485e:	2200      	movs	r2, #0
 8004860:	2101      	movs	r1, #1
 8004862:	2074      	movs	r0, #116	; 0x74
 8004864:	f002 fb93 	bl	8006f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004868:	2074      	movs	r0, #116	; 0x74
 800486a:	f002 fbaa 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
}
 800486e:	bf00      	nop
 8004870:	3748      	adds	r7, #72	; 0x48
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	58024400 	.word	0x58024400
 800487c:	58020000 	.word	0x58020000
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	58020c00 	.word	0x58020c00
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40001800 	.word	0x40001800
 8004894:	40001c00 	.word	0x40001c00
 8004898:	40002000 	.word	0x40002000
 800489c:	40014000 	.word	0x40014000

080048a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	; 0x28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a8:	f107 0314 	add.w	r3, r7, #20
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	605a      	str	r2, [r3, #4]
 80048b2:	609a      	str	r2, [r3, #8]
 80048b4:	60da      	str	r2, [r3, #12]
 80048b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a39      	ldr	r2, [pc, #228]	; (80049a4 <HAL_TIM_MspPostInit+0x104>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d120      	bne.n	8004904 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c2:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <HAL_TIM_MspPostInit+0x108>)
 80048c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048c8:	4a37      	ldr	r2, [pc, #220]	; (80049a8 <HAL_TIM_MspPostInit+0x108>)
 80048ca:	f043 0302 	orr.w	r3, r3, #2
 80048ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048d2:	4b35      	ldr	r3, [pc, #212]	; (80049a8 <HAL_TIM_MspPostInit+0x108>)
 80048d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 80048e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e6:	2302      	movs	r3, #2
 80048e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048ea:	2302      	movs	r3, #2
 80048ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ee:	2300      	movs	r3, #0
 80048f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80048f2:	2302      	movs	r3, #2
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 80048f6:	f107 0314 	add.w	r3, r7, #20
 80048fa:	4619      	mov	r1, r3
 80048fc:	482b      	ldr	r0, [pc, #172]	; (80049ac <HAL_TIM_MspPostInit+0x10c>)
 80048fe:	f003 f8ed 	bl	8007adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004902:	e04a      	b.n	800499a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a29      	ldr	r2, [pc, #164]	; (80049b0 <HAL_TIM_MspPostInit+0x110>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d120      	bne.n	8004950 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800490e:	4b26      	ldr	r3, [pc, #152]	; (80049a8 <HAL_TIM_MspPostInit+0x108>)
 8004910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004914:	4a24      	ldr	r2, [pc, #144]	; (80049a8 <HAL_TIM_MspPostInit+0x108>)
 8004916:	f043 0320 	orr.w	r3, r3, #32
 800491a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800491e:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <HAL_TIM_MspPostInit+0x108>)
 8004920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 800492c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004932:	2302      	movs	r3, #2
 8004934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004936:	2302      	movs	r3, #2
 8004938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493a:	2300      	movs	r3, #0
 800493c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800493e:	2309      	movs	r3, #9
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8004942:	f107 0314 	add.w	r3, r7, #20
 8004946:	4619      	mov	r1, r3
 8004948:	481a      	ldr	r0, [pc, #104]	; (80049b4 <HAL_TIM_MspPostInit+0x114>)
 800494a:	f003 f8c7 	bl	8007adc <HAL_GPIO_Init>
}
 800494e:	e024      	b.n	800499a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <HAL_TIM_MspPostInit+0x118>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d11f      	bne.n	800499a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800495a:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <HAL_TIM_MspPostInit+0x108>)
 800495c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004960:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <HAL_TIM_MspPostInit+0x108>)
 8004962:	f043 0320 	orr.w	r3, r3, #32
 8004966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800496a:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <HAL_TIM_MspPostInit+0x108>)
 800496c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8004978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800497c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497e:	2302      	movs	r3, #2
 8004980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004982:	2302      	movs	r3, #2
 8004984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004986:	2300      	movs	r3, #0
 8004988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800498a:	2309      	movs	r3, #9
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 800498e:	f107 0314 	add.w	r3, r7, #20
 8004992:	4619      	mov	r1, r3
 8004994:	4807      	ldr	r0, [pc, #28]	; (80049b4 <HAL_TIM_MspPostInit+0x114>)
 8004996:	f003 f8a1 	bl	8007adc <HAL_GPIO_Init>
}
 800499a:	bf00      	nop
 800499c:	3728      	adds	r7, #40	; 0x28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40001800 	.word	0x40001800
 80049a8:	58024400 	.word	0x58024400
 80049ac:	58020400 	.word	0x58020400
 80049b0:	40001c00 	.word	0x40001c00
 80049b4:	58021400 	.word	0x58021400
 80049b8:	40002000 	.word	0x40002000
 80049bc:	00000000 	.word	0x00000000

080049c0 <inicializarTrayectoria>:

double DVHip, Aaux1, ViHip2, XiHip2, Aaux, XiHip3, ViHip4, XiHip4;

//(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)

void inicializarTrayectoria(double XiHip1, double XfHip4, double V0Hip, double Vf, double Vmax, double Amax, double Jerk) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	ed2d 8b04 	vpush	{d8-d9}
 80049c6:	b090      	sub	sp, #64	; 0x40
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 80049ce:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 80049d2:	ed87 2b08 	vstr	d2, [r7, #32]
 80049d6:	ed87 3b06 	vstr	d3, [r7, #24]
 80049da:	ed87 4b04 	vstr	d4, [r7, #16]
 80049de:	ed87 5b02 	vstr	d5, [r7, #8]
 80049e2:	ed87 6b00 	vstr	d6, [r7]

	if (XfHip4 < XiHip1) {
 80049e6:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80049ea:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80049ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80049f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f6:	d519      	bpl.n	8004a2c <inicializarTrayectoria+0x6c>
		Ai = -Amax;
 80049f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80049fc:	eeb1 7b47 	vneg.f64	d7, d7
 8004a00:	4b7e      	ldr	r3, [pc, #504]	; (8004bfc <inicializarTrayectoria+0x23c>)
 8004a02:	ed83 7b00 	vstr	d7, [r3]
		Af = +Amax;
 8004a06:	497e      	ldr	r1, [pc, #504]	; (8004c00 <inicializarTrayectoria+0x240>)
 8004a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a0c:	e9c1 2300 	strd	r2, r3, [r1]
		Vm = -Vmax;
 8004a10:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a14:	eeb1 7b47 	vneg.f64	d7, d7
 8004a18:	4b7a      	ldr	r3, [pc, #488]	; (8004c04 <inicializarTrayectoria+0x244>)
 8004a1a:	ed83 7b00 	vstr	d7, [r3]
		Jerk = -Jerk;
 8004a1e:	ed97 7b00 	vldr	d7, [r7]
 8004a22:	eeb1 7b47 	vneg.f64	d7, d7
 8004a26:	ed87 7b00 	vstr	d7, [r7]
 8004a2a:	e019      	b.n	8004a60 <inicializarTrayectoria+0xa0>
	} else if (XfHip4 > XiHip1) {
 8004a2c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004a30:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004a34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3c:	dd10      	ble.n	8004a60 <inicializarTrayectoria+0xa0>
		Ai = Amax;
 8004a3e:	496f      	ldr	r1, [pc, #444]	; (8004bfc <inicializarTrayectoria+0x23c>)
 8004a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a44:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8004a48:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a4c:	eeb1 7b47 	vneg.f64	d7, d7
 8004a50:	4b6b      	ldr	r3, [pc, #428]	; (8004c00 <inicializarTrayectoria+0x240>)
 8004a52:	ed83 7b00 	vstr	d7, [r3]
		Vm = Vmax;
 8004a56:	496b      	ldr	r1, [pc, #428]	; (8004c04 <inicializarTrayectoria+0x244>)
 8004a58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a5c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (V0Hip > Vmax) {
 8004a60:	ed97 6b08 	vldr	d6, [r7, #32]
 8004a64:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a70:	dd0b      	ble.n	8004a8a <inicializarTrayectoria+0xca>
		Ai = -Amax;
 8004a72:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a76:	eeb1 7b47 	vneg.f64	d7, d7
 8004a7a:	4b60      	ldr	r3, [pc, #384]	; (8004bfc <inicializarTrayectoria+0x23c>)
 8004a7c:	ed83 7b00 	vstr	d7, [r3]
		Af = Amax;
 8004a80:	495f      	ldr	r1, [pc, #380]	; (8004c00 <inicializarTrayectoria+0x240>)
 8004a82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a86:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (Vf > Vmax) {
 8004a8a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004a8e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9a:	dd0b      	ble.n	8004ab4 <inicializarTrayectoria+0xf4>
		Ai = Amax;
 8004a9c:	4957      	ldr	r1, [pc, #348]	; (8004bfc <inicializarTrayectoria+0x23c>)
 8004a9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aa2:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8004aa6:	ed97 7b02 	vldr	d7, [r7, #8]
 8004aaa:	eeb1 7b47 	vneg.f64	d7, d7
 8004aae:	4b54      	ldr	r3, [pc, #336]	; (8004c00 <inicializarTrayectoria+0x240>)
 8004ab0:	ed83 7b00 	vstr	d7, [r3]
	}

	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004aba:	f000 bd05 	b.w	80054c8 <inicializarTrayectoria+0xb08>
		DVHip = (Ai * Ai) / (2 * Jerk) * 2;
 8004abe:	4b4f      	ldr	r3, [pc, #316]	; (8004bfc <inicializarTrayectoria+0x23c>)
 8004ac0:	ed93 6b00 	vldr	d6, [r3]
 8004ac4:	4b4d      	ldr	r3, [pc, #308]	; (8004bfc <inicializarTrayectoria+0x23c>)
 8004ac6:	ed93 7b00 	vldr	d7, [r3]
 8004aca:	ee26 5b07 	vmul.f64	d5, d6, d7
 8004ace:	ed97 7b00 	vldr	d7, [r7]
 8004ad2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004ad6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004ada:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004ade:	4b4a      	ldr	r3, [pc, #296]	; (8004c08 <inicializarTrayectoria+0x248>)
 8004ae0:	ed83 7b00 	vstr	d7, [r3]

		if (fabs(DVHip) > fabs(Vm - V0Hip)) { // Para cuando la velocidad inicial es muy cercana a la maxima
 8004ae4:	4b48      	ldr	r3, [pc, #288]	; (8004c08 <inicializarTrayectoria+0x248>)
 8004ae6:	ed93 7b00 	vldr	d7, [r3]
 8004aea:	eeb0 6bc7 	vabs.f64	d6, d7
 8004aee:	4b45      	ldr	r3, [pc, #276]	; (8004c04 <inicializarTrayectoria+0x244>)
 8004af0:	ed93 5b00 	vldr	d5, [r3]
 8004af4:	ed97 7b08 	vldr	d7, [r7, #32]
 8004af8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004afc:	eeb0 7bc7 	vabs.f64	d7, d7
 8004b00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b08:	dd35      	ble.n	8004b76 <inicializarTrayectoria+0x1b6>
			if (fabs(Vm - V0Hip) != 0) {
 8004b0a:	4b3e      	ldr	r3, [pc, #248]	; (8004c04 <inicializarTrayectoria+0x244>)
 8004b0c:	ed93 6b00 	vldr	d6, [r3]
 8004b10:	ed97 7b08 	vldr	d7, [r7, #32]
 8004b14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b20:	d029      	beq.n	8004b76 <inicializarTrayectoria+0x1b6>
				Aaux1 = ((Ai) / fabs(Ai)) * sqrt(fabs(Vm - V0Hip) * fabs(Jerk));
 8004b22:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <inicializarTrayectoria+0x23c>)
 8004b24:	ed93 6b00 	vldr	d6, [r3]
 8004b28:	4b34      	ldr	r3, [pc, #208]	; (8004bfc <inicializarTrayectoria+0x23c>)
 8004b2a:	ed93 7b00 	vldr	d7, [r3]
 8004b2e:	eeb0 7bc7 	vabs.f64	d7, d7
 8004b32:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8004b36:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <inicializarTrayectoria+0x244>)
 8004b38:	ed93 6b00 	vldr	d6, [r3]
 8004b3c:	ed97 7b08 	vldr	d7, [r7, #32]
 8004b40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b44:	eeb0 6bc7 	vabs.f64	d6, d7
 8004b48:	ed97 7b00 	vldr	d7, [r7]
 8004b4c:	eeb0 7bc7 	vabs.f64	d7, d7
 8004b50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b54:	eeb0 0b47 	vmov.f64	d0, d7
 8004b58:	f00d f9be 	bl	8011ed8 <sqrt>
 8004b5c:	eeb0 7b40 	vmov.f64	d7, d0
 8004b60:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004b64:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <inicializarTrayectoria+0x24c>)
 8004b66:	ed83 7b00 	vstr	d7, [r3]
				Ai = Aaux1;
 8004b6a:	4b28      	ldr	r3, [pc, #160]	; (8004c0c <inicializarTrayectoria+0x24c>)
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	4922      	ldr	r1, [pc, #136]	; (8004bfc <inicializarTrayectoria+0x23c>)
 8004b72:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}

		if (fabs(Vm - V0Hip) == 0) { // Para cuando la velocidad inicial es igual a la maxima
 8004b76:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <inicializarTrayectoria+0x244>)
 8004b78:	ed93 6b00 	vldr	d6, [r3]
 8004b7c:	ed97 7b08 	vldr	d7, [r7, #32]
 8004b80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8c:	d150      	bne.n	8004c30 <inicializarTrayectoria+0x270>
			a3Hip1 = 0;
 8004b8e:	4920      	ldr	r1, [pc, #128]	; (8004c10 <inicializarTrayectoria+0x250>)
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9c1 2300 	strd	r2, r3, [r1]
			a2Hip1 = 0;
 8004b9c:	491d      	ldr	r1, [pc, #116]	; (8004c14 <inicializarTrayectoria+0x254>)
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9c1 2300 	strd	r2, r3, [r1]
			a1Hip1 = 0;
 8004baa:	491b      	ldr	r1, [pc, #108]	; (8004c18 <inicializarTrayectoria+0x258>)
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip1 = 0;
 8004bb8:	4918      	ldr	r1, [pc, #96]	; (8004c1c <inicializarTrayectoria+0x25c>)
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = 0;
 8004bc6:	4916      	ldr	r1, [pc, #88]	; (8004c20 <inicializarTrayectoria+0x260>)
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip2 = 0;
 8004bd4:	4913      	ldr	r1, [pc, #76]	; (8004c24 <inicializarTrayectoria+0x264>)
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip2 = 0;
 8004be2:	4911      	ldr	r1, [pc, #68]	; (8004c28 <inicializarTrayectoria+0x268>)
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = XiHip1;
 8004bf0:	490e      	ldr	r1, [pc, #56]	; (8004c2c <inicializarTrayectoria+0x26c>)
 8004bf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bf6:	e9c1 2300 	strd	r2, r3, [r1]
 8004bfa:	e195      	b.n	8004f28 <inicializarTrayectoria+0x568>
 8004bfc:	24000a90 	.word	0x24000a90
 8004c00:	24000a98 	.word	0x24000a98
 8004c04:	24000b40 	.word	0x24000b40
 8004c08:	24000b98 	.word	0x24000b98
 8004c0c:	24000ba0 	.word	0x24000ba0
 8004c10:	24000ab8 	.word	0x24000ab8
 8004c14:	24000ab0 	.word	0x24000ab0
 8004c18:	24000aa8 	.word	0x24000aa8
 8004c1c:	24000aa0 	.word	0x24000aa0
 8004c20:	24000b58 	.word	0x24000b58
 8004c24:	24000b60 	.word	0x24000b60
 8004c28:	24000b68 	.word	0x24000b68
 8004c2c:	24000b28 	.word	0x24000b28
		} else {
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 1
			a3Hip1 = (Jerk / 6);
 8004c30:	ed97 6b00 	vldr	d6, [r7]
 8004c34:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004c38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004c3c:	4bcf      	ldr	r3, [pc, #828]	; (8004f7c <inicializarTrayectoria+0x5bc>)
 8004c3e:	ed83 7b00 	vstr	d7, [r3]
			a2Hip1 = 0;
 8004c42:	49cf      	ldr	r1, [pc, #828]	; (8004f80 <inicializarTrayectoria+0x5c0>)
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = ((Ai / (6 * a3Hip1)));
 8004c50:	4bcc      	ldr	r3, [pc, #816]	; (8004f84 <inicializarTrayectoria+0x5c4>)
 8004c52:	ed93 5b00 	vldr	d5, [r3]
 8004c56:	4bc9      	ldr	r3, [pc, #804]	; (8004f7c <inicializarTrayectoria+0x5bc>)
 8004c58:	ed93 7b00 	vldr	d7, [r3]
 8004c5c:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004c60:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004c64:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004c68:	4bc7      	ldr	r3, [pc, #796]	; (8004f88 <inicializarTrayectoria+0x5c8>)
 8004c6a:	ed83 7b00 	vstr	d7, [r3]
			a1Hip1 = V0Hip;
 8004c6e:	49c7      	ldr	r1, [pc, #796]	; (8004f8c <inicializarTrayectoria+0x5cc>)
 8004c70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c74:	e9c1 2300 	strd	r2, r3, [r1]
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8004c78:	4bc1      	ldr	r3, [pc, #772]	; (8004f80 <inicializarTrayectoria+0x5c0>)
 8004c7a:	ed93 7b00 	vldr	d7, [r3]
 8004c7e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004c82:	4bc1      	ldr	r3, [pc, #772]	; (8004f88 <inicializarTrayectoria+0x5c8>)
 8004c84:	ed93 7b00 	vldr	d7, [r3]
 8004c88:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004c8c:	4bbf      	ldr	r3, [pc, #764]	; (8004f8c <inicializarTrayectoria+0x5cc>)
 8004c8e:	ed93 7b00 	vldr	d7, [r3]
 8004c92:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 3 * a3Hip1 * pow(tfHip1, 2);
 8004c96:	4bb9      	ldr	r3, [pc, #740]	; (8004f7c <inicializarTrayectoria+0x5bc>)
 8004c98:	ed93 7b00 	vldr	d7, [r3]
 8004c9c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004ca0:	ee27 9b06 	vmul.f64	d9, d7, d6
 8004ca4:	4bb8      	ldr	r3, [pc, #736]	; (8004f88 <inicializarTrayectoria+0x5c8>)
 8004ca6:	ed93 7b00 	vldr	d7, [r3]
 8004caa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004cae:	eeb0 0b47 	vmov.f64	d0, d7
 8004cb2:	f00c fe91 	bl	80119d8 <pow>
 8004cb6:	eeb0 7b40 	vmov.f64	d7, d0
 8004cba:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004cbe:	ee38 7b07 	vadd.f64	d7, d8, d7
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8004cc2:	4bb3      	ldr	r3, [pc, #716]	; (8004f90 <inicializarTrayectoria+0x5d0>)
 8004cc4:	ed83 7b00 	vstr	d7, [r3]
			a0Hip1 = XiHip1;
 8004cc8:	49b2      	ldr	r1, [pc, #712]	; (8004f94 <inicializarTrayectoria+0x5d4>)
 8004cca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cce:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8004cd2:	4bae      	ldr	r3, [pc, #696]	; (8004f8c <inicializarTrayectoria+0x5cc>)
 8004cd4:	ed93 6b00 	vldr	d6, [r3]
 8004cd8:	4bab      	ldr	r3, [pc, #684]	; (8004f88 <inicializarTrayectoria+0x5c8>)
 8004cda:	ed93 7b00 	vldr	d7, [r3]
 8004cde:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004ce2:	4bac      	ldr	r3, [pc, #688]	; (8004f94 <inicializarTrayectoria+0x5d4>)
 8004ce4:	ed93 7b00 	vldr	d7, [r3]
 8004ce8:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004cec:	4ba6      	ldr	r3, [pc, #664]	; (8004f88 <inicializarTrayectoria+0x5c8>)
 8004cee:	ed93 7b00 	vldr	d7, [r3]
 8004cf2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004cf6:	eeb0 0b47 	vmov.f64	d0, d7
 8004cfa:	f00c fe6d 	bl	80119d8 <pow>
 8004cfe:	eeb0 6b40 	vmov.f64	d6, d0
 8004d02:	4b9f      	ldr	r3, [pc, #636]	; (8004f80 <inicializarTrayectoria+0x5c0>)
 8004d04:	ed93 7b00 	vldr	d7, [r3]
 8004d08:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d0c:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip1 * pow(tfHip1, 3);
 8004d10:	4b9d      	ldr	r3, [pc, #628]	; (8004f88 <inicializarTrayectoria+0x5c8>)
 8004d12:	ed93 7b00 	vldr	d7, [r3]
 8004d16:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004d1a:	eeb0 0b47 	vmov.f64	d0, d7
 8004d1e:	f00c fe5b 	bl	80119d8 <pow>
 8004d22:	eeb0 6b40 	vmov.f64	d6, d0
 8004d26:	4b95      	ldr	r3, [pc, #596]	; (8004f7c <inicializarTrayectoria+0x5bc>)
 8004d28:	ed93 7b00 	vldr	d7, [r3]
 8004d2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d30:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8004d34:	4b98      	ldr	r3, [pc, #608]	; (8004f98 <inicializarTrayectoria+0x5d8>)
 8004d36:	ed83 7b00 	vstr	d7, [r3]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 1
			a3Hip2 = (-Jerk / 6);
 8004d3a:	ed97 7b00 	vldr	d7, [r7]
 8004d3e:	eeb1 6b47 	vneg.f64	d6, d7
 8004d42:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004d46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d4a:	4b94      	ldr	r3, [pc, #592]	; (8004f9c <inicializarTrayectoria+0x5dc>)
 8004d4c:	ed83 7b00 	vstr	d7, [r3]
			a2Hip2 = Ai / 2;
 8004d50:	4b8c      	ldr	r3, [pc, #560]	; (8004f84 <inicializarTrayectoria+0x5c4>)
 8004d52:	ed93 6b00 	vldr	d6, [r3]
 8004d56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004d5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d5e:	4b90      	ldr	r3, [pc, #576]	; (8004fa0 <inicializarTrayectoria+0x5e0>)
 8004d60:	ed83 7b00 	vstr	d7, [r3]
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8004d64:	4b8f      	ldr	r3, [pc, #572]	; (8004fa4 <inicializarTrayectoria+0x5e4>)
 8004d66:	ed93 6b00 	vldr	d6, [r3]
 8004d6a:	4b8d      	ldr	r3, [pc, #564]	; (8004fa0 <inicializarTrayectoria+0x5e0>)
 8004d6c:	ed93 7b00 	vldr	d7, [r3]
 8004d70:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004d74:	4b83      	ldr	r3, [pc, #524]	; (8004f84 <inicializarTrayectoria+0x5c4>)
 8004d76:	ed93 3b00 	vldr	d3, [r3]
 8004d7a:	ed97 4b00 	vldr	d4, [r7]
 8004d7e:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004d82:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d86:	ee36 6b47 	vsub.f64	d6, d6, d7
					- 3 * a3Hip2 * (Ai / Jerk) * (Ai / Jerk);
 8004d8a:	4b84      	ldr	r3, [pc, #528]	; (8004f9c <inicializarTrayectoria+0x5dc>)
 8004d8c:	ed93 7b00 	vldr	d7, [r3]
 8004d90:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8004d94:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004d98:	4b7a      	ldr	r3, [pc, #488]	; (8004f84 <inicializarTrayectoria+0x5c4>)
 8004d9a:	ed93 3b00 	vldr	d3, [r3]
 8004d9e:	ed97 4b00 	vldr	d4, [r7]
 8004da2:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004da6:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004daa:	4b76      	ldr	r3, [pc, #472]	; (8004f84 <inicializarTrayectoria+0x5c4>)
 8004dac:	ed93 3b00 	vldr	d3, [r3]
 8004db0:	ed97 4b00 	vldr	d4, [r7]
 8004db4:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004db8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004dbc:	ee36 7b47 	vsub.f64	d7, d6, d7
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8004dc0:	4b79      	ldr	r3, [pc, #484]	; (8004fa8 <inicializarTrayectoria+0x5e8>)
 8004dc2:	ed83 7b00 	vstr	d7, [r3]
			tiHip2 = ((ViHip2 - VfHip1) / Ai) + tfHip1;
 8004dc6:	4b78      	ldr	r3, [pc, #480]	; (8004fa8 <inicializarTrayectoria+0x5e8>)
 8004dc8:	ed93 6b00 	vldr	d6, [r3]
 8004dcc:	4b70      	ldr	r3, [pc, #448]	; (8004f90 <inicializarTrayectoria+0x5d0>)
 8004dce:	ed93 7b00 	vldr	d7, [r3]
 8004dd2:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004dd6:	4b6b      	ldr	r3, [pc, #428]	; (8004f84 <inicializarTrayectoria+0x5c4>)
 8004dd8:	ed93 7b00 	vldr	d7, [r3]
 8004ddc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004de0:	4b69      	ldr	r3, [pc, #420]	; (8004f88 <inicializarTrayectoria+0x5c8>)
 8004de2:	ed93 7b00 	vldr	d7, [r3]
 8004de6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dea:	4b70      	ldr	r3, [pc, #448]	; (8004fac <inicializarTrayectoria+0x5ec>)
 8004dec:	ed83 7b00 	vstr	d7, [r3]
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8004df0:	4b64      	ldr	r3, [pc, #400]	; (8004f84 <inicializarTrayectoria+0x5c4>)
 8004df2:	ed93 7b00 	vldr	d7, [r3]
 8004df6:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8004dfa:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8004dfe:	4b6a      	ldr	r3, [pc, #424]	; (8004fa8 <inicializarTrayectoria+0x5e8>)
 8004e00:	ed93 6b00 	vldr	d6, [r3]
 8004e04:	4b62      	ldr	r3, [pc, #392]	; (8004f90 <inicializarTrayectoria+0x5d0>)
 8004e06:	ed93 7b00 	vldr	d7, [r3]
 8004e0a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004e0e:	4b5d      	ldr	r3, [pc, #372]	; (8004f84 <inicializarTrayectoria+0x5c4>)
 8004e10:	ed93 7b00 	vldr	d7, [r3]
 8004e14:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004e18:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e1c:	eeb0 0b45 	vmov.f64	d0, d5
 8004e20:	f00c fdda 	bl	80119d8 <pow>
 8004e24:	eeb0 7b40 	vmov.f64	d7, d0
 8004e28:	ee28 6b07 	vmul.f64	d6, d8, d7
 8004e2c:	4b5a      	ldr	r3, [pc, #360]	; (8004f98 <inicializarTrayectoria+0x5d8>)
 8004e2e:	ed93 7b00 	vldr	d7, [r3]
 8004e32:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ VfHip1 * ((ViHip2 - VfHip1) / Ai);    //x=(Cte/2)*t^2+Vi*t
 8004e36:	4b5c      	ldr	r3, [pc, #368]	; (8004fa8 <inicializarTrayectoria+0x5e8>)
 8004e38:	ed93 5b00 	vldr	d5, [r3]
 8004e3c:	4b54      	ldr	r3, [pc, #336]	; (8004f90 <inicializarTrayectoria+0x5d0>)
 8004e3e:	ed93 7b00 	vldr	d7, [r3]
 8004e42:	ee35 4b47 	vsub.f64	d4, d5, d7
 8004e46:	4b4f      	ldr	r3, [pc, #316]	; (8004f84 <inicializarTrayectoria+0x5c4>)
 8004e48:	ed93 7b00 	vldr	d7, [r3]
 8004e4c:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8004e50:	4b4f      	ldr	r3, [pc, #316]	; (8004f90 <inicializarTrayectoria+0x5d0>)
 8004e52:	ed93 7b00 	vldr	d7, [r3]
 8004e56:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004e5a:	ee36 7b07 	vadd.f64	d7, d6, d7
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8004e5e:	4b54      	ldr	r3, [pc, #336]	; (8004fb0 <inicializarTrayectoria+0x5f0>)
 8004e60:	ed83 7b00 	vstr	d7, [r3]
					//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 2
			tfHip2 = fabs(Ai / (-Jerk)) + tiHip2;
 8004e64:	4b47      	ldr	r3, [pc, #284]	; (8004f84 <inicializarTrayectoria+0x5c4>)
 8004e66:	ed93 7b00 	vldr	d7, [r3]
 8004e6a:	eeb1 5b47 	vneg.f64	d5, d7
 8004e6e:	ed97 6b00 	vldr	d6, [r7]
 8004e72:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004e76:	eeb0 6bc7 	vabs.f64	d6, d7
 8004e7a:	4b4c      	ldr	r3, [pc, #304]	; (8004fac <inicializarTrayectoria+0x5ec>)
 8004e7c:	ed93 7b00 	vldr	d7, [r3]
 8004e80:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e84:	4b4b      	ldr	r3, [pc, #300]	; (8004fb4 <inicializarTrayectoria+0x5f4>)
 8004e86:	ed83 7b00 	vstr	d7, [r3]
			a1Hip2 = ViHip2;
 8004e8a:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <inicializarTrayectoria+0x5e8>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	4949      	ldr	r1, [pc, #292]	; (8004fb8 <inicializarTrayectoria+0x5f8>)
 8004e92:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip2 = XiHip2;
 8004e96:	4b46      	ldr	r3, [pc, #280]	; (8004fb0 <inicializarTrayectoria+0x5f0>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	4947      	ldr	r1, [pc, #284]	; (8004fbc <inicializarTrayectoria+0x5fc>)
 8004e9e:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 8004ea2:	4b44      	ldr	r3, [pc, #272]	; (8004fb4 <inicializarTrayectoria+0x5f4>)
 8004ea4:	ed93 6b00 	vldr	d6, [r3]
 8004ea8:	4b40      	ldr	r3, [pc, #256]	; (8004fac <inicializarTrayectoria+0x5ec>)
 8004eaa:	ed93 7b00 	vldr	d7, [r3]
 8004eae:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004eb2:	4b41      	ldr	r3, [pc, #260]	; (8004fb8 <inicializarTrayectoria+0x5f8>)
 8004eb4:	ed93 7b00 	vldr	d7, [r3]
 8004eb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004ebc:	4b3f      	ldr	r3, [pc, #252]	; (8004fbc <inicializarTrayectoria+0x5fc>)
 8004ebe:	ed93 7b00 	vldr	d7, [r3]
 8004ec2:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ a2Hip2 * pow((tfHip2 - tiHip2), 2.0)
 8004ec6:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <inicializarTrayectoria+0x5f4>)
 8004ec8:	ed93 6b00 	vldr	d6, [r3]
 8004ecc:	4b37      	ldr	r3, [pc, #220]	; (8004fac <inicializarTrayectoria+0x5ec>)
 8004ece:	ed93 7b00 	vldr	d7, [r3]
 8004ed2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ed6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004eda:	eeb0 0b47 	vmov.f64	d0, d7
 8004ede:	f00c fd7b 	bl	80119d8 <pow>
 8004ee2:	eeb0 6b40 	vmov.f64	d6, d0
 8004ee6:	4b2e      	ldr	r3, [pc, #184]	; (8004fa0 <inicializarTrayectoria+0x5e0>)
 8004ee8:	ed93 7b00 	vldr	d7, [r3]
 8004eec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ef0:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip2 * pow((tfHip2 - tiHip2), 3.0);
 8004ef4:	4b2f      	ldr	r3, [pc, #188]	; (8004fb4 <inicializarTrayectoria+0x5f4>)
 8004ef6:	ed93 6b00 	vldr	d6, [r3]
 8004efa:	4b2c      	ldr	r3, [pc, #176]	; (8004fac <inicializarTrayectoria+0x5ec>)
 8004efc:	ed93 7b00 	vldr	d7, [r3]
 8004f00:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f04:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004f08:	eeb0 0b47 	vmov.f64	d0, d7
 8004f0c:	f00c fd64 	bl	80119d8 <pow>
 8004f10:	eeb0 6b40 	vmov.f64	d6, d0
 8004f14:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <inicializarTrayectoria+0x5dc>)
 8004f16:	ed93 7b00 	vldr	d7, [r3]
 8004f1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f1e:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 8004f22:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <inicializarTrayectoria+0x600>)
 8004f24:	ed83 7b00 	vstr	d7, [r3]
		}

		// Condiciones borde:    Se calcula de adelante hacia atras
		DVHip = pow(Af, 2) / (2 * Jerk) * 2;
 8004f28:	4b26      	ldr	r3, [pc, #152]	; (8004fc4 <inicializarTrayectoria+0x604>)
 8004f2a:	ed93 7b00 	vldr	d7, [r3]
 8004f2e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f32:	eeb0 0b47 	vmov.f64	d0, d7
 8004f36:	f00c fd4f 	bl	80119d8 <pow>
 8004f3a:	eeb0 5b40 	vmov.f64	d5, d0
 8004f3e:	ed97 7b00 	vldr	d7, [r7]
 8004f42:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004f46:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004f4a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f4e:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <inicializarTrayectoria+0x608>)
 8004f50:	ed83 7b00 	vstr	d7, [r3]
		if (fabs(DVHip) > fabs(Vm - Vf)) { // Para cuando la velocidad final es muy cercana a la maxima
 8004f54:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <inicializarTrayectoria+0x608>)
 8004f56:	ed93 7b00 	vldr	d7, [r3]
 8004f5a:	eeb0 6bc7 	vabs.f64	d6, d7
 8004f5e:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <inicializarTrayectoria+0x5e4>)
 8004f60:	ed93 5b00 	vldr	d5, [r3]
 8004f64:	ed97 7b06 	vldr	d7, [r7, #24]
 8004f68:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004f6c:	eeb0 7bc7 	vabs.f64	d7, d7
 8004f70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f78:	dd5e      	ble.n	8005038 <inicializarTrayectoria+0x678>
 8004f7a:	e027      	b.n	8004fcc <inicializarTrayectoria+0x60c>
 8004f7c:	24000ab8 	.word	0x24000ab8
 8004f80:	24000ab0 	.word	0x24000ab0
 8004f84:	24000a90 	.word	0x24000a90
 8004f88:	24000b58 	.word	0x24000b58
 8004f8c:	24000aa8 	.word	0x24000aa8
 8004f90:	24000b48 	.word	0x24000b48
 8004f94:	24000aa0 	.word	0x24000aa0
 8004f98:	24000b20 	.word	0x24000b20
 8004f9c:	24000ad8 	.word	0x24000ad8
 8004fa0:	24000ad0 	.word	0x24000ad0
 8004fa4:	24000b40 	.word	0x24000b40
 8004fa8:	24000ba8 	.word	0x24000ba8
 8004fac:	24000b60 	.word	0x24000b60
 8004fb0:	24000bb0 	.word	0x24000bb0
 8004fb4:	24000b68 	.word	0x24000b68
 8004fb8:	24000ac8 	.word	0x24000ac8
 8004fbc:	24000ac0 	.word	0x24000ac0
 8004fc0:	24000b28 	.word	0x24000b28
 8004fc4:	24000a98 	.word	0x24000a98
 8004fc8:	24000b98 	.word	0x24000b98
			if (fabs(Vm - Vf) != 0) {
 8004fcc:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <inicializarTrayectoria+0x6e0>)
 8004fce:	ed93 6b00 	vldr	d6, [r3]
 8004fd2:	ed97 7b06 	vldr	d7, [r7, #24]
 8004fd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004fda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe2:	d029      	beq.n	8005038 <inicializarTrayectoria+0x678>
				Aaux = ((Af) / fabs(Af)) * sqrt(fabs(Vm - Vf) * fabs(Jerk));
 8004fe4:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <inicializarTrayectoria+0x6e4>)
 8004fe6:	ed93 6b00 	vldr	d6, [r3]
 8004fea:	4b2e      	ldr	r3, [pc, #184]	; (80050a4 <inicializarTrayectoria+0x6e4>)
 8004fec:	ed93 7b00 	vldr	d7, [r3]
 8004ff0:	eeb0 7bc7 	vabs.f64	d7, d7
 8004ff4:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8004ff8:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <inicializarTrayectoria+0x6e0>)
 8004ffa:	ed93 6b00 	vldr	d6, [r3]
 8004ffe:	ed97 7b06 	vldr	d7, [r7, #24]
 8005002:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005006:	eeb0 6bc7 	vabs.f64	d6, d7
 800500a:	ed97 7b00 	vldr	d7, [r7]
 800500e:	eeb0 7bc7 	vabs.f64	d7, d7
 8005012:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005016:	eeb0 0b47 	vmov.f64	d0, d7
 800501a:	f00c ff5d 	bl	8011ed8 <sqrt>
 800501e:	eeb0 7b40 	vmov.f64	d7, d0
 8005022:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005026:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <inicializarTrayectoria+0x6e8>)
 8005028:	ed83 7b00 	vstr	d7, [r3]
				Af = Aaux;
 800502c:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <inicializarTrayectoria+0x6e8>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	491c      	ldr	r1, [pc, #112]	; (80050a4 <inicializarTrayectoria+0x6e4>)
 8005034:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		if (fabs(Vm - Vf) == 0) { // Para cuando la velocidad final es igual a la maxima
 8005038:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <inicializarTrayectoria+0x6e0>)
 800503a:	ed93 6b00 	vldr	d6, [r3]
 800503e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005042:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005046:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800504a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504e:	d139      	bne.n	80050c4 <inicializarTrayectoria+0x704>
			VfHip3 = Vf;
 8005050:	4916      	ldr	r1, [pc, #88]	; (80050ac <inicializarTrayectoria+0x6ec>)
 8005052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005056:	e9c1 2300 	strd	r2, r3, [r1]
			XiHip3 = XfHip4;
 800505a:	4915      	ldr	r1, [pc, #84]	; (80050b0 <inicializarTrayectoria+0x6f0>)
 800505c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005060:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 8005064:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <inicializarTrayectoria+0x6f0>)
 8005066:	ed93 6b00 	vldr	d6, [r3]
 800506a:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <inicializarTrayectoria+0x6f4>)
 800506c:	ed93 7b00 	vldr	d7, [r3]
 8005070:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005074:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <inicializarTrayectoria+0x6e0>)
 8005076:	ed93 6b00 	vldr	d6, [r3]
 800507a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800507e:	eeb0 6bc7 	vabs.f64	d6, d7
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <inicializarTrayectoria+0x6f8>)
 8005084:	ed93 7b00 	vldr	d7, [r3]
 8005088:	ee36 7b07 	vadd.f64	d7, d6, d7
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <inicializarTrayectoria+0x6fc>)
 800508e:	ed83 7b00 	vstr	d7, [r3]
			TiempoTotX = tiHip3;
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <inicializarTrayectoria+0x6fc>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	4909      	ldr	r1, [pc, #36]	; (80050c0 <inicializarTrayectoria+0x700>)
 800509a:	e9c1 2300 	strd	r2, r3, [r1]
 800509e:	e18b      	b.n	80053b8 <inicializarTrayectoria+0x9f8>
 80050a0:	24000b40 	.word	0x24000b40
 80050a4:	24000a98 	.word	0x24000a98
 80050a8:	24000bb8 	.word	0x24000bb8
 80050ac:	24000b50 	.word	0x24000b50
 80050b0:	24000b38 	.word	0x24000b38
 80050b4:	24000b28 	.word	0x24000b28
 80050b8:	24000b68 	.word	0x24000b68
 80050bc:	24000b70 	.word	0x24000b70
 80050c0:	24000b88 	.word	0x24000b88
		} else {
			ViHip4 = pow(Af, 2) / (2 * Jerk) + Vf;
 80050c4:	4bc7      	ldr	r3, [pc, #796]	; (80053e4 <inicializarTrayectoria+0xa24>)
 80050c6:	ed93 7b00 	vldr	d7, [r3]
 80050ca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80050ce:	eeb0 0b47 	vmov.f64	d0, d7
 80050d2:	f00c fc81 	bl	80119d8 <pow>
 80050d6:	eeb0 5b40 	vmov.f64	d5, d0
 80050da:	ed97 7b00 	vldr	d7, [r7]
 80050de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80050e2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80050e6:	ed97 7b06 	vldr	d7, [r7, #24]
 80050ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050ee:	4bbe      	ldr	r3, [pc, #760]	; (80053e8 <inicializarTrayectoria+0xa28>)
 80050f0:	ed83 7b00 	vstr	d7, [r3]
			XiHip4 =
					XfHip4
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 80050f4:	4bbb      	ldr	r3, [pc, #748]	; (80053e4 <inicializarTrayectoria+0xa24>)
 80050f6:	ed93 7b00 	vldr	d7, [r3]
 80050fa:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80050fe:	eeb0 0b47 	vmov.f64	d0, d7
 8005102:	f00c fc69 	bl	80119d8 <pow>
 8005106:	eeb0 8b40 	vmov.f64	d8, d0
 800510a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800510e:	ed97 0b00 	vldr	d0, [r7]
 8005112:	f00c fc61 	bl	80119d8 <pow>
 8005116:	eeb0 7b40 	vmov.f64	d7, d0
 800511a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800511e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005122:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8005126:	eeb0 6bc7 	vabs.f64	d6, d7
									* ((ViHip4) / fabs(ViHip4))
 800512a:	4baf      	ldr	r3, [pc, #700]	; (80053e8 <inicializarTrayectoria+0xa28>)
 800512c:	ed93 4b00 	vldr	d4, [r3]
 8005130:	4bad      	ldr	r3, [pc, #692]	; (80053e8 <inicializarTrayectoria+0xa28>)
 8005132:	ed93 7b00 	vldr	d7, [r3]
 8005136:	eeb0 5bc7 	vabs.f64	d5, d7
 800513a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800513e:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ Vf * (fabs(Af / Jerk)));
 8005142:	4ba8      	ldr	r3, [pc, #672]	; (80053e4 <inicializarTrayectoria+0xa24>)
 8005144:	ed93 4b00 	vldr	d4, [r3]
 8005148:	ed97 5b00 	vldr	d5, [r7]
 800514c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005150:	eeb0 5bc7 	vabs.f64	d5, d7
 8005154:	ed97 7b06 	vldr	d7, [r7, #24]
 8005158:	ee25 7b07 	vmul.f64	d7, d5, d7
 800515c:	ee36 7b07 	vadd.f64	d7, d6, d7
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 8005160:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8005164:	ee36 7b47 	vsub.f64	d7, d6, d7
			XiHip4 =
 8005168:	4ba0      	ldr	r3, [pc, #640]	; (80053ec <inicializarTrayectoria+0xa2c>)
 800516a:	ed83 7b00 	vstr	d7, [r3]
			VfHip3 = Vm - pow(Af, 2) / (2 * (Jerk));
 800516e:	4ba0      	ldr	r3, [pc, #640]	; (80053f0 <inicializarTrayectoria+0xa30>)
 8005170:	ed93 8b00 	vldr	d8, [r3]
 8005174:	4b9b      	ldr	r3, [pc, #620]	; (80053e4 <inicializarTrayectoria+0xa24>)
 8005176:	ed93 7b00 	vldr	d7, [r3]
 800517a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800517e:	eeb0 0b47 	vmov.f64	d0, d7
 8005182:	f00c fc29 	bl	80119d8 <pow>
 8005186:	eeb0 5b40 	vmov.f64	d5, d0
 800518a:	ed97 7b00 	vldr	d7, [r7]
 800518e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005192:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005196:	ee38 7b47 	vsub.f64	d7, d8, d7
 800519a:	4b96      	ldr	r3, [pc, #600]	; (80053f4 <inicializarTrayectoria+0xa34>)
 800519c:	ed83 7b00 	vstr	d7, [r3]
			XfHip3 = XiHip4
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 80051a0:	4b92      	ldr	r3, [pc, #584]	; (80053ec <inicializarTrayectoria+0xa2c>)
 80051a2:	ed93 8b00 	vldr	d8, [r3]
 80051a6:	4b90      	ldr	r3, [pc, #576]	; (80053e8 <inicializarTrayectoria+0xa28>)
 80051a8:	ed93 5b00 	vldr	d5, [r3]
 80051ac:	4b8e      	ldr	r3, [pc, #568]	; (80053e8 <inicializarTrayectoria+0xa28>)
 80051ae:	ed93 7b00 	vldr	d7, [r3]
 80051b2:	eeb0 7bc7 	vabs.f64	d7, d7
 80051b6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80051ba:	4b8a      	ldr	r3, [pc, #552]	; (80053e4 <inicializarTrayectoria+0xa24>)
 80051bc:	ed93 7b00 	vldr	d7, [r3]
 80051c0:	eeb0 5bc7 	vabs.f64	d5, d7
 80051c4:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80051c8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80051cc:	ee26 9b07 	vmul.f64	d9, d6, d7
							* pow(((ViHip4 - VfHip3) / Af), 2)
 80051d0:	4b85      	ldr	r3, [pc, #532]	; (80053e8 <inicializarTrayectoria+0xa28>)
 80051d2:	ed93 6b00 	vldr	d6, [r3]
 80051d6:	4b87      	ldr	r3, [pc, #540]	; (80053f4 <inicializarTrayectoria+0xa34>)
 80051d8:	ed93 7b00 	vldr	d7, [r3]
 80051dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80051e0:	4b80      	ldr	r3, [pc, #512]	; (80053e4 <inicializarTrayectoria+0xa24>)
 80051e2:	ed93 7b00 	vldr	d7, [r3]
 80051e6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80051ea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051ee:	eeb0 0b45 	vmov.f64	d0, d5
 80051f2:	f00c fbf1 	bl	80119d8 <pow>
 80051f6:	eeb0 7b40 	vmov.f64	d7, d0
 80051fa:	ee29 6b07 	vmul.f64	d6, d9, d7
							+ ViHip4 * ((ViHip4 - VfHip3) / Af));
 80051fe:	4b7a      	ldr	r3, [pc, #488]	; (80053e8 <inicializarTrayectoria+0xa28>)
 8005200:	ed93 5b00 	vldr	d5, [r3]
 8005204:	4b7b      	ldr	r3, [pc, #492]	; (80053f4 <inicializarTrayectoria+0xa34>)
 8005206:	ed93 7b00 	vldr	d7, [r3]
 800520a:	ee35 4b47 	vsub.f64	d4, d5, d7
 800520e:	4b75      	ldr	r3, [pc, #468]	; (80053e4 <inicializarTrayectoria+0xa24>)
 8005210:	ed93 7b00 	vldr	d7, [r3]
 8005214:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8005218:	4b73      	ldr	r3, [pc, #460]	; (80053e8 <inicializarTrayectoria+0xa28>)
 800521a:	ed93 7b00 	vldr	d7, [r3]
 800521e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005222:	ee36 7b07 	vadd.f64	d7, d6, d7
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 8005226:	ee38 7b47 	vsub.f64	d7, d8, d7
			XfHip3 = XiHip4
 800522a:	4b73      	ldr	r3, [pc, #460]	; (80053f8 <inicializarTrayectoria+0xa38>)
 800522c:	ed83 7b00 	vstr	d7, [r3]
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 8005230:	4b6c      	ldr	r3, [pc, #432]	; (80053e4 <inicializarTrayectoria+0xa24>)
 8005232:	ed93 5b00 	vldr	d5, [r3]
 8005236:	ed97 7b00 	vldr	d7, [r7]
 800523a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800523e:	4b6c      	ldr	r3, [pc, #432]	; (80053f0 <inicializarTrayectoria+0xa30>)
 8005240:	ed93 7b00 	vldr	d7, [r3]
 8005244:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005248:	4b6b      	ldr	r3, [pc, #428]	; (80053f8 <inicializarTrayectoria+0xa38>)
 800524a:	ed93 7b00 	vldr	d7, [r3]
 800524e:	ee36 8b07 	vadd.f64	d8, d6, d7
					- (pow(Af, 3) / (6 * (pow(-Jerk, 2))));
 8005252:	4b64      	ldr	r3, [pc, #400]	; (80053e4 <inicializarTrayectoria+0xa24>)
 8005254:	ed93 7b00 	vldr	d7, [r3]
 8005258:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800525c:	eeb0 0b47 	vmov.f64	d0, d7
 8005260:	f00c fbba 	bl	80119d8 <pow>
 8005264:	eeb0 9b40 	vmov.f64	d9, d0
 8005268:	ed97 7b00 	vldr	d7, [r7]
 800526c:	eeb1 7b47 	vneg.f64	d7, d7
 8005270:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005274:	eeb0 0b47 	vmov.f64	d0, d7
 8005278:	f00c fbae 	bl	80119d8 <pow>
 800527c:	eeb0 7b40 	vmov.f64	d7, d0
 8005280:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8005284:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005288:	ee89 7b06 	vdiv.f64	d7, d9, d6
 800528c:	ee38 7b47 	vsub.f64	d7, d8, d7
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 8005290:	4b5a      	ldr	r3, [pc, #360]	; (80053fc <inicializarTrayectoria+0xa3c>)
 8005292:	ed83 7b00 	vstr	d7, [r3]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 8005296:	4b59      	ldr	r3, [pc, #356]	; (80053fc <inicializarTrayectoria+0xa3c>)
 8005298:	ed93 6b00 	vldr	d6, [r3]
 800529c:	4b58      	ldr	r3, [pc, #352]	; (8005400 <inicializarTrayectoria+0xa40>)
 800529e:	ed93 7b00 	vldr	d7, [r3]
 80052a2:	ee36 5b47 	vsub.f64	d5, d6, d7
 80052a6:	4b52      	ldr	r3, [pc, #328]	; (80053f0 <inicializarTrayectoria+0xa30>)
 80052a8:	ed93 6b00 	vldr	d6, [r3]
 80052ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80052b0:	eeb0 6bc7 	vabs.f64	d6, d7
 80052b4:	4b53      	ldr	r3, [pc, #332]	; (8005404 <inicializarTrayectoria+0xa44>)
 80052b6:	ed93 7b00 	vldr	d7, [r3]
 80052ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80052be:	4b52      	ldr	r3, [pc, #328]	; (8005408 <inicializarTrayectoria+0xa48>)
 80052c0:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 3
			a3Hip3 = (-Jerk / 6);
 80052c4:	ed97 7b00 	vldr	d7, [r7]
 80052c8:	eeb1 6b47 	vneg.f64	d6, d7
 80052cc:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80052d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80052d4:	4b4d      	ldr	r3, [pc, #308]	; (800540c <inicializarTrayectoria+0xa4c>)
 80052d6:	ed83 7b00 	vstr	d7, [r3]
			a2Hip3 = 0;
 80052da:	494d      	ldr	r1, [pc, #308]	; (8005410 <inicializarTrayectoria+0xa50>)
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip3 = (Af / (-Jerk)) + tiHip3;
 80052e8:	4b3e      	ldr	r3, [pc, #248]	; (80053e4 <inicializarTrayectoria+0xa24>)
 80052ea:	ed93 7b00 	vldr	d7, [r3]
 80052ee:	eeb1 5b47 	vneg.f64	d5, d7
 80052f2:	ed97 7b00 	vldr	d7, [r7]
 80052f6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80052fa:	4b43      	ldr	r3, [pc, #268]	; (8005408 <inicializarTrayectoria+0xa48>)
 80052fc:	ed93 7b00 	vldr	d7, [r3]
 8005300:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005304:	4b43      	ldr	r3, [pc, #268]	; (8005414 <inicializarTrayectoria+0xa54>)
 8005306:	ed83 7b00 	vstr	d7, [r3]
			a1Hip3 = Vm;
 800530a:	4b39      	ldr	r3, [pc, #228]	; (80053f0 <inicializarTrayectoria+0xa30>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	4941      	ldr	r1, [pc, #260]	; (8005418 <inicializarTrayectoria+0xa58>)
 8005312:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip3 = XiHip3;
 8005316:	4b39      	ldr	r3, [pc, #228]	; (80053fc <inicializarTrayectoria+0xa3c>)
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	493f      	ldr	r1, [pc, #252]	; (800541c <inicializarTrayectoria+0xa5c>)
 800531e:	e9c1 2300 	strd	r2, r3, [r1]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 2
			tiHip4 = ((ViHip4 - VfHip3) / Af) + tfHip3;
 8005322:	4b31      	ldr	r3, [pc, #196]	; (80053e8 <inicializarTrayectoria+0xa28>)
 8005324:	ed93 6b00 	vldr	d6, [r3]
 8005328:	4b32      	ldr	r3, [pc, #200]	; (80053f4 <inicializarTrayectoria+0xa34>)
 800532a:	ed93 7b00 	vldr	d7, [r3]
 800532e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005332:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <inicializarTrayectoria+0xa24>)
 8005334:	ed93 7b00 	vldr	d7, [r3]
 8005338:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800533c:	4b35      	ldr	r3, [pc, #212]	; (8005414 <inicializarTrayectoria+0xa54>)
 800533e:	ed93 7b00 	vldr	d7, [r3]
 8005342:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005346:	4b36      	ldr	r3, [pc, #216]	; (8005420 <inicializarTrayectoria+0xa60>)
 8005348:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 4
			a3Hip4 = Jerk / 6;
 800534c:	ed97 6b00 	vldr	d6, [r7]
 8005350:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005354:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005358:	4b32      	ldr	r3, [pc, #200]	; (8005424 <inicializarTrayectoria+0xa64>)
 800535a:	ed83 7b00 	vstr	d7, [r3]
			a2Hip4 = Af / 2;
 800535e:	4b21      	ldr	r3, [pc, #132]	; (80053e4 <inicializarTrayectoria+0xa24>)
 8005360:	ed93 6b00 	vldr	d6, [r3]
 8005364:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005368:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800536c:	4b2e      	ldr	r3, [pc, #184]	; (8005428 <inicializarTrayectoria+0xa68>)
 800536e:	ed83 7b00 	vstr	d7, [r3]
			tfHip4 = fabs(Af / Jerk) + tiHip4;
 8005372:	4b1c      	ldr	r3, [pc, #112]	; (80053e4 <inicializarTrayectoria+0xa24>)
 8005374:	ed93 5b00 	vldr	d5, [r3]
 8005378:	ed97 6b00 	vldr	d6, [r7]
 800537c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005380:	eeb0 6bc7 	vabs.f64	d6, d7
 8005384:	4b26      	ldr	r3, [pc, #152]	; (8005420 <inicializarTrayectoria+0xa60>)
 8005386:	ed93 7b00 	vldr	d7, [r3]
 800538a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800538e:	4b27      	ldr	r3, [pc, #156]	; (800542c <inicializarTrayectoria+0xa6c>)
 8005390:	ed83 7b00 	vstr	d7, [r3]
			a1Hip4 = ViHip4;
 8005394:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <inicializarTrayectoria+0xa28>)
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	4925      	ldr	r1, [pc, #148]	; (8005430 <inicializarTrayectoria+0xa70>)
 800539c:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip4 = XiHip4;
 80053a0:	4b12      	ldr	r3, [pc, #72]	; (80053ec <inicializarTrayectoria+0xa2c>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	4923      	ldr	r1, [pc, #140]	; (8005434 <inicializarTrayectoria+0xa74>)
 80053a8:	e9c1 2300 	strd	r2, r3, [r1]
			TiempoTotX = tfHip4;
 80053ac:	4b1f      	ldr	r3, [pc, #124]	; (800542c <inicializarTrayectoria+0xa6c>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	4921      	ldr	r1, [pc, #132]	; (8005438 <inicializarTrayectoria+0xa78>)
 80053b4:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (XiHip1 < XfHip4) {      // Por si va en un sentido o en el otro
 80053b8:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80053bc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80053c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80053c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c8:	d553      	bpl.n	8005472 <inicializarTrayectoria+0xab2>
			if (XiHip3 < XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 80053ca:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <inicializarTrayectoria+0xa3c>)
 80053cc:	ed93 6b00 	vldr	d6, [r3]
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <inicializarTrayectoria+0xa40>)
 80053d2:	ed93 7b00 	vldr	d7, [r3]
 80053d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	d42d      	bmi.n	800543c <inicializarTrayectoria+0xa7c>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 80053e0:	e077      	b.n	80054d2 <inicializarTrayectoria+0xb12>
 80053e2:	bf00      	nop
 80053e4:	24000a98 	.word	0x24000a98
 80053e8:	24000bc0 	.word	0x24000bc0
 80053ec:	24000bc8 	.word	0x24000bc8
 80053f0:	24000b40 	.word	0x24000b40
 80053f4:	24000b50 	.word	0x24000b50
 80053f8:	24000b30 	.word	0x24000b30
 80053fc:	24000b38 	.word	0x24000b38
 8005400:	24000b28 	.word	0x24000b28
 8005404:	24000b68 	.word	0x24000b68
 8005408:	24000b70 	.word	0x24000b70
 800540c:	24000af8 	.word	0x24000af8
 8005410:	24000af0 	.word	0x24000af0
 8005414:	24000b78 	.word	0x24000b78
 8005418:	24000ae8 	.word	0x24000ae8
 800541c:	24000ae0 	.word	0x24000ae0
 8005420:	24000b80 	.word	0x24000b80
 8005424:	24000b18 	.word	0x24000b18
 8005428:	24000b10 	.word	0x24000b10
 800542c:	24000b90 	.word	0x24000b90
 8005430:	24000b08 	.word	0x24000b08
 8005434:	24000b00 	.word	0x24000b00
 8005438:	24000b88 	.word	0x24000b88
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 800543c:	4b2e      	ldr	r3, [pc, #184]	; (80054f8 <inicializarTrayectoria+0xb38>)
 800543e:	ed93 6b00 	vldr	d6, [r3]
 8005442:	ed97 7b04 	vldr	d7, [r7, #16]
 8005446:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80054f0 <inicializarTrayectoria+0xb30>
 800544a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800544e:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <inicializarTrayectoria+0xb38>)
 8005450:	ed93 3b00 	vldr	d3, [r3]
 8005454:	4b28      	ldr	r3, [pc, #160]	; (80054f8 <inicializarTrayectoria+0xb38>)
 8005456:	ed93 7b00 	vldr	d7, [r3]
 800545a:	eeb0 4bc7 	vabs.f64	d4, d7
 800545e:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005462:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005466:	ee36 7b47 	vsub.f64	d7, d6, d7
 800546a:	4b23      	ldr	r3, [pc, #140]	; (80054f8 <inicializarTrayectoria+0xb38>)
 800546c:	ed83 7b00 	vstr	d7, [r3]
 8005470:	e025      	b.n	80054be <inicializarTrayectoria+0xafe>
			}
		} else {
			if (XiHip3 > XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 8005472:	4b22      	ldr	r3, [pc, #136]	; (80054fc <inicializarTrayectoria+0xb3c>)
 8005474:	ed93 6b00 	vldr	d6, [r3]
 8005478:	4b21      	ldr	r3, [pc, #132]	; (8005500 <inicializarTrayectoria+0xb40>)
 800547a:	ed93 7b00 	vldr	d7, [r3]
 800547e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005486:	dc00      	bgt.n	800548a <inicializarTrayectoria+0xaca>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8005488:	e023      	b.n	80054d2 <inicializarTrayectoria+0xb12>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 800548a:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <inicializarTrayectoria+0xb38>)
 800548c:	ed93 6b00 	vldr	d6, [r3]
 8005490:	ed97 7b04 	vldr	d7, [r7, #16]
 8005494:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80054f0 <inicializarTrayectoria+0xb30>
 8005498:	ee27 5b05 	vmul.f64	d5, d7, d5
 800549c:	4b16      	ldr	r3, [pc, #88]	; (80054f8 <inicializarTrayectoria+0xb38>)
 800549e:	ed93 3b00 	vldr	d3, [r3]
 80054a2:	4b15      	ldr	r3, [pc, #84]	; (80054f8 <inicializarTrayectoria+0xb38>)
 80054a4:	ed93 7b00 	vldr	d7, [r3]
 80054a8:	eeb0 4bc7 	vabs.f64	d4, d7
 80054ac:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80054b0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80054b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80054b8:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <inicializarTrayectoria+0xb38>)
 80054ba:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 80054be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80054c2:	3301      	adds	r3, #1
 80054c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80054c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80054cc:	2b63      	cmp	r3, #99	; 0x63
 80054ce:	f67f aaf6 	bls.w	8004abe <inicializarTrayectoria+0xfe>
			}
		}
	}
	TiempoTotal = tfHip4;
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <inicializarTrayectoria+0xb44>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	490b      	ldr	r1, [pc, #44]	; (8005508 <inicializarTrayectoria+0xb48>)
 80054da:	e9c1 2300 	strd	r2, r3, [r1]
}
 80054de:	bf00      	nop
 80054e0:	3740      	adds	r7, #64	; 0x40
 80054e2:	46bd      	mov	sp, r7
 80054e4:	ecbd 8b04 	vpop	{d8-d9}
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	f3af 8000 	nop.w
 80054f0:	47ae147b 	.word	0x47ae147b
 80054f4:	3f847ae1 	.word	0x3f847ae1
 80054f8:	24000b40 	.word	0x24000b40
 80054fc:	24000b38 	.word	0x24000b38
 8005500:	24000b28 	.word	0x24000b28
 8005504:	24000b90 	.word	0x24000b90
 8005508:	24000488 	.word	0x24000488

0800550c <obtenerVelCurva>:

void obtenerVelCurva(double t) {
 800550c:	b580      	push	{r7, lr}
 800550e:	ed2d 8b04 	vpush	{d8-d9}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	ed87 0b00 	vstr	d0, [r7]
	/*   -----------------------------------------------------------------------
	 * 	 Funcion que devuelve la velocidad de la trayectoria en un instante dado
	 *	 Entrada: tiempo actual,
	 *	 Salida:  velocidad lineal en m/s en el instante de tiempo t
	 -----------------------------------------------------------------------*/
	if (t <= tfHip1) {                                      // Hiperbola 1
 800551a:	4bc3      	ldr	r3, [pc, #780]	; (8005828 <obtenerVelCurva+0x31c>)
 800551c:	ed93 7b00 	vldr	d7, [r3]
 8005520:	ed97 6b00 	vldr	d6, [r7]
 8005524:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800552c:	d866      	bhi.n	80055fc <obtenerVelCurva+0xf0>
		X = a0Hip1 + a1Hip1 * t + a2Hip1 * pow(t, 2) + a3Hip1 * pow(t, 3);
 800552e:	4bbf      	ldr	r3, [pc, #764]	; (800582c <obtenerVelCurva+0x320>)
 8005530:	ed93 6b00 	vldr	d6, [r3]
 8005534:	ed97 7b00 	vldr	d7, [r7]
 8005538:	ee26 6b07 	vmul.f64	d6, d6, d7
 800553c:	4bbc      	ldr	r3, [pc, #752]	; (8005830 <obtenerVelCurva+0x324>)
 800553e:	ed93 7b00 	vldr	d7, [r3]
 8005542:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005546:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800554a:	ed97 0b00 	vldr	d0, [r7]
 800554e:	f00c fa43 	bl	80119d8 <pow>
 8005552:	eeb0 6b40 	vmov.f64	d6, d0
 8005556:	4bb7      	ldr	r3, [pc, #732]	; (8005834 <obtenerVelCurva+0x328>)
 8005558:	ed93 7b00 	vldr	d7, [r3]
 800555c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005560:	ee38 8b07 	vadd.f64	d8, d8, d7
 8005564:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005568:	ed97 0b00 	vldr	d0, [r7]
 800556c:	f00c fa34 	bl	80119d8 <pow>
 8005570:	eeb0 6b40 	vmov.f64	d6, d0
 8005574:	4bb0      	ldr	r3, [pc, #704]	; (8005838 <obtenerVelCurva+0x32c>)
 8005576:	ed93 7b00 	vldr	d7, [r3]
 800557a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800557e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005582:	4bae      	ldr	r3, [pc, #696]	; (800583c <obtenerVelCurva+0x330>)
 8005584:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip1 + 2.0 * a2Hip1 * t + 3 * a3Hip1 * pow(t, 2);
 8005588:	4baa      	ldr	r3, [pc, #680]	; (8005834 <obtenerVelCurva+0x328>)
 800558a:	ed93 7b00 	vldr	d7, [r3]
 800558e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005592:	ed97 7b00 	vldr	d7, [r7]
 8005596:	ee26 6b07 	vmul.f64	d6, d6, d7
 800559a:	4ba4      	ldr	r3, [pc, #656]	; (800582c <obtenerVelCurva+0x320>)
 800559c:	ed93 7b00 	vldr	d7, [r3]
 80055a0:	ee36 8b07 	vadd.f64	d8, d6, d7
 80055a4:	4ba4      	ldr	r3, [pc, #656]	; (8005838 <obtenerVelCurva+0x32c>)
 80055a6:	ed93 7b00 	vldr	d7, [r3]
 80055aa:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80055ae:	ee27 9b06 	vmul.f64	d9, d7, d6
 80055b2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055b6:	ed97 0b00 	vldr	d0, [r7]
 80055ba:	f00c fa0d 	bl	80119d8 <pow>
 80055be:	eeb0 7b40 	vmov.f64	d7, d0
 80055c2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80055c6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80055ca:	4b9d      	ldr	r3, [pc, #628]	; (8005840 <obtenerVelCurva+0x334>)
 80055cc:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip1 + 6 * a3Hip1 * t;
 80055d0:	4b98      	ldr	r3, [pc, #608]	; (8005834 <obtenerVelCurva+0x328>)
 80055d2:	ed93 7b00 	vldr	d7, [r3]
 80055d6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80055da:	4b97      	ldr	r3, [pc, #604]	; (8005838 <obtenerVelCurva+0x32c>)
 80055dc:	ed93 7b00 	vldr	d7, [r3]
 80055e0:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80055e4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80055e8:	ed97 7b00 	vldr	d7, [r7]
 80055ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80055f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055f4:	4b93      	ldr	r3, [pc, #588]	; (8005844 <obtenerVelCurva+0x338>)
 80055f6:	ed83 7b00 	vstr	d7, [r3]
		X = 0;
		DX = 0;
		DDX = 0;
	}

}
 80055fa:	e30e      	b.n	8005c1a <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip2)) {                              // Parabola 1
 80055fc:	4b92      	ldr	r3, [pc, #584]	; (8005848 <obtenerVelCurva+0x33c>)
 80055fe:	ed93 7b00 	vldr	d7, [r3]
 8005602:	ed97 6b00 	vldr	d6, [r7]
 8005606:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560e:	d848      	bhi.n	80056a2 <obtenerVelCurva+0x196>
		X = (Ai / 2) * pow((t - tfHip1), 2) + VfHip1 * (t - tfHip1) + XfHip1;
 8005610:	4b8e      	ldr	r3, [pc, #568]	; (800584c <obtenerVelCurva+0x340>)
 8005612:	ed93 7b00 	vldr	d7, [r3]
 8005616:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800561a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 800561e:	4b82      	ldr	r3, [pc, #520]	; (8005828 <obtenerVelCurva+0x31c>)
 8005620:	ed93 7b00 	vldr	d7, [r3]
 8005624:	ed97 6b00 	vldr	d6, [r7]
 8005628:	ee36 7b47 	vsub.f64	d7, d6, d7
 800562c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005630:	eeb0 0b47 	vmov.f64	d0, d7
 8005634:	f00c f9d0 	bl	80119d8 <pow>
 8005638:	eeb0 7b40 	vmov.f64	d7, d0
 800563c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8005640:	4b79      	ldr	r3, [pc, #484]	; (8005828 <obtenerVelCurva+0x31c>)
 8005642:	ed93 7b00 	vldr	d7, [r3]
 8005646:	ed97 5b00 	vldr	d5, [r7]
 800564a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800564e:	4b80      	ldr	r3, [pc, #512]	; (8005850 <obtenerVelCurva+0x344>)
 8005650:	ed93 7b00 	vldr	d7, [r3]
 8005654:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005658:	ee36 6b07 	vadd.f64	d6, d6, d7
 800565c:	4b7d      	ldr	r3, [pc, #500]	; (8005854 <obtenerVelCurva+0x348>)
 800565e:	ed93 7b00 	vldr	d7, [r3]
 8005662:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005666:	4b75      	ldr	r3, [pc, #468]	; (800583c <obtenerVelCurva+0x330>)
 8005668:	ed83 7b00 	vstr	d7, [r3]
		DX = Ai * (t - tfHip1) + VfHip1;
 800566c:	4b6e      	ldr	r3, [pc, #440]	; (8005828 <obtenerVelCurva+0x31c>)
 800566e:	ed93 7b00 	vldr	d7, [r3]
 8005672:	ed97 6b00 	vldr	d6, [r7]
 8005676:	ee36 6b47 	vsub.f64	d6, d6, d7
 800567a:	4b74      	ldr	r3, [pc, #464]	; (800584c <obtenerVelCurva+0x340>)
 800567c:	ed93 7b00 	vldr	d7, [r3]
 8005680:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005684:	4b72      	ldr	r3, [pc, #456]	; (8005850 <obtenerVelCurva+0x344>)
 8005686:	ed93 7b00 	vldr	d7, [r3]
 800568a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800568e:	4b6c      	ldr	r3, [pc, #432]	; (8005840 <obtenerVelCurva+0x334>)
 8005690:	ed83 7b00 	vstr	d7, [r3]
		DDX = Ai;
 8005694:	4b6d      	ldr	r3, [pc, #436]	; (800584c <obtenerVelCurva+0x340>)
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	496a      	ldr	r1, [pc, #424]	; (8005844 <obtenerVelCurva+0x338>)
 800569c:	e9c1 2300 	strd	r2, r3, [r1]
}
 80056a0:	e2bb      	b.n	8005c1a <obtenerVelCurva+0x70e>
	} else if (t <= (tfHip2)) {                            // Hiperbola 2
 80056a2:	4b6d      	ldr	r3, [pc, #436]	; (8005858 <obtenerVelCurva+0x34c>)
 80056a4:	ed93 7b00 	vldr	d7, [r3]
 80056a8:	ed97 6b00 	vldr	d6, [r7]
 80056ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80056b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b4:	f200 808b 	bhi.w	80057ce <obtenerVelCurva+0x2c2>
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 80056b8:	4b63      	ldr	r3, [pc, #396]	; (8005848 <obtenerVelCurva+0x33c>)
 80056ba:	ed93 7b00 	vldr	d7, [r3]
 80056be:	ed97 6b00 	vldr	d6, [r7]
 80056c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80056c6:	4b65      	ldr	r3, [pc, #404]	; (800585c <obtenerVelCurva+0x350>)
 80056c8:	ed93 7b00 	vldr	d7, [r3]
 80056cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80056d0:	4b63      	ldr	r3, [pc, #396]	; (8005860 <obtenerVelCurva+0x354>)
 80056d2:	ed93 7b00 	vldr	d7, [r3]
 80056d6:	ee36 8b07 	vadd.f64	d8, d6, d7
 80056da:	4b5b      	ldr	r3, [pc, #364]	; (8005848 <obtenerVelCurva+0x33c>)
 80056dc:	ed93 7b00 	vldr	d7, [r3]
 80056e0:	ed97 6b00 	vldr	d6, [r7]
 80056e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80056e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80056ec:	eeb0 0b47 	vmov.f64	d0, d7
 80056f0:	f00c f972 	bl	80119d8 <pow>
 80056f4:	eeb0 6b40 	vmov.f64	d6, d0
 80056f8:	4b5a      	ldr	r3, [pc, #360]	; (8005864 <obtenerVelCurva+0x358>)
 80056fa:	ed93 7b00 	vldr	d7, [r3]
 80056fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005702:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip2 * pow((t - tiHip2), 3);
 8005706:	4b50      	ldr	r3, [pc, #320]	; (8005848 <obtenerVelCurva+0x33c>)
 8005708:	ed93 7b00 	vldr	d7, [r3]
 800570c:	ed97 6b00 	vldr	d6, [r7]
 8005710:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005714:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005718:	eeb0 0b47 	vmov.f64	d0, d7
 800571c:	f00c f95c 	bl	80119d8 <pow>
 8005720:	eeb0 6b40 	vmov.f64	d6, d0
 8005724:	4b50      	ldr	r3, [pc, #320]	; (8005868 <obtenerVelCurva+0x35c>)
 8005726:	ed93 7b00 	vldr	d7, [r3]
 800572a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800572e:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 8005732:	4b42      	ldr	r3, [pc, #264]	; (800583c <obtenerVelCurva+0x330>)
 8005734:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 8005738:	4b4a      	ldr	r3, [pc, #296]	; (8005864 <obtenerVelCurva+0x358>)
 800573a:	ed93 7b00 	vldr	d7, [r3]
 800573e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005742:	4b41      	ldr	r3, [pc, #260]	; (8005848 <obtenerVelCurva+0x33c>)
 8005744:	ed93 7b00 	vldr	d7, [r3]
 8005748:	ed97 5b00 	vldr	d5, [r7]
 800574c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005750:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005754:	4b41      	ldr	r3, [pc, #260]	; (800585c <obtenerVelCurva+0x350>)
 8005756:	ed93 7b00 	vldr	d7, [r3]
 800575a:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip2 * pow((t - tiHip2), 2);
 800575e:	4b42      	ldr	r3, [pc, #264]	; (8005868 <obtenerVelCurva+0x35c>)
 8005760:	ed93 7b00 	vldr	d7, [r3]
 8005764:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005768:	ee27 9b06 	vmul.f64	d9, d7, d6
 800576c:	4b36      	ldr	r3, [pc, #216]	; (8005848 <obtenerVelCurva+0x33c>)
 800576e:	ed93 7b00 	vldr	d7, [r3]
 8005772:	ed97 6b00 	vldr	d6, [r7]
 8005776:	ee36 7b47 	vsub.f64	d7, d6, d7
 800577a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800577e:	eeb0 0b47 	vmov.f64	d0, d7
 8005782:	f00c f929 	bl	80119d8 <pow>
 8005786:	eeb0 7b40 	vmov.f64	d7, d0
 800578a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800578e:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 8005792:	4b2b      	ldr	r3, [pc, #172]	; (8005840 <obtenerVelCurva+0x334>)
 8005794:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip2 + 6 * a3Hip2 * (t - tiHip2);
 8005798:	4b32      	ldr	r3, [pc, #200]	; (8005864 <obtenerVelCurva+0x358>)
 800579a:	ed93 7b00 	vldr	d7, [r3]
 800579e:	ee37 6b07 	vadd.f64	d6, d7, d7
 80057a2:	4b31      	ldr	r3, [pc, #196]	; (8005868 <obtenerVelCurva+0x35c>)
 80057a4:	ed93 7b00 	vldr	d7, [r3]
 80057a8:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80057ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 80057b0:	4b25      	ldr	r3, [pc, #148]	; (8005848 <obtenerVelCurva+0x33c>)
 80057b2:	ed93 7b00 	vldr	d7, [r3]
 80057b6:	ed97 4b00 	vldr	d4, [r7]
 80057ba:	ee34 7b47 	vsub.f64	d7, d4, d7
 80057be:	ee25 7b07 	vmul.f64	d7, d5, d7
 80057c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057c6:	4b1f      	ldr	r3, [pc, #124]	; (8005844 <obtenerVelCurva+0x338>)
 80057c8:	ed83 7b00 	vstr	d7, [r3]
}
 80057cc:	e225      	b.n	8005c1a <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip3)) {                              // Recta
 80057ce:	4b27      	ldr	r3, [pc, #156]	; (800586c <obtenerVelCurva+0x360>)
 80057d0:	ed93 7b00 	vldr	d7, [r3]
 80057d4:	ed97 6b00 	vldr	d6, [r7]
 80057d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80057dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e0:	d84a      	bhi.n	8005878 <obtenerVelCurva+0x36c>
		X = Vm * (t - tfHip2) + XfHip2;
 80057e2:	4b1d      	ldr	r3, [pc, #116]	; (8005858 <obtenerVelCurva+0x34c>)
 80057e4:	ed93 7b00 	vldr	d7, [r3]
 80057e8:	ed97 6b00 	vldr	d6, [r7]
 80057ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 80057f0:	4b1f      	ldr	r3, [pc, #124]	; (8005870 <obtenerVelCurva+0x364>)
 80057f2:	ed93 7b00 	vldr	d7, [r3]
 80057f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80057fa:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <obtenerVelCurva+0x368>)
 80057fc:	ed93 7b00 	vldr	d7, [r3]
 8005800:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005804:	4b0d      	ldr	r3, [pc, #52]	; (800583c <obtenerVelCurva+0x330>)
 8005806:	ed83 7b00 	vstr	d7, [r3]
		DX = Vm;
 800580a:	4b19      	ldr	r3, [pc, #100]	; (8005870 <obtenerVelCurva+0x364>)
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	490b      	ldr	r1, [pc, #44]	; (8005840 <obtenerVelCurva+0x334>)
 8005812:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005816:	490b      	ldr	r1, [pc, #44]	; (8005844 <obtenerVelCurva+0x338>)
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005824:	e1f9      	b.n	8005c1a <obtenerVelCurva+0x70e>
 8005826:	bf00      	nop
 8005828:	24000b58 	.word	0x24000b58
 800582c:	24000aa8 	.word	0x24000aa8
 8005830:	24000aa0 	.word	0x24000aa0
 8005834:	24000ab0 	.word	0x24000ab0
 8005838:	24000ab8 	.word	0x24000ab8
 800583c:	240004c0 	.word	0x240004c0
 8005840:	240004c8 	.word	0x240004c8
 8005844:	240004d0 	.word	0x240004d0
 8005848:	24000b60 	.word	0x24000b60
 800584c:	24000a90 	.word	0x24000a90
 8005850:	24000b48 	.word	0x24000b48
 8005854:	24000b20 	.word	0x24000b20
 8005858:	24000b68 	.word	0x24000b68
 800585c:	24000ac8 	.word	0x24000ac8
 8005860:	24000ac0 	.word	0x24000ac0
 8005864:	24000ad0 	.word	0x24000ad0
 8005868:	24000ad8 	.word	0x24000ad8
 800586c:	24000b70 	.word	0x24000b70
 8005870:	24000b40 	.word	0x24000b40
 8005874:	24000b28 	.word	0x24000b28
	} else if (t <= (tfHip3)) {                            // Hiperbola 3
 8005878:	4bcb      	ldr	r3, [pc, #812]	; (8005ba8 <obtenerVelCurva+0x69c>)
 800587a:	ed93 7b00 	vldr	d7, [r3]
 800587e:	ed97 6b00 	vldr	d6, [r7]
 8005882:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588a:	f200 808b 	bhi.w	80059a4 <obtenerVelCurva+0x498>
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 800588e:	4bc7      	ldr	r3, [pc, #796]	; (8005bac <obtenerVelCurva+0x6a0>)
 8005890:	ed93 7b00 	vldr	d7, [r3]
 8005894:	ed97 6b00 	vldr	d6, [r7]
 8005898:	ee36 6b47 	vsub.f64	d6, d6, d7
 800589c:	4bc4      	ldr	r3, [pc, #784]	; (8005bb0 <obtenerVelCurva+0x6a4>)
 800589e:	ed93 7b00 	vldr	d7, [r3]
 80058a2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80058a6:	4bc3      	ldr	r3, [pc, #780]	; (8005bb4 <obtenerVelCurva+0x6a8>)
 80058a8:	ed93 7b00 	vldr	d7, [r3]
 80058ac:	ee36 8b07 	vadd.f64	d8, d6, d7
 80058b0:	4bbe      	ldr	r3, [pc, #760]	; (8005bac <obtenerVelCurva+0x6a0>)
 80058b2:	ed93 7b00 	vldr	d7, [r3]
 80058b6:	ed97 6b00 	vldr	d6, [r7]
 80058ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80058be:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058c2:	eeb0 0b47 	vmov.f64	d0, d7
 80058c6:	f00c f887 	bl	80119d8 <pow>
 80058ca:	eeb0 6b40 	vmov.f64	d6, d0
 80058ce:	4bba      	ldr	r3, [pc, #744]	; (8005bb8 <obtenerVelCurva+0x6ac>)
 80058d0:	ed93 7b00 	vldr	d7, [r3]
 80058d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80058d8:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip3 * pow((t - tiHip3), 3);
 80058dc:	4bb3      	ldr	r3, [pc, #716]	; (8005bac <obtenerVelCurva+0x6a0>)
 80058de:	ed93 7b00 	vldr	d7, [r3]
 80058e2:	ed97 6b00 	vldr	d6, [r7]
 80058e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80058ea:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80058ee:	eeb0 0b47 	vmov.f64	d0, d7
 80058f2:	f00c f871 	bl	80119d8 <pow>
 80058f6:	eeb0 6b40 	vmov.f64	d6, d0
 80058fa:	4bb0      	ldr	r3, [pc, #704]	; (8005bbc <obtenerVelCurva+0x6b0>)
 80058fc:	ed93 7b00 	vldr	d7, [r3]
 8005900:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005904:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8005908:	4bad      	ldr	r3, [pc, #692]	; (8005bc0 <obtenerVelCurva+0x6b4>)
 800590a:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 800590e:	4baa      	ldr	r3, [pc, #680]	; (8005bb8 <obtenerVelCurva+0x6ac>)
 8005910:	ed93 7b00 	vldr	d7, [r3]
 8005914:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005918:	4ba4      	ldr	r3, [pc, #656]	; (8005bac <obtenerVelCurva+0x6a0>)
 800591a:	ed93 7b00 	vldr	d7, [r3]
 800591e:	ed97 5b00 	vldr	d5, [r7]
 8005922:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005926:	ee26 6b07 	vmul.f64	d6, d6, d7
 800592a:	4ba1      	ldr	r3, [pc, #644]	; (8005bb0 <obtenerVelCurva+0x6a4>)
 800592c:	ed93 7b00 	vldr	d7, [r3]
 8005930:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip3 * pow((t - tiHip3), 2);
 8005934:	4ba1      	ldr	r3, [pc, #644]	; (8005bbc <obtenerVelCurva+0x6b0>)
 8005936:	ed93 7b00 	vldr	d7, [r3]
 800593a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800593e:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005942:	4b9a      	ldr	r3, [pc, #616]	; (8005bac <obtenerVelCurva+0x6a0>)
 8005944:	ed93 7b00 	vldr	d7, [r3]
 8005948:	ed97 6b00 	vldr	d6, [r7]
 800594c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005950:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005954:	eeb0 0b47 	vmov.f64	d0, d7
 8005958:	f00c f83e 	bl	80119d8 <pow>
 800595c:	eeb0 7b40 	vmov.f64	d7, d0
 8005960:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005964:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8005968:	4b96      	ldr	r3, [pc, #600]	; (8005bc4 <obtenerVelCurva+0x6b8>)
 800596a:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip3 + 6 * a3Hip3 * (t - tiHip3);
 800596e:	4b92      	ldr	r3, [pc, #584]	; (8005bb8 <obtenerVelCurva+0x6ac>)
 8005970:	ed93 7b00 	vldr	d7, [r3]
 8005974:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005978:	4b90      	ldr	r3, [pc, #576]	; (8005bbc <obtenerVelCurva+0x6b0>)
 800597a:	ed93 7b00 	vldr	d7, [r3]
 800597e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005982:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005986:	4b89      	ldr	r3, [pc, #548]	; (8005bac <obtenerVelCurva+0x6a0>)
 8005988:	ed93 7b00 	vldr	d7, [r3]
 800598c:	ed97 4b00 	vldr	d4, [r7]
 8005990:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005994:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005998:	ee36 7b07 	vadd.f64	d7, d6, d7
 800599c:	4b8a      	ldr	r3, [pc, #552]	; (8005bc8 <obtenerVelCurva+0x6bc>)
 800599e:	ed83 7b00 	vstr	d7, [r3]
}
 80059a2:	e13a      	b.n	8005c1a <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip4)) {                            // Parabola 2
 80059a4:	4b89      	ldr	r3, [pc, #548]	; (8005bcc <obtenerVelCurva+0x6c0>)
 80059a6:	ed93 7b00 	vldr	d7, [r3]
 80059aa:	ed97 6b00 	vldr	d6, [r7]
 80059ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80059b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b6:	d848      	bhi.n	8005a4a <obtenerVelCurva+0x53e>
		X = (Af / 2) * pow((t - tfHip3), 2) + VfHip3 * (t - tfHip3) + XfHip3;
 80059b8:	4b85      	ldr	r3, [pc, #532]	; (8005bd0 <obtenerVelCurva+0x6c4>)
 80059ba:	ed93 7b00 	vldr	d7, [r3]
 80059be:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80059c2:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80059c6:	4b78      	ldr	r3, [pc, #480]	; (8005ba8 <obtenerVelCurva+0x69c>)
 80059c8:	ed93 7b00 	vldr	d7, [r3]
 80059cc:	ed97 6b00 	vldr	d6, [r7]
 80059d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059d4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059d8:	eeb0 0b47 	vmov.f64	d0, d7
 80059dc:	f00b fffc 	bl	80119d8 <pow>
 80059e0:	eeb0 7b40 	vmov.f64	d7, d0
 80059e4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80059e8:	4b6f      	ldr	r3, [pc, #444]	; (8005ba8 <obtenerVelCurva+0x69c>)
 80059ea:	ed93 7b00 	vldr	d7, [r3]
 80059ee:	ed97 5b00 	vldr	d5, [r7]
 80059f2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80059f6:	4b77      	ldr	r3, [pc, #476]	; (8005bd4 <obtenerVelCurva+0x6c8>)
 80059f8:	ed93 7b00 	vldr	d7, [r3]
 80059fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a00:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a04:	4b74      	ldr	r3, [pc, #464]	; (8005bd8 <obtenerVelCurva+0x6cc>)
 8005a06:	ed93 7b00 	vldr	d7, [r3]
 8005a0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a0e:	4b6c      	ldr	r3, [pc, #432]	; (8005bc0 <obtenerVelCurva+0x6b4>)
 8005a10:	ed83 7b00 	vstr	d7, [r3]
		DX = Af * (t - tfHip3) + VfHip3;
 8005a14:	4b64      	ldr	r3, [pc, #400]	; (8005ba8 <obtenerVelCurva+0x69c>)
 8005a16:	ed93 7b00 	vldr	d7, [r3]
 8005a1a:	ed97 6b00 	vldr	d6, [r7]
 8005a1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a22:	4b6b      	ldr	r3, [pc, #428]	; (8005bd0 <obtenerVelCurva+0x6c4>)
 8005a24:	ed93 7b00 	vldr	d7, [r3]
 8005a28:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a2c:	4b69      	ldr	r3, [pc, #420]	; (8005bd4 <obtenerVelCurva+0x6c8>)
 8005a2e:	ed93 7b00 	vldr	d7, [r3]
 8005a32:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a36:	4b63      	ldr	r3, [pc, #396]	; (8005bc4 <obtenerVelCurva+0x6b8>)
 8005a38:	ed83 7b00 	vstr	d7, [r3]
		DDX = Af;
 8005a3c:	4b64      	ldr	r3, [pc, #400]	; (8005bd0 <obtenerVelCurva+0x6c4>)
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	4961      	ldr	r1, [pc, #388]	; (8005bc8 <obtenerVelCurva+0x6bc>)
 8005a44:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005a48:	e0e7      	b.n	8005c1a <obtenerVelCurva+0x70e>
	} else if (t <= TiempoTotX) {                               // Hiperbola 4
 8005a4a:	4b64      	ldr	r3, [pc, #400]	; (8005bdc <obtenerVelCurva+0x6d0>)
 8005a4c:	ed93 7b00 	vldr	d7, [r3]
 8005a50:	ed97 6b00 	vldr	d6, [r7]
 8005a54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5c:	f200 808b 	bhi.w	8005b76 <obtenerVelCurva+0x66a>
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8005a60:	4b5a      	ldr	r3, [pc, #360]	; (8005bcc <obtenerVelCurva+0x6c0>)
 8005a62:	ed93 7b00 	vldr	d7, [r3]
 8005a66:	ed97 6b00 	vldr	d6, [r7]
 8005a6a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a6e:	4b5c      	ldr	r3, [pc, #368]	; (8005be0 <obtenerVelCurva+0x6d4>)
 8005a70:	ed93 7b00 	vldr	d7, [r3]
 8005a74:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a78:	4b5a      	ldr	r3, [pc, #360]	; (8005be4 <obtenerVelCurva+0x6d8>)
 8005a7a:	ed93 7b00 	vldr	d7, [r3]
 8005a7e:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005a82:	4b52      	ldr	r3, [pc, #328]	; (8005bcc <obtenerVelCurva+0x6c0>)
 8005a84:	ed93 7b00 	vldr	d7, [r3]
 8005a88:	ed97 6b00 	vldr	d6, [r7]
 8005a8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a90:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a94:	eeb0 0b47 	vmov.f64	d0, d7
 8005a98:	f00b ff9e 	bl	80119d8 <pow>
 8005a9c:	eeb0 6b40 	vmov.f64	d6, d0
 8005aa0:	4b51      	ldr	r3, [pc, #324]	; (8005be8 <obtenerVelCurva+0x6dc>)
 8005aa2:	ed93 7b00 	vldr	d7, [r3]
 8005aa6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005aaa:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip4 * pow((t - tiHip4), 3);
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <obtenerVelCurva+0x6c0>)
 8005ab0:	ed93 7b00 	vldr	d7, [r3]
 8005ab4:	ed97 6b00 	vldr	d6, [r7]
 8005ab8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005abc:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005ac0:	eeb0 0b47 	vmov.f64	d0, d7
 8005ac4:	f00b ff88 	bl	80119d8 <pow>
 8005ac8:	eeb0 6b40 	vmov.f64	d6, d0
 8005acc:	4b47      	ldr	r3, [pc, #284]	; (8005bec <obtenerVelCurva+0x6e0>)
 8005ace:	ed93 7b00 	vldr	d7, [r3]
 8005ad2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005ad6:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8005ada:	4b39      	ldr	r3, [pc, #228]	; (8005bc0 <obtenerVelCurva+0x6b4>)
 8005adc:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8005ae0:	4b41      	ldr	r3, [pc, #260]	; (8005be8 <obtenerVelCurva+0x6dc>)
 8005ae2:	ed93 7b00 	vldr	d7, [r3]
 8005ae6:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005aea:	4b38      	ldr	r3, [pc, #224]	; (8005bcc <obtenerVelCurva+0x6c0>)
 8005aec:	ed93 7b00 	vldr	d7, [r3]
 8005af0:	ed97 5b00 	vldr	d5, [r7]
 8005af4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005af8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005afc:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <obtenerVelCurva+0x6d4>)
 8005afe:	ed93 7b00 	vldr	d7, [r3]
 8005b02:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip4 * pow((t - tiHip4), 2);
 8005b06:	4b39      	ldr	r3, [pc, #228]	; (8005bec <obtenerVelCurva+0x6e0>)
 8005b08:	ed93 7b00 	vldr	d7, [r3]
 8005b0c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005b10:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005b14:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <obtenerVelCurva+0x6c0>)
 8005b16:	ed93 7b00 	vldr	d7, [r3]
 8005b1a:	ed97 6b00 	vldr	d6, [r7]
 8005b1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b22:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b26:	eeb0 0b47 	vmov.f64	d0, d7
 8005b2a:	f00b ff55 	bl	80119d8 <pow>
 8005b2e:	eeb0 7b40 	vmov.f64	d7, d0
 8005b32:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005b36:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8005b3a:	4b22      	ldr	r3, [pc, #136]	; (8005bc4 <obtenerVelCurva+0x6b8>)
 8005b3c:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip4 + 6.0 * a3Hip4 * (t - tiHip4);
 8005b40:	4b29      	ldr	r3, [pc, #164]	; (8005be8 <obtenerVelCurva+0x6dc>)
 8005b42:	ed93 7b00 	vldr	d7, [r3]
 8005b46:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005b4a:	4b28      	ldr	r3, [pc, #160]	; (8005bec <obtenerVelCurva+0x6e0>)
 8005b4c:	ed93 7b00 	vldr	d7, [r3]
 8005b50:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005b54:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005b58:	4b1c      	ldr	r3, [pc, #112]	; (8005bcc <obtenerVelCurva+0x6c0>)
 8005b5a:	ed93 7b00 	vldr	d7, [r3]
 8005b5e:	ed97 4b00 	vldr	d4, [r7]
 8005b62:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005b66:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005b6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b6e:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <obtenerVelCurva+0x6bc>)
 8005b70:	ed83 7b00 	vstr	d7, [r3]
}
 8005b74:	e051      	b.n	8005c1a <obtenerVelCurva+0x70e>
	} else if (t > TiempoTotX) {                               // Tiempo extra
 8005b76:	4b19      	ldr	r3, [pc, #100]	; (8005bdc <obtenerVelCurva+0x6d0>)
 8005b78:	ed93 7b00 	vldr	d7, [r3]
 8005b7c:	ed97 6b00 	vldr	d6, [r7]
 8005b80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b88:	dd32      	ble.n	8005bf0 <obtenerVelCurva+0x6e4>
		DX = 0;
 8005b8a:	490e      	ldr	r1, [pc, #56]	; (8005bc4 <obtenerVelCurva+0x6b8>)
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005b98:	490b      	ldr	r1, [pc, #44]	; (8005bc8 <obtenerVelCurva+0x6bc>)
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005ba6:	e038      	b.n	8005c1a <obtenerVelCurva+0x70e>
 8005ba8:	24000b78 	.word	0x24000b78
 8005bac:	24000b70 	.word	0x24000b70
 8005bb0:	24000ae8 	.word	0x24000ae8
 8005bb4:	24000ae0 	.word	0x24000ae0
 8005bb8:	24000af0 	.word	0x24000af0
 8005bbc:	24000af8 	.word	0x24000af8
 8005bc0:	240004c0 	.word	0x240004c0
 8005bc4:	240004c8 	.word	0x240004c8
 8005bc8:	240004d0 	.word	0x240004d0
 8005bcc:	24000b80 	.word	0x24000b80
 8005bd0:	24000a98 	.word	0x24000a98
 8005bd4:	24000b50 	.word	0x24000b50
 8005bd8:	24000b30 	.word	0x24000b30
 8005bdc:	24000b88 	.word	0x24000b88
 8005be0:	24000b08 	.word	0x24000b08
 8005be4:	24000b00 	.word	0x24000b00
 8005be8:	24000b10 	.word	0x24000b10
 8005bec:	24000b18 	.word	0x24000b18
		X = 0;
 8005bf0:	490d      	ldr	r1, [pc, #52]	; (8005c28 <obtenerVelCurva+0x71c>)
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	f04f 0300 	mov.w	r3, #0
 8005bfa:	e9c1 2300 	strd	r2, r3, [r1]
		DX = 0;
 8005bfe:	490b      	ldr	r1, [pc, #44]	; (8005c2c <obtenerVelCurva+0x720>)
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005c0c:	4908      	ldr	r1, [pc, #32]	; (8005c30 <obtenerVelCurva+0x724>)
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005c1a:	bf00      	nop
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	ecbd 8b04 	vpop	{d8-d9}
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	240004c0 	.word	0x240004c0
 8005c2c:	240004c8 	.word	0x240004c8
 8005c30:	240004d0 	.word	0x240004d0
 8005c34:	00000000 	.word	0x00000000

08005c38 <jacobianoInverso>:



void jacobianoInverso(double Vxaux, double Vyaux, double Vzaux, double Pxaux, double Pyaux, double Pzaux) {
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	b0ad      	sub	sp, #180	; 0xb4
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
 8005c42:	ed87 1b1a 	vstr	d1, [r7, #104]	; 0x68
 8005c46:	ed87 2b18 	vstr	d2, [r7, #96]	; 0x60
 8005c4a:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
 8005c4e:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 8005c52:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
	 * 	 Funcion que devuelve la velocidad angular de cada motor
	 *	 Entrada: Velocidad en (x,y,z) y Posicion en (x,y,z)
	 *	 Salida:  Velocidad angular en rad/s
	 	 -----------------------------------------------------------------------*/

	double Vaux[3] = { Vxaux, Vyaux, Vzaux };
 8005c56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005c5a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8005c5e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005c62:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8005c66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005c6a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	E1[0] = Pxaux + 0;
 8005c6e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005c72:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8005f80 <jacobianoInverso+0x348>
 8005c76:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c7a:	4bc9      	ldr	r3, [pc, #804]	; (8005fa0 <jacobianoInverso+0x368>)
 8005c7c:	ed83 7b00 	vstr	d7, [r3]
	E1[1] = Pyaux - 0.07;
 8005c80:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005c84:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8005f88 <jacobianoInverso+0x350>
 8005c88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c8c:	4bc4      	ldr	r3, [pc, #784]	; (8005fa0 <jacobianoInverso+0x368>)
 8005c8e:	ed83 7b02 	vstr	d7, [r3, #8]
	E1[2] = Pzaux;
 8005c92:	49c3      	ldr	r1, [pc, #780]	; (8005fa0 <jacobianoInverso+0x368>)
 8005c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c98:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E2[0] = Pxaux + 0.060621778264911;
 8005c9c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005ca0:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8005f90 <jacobianoInverso+0x358>
 8005ca4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ca8:	4bbe      	ldr	r3, [pc, #760]	; (8005fa4 <jacobianoInverso+0x36c>)
 8005caa:	ed83 7b00 	vstr	d7, [r3]
	E2[1] = Pyaux + 0.035;
 8005cae:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005cb2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8005f98 <jacobianoInverso+0x360>
 8005cb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cba:	4bba      	ldr	r3, [pc, #744]	; (8005fa4 <jacobianoInverso+0x36c>)
 8005cbc:	ed83 7b02 	vstr	d7, [r3, #8]
	E2[2] = Pzaux;
 8005cc0:	49b8      	ldr	r1, [pc, #736]	; (8005fa4 <jacobianoInverso+0x36c>)
 8005cc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cc6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E3[0] = Pxaux - 0.060621778264911;
 8005cca:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005cce:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8005f90 <jacobianoInverso+0x358>
 8005cd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005cd6:	4bb4      	ldr	r3, [pc, #720]	; (8005fa8 <jacobianoInverso+0x370>)
 8005cd8:	ed83 7b00 	vstr	d7, [r3]
	E3[1] = Pyaux + 0.035;
 8005cdc:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005ce0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005f98 <jacobianoInverso+0x360>
 8005ce4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ce8:	4baf      	ldr	r3, [pc, #700]	; (8005fa8 <jacobianoInverso+0x370>)
 8005cea:	ed83 7b02 	vstr	d7, [r3, #8]
	E3[2] = Pzaux;
 8005cee:	49ae      	ldr	r1, [pc, #696]	; (8005fa8 <jacobianoInverso+0x370>)
 8005cf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cf4:	e9c1 2304 	strd	r2, r3, [r1, #16]

	l1[0][0] = XJ1_1 - F1[0];//l11=[(XJ1(1)-F1(1,1));(YJ1(1)-F1(1,2));(ZJ1(1)-F1(1,3))];
 8005cf8:	4bac      	ldr	r3, [pc, #688]	; (8005fac <jacobianoInverso+0x374>)
 8005cfa:	ed93 6b00 	vldr	d6, [r3]
 8005cfe:	4bac      	ldr	r3, [pc, #688]	; (8005fb0 <jacobianoInverso+0x378>)
 8005d00:	ed93 7b00 	vldr	d7, [r3]
 8005d04:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d08:	4baa      	ldr	r3, [pc, #680]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005d0a:	ed83 7b00 	vstr	d7, [r3]
	l1[0][1] = YJ1_1 - F1[1];
 8005d0e:	4baa      	ldr	r3, [pc, #680]	; (8005fb8 <jacobianoInverso+0x380>)
 8005d10:	ed93 6b00 	vldr	d6, [r3]
 8005d14:	4ba6      	ldr	r3, [pc, #664]	; (8005fb0 <jacobianoInverso+0x378>)
 8005d16:	ed93 7b02 	vldr	d7, [r3, #8]
 8005d1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d1e:	4ba5      	ldr	r3, [pc, #660]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005d20:	ed83 7b02 	vstr	d7, [r3, #8]
	l1[0][2] = ZJ1_1 - F1[2];
 8005d24:	4ba5      	ldr	r3, [pc, #660]	; (8005fbc <jacobianoInverso+0x384>)
 8005d26:	ed93 6b00 	vldr	d6, [r3]
 8005d2a:	4ba1      	ldr	r3, [pc, #644]	; (8005fb0 <jacobianoInverso+0x378>)
 8005d2c:	ed93 7b04 	vldr	d7, [r3, #16]
 8005d30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d34:	4b9f      	ldr	r3, [pc, #636]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005d36:	ed83 7b04 	vstr	d7, [r3, #16]
	l1[1][0] = XJ2_1 - F2[0];//l12=[(XJ2(1)-F2(1,1));(YJ2(1)-F2(1,2));(ZJ2(1)-F2(1,3))];
 8005d3a:	4ba1      	ldr	r3, [pc, #644]	; (8005fc0 <jacobianoInverso+0x388>)
 8005d3c:	ed93 6b00 	vldr	d6, [r3]
 8005d40:	4ba0      	ldr	r3, [pc, #640]	; (8005fc4 <jacobianoInverso+0x38c>)
 8005d42:	ed93 7b00 	vldr	d7, [r3]
 8005d46:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d4a:	4b9a      	ldr	r3, [pc, #616]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005d4c:	ed83 7b06 	vstr	d7, [r3, #24]
	l1[1][1] = YJ2_1 - F2[1];
 8005d50:	4b9d      	ldr	r3, [pc, #628]	; (8005fc8 <jacobianoInverso+0x390>)
 8005d52:	ed93 6b00 	vldr	d6, [r3]
 8005d56:	4b9b      	ldr	r3, [pc, #620]	; (8005fc4 <jacobianoInverso+0x38c>)
 8005d58:	ed93 7b02 	vldr	d7, [r3, #8]
 8005d5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d60:	4b94      	ldr	r3, [pc, #592]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005d62:	ed83 7b08 	vstr	d7, [r3, #32]
	l1[1][2] = ZJ2_1 - F2[2];
 8005d66:	4b99      	ldr	r3, [pc, #612]	; (8005fcc <jacobianoInverso+0x394>)
 8005d68:	ed93 6b00 	vldr	d6, [r3]
 8005d6c:	4b95      	ldr	r3, [pc, #596]	; (8005fc4 <jacobianoInverso+0x38c>)
 8005d6e:	ed93 7b04 	vldr	d7, [r3, #16]
 8005d72:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d76:	4b8f      	ldr	r3, [pc, #572]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005d78:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l1[2][0] = XJ3_1 - F3[0];//l13=[(XJ3(1)-F3(1,1));(YJ3(1)-F3(1,2));(ZJ3(1)-F3(1,3))];
 8005d7c:	4b94      	ldr	r3, [pc, #592]	; (8005fd0 <jacobianoInverso+0x398>)
 8005d7e:	ed93 6b00 	vldr	d6, [r3]
 8005d82:	4b94      	ldr	r3, [pc, #592]	; (8005fd4 <jacobianoInverso+0x39c>)
 8005d84:	ed93 7b00 	vldr	d7, [r3]
 8005d88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d8c:	4b89      	ldr	r3, [pc, #548]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005d8e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l1[2][1] = YJ3_1 - F3[1];
 8005d92:	4b91      	ldr	r3, [pc, #580]	; (8005fd8 <jacobianoInverso+0x3a0>)
 8005d94:	ed93 6b00 	vldr	d6, [r3]
 8005d98:	4b8e      	ldr	r3, [pc, #568]	; (8005fd4 <jacobianoInverso+0x39c>)
 8005d9a:	ed93 7b02 	vldr	d7, [r3, #8]
 8005d9e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005da2:	4b84      	ldr	r3, [pc, #528]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005da4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l1[2][2] = ZJ3_1 - F3[2];
 8005da8:	4b8c      	ldr	r3, [pc, #560]	; (8005fdc <jacobianoInverso+0x3a4>)
 8005daa:	ed93 6b00 	vldr	d6, [r3]
 8005dae:	4b89      	ldr	r3, [pc, #548]	; (8005fd4 <jacobianoInverso+0x39c>)
 8005db0:	ed93 7b04 	vldr	d7, [r3, #16]
 8005db4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005db8:	4b7e      	ldr	r3, [pc, #504]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005dba:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	l2[0][0] = E1[0] - XJ1_1;//l21=[(E1(1,1)-XJ1(1));(E1(1,2)-YJ1(1));(E1(1,3)-ZJ1(1))];
 8005dbe:	4b78      	ldr	r3, [pc, #480]	; (8005fa0 <jacobianoInverso+0x368>)
 8005dc0:	ed93 6b00 	vldr	d6, [r3]
 8005dc4:	4b79      	ldr	r3, [pc, #484]	; (8005fac <jacobianoInverso+0x374>)
 8005dc6:	ed93 7b00 	vldr	d7, [r3]
 8005dca:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005dce:	4b84      	ldr	r3, [pc, #528]	; (8005fe0 <jacobianoInverso+0x3a8>)
 8005dd0:	ed83 7b00 	vstr	d7, [r3]
	l2[1][0] = E1[1] - YJ1_1;
 8005dd4:	4b72      	ldr	r3, [pc, #456]	; (8005fa0 <jacobianoInverso+0x368>)
 8005dd6:	ed93 6b02 	vldr	d6, [r3, #8]
 8005dda:	4b77      	ldr	r3, [pc, #476]	; (8005fb8 <jacobianoInverso+0x380>)
 8005ddc:	ed93 7b00 	vldr	d7, [r3]
 8005de0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005de4:	4b7e      	ldr	r3, [pc, #504]	; (8005fe0 <jacobianoInverso+0x3a8>)
 8005de6:	ed83 7b06 	vstr	d7, [r3, #24]
	l2[2][0] = E1[2] - ZJ1_1;
 8005dea:	4b6d      	ldr	r3, [pc, #436]	; (8005fa0 <jacobianoInverso+0x368>)
 8005dec:	ed93 6b04 	vldr	d6, [r3, #16]
 8005df0:	4b72      	ldr	r3, [pc, #456]	; (8005fbc <jacobianoInverso+0x384>)
 8005df2:	ed93 7b00 	vldr	d7, [r3]
 8005df6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005dfa:	4b79      	ldr	r3, [pc, #484]	; (8005fe0 <jacobianoInverso+0x3a8>)
 8005dfc:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l2[0][1] = E2[0] - XJ2_1;//l22=[(E2(1,1)-XJ2(1));(E2(1,2)-YJ2(1));(E2(1,3)-ZJ2(1))];
 8005e00:	4b68      	ldr	r3, [pc, #416]	; (8005fa4 <jacobianoInverso+0x36c>)
 8005e02:	ed93 6b00 	vldr	d6, [r3]
 8005e06:	4b6e      	ldr	r3, [pc, #440]	; (8005fc0 <jacobianoInverso+0x388>)
 8005e08:	ed93 7b00 	vldr	d7, [r3]
 8005e0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e10:	4b73      	ldr	r3, [pc, #460]	; (8005fe0 <jacobianoInverso+0x3a8>)
 8005e12:	ed83 7b02 	vstr	d7, [r3, #8]
	l2[1][1] = E2[1] - YJ2_1;
 8005e16:	4b63      	ldr	r3, [pc, #396]	; (8005fa4 <jacobianoInverso+0x36c>)
 8005e18:	ed93 6b02 	vldr	d6, [r3, #8]
 8005e1c:	4b6a      	ldr	r3, [pc, #424]	; (8005fc8 <jacobianoInverso+0x390>)
 8005e1e:	ed93 7b00 	vldr	d7, [r3]
 8005e22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e26:	4b6e      	ldr	r3, [pc, #440]	; (8005fe0 <jacobianoInverso+0x3a8>)
 8005e28:	ed83 7b08 	vstr	d7, [r3, #32]
	l2[2][1] = E2[2] - ZJ2_1;
 8005e2c:	4b5d      	ldr	r3, [pc, #372]	; (8005fa4 <jacobianoInverso+0x36c>)
 8005e2e:	ed93 6b04 	vldr	d6, [r3, #16]
 8005e32:	4b66      	ldr	r3, [pc, #408]	; (8005fcc <jacobianoInverso+0x394>)
 8005e34:	ed93 7b00 	vldr	d7, [r3]
 8005e38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e3c:	4b68      	ldr	r3, [pc, #416]	; (8005fe0 <jacobianoInverso+0x3a8>)
 8005e3e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l2[0][2] = E3[0] - XJ3_1;//l23=[(E3(1,1)-XJ3(1));(E3(1,2)-YJ3(1));(E3(1,3)-ZJ3(1))];
 8005e42:	4b59      	ldr	r3, [pc, #356]	; (8005fa8 <jacobianoInverso+0x370>)
 8005e44:	ed93 6b00 	vldr	d6, [r3]
 8005e48:	4b61      	ldr	r3, [pc, #388]	; (8005fd0 <jacobianoInverso+0x398>)
 8005e4a:	ed93 7b00 	vldr	d7, [r3]
 8005e4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e52:	4b63      	ldr	r3, [pc, #396]	; (8005fe0 <jacobianoInverso+0x3a8>)
 8005e54:	ed83 7b04 	vstr	d7, [r3, #16]
	l2[1][2] = E3[1] - YJ3_1;
 8005e58:	4b53      	ldr	r3, [pc, #332]	; (8005fa8 <jacobianoInverso+0x370>)
 8005e5a:	ed93 6b02 	vldr	d6, [r3, #8]
 8005e5e:	4b5e      	ldr	r3, [pc, #376]	; (8005fd8 <jacobianoInverso+0x3a0>)
 8005e60:	ed93 7b00 	vldr	d7, [r3]
 8005e64:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e68:	4b5d      	ldr	r3, [pc, #372]	; (8005fe0 <jacobianoInverso+0x3a8>)
 8005e6a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l2[2][2] = E3[2] - ZJ3_1;
 8005e6e:	4b4e      	ldr	r3, [pc, #312]	; (8005fa8 <jacobianoInverso+0x370>)
 8005e70:	ed93 6b04 	vldr	d6, [r3, #16]
 8005e74:	4b59      	ldr	r3, [pc, #356]	; (8005fdc <jacobianoInverso+0x3a4>)
 8005e76:	ed93 7b00 	vldr	d7, [r3]
 8005e7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e7e:	4b58      	ldr	r3, [pc, #352]	; (8005fe0 <jacobianoInverso+0x3a8>)
 8005e80:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	Jcd = transpuesta(l2);				//Jacobiano de la cinematica directa
 8005e84:	4c57      	ldr	r4, [pc, #348]	; (8005fe4 <jacobianoInverso+0x3ac>)
 8005e86:	463b      	mov	r3, r7
 8005e88:	4955      	ldr	r1, [pc, #340]	; (8005fe0 <jacobianoInverso+0x3a8>)
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fd fcaa 	bl	80037e4 <transpuesta>
 8005e90:	4620      	mov	r0, r4
 8005e92:	463b      	mov	r3, r7
 8005e94:	2248      	movs	r2, #72	; 0x48
 8005e96:	4619      	mov	r1, r3
 8005e98:	f008 fefc 	bl	800ec94 <memcpy>

	cross_P1[0] = SA1[1] * l1[0][2] - SA1[2] * l1[0][1];//Producto Cruz entre vectores
 8005e9c:	4b52      	ldr	r3, [pc, #328]	; (8005fe8 <jacobianoInverso+0x3b0>)
 8005e9e:	ed93 6b02 	vldr	d6, [r3, #8]
 8005ea2:	4b44      	ldr	r3, [pc, #272]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005ea4:	ed93 7b04 	vldr	d7, [r3, #16]
 8005ea8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005eac:	4b4e      	ldr	r3, [pc, #312]	; (8005fe8 <jacobianoInverso+0x3b0>)
 8005eae:	ed93 5b04 	vldr	d5, [r3, #16]
 8005eb2:	4b40      	ldr	r3, [pc, #256]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005eb4:	ed93 7b02 	vldr	d7, [r3, #8]
 8005eb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005ebc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ec0:	4b4a      	ldr	r3, [pc, #296]	; (8005fec <jacobianoInverso+0x3b4>)
 8005ec2:	ed83 7b00 	vstr	d7, [r3]
	cross_P1[1] = SA1[2] * l1[0][0] - SA1[0] * l1[0][2];
 8005ec6:	4b48      	ldr	r3, [pc, #288]	; (8005fe8 <jacobianoInverso+0x3b0>)
 8005ec8:	ed93 6b04 	vldr	d6, [r3, #16]
 8005ecc:	4b39      	ldr	r3, [pc, #228]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005ece:	ed93 7b00 	vldr	d7, [r3]
 8005ed2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005ed6:	4b44      	ldr	r3, [pc, #272]	; (8005fe8 <jacobianoInverso+0x3b0>)
 8005ed8:	ed93 5b00 	vldr	d5, [r3]
 8005edc:	4b35      	ldr	r3, [pc, #212]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005ede:	ed93 7b04 	vldr	d7, [r3, #16]
 8005ee2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005ee6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005eea:	4b40      	ldr	r3, [pc, #256]	; (8005fec <jacobianoInverso+0x3b4>)
 8005eec:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P1[2] = SA1[0] * l1[0][1] - SA1[1] * l1[0][0];
 8005ef0:	4b3d      	ldr	r3, [pc, #244]	; (8005fe8 <jacobianoInverso+0x3b0>)
 8005ef2:	ed93 6b00 	vldr	d6, [r3]
 8005ef6:	4b2f      	ldr	r3, [pc, #188]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005ef8:	ed93 7b02 	vldr	d7, [r3, #8]
 8005efc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f00:	4b39      	ldr	r3, [pc, #228]	; (8005fe8 <jacobianoInverso+0x3b0>)
 8005f02:	ed93 5b02 	vldr	d5, [r3, #8]
 8005f06:	4b2b      	ldr	r3, [pc, #172]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005f08:	ed93 7b00 	vldr	d7, [r3]
 8005f0c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f10:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f14:	4b35      	ldr	r3, [pc, #212]	; (8005fec <jacobianoInverso+0x3b4>)
 8005f16:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P2[0] = SA2[1] * l1[1][2] - SA2[2] * l1[1][1];//vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]
 8005f1a:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <jacobianoInverso+0x3b8>)
 8005f1c:	ed93 6b02 	vldr	d6, [r3, #8]
 8005f20:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005f22:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005f26:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f2a:	4b31      	ldr	r3, [pc, #196]	; (8005ff0 <jacobianoInverso+0x3b8>)
 8005f2c:	ed93 5b04 	vldr	d5, [r3, #16]
 8005f30:	4b20      	ldr	r3, [pc, #128]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005f32:	ed93 7b08 	vldr	d7, [r3, #32]
 8005f36:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f3e:	4b2d      	ldr	r3, [pc, #180]	; (8005ff4 <jacobianoInverso+0x3bc>)
 8005f40:	ed83 7b00 	vstr	d7, [r3]
	cross_P2[1] = SA2[2] * l1[1][0] - SA2[0] * l1[1][2];//vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]
 8005f44:	4b2a      	ldr	r3, [pc, #168]	; (8005ff0 <jacobianoInverso+0x3b8>)
 8005f46:	ed93 6b04 	vldr	d6, [r3, #16]
 8005f4a:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005f4c:	ed93 7b06 	vldr	d7, [r3, #24]
 8005f50:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f54:	4b26      	ldr	r3, [pc, #152]	; (8005ff0 <jacobianoInverso+0x3b8>)
 8005f56:	ed93 5b00 	vldr	d5, [r3]
 8005f5a:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005f5c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005f60:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f64:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f68:	4b22      	ldr	r3, [pc, #136]	; (8005ff4 <jacobianoInverso+0x3bc>)
 8005f6a:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P2[2] = SA2[0] * l1[1][1] - SA2[1] * l1[1][0];//vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]
 8005f6e:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <jacobianoInverso+0x3b8>)
 8005f70:	ed93 6b00 	vldr	d6, [r3]
 8005f74:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <jacobianoInverso+0x37c>)
 8005f76:	ed93 7b08 	vldr	d7, [r3, #32]
 8005f7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f7e:	e03b      	b.n	8005ff8 <jacobianoInverso+0x3c0>
	...
 8005f88:	1eb851ec 	.word	0x1eb851ec
 8005f8c:	3fb1eb85 	.word	0x3fb1eb85
 8005f90:	562574c0 	.word	0x562574c0
 8005f94:	3faf09d1 	.word	0x3faf09d1
 8005f98:	1eb851ec 	.word	0x1eb851ec
 8005f9c:	3fa1eb85 	.word	0x3fa1eb85
 8005fa0:	24000838 	.word	0x24000838
 8005fa4:	24000850 	.word	0x24000850
 8005fa8:	24000868 	.word	0x24000868
 8005fac:	240002c0 	.word	0x240002c0
 8005fb0:	24000018 	.word	0x24000018
 8005fb4:	24000880 	.word	0x24000880
 8005fb8:	240002d0 	.word	0x240002d0
 8005fbc:	240002e0 	.word	0x240002e0
 8005fc0:	24000308 	.word	0x24000308
 8005fc4:	24000030 	.word	0x24000030
 8005fc8:	24000318 	.word	0x24000318
 8005fcc:	24000328 	.word	0x24000328
 8005fd0:	24000350 	.word	0x24000350
 8005fd4:	24000048 	.word	0x24000048
 8005fd8:	24000360 	.word	0x24000360
 8005fdc:	24000370 	.word	0x24000370
 8005fe0:	240008c8 	.word	0x240008c8
 8005fe4:	24000910 	.word	0x24000910
 8005fe8:	24000060 	.word	0x24000060
 8005fec:	24000a30 	.word	0x24000a30
 8005ff0:	24000078 	.word	0x24000078
 8005ff4:	24000a48 	.word	0x24000a48
 8005ff8:	4b92      	ldr	r3, [pc, #584]	; (8006244 <jacobianoInverso+0x60c>)
 8005ffa:	ed93 5b02 	vldr	d5, [r3, #8]
 8005ffe:	4b92      	ldr	r3, [pc, #584]	; (8006248 <jacobianoInverso+0x610>)
 8006000:	ed93 7b06 	vldr	d7, [r3, #24]
 8006004:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006008:	ee36 7b47 	vsub.f64	d7, d6, d7
 800600c:	4b8f      	ldr	r3, [pc, #572]	; (800624c <jacobianoInverso+0x614>)
 800600e:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P3[0] = SA3[1] * l1[2][2] - SA3[2] * l1[2][1];
 8006012:	4b8f      	ldr	r3, [pc, #572]	; (8006250 <jacobianoInverso+0x618>)
 8006014:	ed93 6b02 	vldr	d6, [r3, #8]
 8006018:	4b8b      	ldr	r3, [pc, #556]	; (8006248 <jacobianoInverso+0x610>)
 800601a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800601e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006022:	4b8b      	ldr	r3, [pc, #556]	; (8006250 <jacobianoInverso+0x618>)
 8006024:	ed93 5b04 	vldr	d5, [r3, #16]
 8006028:	4b87      	ldr	r3, [pc, #540]	; (8006248 <jacobianoInverso+0x610>)
 800602a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800602e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006032:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006036:	4b87      	ldr	r3, [pc, #540]	; (8006254 <jacobianoInverso+0x61c>)
 8006038:	ed83 7b00 	vstr	d7, [r3]
	cross_P3[1] = SA3[2] * l1[2][0] - SA3[0] * l1[2][2];
 800603c:	4b84      	ldr	r3, [pc, #528]	; (8006250 <jacobianoInverso+0x618>)
 800603e:	ed93 6b04 	vldr	d6, [r3, #16]
 8006042:	4b81      	ldr	r3, [pc, #516]	; (8006248 <jacobianoInverso+0x610>)
 8006044:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006048:	ee26 6b07 	vmul.f64	d6, d6, d7
 800604c:	4b80      	ldr	r3, [pc, #512]	; (8006250 <jacobianoInverso+0x618>)
 800604e:	ed93 5b00 	vldr	d5, [r3]
 8006052:	4b7d      	ldr	r3, [pc, #500]	; (8006248 <jacobianoInverso+0x610>)
 8006054:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8006058:	ee25 7b07 	vmul.f64	d7, d5, d7
 800605c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006060:	4b7c      	ldr	r3, [pc, #496]	; (8006254 <jacobianoInverso+0x61c>)
 8006062:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P3[2] = SA3[0] * l1[2][1] - SA3[1] * l1[2][0];
 8006066:	4b7a      	ldr	r3, [pc, #488]	; (8006250 <jacobianoInverso+0x618>)
 8006068:	ed93 6b00 	vldr	d6, [r3]
 800606c:	4b76      	ldr	r3, [pc, #472]	; (8006248 <jacobianoInverso+0x610>)
 800606e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8006072:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006076:	4b76      	ldr	r3, [pc, #472]	; (8006250 <jacobianoInverso+0x618>)
 8006078:	ed93 5b02 	vldr	d5, [r3, #8]
 800607c:	4b72      	ldr	r3, [pc, #456]	; (8006248 <jacobianoInverso+0x610>)
 800607e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006082:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006086:	ee36 7b47 	vsub.f64	d7, d6, d7
 800608a:	4b72      	ldr	r3, [pc, #456]	; (8006254 <jacobianoInverso+0x61c>)
 800608c:	ed83 7b04 	vstr	d7, [r3, #16]

	dot[0] = productDot(cross_P1, Jcd.m[0]);			//Producto Punto
 8006090:	4971      	ldr	r1, [pc, #452]	; (8006258 <jacobianoInverso+0x620>)
 8006092:	4872      	ldr	r0, [pc, #456]	; (800625c <jacobianoInverso+0x624>)
 8006094:	f7fd fbe2 	bl	800385c <productDot>
 8006098:	eeb0 7b40 	vmov.f64	d7, d0
 800609c:	4b70      	ldr	r3, [pc, #448]	; (8006260 <jacobianoInverso+0x628>)
 800609e:	ed83 7b00 	vstr	d7, [r3]
	dot[1] = productDot(cross_P2, Jcd.m[1]);
 80060a2:	4970      	ldr	r1, [pc, #448]	; (8006264 <jacobianoInverso+0x62c>)
 80060a4:	4869      	ldr	r0, [pc, #420]	; (800624c <jacobianoInverso+0x614>)
 80060a6:	f7fd fbd9 	bl	800385c <productDot>
 80060aa:	eeb0 7b40 	vmov.f64	d7, d0
 80060ae:	4b6c      	ldr	r3, [pc, #432]	; (8006260 <jacobianoInverso+0x628>)
 80060b0:	ed83 7b02 	vstr	d7, [r3, #8]
	dot[2] = productDot(cross_P3, Jcd.m[2]);
 80060b4:	496c      	ldr	r1, [pc, #432]	; (8006268 <jacobianoInverso+0x630>)
 80060b6:	4867      	ldr	r0, [pc, #412]	; (8006254 <jacobianoInverso+0x61c>)
 80060b8:	f7fd fbd0 	bl	800385c <productDot>
 80060bc:	eeb0 7b40 	vmov.f64	d7, d0
 80060c0:	4b67      	ldr	r3, [pc, #412]	; (8006260 <jacobianoInverso+0x628>)
 80060c2:	ed83 7b04 	vstr	d7, [r3, #16]

	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 80060c6:	2300      	movs	r3, #0
 80060c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060cc:	e03d      	b.n	800614a <jacobianoInverso+0x512>
		for (int j = 0; j < 3; ++j) {
 80060ce:	2300      	movs	r3, #0
 80060d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060d4:	e030      	b.n	8006138 <jacobianoInverso+0x500>
			if (i == j) {
 80060d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060de:	429a      	cmp	r2, r3
 80060e0:	d114      	bne.n	800610c <jacobianoInverso+0x4d4>
				Jci[i][j] = dot[i];
 80060e2:	4a5f      	ldr	r2, [pc, #380]	; (8006260 <jacobianoInverso+0x628>)
 80060e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4413      	add	r3, r2
 80060ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060f0:	4c5e      	ldr	r4, [pc, #376]	; (800626c <jacobianoInverso+0x634>)
 80060f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060f6:	4613      	mov	r3, r2
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	4413      	add	r3, r2
 80060fc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006100:	4413      	add	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	4423      	add	r3, r4
 8006106:	e9c3 0100 	strd	r0, r1, [r3]
 800610a:	e010      	b.n	800612e <jacobianoInverso+0x4f6>
			} else {
				Jci[i][j] = 0;
 800610c:	4957      	ldr	r1, [pc, #348]	; (800626c <jacobianoInverso+0x634>)
 800610e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006112:	4613      	mov	r3, r2
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	4413      	add	r3, r2
 8006118:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800611c:	4413      	add	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	4419      	add	r1, r3
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; ++j) {
 800612e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006132:	3301      	adds	r3, #1
 8006134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800613c:	2b02      	cmp	r3, #2
 800613e:	ddca      	ble.n	80060d6 <jacobianoInverso+0x49e>
	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8006140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006144:	3301      	adds	r3, #1
 8006146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800614a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800614e:	2b02      	cmp	r3, #2
 8006150:	ddbd      	ble.n	80060ce <jacobianoInverso+0x496>
			}
		}
	}

	Jci_inv = inversa(Jci);
 8006152:	4c47      	ldr	r4, [pc, #284]	; (8006270 <jacobianoInverso+0x638>)
 8006154:	463b      	mov	r3, r7
 8006156:	4945      	ldr	r1, [pc, #276]	; (800626c <jacobianoInverso+0x634>)
 8006158:	4618      	mov	r0, r3
 800615a:	f7fd fcaf 	bl	8003abc <inversa>
 800615e:	4620      	mov	r0, r4
 8006160:	463b      	mov	r3, r7
 8006162:	2248      	movs	r2, #72	; 0x48
 8006164:	4619      	mov	r1, r3
 8006166:	f008 fd95 	bl	800ec94 <memcpy>
	Jinv = productMatriz(Jcd.m,Jci_inv.m);	//Jacobiano Inverso
 800616a:	4c42      	ldr	r4, [pc, #264]	; (8006274 <jacobianoInverso+0x63c>)
 800616c:	463b      	mov	r3, r7
 800616e:	4a40      	ldr	r2, [pc, #256]	; (8006270 <jacobianoInverso+0x638>)
 8006170:	4939      	ldr	r1, [pc, #228]	; (8006258 <jacobianoInverso+0x620>)
 8006172:	4618      	mov	r0, r3
 8006174:	f7fd fd10 	bl	8003b98 <productMatriz>
 8006178:	4620      	mov	r0, r4
 800617a:	463b      	mov	r3, r7
 800617c:	2248      	movs	r2, #72	; 0x48
 800617e:	4619      	mov	r1, r3
 8006180:	f008 fd88 	bl	800ec94 <memcpy>

	for (int i = 0; i < 3; ++i) {
 8006184:	2300      	movs	r3, #0
 8006186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800618a:	e041      	b.n	8006210 <jacobianoInverso+0x5d8>
		double sum = 0;
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 8006198:	2300      	movs	r3, #0
 800619a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800619e:	e025      	b.n	80061ec <jacobianoInverso+0x5b4>
			sum += sum + Jinv.m[i][j] * Vaux[j];
 80061a0:	4934      	ldr	r1, [pc, #208]	; (8006274 <jacobianoInverso+0x63c>)
 80061a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80061a6:	4613      	mov	r3, r2
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	4413      	add	r3, r2
 80061ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061b0:	4413      	add	r3, r2
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	440b      	add	r3, r1
 80061b6:	ed93 6b00 	vldr	d6, [r3]
 80061ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	33b0      	adds	r3, #176	; 0xb0
 80061c2:	443b      	add	r3, r7
 80061c4:	3b38      	subs	r3, #56	; 0x38
 80061c6:	ed93 7b00 	vldr	d7, [r3]
 80061ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061ce:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 80061d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061d6:	ed97 6b26 	vldr	d6, [r7, #152]	; 0x98
 80061da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061de:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 80061e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061e6:	3301      	adds	r3, #1
 80061e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	ddd5      	ble.n	80061a0 <jacobianoInverso+0x568>
		}
		omega[i] = sum;
 80061f4:	4a20      	ldr	r2, [pc, #128]	; (8006278 <jacobianoInverso+0x640>)
 80061f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	18d1      	adds	r1, r2, r3
 80061fe:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006202:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; ++i) {
 8006206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800620a:	3301      	adds	r3, #1
 800620c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006210:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006214:	2b02      	cmp	r3, #2
 8006216:	ddb9      	ble.n	800618c <jacobianoInverso+0x554>
	}
	omega1 = omega[0];
 8006218:	4b17      	ldr	r3, [pc, #92]	; (8006278 <jacobianoInverso+0x640>)
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	4917      	ldr	r1, [pc, #92]	; (800627c <jacobianoInverso+0x644>)
 8006220:	e9c1 2300 	strd	r2, r3, [r1]
	omega2 = omega[1];
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <jacobianoInverso+0x640>)
 8006226:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800622a:	4915      	ldr	r1, [pc, #84]	; (8006280 <jacobianoInverso+0x648>)
 800622c:	e9c1 2300 	strd	r2, r3, [r1]
	omega3 = omega[2];
 8006230:	4b11      	ldr	r3, [pc, #68]	; (8006278 <jacobianoInverso+0x640>)
 8006232:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006236:	4913      	ldr	r1, [pc, #76]	; (8006284 <jacobianoInverso+0x64c>)
 8006238:	e9c1 2300 	strd	r2, r3, [r1]

}
 800623c:	bf00      	nop
 800623e:	37b4      	adds	r7, #180	; 0xb4
 8006240:	46bd      	mov	sp, r7
 8006242:	bd90      	pop	{r4, r7, pc}
 8006244:	24000078 	.word	0x24000078
 8006248:	24000880 	.word	0x24000880
 800624c:	24000a48 	.word	0x24000a48
 8006250:	24000090 	.word	0x24000090
 8006254:	24000a60 	.word	0x24000a60
 8006258:	24000910 	.word	0x24000910
 800625c:	24000a30 	.word	0x24000a30
 8006260:	24000a78 	.word	0x24000a78
 8006264:	24000928 	.word	0x24000928
 8006268:	24000940 	.word	0x24000940
 800626c:	24000958 	.word	0x24000958
 8006270:	240009a0 	.word	0x240009a0
 8006274:	240009e8 	.word	0x240009e8
 8006278:	24000470 	.word	0x24000470
 800627c:	240004e8 	.word	0x240004e8
 8006280:	240004f0 	.word	0x240004f0
 8006284:	240004f8 	.word	0x240004f8

08006288 <SetPerfilTimers>:

void SetPerfilTimers(double omeg1, double omeg2, double omeg3) {	// velAng en rpm
 8006288:	b480      	push	{r7}
 800628a:	b089      	sub	sp, #36	; 0x24
 800628c:	af00      	add	r7, sp, #0
 800628e:	ed87 0b04 	vstr	d0, [r7, #16]
 8006292:	ed87 1b02 	vstr	d1, [r7, #8]
 8006296:	ed87 2b00 	vstr	d2, [r7]
	 *   Funcion que configura el PWM del timer 12,13 14, para que el motor vaya a la
	 *   velocidad deseada.
	 *   Entrada: velocidad Angular de cada eslabon, en rad/s.
	 ----------------------------------------------------------------------- */

		rpm1 = (omeg1*((60.00)/(2.00*pi)));
 800629a:	ed97 7b04 	vldr	d7, [r7, #16]
 800629e:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 80064d0 <SetPerfilTimers+0x248>
 80062a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80062a6:	4b92      	ldr	r3, [pc, #584]	; (80064f0 <SetPerfilTimers+0x268>)
 80062a8:	ed83 7b00 	vstr	d7, [r3]
		rpm2 = (omeg2*((60.00)/(2.00*pi)));
 80062ac:	ed97 7b02 	vldr	d7, [r7, #8]
 80062b0:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80064d0 <SetPerfilTimers+0x248>
 80062b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80062b8:	4b8e      	ldr	r3, [pc, #568]	; (80064f4 <SetPerfilTimers+0x26c>)
 80062ba:	ed83 7b00 	vstr	d7, [r3]
		rpm3 = (omeg3*((60.00)/(2.00*pi)));
 80062be:	ed97 7b00 	vldr	d7, [r7]
 80062c2:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80064d0 <SetPerfilTimers+0x248>
 80062c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80062ca:	4b8b      	ldr	r3, [pc, #556]	; (80064f8 <SetPerfilTimers+0x270>)
 80062cc:	ed83 7b00 	vstr	d7, [r3]
		if(rpm1<=0.1){
 80062d0:	4b87      	ldr	r3, [pc, #540]	; (80064f0 <SetPerfilTimers+0x268>)
 80062d2:	ed93 7b00 	vldr	d7, [r3]
 80062d6:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80064d8 <SetPerfilTimers+0x250>
 80062da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80062de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e2:	d805      	bhi.n	80062f0 <SetPerfilTimers+0x68>
			rpm1=0.1;
 80062e4:	4982      	ldr	r1, [pc, #520]	; (80064f0 <SetPerfilTimers+0x268>)
 80062e6:	a37c      	add	r3, pc, #496	; (adr r3, 80064d8 <SetPerfilTimers+0x250>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm2<=0.1){
 80062f0:	4b80      	ldr	r3, [pc, #512]	; (80064f4 <SetPerfilTimers+0x26c>)
 80062f2:	ed93 7b00 	vldr	d7, [r3]
 80062f6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80064d8 <SetPerfilTimers+0x250>
 80062fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80062fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006302:	d805      	bhi.n	8006310 <SetPerfilTimers+0x88>
			rpm2=0.1;
 8006304:	497b      	ldr	r1, [pc, #492]	; (80064f4 <SetPerfilTimers+0x26c>)
 8006306:	a374      	add	r3, pc, #464	; (adr r3, 80064d8 <SetPerfilTimers+0x250>)
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm3<=0.1){
 8006310:	4b79      	ldr	r3, [pc, #484]	; (80064f8 <SetPerfilTimers+0x270>)
 8006312:	ed93 7b00 	vldr	d7, [r3]
 8006316:	ed9f 6b70 	vldr	d6, [pc, #448]	; 80064d8 <SetPerfilTimers+0x250>
 800631a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800631e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006322:	d805      	bhi.n	8006330 <SetPerfilTimers+0xa8>
			rpm3=0.1;
 8006324:	4974      	ldr	r1, [pc, #464]	; (80064f8 <SetPerfilTimers+0x270>)
 8006326:	a36c      	add	r3, pc, #432	; (adr r3, 80064d8 <SetPerfilTimers+0x250>)
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	e9c1 2300 	strd	r2, r3, [r1]
		}


		periodoM[0] = (((FCL * 60.00) / ((double)rpm1 * ((double)(TIM12->PSC) + 1.00) * 9600.00)) - 1.00);	//Fpwm = 64M / ((ARR+1)*(PSC+1)
 8006330:	4b72      	ldr	r3, [pc, #456]	; (80064fc <SetPerfilTimers+0x274>)
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800633c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006340:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006344:	4b6a      	ldr	r3, [pc, #424]	; (80064f0 <SetPerfilTimers+0x268>)
 8006346:	ed93 7b00 	vldr	d7, [r3]
 800634a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800634e:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80064e0 <SetPerfilTimers+0x258>
 8006352:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006356:	ed9f 5b64 	vldr	d5, [pc, #400]	; 80064e8 <SetPerfilTimers+0x260>
 800635a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800635e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006362:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006366:	4b66      	ldr	r3, [pc, #408]	; (8006500 <SetPerfilTimers+0x278>)
 8006368:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1] = (((FCL * 60.00) / ((double)rpm2 * ((double)(TIM13->PSC) + 1.00) * 9600.00)) - 1.00);
 800636c:	4b65      	ldr	r3, [pc, #404]	; (8006504 <SetPerfilTimers+0x27c>)
 800636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006370:	ee07 3a90 	vmov	s15, r3
 8006374:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006378:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800637c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006380:	4b5c      	ldr	r3, [pc, #368]	; (80064f4 <SetPerfilTimers+0x26c>)
 8006382:	ed93 7b00 	vldr	d7, [r3]
 8006386:	ee26 7b07 	vmul.f64	d7, d6, d7
 800638a:	ed9f 6b55 	vldr	d6, [pc, #340]	; 80064e0 <SetPerfilTimers+0x258>
 800638e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006392:	ed9f 5b55 	vldr	d5, [pc, #340]	; 80064e8 <SetPerfilTimers+0x260>
 8006396:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800639a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800639e:	ee37 7b46 	vsub.f64	d7, d7, d6
 80063a2:	4b57      	ldr	r3, [pc, #348]	; (8006500 <SetPerfilTimers+0x278>)
 80063a4:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2] = (((FCL * 60.00) / ((double)rpm3 * ((double)(TIM14->PSC) + 1.00) * 9600.00)) - 1.00);
 80063a8:	4b57      	ldr	r3, [pc, #348]	; (8006508 <SetPerfilTimers+0x280>)
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	ee07 3a90 	vmov	s15, r3
 80063b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80063b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80063b8:	ee37 6b06 	vadd.f64	d6, d7, d6
 80063bc:	4b4e      	ldr	r3, [pc, #312]	; (80064f8 <SetPerfilTimers+0x270>)
 80063be:	ed93 7b00 	vldr	d7, [r3]
 80063c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80063c6:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80064e0 <SetPerfilTimers+0x258>
 80063ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80063ce:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80064e8 <SetPerfilTimers+0x260>
 80063d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80063d6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80063da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80063de:	4b48      	ldr	r3, [pc, #288]	; (8006500 <SetPerfilTimers+0x278>)
 80063e0:	ed83 7b04 	vstr	d7, [r3, #16]


		// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo --------------
		for (int i = 0; i < 3; ++i) {
 80063e4:	2300      	movs	r3, #0
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	e0ad      	b.n	8006546 <SetPerfilTimers+0x2be>
			ErrorPeriodo[i] = periodoM[i] - (double) ((int32_t) periodoM[i]);
 80063ea:	4a45      	ldr	r2, [pc, #276]	; (8006500 <SetPerfilTimers+0x278>)
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	4413      	add	r3, r2
 80063f2:	ed93 6b00 	vldr	d6, [r3]
 80063f6:	4a42      	ldr	r2, [pc, #264]	; (8006500 <SetPerfilTimers+0x278>)
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	4413      	add	r3, r2
 80063fe:	ed93 7b00 	vldr	d7, [r3]
 8006402:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006406:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800640a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800640e:	4a3f      	ldr	r2, [pc, #252]	; (800650c <SetPerfilTimers+0x284>)
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	4413      	add	r3, r2
 8006416:	ed83 7b00 	vstr	d7, [r3]
			ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] + ErrorPeriodo[i];
 800641a:	4a3d      	ldr	r2, [pc, #244]	; (8006510 <SetPerfilTimers+0x288>)
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	4413      	add	r3, r2
 8006422:	ed93 6b00 	vldr	d6, [r3]
 8006426:	4a39      	ldr	r2, [pc, #228]	; (800650c <SetPerfilTimers+0x284>)
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	4413      	add	r3, r2
 800642e:	ed93 7b00 	vldr	d7, [r3]
 8006432:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006436:	4a36      	ldr	r2, [pc, #216]	; (8006510 <SetPerfilTimers+0x288>)
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	4413      	add	r3, r2
 800643e:	ed83 7b00 	vstr	d7, [r3]
			if (ErrorAcumuladoPeriodo[i] > 1) {
 8006442:	4a33      	ldr	r2, [pc, #204]	; (8006510 <SetPerfilTimers+0x288>)
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4413      	add	r3, r2
 800644a:	ed93 7b00 	vldr	d7, [r3]
 800644e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006452:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645a:	dd1f      	ble.n	800649c <SetPerfilTimers+0x214>
				periodoM[i] = periodoM[i] + 1;
 800645c:	4a28      	ldr	r2, [pc, #160]	; (8006500 <SetPerfilTimers+0x278>)
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4413      	add	r3, r2
 8006464:	ed93 7b00 	vldr	d7, [r3]
 8006468:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800646c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006470:	4a23      	ldr	r2, [pc, #140]	; (8006500 <SetPerfilTimers+0x278>)
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	4413      	add	r3, r2
 8006478:	ed83 7b00 	vstr	d7, [r3]
				ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] - 1;
 800647c:	4a24      	ldr	r2, [pc, #144]	; (8006510 <SetPerfilTimers+0x288>)
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	4413      	add	r3, r2
 8006484:	ed93 7b00 	vldr	d7, [r3]
 8006488:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800648c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006490:	4a1f      	ldr	r2, [pc, #124]	; (8006510 <SetPerfilTimers+0x288>)
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	4413      	add	r3, r2
 8006498:	ed83 7b00 	vstr	d7, [r3]
			}
			if (periodoM[i] < 2) {
 800649c:	4a18      	ldr	r2, [pc, #96]	; (8006500 <SetPerfilTimers+0x278>)
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	4413      	add	r3, r2
 80064a4:	ed93 7b00 	vldr	d7, [r3]
 80064a8:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80064ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80064b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b4:	d52e      	bpl.n	8006514 <SetPerfilTimers+0x28c>
				periodoM[i] = 0; // velocidad lineal de 10.000mm/s !!!
 80064b6:	4a12      	ldr	r2, [pc, #72]	; (8006500 <SetPerfilTimers+0x278>)
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	18d1      	adds	r1, r2, r3
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	e9c1 2300 	strd	r2, r3, [r1]
 80064ca:	e039      	b.n	8006540 <SetPerfilTimers+0x2b8>
 80064cc:	f3af 8000 	nop.w
 80064d0:	66ed2a99 	.word	0x66ed2a99
 80064d4:	4023193d 	.word	0x4023193d
 80064d8:	9999999a 	.word	0x9999999a
 80064dc:	3fb99999 	.word	0x3fb99999
 80064e0:	00000000 	.word	0x00000000
 80064e4:	40c2c000 	.word	0x40c2c000
 80064e8:	00000000 	.word	0x00000000
 80064ec:	41ec9c38 	.word	0x41ec9c38
 80064f0:	24000528 	.word	0x24000528
 80064f4:	24000530 	.word	0x24000530
 80064f8:	24000538 	.word	0x24000538
 80064fc:	40001800 	.word	0x40001800
 8006500:	24000500 	.word	0x24000500
 8006504:	40001c00 	.word	0x40001c00
 8006508:	40002000 	.word	0x40002000
 800650c:	24000540 	.word	0x24000540
 8006510:	24000558 	.word	0x24000558
			}

			else if (periodoM[i] > pow(2, 16)) { 		// desborde de timer 32 bits
 8006514:	4a98      	ldr	r2, [pc, #608]	; (8006778 <SetPerfilTimers+0x4f0>)
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	4413      	add	r3, r2
 800651c:	ed93 7b00 	vldr	d7, [r3]
 8006520:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8006760 <SetPerfilTimers+0x4d8>
 8006524:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800652c:	dd08      	ble.n	8006540 <SetPerfilTimers+0x2b8>
				periodoM[i] = pow(2, 16);
 800652e:	4a92      	ldr	r2, [pc, #584]	; (8006778 <SetPerfilTimers+0x4f0>)
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	18d1      	adds	r1, r2, r3
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	4b90      	ldr	r3, [pc, #576]	; (800677c <SetPerfilTimers+0x4f4>)
 800653c:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	3301      	adds	r3, #1
 8006544:	61fb      	str	r3, [r7, #28]
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	2b02      	cmp	r3, #2
 800654a:	f77f af4e 	ble.w	80063ea <SetPerfilTimers+0x162>
			}
		}

			periodoM[0]=(uint32_t)(((FCL * 60.0) / (rpm1 * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 800654e:	4b8c      	ldr	r3, [pc, #560]	; (8006780 <SetPerfilTimers+0x4f8>)
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800655a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800655e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006562:	4b88      	ldr	r3, [pc, #544]	; (8006784 <SetPerfilTimers+0x4fc>)
 8006564:	ed93 7b00 	vldr	d7, [r3]
 8006568:	ee26 7b07 	vmul.f64	d7, d6, d7
 800656c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8006768 <SetPerfilTimers+0x4e0>
 8006570:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006574:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 8006770 <SetPerfilTimers+0x4e8>
 8006578:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800657c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006580:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006584:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006588:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800658c:	4b7a      	ldr	r3, [pc, #488]	; (8006778 <SetPerfilTimers+0x4f0>)
 800658e:	ed83 7b00 	vstr	d7, [r3]
			periodoM[1]=(uint32_t)(((FCL * 60.0) / (rpm2 * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8006592:	4b7d      	ldr	r3, [pc, #500]	; (8006788 <SetPerfilTimers+0x500>)
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800659e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065a2:	ee37 6b06 	vadd.f64	d6, d7, d6
 80065a6:	4b79      	ldr	r3, [pc, #484]	; (800678c <SetPerfilTimers+0x504>)
 80065a8:	ed93 7b00 	vldr	d7, [r3]
 80065ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80065b0:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8006768 <SetPerfilTimers+0x4e0>
 80065b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065b8:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 8006770 <SetPerfilTimers+0x4e8>
 80065bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80065c0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80065c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80065cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065d0:	4b69      	ldr	r3, [pc, #420]	; (8006778 <SetPerfilTimers+0x4f0>)
 80065d2:	ed83 7b02 	vstr	d7, [r3, #8]
			periodoM[2]=(uint32_t)(((FCL * 60.0) / (rpm3 * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 80065d6:	4b6e      	ldr	r3, [pc, #440]	; (8006790 <SetPerfilTimers+0x508>)
 80065d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065e6:	ee37 6b06 	vadd.f64	d6, d7, d6
 80065ea:	4b6a      	ldr	r3, [pc, #424]	; (8006794 <SetPerfilTimers+0x50c>)
 80065ec:	ed93 7b00 	vldr	d7, [r3]
 80065f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80065f4:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8006768 <SetPerfilTimers+0x4e0>
 80065f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065fc:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8006770 <SetPerfilTimers+0x4e8>
 8006600:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006604:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006608:	ee37 7b46 	vsub.f64	d7, d7, d6
 800660c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006610:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006614:	4b58      	ldr	r3, [pc, #352]	; (8006778 <SetPerfilTimers+0x4f0>)
 8006616:	ed83 7b04 	vstr	d7, [r3, #16]


			if (TIM12->CNT > periodoM[0]) {
 800661a:	4b59      	ldr	r3, [pc, #356]	; (8006780 <SetPerfilTimers+0x4f8>)
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006626:	4b54      	ldr	r3, [pc, #336]	; (8006778 <SetPerfilTimers+0x4f0>)
 8006628:	ed93 7b00 	vldr	d7, [r3]
 800662c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006634:	dd0c      	ble.n	8006650 <SetPerfilTimers+0x3c8>
						TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8006636:	4b50      	ldr	r3, [pc, #320]	; (8006778 <SetPerfilTimers+0x4f0>)
 8006638:	ed93 7b00 	vldr	d7, [r3]
 800663c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006640:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006644:	4b4e      	ldr	r3, [pc, #312]	; (8006780 <SetPerfilTimers+0x4f8>)
 8006646:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800664a:	ee17 2a90 	vmov	r2, s15
 800664e:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM13->CNT > periodoM[1]) {
 8006650:	4b4d      	ldr	r3, [pc, #308]	; (8006788 <SetPerfilTimers+0x500>)
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	ee07 3a90 	vmov	s15, r3
 8006658:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800665c:	4b46      	ldr	r3, [pc, #280]	; (8006778 <SetPerfilTimers+0x4f0>)
 800665e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006662:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666a:	dd0c      	ble.n	8006686 <SetPerfilTimers+0x3fe>
						TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 800666c:	4b42      	ldr	r3, [pc, #264]	; (8006778 <SetPerfilTimers+0x4f0>)
 800666e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006672:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006676:	ee37 7b46 	vsub.f64	d7, d7, d6
 800667a:	4b43      	ldr	r3, [pc, #268]	; (8006788 <SetPerfilTimers+0x500>)
 800667c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006680:	ee17 2a90 	vmov	r2, s15
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM14->CNT > periodoM[2]) {
 8006686:	4b42      	ldr	r3, [pc, #264]	; (8006790 <SetPerfilTimers+0x508>)
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006692:	4b39      	ldr	r3, [pc, #228]	; (8006778 <SetPerfilTimers+0x4f0>)
 8006694:	ed93 7b04 	vldr	d7, [r3, #16]
 8006698:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800669c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a0:	dd0c      	ble.n	80066bc <SetPerfilTimers+0x434>
						TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80066a2:	4b35      	ldr	r3, [pc, #212]	; (8006778 <SetPerfilTimers+0x4f0>)
 80066a4:	ed93 7b04 	vldr	d7, [r3, #16]
 80066a8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066b0:	4b37      	ldr	r3, [pc, #220]	; (8006790 <SetPerfilTimers+0x508>)
 80066b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066b6:	ee17 2a90 	vmov	r2, s15
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24
			}

			TIM12->ARR =periodoM[0];
 80066bc:	4b2e      	ldr	r3, [pc, #184]	; (8006778 <SetPerfilTimers+0x4f0>)
 80066be:	ed93 7b00 	vldr	d7, [r3]
 80066c2:	4b2f      	ldr	r3, [pc, #188]	; (8006780 <SetPerfilTimers+0x4f8>)
 80066c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066c8:	ee17 2a90 	vmov	r2, s15
 80066cc:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 80066ce:	4b2c      	ldr	r3, [pc, #176]	; (8006780 <SetPerfilTimers+0x4f8>)
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80066da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80066de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066e2:	4b27      	ldr	r3, [pc, #156]	; (8006780 <SetPerfilTimers+0x4f8>)
 80066e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066e8:	ee17 2a90 	vmov	r2, s15
 80066ec:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->ARR =periodoM[1];
 80066ee:	4b22      	ldr	r3, [pc, #136]	; (8006778 <SetPerfilTimers+0x4f0>)
 80066f0:	ed93 7b02 	vldr	d7, [r3, #8]
 80066f4:	4b24      	ldr	r3, [pc, #144]	; (8006788 <SetPerfilTimers+0x500>)
 80066f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066fa:	ee17 2a90 	vmov	r2, s15
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8006700:	4b21      	ldr	r3, [pc, #132]	; (8006788 <SetPerfilTimers+0x500>)
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	ee07 3a90 	vmov	s15, r3
 8006708:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800670c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006710:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006714:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <SetPerfilTimers+0x500>)
 8006716:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800671a:	ee17 2a90 	vmov	r2, s15
 800671e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM14->ARR =periodoM[2];
 8006720:	4b15      	ldr	r3, [pc, #84]	; (8006778 <SetPerfilTimers+0x4f0>)
 8006722:	ed93 7b04 	vldr	d7, [r3, #16]
 8006726:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <SetPerfilTimers+0x508>)
 8006728:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800672c:	ee17 2a90 	vmov	r2, s15
 8006730:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8006732:	4b17      	ldr	r3, [pc, #92]	; (8006790 <SetPerfilTimers+0x508>)
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	ee07 3a90 	vmov	s15, r3
 800673a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800673e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006742:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006746:	4b12      	ldr	r3, [pc, #72]	; (8006790 <SetPerfilTimers+0x508>)
 8006748:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800674c:	ee17 2a90 	vmov	r2, s15
 8006750:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->CNT = Periodo[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		if (TIM14->CNT > Periodo[2]) {
			TIM14->CNT = Periodo[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}*/
}
 8006752:	bf00      	nop
 8006754:	3724      	adds	r7, #36	; 0x24
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	00000000 	.word	0x00000000
 8006764:	40f00000 	.word	0x40f00000
 8006768:	00000000 	.word	0x00000000
 800676c:	40c2c000 	.word	0x40c2c000
 8006770:	00000000 	.word	0x00000000
 8006774:	41ec9c38 	.word	0x41ec9c38
 8006778:	24000500 	.word	0x24000500
 800677c:	40f00000 	.word	0x40f00000
 8006780:	40001800 	.word	0x40001800
 8006784:	24000528 	.word	0x24000528
 8006788:	40001c00 	.word	0x40001c00
 800678c:	24000530 	.word	0x24000530
 8006790:	40002000 	.word	0x40002000
 8006794:	24000538 	.word	0x24000538

08006798 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800679c:	4b22      	ldr	r3, [pc, #136]	; (8006828 <MX_USART1_UART_Init+0x90>)
 800679e:	4a23      	ldr	r2, [pc, #140]	; (800682c <MX_USART1_UART_Init+0x94>)
 80067a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80067a2:	4b21      	ldr	r3, [pc, #132]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80067a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067aa:	4b1f      	ldr	r3, [pc, #124]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067b0:	4b1d      	ldr	r3, [pc, #116]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067b6:	4b1c      	ldr	r3, [pc, #112]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067bc:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067be:	220c      	movs	r2, #12
 80067c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067c2:	4b19      	ldr	r3, [pc, #100]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067c8:	4b17      	ldr	r3, [pc, #92]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067ce:	4b16      	ldr	r3, [pc, #88]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80067d4:	4b14      	ldr	r3, [pc, #80]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067da:	4b13      	ldr	r3, [pc, #76]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067dc:	2200      	movs	r2, #0
 80067de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80067e0:	4811      	ldr	r0, [pc, #68]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067e2:	f005 fecf 	bl	800c584 <HAL_UART_Init>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80067ec:	f7fc fdb4 	bl	8003358 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80067f0:	2100      	movs	r1, #0
 80067f2:	480d      	ldr	r0, [pc, #52]	; (8006828 <MX_USART1_UART_Init+0x90>)
 80067f4:	f008 f959 	bl	800eaaa <HAL_UARTEx_SetTxFifoThreshold>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80067fe:	f7fc fdab 	bl	8003358 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006802:	2100      	movs	r1, #0
 8006804:	4808      	ldr	r0, [pc, #32]	; (8006828 <MX_USART1_UART_Init+0x90>)
 8006806:	f008 f98e 	bl	800eb26 <HAL_UARTEx_SetRxFifoThreshold>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006810:	f7fc fda2 	bl	8003358 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006814:	4804      	ldr	r0, [pc, #16]	; (8006828 <MX_USART1_UART_Init+0x90>)
 8006816:	f008 f90f 	bl	800ea38 <HAL_UARTEx_DisableFifoMode>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006820:	f7fc fd9a 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006824:	bf00      	nop
 8006826:	bd80      	pop	{r7, pc}
 8006828:	24000bd0 	.word	0x24000bd0
 800682c:	40011000 	.word	0x40011000

08006830 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006834:	4b22      	ldr	r3, [pc, #136]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 8006836:	4a23      	ldr	r2, [pc, #140]	; (80068c4 <MX_USART2_UART_Init+0x94>)
 8006838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800683a:	4b21      	ldr	r3, [pc, #132]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 800683c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006842:	4b1f      	ldr	r3, [pc, #124]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 8006844:	2200      	movs	r2, #0
 8006846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006848:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 800684a:	2200      	movs	r2, #0
 800684c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 8006850:	2200      	movs	r2, #0
 8006852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006854:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 8006856:	220c      	movs	r2, #12
 8006858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800685a:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 800685c:	2200      	movs	r2, #0
 800685e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006860:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 8006862:	2200      	movs	r2, #0
 8006864:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006866:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 8006868:	2200      	movs	r2, #0
 800686a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800686c:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 800686e:	2200      	movs	r2, #0
 8006870:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006872:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 8006874:	2200      	movs	r2, #0
 8006876:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006878:	4811      	ldr	r0, [pc, #68]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 800687a:	f005 fe83 	bl	800c584 <HAL_UART_Init>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006884:	f7fc fd68 	bl	8003358 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006888:	2100      	movs	r1, #0
 800688a:	480d      	ldr	r0, [pc, #52]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 800688c:	f008 f90d 	bl	800eaaa <HAL_UARTEx_SetTxFifoThreshold>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006896:	f7fc fd5f 	bl	8003358 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800689a:	2100      	movs	r1, #0
 800689c:	4808      	ldr	r0, [pc, #32]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 800689e:	f008 f942 	bl	800eb26 <HAL_UARTEx_SetRxFifoThreshold>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80068a8:	f7fc fd56 	bl	8003358 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80068ac:	4804      	ldr	r0, [pc, #16]	; (80068c0 <MX_USART2_UART_Init+0x90>)
 80068ae:	f008 f8c3 	bl	800ea38 <HAL_UARTEx_DisableFifoMode>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80068b8:	f7fc fd4e 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80068bc:	bf00      	nop
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	24000c60 	.word	0x24000c60
 80068c4:	40004400 	.word	0x40004400

080068c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80068cc:	4b22      	ldr	r3, [pc, #136]	; (8006958 <MX_USART3_UART_Init+0x90>)
 80068ce:	4a23      	ldr	r2, [pc, #140]	; (800695c <MX_USART3_UART_Init+0x94>)
 80068d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80068d2:	4b21      	ldr	r3, [pc, #132]	; (8006958 <MX_USART3_UART_Init+0x90>)
 80068d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80068d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80068da:	4b1f      	ldr	r3, [pc, #124]	; (8006958 <MX_USART3_UART_Init+0x90>)
 80068dc:	2200      	movs	r2, #0
 80068de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80068e0:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <MX_USART3_UART_Init+0x90>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80068e6:	4b1c      	ldr	r3, [pc, #112]	; (8006958 <MX_USART3_UART_Init+0x90>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80068ec:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <MX_USART3_UART_Init+0x90>)
 80068ee:	220c      	movs	r2, #12
 80068f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068f2:	4b19      	ldr	r3, [pc, #100]	; (8006958 <MX_USART3_UART_Init+0x90>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80068f8:	4b17      	ldr	r3, [pc, #92]	; (8006958 <MX_USART3_UART_Init+0x90>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068fe:	4b16      	ldr	r3, [pc, #88]	; (8006958 <MX_USART3_UART_Init+0x90>)
 8006900:	2200      	movs	r2, #0
 8006902:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006904:	4b14      	ldr	r3, [pc, #80]	; (8006958 <MX_USART3_UART_Init+0x90>)
 8006906:	2200      	movs	r2, #0
 8006908:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800690a:	4b13      	ldr	r3, [pc, #76]	; (8006958 <MX_USART3_UART_Init+0x90>)
 800690c:	2200      	movs	r2, #0
 800690e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006910:	4811      	ldr	r0, [pc, #68]	; (8006958 <MX_USART3_UART_Init+0x90>)
 8006912:	f005 fe37 	bl	800c584 <HAL_UART_Init>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800691c:	f7fc fd1c 	bl	8003358 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006920:	2100      	movs	r1, #0
 8006922:	480d      	ldr	r0, [pc, #52]	; (8006958 <MX_USART3_UART_Init+0x90>)
 8006924:	f008 f8c1 	bl	800eaaa <HAL_UARTEx_SetTxFifoThreshold>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800692e:	f7fc fd13 	bl	8003358 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006932:	2100      	movs	r1, #0
 8006934:	4808      	ldr	r0, [pc, #32]	; (8006958 <MX_USART3_UART_Init+0x90>)
 8006936:	f008 f8f6 	bl	800eb26 <HAL_UARTEx_SetRxFifoThreshold>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006940:	f7fc fd0a 	bl	8003358 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006944:	4804      	ldr	r0, [pc, #16]	; (8006958 <MX_USART3_UART_Init+0x90>)
 8006946:	f008 f877 	bl	800ea38 <HAL_UARTEx_DisableFifoMode>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006950:	f7fc fd02 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006954:	bf00      	nop
 8006956:	bd80      	pop	{r7, pc}
 8006958:	24000cf0 	.word	0x24000cf0
 800695c:	40004800 	.word	0x40004800

08006960 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b0be      	sub	sp, #248	; 0xf8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006968:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	609a      	str	r2, [r3, #8]
 8006974:	60da      	str	r2, [r3, #12]
 8006976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800697c:	22bc      	movs	r2, #188	; 0xbc
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f008 f995 	bl	800ecb0 <memset>
  if(uartHandle->Instance==USART1)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a84      	ldr	r2, [pc, #528]	; (8006b9c <HAL_UART_MspInit+0x23c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d168      	bne.n	8006a62 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006990:	2301      	movs	r3, #1
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006994:	2300      	movs	r3, #0
 8006996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800699a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800699e:	4618      	mov	r0, r3
 80069a0:	f002 fa8c 	bl	8008ebc <HAL_RCCEx_PeriphCLKConfig>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80069aa:	f7fc fcd5 	bl	8003358 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80069ae:	4b7c      	ldr	r3, [pc, #496]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 80069b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069b4:	4a7a      	ldr	r2, [pc, #488]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 80069b6:	f043 0310 	orr.w	r3, r3, #16
 80069ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80069be:	4b78      	ldr	r3, [pc, #480]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 80069c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069cc:	4b74      	ldr	r3, [pc, #464]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 80069ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069d2:	4a73      	ldr	r2, [pc, #460]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 80069d4:	f043 0302 	orr.w	r3, r3, #2
 80069d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069dc:	4b70      	ldr	r3, [pc, #448]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 80069de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	623b      	str	r3, [r7, #32]
 80069e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069ea:	4b6d      	ldr	r3, [pc, #436]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 80069ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069f0:	4a6b      	ldr	r2, [pc, #428]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069fa:	4b69      	ldr	r3, [pc, #420]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 80069fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a10:	2302      	movs	r3, #2
 8006a12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006a22:	2304      	movs	r3, #4
 8006a24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8006a28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	485d      	ldr	r0, [pc, #372]	; (8006ba4 <HAL_UART_MspInit+0x244>)
 8006a30:	f001 f854 	bl	8007adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8006a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006a4e:	2307      	movs	r3, #7
 8006a50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8006a54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4853      	ldr	r0, [pc, #332]	; (8006ba8 <HAL_UART_MspInit+0x248>)
 8006a5c:	f001 f83e 	bl	8007adc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006a60:	e097      	b.n	8006b92 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a51      	ldr	r2, [pc, #324]	; (8006bac <HAL_UART_MspInit+0x24c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d142      	bne.n	8006af2 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006a70:	2300      	movs	r3, #0
 8006a72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f002 fa1e 	bl	8008ebc <HAL_RCCEx_PeriphCLKConfig>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8006a86:	f7fc fc67 	bl	8003358 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a8a:	4b45      	ldr	r3, [pc, #276]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a90:	4a43      	ldr	r2, [pc, #268]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a9a:	4b41      	ldr	r3, [pc, #260]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aa8:	4b3d      	ldr	r3, [pc, #244]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aae:	4a3c      	ldr	r2, [pc, #240]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ab8:	4b39      	ldr	r3, [pc, #228]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006acc:	2302      	movs	r3, #2
 8006ace:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006ade:	2307      	movs	r3, #7
 8006ae0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ae4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006ae8:	4619      	mov	r1, r3
 8006aea:	482f      	ldr	r0, [pc, #188]	; (8006ba8 <HAL_UART_MspInit+0x248>)
 8006aec:	f000 fff6 	bl	8007adc <HAL_GPIO_Init>
}
 8006af0:	e04f      	b.n	8006b92 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a2e      	ldr	r2, [pc, #184]	; (8006bb0 <HAL_UART_MspInit+0x250>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d14a      	bne.n	8006b92 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006afc:	2302      	movs	r3, #2
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f002 f9d6 	bl	8008ebc <HAL_RCCEx_PeriphCLKConfig>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8006b16:	f7fc fc1f 	bl	8003358 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006b1a:	4b21      	ldr	r3, [pc, #132]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b20:	4a1f      	ldr	r2, [pc, #124]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006b22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b38:	4b19      	ldr	r3, [pc, #100]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b3e:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006b40:	f043 0308 	orr.w	r3, r3, #8
 8006b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b48:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <HAL_UART_MspInit+0x240>)
 8006b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8006b56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006b70:	2307      	movs	r3, #7
 8006b72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b76:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	480d      	ldr	r0, [pc, #52]	; (8006bb4 <HAL_UART_MspInit+0x254>)
 8006b7e:	f000 ffad 	bl	8007adc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8006b82:	2201      	movs	r2, #1
 8006b84:	2101      	movs	r1, #1
 8006b86:	2027      	movs	r0, #39	; 0x27
 8006b88:	f000 fa01 	bl	8006f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006b8c:	2027      	movs	r0, #39	; 0x27
 8006b8e:	f000 fa18 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
}
 8006b92:	bf00      	nop
 8006b94:	37f8      	adds	r7, #248	; 0xf8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40011000 	.word	0x40011000
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	58020400 	.word	0x58020400
 8006ba8:	58020000 	.word	0x58020000
 8006bac:	40004400 	.word	0x40004400
 8006bb0:	40004800 	.word	0x40004800
 8006bb4:	58020c00 	.word	0x58020c00

08006bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006bbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006bbe:	e003      	b.n	8006bc8 <LoopCopyDataInit>

08006bc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006bc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006bc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006bc6:	3104      	adds	r1, #4

08006bc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006bc8:	480b      	ldr	r0, [pc, #44]	; (8006bf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006bca:	4b0c      	ldr	r3, [pc, #48]	; (8006bfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006bcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006bce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006bd0:	d3f6      	bcc.n	8006bc0 <CopyDataInit>
  ldr  r2, =_sbss
 8006bd2:	4a0b      	ldr	r2, [pc, #44]	; (8006c00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006bd4:	e002      	b.n	8006bdc <LoopFillZerobss>

08006bd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006bd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006bd8:	f842 3b04 	str.w	r3, [r2], #4

08006bdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006bdc:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006bde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006be0:	d3f9      	bcc.n	8006bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006be2:	f7fd f9b7 	bl	8003f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006be6:	f008 f831 	bl	800ec4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006bea:	f7fb ff5d 	bl	8002aa8 <main>
  bx  lr    
 8006bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006bf0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006bf4:	08014080 	.word	0x08014080
  ldr  r0, =_sdata
 8006bf8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006bfc:	24000284 	.word	0x24000284
  ldr  r2, =_sbss
 8006c00:	24000288 	.word	0x24000288
  ldr  r3, = _ebss
 8006c04:	24000d94 	.word	0x24000d94

08006c08 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c08:	e7fe      	b.n	8006c08 <ADC3_IRQHandler>
	...

08006c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c12:	2003      	movs	r0, #3
 8006c14:	f000 f9b0 	bl	8006f78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c18:	f001 ff7a 	bl	8008b10 <HAL_RCC_GetSysClockFreq>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	4b15      	ldr	r3, [pc, #84]	; (8006c74 <HAL_Init+0x68>)
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	f003 030f 	and.w	r3, r3, #15
 8006c28:	4913      	ldr	r1, [pc, #76]	; (8006c78 <HAL_Init+0x6c>)
 8006c2a:	5ccb      	ldrb	r3, [r1, r3]
 8006c2c:	f003 031f 	and.w	r3, r3, #31
 8006c30:	fa22 f303 	lsr.w	r3, r2, r3
 8006c34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c36:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <HAL_Init+0x68>)
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	4a0e      	ldr	r2, [pc, #56]	; (8006c78 <HAL_Init+0x6c>)
 8006c40:	5cd3      	ldrb	r3, [r2, r3]
 8006c42:	f003 031f 	and.w	r3, r3, #31
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4c:	4a0b      	ldr	r2, [pc, #44]	; (8006c7c <HAL_Init+0x70>)
 8006c4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c50:	4a0b      	ldr	r2, [pc, #44]	; (8006c80 <HAL_Init+0x74>)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c56:	2000      	movs	r0, #0
 8006c58:	f000 f814 	bl	8006c84 <HAL_InitTick>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e002      	b.n	8006c6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006c66:	f7fc fffb 	bl	8003c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	58024400 	.word	0x58024400
 8006c78:	08012350 	.word	0x08012350
 8006c7c:	24000014 	.word	0x24000014
 8006c80:	24000010 	.word	0x24000010

08006c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006c8c:	4b15      	ldr	r3, [pc, #84]	; (8006ce4 <HAL_InitTick+0x60>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e021      	b.n	8006cdc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006c98:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <HAL_InitTick+0x64>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <HAL_InitTick+0x60>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 f9a3 	bl	8006ffa <HAL_SYSTICK_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e00e      	b.n	8006cdc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b0f      	cmp	r3, #15
 8006cc2:	d80a      	bhi.n	8006cda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	f000 f95f 	bl	8006f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cd0:	4a06      	ldr	r2, [pc, #24]	; (8006cec <HAL_InitTick+0x68>)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e000      	b.n	8006cdc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	240000ac 	.word	0x240000ac
 8006ce8:	24000010 	.word	0x24000010
 8006cec:	240000a8 	.word	0x240000a8

08006cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006cf4:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <HAL_IncTick+0x20>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <HAL_IncTick+0x24>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4413      	add	r3, r2
 8006d00:	4a04      	ldr	r2, [pc, #16]	; (8006d14 <HAL_IncTick+0x24>)
 8006d02:	6013      	str	r3, [r2, #0]
}
 8006d04:	bf00      	nop
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	240000ac 	.word	0x240000ac
 8006d14:	24000d80 	.word	0x24000d80

08006d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8006d1c:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <HAL_GetTick+0x14>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	24000d80 	.word	0x24000d80

08006d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d38:	f7ff ffee 	bl	8006d18 <HAL_GetTick>
 8006d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d005      	beq.n	8006d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <HAL_Delay+0x44>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d56:	bf00      	nop
 8006d58:	f7ff ffde 	bl	8006d18 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d8f7      	bhi.n	8006d58 <HAL_Delay+0x28>
  {
  }
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	240000ac 	.word	0x240000ac

08006d78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006d7c:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <HAL_GetREVID+0x14>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	0c1b      	lsrs	r3, r3, #16
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	5c001000 	.word	0x5c001000

08006d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006dac:	4013      	ands	r3, r2
 8006dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dbe:	4a04      	ldr	r2, [pc, #16]	; (8006dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	60d3      	str	r3, [r2, #12]
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	e000ed00 	.word	0xe000ed00
 8006dd4:	05fa0000 	.word	0x05fa0000

08006dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ddc:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <__NVIC_GetPriorityGrouping+0x18>)
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	0a1b      	lsrs	r3, r3, #8
 8006de2:	f003 0307 	and.w	r3, r3, #7
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	e000ed00 	.word	0xe000ed00

08006df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	db0b      	blt.n	8006e1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	f003 021f 	and.w	r2, r3, #31
 8006e0c:	4907      	ldr	r1, [pc, #28]	; (8006e2c <__NVIC_EnableIRQ+0x38>)
 8006e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	2001      	movs	r0, #1
 8006e16:	fa00 f202 	lsl.w	r2, r0, r2
 8006e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	e000e100 	.word	0xe000e100

08006e30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	db12      	blt.n	8006e68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	f003 021f 	and.w	r2, r3, #31
 8006e48:	490a      	ldr	r1, [pc, #40]	; (8006e74 <__NVIC_DisableIRQ+0x44>)
 8006e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	2001      	movs	r0, #1
 8006e52:	fa00 f202 	lsl.w	r2, r0, r2
 8006e56:	3320      	adds	r3, #32
 8006e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e5c:	f3bf 8f4f 	dsb	sy
}
 8006e60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e62:	f3bf 8f6f 	isb	sy
}
 8006e66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	e000e100 	.word	0xe000e100

08006e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	6039      	str	r1, [r7, #0]
 8006e82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	db0a      	blt.n	8006ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	490c      	ldr	r1, [pc, #48]	; (8006ec4 <__NVIC_SetPriority+0x4c>)
 8006e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e96:	0112      	lsls	r2, r2, #4
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ea0:	e00a      	b.n	8006eb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	4908      	ldr	r1, [pc, #32]	; (8006ec8 <__NVIC_SetPriority+0x50>)
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	3b04      	subs	r3, #4
 8006eb0:	0112      	lsls	r2, r2, #4
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	761a      	strb	r2, [r3, #24]
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	e000e100 	.word	0xe000e100
 8006ec8:	e000ed00 	.word	0xe000ed00

08006ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b089      	sub	sp, #36	; 0x24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f1c3 0307 	rsb	r3, r3, #7
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	bf28      	it	cs
 8006eea:	2304      	movcs	r3, #4
 8006eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	2b06      	cmp	r3, #6
 8006ef4:	d902      	bls.n	8006efc <NVIC_EncodePriority+0x30>
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	3b03      	subs	r3, #3
 8006efa:	e000      	b.n	8006efe <NVIC_EncodePriority+0x32>
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f00:	f04f 32ff 	mov.w	r2, #4294967295
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	43da      	mvns	r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	401a      	ands	r2, r3
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f14:	f04f 31ff 	mov.w	r1, #4294967295
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1e:	43d9      	mvns	r1, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f24:	4313      	orrs	r3, r2
         );
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3724      	adds	r7, #36	; 0x24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f44:	d301      	bcc.n	8006f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f46:	2301      	movs	r3, #1
 8006f48:	e00f      	b.n	8006f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f4a:	4a0a      	ldr	r2, [pc, #40]	; (8006f74 <SysTick_Config+0x40>)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f52:	210f      	movs	r1, #15
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295
 8006f58:	f7ff ff8e 	bl	8006e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <SysTick_Config+0x40>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f62:	4b04      	ldr	r3, [pc, #16]	; (8006f74 <SysTick_Config+0x40>)
 8006f64:	2207      	movs	r2, #7
 8006f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	e000e010 	.word	0xe000e010

08006f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff ff05 	bl	8006d90 <__NVIC_SetPriorityGrouping>
}
 8006f86:	bf00      	nop
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b086      	sub	sp, #24
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	4603      	mov	r3, r0
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	607a      	str	r2, [r7, #4]
 8006f9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f9c:	f7ff ff1c 	bl	8006dd8 <__NVIC_GetPriorityGrouping>
 8006fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	6978      	ldr	r0, [r7, #20]
 8006fa8:	f7ff ff90 	bl	8006ecc <NVIC_EncodePriority>
 8006fac:	4602      	mov	r2, r0
 8006fae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff ff5f 	bl	8006e78 <__NVIC_SetPriority>
}
 8006fba:	bf00      	nop
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	4603      	mov	r3, r0
 8006fca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff ff0f 	bl	8006df4 <__NVIC_EnableIRQ>
}
 8006fd6:	bf00      	nop
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff ff1f 	bl	8006e30 <__NVIC_DisableIRQ>
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff ff96 	bl	8006f34 <SysTick_Config>
 8007008:	4603      	mov	r3, r0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800701c:	f7ff fe7c 	bl	8006d18 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e2dc      	b.n	80075e6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d008      	beq.n	800704a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2280      	movs	r2, #128	; 0x80
 800703c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e2cd      	b.n	80075e6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a76      	ldr	r2, [pc, #472]	; (8007228 <HAL_DMA_Abort+0x214>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d04a      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a74      	ldr	r2, [pc, #464]	; (800722c <HAL_DMA_Abort+0x218>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d045      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a73      	ldr	r2, [pc, #460]	; (8007230 <HAL_DMA_Abort+0x21c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d040      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a71      	ldr	r2, [pc, #452]	; (8007234 <HAL_DMA_Abort+0x220>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d03b      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a70      	ldr	r2, [pc, #448]	; (8007238 <HAL_DMA_Abort+0x224>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d036      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a6e      	ldr	r2, [pc, #440]	; (800723c <HAL_DMA_Abort+0x228>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d031      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a6d      	ldr	r2, [pc, #436]	; (8007240 <HAL_DMA_Abort+0x22c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d02c      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a6b      	ldr	r2, [pc, #428]	; (8007244 <HAL_DMA_Abort+0x230>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d027      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a6a      	ldr	r2, [pc, #424]	; (8007248 <HAL_DMA_Abort+0x234>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d022      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a68      	ldr	r2, [pc, #416]	; (800724c <HAL_DMA_Abort+0x238>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d01d      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a67      	ldr	r2, [pc, #412]	; (8007250 <HAL_DMA_Abort+0x23c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d018      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a65      	ldr	r2, [pc, #404]	; (8007254 <HAL_DMA_Abort+0x240>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d013      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a64      	ldr	r2, [pc, #400]	; (8007258 <HAL_DMA_Abort+0x244>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00e      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a62      	ldr	r2, [pc, #392]	; (800725c <HAL_DMA_Abort+0x248>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d009      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a61      	ldr	r2, [pc, #388]	; (8007260 <HAL_DMA_Abort+0x24c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d004      	beq.n	80070ea <HAL_DMA_Abort+0xd6>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a5f      	ldr	r2, [pc, #380]	; (8007264 <HAL_DMA_Abort+0x250>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d101      	bne.n	80070ee <HAL_DMA_Abort+0xda>
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <HAL_DMA_Abort+0xdc>
 80070ee:	2300      	movs	r3, #0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d013      	beq.n	800711c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 021e 	bic.w	r2, r2, #30
 8007102:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695a      	ldr	r2, [r3, #20]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007112:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	e00a      	b.n	8007132 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 020e 	bic.w	r2, r2, #14
 800712a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a3c      	ldr	r2, [pc, #240]	; (8007228 <HAL_DMA_Abort+0x214>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d072      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a3a      	ldr	r2, [pc, #232]	; (800722c <HAL_DMA_Abort+0x218>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d06d      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a39      	ldr	r2, [pc, #228]	; (8007230 <HAL_DMA_Abort+0x21c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d068      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a37      	ldr	r2, [pc, #220]	; (8007234 <HAL_DMA_Abort+0x220>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d063      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a36      	ldr	r2, [pc, #216]	; (8007238 <HAL_DMA_Abort+0x224>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d05e      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a34      	ldr	r2, [pc, #208]	; (800723c <HAL_DMA_Abort+0x228>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d059      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a33      	ldr	r2, [pc, #204]	; (8007240 <HAL_DMA_Abort+0x22c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d054      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a31      	ldr	r2, [pc, #196]	; (8007244 <HAL_DMA_Abort+0x230>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d04f      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a30      	ldr	r2, [pc, #192]	; (8007248 <HAL_DMA_Abort+0x234>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d04a      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a2e      	ldr	r2, [pc, #184]	; (800724c <HAL_DMA_Abort+0x238>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d045      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a2d      	ldr	r2, [pc, #180]	; (8007250 <HAL_DMA_Abort+0x23c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d040      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a2b      	ldr	r2, [pc, #172]	; (8007254 <HAL_DMA_Abort+0x240>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d03b      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2a      	ldr	r2, [pc, #168]	; (8007258 <HAL_DMA_Abort+0x244>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d036      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a28      	ldr	r2, [pc, #160]	; (800725c <HAL_DMA_Abort+0x248>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d031      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a27      	ldr	r2, [pc, #156]	; (8007260 <HAL_DMA_Abort+0x24c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d02c      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a25      	ldr	r2, [pc, #148]	; (8007264 <HAL_DMA_Abort+0x250>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d027      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a24      	ldr	r2, [pc, #144]	; (8007268 <HAL_DMA_Abort+0x254>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d022      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a22      	ldr	r2, [pc, #136]	; (800726c <HAL_DMA_Abort+0x258>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01d      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a21      	ldr	r2, [pc, #132]	; (8007270 <HAL_DMA_Abort+0x25c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d018      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a1f      	ldr	r2, [pc, #124]	; (8007274 <HAL_DMA_Abort+0x260>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d013      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <HAL_DMA_Abort+0x264>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00e      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1c      	ldr	r2, [pc, #112]	; (800727c <HAL_DMA_Abort+0x268>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d009      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a1b      	ldr	r2, [pc, #108]	; (8007280 <HAL_DMA_Abort+0x26c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <HAL_DMA_Abort+0x20e>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a19      	ldr	r2, [pc, #100]	; (8007284 <HAL_DMA_Abort+0x270>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d132      	bne.n	8007288 <HAL_DMA_Abort+0x274>
 8007222:	2301      	movs	r3, #1
 8007224:	e031      	b.n	800728a <HAL_DMA_Abort+0x276>
 8007226:	bf00      	nop
 8007228:	40020010 	.word	0x40020010
 800722c:	40020028 	.word	0x40020028
 8007230:	40020040 	.word	0x40020040
 8007234:	40020058 	.word	0x40020058
 8007238:	40020070 	.word	0x40020070
 800723c:	40020088 	.word	0x40020088
 8007240:	400200a0 	.word	0x400200a0
 8007244:	400200b8 	.word	0x400200b8
 8007248:	40020410 	.word	0x40020410
 800724c:	40020428 	.word	0x40020428
 8007250:	40020440 	.word	0x40020440
 8007254:	40020458 	.word	0x40020458
 8007258:	40020470 	.word	0x40020470
 800725c:	40020488 	.word	0x40020488
 8007260:	400204a0 	.word	0x400204a0
 8007264:	400204b8 	.word	0x400204b8
 8007268:	58025408 	.word	0x58025408
 800726c:	5802541c 	.word	0x5802541c
 8007270:	58025430 	.word	0x58025430
 8007274:	58025444 	.word	0x58025444
 8007278:	58025458 	.word	0x58025458
 800727c:	5802546c 	.word	0x5802546c
 8007280:	58025480 	.word	0x58025480
 8007284:	58025494 	.word	0x58025494
 8007288:	2300      	movs	r3, #0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d007      	beq.n	800729e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800729c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a6d      	ldr	r2, [pc, #436]	; (8007458 <HAL_DMA_Abort+0x444>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d04a      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a6b      	ldr	r2, [pc, #428]	; (800745c <HAL_DMA_Abort+0x448>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d045      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a6a      	ldr	r2, [pc, #424]	; (8007460 <HAL_DMA_Abort+0x44c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d040      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a68      	ldr	r2, [pc, #416]	; (8007464 <HAL_DMA_Abort+0x450>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d03b      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a67      	ldr	r2, [pc, #412]	; (8007468 <HAL_DMA_Abort+0x454>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d036      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a65      	ldr	r2, [pc, #404]	; (800746c <HAL_DMA_Abort+0x458>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d031      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a64      	ldr	r2, [pc, #400]	; (8007470 <HAL_DMA_Abort+0x45c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d02c      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a62      	ldr	r2, [pc, #392]	; (8007474 <HAL_DMA_Abort+0x460>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d027      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a61      	ldr	r2, [pc, #388]	; (8007478 <HAL_DMA_Abort+0x464>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d022      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a5f      	ldr	r2, [pc, #380]	; (800747c <HAL_DMA_Abort+0x468>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d01d      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a5e      	ldr	r2, [pc, #376]	; (8007480 <HAL_DMA_Abort+0x46c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d018      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a5c      	ldr	r2, [pc, #368]	; (8007484 <HAL_DMA_Abort+0x470>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d013      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a5b      	ldr	r2, [pc, #364]	; (8007488 <HAL_DMA_Abort+0x474>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00e      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a59      	ldr	r2, [pc, #356]	; (800748c <HAL_DMA_Abort+0x478>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d009      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a58      	ldr	r2, [pc, #352]	; (8007490 <HAL_DMA_Abort+0x47c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d004      	beq.n	800733e <HAL_DMA_Abort+0x32a>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a56      	ldr	r2, [pc, #344]	; (8007494 <HAL_DMA_Abort+0x480>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d108      	bne.n	8007350 <HAL_DMA_Abort+0x33c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0201 	bic.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e007      	b.n	8007360 <HAL_DMA_Abort+0x34c>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0201 	bic.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007360:	e013      	b.n	800738a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007362:	f7ff fcd9 	bl	8006d18 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b05      	cmp	r3, #5
 800736e:	d90c      	bls.n	800738a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2203      	movs	r2, #3
 800737a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e12d      	b.n	80075e6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e5      	bne.n	8007362 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a2f      	ldr	r2, [pc, #188]	; (8007458 <HAL_DMA_Abort+0x444>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d04a      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2d      	ldr	r2, [pc, #180]	; (800745c <HAL_DMA_Abort+0x448>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d045      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a2c      	ldr	r2, [pc, #176]	; (8007460 <HAL_DMA_Abort+0x44c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d040      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a2a      	ldr	r2, [pc, #168]	; (8007464 <HAL_DMA_Abort+0x450>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d03b      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a29      	ldr	r2, [pc, #164]	; (8007468 <HAL_DMA_Abort+0x454>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d036      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a27      	ldr	r2, [pc, #156]	; (800746c <HAL_DMA_Abort+0x458>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d031      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a26      	ldr	r2, [pc, #152]	; (8007470 <HAL_DMA_Abort+0x45c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d02c      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a24      	ldr	r2, [pc, #144]	; (8007474 <HAL_DMA_Abort+0x460>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d027      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a23      	ldr	r2, [pc, #140]	; (8007478 <HAL_DMA_Abort+0x464>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d022      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a21      	ldr	r2, [pc, #132]	; (800747c <HAL_DMA_Abort+0x468>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d01d      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a20      	ldr	r2, [pc, #128]	; (8007480 <HAL_DMA_Abort+0x46c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d018      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1e      	ldr	r2, [pc, #120]	; (8007484 <HAL_DMA_Abort+0x470>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d013      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1d      	ldr	r2, [pc, #116]	; (8007488 <HAL_DMA_Abort+0x474>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00e      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a1b      	ldr	r2, [pc, #108]	; (800748c <HAL_DMA_Abort+0x478>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d009      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a1a      	ldr	r2, [pc, #104]	; (8007490 <HAL_DMA_Abort+0x47c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d004      	beq.n	8007436 <HAL_DMA_Abort+0x422>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a18      	ldr	r2, [pc, #96]	; (8007494 <HAL_DMA_Abort+0x480>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d101      	bne.n	800743a <HAL_DMA_Abort+0x426>
 8007436:	2301      	movs	r3, #1
 8007438:	e000      	b.n	800743c <HAL_DMA_Abort+0x428>
 800743a:	2300      	movs	r3, #0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d02b      	beq.n	8007498 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007444:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744a:	f003 031f 	and.w	r3, r3, #31
 800744e:	223f      	movs	r2, #63	; 0x3f
 8007450:	409a      	lsls	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	609a      	str	r2, [r3, #8]
 8007456:	e02a      	b.n	80074ae <HAL_DMA_Abort+0x49a>
 8007458:	40020010 	.word	0x40020010
 800745c:	40020028 	.word	0x40020028
 8007460:	40020040 	.word	0x40020040
 8007464:	40020058 	.word	0x40020058
 8007468:	40020070 	.word	0x40020070
 800746c:	40020088 	.word	0x40020088
 8007470:	400200a0 	.word	0x400200a0
 8007474:	400200b8 	.word	0x400200b8
 8007478:	40020410 	.word	0x40020410
 800747c:	40020428 	.word	0x40020428
 8007480:	40020440 	.word	0x40020440
 8007484:	40020458 	.word	0x40020458
 8007488:	40020470 	.word	0x40020470
 800748c:	40020488 	.word	0x40020488
 8007490:	400204a0 	.word	0x400204a0
 8007494:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	2201      	movs	r2, #1
 80074a8:	409a      	lsls	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a4f      	ldr	r2, [pc, #316]	; (80075f0 <HAL_DMA_Abort+0x5dc>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d072      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a4d      	ldr	r2, [pc, #308]	; (80075f4 <HAL_DMA_Abort+0x5e0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d06d      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a4c      	ldr	r2, [pc, #304]	; (80075f8 <HAL_DMA_Abort+0x5e4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d068      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a4a      	ldr	r2, [pc, #296]	; (80075fc <HAL_DMA_Abort+0x5e8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d063      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a49      	ldr	r2, [pc, #292]	; (8007600 <HAL_DMA_Abort+0x5ec>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d05e      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a47      	ldr	r2, [pc, #284]	; (8007604 <HAL_DMA_Abort+0x5f0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d059      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a46      	ldr	r2, [pc, #280]	; (8007608 <HAL_DMA_Abort+0x5f4>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d054      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a44      	ldr	r2, [pc, #272]	; (800760c <HAL_DMA_Abort+0x5f8>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d04f      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a43      	ldr	r2, [pc, #268]	; (8007610 <HAL_DMA_Abort+0x5fc>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d04a      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a41      	ldr	r2, [pc, #260]	; (8007614 <HAL_DMA_Abort+0x600>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d045      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a40      	ldr	r2, [pc, #256]	; (8007618 <HAL_DMA_Abort+0x604>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d040      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a3e      	ldr	r2, [pc, #248]	; (800761c <HAL_DMA_Abort+0x608>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d03b      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a3d      	ldr	r2, [pc, #244]	; (8007620 <HAL_DMA_Abort+0x60c>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d036      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a3b      	ldr	r2, [pc, #236]	; (8007624 <HAL_DMA_Abort+0x610>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d031      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a3a      	ldr	r2, [pc, #232]	; (8007628 <HAL_DMA_Abort+0x614>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d02c      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a38      	ldr	r2, [pc, #224]	; (800762c <HAL_DMA_Abort+0x618>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d027      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a37      	ldr	r2, [pc, #220]	; (8007630 <HAL_DMA_Abort+0x61c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d022      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a35      	ldr	r2, [pc, #212]	; (8007634 <HAL_DMA_Abort+0x620>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d01d      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a34      	ldr	r2, [pc, #208]	; (8007638 <HAL_DMA_Abort+0x624>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d018      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a32      	ldr	r2, [pc, #200]	; (800763c <HAL_DMA_Abort+0x628>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d013      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a31      	ldr	r2, [pc, #196]	; (8007640 <HAL_DMA_Abort+0x62c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00e      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a2f      	ldr	r2, [pc, #188]	; (8007644 <HAL_DMA_Abort+0x630>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d009      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a2e      	ldr	r2, [pc, #184]	; (8007648 <HAL_DMA_Abort+0x634>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d004      	beq.n	800759e <HAL_DMA_Abort+0x58a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a2c      	ldr	r2, [pc, #176]	; (800764c <HAL_DMA_Abort+0x638>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d101      	bne.n	80075a2 <HAL_DMA_Abort+0x58e>
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <HAL_DMA_Abort+0x590>
 80075a2:	2300      	movs	r3, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d015      	beq.n	80075d4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075b0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00c      	beq.n	80075d4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075c8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80075d2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	40020010 	.word	0x40020010
 80075f4:	40020028 	.word	0x40020028
 80075f8:	40020040 	.word	0x40020040
 80075fc:	40020058 	.word	0x40020058
 8007600:	40020070 	.word	0x40020070
 8007604:	40020088 	.word	0x40020088
 8007608:	400200a0 	.word	0x400200a0
 800760c:	400200b8 	.word	0x400200b8
 8007610:	40020410 	.word	0x40020410
 8007614:	40020428 	.word	0x40020428
 8007618:	40020440 	.word	0x40020440
 800761c:	40020458 	.word	0x40020458
 8007620:	40020470 	.word	0x40020470
 8007624:	40020488 	.word	0x40020488
 8007628:	400204a0 	.word	0x400204a0
 800762c:	400204b8 	.word	0x400204b8
 8007630:	58025408 	.word	0x58025408
 8007634:	5802541c 	.word	0x5802541c
 8007638:	58025430 	.word	0x58025430
 800763c:	58025444 	.word	0x58025444
 8007640:	58025458 	.word	0x58025458
 8007644:	5802546c 	.word	0x5802546c
 8007648:	58025480 	.word	0x58025480
 800764c:	58025494 	.word	0x58025494

08007650 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e237      	b.n	8007ad2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d004      	beq.n	8007678 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2280      	movs	r2, #128	; 0x80
 8007672:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e22c      	b.n	8007ad2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a5c      	ldr	r2, [pc, #368]	; (80077f0 <HAL_DMA_Abort_IT+0x1a0>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d04a      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a5b      	ldr	r2, [pc, #364]	; (80077f4 <HAL_DMA_Abort_IT+0x1a4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d045      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a59      	ldr	r2, [pc, #356]	; (80077f8 <HAL_DMA_Abort_IT+0x1a8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d040      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a58      	ldr	r2, [pc, #352]	; (80077fc <HAL_DMA_Abort_IT+0x1ac>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d03b      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a56      	ldr	r2, [pc, #344]	; (8007800 <HAL_DMA_Abort_IT+0x1b0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d036      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a55      	ldr	r2, [pc, #340]	; (8007804 <HAL_DMA_Abort_IT+0x1b4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d031      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a53      	ldr	r2, [pc, #332]	; (8007808 <HAL_DMA_Abort_IT+0x1b8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d02c      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a52      	ldr	r2, [pc, #328]	; (800780c <HAL_DMA_Abort_IT+0x1bc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d027      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a50      	ldr	r2, [pc, #320]	; (8007810 <HAL_DMA_Abort_IT+0x1c0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d022      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a4f      	ldr	r2, [pc, #316]	; (8007814 <HAL_DMA_Abort_IT+0x1c4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d01d      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a4d      	ldr	r2, [pc, #308]	; (8007818 <HAL_DMA_Abort_IT+0x1c8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d018      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a4c      	ldr	r2, [pc, #304]	; (800781c <HAL_DMA_Abort_IT+0x1cc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d013      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a4a      	ldr	r2, [pc, #296]	; (8007820 <HAL_DMA_Abort_IT+0x1d0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00e      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a49      	ldr	r2, [pc, #292]	; (8007824 <HAL_DMA_Abort_IT+0x1d4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d009      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a47      	ldr	r2, [pc, #284]	; (8007828 <HAL_DMA_Abort_IT+0x1d8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d004      	beq.n	8007718 <HAL_DMA_Abort_IT+0xc8>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a46      	ldr	r2, [pc, #280]	; (800782c <HAL_DMA_Abort_IT+0x1dc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d101      	bne.n	800771c <HAL_DMA_Abort_IT+0xcc>
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <HAL_DMA_Abort_IT+0xce>
 800771c:	2300      	movs	r3, #0
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 8086 	beq.w	8007830 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2204      	movs	r2, #4
 8007728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a2f      	ldr	r2, [pc, #188]	; (80077f0 <HAL_DMA_Abort_IT+0x1a0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d04a      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a2e      	ldr	r2, [pc, #184]	; (80077f4 <HAL_DMA_Abort_IT+0x1a4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d045      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a2c      	ldr	r2, [pc, #176]	; (80077f8 <HAL_DMA_Abort_IT+0x1a8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d040      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a2b      	ldr	r2, [pc, #172]	; (80077fc <HAL_DMA_Abort_IT+0x1ac>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d03b      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a29      	ldr	r2, [pc, #164]	; (8007800 <HAL_DMA_Abort_IT+0x1b0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d036      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a28      	ldr	r2, [pc, #160]	; (8007804 <HAL_DMA_Abort_IT+0x1b4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d031      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a26      	ldr	r2, [pc, #152]	; (8007808 <HAL_DMA_Abort_IT+0x1b8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d02c      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a25      	ldr	r2, [pc, #148]	; (800780c <HAL_DMA_Abort_IT+0x1bc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d027      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a23      	ldr	r2, [pc, #140]	; (8007810 <HAL_DMA_Abort_IT+0x1c0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d022      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a22      	ldr	r2, [pc, #136]	; (8007814 <HAL_DMA_Abort_IT+0x1c4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d01d      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a20      	ldr	r2, [pc, #128]	; (8007818 <HAL_DMA_Abort_IT+0x1c8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d018      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1f      	ldr	r2, [pc, #124]	; (800781c <HAL_DMA_Abort_IT+0x1cc>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d013      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a1d      	ldr	r2, [pc, #116]	; (8007820 <HAL_DMA_Abort_IT+0x1d0>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d00e      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a1c      	ldr	r2, [pc, #112]	; (8007824 <HAL_DMA_Abort_IT+0x1d4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d009      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a1a      	ldr	r2, [pc, #104]	; (8007828 <HAL_DMA_Abort_IT+0x1d8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d004      	beq.n	80077cc <HAL_DMA_Abort_IT+0x17c>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a19      	ldr	r2, [pc, #100]	; (800782c <HAL_DMA_Abort_IT+0x1dc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d108      	bne.n	80077de <HAL_DMA_Abort_IT+0x18e>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 0201 	bic.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	e178      	b.n	8007ad0 <HAL_DMA_Abort_IT+0x480>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0201 	bic.w	r2, r2, #1
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	e16f      	b.n	8007ad0 <HAL_DMA_Abort_IT+0x480>
 80077f0:	40020010 	.word	0x40020010
 80077f4:	40020028 	.word	0x40020028
 80077f8:	40020040 	.word	0x40020040
 80077fc:	40020058 	.word	0x40020058
 8007800:	40020070 	.word	0x40020070
 8007804:	40020088 	.word	0x40020088
 8007808:	400200a0 	.word	0x400200a0
 800780c:	400200b8 	.word	0x400200b8
 8007810:	40020410 	.word	0x40020410
 8007814:	40020428 	.word	0x40020428
 8007818:	40020440 	.word	0x40020440
 800781c:	40020458 	.word	0x40020458
 8007820:	40020470 	.word	0x40020470
 8007824:	40020488 	.word	0x40020488
 8007828:	400204a0 	.word	0x400204a0
 800782c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 020e 	bic.w	r2, r2, #14
 800783e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a6c      	ldr	r2, [pc, #432]	; (80079f8 <HAL_DMA_Abort_IT+0x3a8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d04a      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a6b      	ldr	r2, [pc, #428]	; (80079fc <HAL_DMA_Abort_IT+0x3ac>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d045      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a69      	ldr	r2, [pc, #420]	; (8007a00 <HAL_DMA_Abort_IT+0x3b0>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d040      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a68      	ldr	r2, [pc, #416]	; (8007a04 <HAL_DMA_Abort_IT+0x3b4>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d03b      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a66      	ldr	r2, [pc, #408]	; (8007a08 <HAL_DMA_Abort_IT+0x3b8>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d036      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a65      	ldr	r2, [pc, #404]	; (8007a0c <HAL_DMA_Abort_IT+0x3bc>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d031      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a63      	ldr	r2, [pc, #396]	; (8007a10 <HAL_DMA_Abort_IT+0x3c0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d02c      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a62      	ldr	r2, [pc, #392]	; (8007a14 <HAL_DMA_Abort_IT+0x3c4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d027      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a60      	ldr	r2, [pc, #384]	; (8007a18 <HAL_DMA_Abort_IT+0x3c8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d022      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a5f      	ldr	r2, [pc, #380]	; (8007a1c <HAL_DMA_Abort_IT+0x3cc>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d01d      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a5d      	ldr	r2, [pc, #372]	; (8007a20 <HAL_DMA_Abort_IT+0x3d0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d018      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a5c      	ldr	r2, [pc, #368]	; (8007a24 <HAL_DMA_Abort_IT+0x3d4>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d013      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a5a      	ldr	r2, [pc, #360]	; (8007a28 <HAL_DMA_Abort_IT+0x3d8>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d00e      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a59      	ldr	r2, [pc, #356]	; (8007a2c <HAL_DMA_Abort_IT+0x3dc>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d009      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a57      	ldr	r2, [pc, #348]	; (8007a30 <HAL_DMA_Abort_IT+0x3e0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d004      	beq.n	80078e0 <HAL_DMA_Abort_IT+0x290>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a56      	ldr	r2, [pc, #344]	; (8007a34 <HAL_DMA_Abort_IT+0x3e4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d108      	bne.n	80078f2 <HAL_DMA_Abort_IT+0x2a2>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0201 	bic.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e007      	b.n	8007902 <HAL_DMA_Abort_IT+0x2b2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0201 	bic.w	r2, r2, #1
 8007900:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a3c      	ldr	r2, [pc, #240]	; (80079f8 <HAL_DMA_Abort_IT+0x3a8>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d072      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a3a      	ldr	r2, [pc, #232]	; (80079fc <HAL_DMA_Abort_IT+0x3ac>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d06d      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a39      	ldr	r2, [pc, #228]	; (8007a00 <HAL_DMA_Abort_IT+0x3b0>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d068      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a37      	ldr	r2, [pc, #220]	; (8007a04 <HAL_DMA_Abort_IT+0x3b4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d063      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a36      	ldr	r2, [pc, #216]	; (8007a08 <HAL_DMA_Abort_IT+0x3b8>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d05e      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a34      	ldr	r2, [pc, #208]	; (8007a0c <HAL_DMA_Abort_IT+0x3bc>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d059      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a33      	ldr	r2, [pc, #204]	; (8007a10 <HAL_DMA_Abort_IT+0x3c0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d054      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a31      	ldr	r2, [pc, #196]	; (8007a14 <HAL_DMA_Abort_IT+0x3c4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d04f      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a30      	ldr	r2, [pc, #192]	; (8007a18 <HAL_DMA_Abort_IT+0x3c8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d04a      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a2e      	ldr	r2, [pc, #184]	; (8007a1c <HAL_DMA_Abort_IT+0x3cc>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d045      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a2d      	ldr	r2, [pc, #180]	; (8007a20 <HAL_DMA_Abort_IT+0x3d0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d040      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a2b      	ldr	r2, [pc, #172]	; (8007a24 <HAL_DMA_Abort_IT+0x3d4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d03b      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a2a      	ldr	r2, [pc, #168]	; (8007a28 <HAL_DMA_Abort_IT+0x3d8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d036      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a28      	ldr	r2, [pc, #160]	; (8007a2c <HAL_DMA_Abort_IT+0x3dc>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d031      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a27      	ldr	r2, [pc, #156]	; (8007a30 <HAL_DMA_Abort_IT+0x3e0>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d02c      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a25      	ldr	r2, [pc, #148]	; (8007a34 <HAL_DMA_Abort_IT+0x3e4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d027      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a24      	ldr	r2, [pc, #144]	; (8007a38 <HAL_DMA_Abort_IT+0x3e8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d022      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a22      	ldr	r2, [pc, #136]	; (8007a3c <HAL_DMA_Abort_IT+0x3ec>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d01d      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a21      	ldr	r2, [pc, #132]	; (8007a40 <HAL_DMA_Abort_IT+0x3f0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d018      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1f      	ldr	r2, [pc, #124]	; (8007a44 <HAL_DMA_Abort_IT+0x3f4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d013      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a1e      	ldr	r2, [pc, #120]	; (8007a48 <HAL_DMA_Abort_IT+0x3f8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d00e      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1c      	ldr	r2, [pc, #112]	; (8007a4c <HAL_DMA_Abort_IT+0x3fc>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d009      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a1b      	ldr	r2, [pc, #108]	; (8007a50 <HAL_DMA_Abort_IT+0x400>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d004      	beq.n	80079f2 <HAL_DMA_Abort_IT+0x3a2>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a19      	ldr	r2, [pc, #100]	; (8007a54 <HAL_DMA_Abort_IT+0x404>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d132      	bne.n	8007a58 <HAL_DMA_Abort_IT+0x408>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e031      	b.n	8007a5a <HAL_DMA_Abort_IT+0x40a>
 80079f6:	bf00      	nop
 80079f8:	40020010 	.word	0x40020010
 80079fc:	40020028 	.word	0x40020028
 8007a00:	40020040 	.word	0x40020040
 8007a04:	40020058 	.word	0x40020058
 8007a08:	40020070 	.word	0x40020070
 8007a0c:	40020088 	.word	0x40020088
 8007a10:	400200a0 	.word	0x400200a0
 8007a14:	400200b8 	.word	0x400200b8
 8007a18:	40020410 	.word	0x40020410
 8007a1c:	40020428 	.word	0x40020428
 8007a20:	40020440 	.word	0x40020440
 8007a24:	40020458 	.word	0x40020458
 8007a28:	40020470 	.word	0x40020470
 8007a2c:	40020488 	.word	0x40020488
 8007a30:	400204a0 	.word	0x400204a0
 8007a34:	400204b8 	.word	0x400204b8
 8007a38:	58025408 	.word	0x58025408
 8007a3c:	5802541c 	.word	0x5802541c
 8007a40:	58025430 	.word	0x58025430
 8007a44:	58025444 	.word	0x58025444
 8007a48:	58025458 	.word	0x58025458
 8007a4c:	5802546c 	.word	0x5802546c
 8007a50:	58025480 	.word	0x58025480
 8007a54:	58025494 	.word	0x58025494
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d028      	beq.n	8007ab0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a6c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a72:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	409a      	lsls	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a8c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00c      	beq.n	8007ab0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aa4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007aae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop

08007adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b089      	sub	sp, #36	; 0x24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007aea:	4b89      	ldr	r3, [pc, #548]	; (8007d10 <HAL_GPIO_Init+0x234>)
 8007aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007aee:	e194      	b.n	8007e1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	2101      	movs	r1, #1
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	fa01 f303 	lsl.w	r3, r1, r3
 8007afc:	4013      	ands	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 8186 	beq.w	8007e14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d005      	beq.n	8007b20 <HAL_GPIO_Init+0x44>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f003 0303 	and.w	r3, r3, #3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d130      	bne.n	8007b82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	2203      	movs	r2, #3
 8007b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b30:	43db      	mvns	r3, r3
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	4013      	ands	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	fa02 f303 	lsl.w	r3, r2, r3
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b56:	2201      	movs	r2, #1
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5e:	43db      	mvns	r3, r3
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	4013      	ands	r3, r2
 8007b64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	091b      	lsrs	r3, r3, #4
 8007b6c:	f003 0201 	and.w	r2, r3, #1
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d017      	beq.n	8007bbe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	2203      	movs	r2, #3
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	43db      	mvns	r3, r3
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d123      	bne.n	8007c12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	08da      	lsrs	r2, r3, #3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3208      	adds	r2, #8
 8007bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f003 0307 	and.w	r3, r3, #7
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	220f      	movs	r2, #15
 8007be2:	fa02 f303 	lsl.w	r3, r2, r3
 8007be6:	43db      	mvns	r3, r3
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	4013      	ands	r3, r2
 8007bec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	08da      	lsrs	r2, r3, #3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3208      	adds	r2, #8
 8007c0c:	69b9      	ldr	r1, [r7, #24]
 8007c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	2203      	movs	r2, #3
 8007c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c22:	43db      	mvns	r3, r3
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	4013      	ands	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f003 0203 	and.w	r2, r3, #3
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 80e0 	beq.w	8007e14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c54:	4b2f      	ldr	r3, [pc, #188]	; (8007d14 <HAL_GPIO_Init+0x238>)
 8007c56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c5a:	4a2e      	ldr	r2, [pc, #184]	; (8007d14 <HAL_GPIO_Init+0x238>)
 8007c5c:	f043 0302 	orr.w	r3, r3, #2
 8007c60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007c64:	4b2b      	ldr	r3, [pc, #172]	; (8007d14 <HAL_GPIO_Init+0x238>)
 8007c66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c72:	4a29      	ldr	r2, [pc, #164]	; (8007d18 <HAL_GPIO_Init+0x23c>)
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	089b      	lsrs	r3, r3, #2
 8007c78:	3302      	adds	r3, #2
 8007c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	220f      	movs	r2, #15
 8007c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8e:	43db      	mvns	r3, r3
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	4013      	ands	r3, r2
 8007c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a20      	ldr	r2, [pc, #128]	; (8007d1c <HAL_GPIO_Init+0x240>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d052      	beq.n	8007d44 <HAL_GPIO_Init+0x268>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a1f      	ldr	r2, [pc, #124]	; (8007d20 <HAL_GPIO_Init+0x244>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d031      	beq.n	8007d0a <HAL_GPIO_Init+0x22e>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a1e      	ldr	r2, [pc, #120]	; (8007d24 <HAL_GPIO_Init+0x248>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d02b      	beq.n	8007d06 <HAL_GPIO_Init+0x22a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a1d      	ldr	r2, [pc, #116]	; (8007d28 <HAL_GPIO_Init+0x24c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d025      	beq.n	8007d02 <HAL_GPIO_Init+0x226>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1c      	ldr	r2, [pc, #112]	; (8007d2c <HAL_GPIO_Init+0x250>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d01f      	beq.n	8007cfe <HAL_GPIO_Init+0x222>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a1b      	ldr	r2, [pc, #108]	; (8007d30 <HAL_GPIO_Init+0x254>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d019      	beq.n	8007cfa <HAL_GPIO_Init+0x21e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a1a      	ldr	r2, [pc, #104]	; (8007d34 <HAL_GPIO_Init+0x258>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d013      	beq.n	8007cf6 <HAL_GPIO_Init+0x21a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a19      	ldr	r2, [pc, #100]	; (8007d38 <HAL_GPIO_Init+0x25c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00d      	beq.n	8007cf2 <HAL_GPIO_Init+0x216>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a18      	ldr	r2, [pc, #96]	; (8007d3c <HAL_GPIO_Init+0x260>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d007      	beq.n	8007cee <HAL_GPIO_Init+0x212>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a17      	ldr	r2, [pc, #92]	; (8007d40 <HAL_GPIO_Init+0x264>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d101      	bne.n	8007cea <HAL_GPIO_Init+0x20e>
 8007ce6:	2309      	movs	r3, #9
 8007ce8:	e02d      	b.n	8007d46 <HAL_GPIO_Init+0x26a>
 8007cea:	230a      	movs	r3, #10
 8007cec:	e02b      	b.n	8007d46 <HAL_GPIO_Init+0x26a>
 8007cee:	2308      	movs	r3, #8
 8007cf0:	e029      	b.n	8007d46 <HAL_GPIO_Init+0x26a>
 8007cf2:	2307      	movs	r3, #7
 8007cf4:	e027      	b.n	8007d46 <HAL_GPIO_Init+0x26a>
 8007cf6:	2306      	movs	r3, #6
 8007cf8:	e025      	b.n	8007d46 <HAL_GPIO_Init+0x26a>
 8007cfa:	2305      	movs	r3, #5
 8007cfc:	e023      	b.n	8007d46 <HAL_GPIO_Init+0x26a>
 8007cfe:	2304      	movs	r3, #4
 8007d00:	e021      	b.n	8007d46 <HAL_GPIO_Init+0x26a>
 8007d02:	2303      	movs	r3, #3
 8007d04:	e01f      	b.n	8007d46 <HAL_GPIO_Init+0x26a>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e01d      	b.n	8007d46 <HAL_GPIO_Init+0x26a>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e01b      	b.n	8007d46 <HAL_GPIO_Init+0x26a>
 8007d0e:	bf00      	nop
 8007d10:	58000080 	.word	0x58000080
 8007d14:	58024400 	.word	0x58024400
 8007d18:	58000400 	.word	0x58000400
 8007d1c:	58020000 	.word	0x58020000
 8007d20:	58020400 	.word	0x58020400
 8007d24:	58020800 	.word	0x58020800
 8007d28:	58020c00 	.word	0x58020c00
 8007d2c:	58021000 	.word	0x58021000
 8007d30:	58021400 	.word	0x58021400
 8007d34:	58021800 	.word	0x58021800
 8007d38:	58021c00 	.word	0x58021c00
 8007d3c:	58022000 	.word	0x58022000
 8007d40:	58022400 	.word	0x58022400
 8007d44:	2300      	movs	r3, #0
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	f002 0203 	and.w	r2, r2, #3
 8007d4c:	0092      	lsls	r2, r2, #2
 8007d4e:	4093      	lsls	r3, r2
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d56:	4938      	ldr	r1, [pc, #224]	; (8007e38 <HAL_GPIO_Init+0x35c>)
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	089b      	lsrs	r3, r3, #2
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	43db      	mvns	r3, r3
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	4013      	ands	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	4013      	ands	r3, r2
 8007da2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	43db      	mvns	r3, r3
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d003      	beq.n	8007de4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	43db      	mvns	r3, r3
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	4013      	ands	r3, r2
 8007df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	3301      	adds	r3, #1
 8007e18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f47f ae63 	bne.w	8007af0 <HAL_GPIO_Init+0x14>
  }
}
 8007e2a:	bf00      	nop
 8007e2c:	bf00      	nop
 8007e2e:	3724      	adds	r7, #36	; 0x24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	58000400 	.word	0x58000400

08007e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691a      	ldr	r2, [r3, #16]
 8007e4c:	887b      	ldrh	r3, [r7, #2]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e54:	2301      	movs	r3, #1
 8007e56:	73fb      	strb	r3, [r7, #15]
 8007e58:	e001      	b.n	8007e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	807b      	strh	r3, [r7, #2]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e7c:	787b      	ldrb	r3, [r7, #1]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e82:	887a      	ldrh	r2, [r7, #2]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007e88:	e003      	b.n	8007e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e8a:	887b      	ldrh	r3, [r7, #2]
 8007e8c:	041a      	lsls	r2, r3, #16
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	619a      	str	r2, [r3, #24]
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d008      	beq.n	8007eca <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ebc:	88fb      	ldrh	r3, [r7, #6]
 8007ebe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fa ffe1 	bl	8002e8c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007eca:	bf00      	nop
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007edc:	4b19      	ldr	r3, [pc, #100]	; (8007f44 <HAL_PWREx_ConfigSupply+0x70>)
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d00a      	beq.n	8007efe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007ee8:	4b16      	ldr	r3, [pc, #88]	; (8007f44 <HAL_PWREx_ConfigSupply+0x70>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d001      	beq.n	8007efa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e01f      	b.n	8007f3a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	e01d      	b.n	8007f3a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <HAL_PWREx_ConfigSupply+0x70>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f023 0207 	bic.w	r2, r3, #7
 8007f06:	490f      	ldr	r1, [pc, #60]	; (8007f44 <HAL_PWREx_ConfigSupply+0x70>)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007f0e:	f7fe ff03 	bl	8006d18 <HAL_GetTick>
 8007f12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f14:	e009      	b.n	8007f2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007f16:	f7fe feff 	bl	8006d18 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f24:	d901      	bls.n	8007f2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e007      	b.n	8007f3a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f2a:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <HAL_PWREx_ConfigSupply+0x70>)
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f36:	d1ee      	bne.n	8007f16 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	58024800 	.word	0x58024800

08007f48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08c      	sub	sp, #48	; 0x30
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d102      	bne.n	8007f5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f000 bc1d 	b.w	8008796 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 8087 	beq.w	8008078 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f6a:	4b99      	ldr	r3, [pc, #612]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f74:	4b96      	ldr	r3, [pc, #600]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f78:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d007      	beq.n	8007f90 <HAL_RCC_OscConfig+0x48>
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	2b18      	cmp	r3, #24
 8007f84:	d110      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x60>
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d10b      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f90:	4b8f      	ldr	r3, [pc, #572]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d06c      	beq.n	8008076 <HAL_RCC_OscConfig+0x12e>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d168      	bne.n	8008076 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e3f6      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb0:	d106      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x78>
 8007fb2:	4b87      	ldr	r3, [pc, #540]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a86      	ldr	r2, [pc, #536]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	e02e      	b.n	800801e <HAL_RCC_OscConfig+0xd6>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10c      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x9a>
 8007fc8:	4b81      	ldr	r3, [pc, #516]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a80      	ldr	r2, [pc, #512]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	4b7e      	ldr	r3, [pc, #504]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a7d      	ldr	r2, [pc, #500]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	e01d      	b.n	800801e <HAL_RCC_OscConfig+0xd6>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fea:	d10c      	bne.n	8008006 <HAL_RCC_OscConfig+0xbe>
 8007fec:	4b78      	ldr	r3, [pc, #480]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a77      	ldr	r2, [pc, #476]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	4b75      	ldr	r3, [pc, #468]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a74      	ldr	r2, [pc, #464]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8007ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	e00b      	b.n	800801e <HAL_RCC_OscConfig+0xd6>
 8008006:	4b72      	ldr	r3, [pc, #456]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a71      	ldr	r2, [pc, #452]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 800800c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	4b6f      	ldr	r3, [pc, #444]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a6e      	ldr	r2, [pc, #440]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8008018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800801c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d013      	beq.n	800804e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008026:	f7fe fe77 	bl	8006d18 <HAL_GetTick>
 800802a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800802c:	e008      	b.n	8008040 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800802e:	f7fe fe73 	bl	8006d18 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	2b64      	cmp	r3, #100	; 0x64
 800803a:	d901      	bls.n	8008040 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e3aa      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008040:	4b63      	ldr	r3, [pc, #396]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0f0      	beq.n	800802e <HAL_RCC_OscConfig+0xe6>
 800804c:	e014      	b.n	8008078 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804e:	f7fe fe63 	bl	8006d18 <HAL_GetTick>
 8008052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008054:	e008      	b.n	8008068 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008056:	f7fe fe5f 	bl	8006d18 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b64      	cmp	r3, #100	; 0x64
 8008062:	d901      	bls.n	8008068 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e396      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008068:	4b59      	ldr	r3, [pc, #356]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1f0      	bne.n	8008056 <HAL_RCC_OscConfig+0x10e>
 8008074:	e000      	b.n	8008078 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008076:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80cb 	beq.w	800821c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008086:	4b52      	ldr	r3, [pc, #328]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800808e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008090:	4b4f      	ldr	r3, [pc, #316]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008094:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d007      	beq.n	80080ac <HAL_RCC_OscConfig+0x164>
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	2b18      	cmp	r3, #24
 80080a0:	d156      	bne.n	8008150 <HAL_RCC_OscConfig+0x208>
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	f003 0303 	and.w	r3, r3, #3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d151      	bne.n	8008150 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080ac:	4b48      	ldr	r3, [pc, #288]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <HAL_RCC_OscConfig+0x17c>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e368      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080c4:	4b42      	ldr	r3, [pc, #264]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f023 0219 	bic.w	r2, r3, #25
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	493f      	ldr	r1, [pc, #252]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80080d6:	f7fe fe1f 	bl	8006d18 <HAL_GetTick>
 80080da:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080dc:	e008      	b.n	80080f0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080de:	f7fe fe1b 	bl	8006d18 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d901      	bls.n	80080f0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e352      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080f0:	4b37      	ldr	r3, [pc, #220]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0f0      	beq.n	80080de <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080fc:	f7fe fe3c 	bl	8006d78 <HAL_GetREVID>
 8008100:	4603      	mov	r3, r0
 8008102:	f241 0203 	movw	r2, #4099	; 0x1003
 8008106:	4293      	cmp	r3, r2
 8008108:	d817      	bhi.n	800813a <HAL_RCC_OscConfig+0x1f2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b40      	cmp	r3, #64	; 0x40
 8008110:	d108      	bne.n	8008124 <HAL_RCC_OscConfig+0x1dc>
 8008112:	4b2f      	ldr	r3, [pc, #188]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800811a:	4a2d      	ldr	r2, [pc, #180]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 800811c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008120:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008122:	e07b      	b.n	800821c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008124:	4b2a      	ldr	r3, [pc, #168]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	031b      	lsls	r3, r3, #12
 8008132:	4927      	ldr	r1, [pc, #156]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8008134:	4313      	orrs	r3, r2
 8008136:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008138:	e070      	b.n	800821c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800813a:	4b25      	ldr	r3, [pc, #148]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	061b      	lsls	r3, r3, #24
 8008148:	4921      	ldr	r1, [pc, #132]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 800814a:	4313      	orrs	r3, r2
 800814c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800814e:	e065      	b.n	800821c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d048      	beq.n	80081ea <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008158:	4b1d      	ldr	r3, [pc, #116]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f023 0219 	bic.w	r2, r3, #25
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	491a      	ldr	r1, [pc, #104]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8008166:	4313      	orrs	r3, r2
 8008168:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800816a:	f7fe fdd5 	bl	8006d18 <HAL_GetTick>
 800816e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008170:	e008      	b.n	8008184 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008172:	f7fe fdd1 	bl	8006d18 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e308      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008184:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0f0      	beq.n	8008172 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008190:	f7fe fdf2 	bl	8006d78 <HAL_GetREVID>
 8008194:	4603      	mov	r3, r0
 8008196:	f241 0203 	movw	r2, #4099	; 0x1003
 800819a:	4293      	cmp	r3, r2
 800819c:	d81a      	bhi.n	80081d4 <HAL_RCC_OscConfig+0x28c>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b40      	cmp	r3, #64	; 0x40
 80081a4:	d108      	bne.n	80081b8 <HAL_RCC_OscConfig+0x270>
 80081a6:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80081ae:	4a08      	ldr	r2, [pc, #32]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 80081b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081b4:	6053      	str	r3, [r2, #4]
 80081b6:	e031      	b.n	800821c <HAL_RCC_OscConfig+0x2d4>
 80081b8:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	031b      	lsls	r3, r3, #12
 80081c6:	4902      	ldr	r1, [pc, #8]	; (80081d0 <HAL_RCC_OscConfig+0x288>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	604b      	str	r3, [r1, #4]
 80081cc:	e026      	b.n	800821c <HAL_RCC_OscConfig+0x2d4>
 80081ce:	bf00      	nop
 80081d0:	58024400 	.word	0x58024400
 80081d4:	4b9a      	ldr	r3, [pc, #616]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	061b      	lsls	r3, r3, #24
 80081e2:	4997      	ldr	r1, [pc, #604]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	604b      	str	r3, [r1, #4]
 80081e8:	e018      	b.n	800821c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081ea:	4b95      	ldr	r3, [pc, #596]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a94      	ldr	r2, [pc, #592]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80081f0:	f023 0301 	bic.w	r3, r3, #1
 80081f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f6:	f7fe fd8f 	bl	8006d18 <HAL_GetTick>
 80081fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80081fc:	e008      	b.n	8008210 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081fe:	f7fe fd8b 	bl	8006d18 <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	2b02      	cmp	r3, #2
 800820a:	d901      	bls.n	8008210 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e2c2      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008210:	4b8b      	ldr	r3, [pc, #556]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0304 	and.w	r3, r3, #4
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1f0      	bne.n	80081fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 80a9 	beq.w	800837c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800822a:	4b85      	ldr	r3, [pc, #532]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008232:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008234:	4b82      	ldr	r3, [pc, #520]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	2b08      	cmp	r3, #8
 800823e:	d007      	beq.n	8008250 <HAL_RCC_OscConfig+0x308>
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2b18      	cmp	r3, #24
 8008244:	d13a      	bne.n	80082bc <HAL_RCC_OscConfig+0x374>
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f003 0303 	and.w	r3, r3, #3
 800824c:	2b01      	cmp	r3, #1
 800824e:	d135      	bne.n	80082bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008250:	4b7b      	ldr	r3, [pc, #492]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <HAL_RCC_OscConfig+0x320>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	2b80      	cmp	r3, #128	; 0x80
 8008262:	d001      	beq.n	8008268 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e296      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008268:	f7fe fd86 	bl	8006d78 <HAL_GetREVID>
 800826c:	4603      	mov	r3, r0
 800826e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008272:	4293      	cmp	r3, r2
 8008274:	d817      	bhi.n	80082a6 <HAL_RCC_OscConfig+0x35e>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	2b20      	cmp	r3, #32
 800827c:	d108      	bne.n	8008290 <HAL_RCC_OscConfig+0x348>
 800827e:	4b70      	ldr	r3, [pc, #448]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008286:	4a6e      	ldr	r2, [pc, #440]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800828c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800828e:	e075      	b.n	800837c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008290:	4b6b      	ldr	r3, [pc, #428]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	069b      	lsls	r3, r3, #26
 800829e:	4968      	ldr	r1, [pc, #416]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082a4:	e06a      	b.n	800837c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082a6:	4b66      	ldr	r3, [pc, #408]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	061b      	lsls	r3, r3, #24
 80082b4:	4962      	ldr	r1, [pc, #392]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082ba:	e05f      	b.n	800837c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d042      	beq.n	800834a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80082c4:	4b5e      	ldr	r3, [pc, #376]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a5d      	ldr	r2, [pc, #372]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80082ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d0:	f7fe fd22 	bl	8006d18 <HAL_GetTick>
 80082d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082d6:	e008      	b.n	80082ea <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80082d8:	f7fe fd1e 	bl	8006d18 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d901      	bls.n	80082ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e255      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082ea:	4b55      	ldr	r3, [pc, #340]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0f0      	beq.n	80082d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082f6:	f7fe fd3f 	bl	8006d78 <HAL_GetREVID>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8008300:	4293      	cmp	r3, r2
 8008302:	d817      	bhi.n	8008334 <HAL_RCC_OscConfig+0x3ec>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	2b20      	cmp	r3, #32
 800830a:	d108      	bne.n	800831e <HAL_RCC_OscConfig+0x3d6>
 800830c:	4b4c      	ldr	r3, [pc, #304]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008314:	4a4a      	ldr	r2, [pc, #296]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008316:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800831a:	6053      	str	r3, [r2, #4]
 800831c:	e02e      	b.n	800837c <HAL_RCC_OscConfig+0x434>
 800831e:	4b48      	ldr	r3, [pc, #288]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	069b      	lsls	r3, r3, #26
 800832c:	4944      	ldr	r1, [pc, #272]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 800832e:	4313      	orrs	r3, r2
 8008330:	604b      	str	r3, [r1, #4]
 8008332:	e023      	b.n	800837c <HAL_RCC_OscConfig+0x434>
 8008334:	4b42      	ldr	r3, [pc, #264]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	061b      	lsls	r3, r3, #24
 8008342:	493f      	ldr	r1, [pc, #252]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008344:	4313      	orrs	r3, r2
 8008346:	60cb      	str	r3, [r1, #12]
 8008348:	e018      	b.n	800837c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800834a:	4b3d      	ldr	r3, [pc, #244]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a3c      	ldr	r2, [pc, #240]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008356:	f7fe fcdf 	bl	8006d18 <HAL_GetTick>
 800835a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800835c:	e008      	b.n	8008370 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800835e:	f7fe fcdb 	bl	8006d18 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	d901      	bls.n	8008370 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e212      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008370:	4b33      	ldr	r3, [pc, #204]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f0      	bne.n	800835e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b00      	cmp	r3, #0
 8008386:	d036      	beq.n	80083f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d019      	beq.n	80083c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008390:	4b2b      	ldr	r3, [pc, #172]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008394:	4a2a      	ldr	r2, [pc, #168]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008396:	f043 0301 	orr.w	r3, r3, #1
 800839a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800839c:	f7fe fcbc 	bl	8006d18 <HAL_GetTick>
 80083a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083a2:	e008      	b.n	80083b6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083a4:	f7fe fcb8 	bl	8006d18 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e1ef      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083b6:	4b22      	ldr	r3, [pc, #136]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80083b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0f0      	beq.n	80083a4 <HAL_RCC_OscConfig+0x45c>
 80083c2:	e018      	b.n	80083f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083c4:	4b1e      	ldr	r3, [pc, #120]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80083c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083c8:	4a1d      	ldr	r2, [pc, #116]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80083ca:	f023 0301 	bic.w	r3, r3, #1
 80083ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083d0:	f7fe fca2 	bl	8006d18 <HAL_GetTick>
 80083d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80083d6:	e008      	b.n	80083ea <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083d8:	f7fe fc9e 	bl	8006d18 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e1d5      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80083ea:	4b15      	ldr	r3, [pc, #84]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 80083ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1f0      	bne.n	80083d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d039      	beq.n	8008476 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d01c      	beq.n	8008444 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800840a:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a0c      	ldr	r2, [pc, #48]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008410:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008414:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008416:	f7fe fc7f 	bl	8006d18 <HAL_GetTick>
 800841a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800841c:	e008      	b.n	8008430 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800841e:	f7fe fc7b 	bl	8006d18 <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d901      	bls.n	8008430 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e1b2      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008430:	4b03      	ldr	r3, [pc, #12]	; (8008440 <HAL_RCC_OscConfig+0x4f8>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0f0      	beq.n	800841e <HAL_RCC_OscConfig+0x4d6>
 800843c:	e01b      	b.n	8008476 <HAL_RCC_OscConfig+0x52e>
 800843e:	bf00      	nop
 8008440:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008444:	4b9b      	ldr	r3, [pc, #620]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a9a      	ldr	r2, [pc, #616]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 800844a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800844e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008450:	f7fe fc62 	bl	8006d18 <HAL_GetTick>
 8008454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008456:	e008      	b.n	800846a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008458:	f7fe fc5e 	bl	8006d18 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	2b02      	cmp	r3, #2
 8008464:	d901      	bls.n	800846a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e195      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800846a:	4b92      	ldr	r3, [pc, #584]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1f0      	bne.n	8008458 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0304 	and.w	r3, r3, #4
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 8081 	beq.w	8008586 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008484:	4b8c      	ldr	r3, [pc, #560]	; (80086b8 <HAL_RCC_OscConfig+0x770>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a8b      	ldr	r2, [pc, #556]	; (80086b8 <HAL_RCC_OscConfig+0x770>)
 800848a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800848e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008490:	f7fe fc42 	bl	8006d18 <HAL_GetTick>
 8008494:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008498:	f7fe fc3e 	bl	8006d18 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b64      	cmp	r3, #100	; 0x64
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e175      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084aa:	4b83      	ldr	r3, [pc, #524]	; (80086b8 <HAL_RCC_OscConfig+0x770>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0f0      	beq.n	8008498 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d106      	bne.n	80084cc <HAL_RCC_OscConfig+0x584>
 80084be:	4b7d      	ldr	r3, [pc, #500]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80084c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c2:	4a7c      	ldr	r2, [pc, #496]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80084c4:	f043 0301 	orr.w	r3, r3, #1
 80084c8:	6713      	str	r3, [r2, #112]	; 0x70
 80084ca:	e02d      	b.n	8008528 <HAL_RCC_OscConfig+0x5e0>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10c      	bne.n	80084ee <HAL_RCC_OscConfig+0x5a6>
 80084d4:	4b77      	ldr	r3, [pc, #476]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80084d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d8:	4a76      	ldr	r2, [pc, #472]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80084da:	f023 0301 	bic.w	r3, r3, #1
 80084de:	6713      	str	r3, [r2, #112]	; 0x70
 80084e0:	4b74      	ldr	r3, [pc, #464]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80084e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e4:	4a73      	ldr	r2, [pc, #460]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80084e6:	f023 0304 	bic.w	r3, r3, #4
 80084ea:	6713      	str	r3, [r2, #112]	; 0x70
 80084ec:	e01c      	b.n	8008528 <HAL_RCC_OscConfig+0x5e0>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	2b05      	cmp	r3, #5
 80084f4:	d10c      	bne.n	8008510 <HAL_RCC_OscConfig+0x5c8>
 80084f6:	4b6f      	ldr	r3, [pc, #444]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80084f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fa:	4a6e      	ldr	r2, [pc, #440]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80084fc:	f043 0304 	orr.w	r3, r3, #4
 8008500:	6713      	str	r3, [r2, #112]	; 0x70
 8008502:	4b6c      	ldr	r3, [pc, #432]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008506:	4a6b      	ldr	r2, [pc, #428]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008508:	f043 0301 	orr.w	r3, r3, #1
 800850c:	6713      	str	r3, [r2, #112]	; 0x70
 800850e:	e00b      	b.n	8008528 <HAL_RCC_OscConfig+0x5e0>
 8008510:	4b68      	ldr	r3, [pc, #416]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008514:	4a67      	ldr	r2, [pc, #412]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008516:	f023 0301 	bic.w	r3, r3, #1
 800851a:	6713      	str	r3, [r2, #112]	; 0x70
 800851c:	4b65      	ldr	r3, [pc, #404]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 800851e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008520:	4a64      	ldr	r2, [pc, #400]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008522:	f023 0304 	bic.w	r3, r3, #4
 8008526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d015      	beq.n	800855c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008530:	f7fe fbf2 	bl	8006d18 <HAL_GetTick>
 8008534:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008536:	e00a      	b.n	800854e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008538:	f7fe fbee 	bl	8006d18 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	f241 3288 	movw	r2, #5000	; 0x1388
 8008546:	4293      	cmp	r3, r2
 8008548:	d901      	bls.n	800854e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e123      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800854e:	4b59      	ldr	r3, [pc, #356]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0ee      	beq.n	8008538 <HAL_RCC_OscConfig+0x5f0>
 800855a:	e014      	b.n	8008586 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800855c:	f7fe fbdc 	bl	8006d18 <HAL_GetTick>
 8008560:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008562:	e00a      	b.n	800857a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008564:	f7fe fbd8 	bl	8006d18 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008572:	4293      	cmp	r3, r2
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e10d      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800857a:	4b4e      	ldr	r3, [pc, #312]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 800857c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1ee      	bne.n	8008564 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 8102 	beq.w	8008794 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008590:	4b48      	ldr	r3, [pc, #288]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008598:	2b18      	cmp	r3, #24
 800859a:	f000 80bd 	beq.w	8008718 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	f040 809e 	bne.w	80086e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085a8:	4b42      	ldr	r3, [pc, #264]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a41      	ldr	r2, [pc, #260]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80085ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b4:	f7fe fbb0 	bl	8006d18 <HAL_GetTick>
 80085b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085ba:	e008      	b.n	80085ce <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085bc:	f7fe fbac 	bl	8006d18 <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d901      	bls.n	80085ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e0e3      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085ce:	4b39      	ldr	r3, [pc, #228]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1f0      	bne.n	80085bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085da:	4b36      	ldr	r3, [pc, #216]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80085dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085de:	4b37      	ldr	r3, [pc, #220]	; (80086bc <HAL_RCC_OscConfig+0x774>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80085ea:	0112      	lsls	r2, r2, #4
 80085ec:	430a      	orrs	r2, r1
 80085ee:	4931      	ldr	r1, [pc, #196]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	628b      	str	r3, [r1, #40]	; 0x28
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	3b01      	subs	r3, #1
 80085fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	3b01      	subs	r3, #1
 8008604:	025b      	lsls	r3, r3, #9
 8008606:	b29b      	uxth	r3, r3
 8008608:	431a      	orrs	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860e:	3b01      	subs	r3, #1
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008616:	431a      	orrs	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861c:	3b01      	subs	r3, #1
 800861e:	061b      	lsls	r3, r3, #24
 8008620:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008624:	4923      	ldr	r1, [pc, #140]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008626:	4313      	orrs	r3, r2
 8008628:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800862a:	4b22      	ldr	r3, [pc, #136]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	4a21      	ldr	r2, [pc, #132]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008630:	f023 0301 	bic.w	r3, r3, #1
 8008634:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008636:	4b1f      	ldr	r3, [pc, #124]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800863a:	4b21      	ldr	r3, [pc, #132]	; (80086c0 <HAL_RCC_OscConfig+0x778>)
 800863c:	4013      	ands	r3, r2
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008642:	00d2      	lsls	r2, r2, #3
 8008644:	491b      	ldr	r1, [pc, #108]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008646:	4313      	orrs	r3, r2
 8008648:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800864a:	4b1a      	ldr	r3, [pc, #104]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	f023 020c 	bic.w	r2, r3, #12
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	4917      	ldr	r1, [pc, #92]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008658:	4313      	orrs	r3, r2
 800865a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800865c:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	f023 0202 	bic.w	r2, r3, #2
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008668:	4912      	ldr	r1, [pc, #72]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 800866a:	4313      	orrs	r3, r2
 800866c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800866e:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	4a10      	ldr	r2, [pc, #64]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008678:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800867a:	4b0e      	ldr	r3, [pc, #56]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	4a0d      	ldr	r2, [pc, #52]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008684:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008686:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868a:	4a0a      	ldr	r2, [pc, #40]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 800868c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008690:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008692:	4b08      	ldr	r3, [pc, #32]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008696:	4a07      	ldr	r2, [pc, #28]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 8008698:	f043 0301 	orr.w	r3, r3, #1
 800869c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800869e:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a04      	ldr	r2, [pc, #16]	; (80086b4 <HAL_RCC_OscConfig+0x76c>)
 80086a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086aa:	f7fe fb35 	bl	8006d18 <HAL_GetTick>
 80086ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086b0:	e011      	b.n	80086d6 <HAL_RCC_OscConfig+0x78e>
 80086b2:	bf00      	nop
 80086b4:	58024400 	.word	0x58024400
 80086b8:	58024800 	.word	0x58024800
 80086bc:	fffffc0c 	.word	0xfffffc0c
 80086c0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086c4:	f7fe fb28 	bl	8006d18 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e05f      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086d6:	4b32      	ldr	r3, [pc, #200]	; (80087a0 <HAL_RCC_OscConfig+0x858>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0f0      	beq.n	80086c4 <HAL_RCC_OscConfig+0x77c>
 80086e2:	e057      	b.n	8008794 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086e4:	4b2e      	ldr	r3, [pc, #184]	; (80087a0 <HAL_RCC_OscConfig+0x858>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a2d      	ldr	r2, [pc, #180]	; (80087a0 <HAL_RCC_OscConfig+0x858>)
 80086ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f0:	f7fe fb12 	bl	8006d18 <HAL_GetTick>
 80086f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086f6:	e008      	b.n	800870a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086f8:	f7fe fb0e 	bl	8006d18 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e045      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800870a:	4b25      	ldr	r3, [pc, #148]	; (80087a0 <HAL_RCC_OscConfig+0x858>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1f0      	bne.n	80086f8 <HAL_RCC_OscConfig+0x7b0>
 8008716:	e03d      	b.n	8008794 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008718:	4b21      	ldr	r3, [pc, #132]	; (80087a0 <HAL_RCC_OscConfig+0x858>)
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800871e:	4b20      	ldr	r3, [pc, #128]	; (80087a0 <HAL_RCC_OscConfig+0x858>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	2b01      	cmp	r3, #1
 800872a:	d031      	beq.n	8008790 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f003 0203 	and.w	r2, r3, #3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008736:	429a      	cmp	r2, r3
 8008738:	d12a      	bne.n	8008790 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	091b      	lsrs	r3, r3, #4
 800873e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008746:	429a      	cmp	r2, r3
 8008748:	d122      	bne.n	8008790 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008754:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008756:	429a      	cmp	r2, r3
 8008758:	d11a      	bne.n	8008790 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	0a5b      	lsrs	r3, r3, #9
 800875e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008766:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008768:	429a      	cmp	r2, r3
 800876a:	d111      	bne.n	8008790 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	0c1b      	lsrs	r3, r3, #16
 8008770:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008778:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800877a:	429a      	cmp	r2, r3
 800877c:	d108      	bne.n	8008790 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	0e1b      	lsrs	r3, r3, #24
 8008782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800878c:	429a      	cmp	r2, r3
 800878e:	d001      	beq.n	8008794 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3730      	adds	r7, #48	; 0x30
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	58024400 	.word	0x58024400

080087a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e19c      	b.n	8008af2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087b8:	4b8a      	ldr	r3, [pc, #552]	; (80089e4 <HAL_RCC_ClockConfig+0x240>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 030f 	and.w	r3, r3, #15
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d910      	bls.n	80087e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087c6:	4b87      	ldr	r3, [pc, #540]	; (80089e4 <HAL_RCC_ClockConfig+0x240>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f023 020f 	bic.w	r2, r3, #15
 80087ce:	4985      	ldr	r1, [pc, #532]	; (80089e4 <HAL_RCC_ClockConfig+0x240>)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087d6:	4b83      	ldr	r3, [pc, #524]	; (80089e4 <HAL_RCC_ClockConfig+0x240>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d001      	beq.n	80087e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e184      	b.n	8008af2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d010      	beq.n	8008816 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691a      	ldr	r2, [r3, #16]
 80087f8:	4b7b      	ldr	r3, [pc, #492]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008800:	429a      	cmp	r2, r3
 8008802:	d908      	bls.n	8008816 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008804:	4b78      	ldr	r3, [pc, #480]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	4975      	ldr	r1, [pc, #468]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008812:	4313      	orrs	r3, r2
 8008814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0308 	and.w	r3, r3, #8
 800881e:	2b00      	cmp	r3, #0
 8008820:	d010      	beq.n	8008844 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695a      	ldr	r2, [r3, #20]
 8008826:	4b70      	ldr	r3, [pc, #448]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800882e:	429a      	cmp	r2, r3
 8008830:	d908      	bls.n	8008844 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008832:	4b6d      	ldr	r3, [pc, #436]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	496a      	ldr	r1, [pc, #424]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008840:	4313      	orrs	r3, r2
 8008842:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0310 	and.w	r3, r3, #16
 800884c:	2b00      	cmp	r3, #0
 800884e:	d010      	beq.n	8008872 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	699a      	ldr	r2, [r3, #24]
 8008854:	4b64      	ldr	r3, [pc, #400]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800885c:	429a      	cmp	r2, r3
 800885e:	d908      	bls.n	8008872 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008860:	4b61      	ldr	r3, [pc, #388]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	495e      	ldr	r1, [pc, #376]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 800886e:	4313      	orrs	r3, r2
 8008870:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b00      	cmp	r3, #0
 800887c:	d010      	beq.n	80088a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	69da      	ldr	r2, [r3, #28]
 8008882:	4b59      	ldr	r3, [pc, #356]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800888a:	429a      	cmp	r2, r3
 800888c:	d908      	bls.n	80088a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800888e:	4b56      	ldr	r3, [pc, #344]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	4953      	ldr	r1, [pc, #332]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 800889c:	4313      	orrs	r3, r2
 800889e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0302 	and.w	r3, r3, #2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d010      	beq.n	80088ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	4b4d      	ldr	r3, [pc, #308]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	f003 030f 	and.w	r3, r3, #15
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d908      	bls.n	80088ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088bc:	4b4a      	ldr	r3, [pc, #296]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	f023 020f 	bic.w	r2, r3, #15
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	4947      	ldr	r1, [pc, #284]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d055      	beq.n	8008986 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80088da:	4b43      	ldr	r3, [pc, #268]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	4940      	ldr	r1, [pc, #256]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d107      	bne.n	8008904 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088f4:	4b3c      	ldr	r3, [pc, #240]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d121      	bne.n	8008944 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e0f6      	b.n	8008af2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	2b03      	cmp	r3, #3
 800890a:	d107      	bne.n	800891c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800890c:	4b36      	ldr	r3, [pc, #216]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d115      	bne.n	8008944 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e0ea      	b.n	8008af2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d107      	bne.n	8008934 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008924:	4b30      	ldr	r3, [pc, #192]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800892c:	2b00      	cmp	r3, #0
 800892e:	d109      	bne.n	8008944 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e0de      	b.n	8008af2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008934:	4b2c      	ldr	r3, [pc, #176]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0304 	and.w	r3, r3, #4
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e0d6      	b.n	8008af2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008944:	4b28      	ldr	r3, [pc, #160]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	f023 0207 	bic.w	r2, r3, #7
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	4925      	ldr	r1, [pc, #148]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008952:	4313      	orrs	r3, r2
 8008954:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008956:	f7fe f9df 	bl	8006d18 <HAL_GetTick>
 800895a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800895c:	e00a      	b.n	8008974 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800895e:	f7fe f9db 	bl	8006d18 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	f241 3288 	movw	r2, #5000	; 0x1388
 800896c:	4293      	cmp	r3, r2
 800896e:	d901      	bls.n	8008974 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e0be      	b.n	8008af2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008974:	4b1c      	ldr	r3, [pc, #112]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	429a      	cmp	r2, r3
 8008984:	d1eb      	bne.n	800895e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d010      	beq.n	80089b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	f003 030f 	and.w	r3, r3, #15
 800899e:	429a      	cmp	r2, r3
 80089a0:	d208      	bcs.n	80089b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089a2:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	f023 020f 	bic.w	r2, r3, #15
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	490e      	ldr	r1, [pc, #56]	; (80089e8 <HAL_RCC_ClockConfig+0x244>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089b4:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <HAL_RCC_ClockConfig+0x240>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 030f 	and.w	r3, r3, #15
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d214      	bcs.n	80089ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c2:	4b08      	ldr	r3, [pc, #32]	; (80089e4 <HAL_RCC_ClockConfig+0x240>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f023 020f 	bic.w	r2, r3, #15
 80089ca:	4906      	ldr	r1, [pc, #24]	; (80089e4 <HAL_RCC_ClockConfig+0x240>)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089d2:	4b04      	ldr	r3, [pc, #16]	; (80089e4 <HAL_RCC_ClockConfig+0x240>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 030f 	and.w	r3, r3, #15
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d005      	beq.n	80089ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e086      	b.n	8008af2 <HAL_RCC_ClockConfig+0x34e>
 80089e4:	52002000 	.word	0x52002000
 80089e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d010      	beq.n	8008a1a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	4b3f      	ldr	r3, [pc, #252]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d208      	bcs.n	8008a1a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a08:	4b3c      	ldr	r3, [pc, #240]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	4939      	ldr	r1, [pc, #228]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0308 	and.w	r3, r3, #8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d010      	beq.n	8008a48 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695a      	ldr	r2, [r3, #20]
 8008a2a:	4b34      	ldr	r3, [pc, #208]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d208      	bcs.n	8008a48 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a36:	4b31      	ldr	r3, [pc, #196]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	492e      	ldr	r1, [pc, #184]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0310 	and.w	r3, r3, #16
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d010      	beq.n	8008a76 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699a      	ldr	r2, [r3, #24]
 8008a58:	4b28      	ldr	r3, [pc, #160]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d208      	bcs.n	8008a76 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a64:	4b25      	ldr	r3, [pc, #148]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008a66:	69db      	ldr	r3, [r3, #28]
 8008a68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	4922      	ldr	r1, [pc, #136]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0320 	and.w	r3, r3, #32
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d010      	beq.n	8008aa4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69da      	ldr	r2, [r3, #28]
 8008a86:	4b1d      	ldr	r3, [pc, #116]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d208      	bcs.n	8008aa4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008a92:	4b1a      	ldr	r3, [pc, #104]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	4917      	ldr	r1, [pc, #92]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008aa4:	f000 f834 	bl	8008b10 <HAL_RCC_GetSysClockFreq>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	4b14      	ldr	r3, [pc, #80]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	0a1b      	lsrs	r3, r3, #8
 8008ab0:	f003 030f 	and.w	r3, r3, #15
 8008ab4:	4912      	ldr	r1, [pc, #72]	; (8008b00 <HAL_RCC_ClockConfig+0x35c>)
 8008ab6:	5ccb      	ldrb	r3, [r1, r3]
 8008ab8:	f003 031f 	and.w	r3, r3, #31
 8008abc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ac2:	4b0e      	ldr	r3, [pc, #56]	; (8008afc <HAL_RCC_ClockConfig+0x358>)
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	f003 030f 	and.w	r3, r3, #15
 8008aca:	4a0d      	ldr	r2, [pc, #52]	; (8008b00 <HAL_RCC_ClockConfig+0x35c>)
 8008acc:	5cd3      	ldrb	r3, [r2, r3]
 8008ace:	f003 031f 	and.w	r3, r3, #31
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad8:	4a0a      	ldr	r2, [pc, #40]	; (8008b04 <HAL_RCC_ClockConfig+0x360>)
 8008ada:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008adc:	4a0a      	ldr	r2, [pc, #40]	; (8008b08 <HAL_RCC_ClockConfig+0x364>)
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008ae2:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <HAL_RCC_ClockConfig+0x368>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fe f8cc 	bl	8006c84 <HAL_InitTick>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	58024400 	.word	0x58024400
 8008b00:	08012350 	.word	0x08012350
 8008b04:	24000014 	.word	0x24000014
 8008b08:	24000010 	.word	0x24000010
 8008b0c:	240000a8 	.word	0x240000a8

08008b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b089      	sub	sp, #36	; 0x24
 8008b14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b16:	4bb3      	ldr	r3, [pc, #716]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b1e:	2b18      	cmp	r3, #24
 8008b20:	f200 8155 	bhi.w	8008dce <HAL_RCC_GetSysClockFreq+0x2be>
 8008b24:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008b91 	.word	0x08008b91
 8008b30:	08008dcf 	.word	0x08008dcf
 8008b34:	08008dcf 	.word	0x08008dcf
 8008b38:	08008dcf 	.word	0x08008dcf
 8008b3c:	08008dcf 	.word	0x08008dcf
 8008b40:	08008dcf 	.word	0x08008dcf
 8008b44:	08008dcf 	.word	0x08008dcf
 8008b48:	08008dcf 	.word	0x08008dcf
 8008b4c:	08008bb7 	.word	0x08008bb7
 8008b50:	08008dcf 	.word	0x08008dcf
 8008b54:	08008dcf 	.word	0x08008dcf
 8008b58:	08008dcf 	.word	0x08008dcf
 8008b5c:	08008dcf 	.word	0x08008dcf
 8008b60:	08008dcf 	.word	0x08008dcf
 8008b64:	08008dcf 	.word	0x08008dcf
 8008b68:	08008dcf 	.word	0x08008dcf
 8008b6c:	08008bbd 	.word	0x08008bbd
 8008b70:	08008dcf 	.word	0x08008dcf
 8008b74:	08008dcf 	.word	0x08008dcf
 8008b78:	08008dcf 	.word	0x08008dcf
 8008b7c:	08008dcf 	.word	0x08008dcf
 8008b80:	08008dcf 	.word	0x08008dcf
 8008b84:	08008dcf 	.word	0x08008dcf
 8008b88:	08008dcf 	.word	0x08008dcf
 8008b8c:	08008bc3 	.word	0x08008bc3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b90:	4b94      	ldr	r3, [pc, #592]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0320 	and.w	r3, r3, #32
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d009      	beq.n	8008bb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b9c:	4b91      	ldr	r3, [pc, #580]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	08db      	lsrs	r3, r3, #3
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	4a90      	ldr	r2, [pc, #576]	; (8008de8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008bae:	e111      	b.n	8008dd4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008bb0:	4b8d      	ldr	r3, [pc, #564]	; (8008de8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bb2:	61bb      	str	r3, [r7, #24]
    break;
 8008bb4:	e10e      	b.n	8008dd4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008bb6:	4b8d      	ldr	r3, [pc, #564]	; (8008dec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bb8:	61bb      	str	r3, [r7, #24]
    break;
 8008bba:	e10b      	b.n	8008dd4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008bbc:	4b8c      	ldr	r3, [pc, #560]	; (8008df0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008bbe:	61bb      	str	r3, [r7, #24]
    break;
 8008bc0:	e108      	b.n	8008dd4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bc2:	4b88      	ldr	r3, [pc, #544]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008bcc:	4b85      	ldr	r3, [pc, #532]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd0:	091b      	lsrs	r3, r3, #4
 8008bd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bd6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008bd8:	4b82      	ldr	r3, [pc, #520]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008be2:	4b80      	ldr	r3, [pc, #512]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be6:	08db      	lsrs	r3, r3, #3
 8008be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	fb02 f303 	mul.w	r3, r2, r3
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 80e1 	beq.w	8008dc8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	f000 8083 	beq.w	8008d14 <HAL_RCC_GetSysClockFreq+0x204>
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	f200 80a1 	bhi.w	8008d58 <HAL_RCC_GetSysClockFreq+0x248>
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <HAL_RCC_GetSysClockFreq+0x114>
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d056      	beq.n	8008cd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c22:	e099      	b.n	8008d58 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c24:	4b6f      	ldr	r3, [pc, #444]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0320 	and.w	r3, r3, #32
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d02d      	beq.n	8008c8c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c30:	4b6c      	ldr	r3, [pc, #432]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	08db      	lsrs	r3, r3, #3
 8008c36:	f003 0303 	and.w	r3, r3, #3
 8008c3a:	4a6b      	ldr	r2, [pc, #428]	; (8008de8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c40:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	ee07 3a90 	vmov	s15, r3
 8008c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c5a:	4b62      	ldr	r3, [pc, #392]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008df4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008c8a:	e087      	b.n	8008d9c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c96:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008df8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9e:	4b51      	ldr	r3, [pc, #324]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cb2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008df4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cce:	e065      	b.n	8008d9c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cda:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008dfc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce2:	4b40      	ldr	r3, [pc, #256]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cf6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008df4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d12:	e043      	b.n	8008d9c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008e00 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d26:	4b2f      	ldr	r3, [pc, #188]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d3a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008df4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d56:	e021      	b.n	8008d9c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008dfc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6a:	4b1e      	ldr	r3, [pc, #120]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d7e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008df4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d9a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008d9c:	4b11      	ldr	r3, [pc, #68]	; (8008de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da0:	0a5b      	lsrs	r3, r3, #9
 8008da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da6:	3301      	adds	r3, #1
 8008da8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	ee07 3a90 	vmov	s15, r3
 8008db0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc0:	ee17 3a90 	vmov	r3, s15
 8008dc4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008dc6:	e005      	b.n	8008dd4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	61bb      	str	r3, [r7, #24]
    break;
 8008dcc:	e002      	b.n	8008dd4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008dce:	4b07      	ldr	r3, [pc, #28]	; (8008dec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008dd0:	61bb      	str	r3, [r7, #24]
    break;
 8008dd2:	bf00      	nop
  }

  return sysclockfreq;
 8008dd4:	69bb      	ldr	r3, [r7, #24]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3724      	adds	r7, #36	; 0x24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	58024400 	.word	0x58024400
 8008de8:	03d09000 	.word	0x03d09000
 8008dec:	003d0900 	.word	0x003d0900
 8008df0:	017d7840 	.word	0x017d7840
 8008df4:	46000000 	.word	0x46000000
 8008df8:	4c742400 	.word	0x4c742400
 8008dfc:	4a742400 	.word	0x4a742400
 8008e00:	4bbebc20 	.word	0x4bbebc20

08008e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e0a:	f7ff fe81 	bl	8008b10 <HAL_RCC_GetSysClockFreq>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	0a1b      	lsrs	r3, r3, #8
 8008e16:	f003 030f 	and.w	r3, r3, #15
 8008e1a:	490f      	ldr	r1, [pc, #60]	; (8008e58 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e1c:	5ccb      	ldrb	r3, [r1, r3]
 8008e1e:	f003 031f 	and.w	r3, r3, #31
 8008e22:	fa22 f303 	lsr.w	r3, r2, r3
 8008e26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e28:	4b0a      	ldr	r3, [pc, #40]	; (8008e54 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	f003 030f 	and.w	r3, r3, #15
 8008e30:	4a09      	ldr	r2, [pc, #36]	; (8008e58 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e32:	5cd3      	ldrb	r3, [r2, r3]
 8008e34:	f003 031f 	and.w	r3, r3, #31
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3e:	4a07      	ldr	r2, [pc, #28]	; (8008e5c <HAL_RCC_GetHCLKFreq+0x58>)
 8008e40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e42:	4a07      	ldr	r2, [pc, #28]	; (8008e60 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008e48:	4b04      	ldr	r3, [pc, #16]	; (8008e5c <HAL_RCC_GetHCLKFreq+0x58>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	58024400 	.word	0x58024400
 8008e58:	08012350 	.word	0x08012350
 8008e5c:	24000014 	.word	0x24000014
 8008e60:	24000010 	.word	0x24000010

08008e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008e68:	f7ff ffcc 	bl	8008e04 <HAL_RCC_GetHCLKFreq>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	091b      	lsrs	r3, r3, #4
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	4904      	ldr	r1, [pc, #16]	; (8008e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e7a:	5ccb      	ldrb	r3, [r1, r3]
 8008e7c:	f003 031f 	and.w	r3, r3, #31
 8008e80:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	58024400 	.word	0x58024400
 8008e8c:	08012350 	.word	0x08012350

08008e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008e94:	f7ff ffb6 	bl	8008e04 <HAL_RCC_GetHCLKFreq>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	4b06      	ldr	r3, [pc, #24]	; (8008eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	0a1b      	lsrs	r3, r3, #8
 8008ea0:	f003 0307 	and.w	r3, r3, #7
 8008ea4:	4904      	ldr	r1, [pc, #16]	; (8008eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ea6:	5ccb      	ldrb	r3, [r1, r3]
 8008ea8:	f003 031f 	and.w	r3, r3, #31
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	58024400 	.word	0x58024400
 8008eb8:	08012350 	.word	0x08012350

08008ebc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ec8:	2300      	movs	r3, #0
 8008eca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d03f      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008edc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ee0:	d02a      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008ee2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ee6:	d824      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eec:	d018      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008eee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ef2:	d81e      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d003      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008efc:	d007      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008efe:	e018      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f00:	4ba3      	ldr	r3, [pc, #652]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	4aa2      	ldr	r2, [pc, #648]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f0c:	e015      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3304      	adds	r3, #4
 8008f12:	2102      	movs	r1, #2
 8008f14:	4618      	mov	r0, r3
 8008f16:	f001 f9d5 	bl	800a2c4 <RCCEx_PLL2_Config>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f1e:	e00c      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3324      	adds	r3, #36	; 0x24
 8008f24:	2102      	movs	r1, #2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f001 fa7e 	bl	800a428 <RCCEx_PLL3_Config>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f30:	e003      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	75fb      	strb	r3, [r7, #23]
      break;
 8008f36:	e000      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d109      	bne.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f40:	4b93      	ldr	r3, [pc, #588]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f4c:	4990      	ldr	r1, [pc, #576]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	650b      	str	r3, [r1, #80]	; 0x50
 8008f52:	e001      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d03d      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f68:	2b04      	cmp	r3, #4
 8008f6a:	d826      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008f6c:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f72:	bf00      	nop
 8008f74:	08008f89 	.word	0x08008f89
 8008f78:	08008f97 	.word	0x08008f97
 8008f7c:	08008fa9 	.word	0x08008fa9
 8008f80:	08008fc1 	.word	0x08008fc1
 8008f84:	08008fc1 	.word	0x08008fc1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f88:	4b81      	ldr	r3, [pc, #516]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	4a80      	ldr	r2, [pc, #512]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f94:	e015      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 f991 	bl	800a2c4 <RCCEx_PLL2_Config>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fa6:	e00c      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3324      	adds	r3, #36	; 0x24
 8008fac:	2100      	movs	r1, #0
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 fa3a 	bl	800a428 <RCCEx_PLL3_Config>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fb8:	e003      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8008fbe:	e000      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d109      	bne.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fc8:	4b71      	ldr	r3, [pc, #452]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fcc:	f023 0207 	bic.w	r2, r3, #7
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd4:	496e      	ldr	r1, [pc, #440]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	650b      	str	r3, [r1, #80]	; 0x50
 8008fda:	e001      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d042      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ff4:	d02b      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ffa:	d825      	bhi.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008ffc:	2bc0      	cmp	r3, #192	; 0xc0
 8008ffe:	d028      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009000:	2bc0      	cmp	r3, #192	; 0xc0
 8009002:	d821      	bhi.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009004:	2b80      	cmp	r3, #128	; 0x80
 8009006:	d016      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009008:	2b80      	cmp	r3, #128	; 0x80
 800900a:	d81d      	bhi.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009010:	2b40      	cmp	r3, #64	; 0x40
 8009012:	d007      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009014:	e018      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009016:	4b5e      	ldr	r3, [pc, #376]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901a:	4a5d      	ldr	r2, [pc, #372]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800901c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009020:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009022:	e017      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3304      	adds	r3, #4
 8009028:	2100      	movs	r1, #0
 800902a:	4618      	mov	r0, r3
 800902c:	f001 f94a 	bl	800a2c4 <RCCEx_PLL2_Config>
 8009030:	4603      	mov	r3, r0
 8009032:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009034:	e00e      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3324      	adds	r3, #36	; 0x24
 800903a:	2100      	movs	r1, #0
 800903c:	4618      	mov	r0, r3
 800903e:	f001 f9f3 	bl	800a428 <RCCEx_PLL3_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009046:	e005      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	75fb      	strb	r3, [r7, #23]
      break;
 800904c:	e002      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800904e:	bf00      	nop
 8009050:	e000      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009052:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009054:	7dfb      	ldrb	r3, [r7, #23]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d109      	bne.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800905a:	4b4d      	ldr	r3, [pc, #308]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800905c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800905e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009066:	494a      	ldr	r1, [pc, #296]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009068:	4313      	orrs	r3, r2
 800906a:	650b      	str	r3, [r1, #80]	; 0x50
 800906c:	e001      	b.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906e:	7dfb      	ldrb	r3, [r7, #23]
 8009070:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800907a:	2b00      	cmp	r3, #0
 800907c:	d049      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009084:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009088:	d030      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x230>
 800908a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800908e:	d82a      	bhi.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009090:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009094:	d02c      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009096:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800909a:	d824      	bhi.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800909c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090a0:	d018      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80090a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090a6:	d81e      	bhi.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80090ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090b0:	d007      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80090b2:	e018      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090b4:	4b36      	ldr	r3, [pc, #216]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	4a35      	ldr	r2, [pc, #212]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090c0:	e017      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	3304      	adds	r3, #4
 80090c6:	2100      	movs	r1, #0
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 f8fb 	bl	800a2c4 <RCCEx_PLL2_Config>
 80090ce:	4603      	mov	r3, r0
 80090d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80090d2:	e00e      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3324      	adds	r3, #36	; 0x24
 80090d8:	2100      	movs	r1, #0
 80090da:	4618      	mov	r0, r3
 80090dc:	f001 f9a4 	bl	800a428 <RCCEx_PLL3_Config>
 80090e0:	4603      	mov	r3, r0
 80090e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090e4:	e005      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	75fb      	strb	r3, [r7, #23]
      break;
 80090ea:	e002      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80090ec:	bf00      	nop
 80090ee:	e000      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80090f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80090f8:	4b25      	ldr	r3, [pc, #148]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009106:	4922      	ldr	r1, [pc, #136]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009108:	4313      	orrs	r3, r2
 800910a:	658b      	str	r3, [r1, #88]	; 0x58
 800910c:	e001      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800911a:	2b00      	cmp	r3, #0
 800911c:	d04b      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009124:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009128:	d030      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800912a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800912e:	d82a      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009130:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009134:	d02e      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009136:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800913a:	d824      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800913c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009140:	d018      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009146:	d81e      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800914c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009150:	d007      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009152:	e018      	b.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009154:	4b0e      	ldr	r3, [pc, #56]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	4a0d      	ldr	r2, [pc, #52]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800915a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800915e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009160:	e019      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	3304      	adds	r3, #4
 8009166:	2100      	movs	r1, #0
 8009168:	4618      	mov	r0, r3
 800916a:	f001 f8ab 	bl	800a2c4 <RCCEx_PLL2_Config>
 800916e:	4603      	mov	r3, r0
 8009170:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009172:	e010      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3324      	adds	r3, #36	; 0x24
 8009178:	2100      	movs	r1, #0
 800917a:	4618      	mov	r0, r3
 800917c:	f001 f954 	bl	800a428 <RCCEx_PLL3_Config>
 8009180:	4603      	mov	r3, r0
 8009182:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009184:	e007      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	75fb      	strb	r3, [r7, #23]
      break;
 800918a:	e004      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800918c:	bf00      	nop
 800918e:	e002      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009190:	58024400 	.word	0x58024400
      break;
 8009194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10a      	bne.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800919c:	4b99      	ldr	r3, [pc, #612]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800919e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80091aa:	4996      	ldr	r1, [pc, #600]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	658b      	str	r3, [r1, #88]	; 0x58
 80091b0:	e001      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d032      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c6:	2b30      	cmp	r3, #48	; 0x30
 80091c8:	d01c      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80091ca:	2b30      	cmp	r3, #48	; 0x30
 80091cc:	d817      	bhi.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x342>
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d00c      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x330>
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d813      	bhi.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x342>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d016      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80091da:	2b10      	cmp	r3, #16
 80091dc:	d10f      	bne.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091de:	4b89      	ldr	r3, [pc, #548]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	4a88      	ldr	r2, [pc, #544]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80091ea:	e00e      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3304      	adds	r3, #4
 80091f0:	2102      	movs	r1, #2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 f866 	bl	800a2c4 <RCCEx_PLL2_Config>
 80091f8:	4603      	mov	r3, r0
 80091fa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80091fc:	e005      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	75fb      	strb	r3, [r7, #23]
      break;
 8009202:	e002      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009204:	bf00      	nop
 8009206:	e000      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d109      	bne.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009210:	4b7c      	ldr	r3, [pc, #496]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009214:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800921c:	4979      	ldr	r1, [pc, #484]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800921e:	4313      	orrs	r3, r2
 8009220:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009222:	e001      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d047      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800923c:	d030      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800923e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009242:	d82a      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009244:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009248:	d02c      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800924a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800924e:	d824      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009254:	d018      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800925a:	d81e      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800925c:	2b00      	cmp	r3, #0
 800925e:	d003      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009264:	d007      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009266:	e018      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009268:	4b66      	ldr	r3, [pc, #408]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800926a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926c:	4a65      	ldr	r2, [pc, #404]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800926e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009272:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009274:	e017      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3304      	adds	r3, #4
 800927a:	2100      	movs	r1, #0
 800927c:	4618      	mov	r0, r3
 800927e:	f001 f821 	bl	800a2c4 <RCCEx_PLL2_Config>
 8009282:	4603      	mov	r3, r0
 8009284:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009286:	e00e      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3324      	adds	r3, #36	; 0x24
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f001 f8ca 	bl	800a428 <RCCEx_PLL3_Config>
 8009294:	4603      	mov	r3, r0
 8009296:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009298:	e005      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	75fb      	strb	r3, [r7, #23]
      break;
 800929e:	e002      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80092a0:	bf00      	nop
 80092a2:	e000      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80092a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d109      	bne.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80092ac:	4b55      	ldr	r3, [pc, #340]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092b8:	4952      	ldr	r1, [pc, #328]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	650b      	str	r3, [r1, #80]	; 0x50
 80092be:	e001      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d049      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092d8:	d02e      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80092da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092de:	d828      	bhi.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80092e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092e4:	d02a      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80092e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092ea:	d822      	bhi.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80092ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80092f0:	d026      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80092f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80092f6:	d81c      	bhi.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80092f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092fc:	d010      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80092fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009302:	d816      	bhi.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009304:	2b00      	cmp	r3, #0
 8009306:	d01d      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800930c:	d111      	bne.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3304      	adds	r3, #4
 8009312:	2101      	movs	r1, #1
 8009314:	4618      	mov	r0, r3
 8009316:	f000 ffd5 	bl	800a2c4 <RCCEx_PLL2_Config>
 800931a:	4603      	mov	r3, r0
 800931c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800931e:	e012      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	3324      	adds	r3, #36	; 0x24
 8009324:	2101      	movs	r1, #1
 8009326:	4618      	mov	r0, r3
 8009328:	f001 f87e 	bl	800a428 <RCCEx_PLL3_Config>
 800932c:	4603      	mov	r3, r0
 800932e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009330:	e009      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	75fb      	strb	r3, [r7, #23]
      break;
 8009336:	e006      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009338:	bf00      	nop
 800933a:	e004      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800933c:	bf00      	nop
 800933e:	e002      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009340:	bf00      	nop
 8009342:	e000      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d109      	bne.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800934c:	4b2d      	ldr	r3, [pc, #180]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800934e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009350:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009358:	492a      	ldr	r1, [pc, #168]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800935a:	4313      	orrs	r3, r2
 800935c:	650b      	str	r3, [r1, #80]	; 0x50
 800935e:	e001      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d04d      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800937a:	d02e      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800937c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009380:	d828      	bhi.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009386:	d02a      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800938c:	d822      	bhi.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800938e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009392:	d026      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009394:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009398:	d81c      	bhi.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800939a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800939e:	d010      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80093a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a4:	d816      	bhi.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d01d      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80093aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093ae:	d111      	bne.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3304      	adds	r3, #4
 80093b4:	2101      	movs	r1, #1
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 ff84 	bl	800a2c4 <RCCEx_PLL2_Config>
 80093bc:	4603      	mov	r3, r0
 80093be:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80093c0:	e012      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3324      	adds	r3, #36	; 0x24
 80093c6:	2101      	movs	r1, #1
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 f82d 	bl	800a428 <RCCEx_PLL3_Config>
 80093ce:	4603      	mov	r3, r0
 80093d0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80093d2:	e009      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	75fb      	strb	r3, [r7, #23]
      break;
 80093d8:	e006      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80093da:	bf00      	nop
 80093dc:	e004      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80093de:	bf00      	nop
 80093e0:	e002      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80093e2:	bf00      	nop
 80093e4:	e000      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80093e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10c      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80093ee:	4b05      	ldr	r3, [pc, #20]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80093f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093fc:	4901      	ldr	r1, [pc, #4]	; (8009404 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80093fe:	4313      	orrs	r3, r2
 8009400:	658b      	str	r3, [r1, #88]	; 0x58
 8009402:	e003      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009404:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d02f      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800941c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009420:	d00e      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009426:	d814      	bhi.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009428:	2b00      	cmp	r3, #0
 800942a:	d015      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800942c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009430:	d10f      	bne.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009432:	4baf      	ldr	r3, [pc, #700]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009436:	4aae      	ldr	r2, [pc, #696]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800943c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800943e:	e00c      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3304      	adds	r3, #4
 8009444:	2101      	movs	r1, #1
 8009446:	4618      	mov	r0, r3
 8009448:	f000 ff3c 	bl	800a2c4 <RCCEx_PLL2_Config>
 800944c:	4603      	mov	r3, r0
 800944e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009450:	e003      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	75fb      	strb	r3, [r7, #23]
      break;
 8009456:	e000      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d109      	bne.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009460:	4ba3      	ldr	r3, [pc, #652]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009464:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800946c:	49a0      	ldr	r1, [pc, #640]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800946e:	4313      	orrs	r3, r2
 8009470:	650b      	str	r3, [r1, #80]	; 0x50
 8009472:	e001      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009474:	7dfb      	ldrb	r3, [r7, #23]
 8009476:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d032      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009488:	2b03      	cmp	r3, #3
 800948a:	d81b      	bhi.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800948c:	a201      	add	r2, pc, #4	; (adr r2, 8009494 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800948e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009492:	bf00      	nop
 8009494:	080094cb 	.word	0x080094cb
 8009498:	080094a5 	.word	0x080094a5
 800949c:	080094b3 	.word	0x080094b3
 80094a0:	080094cb 	.word	0x080094cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094a4:	4b92      	ldr	r3, [pc, #584]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	4a91      	ldr	r2, [pc, #580]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094b0:	e00c      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3304      	adds	r3, #4
 80094b6:	2102      	movs	r1, #2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 ff03 	bl	800a2c4 <RCCEx_PLL2_Config>
 80094be:	4603      	mov	r3, r0
 80094c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094c2:	e003      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	75fb      	strb	r3, [r7, #23]
      break;
 80094c8:	e000      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80094ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d109      	bne.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80094d2:	4b87      	ldr	r3, [pc, #540]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094d6:	f023 0203 	bic.w	r2, r3, #3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094de:	4984      	ldr	r1, [pc, #528]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80094e4:	e001      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 8086 	beq.w	8009604 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094f8:	4b7e      	ldr	r3, [pc, #504]	; (80096f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a7d      	ldr	r2, [pc, #500]	; (80096f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80094fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009502:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009504:	f7fd fc08 	bl	8006d18 <HAL_GetTick>
 8009508:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800950a:	e009      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800950c:	f7fd fc04 	bl	8006d18 <HAL_GetTick>
 8009510:	4602      	mov	r2, r0
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	2b64      	cmp	r3, #100	; 0x64
 8009518:	d902      	bls.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	75fb      	strb	r3, [r7, #23]
        break;
 800951e:	e005      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009520:	4b74      	ldr	r3, [pc, #464]	; (80096f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009528:	2b00      	cmp	r3, #0
 800952a:	d0ef      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d166      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009532:	4b6f      	ldr	r3, [pc, #444]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009534:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800953c:	4053      	eors	r3, r2
 800953e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009542:	2b00      	cmp	r3, #0
 8009544:	d013      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009546:	4b6a      	ldr	r3, [pc, #424]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800954e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009550:	4b67      	ldr	r3, [pc, #412]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009554:	4a66      	ldr	r2, [pc, #408]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800955a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800955c:	4b64      	ldr	r3, [pc, #400]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800955e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009560:	4a63      	ldr	r2, [pc, #396]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009566:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009568:	4a61      	ldr	r2, [pc, #388]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009578:	d115      	bne.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800957a:	f7fd fbcd 	bl	8006d18 <HAL_GetTick>
 800957e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009580:	e00b      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009582:	f7fd fbc9 	bl	8006d18 <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009590:	4293      	cmp	r3, r2
 8009592:	d902      	bls.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	75fb      	strb	r3, [r7, #23]
            break;
 8009598:	e005      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800959a:	4b55      	ldr	r3, [pc, #340]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800959c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0ed      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d126      	bne.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095ba:	d10d      	bne.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80095bc:	4b4c      	ldr	r3, [pc, #304]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095ca:	0919      	lsrs	r1, r3, #4
 80095cc:	4b4a      	ldr	r3, [pc, #296]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80095ce:	400b      	ands	r3, r1
 80095d0:	4947      	ldr	r1, [pc, #284]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	610b      	str	r3, [r1, #16]
 80095d6:	e005      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80095d8:	4b45      	ldr	r3, [pc, #276]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	4a44      	ldr	r2, [pc, #272]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80095e2:	6113      	str	r3, [r2, #16]
 80095e4:	4b42      	ldr	r3, [pc, #264]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f2:	493f      	ldr	r1, [pc, #252]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	670b      	str	r3, [r1, #112]	; 0x70
 80095f8:	e004      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	75bb      	strb	r3, [r7, #22]
 80095fe:	e001      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 8085 	beq.w	800971c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009616:	2b28      	cmp	r3, #40	; 0x28
 8009618:	d866      	bhi.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800961a:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	080096fd 	.word	0x080096fd
 8009624:	080096e9 	.word	0x080096e9
 8009628:	080096e9 	.word	0x080096e9
 800962c:	080096e9 	.word	0x080096e9
 8009630:	080096e9 	.word	0x080096e9
 8009634:	080096e9 	.word	0x080096e9
 8009638:	080096e9 	.word	0x080096e9
 800963c:	080096e9 	.word	0x080096e9
 8009640:	080096c5 	.word	0x080096c5
 8009644:	080096e9 	.word	0x080096e9
 8009648:	080096e9 	.word	0x080096e9
 800964c:	080096e9 	.word	0x080096e9
 8009650:	080096e9 	.word	0x080096e9
 8009654:	080096e9 	.word	0x080096e9
 8009658:	080096e9 	.word	0x080096e9
 800965c:	080096e9 	.word	0x080096e9
 8009660:	080096d7 	.word	0x080096d7
 8009664:	080096e9 	.word	0x080096e9
 8009668:	080096e9 	.word	0x080096e9
 800966c:	080096e9 	.word	0x080096e9
 8009670:	080096e9 	.word	0x080096e9
 8009674:	080096e9 	.word	0x080096e9
 8009678:	080096e9 	.word	0x080096e9
 800967c:	080096e9 	.word	0x080096e9
 8009680:	080096fd 	.word	0x080096fd
 8009684:	080096e9 	.word	0x080096e9
 8009688:	080096e9 	.word	0x080096e9
 800968c:	080096e9 	.word	0x080096e9
 8009690:	080096e9 	.word	0x080096e9
 8009694:	080096e9 	.word	0x080096e9
 8009698:	080096e9 	.word	0x080096e9
 800969c:	080096e9 	.word	0x080096e9
 80096a0:	080096fd 	.word	0x080096fd
 80096a4:	080096e9 	.word	0x080096e9
 80096a8:	080096e9 	.word	0x080096e9
 80096ac:	080096e9 	.word	0x080096e9
 80096b0:	080096e9 	.word	0x080096e9
 80096b4:	080096e9 	.word	0x080096e9
 80096b8:	080096e9 	.word	0x080096e9
 80096bc:	080096e9 	.word	0x080096e9
 80096c0:	080096fd 	.word	0x080096fd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3304      	adds	r3, #4
 80096c8:	2101      	movs	r1, #1
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 fdfa 	bl	800a2c4 <RCCEx_PLL2_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80096d4:	e013      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3324      	adds	r3, #36	; 0x24
 80096da:	2101      	movs	r1, #1
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 fea3 	bl	800a428 <RCCEx_PLL3_Config>
 80096e2:	4603      	mov	r3, r0
 80096e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80096e6:	e00a      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	75fb      	strb	r3, [r7, #23]
      break;
 80096ec:	e007      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 80096ee:	bf00      	nop
 80096f0:	58024400 	.word	0x58024400
 80096f4:	58024800 	.word	0x58024800
 80096f8:	00ffffcf 	.word	0x00ffffcf
      break;
 80096fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d109      	bne.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009704:	4b96      	ldr	r3, [pc, #600]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009708:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009710:	4993      	ldr	r1, [pc, #588]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009712:	4313      	orrs	r3, r2
 8009714:	654b      	str	r3, [r1, #84]	; 0x54
 8009716:	e001      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d038      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800972c:	2b05      	cmp	r3, #5
 800972e:	d821      	bhi.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009730:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009736:	bf00      	nop
 8009738:	0800977b 	.word	0x0800977b
 800973c:	08009751 	.word	0x08009751
 8009740:	08009763 	.word	0x08009763
 8009744:	0800977b 	.word	0x0800977b
 8009748:	0800977b 	.word	0x0800977b
 800974c:	0800977b 	.word	0x0800977b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3304      	adds	r3, #4
 8009754:	2101      	movs	r1, #1
 8009756:	4618      	mov	r0, r3
 8009758:	f000 fdb4 	bl	800a2c4 <RCCEx_PLL2_Config>
 800975c:	4603      	mov	r3, r0
 800975e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009760:	e00c      	b.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	3324      	adds	r3, #36	; 0x24
 8009766:	2101      	movs	r1, #1
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fe5d 	bl	800a428 <RCCEx_PLL3_Config>
 800976e:	4603      	mov	r3, r0
 8009770:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009772:	e003      	b.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	75fb      	strb	r3, [r7, #23]
      break;
 8009778:	e000      	b.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800977a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800977c:	7dfb      	ldrb	r3, [r7, #23]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d109      	bne.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009782:	4b77      	ldr	r3, [pc, #476]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009786:	f023 0207 	bic.w	r2, r3, #7
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800978e:	4974      	ldr	r1, [pc, #464]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009790:	4313      	orrs	r3, r2
 8009792:	654b      	str	r3, [r1, #84]	; 0x54
 8009794:	e001      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0304 	and.w	r3, r3, #4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d03a      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ac:	2b05      	cmp	r3, #5
 80097ae:	d821      	bhi.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80097b0:	a201      	add	r2, pc, #4	; (adr r2, 80097b8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80097b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b6:	bf00      	nop
 80097b8:	080097fb 	.word	0x080097fb
 80097bc:	080097d1 	.word	0x080097d1
 80097c0:	080097e3 	.word	0x080097e3
 80097c4:	080097fb 	.word	0x080097fb
 80097c8:	080097fb 	.word	0x080097fb
 80097cc:	080097fb 	.word	0x080097fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3304      	adds	r3, #4
 80097d4:	2101      	movs	r1, #1
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fd74 	bl	800a2c4 <RCCEx_PLL2_Config>
 80097dc:	4603      	mov	r3, r0
 80097de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80097e0:	e00c      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3324      	adds	r3, #36	; 0x24
 80097e6:	2101      	movs	r1, #1
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 fe1d 	bl	800a428 <RCCEx_PLL3_Config>
 80097ee:	4603      	mov	r3, r0
 80097f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80097f2:	e003      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	75fb      	strb	r3, [r7, #23]
      break;
 80097f8:	e000      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80097fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009802:	4b57      	ldr	r3, [pc, #348]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009806:	f023 0207 	bic.w	r2, r3, #7
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009810:	4953      	ldr	r1, [pc, #332]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009812:	4313      	orrs	r3, r2
 8009814:	658b      	str	r3, [r1, #88]	; 0x58
 8009816:	e001      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009818:	7dfb      	ldrb	r3, [r7, #23]
 800981a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0320 	and.w	r3, r3, #32
 8009824:	2b00      	cmp	r3, #0
 8009826:	d04b      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800982e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009832:	d02e      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009838:	d828      	bhi.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800983a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800983e:	d02a      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009844:	d822      	bhi.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009846:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800984a:	d026      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800984c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009850:	d81c      	bhi.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009856:	d010      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800985c:	d816      	bhi.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d01d      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009866:	d111      	bne.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3304      	adds	r3, #4
 800986c:	2100      	movs	r1, #0
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fd28 	bl	800a2c4 <RCCEx_PLL2_Config>
 8009874:	4603      	mov	r3, r0
 8009876:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009878:	e012      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	3324      	adds	r3, #36	; 0x24
 800987e:	2102      	movs	r1, #2
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fdd1 	bl	800a428 <RCCEx_PLL3_Config>
 8009886:	4603      	mov	r3, r0
 8009888:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800988a:	e009      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	75fb      	strb	r3, [r7, #23]
      break;
 8009890:	e006      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009892:	bf00      	nop
 8009894:	e004      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009896:	bf00      	nop
 8009898:	e002      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800989a:	bf00      	nop
 800989c:	e000      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800989e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10a      	bne.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098a6:	4b2e      	ldr	r3, [pc, #184]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098b4:	492a      	ldr	r1, [pc, #168]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098b6:	4313      	orrs	r3, r2
 80098b8:	654b      	str	r3, [r1, #84]	; 0x54
 80098ba:	e001      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
 80098be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d04d      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098d6:	d02e      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80098d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098dc:	d828      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80098de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e2:	d02a      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80098e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e8:	d822      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80098ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098ee:	d026      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80098f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098f4:	d81c      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80098f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098fa:	d010      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80098fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009900:	d816      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d01d      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800990a:	d111      	bne.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3304      	adds	r3, #4
 8009910:	2100      	movs	r1, #0
 8009912:	4618      	mov	r0, r3
 8009914:	f000 fcd6 	bl	800a2c4 <RCCEx_PLL2_Config>
 8009918:	4603      	mov	r3, r0
 800991a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800991c:	e012      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3324      	adds	r3, #36	; 0x24
 8009922:	2102      	movs	r1, #2
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fd7f 	bl	800a428 <RCCEx_PLL3_Config>
 800992a:	4603      	mov	r3, r0
 800992c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800992e:	e009      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	75fb      	strb	r3, [r7, #23]
      break;
 8009934:	e006      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009936:	bf00      	nop
 8009938:	e004      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800993a:	bf00      	nop
 800993c:	e002      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800993e:	bf00      	nop
 8009940:	e000      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009944:	7dfb      	ldrb	r3, [r7, #23]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10c      	bne.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800994a:	4b05      	ldr	r3, [pc, #20]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800994c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800994e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009958:	4901      	ldr	r1, [pc, #4]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800995a:	4313      	orrs	r3, r2
 800995c:	658b      	str	r3, [r1, #88]	; 0x58
 800995e:	e003      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009970:	2b00      	cmp	r3, #0
 8009972:	d04b      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800997a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800997e:	d02e      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009980:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009984:	d828      	bhi.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800998a:	d02a      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800998c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009990:	d822      	bhi.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009992:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009996:	d026      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009998:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800999c:	d81c      	bhi.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800999e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099a2:	d010      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80099a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099a8:	d816      	bhi.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d01d      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80099ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099b2:	d111      	bne.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3304      	adds	r3, #4
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 fc82 	bl	800a2c4 <RCCEx_PLL2_Config>
 80099c0:	4603      	mov	r3, r0
 80099c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80099c4:	e012      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3324      	adds	r3, #36	; 0x24
 80099ca:	2102      	movs	r1, #2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 fd2b 	bl	800a428 <RCCEx_PLL3_Config>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80099d6:	e009      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	75fb      	strb	r3, [r7, #23]
      break;
 80099dc:	e006      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80099de:	bf00      	nop
 80099e0:	e004      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80099e2:	bf00      	nop
 80099e4:	e002      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80099e6:	bf00      	nop
 80099e8:	e000      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80099ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10a      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80099f2:	4b9d      	ldr	r3, [pc, #628]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a00:	4999      	ldr	r1, [pc, #612]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a02:	4313      	orrs	r3, r2
 8009a04:	658b      	str	r3, [r1, #88]	; 0x58
 8009a06:	e001      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a08:	7dfb      	ldrb	r3, [r7, #23]
 8009a0a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0308 	and.w	r3, r3, #8
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d01a      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a22:	d10a      	bne.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3324      	adds	r3, #36	; 0x24
 8009a28:	2102      	movs	r1, #2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fcfc 	bl	800a428 <RCCEx_PLL3_Config>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009a3a:	4b8b      	ldr	r3, [pc, #556]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a48:	4987      	ldr	r1, [pc, #540]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0310 	and.w	r3, r3, #16
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d01a      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a64:	d10a      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	3324      	adds	r3, #36	; 0x24
 8009a6a:	2102      	movs	r1, #2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fcdb 	bl	800a428 <RCCEx_PLL3_Config>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a7c:	4b7a      	ldr	r3, [pc, #488]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a8a:	4977      	ldr	r1, [pc, #476]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d034      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aa6:	d01d      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aac:	d817      	bhi.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab6:	d009      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009ab8:	e011      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3304      	adds	r3, #4
 8009abe:	2100      	movs	r1, #0
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fbff 	bl	800a2c4 <RCCEx_PLL2_Config>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009aca:	e00c      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3324      	adds	r3, #36	; 0x24
 8009ad0:	2102      	movs	r1, #2
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 fca8 	bl	800a428 <RCCEx_PLL3_Config>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009adc:	e003      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae2:	e000      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10a      	bne.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009aec:	4b5e      	ldr	r3, [pc, #376]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009afa:	495b      	ldr	r1, [pc, #364]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	658b      	str	r3, [r1, #88]	; 0x58
 8009b00:	e001      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d033      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b1c:	d01c      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009b1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b22:	d816      	bhi.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009b24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b28:	d003      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b2e:	d007      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009b30:	e00f      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b32:	4b4d      	ldr	r3, [pc, #308]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b36:	4a4c      	ldr	r2, [pc, #304]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b3e:	e00c      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3324      	adds	r3, #36	; 0x24
 8009b44:	2101      	movs	r1, #1
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fc6e 	bl	800a428 <RCCEx_PLL3_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b50:	e003      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	75fb      	strb	r3, [r7, #23]
      break;
 8009b56:	e000      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10a      	bne.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b60:	4b41      	ldr	r3, [pc, #260]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b6e:	493e      	ldr	r1, [pc, #248]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	654b      	str	r3, [r1, #84]	; 0x54
 8009b74:	e001      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
 8009b78:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d029      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b92:	d007      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009b94:	e00f      	b.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b96:	4b34      	ldr	r3, [pc, #208]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9a:	4a33      	ldr	r2, [pc, #204]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009ba2:	e00b      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	2102      	movs	r1, #2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 fb8a 	bl	800a2c4 <RCCEx_PLL2_Config>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009bb4:	e002      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8009bba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d109      	bne.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009bc2:	4b29      	ldr	r3, [pc, #164]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bce:	4926      	ldr	r1, [pc, #152]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009bd4:	e001      	b.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00a      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	3324      	adds	r3, #36	; 0x24
 8009bea:	2102      	movs	r1, #2
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 fc1b 	bl	800a428 <RCCEx_PLL3_Config>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d033      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c10:	d017      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c16:	d811      	bhi.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c1c:	d013      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c22:	d80b      	bhi.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d010      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c2c:	d106      	bne.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c2e:	4b0e      	ldr	r3, [pc, #56]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	4a0d      	ldr	r2, [pc, #52]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009c3a:	e007      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c40:	e004      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009c42:	bf00      	nop
 8009c44:	e002      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009c46:	bf00      	nop
 8009c48:	e000      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10c      	bne.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c52:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c5e:	4902      	ldr	r1, [pc, #8]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	654b      	str	r3, [r1, #84]	; 0x54
 8009c64:	e004      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009c66:	bf00      	nop
 8009c68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d008      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c7c:	4b31      	ldr	r3, [pc, #196]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c88:	492e      	ldr	r1, [pc, #184]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d009      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009c9a:	4b2a      	ldr	r3, [pc, #168]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ca8:	4926      	ldr	r1, [pc, #152]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009caa:	4313      	orrs	r3, r2
 8009cac:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d008      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009cba:	4b22      	ldr	r3, [pc, #136]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cbe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cc6:	491f      	ldr	r1, [pc, #124]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00d      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009cd8:	4b1a      	ldr	r3, [pc, #104]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	4a19      	ldr	r2, [pc, #100]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ce2:	6113      	str	r3, [r2, #16]
 8009ce4:	4b17      	ldr	r3, [pc, #92]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009ce6:	691a      	ldr	r2, [r3, #16]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009cee:	4915      	ldr	r1, [pc, #84]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	da08      	bge.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009cfc:	4b11      	ldr	r3, [pc, #68]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d08:	490e      	ldr	r1, [pc, #56]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d009      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d1a:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d28:	4906      	ldr	r1, [pc, #24]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009d2e:	7dbb      	ldrb	r3, [r7, #22]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	e000      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	58024400 	.word	0x58024400

08009d48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009d4c:	f7ff f85a 	bl	8008e04 <HAL_RCC_GetHCLKFreq>
 8009d50:	4602      	mov	r2, r0
 8009d52:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	091b      	lsrs	r3, r3, #4
 8009d58:	f003 0307 	and.w	r3, r3, #7
 8009d5c:	4904      	ldr	r1, [pc, #16]	; (8009d70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009d5e:	5ccb      	ldrb	r3, [r1, r3]
 8009d60:	f003 031f 	and.w	r3, r3, #31
 8009d64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	58024400 	.word	0x58024400
 8009d70:	08012350 	.word	0x08012350

08009d74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b089      	sub	sp, #36	; 0x24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d7c:	4ba1      	ldr	r3, [pc, #644]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d80:	f003 0303 	and.w	r3, r3, #3
 8009d84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009d86:	4b9f      	ldr	r3, [pc, #636]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8a:	0b1b      	lsrs	r3, r3, #12
 8009d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d92:	4b9c      	ldr	r3, [pc, #624]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d96:	091b      	lsrs	r3, r3, #4
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009d9e:	4b99      	ldr	r3, [pc, #612]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da2:	08db      	lsrs	r3, r3, #3
 8009da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	fb02 f303 	mul.w	r3, r2, r3
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8111 	beq.w	8009fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	f000 8083 	beq.w	8009ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	f200 80a1 	bhi.w	8009f14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d003      	beq.n	8009de0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d056      	beq.n	8009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009dde:	e099      	b.n	8009f14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009de0:	4b88      	ldr	r3, [pc, #544]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0320 	and.w	r3, r3, #32
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d02d      	beq.n	8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dec:	4b85      	ldr	r3, [pc, #532]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	08db      	lsrs	r3, r3, #3
 8009df2:	f003 0303 	and.w	r3, r3, #3
 8009df6:	4a84      	ldr	r2, [pc, #528]	; (800a008 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009df8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	ee07 3a90 	vmov	s15, r3
 8009e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	ee07 3a90 	vmov	s15, r3
 8009e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e16:	4b7b      	ldr	r3, [pc, #492]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e42:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e46:	e087      	b.n	8009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a010 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e5a:	4b6a      	ldr	r3, [pc, #424]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e8a:	e065      	b.n	8009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a014 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e9e:	4b59      	ldr	r3, [pc, #356]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea6:	ee07 3a90 	vmov	s15, r3
 8009eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ece:	e043      	b.n	8009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	ee07 3a90 	vmov	s15, r3
 8009ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ee2:	4b48      	ldr	r3, [pc, #288]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eea:	ee07 3a90 	vmov	s15, r3
 8009eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ef6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f12:	e021      	b.n	8009f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	ee07 3a90 	vmov	s15, r3
 8009f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a014 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f26:	4b37      	ldr	r3, [pc, #220]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f2e:	ee07 3a90 	vmov	s15, r3
 8009f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009f58:	4b2a      	ldr	r3, [pc, #168]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5c:	0a5b      	lsrs	r3, r3, #9
 8009f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f7e:	ee17 2a90 	vmov	r2, s15
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009f86:	4b1f      	ldr	r3, [pc, #124]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8a:	0c1b      	lsrs	r3, r3, #16
 8009f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f90:	ee07 3a90 	vmov	s15, r3
 8009f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fac:	ee17 2a90 	vmov	r2, s15
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009fb4:	4b13      	ldr	r3, [pc, #76]	; (800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	0e1b      	lsrs	r3, r3, #24
 8009fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fbe:	ee07 3a90 	vmov	s15, r3
 8009fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fce:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fda:	ee17 2a90 	vmov	r2, s15
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009fe2:	e008      	b.n	8009ff6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	609a      	str	r2, [r3, #8]
}
 8009ff6:	bf00      	nop
 8009ff8:	3724      	adds	r7, #36	; 0x24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	58024400 	.word	0x58024400
 800a008:	03d09000 	.word	0x03d09000
 800a00c:	46000000 	.word	0x46000000
 800a010:	4c742400 	.word	0x4c742400
 800a014:	4a742400 	.word	0x4a742400
 800a018:	4bbebc20 	.word	0x4bbebc20

0800a01c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b089      	sub	sp, #36	; 0x24
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a024:	4ba1      	ldr	r3, [pc, #644]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a028:	f003 0303 	and.w	r3, r3, #3
 800a02c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a02e:	4b9f      	ldr	r3, [pc, #636]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a032:	0d1b      	lsrs	r3, r3, #20
 800a034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a038:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a03a:	4b9c      	ldr	r3, [pc, #624]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03e:	0a1b      	lsrs	r3, r3, #8
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a046:	4b99      	ldr	r3, [pc, #612]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04a:	08db      	lsrs	r3, r3, #3
 800a04c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	fb02 f303 	mul.w	r3, r2, r3
 800a056:	ee07 3a90 	vmov	s15, r3
 800a05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 8111 	beq.w	800a28c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	f000 8083 	beq.w	800a178 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	2b02      	cmp	r3, #2
 800a076:	f200 80a1 	bhi.w	800a1bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d056      	beq.n	800a134 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a086:	e099      	b.n	800a1bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a088:	4b88      	ldr	r3, [pc, #544]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 0320 	and.w	r3, r3, #32
 800a090:	2b00      	cmp	r3, #0
 800a092:	d02d      	beq.n	800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a094:	4b85      	ldr	r3, [pc, #532]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	08db      	lsrs	r3, r3, #3
 800a09a:	f003 0303 	and.w	r3, r3, #3
 800a09e:	4a84      	ldr	r2, [pc, #528]	; (800a2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a0a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0a4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	ee07 3a90 	vmov	s15, r3
 800a0ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	ee07 3a90 	vmov	s15, r3
 800a0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0be:	4b7b      	ldr	r3, [pc, #492]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a0ee:	e087      	b.n	800a200 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	ee07 3a90 	vmov	s15, r3
 800a0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a102:	4b6a      	ldr	r3, [pc, #424]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a112:	ed97 6a03 	vldr	s12, [r7, #12]
 800a116:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a132:	e065      	b.n	800a200 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a146:	4b59      	ldr	r3, [pc, #356]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14e:	ee07 3a90 	vmov	s15, r3
 800a152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a156:	ed97 6a03 	vldr	s12, [r7, #12]
 800a15a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a15e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a16a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a172:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a176:	e043      	b.n	800a200 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	ee07 3a90 	vmov	s15, r3
 800a17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a182:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a18a:	4b48      	ldr	r3, [pc, #288]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a192:	ee07 3a90 	vmov	s15, r3
 800a196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a19a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a19e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1ba:	e021      	b.n	800a200 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	ee07 3a90 	vmov	s15, r3
 800a1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a1ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ce:	4b37      	ldr	r3, [pc, #220]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d6:	ee07 3a90 	vmov	s15, r3
 800a1da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a200:	4b2a      	ldr	r3, [pc, #168]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a204:	0a5b      	lsrs	r3, r3, #9
 800a206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a20a:	ee07 3a90 	vmov	s15, r3
 800a20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a21a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a21e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a226:	ee17 2a90 	vmov	r2, s15
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a22e:	4b1f      	ldr	r3, [pc, #124]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a232:	0c1b      	lsrs	r3, r3, #16
 800a234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a238:	ee07 3a90 	vmov	s15, r3
 800a23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a244:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a248:	edd7 6a07 	vldr	s13, [r7, #28]
 800a24c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a254:	ee17 2a90 	vmov	r2, s15
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a25c:	4b13      	ldr	r3, [pc, #76]	; (800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a260:	0e1b      	lsrs	r3, r3, #24
 800a262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a26e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a272:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a276:	edd7 6a07 	vldr	s13, [r7, #28]
 800a27a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a27e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a282:	ee17 2a90 	vmov	r2, s15
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a28a:	e008      	b.n	800a29e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	609a      	str	r2, [r3, #8]
}
 800a29e:	bf00      	nop
 800a2a0:	3724      	adds	r7, #36	; 0x24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	58024400 	.word	0x58024400
 800a2b0:	03d09000 	.word	0x03d09000
 800a2b4:	46000000 	.word	0x46000000
 800a2b8:	4c742400 	.word	0x4c742400
 800a2bc:	4a742400 	.word	0x4a742400
 800a2c0:	4bbebc20 	.word	0x4bbebc20

0800a2c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2d2:	4b53      	ldr	r3, [pc, #332]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d101      	bne.n	800a2e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e099      	b.n	800a416 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a2e2:	4b4f      	ldr	r3, [pc, #316]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a4e      	ldr	r2, [pc, #312]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a2e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a2ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2ee:	f7fc fd13 	bl	8006d18 <HAL_GetTick>
 800a2f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2f4:	e008      	b.n	800a308 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a2f6:	f7fc fd0f 	bl	8006d18 <HAL_GetTick>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	2b02      	cmp	r3, #2
 800a302:	d901      	bls.n	800a308 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e086      	b.n	800a416 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a308:	4b45      	ldr	r3, [pc, #276]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1f0      	bne.n	800a2f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a314:	4b42      	ldr	r3, [pc, #264]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a318:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	031b      	lsls	r3, r3, #12
 800a322:	493f      	ldr	r1, [pc, #252]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a324:	4313      	orrs	r3, r2
 800a326:	628b      	str	r3, [r1, #40]	; 0x28
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	3b01      	subs	r3, #1
 800a338:	025b      	lsls	r3, r3, #9
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	431a      	orrs	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	3b01      	subs	r3, #1
 800a344:	041b      	lsls	r3, r3, #16
 800a346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a34a:	431a      	orrs	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	3b01      	subs	r3, #1
 800a352:	061b      	lsls	r3, r3, #24
 800a354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a358:	4931      	ldr	r1, [pc, #196]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a35a:	4313      	orrs	r3, r2
 800a35c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a35e:	4b30      	ldr	r3, [pc, #192]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a362:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	492d      	ldr	r1, [pc, #180]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a370:	4b2b      	ldr	r3, [pc, #172]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a374:	f023 0220 	bic.w	r2, r3, #32
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	4928      	ldr	r1, [pc, #160]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a382:	4b27      	ldr	r3, [pc, #156]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a386:	4a26      	ldr	r2, [pc, #152]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a388:	f023 0310 	bic.w	r3, r3, #16
 800a38c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a38e:	4b24      	ldr	r3, [pc, #144]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a392:	4b24      	ldr	r3, [pc, #144]	; (800a424 <RCCEx_PLL2_Config+0x160>)
 800a394:	4013      	ands	r3, r2
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	69d2      	ldr	r2, [r2, #28]
 800a39a:	00d2      	lsls	r2, r2, #3
 800a39c:	4920      	ldr	r1, [pc, #128]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a3a2:	4b1f      	ldr	r3, [pc, #124]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a6:	4a1e      	ldr	r2, [pc, #120]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a3a8:	f043 0310 	orr.w	r3, r3, #16
 800a3ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d106      	bne.n	800a3c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a3b4:	4b1a      	ldr	r3, [pc, #104]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b8:	4a19      	ldr	r2, [pc, #100]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a3ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3c0:	e00f      	b.n	800a3e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d106      	bne.n	800a3d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a3c8:	4b15      	ldr	r3, [pc, #84]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3cc:	4a14      	ldr	r2, [pc, #80]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a3ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3d4:	e005      	b.n	800a3e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a3d6:	4b12      	ldr	r3, [pc, #72]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3da:	4a11      	ldr	r2, [pc, #68]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a3dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a3e2:	4b0f      	ldr	r3, [pc, #60]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a0e      	ldr	r2, [pc, #56]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a3e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3ee:	f7fc fc93 	bl	8006d18 <HAL_GetTick>
 800a3f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3f4:	e008      	b.n	800a408 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a3f6:	f7fc fc8f 	bl	8006d18 <HAL_GetTick>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	2b02      	cmp	r3, #2
 800a402:	d901      	bls.n	800a408 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e006      	b.n	800a416 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a408:	4b05      	ldr	r3, [pc, #20]	; (800a420 <RCCEx_PLL2_Config+0x15c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d0f0      	beq.n	800a3f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a414:	7bfb      	ldrb	r3, [r7, #15]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	58024400 	.word	0x58024400
 800a424:	ffff0007 	.word	0xffff0007

0800a428 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a436:	4b53      	ldr	r3, [pc, #332]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43a:	f003 0303 	and.w	r3, r3, #3
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d101      	bne.n	800a446 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e099      	b.n	800a57a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a446:	4b4f      	ldr	r3, [pc, #316]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a4e      	ldr	r2, [pc, #312]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a44c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a452:	f7fc fc61 	bl	8006d18 <HAL_GetTick>
 800a456:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a458:	e008      	b.n	800a46c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a45a:	f7fc fc5d 	bl	8006d18 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	2b02      	cmp	r3, #2
 800a466:	d901      	bls.n	800a46c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	e086      	b.n	800a57a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a46c:	4b45      	ldr	r3, [pc, #276]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1f0      	bne.n	800a45a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a478:	4b42      	ldr	r3, [pc, #264]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	051b      	lsls	r3, r3, #20
 800a486:	493f      	ldr	r1, [pc, #252]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a488:	4313      	orrs	r3, r2
 800a48a:	628b      	str	r3, [r1, #40]	; 0x28
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	3b01      	subs	r3, #1
 800a492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	025b      	lsls	r3, r3, #9
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	041b      	lsls	r3, r3, #16
 800a4aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	061b      	lsls	r3, r3, #24
 800a4b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4bc:	4931      	ldr	r1, [pc, #196]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a4c2:	4b30      	ldr	r3, [pc, #192]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	492d      	ldr	r1, [pc, #180]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a4d4:	4b2b      	ldr	r3, [pc, #172]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	4928      	ldr	r1, [pc, #160]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a4e6:	4b27      	ldr	r3, [pc, #156]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ea:	4a26      	ldr	r2, [pc, #152]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a4ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4f2:	4b24      	ldr	r3, [pc, #144]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a4f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4f6:	4b24      	ldr	r3, [pc, #144]	; (800a588 <RCCEx_PLL3_Config+0x160>)
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	69d2      	ldr	r2, [r2, #28]
 800a4fe:	00d2      	lsls	r2, r2, #3
 800a500:	4920      	ldr	r1, [pc, #128]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a502:	4313      	orrs	r3, r2
 800a504:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a506:	4b1f      	ldr	r3, [pc, #124]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	4a1e      	ldr	r2, [pc, #120]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a50c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d106      	bne.n	800a526 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a518:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	4a19      	ldr	r2, [pc, #100]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a51e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a522:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a524:	e00f      	b.n	800a546 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d106      	bne.n	800a53a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a52c:	4b15      	ldr	r3, [pc, #84]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	4a14      	ldr	r2, [pc, #80]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a532:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a536:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a538:	e005      	b.n	800a546 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a53a:	4b12      	ldr	r3, [pc, #72]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53e:	4a11      	ldr	r2, [pc, #68]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a544:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a546:	4b0f      	ldr	r3, [pc, #60]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a0e      	ldr	r2, [pc, #56]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a54c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a552:	f7fc fbe1 	bl	8006d18 <HAL_GetTick>
 800a556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a558:	e008      	b.n	800a56c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a55a:	f7fc fbdd 	bl	8006d18 <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	2b02      	cmp	r3, #2
 800a566:	d901      	bls.n	800a56c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a568:	2303      	movs	r3, #3
 800a56a:	e006      	b.n	800a57a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a56c:	4b05      	ldr	r3, [pc, #20]	; (800a584 <RCCEx_PLL3_Config+0x15c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d0f0      	beq.n	800a55a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a578:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	58024400 	.word	0x58024400
 800a588:	ffff0007 	.word	0xffff0007

0800a58c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e049      	b.n	800a632 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7fa f82a 	bl	800460c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	f001 f9d0 	bl	800b970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
	...

0800a63c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d001      	beq.n	800a654 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e04c      	b.n	800a6ee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2202      	movs	r2, #2
 800a658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a26      	ldr	r2, [pc, #152]	; (800a6fc <HAL_TIM_Base_Start+0xc0>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d022      	beq.n	800a6ac <HAL_TIM_Base_Start+0x70>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a66e:	d01d      	beq.n	800a6ac <HAL_TIM_Base_Start+0x70>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a22      	ldr	r2, [pc, #136]	; (800a700 <HAL_TIM_Base_Start+0xc4>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d018      	beq.n	800a6ac <HAL_TIM_Base_Start+0x70>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a21      	ldr	r2, [pc, #132]	; (800a704 <HAL_TIM_Base_Start+0xc8>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d013      	beq.n	800a6ac <HAL_TIM_Base_Start+0x70>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a1f      	ldr	r2, [pc, #124]	; (800a708 <HAL_TIM_Base_Start+0xcc>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d00e      	beq.n	800a6ac <HAL_TIM_Base_Start+0x70>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a1e      	ldr	r2, [pc, #120]	; (800a70c <HAL_TIM_Base_Start+0xd0>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d009      	beq.n	800a6ac <HAL_TIM_Base_Start+0x70>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a1c      	ldr	r2, [pc, #112]	; (800a710 <HAL_TIM_Base_Start+0xd4>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d004      	beq.n	800a6ac <HAL_TIM_Base_Start+0x70>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a1b      	ldr	r2, [pc, #108]	; (800a714 <HAL_TIM_Base_Start+0xd8>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d115      	bne.n	800a6d8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689a      	ldr	r2, [r3, #8]
 800a6b2:	4b19      	ldr	r3, [pc, #100]	; (800a718 <HAL_TIM_Base_Start+0xdc>)
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2b06      	cmp	r3, #6
 800a6bc:	d015      	beq.n	800a6ea <HAL_TIM_Base_Start+0xae>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6c4:	d011      	beq.n	800a6ea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f042 0201 	orr.w	r2, r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d6:	e008      	b.n	800a6ea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f042 0201 	orr.w	r2, r2, #1
 800a6e6:	601a      	str	r2, [r3, #0]
 800a6e8:	e000      	b.n	800a6ec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	40010000 	.word	0x40010000
 800a700:	40000400 	.word	0x40000400
 800a704:	40000800 	.word	0x40000800
 800a708:	40000c00 	.word	0x40000c00
 800a70c:	40010400 	.word	0x40010400
 800a710:	40001800 	.word	0x40001800
 800a714:	40014000 	.word	0x40014000
 800a718:	00010007 	.word	0x00010007

0800a71c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6a1a      	ldr	r2, [r3, #32]
 800a72a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a72e:	4013      	ands	r3, r2
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10f      	bne.n	800a754 <HAL_TIM_Base_Stop+0x38>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6a1a      	ldr	r2, [r3, #32]
 800a73a:	f240 4344 	movw	r3, #1092	; 0x444
 800a73e:	4013      	ands	r3, r2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d107      	bne.n	800a754 <HAL_TIM_Base_Stop+0x38>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f022 0201 	bic.w	r2, r2, #1
 800a752:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
	...

0800a76c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d001      	beq.n	800a784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e054      	b.n	800a82e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68da      	ldr	r2, [r3, #12]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f042 0201 	orr.w	r2, r2, #1
 800a79a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a26      	ldr	r2, [pc, #152]	; (800a83c <HAL_TIM_Base_Start_IT+0xd0>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d022      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ae:	d01d      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a22      	ldr	r2, [pc, #136]	; (800a840 <HAL_TIM_Base_Start_IT+0xd4>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d018      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a21      	ldr	r2, [pc, #132]	; (800a844 <HAL_TIM_Base_Start_IT+0xd8>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d013      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a1f      	ldr	r2, [pc, #124]	; (800a848 <HAL_TIM_Base_Start_IT+0xdc>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d00e      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a1e      	ldr	r2, [pc, #120]	; (800a84c <HAL_TIM_Base_Start_IT+0xe0>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d009      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a1c      	ldr	r2, [pc, #112]	; (800a850 <HAL_TIM_Base_Start_IT+0xe4>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d004      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a1b      	ldr	r2, [pc, #108]	; (800a854 <HAL_TIM_Base_Start_IT+0xe8>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d115      	bne.n	800a818 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	4b19      	ldr	r3, [pc, #100]	; (800a858 <HAL_TIM_Base_Start_IT+0xec>)
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b06      	cmp	r3, #6
 800a7fc:	d015      	beq.n	800a82a <HAL_TIM_Base_Start_IT+0xbe>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a804:	d011      	beq.n	800a82a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f042 0201 	orr.w	r2, r2, #1
 800a814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a816:	e008      	b.n	800a82a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f042 0201 	orr.w	r2, r2, #1
 800a826:	601a      	str	r2, [r3, #0]
 800a828:	e000      	b.n	800a82c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a82a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	40010000 	.word	0x40010000
 800a840:	40000400 	.word	0x40000400
 800a844:	40000800 	.word	0x40000800
 800a848:	40000c00 	.word	0x40000c00
 800a84c:	40010400 	.word	0x40010400
 800a850:	40001800 	.word	0x40001800
 800a854:	40014000 	.word	0x40014000
 800a858:	00010007 	.word	0x00010007

0800a85c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f022 0201 	bic.w	r2, r2, #1
 800a872:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6a1a      	ldr	r2, [r3, #32]
 800a87a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a87e:	4013      	ands	r3, r2
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10f      	bne.n	800a8a4 <HAL_TIM_Base_Stop_IT+0x48>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6a1a      	ldr	r2, [r3, #32]
 800a88a:	f240 4344 	movw	r3, #1092	; 0x444
 800a88e:	4013      	ands	r3, r2
 800a890:	2b00      	cmp	r3, #0
 800a892:	d107      	bne.n	800a8a4 <HAL_TIM_Base_Stop_IT+0x48>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f022 0201 	bic.w	r2, r2, #1
 800a8a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d101      	bne.n	800a8cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e049      	b.n	800a960 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d106      	bne.n	800a8e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f841 	bl	800a968 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	f001 f839 	bl	800b970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2201      	movs	r2, #1
 800a922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d109      	bne.n	800a9a0 <HAL_TIM_PWM_Start+0x24>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b01      	cmp	r3, #1
 800a996:	bf14      	ite	ne
 800a998:	2301      	movne	r3, #1
 800a99a:	2300      	moveq	r3, #0
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	e03c      	b.n	800aa1a <HAL_TIM_PWM_Start+0x9e>
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b04      	cmp	r3, #4
 800a9a4:	d109      	bne.n	800a9ba <HAL_TIM_PWM_Start+0x3e>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	bf14      	ite	ne
 800a9b2:	2301      	movne	r3, #1
 800a9b4:	2300      	moveq	r3, #0
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	e02f      	b.n	800aa1a <HAL_TIM_PWM_Start+0x9e>
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b08      	cmp	r3, #8
 800a9be:	d109      	bne.n	800a9d4 <HAL_TIM_PWM_Start+0x58>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	bf14      	ite	ne
 800a9cc:	2301      	movne	r3, #1
 800a9ce:	2300      	moveq	r3, #0
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	e022      	b.n	800aa1a <HAL_TIM_PWM_Start+0x9e>
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2b0c      	cmp	r3, #12
 800a9d8:	d109      	bne.n	800a9ee <HAL_TIM_PWM_Start+0x72>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	bf14      	ite	ne
 800a9e6:	2301      	movne	r3, #1
 800a9e8:	2300      	moveq	r3, #0
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	e015      	b.n	800aa1a <HAL_TIM_PWM_Start+0x9e>
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2b10      	cmp	r3, #16
 800a9f2:	d109      	bne.n	800aa08 <HAL_TIM_PWM_Start+0x8c>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	bf14      	ite	ne
 800aa00:	2301      	movne	r3, #1
 800aa02:	2300      	moveq	r3, #0
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	e008      	b.n	800aa1a <HAL_TIM_PWM_Start+0x9e>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	bf14      	ite	ne
 800aa14:	2301      	movne	r3, #1
 800aa16:	2300      	moveq	r3, #0
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e0a1      	b.n	800ab66 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d104      	bne.n	800aa32 <HAL_TIM_PWM_Start+0xb6>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa30:	e023      	b.n	800aa7a <HAL_TIM_PWM_Start+0xfe>
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	d104      	bne.n	800aa42 <HAL_TIM_PWM_Start+0xc6>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa40:	e01b      	b.n	800aa7a <HAL_TIM_PWM_Start+0xfe>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2b08      	cmp	r3, #8
 800aa46:	d104      	bne.n	800aa52 <HAL_TIM_PWM_Start+0xd6>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2202      	movs	r2, #2
 800aa4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa50:	e013      	b.n	800aa7a <HAL_TIM_PWM_Start+0xfe>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b0c      	cmp	r3, #12
 800aa56:	d104      	bne.n	800aa62 <HAL_TIM_PWM_Start+0xe6>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa60:	e00b      	b.n	800aa7a <HAL_TIM_PWM_Start+0xfe>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2b10      	cmp	r3, #16
 800aa66:	d104      	bne.n	800aa72 <HAL_TIM_PWM_Start+0xf6>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa70:	e003      	b.n	800aa7a <HAL_TIM_PWM_Start+0xfe>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2202      	movs	r2, #2
 800aa76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f001 fcac 	bl	800c3e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a38      	ldr	r2, [pc, #224]	; (800ab70 <HAL_TIM_PWM_Start+0x1f4>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d013      	beq.n	800aaba <HAL_TIM_PWM_Start+0x13e>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a37      	ldr	r2, [pc, #220]	; (800ab74 <HAL_TIM_PWM_Start+0x1f8>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d00e      	beq.n	800aaba <HAL_TIM_PWM_Start+0x13e>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a35      	ldr	r2, [pc, #212]	; (800ab78 <HAL_TIM_PWM_Start+0x1fc>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d009      	beq.n	800aaba <HAL_TIM_PWM_Start+0x13e>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a34      	ldr	r2, [pc, #208]	; (800ab7c <HAL_TIM_PWM_Start+0x200>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d004      	beq.n	800aaba <HAL_TIM_PWM_Start+0x13e>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a32      	ldr	r2, [pc, #200]	; (800ab80 <HAL_TIM_PWM_Start+0x204>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d101      	bne.n	800aabe <HAL_TIM_PWM_Start+0x142>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e000      	b.n	800aac0 <HAL_TIM_PWM_Start+0x144>
 800aabe:	2300      	movs	r3, #0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d007      	beq.n	800aad4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aad2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a25      	ldr	r2, [pc, #148]	; (800ab70 <HAL_TIM_PWM_Start+0x1f4>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d022      	beq.n	800ab24 <HAL_TIM_PWM_Start+0x1a8>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae6:	d01d      	beq.n	800ab24 <HAL_TIM_PWM_Start+0x1a8>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a25      	ldr	r2, [pc, #148]	; (800ab84 <HAL_TIM_PWM_Start+0x208>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d018      	beq.n	800ab24 <HAL_TIM_PWM_Start+0x1a8>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a24      	ldr	r2, [pc, #144]	; (800ab88 <HAL_TIM_PWM_Start+0x20c>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d013      	beq.n	800ab24 <HAL_TIM_PWM_Start+0x1a8>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a22      	ldr	r2, [pc, #136]	; (800ab8c <HAL_TIM_PWM_Start+0x210>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d00e      	beq.n	800ab24 <HAL_TIM_PWM_Start+0x1a8>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a1a      	ldr	r2, [pc, #104]	; (800ab74 <HAL_TIM_PWM_Start+0x1f8>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d009      	beq.n	800ab24 <HAL_TIM_PWM_Start+0x1a8>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a1e      	ldr	r2, [pc, #120]	; (800ab90 <HAL_TIM_PWM_Start+0x214>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d004      	beq.n	800ab24 <HAL_TIM_PWM_Start+0x1a8>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a16      	ldr	r2, [pc, #88]	; (800ab78 <HAL_TIM_PWM_Start+0x1fc>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d115      	bne.n	800ab50 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	689a      	ldr	r2, [r3, #8]
 800ab2a:	4b1a      	ldr	r3, [pc, #104]	; (800ab94 <HAL_TIM_PWM_Start+0x218>)
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2b06      	cmp	r3, #6
 800ab34:	d015      	beq.n	800ab62 <HAL_TIM_PWM_Start+0x1e6>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab3c:	d011      	beq.n	800ab62 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f042 0201 	orr.w	r2, r2, #1
 800ab4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab4e:	e008      	b.n	800ab62 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f042 0201 	orr.w	r2, r2, #1
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	e000      	b.n	800ab64 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	40010000 	.word	0x40010000
 800ab74:	40010400 	.word	0x40010400
 800ab78:	40014000 	.word	0x40014000
 800ab7c:	40014400 	.word	0x40014400
 800ab80:	40014800 	.word	0x40014800
 800ab84:	40000400 	.word	0x40000400
 800ab88:	40000800 	.word	0x40000800
 800ab8c:	40000c00 	.word	0x40000c00
 800ab90:	40001800 	.word	0x40001800
 800ab94:	00010007 	.word	0x00010007

0800ab98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2200      	movs	r2, #0
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	4618      	mov	r0, r3
 800abac:	f001 fc18 	bl	800c3e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a3e      	ldr	r2, [pc, #248]	; (800acb0 <HAL_TIM_PWM_Stop+0x118>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d013      	beq.n	800abe2 <HAL_TIM_PWM_Stop+0x4a>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a3d      	ldr	r2, [pc, #244]	; (800acb4 <HAL_TIM_PWM_Stop+0x11c>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d00e      	beq.n	800abe2 <HAL_TIM_PWM_Stop+0x4a>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a3b      	ldr	r2, [pc, #236]	; (800acb8 <HAL_TIM_PWM_Stop+0x120>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d009      	beq.n	800abe2 <HAL_TIM_PWM_Stop+0x4a>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a3a      	ldr	r2, [pc, #232]	; (800acbc <HAL_TIM_PWM_Stop+0x124>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d004      	beq.n	800abe2 <HAL_TIM_PWM_Stop+0x4a>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a38      	ldr	r2, [pc, #224]	; (800acc0 <HAL_TIM_PWM_Stop+0x128>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d101      	bne.n	800abe6 <HAL_TIM_PWM_Stop+0x4e>
 800abe2:	2301      	movs	r3, #1
 800abe4:	e000      	b.n	800abe8 <HAL_TIM_PWM_Stop+0x50>
 800abe6:	2300      	movs	r3, #0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d017      	beq.n	800ac1c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6a1a      	ldr	r2, [r3, #32]
 800abf2:	f241 1311 	movw	r3, #4369	; 0x1111
 800abf6:	4013      	ands	r3, r2
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10f      	bne.n	800ac1c <HAL_TIM_PWM_Stop+0x84>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6a1a      	ldr	r2, [r3, #32]
 800ac02:	f240 4344 	movw	r3, #1092	; 0x444
 800ac06:	4013      	ands	r3, r2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d107      	bne.n	800ac1c <HAL_TIM_PWM_Stop+0x84>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6a1a      	ldr	r2, [r3, #32]
 800ac22:	f241 1311 	movw	r3, #4369	; 0x1111
 800ac26:	4013      	ands	r3, r2
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10f      	bne.n	800ac4c <HAL_TIM_PWM_Stop+0xb4>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6a1a      	ldr	r2, [r3, #32]
 800ac32:	f240 4344 	movw	r3, #1092	; 0x444
 800ac36:	4013      	ands	r3, r2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d107      	bne.n	800ac4c <HAL_TIM_PWM_Stop+0xb4>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f022 0201 	bic.w	r2, r2, #1
 800ac4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d104      	bne.n	800ac5c <HAL_TIM_PWM_Stop+0xc4>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac5a:	e023      	b.n	800aca4 <HAL_TIM_PWM_Stop+0x10c>
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	2b04      	cmp	r3, #4
 800ac60:	d104      	bne.n	800ac6c <HAL_TIM_PWM_Stop+0xd4>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac6a:	e01b      	b.n	800aca4 <HAL_TIM_PWM_Stop+0x10c>
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	2b08      	cmp	r3, #8
 800ac70:	d104      	bne.n	800ac7c <HAL_TIM_PWM_Stop+0xe4>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac7a:	e013      	b.n	800aca4 <HAL_TIM_PWM_Stop+0x10c>
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2b0c      	cmp	r3, #12
 800ac80:	d104      	bne.n	800ac8c <HAL_TIM_PWM_Stop+0xf4>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac8a:	e00b      	b.n	800aca4 <HAL_TIM_PWM_Stop+0x10c>
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	2b10      	cmp	r3, #16
 800ac90:	d104      	bne.n	800ac9c <HAL_TIM_PWM_Stop+0x104>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac9a:	e003      	b.n	800aca4 <HAL_TIM_PWM_Stop+0x10c>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	40010000 	.word	0x40010000
 800acb4:	40010400 	.word	0x40010400
 800acb8:	40014000 	.word	0x40014000
 800acbc:	40014400 	.word	0x40014400
 800acc0:	40014800 	.word	0x40014800

0800acc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e049      	b.n	800ad6a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f841 	bl	800ad72 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2202      	movs	r2, #2
 800acf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3304      	adds	r3, #4
 800ad00:	4619      	mov	r1, r3
 800ad02:	4610      	mov	r0, r2
 800ad04:	f000 fe34 	bl	800b970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3708      	adds	r7, #8
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ad72:	b480      	push	{r7}
 800ad74:	b083      	sub	sp, #12
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ad7a:	bf00      	nop
 800ad7c:	370c      	adds	r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
	...

0800ad88 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d104      	bne.n	800ada6 <HAL_TIM_IC_Start_IT+0x1e>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	e023      	b.n	800adee <HAL_TIM_IC_Start_IT+0x66>
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b04      	cmp	r3, #4
 800adaa:	d104      	bne.n	800adb6 <HAL_TIM_IC_Start_IT+0x2e>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	e01b      	b.n	800adee <HAL_TIM_IC_Start_IT+0x66>
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b08      	cmp	r3, #8
 800adba:	d104      	bne.n	800adc6 <HAL_TIM_IC_Start_IT+0x3e>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	e013      	b.n	800adee <HAL_TIM_IC_Start_IT+0x66>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	2b0c      	cmp	r3, #12
 800adca:	d104      	bne.n	800add6 <HAL_TIM_IC_Start_IT+0x4e>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800add2:	b2db      	uxtb	r3, r3
 800add4:	e00b      	b.n	800adee <HAL_TIM_IC_Start_IT+0x66>
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	2b10      	cmp	r3, #16
 800adda:	d104      	bne.n	800ade6 <HAL_TIM_IC_Start_IT+0x5e>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	e003      	b.n	800adee <HAL_TIM_IC_Start_IT+0x66>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800adec:	b2db      	uxtb	r3, r3
 800adee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d104      	bne.n	800ae00 <HAL_TIM_IC_Start_IT+0x78>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	e013      	b.n	800ae28 <HAL_TIM_IC_Start_IT+0xa0>
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	2b04      	cmp	r3, #4
 800ae04:	d104      	bne.n	800ae10 <HAL_TIM_IC_Start_IT+0x88>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	e00b      	b.n	800ae28 <HAL_TIM_IC_Start_IT+0xa0>
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	2b08      	cmp	r3, #8
 800ae14:	d104      	bne.n	800ae20 <HAL_TIM_IC_Start_IT+0x98>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	e003      	b.n	800ae28 <HAL_TIM_IC_Start_IT+0xa0>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae2a:	7bbb      	ldrb	r3, [r7, #14]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d102      	bne.n	800ae36 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae30:	7b7b      	ldrb	r3, [r7, #13]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d001      	beq.n	800ae3a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e0e2      	b.n	800b000 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d104      	bne.n	800ae4a <HAL_TIM_IC_Start_IT+0xc2>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae48:	e023      	b.n	800ae92 <HAL_TIM_IC_Start_IT+0x10a>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b04      	cmp	r3, #4
 800ae4e:	d104      	bne.n	800ae5a <HAL_TIM_IC_Start_IT+0xd2>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2202      	movs	r2, #2
 800ae54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae58:	e01b      	b.n	800ae92 <HAL_TIM_IC_Start_IT+0x10a>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b08      	cmp	r3, #8
 800ae5e:	d104      	bne.n	800ae6a <HAL_TIM_IC_Start_IT+0xe2>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2202      	movs	r2, #2
 800ae64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae68:	e013      	b.n	800ae92 <HAL_TIM_IC_Start_IT+0x10a>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b0c      	cmp	r3, #12
 800ae6e:	d104      	bne.n	800ae7a <HAL_TIM_IC_Start_IT+0xf2>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2202      	movs	r2, #2
 800ae74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae78:	e00b      	b.n	800ae92 <HAL_TIM_IC_Start_IT+0x10a>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b10      	cmp	r3, #16
 800ae7e:	d104      	bne.n	800ae8a <HAL_TIM_IC_Start_IT+0x102>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2202      	movs	r2, #2
 800ae84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae88:	e003      	b.n	800ae92 <HAL_TIM_IC_Start_IT+0x10a>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d104      	bne.n	800aea2 <HAL_TIM_IC_Start_IT+0x11a>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aea0:	e013      	b.n	800aeca <HAL_TIM_IC_Start_IT+0x142>
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2b04      	cmp	r3, #4
 800aea6:	d104      	bne.n	800aeb2 <HAL_TIM_IC_Start_IT+0x12a>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2202      	movs	r2, #2
 800aeac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeb0:	e00b      	b.n	800aeca <HAL_TIM_IC_Start_IT+0x142>
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b08      	cmp	r3, #8
 800aeb6:	d104      	bne.n	800aec2 <HAL_TIM_IC_Start_IT+0x13a>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aec0:	e003      	b.n	800aeca <HAL_TIM_IC_Start_IT+0x142>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2202      	movs	r2, #2
 800aec6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b0c      	cmp	r3, #12
 800aece:	d841      	bhi.n	800af54 <HAL_TIM_IC_Start_IT+0x1cc>
 800aed0:	a201      	add	r2, pc, #4	; (adr r2, 800aed8 <HAL_TIM_IC_Start_IT+0x150>)
 800aed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed6:	bf00      	nop
 800aed8:	0800af0d 	.word	0x0800af0d
 800aedc:	0800af55 	.word	0x0800af55
 800aee0:	0800af55 	.word	0x0800af55
 800aee4:	0800af55 	.word	0x0800af55
 800aee8:	0800af1f 	.word	0x0800af1f
 800aeec:	0800af55 	.word	0x0800af55
 800aef0:	0800af55 	.word	0x0800af55
 800aef4:	0800af55 	.word	0x0800af55
 800aef8:	0800af31 	.word	0x0800af31
 800aefc:	0800af55 	.word	0x0800af55
 800af00:	0800af55 	.word	0x0800af55
 800af04:	0800af55 	.word	0x0800af55
 800af08:	0800af43 	.word	0x0800af43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68da      	ldr	r2, [r3, #12]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f042 0202 	orr.w	r2, r2, #2
 800af1a:	60da      	str	r2, [r3, #12]
      break;
 800af1c:	e01d      	b.n	800af5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f042 0204 	orr.w	r2, r2, #4
 800af2c:	60da      	str	r2, [r3, #12]
      break;
 800af2e:	e014      	b.n	800af5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68da      	ldr	r2, [r3, #12]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f042 0208 	orr.w	r2, r2, #8
 800af3e:	60da      	str	r2, [r3, #12]
      break;
 800af40:	e00b      	b.n	800af5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68da      	ldr	r2, [r3, #12]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f042 0210 	orr.w	r2, r2, #16
 800af50:	60da      	str	r2, [r3, #12]
      break;
 800af52:	e002      	b.n	800af5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	73fb      	strb	r3, [r7, #15]
      break;
 800af58:	bf00      	nop
  }

  if (status == HAL_OK)
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d14e      	bne.n	800affe <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2201      	movs	r2, #1
 800af66:	6839      	ldr	r1, [r7, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	f001 fa39 	bl	800c3e0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a25      	ldr	r2, [pc, #148]	; (800b008 <HAL_TIM_IC_Start_IT+0x280>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d022      	beq.n	800afbe <HAL_TIM_IC_Start_IT+0x236>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af80:	d01d      	beq.n	800afbe <HAL_TIM_IC_Start_IT+0x236>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a21      	ldr	r2, [pc, #132]	; (800b00c <HAL_TIM_IC_Start_IT+0x284>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d018      	beq.n	800afbe <HAL_TIM_IC_Start_IT+0x236>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a1f      	ldr	r2, [pc, #124]	; (800b010 <HAL_TIM_IC_Start_IT+0x288>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d013      	beq.n	800afbe <HAL_TIM_IC_Start_IT+0x236>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a1e      	ldr	r2, [pc, #120]	; (800b014 <HAL_TIM_IC_Start_IT+0x28c>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d00e      	beq.n	800afbe <HAL_TIM_IC_Start_IT+0x236>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a1c      	ldr	r2, [pc, #112]	; (800b018 <HAL_TIM_IC_Start_IT+0x290>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d009      	beq.n	800afbe <HAL_TIM_IC_Start_IT+0x236>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a1b      	ldr	r2, [pc, #108]	; (800b01c <HAL_TIM_IC_Start_IT+0x294>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d004      	beq.n	800afbe <HAL_TIM_IC_Start_IT+0x236>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a19      	ldr	r2, [pc, #100]	; (800b020 <HAL_TIM_IC_Start_IT+0x298>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d115      	bne.n	800afea <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689a      	ldr	r2, [r3, #8]
 800afc4:	4b17      	ldr	r3, [pc, #92]	; (800b024 <HAL_TIM_IC_Start_IT+0x29c>)
 800afc6:	4013      	ands	r3, r2
 800afc8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b06      	cmp	r3, #6
 800afce:	d015      	beq.n	800affc <HAL_TIM_IC_Start_IT+0x274>
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afd6:	d011      	beq.n	800affc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f042 0201 	orr.w	r2, r2, #1
 800afe6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afe8:	e008      	b.n	800affc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f042 0201 	orr.w	r2, r2, #1
 800aff8:	601a      	str	r2, [r3, #0]
 800affa:	e000      	b.n	800affe <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800affc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800affe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	40010000 	.word	0x40010000
 800b00c:	40000400 	.word	0x40000400
 800b010:	40000800 	.word	0x40000800
 800b014:	40000c00 	.word	0x40000c00
 800b018:	40010400 	.word	0x40010400
 800b01c:	40001800 	.word	0x40001800
 800b020:	40014000 	.word	0x40014000
 800b024:	00010007 	.word	0x00010007

0800b028 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b0c      	cmp	r3, #12
 800b03a:	d841      	bhi.n	800b0c0 <HAL_TIM_IC_Stop_IT+0x98>
 800b03c:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <HAL_TIM_IC_Stop_IT+0x1c>)
 800b03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b042:	bf00      	nop
 800b044:	0800b079 	.word	0x0800b079
 800b048:	0800b0c1 	.word	0x0800b0c1
 800b04c:	0800b0c1 	.word	0x0800b0c1
 800b050:	0800b0c1 	.word	0x0800b0c1
 800b054:	0800b08b 	.word	0x0800b08b
 800b058:	0800b0c1 	.word	0x0800b0c1
 800b05c:	0800b0c1 	.word	0x0800b0c1
 800b060:	0800b0c1 	.word	0x0800b0c1
 800b064:	0800b09d 	.word	0x0800b09d
 800b068:	0800b0c1 	.word	0x0800b0c1
 800b06c:	0800b0c1 	.word	0x0800b0c1
 800b070:	0800b0c1 	.word	0x0800b0c1
 800b074:	0800b0af 	.word	0x0800b0af
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68da      	ldr	r2, [r3, #12]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f022 0202 	bic.w	r2, r2, #2
 800b086:	60da      	str	r2, [r3, #12]
      break;
 800b088:	e01d      	b.n	800b0c6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68da      	ldr	r2, [r3, #12]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f022 0204 	bic.w	r2, r2, #4
 800b098:	60da      	str	r2, [r3, #12]
      break;
 800b09a:	e014      	b.n	800b0c6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68da      	ldr	r2, [r3, #12]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f022 0208 	bic.w	r2, r2, #8
 800b0aa:	60da      	str	r2, [r3, #12]
      break;
 800b0ac:	e00b      	b.n	800b0c6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68da      	ldr	r2, [r3, #12]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f022 0210 	bic.w	r2, r2, #16
 800b0bc:	60da      	str	r2, [r3, #12]
      break;
 800b0be:	e002      	b.n	800b0c6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c4:	bf00      	nop
  }

  if (status == HAL_OK)
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d166      	bne.n	800b19a <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f001 f983 	bl	800c3e0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	6a1a      	ldr	r2, [r3, #32]
 800b0e0:	f241 1311 	movw	r3, #4369	; 0x1111
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10f      	bne.n	800b10a <HAL_TIM_IC_Stop_IT+0xe2>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6a1a      	ldr	r2, [r3, #32]
 800b0f0:	f240 4344 	movw	r3, #1092	; 0x444
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d107      	bne.n	800b10a <HAL_TIM_IC_Stop_IT+0xe2>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f022 0201 	bic.w	r2, r2, #1
 800b108:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d104      	bne.n	800b11a <HAL_TIM_IC_Stop_IT+0xf2>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b118:	e023      	b.n	800b162 <HAL_TIM_IC_Stop_IT+0x13a>
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d104      	bne.n	800b12a <HAL_TIM_IC_Stop_IT+0x102>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b128:	e01b      	b.n	800b162 <HAL_TIM_IC_Stop_IT+0x13a>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b08      	cmp	r3, #8
 800b12e:	d104      	bne.n	800b13a <HAL_TIM_IC_Stop_IT+0x112>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b138:	e013      	b.n	800b162 <HAL_TIM_IC_Stop_IT+0x13a>
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2b0c      	cmp	r3, #12
 800b13e:	d104      	bne.n	800b14a <HAL_TIM_IC_Stop_IT+0x122>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b148:	e00b      	b.n	800b162 <HAL_TIM_IC_Stop_IT+0x13a>
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b10      	cmp	r3, #16
 800b14e:	d104      	bne.n	800b15a <HAL_TIM_IC_Stop_IT+0x132>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b158:	e003      	b.n	800b162 <HAL_TIM_IC_Stop_IT+0x13a>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d104      	bne.n	800b172 <HAL_TIM_IC_Stop_IT+0x14a>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b170:	e013      	b.n	800b19a <HAL_TIM_IC_Stop_IT+0x172>
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	2b04      	cmp	r3, #4
 800b176:	d104      	bne.n	800b182 <HAL_TIM_IC_Stop_IT+0x15a>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b180:	e00b      	b.n	800b19a <HAL_TIM_IC_Stop_IT+0x172>
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2b08      	cmp	r3, #8
 800b186:	d104      	bne.n	800b192 <HAL_TIM_IC_Stop_IT+0x16a>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b190:	e003      	b.n	800b19a <HAL_TIM_IC_Stop_IT+0x172>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2201      	movs	r2, #1
 800b196:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800b19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d122      	bne.n	800b200 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	f003 0302 	and.w	r3, r3, #2
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d11b      	bne.n	800b200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f06f 0202 	mvn.w	r2, #2
 800b1d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	f003 0303 	and.w	r3, r3, #3
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d003      	beq.n	800b1ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7f7 fee6 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 800b1ec:	e005      	b.n	800b1fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fba0 	bl	800b934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fba7 	bl	800b948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	f003 0304 	and.w	r3, r3, #4
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d122      	bne.n	800b254 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b04      	cmp	r3, #4
 800b21a:	d11b      	bne.n	800b254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f06f 0204 	mvn.w	r2, #4
 800b224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2202      	movs	r2, #2
 800b22a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	699b      	ldr	r3, [r3, #24]
 800b232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7f7 febc 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 800b240:	e005      	b.n	800b24e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fb76 	bl	800b934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fb7d 	bl	800b948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	f003 0308 	and.w	r3, r3, #8
 800b25e:	2b08      	cmp	r3, #8
 800b260:	d122      	bne.n	800b2a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	f003 0308 	and.w	r3, r3, #8
 800b26c:	2b08      	cmp	r3, #8
 800b26e:	d11b      	bne.n	800b2a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f06f 0208 	mvn.w	r2, #8
 800b278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2204      	movs	r2, #4
 800b27e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	69db      	ldr	r3, [r3, #28]
 800b286:	f003 0303 	and.w	r3, r3, #3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d003      	beq.n	800b296 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7f7 fe92 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 800b294:	e005      	b.n	800b2a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fb4c 	bl	800b934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fb53 	bl	800b948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	f003 0310 	and.w	r3, r3, #16
 800b2b2:	2b10      	cmp	r3, #16
 800b2b4:	d122      	bne.n	800b2fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	f003 0310 	and.w	r3, r3, #16
 800b2c0:	2b10      	cmp	r3, #16
 800b2c2:	d11b      	bne.n	800b2fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f06f 0210 	mvn.w	r2, #16
 800b2cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2208      	movs	r2, #8
 800b2d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	69db      	ldr	r3, [r3, #28]
 800b2da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7f7 fe68 	bl	8002fb8 <HAL_TIM_IC_CaptureCallback>
 800b2e8:	e005      	b.n	800b2f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fb22 	bl	800b934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fb29 	bl	800b948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	f003 0301 	and.w	r3, r3, #1
 800b306:	2b01      	cmp	r3, #1
 800b308:	d10e      	bne.n	800b328 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	f003 0301 	and.w	r3, r3, #1
 800b314:	2b01      	cmp	r3, #1
 800b316:	d107      	bne.n	800b328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f06f 0201 	mvn.w	r2, #1
 800b320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7f7 fec4 	bl	80030b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b332:	2b80      	cmp	r3, #128	; 0x80
 800b334:	d10e      	bne.n	800b354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b340:	2b80      	cmp	r3, #128	; 0x80
 800b342:	d107      	bne.n	800b354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b34c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f001 f904 	bl	800c55c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b362:	d10e      	bne.n	800b382 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b36e:	2b80      	cmp	r3, #128	; 0x80
 800b370:	d107      	bne.n	800b382 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f001 f8f7 	bl	800c570 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b38c:	2b40      	cmp	r3, #64	; 0x40
 800b38e:	d10e      	bne.n	800b3ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39a:	2b40      	cmp	r3, #64	; 0x40
 800b39c:	d107      	bne.n	800b3ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fad7 	bl	800b95c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	f003 0320 	and.w	r3, r3, #32
 800b3b8:	2b20      	cmp	r3, #32
 800b3ba:	d10e      	bne.n	800b3da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	f003 0320 	and.w	r3, r3, #32
 800b3c6:	2b20      	cmp	r3, #32
 800b3c8:	d107      	bne.n	800b3da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f06f 0220 	mvn.w	r2, #32
 800b3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f001 f8b7 	bl	800c548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3da:	bf00      	nop
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b086      	sub	sp, #24
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	60f8      	str	r0, [r7, #12]
 800b3ea:	60b9      	str	r1, [r7, #8]
 800b3ec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d101      	bne.n	800b400 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	e088      	b.n	800b512 <HAL_TIM_IC_ConfigChannel+0x130>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d11b      	bne.n	800b446 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	6819      	ldr	r1, [r3, #0]
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	685a      	ldr	r2, [r3, #4]
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	f000 fe17 	bl	800c050 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	699a      	ldr	r2, [r3, #24]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f022 020c 	bic.w	r2, r2, #12
 800b430:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	6999      	ldr	r1, [r3, #24]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	430a      	orrs	r2, r1
 800b442:	619a      	str	r2, [r3, #24]
 800b444:	e060      	b.n	800b508 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b04      	cmp	r3, #4
 800b44a:	d11c      	bne.n	800b486 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6818      	ldr	r0, [r3, #0]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	6819      	ldr	r1, [r3, #0]
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	685a      	ldr	r2, [r3, #4]
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	f000 fe9b 	bl	800c196 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	699a      	ldr	r2, [r3, #24]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b46e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6999      	ldr	r1, [r3, #24]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	021a      	lsls	r2, r3, #8
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	430a      	orrs	r2, r1
 800b482:	619a      	str	r2, [r3, #24]
 800b484:	e040      	b.n	800b508 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b08      	cmp	r3, #8
 800b48a:	d11b      	bne.n	800b4c4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6818      	ldr	r0, [r3, #0]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	6819      	ldr	r1, [r3, #0]
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	f000 fee8 	bl	800c270 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	69da      	ldr	r2, [r3, #28]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f022 020c 	bic.w	r2, r2, #12
 800b4ae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	69d9      	ldr	r1, [r3, #28]
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	689a      	ldr	r2, [r3, #8]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	61da      	str	r2, [r3, #28]
 800b4c2:	e021      	b.n	800b508 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b0c      	cmp	r3, #12
 800b4c8:	d11c      	bne.n	800b504 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6818      	ldr	r0, [r3, #0]
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	6819      	ldr	r1, [r3, #0]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	685a      	ldr	r2, [r3, #4]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	f000 ff05 	bl	800c2e8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69da      	ldr	r2, [r3, #28]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b4ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	69d9      	ldr	r1, [r3, #28]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	021a      	lsls	r2, r3, #8
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	430a      	orrs	r2, r1
 800b500:	61da      	str	r2, [r3, #28]
 800b502:	e001      	b.n	800b508 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b510:	7dfb      	ldrb	r3, [r7, #23]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3718      	adds	r7, #24
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
	...

0800b51c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b086      	sub	sp, #24
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b528:	2300      	movs	r3, #0
 800b52a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b532:	2b01      	cmp	r3, #1
 800b534:	d101      	bne.n	800b53a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b536:	2302      	movs	r3, #2
 800b538:	e0ff      	b.n	800b73a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2201      	movs	r2, #1
 800b53e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b14      	cmp	r3, #20
 800b546:	f200 80f0 	bhi.w	800b72a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b54a:	a201      	add	r2, pc, #4	; (adr r2, 800b550 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b550:	0800b5a5 	.word	0x0800b5a5
 800b554:	0800b72b 	.word	0x0800b72b
 800b558:	0800b72b 	.word	0x0800b72b
 800b55c:	0800b72b 	.word	0x0800b72b
 800b560:	0800b5e5 	.word	0x0800b5e5
 800b564:	0800b72b 	.word	0x0800b72b
 800b568:	0800b72b 	.word	0x0800b72b
 800b56c:	0800b72b 	.word	0x0800b72b
 800b570:	0800b627 	.word	0x0800b627
 800b574:	0800b72b 	.word	0x0800b72b
 800b578:	0800b72b 	.word	0x0800b72b
 800b57c:	0800b72b 	.word	0x0800b72b
 800b580:	0800b667 	.word	0x0800b667
 800b584:	0800b72b 	.word	0x0800b72b
 800b588:	0800b72b 	.word	0x0800b72b
 800b58c:	0800b72b 	.word	0x0800b72b
 800b590:	0800b6a9 	.word	0x0800b6a9
 800b594:	0800b72b 	.word	0x0800b72b
 800b598:	0800b72b 	.word	0x0800b72b
 800b59c:	0800b72b 	.word	0x0800b72b
 800b5a0:	0800b6e9 	.word	0x0800b6e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68b9      	ldr	r1, [r7, #8]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 fa7a 	bl	800baa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	699a      	ldr	r2, [r3, #24]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f042 0208 	orr.w	r2, r2, #8
 800b5be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	699a      	ldr	r2, [r3, #24]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f022 0204 	bic.w	r2, r2, #4
 800b5ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6999      	ldr	r1, [r3, #24]
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	691a      	ldr	r2, [r3, #16]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	619a      	str	r2, [r3, #24]
      break;
 800b5e2:	e0a5      	b.n	800b730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68b9      	ldr	r1, [r7, #8]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 faea 	bl	800bbc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	699a      	ldr	r2, [r3, #24]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	699a      	ldr	r2, [r3, #24]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b60e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	6999      	ldr	r1, [r3, #24]
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	021a      	lsls	r2, r3, #8
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	430a      	orrs	r2, r1
 800b622:	619a      	str	r2, [r3, #24]
      break;
 800b624:	e084      	b.n	800b730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68b9      	ldr	r1, [r7, #8]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 fb53 	bl	800bcd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	69da      	ldr	r2, [r3, #28]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f042 0208 	orr.w	r2, r2, #8
 800b640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	69da      	ldr	r2, [r3, #28]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f022 0204 	bic.w	r2, r2, #4
 800b650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	69d9      	ldr	r1, [r3, #28]
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	691a      	ldr	r2, [r3, #16]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	430a      	orrs	r2, r1
 800b662:	61da      	str	r2, [r3, #28]
      break;
 800b664:	e064      	b.n	800b730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68b9      	ldr	r1, [r7, #8]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f000 fbbb 	bl	800bde8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	69da      	ldr	r2, [r3, #28]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	69da      	ldr	r2, [r3, #28]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	69d9      	ldr	r1, [r3, #28]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	021a      	lsls	r2, r3, #8
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	430a      	orrs	r2, r1
 800b6a4:	61da      	str	r2, [r3, #28]
      break;
 800b6a6:	e043      	b.n	800b730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68b9      	ldr	r1, [r7, #8]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 fc04 	bl	800bebc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f042 0208 	orr.w	r2, r2, #8
 800b6c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f022 0204 	bic.w	r2, r2, #4
 800b6d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	691a      	ldr	r2, [r3, #16]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	430a      	orrs	r2, r1
 800b6e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b6e6:	e023      	b.n	800b730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68b9      	ldr	r1, [r7, #8]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 fc48 	bl	800bf84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b702:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b712:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	021a      	lsls	r2, r3, #8
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	430a      	orrs	r2, r1
 800b726:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b728:	e002      	b.n	800b730 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	75fb      	strb	r3, [r7, #23]
      break;
 800b72e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b738:	7dfb      	ldrb	r3, [r7, #23]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3718      	adds	r7, #24
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop

0800b744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d101      	bne.n	800b760 <HAL_TIM_ConfigClockSource+0x1c>
 800b75c:	2302      	movs	r3, #2
 800b75e:	e0dc      	b.n	800b91a <HAL_TIM_ConfigClockSource+0x1d6>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2202      	movs	r2, #2
 800b76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	4b6a      	ldr	r3, [pc, #424]	; (800b924 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b77c:	4013      	ands	r3, r2
 800b77e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a64      	ldr	r2, [pc, #400]	; (800b928 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b796:	4293      	cmp	r3, r2
 800b798:	f000 80a9 	beq.w	800b8ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b79c:	4a62      	ldr	r2, [pc, #392]	; (800b928 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	f200 80ae 	bhi.w	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7a4:	4a61      	ldr	r2, [pc, #388]	; (800b92c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	f000 80a1 	beq.w	800b8ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b7ac:	4a5f      	ldr	r2, [pc, #380]	; (800b92c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	f200 80a6 	bhi.w	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7b4:	4a5e      	ldr	r2, [pc, #376]	; (800b930 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	f000 8099 	beq.w	800b8ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b7bc:	4a5c      	ldr	r2, [pc, #368]	; (800b930 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	f200 809e 	bhi.w	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b7c8:	f000 8091 	beq.w	800b8ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b7cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b7d0:	f200 8096 	bhi.w	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7d8:	f000 8089 	beq.w	800b8ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b7dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7e0:	f200 808e 	bhi.w	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7e8:	d03e      	beq.n	800b868 <HAL_TIM_ConfigClockSource+0x124>
 800b7ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ee:	f200 8087 	bhi.w	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7f6:	f000 8086 	beq.w	800b906 <HAL_TIM_ConfigClockSource+0x1c2>
 800b7fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7fe:	d87f      	bhi.n	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b800:	2b70      	cmp	r3, #112	; 0x70
 800b802:	d01a      	beq.n	800b83a <HAL_TIM_ConfigClockSource+0xf6>
 800b804:	2b70      	cmp	r3, #112	; 0x70
 800b806:	d87b      	bhi.n	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b808:	2b60      	cmp	r3, #96	; 0x60
 800b80a:	d050      	beq.n	800b8ae <HAL_TIM_ConfigClockSource+0x16a>
 800b80c:	2b60      	cmp	r3, #96	; 0x60
 800b80e:	d877      	bhi.n	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b810:	2b50      	cmp	r3, #80	; 0x50
 800b812:	d03c      	beq.n	800b88e <HAL_TIM_ConfigClockSource+0x14a>
 800b814:	2b50      	cmp	r3, #80	; 0x50
 800b816:	d873      	bhi.n	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b818:	2b40      	cmp	r3, #64	; 0x40
 800b81a:	d058      	beq.n	800b8ce <HAL_TIM_ConfigClockSource+0x18a>
 800b81c:	2b40      	cmp	r3, #64	; 0x40
 800b81e:	d86f      	bhi.n	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b820:	2b30      	cmp	r3, #48	; 0x30
 800b822:	d064      	beq.n	800b8ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b824:	2b30      	cmp	r3, #48	; 0x30
 800b826:	d86b      	bhi.n	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b828:	2b20      	cmp	r3, #32
 800b82a:	d060      	beq.n	800b8ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b82c:	2b20      	cmp	r3, #32
 800b82e:	d867      	bhi.n	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
 800b830:	2b00      	cmp	r3, #0
 800b832:	d05c      	beq.n	800b8ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b834:	2b10      	cmp	r3, #16
 800b836:	d05a      	beq.n	800b8ee <HAL_TIM_ConfigClockSource+0x1aa>
 800b838:	e062      	b.n	800b900 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6818      	ldr	r0, [r3, #0]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	6899      	ldr	r1, [r3, #8]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	f000 fda9 	bl	800c3a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b85c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	609a      	str	r2, [r3, #8]
      break;
 800b866:	e04f      	b.n	800b908 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6818      	ldr	r0, [r3, #0]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	6899      	ldr	r1, [r3, #8]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	f000 fd92 	bl	800c3a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	689a      	ldr	r2, [r3, #8]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b88a:	609a      	str	r2, [r3, #8]
      break;
 800b88c:	e03c      	b.n	800b908 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6818      	ldr	r0, [r3, #0]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	6859      	ldr	r1, [r3, #4]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	461a      	mov	r2, r3
 800b89c:	f000 fc4c 	bl	800c138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2150      	movs	r1, #80	; 0x50
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f000 fd5c 	bl	800c364 <TIM_ITRx_SetConfig>
      break;
 800b8ac:	e02c      	b.n	800b908 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6818      	ldr	r0, [r3, #0]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	6859      	ldr	r1, [r3, #4]
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	f000 fca8 	bl	800c210 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2160      	movs	r1, #96	; 0x60
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 fd4c 	bl	800c364 <TIM_ITRx_SetConfig>
      break;
 800b8cc:	e01c      	b.n	800b908 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6818      	ldr	r0, [r3, #0]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	6859      	ldr	r1, [r3, #4]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f000 fc2c 	bl	800c138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2140      	movs	r1, #64	; 0x40
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 fd3c 	bl	800c364 <TIM_ITRx_SetConfig>
      break;
 800b8ec:	e00c      	b.n	800b908 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	f000 fd33 	bl	800c364 <TIM_ITRx_SetConfig>
      break;
 800b8fe:	e003      	b.n	800b908 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	73fb      	strb	r3, [r7, #15]
      break;
 800b904:	e000      	b.n	800b908 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	ffceff88 	.word	0xffceff88
 800b928:	00100040 	.word	0x00100040
 800b92c:	00100030 	.word	0x00100030
 800b930:	00100020 	.word	0x00100020

0800b934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b964:	bf00      	nop
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a40      	ldr	r2, [pc, #256]	; (800ba84 <TIM_Base_SetConfig+0x114>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d013      	beq.n	800b9b0 <TIM_Base_SetConfig+0x40>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b98e:	d00f      	beq.n	800b9b0 <TIM_Base_SetConfig+0x40>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a3d      	ldr	r2, [pc, #244]	; (800ba88 <TIM_Base_SetConfig+0x118>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d00b      	beq.n	800b9b0 <TIM_Base_SetConfig+0x40>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a3c      	ldr	r2, [pc, #240]	; (800ba8c <TIM_Base_SetConfig+0x11c>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d007      	beq.n	800b9b0 <TIM_Base_SetConfig+0x40>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a3b      	ldr	r2, [pc, #236]	; (800ba90 <TIM_Base_SetConfig+0x120>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d003      	beq.n	800b9b0 <TIM_Base_SetConfig+0x40>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a3a      	ldr	r2, [pc, #232]	; (800ba94 <TIM_Base_SetConfig+0x124>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d108      	bne.n	800b9c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a2f      	ldr	r2, [pc, #188]	; (800ba84 <TIM_Base_SetConfig+0x114>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d01f      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9d0:	d01b      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a2c      	ldr	r2, [pc, #176]	; (800ba88 <TIM_Base_SetConfig+0x118>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d017      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a2b      	ldr	r2, [pc, #172]	; (800ba8c <TIM_Base_SetConfig+0x11c>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d013      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a2a      	ldr	r2, [pc, #168]	; (800ba90 <TIM_Base_SetConfig+0x120>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d00f      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a29      	ldr	r2, [pc, #164]	; (800ba94 <TIM_Base_SetConfig+0x124>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d00b      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a28      	ldr	r2, [pc, #160]	; (800ba98 <TIM_Base_SetConfig+0x128>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d007      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a27      	ldr	r2, [pc, #156]	; (800ba9c <TIM_Base_SetConfig+0x12c>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d003      	beq.n	800ba0a <TIM_Base_SetConfig+0x9a>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a26      	ldr	r2, [pc, #152]	; (800baa0 <TIM_Base_SetConfig+0x130>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d108      	bne.n	800ba1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	689a      	ldr	r2, [r3, #8]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a10      	ldr	r2, [pc, #64]	; (800ba84 <TIM_Base_SetConfig+0x114>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d00f      	beq.n	800ba68 <TIM_Base_SetConfig+0xf8>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a12      	ldr	r2, [pc, #72]	; (800ba94 <TIM_Base_SetConfig+0x124>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d00b      	beq.n	800ba68 <TIM_Base_SetConfig+0xf8>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a11      	ldr	r2, [pc, #68]	; (800ba98 <TIM_Base_SetConfig+0x128>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d007      	beq.n	800ba68 <TIM_Base_SetConfig+0xf8>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a10      	ldr	r2, [pc, #64]	; (800ba9c <TIM_Base_SetConfig+0x12c>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d003      	beq.n	800ba68 <TIM_Base_SetConfig+0xf8>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a0f      	ldr	r2, [pc, #60]	; (800baa0 <TIM_Base_SetConfig+0x130>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d103      	bne.n	800ba70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	691a      	ldr	r2, [r3, #16]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	615a      	str	r2, [r3, #20]
}
 800ba76:	bf00      	nop
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	40010000 	.word	0x40010000
 800ba88:	40000400 	.word	0x40000400
 800ba8c:	40000800 	.word	0x40000800
 800ba90:	40000c00 	.word	0x40000c00
 800ba94:	40010400 	.word	0x40010400
 800ba98:	40014000 	.word	0x40014000
 800ba9c:	40014400 	.word	0x40014400
 800baa0:	40014800 	.word	0x40014800

0800baa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	f023 0201 	bic.w	r2, r3, #1
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a1b      	ldr	r3, [r3, #32]
 800babe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	699b      	ldr	r3, [r3, #24]
 800baca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	4b37      	ldr	r3, [pc, #220]	; (800bbac <TIM_OC1_SetConfig+0x108>)
 800bad0:	4013      	ands	r3, r2
 800bad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f023 0303 	bic.w	r3, r3, #3
 800bada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	4313      	orrs	r3, r2
 800bae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	f023 0302 	bic.w	r3, r3, #2
 800baec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a2d      	ldr	r2, [pc, #180]	; (800bbb0 <TIM_OC1_SetConfig+0x10c>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d00f      	beq.n	800bb20 <TIM_OC1_SetConfig+0x7c>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a2c      	ldr	r2, [pc, #176]	; (800bbb4 <TIM_OC1_SetConfig+0x110>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d00b      	beq.n	800bb20 <TIM_OC1_SetConfig+0x7c>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a2b      	ldr	r2, [pc, #172]	; (800bbb8 <TIM_OC1_SetConfig+0x114>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d007      	beq.n	800bb20 <TIM_OC1_SetConfig+0x7c>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a2a      	ldr	r2, [pc, #168]	; (800bbbc <TIM_OC1_SetConfig+0x118>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d003      	beq.n	800bb20 <TIM_OC1_SetConfig+0x7c>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a29      	ldr	r2, [pc, #164]	; (800bbc0 <TIM_OC1_SetConfig+0x11c>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d10c      	bne.n	800bb3a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	f023 0308 	bic.w	r3, r3, #8
 800bb26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f023 0304 	bic.w	r3, r3, #4
 800bb38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a1c      	ldr	r2, [pc, #112]	; (800bbb0 <TIM_OC1_SetConfig+0x10c>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d00f      	beq.n	800bb62 <TIM_OC1_SetConfig+0xbe>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a1b      	ldr	r2, [pc, #108]	; (800bbb4 <TIM_OC1_SetConfig+0x110>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d00b      	beq.n	800bb62 <TIM_OC1_SetConfig+0xbe>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a1a      	ldr	r2, [pc, #104]	; (800bbb8 <TIM_OC1_SetConfig+0x114>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d007      	beq.n	800bb62 <TIM_OC1_SetConfig+0xbe>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a19      	ldr	r2, [pc, #100]	; (800bbbc <TIM_OC1_SetConfig+0x118>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d003      	beq.n	800bb62 <TIM_OC1_SetConfig+0xbe>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a18      	ldr	r2, [pc, #96]	; (800bbc0 <TIM_OC1_SetConfig+0x11c>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d111      	bne.n	800bb86 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	685a      	ldr	r2, [r3, #4]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	697a      	ldr	r2, [r7, #20]
 800bb9e:	621a      	str	r2, [r3, #32]
}
 800bba0:	bf00      	nop
 800bba2:	371c      	adds	r7, #28
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr
 800bbac:	fffeff8f 	.word	0xfffeff8f
 800bbb0:	40010000 	.word	0x40010000
 800bbb4:	40010400 	.word	0x40010400
 800bbb8:	40014000 	.word	0x40014000
 800bbbc:	40014400 	.word	0x40014400
 800bbc0:	40014800 	.word	0x40014800

0800bbc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	f023 0210 	bic.w	r2, r3, #16
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	4b34      	ldr	r3, [pc, #208]	; (800bcc0 <TIM_OC2_SetConfig+0xfc>)
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	f023 0320 	bic.w	r3, r3, #32
 800bc0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	011b      	lsls	r3, r3, #4
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a29      	ldr	r2, [pc, #164]	; (800bcc4 <TIM_OC2_SetConfig+0x100>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d003      	beq.n	800bc2c <TIM_OC2_SetConfig+0x68>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a28      	ldr	r2, [pc, #160]	; (800bcc8 <TIM_OC2_SetConfig+0x104>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d10d      	bne.n	800bc48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	011b      	lsls	r3, r3, #4
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a1e      	ldr	r2, [pc, #120]	; (800bcc4 <TIM_OC2_SetConfig+0x100>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d00f      	beq.n	800bc70 <TIM_OC2_SetConfig+0xac>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a1d      	ldr	r2, [pc, #116]	; (800bcc8 <TIM_OC2_SetConfig+0x104>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d00b      	beq.n	800bc70 <TIM_OC2_SetConfig+0xac>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a1c      	ldr	r2, [pc, #112]	; (800bccc <TIM_OC2_SetConfig+0x108>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d007      	beq.n	800bc70 <TIM_OC2_SetConfig+0xac>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4a1b      	ldr	r2, [pc, #108]	; (800bcd0 <TIM_OC2_SetConfig+0x10c>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d003      	beq.n	800bc70 <TIM_OC2_SetConfig+0xac>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a1a      	ldr	r2, [pc, #104]	; (800bcd4 <TIM_OC2_SetConfig+0x110>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d113      	bne.n	800bc98 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	693a      	ldr	r2, [r7, #16]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	693a      	ldr	r2, [r7, #16]
 800bc9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	685a      	ldr	r2, [r3, #4]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	621a      	str	r2, [r3, #32]
}
 800bcb2:	bf00      	nop
 800bcb4:	371c      	adds	r7, #28
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	feff8fff 	.word	0xfeff8fff
 800bcc4:	40010000 	.word	0x40010000
 800bcc8:	40010400 	.word	0x40010400
 800bccc:	40014000 	.word	0x40014000
 800bcd0:	40014400 	.word	0x40014400
 800bcd4:	40014800 	.word	0x40014800

0800bcd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b087      	sub	sp, #28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a1b      	ldr	r3, [r3, #32]
 800bce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a1b      	ldr	r3, [r3, #32]
 800bcf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	69db      	ldr	r3, [r3, #28]
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	4b33      	ldr	r3, [pc, #204]	; (800bdd0 <TIM_OC3_SetConfig+0xf8>)
 800bd04:	4013      	ands	r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f023 0303 	bic.w	r3, r3, #3
 800bd0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	021b      	lsls	r3, r3, #8
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a28      	ldr	r2, [pc, #160]	; (800bdd4 <TIM_OC3_SetConfig+0xfc>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d003      	beq.n	800bd3e <TIM_OC3_SetConfig+0x66>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a27      	ldr	r2, [pc, #156]	; (800bdd8 <TIM_OC3_SetConfig+0x100>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d10d      	bne.n	800bd5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	021b      	lsls	r3, r3, #8
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4a1d      	ldr	r2, [pc, #116]	; (800bdd4 <TIM_OC3_SetConfig+0xfc>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d00f      	beq.n	800bd82 <TIM_OC3_SetConfig+0xaa>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4a1c      	ldr	r2, [pc, #112]	; (800bdd8 <TIM_OC3_SetConfig+0x100>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d00b      	beq.n	800bd82 <TIM_OC3_SetConfig+0xaa>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4a1b      	ldr	r2, [pc, #108]	; (800bddc <TIM_OC3_SetConfig+0x104>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d007      	beq.n	800bd82 <TIM_OC3_SetConfig+0xaa>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4a1a      	ldr	r2, [pc, #104]	; (800bde0 <TIM_OC3_SetConfig+0x108>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d003      	beq.n	800bd82 <TIM_OC3_SetConfig+0xaa>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	4a19      	ldr	r2, [pc, #100]	; (800bde4 <TIM_OC3_SetConfig+0x10c>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d113      	bne.n	800bdaa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	011b      	lsls	r3, r3, #4
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	699b      	ldr	r3, [r3, #24]
 800bda2:	011b      	lsls	r3, r3, #4
 800bda4:	693a      	ldr	r2, [r7, #16]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	693a      	ldr	r2, [r7, #16]
 800bdae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	685a      	ldr	r2, [r3, #4]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	697a      	ldr	r2, [r7, #20]
 800bdc2:	621a      	str	r2, [r3, #32]
}
 800bdc4:	bf00      	nop
 800bdc6:	371c      	adds	r7, #28
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	fffeff8f 	.word	0xfffeff8f
 800bdd4:	40010000 	.word	0x40010000
 800bdd8:	40010400 	.word	0x40010400
 800bddc:	40014000 	.word	0x40014000
 800bde0:	40014400 	.word	0x40014400
 800bde4:	40014800 	.word	0x40014800

0800bde8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a1b      	ldr	r3, [r3, #32]
 800be02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	4b24      	ldr	r3, [pc, #144]	; (800bea4 <TIM_OC4_SetConfig+0xbc>)
 800be14:	4013      	ands	r3, r2
 800be16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	021b      	lsls	r3, r3, #8
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	4313      	orrs	r3, r2
 800be2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	031b      	lsls	r3, r3, #12
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a19      	ldr	r2, [pc, #100]	; (800bea8 <TIM_OC4_SetConfig+0xc0>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d00f      	beq.n	800be68 <TIM_OC4_SetConfig+0x80>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a18      	ldr	r2, [pc, #96]	; (800beac <TIM_OC4_SetConfig+0xc4>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d00b      	beq.n	800be68 <TIM_OC4_SetConfig+0x80>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4a17      	ldr	r2, [pc, #92]	; (800beb0 <TIM_OC4_SetConfig+0xc8>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d007      	beq.n	800be68 <TIM_OC4_SetConfig+0x80>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a16      	ldr	r2, [pc, #88]	; (800beb4 <TIM_OC4_SetConfig+0xcc>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d003      	beq.n	800be68 <TIM_OC4_SetConfig+0x80>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a15      	ldr	r2, [pc, #84]	; (800beb8 <TIM_OC4_SetConfig+0xd0>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d109      	bne.n	800be7c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	695b      	ldr	r3, [r3, #20]
 800be74:	019b      	lsls	r3, r3, #6
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	4313      	orrs	r3, r2
 800be7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	693a      	ldr	r2, [r7, #16]
 800be94:	621a      	str	r2, [r3, #32]
}
 800be96:	bf00      	nop
 800be98:	371c      	adds	r7, #28
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	feff8fff 	.word	0xfeff8fff
 800bea8:	40010000 	.word	0x40010000
 800beac:	40010400 	.word	0x40010400
 800beb0:	40014000 	.word	0x40014000
 800beb4:	40014400 	.word	0x40014400
 800beb8:	40014800 	.word	0x40014800

0800bebc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b087      	sub	sp, #28
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a1b      	ldr	r3, [r3, #32]
 800beca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a1b      	ldr	r3, [r3, #32]
 800bed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	4b21      	ldr	r3, [pc, #132]	; (800bf6c <TIM_OC5_SetConfig+0xb0>)
 800bee8:	4013      	ands	r3, r2
 800beea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800befc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	041b      	lsls	r3, r3, #16
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a18      	ldr	r2, [pc, #96]	; (800bf70 <TIM_OC5_SetConfig+0xb4>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d00f      	beq.n	800bf32 <TIM_OC5_SetConfig+0x76>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a17      	ldr	r2, [pc, #92]	; (800bf74 <TIM_OC5_SetConfig+0xb8>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d00b      	beq.n	800bf32 <TIM_OC5_SetConfig+0x76>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a16      	ldr	r2, [pc, #88]	; (800bf78 <TIM_OC5_SetConfig+0xbc>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d007      	beq.n	800bf32 <TIM_OC5_SetConfig+0x76>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a15      	ldr	r2, [pc, #84]	; (800bf7c <TIM_OC5_SetConfig+0xc0>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d003      	beq.n	800bf32 <TIM_OC5_SetConfig+0x76>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a14      	ldr	r2, [pc, #80]	; (800bf80 <TIM_OC5_SetConfig+0xc4>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d109      	bne.n	800bf46 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	695b      	ldr	r3, [r3, #20]
 800bf3e:	021b      	lsls	r3, r3, #8
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	697a      	ldr	r2, [r7, #20]
 800bf4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	693a      	ldr	r2, [r7, #16]
 800bf5e:	621a      	str	r2, [r3, #32]
}
 800bf60:	bf00      	nop
 800bf62:	371c      	adds	r7, #28
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	fffeff8f 	.word	0xfffeff8f
 800bf70:	40010000 	.word	0x40010000
 800bf74:	40010400 	.word	0x40010400
 800bf78:	40014000 	.word	0x40014000
 800bf7c:	40014400 	.word	0x40014400
 800bf80:	40014800 	.word	0x40014800

0800bf84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b087      	sub	sp, #28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	4b22      	ldr	r3, [pc, #136]	; (800c038 <TIM_OC6_SetConfig+0xb4>)
 800bfb0:	4013      	ands	r3, r2
 800bfb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	021b      	lsls	r3, r3, #8
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bfc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	051b      	lsls	r3, r3, #20
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a19      	ldr	r2, [pc, #100]	; (800c03c <TIM_OC6_SetConfig+0xb8>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d00f      	beq.n	800bffc <TIM_OC6_SetConfig+0x78>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a18      	ldr	r2, [pc, #96]	; (800c040 <TIM_OC6_SetConfig+0xbc>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d00b      	beq.n	800bffc <TIM_OC6_SetConfig+0x78>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a17      	ldr	r2, [pc, #92]	; (800c044 <TIM_OC6_SetConfig+0xc0>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d007      	beq.n	800bffc <TIM_OC6_SetConfig+0x78>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a16      	ldr	r2, [pc, #88]	; (800c048 <TIM_OC6_SetConfig+0xc4>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d003      	beq.n	800bffc <TIM_OC6_SetConfig+0x78>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a15      	ldr	r2, [pc, #84]	; (800c04c <TIM_OC6_SetConfig+0xc8>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d109      	bne.n	800c010 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c002:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	029b      	lsls	r3, r3, #10
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	693a      	ldr	r2, [r7, #16]
 800c028:	621a      	str	r2, [r3, #32]
}
 800c02a:	bf00      	nop
 800c02c:	371c      	adds	r7, #28
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	feff8fff 	.word	0xfeff8fff
 800c03c:	40010000 	.word	0x40010000
 800c040:	40010400 	.word	0x40010400
 800c044:	40014000 	.word	0x40014000
 800c048:	40014400 	.word	0x40014400
 800c04c:	40014800 	.word	0x40014800

0800c050 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c050:	b480      	push	{r7}
 800c052:	b087      	sub	sp, #28
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
 800c05c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	f023 0201 	bic.w	r2, r3, #1
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	699b      	ldr	r3, [r3, #24]
 800c06e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6a1b      	ldr	r3, [r3, #32]
 800c074:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	4a28      	ldr	r2, [pc, #160]	; (800c11c <TIM_TI1_SetConfig+0xcc>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d01b      	beq.n	800c0b6 <TIM_TI1_SetConfig+0x66>
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c084:	d017      	beq.n	800c0b6 <TIM_TI1_SetConfig+0x66>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	4a25      	ldr	r2, [pc, #148]	; (800c120 <TIM_TI1_SetConfig+0xd0>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d013      	beq.n	800c0b6 <TIM_TI1_SetConfig+0x66>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	4a24      	ldr	r2, [pc, #144]	; (800c124 <TIM_TI1_SetConfig+0xd4>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d00f      	beq.n	800c0b6 <TIM_TI1_SetConfig+0x66>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	4a23      	ldr	r2, [pc, #140]	; (800c128 <TIM_TI1_SetConfig+0xd8>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d00b      	beq.n	800c0b6 <TIM_TI1_SetConfig+0x66>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	4a22      	ldr	r2, [pc, #136]	; (800c12c <TIM_TI1_SetConfig+0xdc>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d007      	beq.n	800c0b6 <TIM_TI1_SetConfig+0x66>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	4a21      	ldr	r2, [pc, #132]	; (800c130 <TIM_TI1_SetConfig+0xe0>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d003      	beq.n	800c0b6 <TIM_TI1_SetConfig+0x66>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	4a20      	ldr	r2, [pc, #128]	; (800c134 <TIM_TI1_SetConfig+0xe4>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d101      	bne.n	800c0ba <TIM_TI1_SetConfig+0x6a>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e000      	b.n	800c0bc <TIM_TI1_SetConfig+0x6c>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d008      	beq.n	800c0d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	f023 0303 	bic.w	r3, r3, #3
 800c0c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c0c8:	697a      	ldr	r2, [r7, #20]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	617b      	str	r3, [r7, #20]
 800c0d0:	e003      	b.n	800c0da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	f043 0301 	orr.w	r3, r3, #1
 800c0d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c0e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	011b      	lsls	r3, r3, #4
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	f023 030a 	bic.w	r3, r3, #10
 800c0f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	f003 030a 	and.w	r3, r3, #10
 800c0fc:	693a      	ldr	r2, [r7, #16]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	697a      	ldr	r2, [r7, #20]
 800c106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	693a      	ldr	r2, [r7, #16]
 800c10c:	621a      	str	r2, [r3, #32]
}
 800c10e:	bf00      	nop
 800c110:	371c      	adds	r7, #28
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	40010000 	.word	0x40010000
 800c120:	40000400 	.word	0x40000400
 800c124:	40000800 	.word	0x40000800
 800c128:	40000c00 	.word	0x40000c00
 800c12c:	40010400 	.word	0x40010400
 800c130:	40001800 	.word	0x40001800
 800c134:	40014000 	.word	0x40014000

0800c138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c138:	b480      	push	{r7}
 800c13a:	b087      	sub	sp, #28
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6a1b      	ldr	r3, [r3, #32]
 800c148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	f023 0201 	bic.w	r2, r3, #1
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	699b      	ldr	r3, [r3, #24]
 800c15a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	011b      	lsls	r3, r3, #4
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f023 030a 	bic.w	r3, r3, #10
 800c174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	621a      	str	r2, [r3, #32]
}
 800c18a:	bf00      	nop
 800c18c:	371c      	adds	r7, #28
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c196:	b480      	push	{r7}
 800c198:	b087      	sub	sp, #28
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	60f8      	str	r0, [r7, #12]
 800c19e:	60b9      	str	r1, [r7, #8]
 800c1a0:	607a      	str	r2, [r7, #4]
 800c1a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
 800c1a8:	f023 0210 	bic.w	r2, r3, #16
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	021b      	lsls	r3, r3, #8
 800c1c8:	697a      	ldr	r2, [r7, #20]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c1d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	031b      	lsls	r3, r3, #12
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c1e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	011b      	lsls	r3, r3, #4
 800c1ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c1f2:	693a      	ldr	r2, [r7, #16]
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	621a      	str	r2, [r3, #32]
}
 800c204:	bf00      	nop
 800c206:	371c      	adds	r7, #28
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c210:	b480      	push	{r7}
 800c212:	b087      	sub	sp, #28
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6a1b      	ldr	r3, [r3, #32]
 800c220:	f023 0210 	bic.w	r2, r3, #16
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c23a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	031b      	lsls	r3, r3, #12
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	4313      	orrs	r3, r2
 800c244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c24c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	011b      	lsls	r3, r3, #4
 800c252:	693a      	ldr	r2, [r7, #16]
 800c254:	4313      	orrs	r3, r2
 800c256:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	693a      	ldr	r2, [r7, #16]
 800c262:	621a      	str	r2, [r3, #32]
}
 800c264:	bf00      	nop
 800c266:	371c      	adds	r7, #28
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c270:	b480      	push	{r7}
 800c272:	b087      	sub	sp, #28
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
 800c27c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	69db      	ldr	r3, [r3, #28]
 800c28e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6a1b      	ldr	r3, [r3, #32]
 800c294:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	f023 0303 	bic.w	r3, r3, #3
 800c29c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c2ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	011b      	lsls	r3, r3, #4
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	697a      	ldr	r2, [r7, #20]
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c2c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	021b      	lsls	r3, r3, #8
 800c2c6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	621a      	str	r2, [r3, #32]
}
 800c2dc:	bf00      	nop
 800c2de:	371c      	adds	r7, #28
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
 800c2f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6a1b      	ldr	r3, [r3, #32]
 800c30c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c314:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	021b      	lsls	r3, r3, #8
 800c31a:	697a      	ldr	r2, [r7, #20]
 800c31c:	4313      	orrs	r3, r2
 800c31e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c326:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	031b      	lsls	r3, r3, #12
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	697a      	ldr	r2, [r7, #20]
 800c330:	4313      	orrs	r3, r2
 800c332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c33a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	031b      	lsls	r3, r3, #12
 800c340:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c344:	693a      	ldr	r2, [r7, #16]
 800c346:	4313      	orrs	r3, r2
 800c348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	697a      	ldr	r2, [r7, #20]
 800c34e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	621a      	str	r2, [r3, #32]
}
 800c356:	bf00      	nop
 800c358:	371c      	adds	r7, #28
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
	...

0800c364 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	4b09      	ldr	r3, [pc, #36]	; (800c39c <TIM_ITRx_SetConfig+0x38>)
 800c378:	4013      	ands	r3, r2
 800c37a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c37c:	683a      	ldr	r2, [r7, #0]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	4313      	orrs	r3, r2
 800c382:	f043 0307 	orr.w	r3, r3, #7
 800c386:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	609a      	str	r2, [r3, #8]
}
 800c38e:	bf00      	nop
 800c390:	3714      	adds	r7, #20
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	ffcfff8f 	.word	0xffcfff8f

0800c3a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b087      	sub	sp, #28
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
 800c3ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	021a      	lsls	r2, r3, #8
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	431a      	orrs	r2, r3
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	697a      	ldr	r2, [r7, #20]
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	697a      	ldr	r2, [r7, #20]
 800c3d2:	609a      	str	r2, [r3, #8]
}
 800c3d4:	bf00      	nop
 800c3d6:	371c      	adds	r7, #28
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b087      	sub	sp, #28
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	f003 031f 	and.w	r3, r3, #31
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6a1a      	ldr	r2, [r3, #32]
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	43db      	mvns	r3, r3
 800c402:	401a      	ands	r2, r3
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6a1a      	ldr	r2, [r3, #32]
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	f003 031f 	and.w	r3, r3, #31
 800c412:	6879      	ldr	r1, [r7, #4]
 800c414:	fa01 f303 	lsl.w	r3, r1, r3
 800c418:	431a      	orrs	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	621a      	str	r2, [r3, #32]
}
 800c41e:	bf00      	nop
 800c420:	371c      	adds	r7, #28
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
	...

0800c42c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b085      	sub	sp, #20
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d101      	bne.n	800c444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c440:	2302      	movs	r3, #2
 800c442:	e06d      	b.n	800c520 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2202      	movs	r2, #2
 800c450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a30      	ldr	r2, [pc, #192]	; (800c52c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d004      	beq.n	800c478 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a2f      	ldr	r2, [pc, #188]	; (800c530 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d108      	bne.n	800c48a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c47e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	4313      	orrs	r3, r2
 800c488:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c490:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	4313      	orrs	r3, r2
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a20      	ldr	r2, [pc, #128]	; (800c52c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d022      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4b6:	d01d      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a1d      	ldr	r2, [pc, #116]	; (800c534 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d018      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a1c      	ldr	r2, [pc, #112]	; (800c538 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d013      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a1a      	ldr	r2, [pc, #104]	; (800c53c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d00e      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a15      	ldr	r2, [pc, #84]	; (800c530 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d009      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a16      	ldr	r2, [pc, #88]	; (800c540 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d004      	beq.n	800c4f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a15      	ldr	r2, [pc, #84]	; (800c544 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d10c      	bne.n	800c50e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	4313      	orrs	r3, r2
 800c504:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	68ba      	ldr	r2, [r7, #8]
 800c50c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2201      	movs	r2, #1
 800c512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	40010000 	.word	0x40010000
 800c530:	40010400 	.word	0x40010400
 800c534:	40000400 	.word	0x40000400
 800c538:	40000800 	.word	0x40000800
 800c53c:	40000c00 	.word	0x40000c00
 800c540:	40001800 	.word	0x40001800
 800c544:	40014000 	.word	0x40014000

0800c548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	e042      	b.n	800c61c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d106      	bne.n	800c5ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f7fa f9d9 	bl	8006960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2224      	movs	r2, #36	; 0x24
 800c5b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f022 0201 	bic.w	r2, r2, #1
 800c5c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 fccc 	bl	800cf64 <UART_SetConfig>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d101      	bne.n	800c5d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e022      	b.n	800c61c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d002      	beq.n	800c5e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f001 fa28 	bl	800da34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	689a      	ldr	r2, [r3, #8]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f042 0201 	orr.w	r2, r2, #1
 800c612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f001 faaf 	bl	800db78 <UART_CheckIdleState>
 800c61a:	4603      	mov	r3, r0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b08a      	sub	sp, #40	; 0x28
 800c628:	af02      	add	r7, sp, #8
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	603b      	str	r3, [r7, #0]
 800c630:	4613      	mov	r3, r2
 800c632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c63a:	2b20      	cmp	r3, #32
 800c63c:	f040 8083 	bne.w	800c746 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <HAL_UART_Transmit+0x28>
 800c646:	88fb      	ldrh	r3, [r7, #6]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d101      	bne.n	800c650 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c64c:	2301      	movs	r3, #1
 800c64e:	e07b      	b.n	800c748 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c656:	2b01      	cmp	r3, #1
 800c658:	d101      	bne.n	800c65e <HAL_UART_Transmit+0x3a>
 800c65a:	2302      	movs	r3, #2
 800c65c:	e074      	b.n	800c748 <HAL_UART_Transmit+0x124>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2201      	movs	r2, #1
 800c662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2221      	movs	r2, #33	; 0x21
 800c672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c676:	f7fa fb4f 	bl	8006d18 <HAL_GetTick>
 800c67a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	88fa      	ldrh	r2, [r7, #6]
 800c680:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	88fa      	ldrh	r2, [r7, #6]
 800c688:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c694:	d108      	bne.n	800c6a8 <HAL_UART_Transmit+0x84>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d104      	bne.n	800c6a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	61bb      	str	r3, [r7, #24]
 800c6a6:	e003      	b.n	800c6b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c6b8:	e02c      	b.n	800c714 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	9300      	str	r3, [sp, #0]
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	2180      	movs	r1, #128	; 0x80
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f001 faa2 	bl	800dc0e <UART_WaitOnFlagUntilTimeout>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d001      	beq.n	800c6d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c6d0:	2303      	movs	r3, #3
 800c6d2:	e039      	b.n	800c748 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d10b      	bne.n	800c6f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	3302      	adds	r3, #2
 800c6ee:	61bb      	str	r3, [r7, #24]
 800c6f0:	e007      	b.n	800c702 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	781a      	ldrb	r2, [r3, #0]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	3301      	adds	r3, #1
 800c700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c708:	b29b      	uxth	r3, r3
 800c70a:	3b01      	subs	r3, #1
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d1cc      	bne.n	800c6ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	2200      	movs	r2, #0
 800c728:	2140      	movs	r1, #64	; 0x40
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	f001 fa6f 	bl	800dc0e <UART_WaitOnFlagUntilTimeout>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c736:	2303      	movs	r3, #3
 800c738:	e006      	b.n	800c748 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2220      	movs	r2, #32
 800c73e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c742:	2300      	movs	r3, #0
 800c744:	e000      	b.n	800c748 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c746:	2302      	movs	r3, #2
  }
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3720      	adds	r7, #32
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08a      	sub	sp, #40	; 0x28
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	4613      	mov	r3, r2
 800c75c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c764:	2b20      	cmp	r3, #32
 800c766:	d142      	bne.n	800c7ee <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d002      	beq.n	800c774 <HAL_UART_Receive_IT+0x24>
 800c76e:	88fb      	ldrh	r3, [r7, #6]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d101      	bne.n	800c778 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c774:	2301      	movs	r3, #1
 800c776:	e03b      	b.n	800c7f0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d101      	bne.n	800c786 <HAL_UART_Receive_IT+0x36>
 800c782:	2302      	movs	r3, #2
 800c784:	e034      	b.n	800c7f0 <HAL_UART_Receive_IT+0xa0>
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2201      	movs	r2, #1
 800c78a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a17      	ldr	r2, [pc, #92]	; (800c7f8 <HAL_UART_Receive_IT+0xa8>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d01f      	beq.n	800c7de <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d018      	beq.n	800c7de <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	e853 3f00 	ldrex	r3, [r3]
 800c7b8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c7c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	623b      	str	r3, [r7, #32]
 800c7cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ce:	69f9      	ldr	r1, [r7, #28]
 800c7d0:	6a3a      	ldr	r2, [r7, #32]
 800c7d2:	e841 2300 	strex	r3, r2, [r1]
 800c7d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1e6      	bne.n	800c7ac <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c7de:	88fb      	ldrh	r3, [r7, #6]
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	68b9      	ldr	r1, [r7, #8]
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f001 fadb 	bl	800dda0 <UART_Start_Receive_IT>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	e000      	b.n	800c7f0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c7ee:	2302      	movs	r3, #2
  }
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3728      	adds	r7, #40	; 0x28
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	58000c00 	.word	0x58000c00

0800c7fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b0ba      	sub	sp, #232	; 0xe8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c822:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c826:	f640 030f 	movw	r3, #2063	; 0x80f
 800c82a:	4013      	ands	r3, r2
 800c82c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c834:	2b00      	cmp	r3, #0
 800c836:	d11b      	bne.n	800c870 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c83c:	f003 0320 	and.w	r3, r3, #32
 800c840:	2b00      	cmp	r3, #0
 800c842:	d015      	beq.n	800c870 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c848:	f003 0320 	and.w	r3, r3, #32
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d105      	bne.n	800c85c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d009      	beq.n	800c870 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c860:	2b00      	cmp	r3, #0
 800c862:	f000 835a 	beq.w	800cf1a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	4798      	blx	r3
      }
      return;
 800c86e:	e354      	b.n	800cf1a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c874:	2b00      	cmp	r3, #0
 800c876:	f000 811f 	beq.w	800cab8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c87a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c87e:	4b8b      	ldr	r3, [pc, #556]	; (800caac <HAL_UART_IRQHandler+0x2b0>)
 800c880:	4013      	ands	r3, r2
 800c882:	2b00      	cmp	r3, #0
 800c884:	d106      	bne.n	800c894 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c886:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c88a:	4b89      	ldr	r3, [pc, #548]	; (800cab0 <HAL_UART_IRQHandler+0x2b4>)
 800c88c:	4013      	ands	r3, r2
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f000 8112 	beq.w	800cab8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c898:	f003 0301 	and.w	r3, r3, #1
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d011      	beq.n	800c8c4 <HAL_UART_IRQHandler+0xc8>
 800c8a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00b      	beq.n	800c8c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8ba:	f043 0201 	orr.w	r2, r3, #1
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8c8:	f003 0302 	and.w	r3, r3, #2
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d011      	beq.n	800c8f4 <HAL_UART_IRQHandler+0xf8>
 800c8d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8d4:	f003 0301 	and.w	r3, r3, #1
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00b      	beq.n	800c8f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2202      	movs	r2, #2
 800c8e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8ea:	f043 0204 	orr.w	r2, r3, #4
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8f8:	f003 0304 	and.w	r3, r3, #4
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d011      	beq.n	800c924 <HAL_UART_IRQHandler+0x128>
 800c900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c904:	f003 0301 	and.w	r3, r3, #1
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00b      	beq.n	800c924 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2204      	movs	r2, #4
 800c912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c91a:	f043 0202 	orr.w	r2, r3, #2
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c928:	f003 0308 	and.w	r3, r3, #8
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d017      	beq.n	800c960 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c934:	f003 0320 	and.w	r3, r3, #32
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d105      	bne.n	800c948 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c93c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c940:	4b5a      	ldr	r3, [pc, #360]	; (800caac <HAL_UART_IRQHandler+0x2b0>)
 800c942:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00b      	beq.n	800c960 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2208      	movs	r2, #8
 800c94e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c956:	f043 0208 	orr.w	r2, r3, #8
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d012      	beq.n	800c992 <HAL_UART_IRQHandler+0x196>
 800c96c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00c      	beq.n	800c992 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c988:	f043 0220 	orr.w	r2, r3, #32
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 82c0 	beq.w	800cf1e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c99e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9a2:	f003 0320 	and.w	r3, r3, #32
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d013      	beq.n	800c9d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c9aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9ae:	f003 0320 	and.w	r3, r3, #32
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d105      	bne.n	800c9c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c9b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d007      	beq.n	800c9d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d003      	beq.n	800c9d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	689b      	ldr	r3, [r3, #8]
 800c9e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9e6:	2b40      	cmp	r3, #64	; 0x40
 800c9e8:	d005      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c9ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d04f      	beq.n	800ca96 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f001 fafc 	bl	800dff4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca06:	2b40      	cmp	r3, #64	; 0x40
 800ca08:	d141      	bne.n	800ca8e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3308      	adds	r3, #8
 800ca10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ca18:	e853 3f00 	ldrex	r3, [r3]
 800ca1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ca20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	3308      	adds	r3, #8
 800ca32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ca36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ca3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ca42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ca46:	e841 2300 	strex	r3, r2, [r1]
 800ca4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ca4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1d9      	bne.n	800ca0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d013      	beq.n	800ca86 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca62:	4a14      	ldr	r2, [pc, #80]	; (800cab4 <HAL_UART_IRQHandler+0x2b8>)
 800ca64:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fa fdf0 	bl	8007650 <HAL_DMA_Abort_IT>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d017      	beq.n	800caa6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ca80:	4610      	mov	r0, r2
 800ca82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca84:	e00f      	b.n	800caa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fa56 	bl	800cf38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca8c:	e00b      	b.n	800caa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fa52 	bl	800cf38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca94:	e007      	b.n	800caa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 fa4e 	bl	800cf38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800caa4:	e23b      	b.n	800cf1e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800caa6:	bf00      	nop
    return;
 800caa8:	e239      	b.n	800cf1e <HAL_UART_IRQHandler+0x722>
 800caaa:	bf00      	nop
 800caac:	10000001 	.word	0x10000001
 800cab0:	04000120 	.word	0x04000120
 800cab4:	0800e0c1 	.word	0x0800e0c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	f040 81ce 	bne.w	800ce5e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cac6:	f003 0310 	and.w	r3, r3, #16
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f000 81c7 	beq.w	800ce5e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cad4:	f003 0310 	and.w	r3, r3, #16
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f000 81c0 	beq.w	800ce5e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2210      	movs	r2, #16
 800cae4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf0:	2b40      	cmp	r3, #64	; 0x40
 800caf2:	f040 813b 	bne.w	800cd6c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a8b      	ldr	r2, [pc, #556]	; (800cd2c <HAL_UART_IRQHandler+0x530>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d059      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a89      	ldr	r2, [pc, #548]	; (800cd30 <HAL_UART_IRQHandler+0x534>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d053      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a87      	ldr	r2, [pc, #540]	; (800cd34 <HAL_UART_IRQHandler+0x538>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d04d      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a85      	ldr	r2, [pc, #532]	; (800cd38 <HAL_UART_IRQHandler+0x53c>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d047      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a83      	ldr	r2, [pc, #524]	; (800cd3c <HAL_UART_IRQHandler+0x540>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d041      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a81      	ldr	r2, [pc, #516]	; (800cd40 <HAL_UART_IRQHandler+0x544>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d03b      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a7f      	ldr	r2, [pc, #508]	; (800cd44 <HAL_UART_IRQHandler+0x548>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d035      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a7d      	ldr	r2, [pc, #500]	; (800cd48 <HAL_UART_IRQHandler+0x54c>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d02f      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a7b      	ldr	r2, [pc, #492]	; (800cd4c <HAL_UART_IRQHandler+0x550>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d029      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a79      	ldr	r2, [pc, #484]	; (800cd50 <HAL_UART_IRQHandler+0x554>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d023      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a77      	ldr	r2, [pc, #476]	; (800cd54 <HAL_UART_IRQHandler+0x558>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d01d      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a75      	ldr	r2, [pc, #468]	; (800cd58 <HAL_UART_IRQHandler+0x55c>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d017      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a73      	ldr	r2, [pc, #460]	; (800cd5c <HAL_UART_IRQHandler+0x560>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d011      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a71      	ldr	r2, [pc, #452]	; (800cd60 <HAL_UART_IRQHandler+0x564>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d00b      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a6f      	ldr	r2, [pc, #444]	; (800cd64 <HAL_UART_IRQHandler+0x568>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d005      	beq.n	800cbb6 <HAL_UART_IRQHandler+0x3ba>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a6d      	ldr	r2, [pc, #436]	; (800cd68 <HAL_UART_IRQHandler+0x56c>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d105      	bne.n	800cbc2 <HAL_UART_IRQHandler+0x3c6>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	e004      	b.n	800cbcc <HAL_UART_IRQHandler+0x3d0>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cbd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f000 81a4 	beq.w	800cf22 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cbe0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	f080 819c 	bcs.w	800cf22 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cbf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbf8:	69db      	ldr	r3, [r3, #28]
 800cbfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbfe:	f000 8086 	beq.w	800cd0e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc0e:	e853 3f00 	ldrex	r3, [r3]
 800cc12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cc16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	461a      	mov	r2, r3
 800cc28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cc30:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cc38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc3c:	e841 2300 	strex	r3, r2, [r1]
 800cc40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cc44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1da      	bne.n	800cc02 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	3308      	adds	r3, #8
 800cc52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc56:	e853 3f00 	ldrex	r3, [r3]
 800cc5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cc5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc5e:	f023 0301 	bic.w	r3, r3, #1
 800cc62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	3308      	adds	r3, #8
 800cc6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cc70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cc74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cc78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cc7c:	e841 2300 	strex	r3, r2, [r1]
 800cc80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cc82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1e1      	bne.n	800cc4c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc92:	e853 3f00 	ldrex	r3, [r3]
 800cc96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cc98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	3308      	adds	r3, #8
 800cca8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ccac:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ccae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ccb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccb4:	e841 2300 	strex	r3, r2, [r1]
 800ccb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ccba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1e3      	bne.n	800cc88 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2220      	movs	r2, #32
 800ccc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccd6:	e853 3f00 	ldrex	r3, [r3]
 800ccda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ccdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccde:	f023 0310 	bic.w	r3, r3, #16
 800cce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	461a      	mov	r2, r3
 800ccec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ccf0:	65bb      	str	r3, [r7, #88]	; 0x58
 800ccf2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ccf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ccf8:	e841 2300 	strex	r3, r2, [r1]
 800ccfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ccfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1e4      	bne.n	800ccce <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fa f983 	bl	8007014 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	4619      	mov	r1, r3
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 f912 	bl	800cf4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cd28:	e0fb      	b.n	800cf22 <HAL_UART_IRQHandler+0x726>
 800cd2a:	bf00      	nop
 800cd2c:	40020010 	.word	0x40020010
 800cd30:	40020028 	.word	0x40020028
 800cd34:	40020040 	.word	0x40020040
 800cd38:	40020058 	.word	0x40020058
 800cd3c:	40020070 	.word	0x40020070
 800cd40:	40020088 	.word	0x40020088
 800cd44:	400200a0 	.word	0x400200a0
 800cd48:	400200b8 	.word	0x400200b8
 800cd4c:	40020410 	.word	0x40020410
 800cd50:	40020428 	.word	0x40020428
 800cd54:	40020440 	.word	0x40020440
 800cd58:	40020458 	.word	0x40020458
 800cd5c:	40020470 	.word	0x40020470
 800cd60:	40020488 	.word	0x40020488
 800cd64:	400204a0 	.word	0x400204a0
 800cd68:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f000 80cc 	beq.w	800cf26 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800cd8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f000 80c7 	beq.w	800cf26 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda0:	e853 3f00 	ldrex	r3, [r3]
 800cda4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cdac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cdba:	647b      	str	r3, [r7, #68]	; 0x44
 800cdbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cdc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cdc2:	e841 2300 	strex	r3, r2, [r1]
 800cdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cdc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1e4      	bne.n	800cd98 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3308      	adds	r3, #8
 800cdd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd8:	e853 3f00 	ldrex	r3, [r3]
 800cddc:	623b      	str	r3, [r7, #32]
   return(result);
 800cdde:	6a3a      	ldr	r2, [r7, #32]
 800cde0:	4b54      	ldr	r3, [pc, #336]	; (800cf34 <HAL_UART_IRQHandler+0x738>)
 800cde2:	4013      	ands	r3, r2
 800cde4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3308      	adds	r3, #8
 800cdee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cdf2:	633a      	str	r2, [r7, #48]	; 0x30
 800cdf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdfa:	e841 2300 	strex	r3, r2, [r1]
 800cdfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1e3      	bne.n	800cdce <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2220      	movs	r2, #32
 800ce0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	e853 3f00 	ldrex	r3, [r3]
 800ce26:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f023 0310 	bic.w	r3, r3, #16
 800ce2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	461a      	mov	r2, r3
 800ce38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ce3c:	61fb      	str	r3, [r7, #28]
 800ce3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce40:	69b9      	ldr	r1, [r7, #24]
 800ce42:	69fa      	ldr	r2, [r7, #28]
 800ce44:	e841 2300 	strex	r3, r2, [r1]
 800ce48:	617b      	str	r3, [r7, #20]
   return(result);
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1e4      	bne.n	800ce1a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ce50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce54:	4619      	mov	r1, r3
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 f878 	bl	800cf4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce5c:	e063      	b.n	800cf26 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ce5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00e      	beq.n	800ce88 <HAL_UART_IRQHandler+0x68c>
 800ce6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d008      	beq.n	800ce88 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ce7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f001 fdbb 	bl	800e9fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce86:	e051      	b.n	800cf2c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ce88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d014      	beq.n	800cebe <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ce94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d105      	bne.n	800ceac <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d008      	beq.n	800cebe <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d03a      	beq.n	800cf2a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	4798      	blx	r3
    }
    return;
 800cebc:	e035      	b.n	800cf2a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d009      	beq.n	800cede <HAL_UART_IRQHandler+0x6e2>
 800ceca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d003      	beq.n	800cede <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f001 f908 	bl	800e0ec <UART_EndTransmit_IT>
    return;
 800cedc:	e026      	b.n	800cf2c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d009      	beq.n	800cefe <HAL_UART_IRQHandler+0x702>
 800ceea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ceee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d003      	beq.n	800cefe <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f001 fd94 	bl	800ea24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cefc:	e016      	b.n	800cf2c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cefe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d010      	beq.n	800cf2c <HAL_UART_IRQHandler+0x730>
 800cf0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	da0c      	bge.n	800cf2c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f001 fd7c 	bl	800ea10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf18:	e008      	b.n	800cf2c <HAL_UART_IRQHandler+0x730>
      return;
 800cf1a:	bf00      	nop
 800cf1c:	e006      	b.n	800cf2c <HAL_UART_IRQHandler+0x730>
    return;
 800cf1e:	bf00      	nop
 800cf20:	e004      	b.n	800cf2c <HAL_UART_IRQHandler+0x730>
      return;
 800cf22:	bf00      	nop
 800cf24:	e002      	b.n	800cf2c <HAL_UART_IRQHandler+0x730>
      return;
 800cf26:	bf00      	nop
 800cf28:	e000      	b.n	800cf2c <HAL_UART_IRQHandler+0x730>
    return;
 800cf2a:	bf00      	nop
  }
}
 800cf2c:	37e8      	adds	r7, #232	; 0xe8
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	effffffe 	.word	0xeffffffe

0800cf38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	460b      	mov	r3, r1
 800cf56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf58:	bf00      	nop
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf68:	b092      	sub	sp, #72	; 0x48
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	689a      	ldr	r2, [r3, #8]
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	691b      	ldr	r3, [r3, #16]
 800cf7c:	431a      	orrs	r2, r3
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	695b      	ldr	r3, [r3, #20]
 800cf82:	431a      	orrs	r2, r3
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	69db      	ldr	r3, [r3, #28]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	4bbe      	ldr	r3, [pc, #760]	; (800d28c <UART_SetConfig+0x328>)
 800cf94:	4013      	ands	r3, r2
 800cf96:	697a      	ldr	r2, [r7, #20]
 800cf98:	6812      	ldr	r2, [r2, #0]
 800cf9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf9c:	430b      	orrs	r3, r1
 800cf9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	68da      	ldr	r2, [r3, #12]
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	430a      	orrs	r2, r1
 800cfb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	699b      	ldr	r3, [r3, #24]
 800cfba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4ab3      	ldr	r2, [pc, #716]	; (800d290 <UART_SetConfig+0x32c>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d004      	beq.n	800cfd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	689a      	ldr	r2, [r3, #8]
 800cfd6:	4baf      	ldr	r3, [pc, #700]	; (800d294 <UART_SetConfig+0x330>)
 800cfd8:	4013      	ands	r3, r2
 800cfda:	697a      	ldr	r2, [r7, #20]
 800cfdc:	6812      	ldr	r2, [r2, #0]
 800cfde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfe0:	430b      	orrs	r3, r1
 800cfe2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfea:	f023 010f 	bic.w	r1, r3, #15
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	430a      	orrs	r2, r1
 800cff8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4aa6      	ldr	r2, [pc, #664]	; (800d298 <UART_SetConfig+0x334>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d177      	bne.n	800d0f4 <UART_SetConfig+0x190>
 800d004:	4ba5      	ldr	r3, [pc, #660]	; (800d29c <UART_SetConfig+0x338>)
 800d006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d00c:	2b28      	cmp	r3, #40	; 0x28
 800d00e:	d86d      	bhi.n	800d0ec <UART_SetConfig+0x188>
 800d010:	a201      	add	r2, pc, #4	; (adr r2, 800d018 <UART_SetConfig+0xb4>)
 800d012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d016:	bf00      	nop
 800d018:	0800d0bd 	.word	0x0800d0bd
 800d01c:	0800d0ed 	.word	0x0800d0ed
 800d020:	0800d0ed 	.word	0x0800d0ed
 800d024:	0800d0ed 	.word	0x0800d0ed
 800d028:	0800d0ed 	.word	0x0800d0ed
 800d02c:	0800d0ed 	.word	0x0800d0ed
 800d030:	0800d0ed 	.word	0x0800d0ed
 800d034:	0800d0ed 	.word	0x0800d0ed
 800d038:	0800d0c5 	.word	0x0800d0c5
 800d03c:	0800d0ed 	.word	0x0800d0ed
 800d040:	0800d0ed 	.word	0x0800d0ed
 800d044:	0800d0ed 	.word	0x0800d0ed
 800d048:	0800d0ed 	.word	0x0800d0ed
 800d04c:	0800d0ed 	.word	0x0800d0ed
 800d050:	0800d0ed 	.word	0x0800d0ed
 800d054:	0800d0ed 	.word	0x0800d0ed
 800d058:	0800d0cd 	.word	0x0800d0cd
 800d05c:	0800d0ed 	.word	0x0800d0ed
 800d060:	0800d0ed 	.word	0x0800d0ed
 800d064:	0800d0ed 	.word	0x0800d0ed
 800d068:	0800d0ed 	.word	0x0800d0ed
 800d06c:	0800d0ed 	.word	0x0800d0ed
 800d070:	0800d0ed 	.word	0x0800d0ed
 800d074:	0800d0ed 	.word	0x0800d0ed
 800d078:	0800d0d5 	.word	0x0800d0d5
 800d07c:	0800d0ed 	.word	0x0800d0ed
 800d080:	0800d0ed 	.word	0x0800d0ed
 800d084:	0800d0ed 	.word	0x0800d0ed
 800d088:	0800d0ed 	.word	0x0800d0ed
 800d08c:	0800d0ed 	.word	0x0800d0ed
 800d090:	0800d0ed 	.word	0x0800d0ed
 800d094:	0800d0ed 	.word	0x0800d0ed
 800d098:	0800d0dd 	.word	0x0800d0dd
 800d09c:	0800d0ed 	.word	0x0800d0ed
 800d0a0:	0800d0ed 	.word	0x0800d0ed
 800d0a4:	0800d0ed 	.word	0x0800d0ed
 800d0a8:	0800d0ed 	.word	0x0800d0ed
 800d0ac:	0800d0ed 	.word	0x0800d0ed
 800d0b0:	0800d0ed 	.word	0x0800d0ed
 800d0b4:	0800d0ed 	.word	0x0800d0ed
 800d0b8:	0800d0e5 	.word	0x0800d0e5
 800d0bc:	2301      	movs	r3, #1
 800d0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0c2:	e222      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d0c4:	2304      	movs	r3, #4
 800d0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ca:	e21e      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d0cc:	2308      	movs	r3, #8
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0d2:	e21a      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d0d4:	2310      	movs	r3, #16
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0da:	e216      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d0dc:	2320      	movs	r3, #32
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0e2:	e212      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d0e4:	2340      	movs	r3, #64	; 0x40
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ea:	e20e      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d0ec:	2380      	movs	r3, #128	; 0x80
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0f2:	e20a      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a69      	ldr	r2, [pc, #420]	; (800d2a0 <UART_SetConfig+0x33c>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d130      	bne.n	800d160 <UART_SetConfig+0x1fc>
 800d0fe:	4b67      	ldr	r3, [pc, #412]	; (800d29c <UART_SetConfig+0x338>)
 800d100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d102:	f003 0307 	and.w	r3, r3, #7
 800d106:	2b05      	cmp	r3, #5
 800d108:	d826      	bhi.n	800d158 <UART_SetConfig+0x1f4>
 800d10a:	a201      	add	r2, pc, #4	; (adr r2, 800d110 <UART_SetConfig+0x1ac>)
 800d10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d110:	0800d129 	.word	0x0800d129
 800d114:	0800d131 	.word	0x0800d131
 800d118:	0800d139 	.word	0x0800d139
 800d11c:	0800d141 	.word	0x0800d141
 800d120:	0800d149 	.word	0x0800d149
 800d124:	0800d151 	.word	0x0800d151
 800d128:	2300      	movs	r3, #0
 800d12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12e:	e1ec      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d130:	2304      	movs	r3, #4
 800d132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d136:	e1e8      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d138:	2308      	movs	r3, #8
 800d13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13e:	e1e4      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d140:	2310      	movs	r3, #16
 800d142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d146:	e1e0      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d148:	2320      	movs	r3, #32
 800d14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d14e:	e1dc      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d150:	2340      	movs	r3, #64	; 0x40
 800d152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d156:	e1d8      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d158:	2380      	movs	r3, #128	; 0x80
 800d15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d15e:	e1d4      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a4f      	ldr	r2, [pc, #316]	; (800d2a4 <UART_SetConfig+0x340>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d130      	bne.n	800d1cc <UART_SetConfig+0x268>
 800d16a:	4b4c      	ldr	r3, [pc, #304]	; (800d29c <UART_SetConfig+0x338>)
 800d16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d16e:	f003 0307 	and.w	r3, r3, #7
 800d172:	2b05      	cmp	r3, #5
 800d174:	d826      	bhi.n	800d1c4 <UART_SetConfig+0x260>
 800d176:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <UART_SetConfig+0x218>)
 800d178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17c:	0800d195 	.word	0x0800d195
 800d180:	0800d19d 	.word	0x0800d19d
 800d184:	0800d1a5 	.word	0x0800d1a5
 800d188:	0800d1ad 	.word	0x0800d1ad
 800d18c:	0800d1b5 	.word	0x0800d1b5
 800d190:	0800d1bd 	.word	0x0800d1bd
 800d194:	2300      	movs	r3, #0
 800d196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d19a:	e1b6      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d19c:	2304      	movs	r3, #4
 800d19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1a2:	e1b2      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d1a4:	2308      	movs	r3, #8
 800d1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1aa:	e1ae      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d1ac:	2310      	movs	r3, #16
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1b2:	e1aa      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d1b4:	2320      	movs	r3, #32
 800d1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ba:	e1a6      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d1bc:	2340      	movs	r3, #64	; 0x40
 800d1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1c2:	e1a2      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d1c4:	2380      	movs	r3, #128	; 0x80
 800d1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ca:	e19e      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a35      	ldr	r2, [pc, #212]	; (800d2a8 <UART_SetConfig+0x344>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d130      	bne.n	800d238 <UART_SetConfig+0x2d4>
 800d1d6:	4b31      	ldr	r3, [pc, #196]	; (800d29c <UART_SetConfig+0x338>)
 800d1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1da:	f003 0307 	and.w	r3, r3, #7
 800d1de:	2b05      	cmp	r3, #5
 800d1e0:	d826      	bhi.n	800d230 <UART_SetConfig+0x2cc>
 800d1e2:	a201      	add	r2, pc, #4	; (adr r2, 800d1e8 <UART_SetConfig+0x284>)
 800d1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e8:	0800d201 	.word	0x0800d201
 800d1ec:	0800d209 	.word	0x0800d209
 800d1f0:	0800d211 	.word	0x0800d211
 800d1f4:	0800d219 	.word	0x0800d219
 800d1f8:	0800d221 	.word	0x0800d221
 800d1fc:	0800d229 	.word	0x0800d229
 800d200:	2300      	movs	r3, #0
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d206:	e180      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d208:	2304      	movs	r3, #4
 800d20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d20e:	e17c      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d210:	2308      	movs	r3, #8
 800d212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d216:	e178      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d218:	2310      	movs	r3, #16
 800d21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d21e:	e174      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d220:	2320      	movs	r3, #32
 800d222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d226:	e170      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d228:	2340      	movs	r3, #64	; 0x40
 800d22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d22e:	e16c      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d230:	2380      	movs	r3, #128	; 0x80
 800d232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d236:	e168      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a1b      	ldr	r2, [pc, #108]	; (800d2ac <UART_SetConfig+0x348>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d142      	bne.n	800d2c8 <UART_SetConfig+0x364>
 800d242:	4b16      	ldr	r3, [pc, #88]	; (800d29c <UART_SetConfig+0x338>)
 800d244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d246:	f003 0307 	and.w	r3, r3, #7
 800d24a:	2b05      	cmp	r3, #5
 800d24c:	d838      	bhi.n	800d2c0 <UART_SetConfig+0x35c>
 800d24e:	a201      	add	r2, pc, #4	; (adr r2, 800d254 <UART_SetConfig+0x2f0>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d26d 	.word	0x0800d26d
 800d258:	0800d275 	.word	0x0800d275
 800d25c:	0800d27d 	.word	0x0800d27d
 800d260:	0800d285 	.word	0x0800d285
 800d264:	0800d2b1 	.word	0x0800d2b1
 800d268:	0800d2b9 	.word	0x0800d2b9
 800d26c:	2300      	movs	r3, #0
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d272:	e14a      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d274:	2304      	movs	r3, #4
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d27a:	e146      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d27c:	2308      	movs	r3, #8
 800d27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d282:	e142      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d284:	2310      	movs	r3, #16
 800d286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d28a:	e13e      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d28c:	cfff69f3 	.word	0xcfff69f3
 800d290:	58000c00 	.word	0x58000c00
 800d294:	11fff4ff 	.word	0x11fff4ff
 800d298:	40011000 	.word	0x40011000
 800d29c:	58024400 	.word	0x58024400
 800d2a0:	40004400 	.word	0x40004400
 800d2a4:	40004800 	.word	0x40004800
 800d2a8:	40004c00 	.word	0x40004c00
 800d2ac:	40005000 	.word	0x40005000
 800d2b0:	2320      	movs	r3, #32
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b6:	e128      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d2b8:	2340      	movs	r3, #64	; 0x40
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2be:	e124      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d2c0:	2380      	movs	r3, #128	; 0x80
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c6:	e120      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4acb      	ldr	r2, [pc, #812]	; (800d5fc <UART_SetConfig+0x698>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d176      	bne.n	800d3c0 <UART_SetConfig+0x45c>
 800d2d2:	4bcb      	ldr	r3, [pc, #812]	; (800d600 <UART_SetConfig+0x69c>)
 800d2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d2da:	2b28      	cmp	r3, #40	; 0x28
 800d2dc:	d86c      	bhi.n	800d3b8 <UART_SetConfig+0x454>
 800d2de:	a201      	add	r2, pc, #4	; (adr r2, 800d2e4 <UART_SetConfig+0x380>)
 800d2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e4:	0800d389 	.word	0x0800d389
 800d2e8:	0800d3b9 	.word	0x0800d3b9
 800d2ec:	0800d3b9 	.word	0x0800d3b9
 800d2f0:	0800d3b9 	.word	0x0800d3b9
 800d2f4:	0800d3b9 	.word	0x0800d3b9
 800d2f8:	0800d3b9 	.word	0x0800d3b9
 800d2fc:	0800d3b9 	.word	0x0800d3b9
 800d300:	0800d3b9 	.word	0x0800d3b9
 800d304:	0800d391 	.word	0x0800d391
 800d308:	0800d3b9 	.word	0x0800d3b9
 800d30c:	0800d3b9 	.word	0x0800d3b9
 800d310:	0800d3b9 	.word	0x0800d3b9
 800d314:	0800d3b9 	.word	0x0800d3b9
 800d318:	0800d3b9 	.word	0x0800d3b9
 800d31c:	0800d3b9 	.word	0x0800d3b9
 800d320:	0800d3b9 	.word	0x0800d3b9
 800d324:	0800d399 	.word	0x0800d399
 800d328:	0800d3b9 	.word	0x0800d3b9
 800d32c:	0800d3b9 	.word	0x0800d3b9
 800d330:	0800d3b9 	.word	0x0800d3b9
 800d334:	0800d3b9 	.word	0x0800d3b9
 800d338:	0800d3b9 	.word	0x0800d3b9
 800d33c:	0800d3b9 	.word	0x0800d3b9
 800d340:	0800d3b9 	.word	0x0800d3b9
 800d344:	0800d3a1 	.word	0x0800d3a1
 800d348:	0800d3b9 	.word	0x0800d3b9
 800d34c:	0800d3b9 	.word	0x0800d3b9
 800d350:	0800d3b9 	.word	0x0800d3b9
 800d354:	0800d3b9 	.word	0x0800d3b9
 800d358:	0800d3b9 	.word	0x0800d3b9
 800d35c:	0800d3b9 	.word	0x0800d3b9
 800d360:	0800d3b9 	.word	0x0800d3b9
 800d364:	0800d3a9 	.word	0x0800d3a9
 800d368:	0800d3b9 	.word	0x0800d3b9
 800d36c:	0800d3b9 	.word	0x0800d3b9
 800d370:	0800d3b9 	.word	0x0800d3b9
 800d374:	0800d3b9 	.word	0x0800d3b9
 800d378:	0800d3b9 	.word	0x0800d3b9
 800d37c:	0800d3b9 	.word	0x0800d3b9
 800d380:	0800d3b9 	.word	0x0800d3b9
 800d384:	0800d3b1 	.word	0x0800d3b1
 800d388:	2301      	movs	r3, #1
 800d38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d38e:	e0bc      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d390:	2304      	movs	r3, #4
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d396:	e0b8      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d398:	2308      	movs	r3, #8
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d39e:	e0b4      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3a6:	e0b0      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d3a8:	2320      	movs	r3, #32
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ae:	e0ac      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d3b0:	2340      	movs	r3, #64	; 0x40
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3b6:	e0a8      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d3b8:	2380      	movs	r3, #128	; 0x80
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3be:	e0a4      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a8f      	ldr	r2, [pc, #572]	; (800d604 <UART_SetConfig+0x6a0>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d130      	bne.n	800d42c <UART_SetConfig+0x4c8>
 800d3ca:	4b8d      	ldr	r3, [pc, #564]	; (800d600 <UART_SetConfig+0x69c>)
 800d3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3ce:	f003 0307 	and.w	r3, r3, #7
 800d3d2:	2b05      	cmp	r3, #5
 800d3d4:	d826      	bhi.n	800d424 <UART_SetConfig+0x4c0>
 800d3d6:	a201      	add	r2, pc, #4	; (adr r2, 800d3dc <UART_SetConfig+0x478>)
 800d3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3dc:	0800d3f5 	.word	0x0800d3f5
 800d3e0:	0800d3fd 	.word	0x0800d3fd
 800d3e4:	0800d405 	.word	0x0800d405
 800d3e8:	0800d40d 	.word	0x0800d40d
 800d3ec:	0800d415 	.word	0x0800d415
 800d3f0:	0800d41d 	.word	0x0800d41d
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fa:	e086      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d3fc:	2304      	movs	r3, #4
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d402:	e082      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d404:	2308      	movs	r3, #8
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40a:	e07e      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d40c:	2310      	movs	r3, #16
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d412:	e07a      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d414:	2320      	movs	r3, #32
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d41a:	e076      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d41c:	2340      	movs	r3, #64	; 0x40
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d422:	e072      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d424:	2380      	movs	r3, #128	; 0x80
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d42a:	e06e      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a75      	ldr	r2, [pc, #468]	; (800d608 <UART_SetConfig+0x6a4>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d130      	bne.n	800d498 <UART_SetConfig+0x534>
 800d436:	4b72      	ldr	r3, [pc, #456]	; (800d600 <UART_SetConfig+0x69c>)
 800d438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d43a:	f003 0307 	and.w	r3, r3, #7
 800d43e:	2b05      	cmp	r3, #5
 800d440:	d826      	bhi.n	800d490 <UART_SetConfig+0x52c>
 800d442:	a201      	add	r2, pc, #4	; (adr r2, 800d448 <UART_SetConfig+0x4e4>)
 800d444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d448:	0800d461 	.word	0x0800d461
 800d44c:	0800d469 	.word	0x0800d469
 800d450:	0800d471 	.word	0x0800d471
 800d454:	0800d479 	.word	0x0800d479
 800d458:	0800d481 	.word	0x0800d481
 800d45c:	0800d489 	.word	0x0800d489
 800d460:	2300      	movs	r3, #0
 800d462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d466:	e050      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d468:	2304      	movs	r3, #4
 800d46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46e:	e04c      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d470:	2308      	movs	r3, #8
 800d472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d476:	e048      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d478:	2310      	movs	r3, #16
 800d47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d47e:	e044      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d480:	2320      	movs	r3, #32
 800d482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d486:	e040      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d488:	2340      	movs	r3, #64	; 0x40
 800d48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d48e:	e03c      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d490:	2380      	movs	r3, #128	; 0x80
 800d492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d496:	e038      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a5b      	ldr	r2, [pc, #364]	; (800d60c <UART_SetConfig+0x6a8>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d130      	bne.n	800d504 <UART_SetConfig+0x5a0>
 800d4a2:	4b57      	ldr	r3, [pc, #348]	; (800d600 <UART_SetConfig+0x69c>)
 800d4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4a6:	f003 0307 	and.w	r3, r3, #7
 800d4aa:	2b05      	cmp	r3, #5
 800d4ac:	d826      	bhi.n	800d4fc <UART_SetConfig+0x598>
 800d4ae:	a201      	add	r2, pc, #4	; (adr r2, 800d4b4 <UART_SetConfig+0x550>)
 800d4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b4:	0800d4cd 	.word	0x0800d4cd
 800d4b8:	0800d4d5 	.word	0x0800d4d5
 800d4bc:	0800d4dd 	.word	0x0800d4dd
 800d4c0:	0800d4e5 	.word	0x0800d4e5
 800d4c4:	0800d4ed 	.word	0x0800d4ed
 800d4c8:	0800d4f5 	.word	0x0800d4f5
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d2:	e01a      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d4d4:	2304      	movs	r3, #4
 800d4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4da:	e016      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d4dc:	2308      	movs	r3, #8
 800d4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4e2:	e012      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d4e4:	2310      	movs	r3, #16
 800d4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ea:	e00e      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d4ec:	2320      	movs	r3, #32
 800d4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4f2:	e00a      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d4f4:	2340      	movs	r3, #64	; 0x40
 800d4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4fa:	e006      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d4fc:	2380      	movs	r3, #128	; 0x80
 800d4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d502:	e002      	b.n	800d50a <UART_SetConfig+0x5a6>
 800d504:	2380      	movs	r3, #128	; 0x80
 800d506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a3f      	ldr	r2, [pc, #252]	; (800d60c <UART_SetConfig+0x6a8>)
 800d510:	4293      	cmp	r3, r2
 800d512:	f040 80f8 	bne.w	800d706 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d516:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d51a:	2b20      	cmp	r3, #32
 800d51c:	dc46      	bgt.n	800d5ac <UART_SetConfig+0x648>
 800d51e:	2b02      	cmp	r3, #2
 800d520:	f2c0 8082 	blt.w	800d628 <UART_SetConfig+0x6c4>
 800d524:	3b02      	subs	r3, #2
 800d526:	2b1e      	cmp	r3, #30
 800d528:	d87e      	bhi.n	800d628 <UART_SetConfig+0x6c4>
 800d52a:	a201      	add	r2, pc, #4	; (adr r2, 800d530 <UART_SetConfig+0x5cc>)
 800d52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d530:	0800d5b3 	.word	0x0800d5b3
 800d534:	0800d629 	.word	0x0800d629
 800d538:	0800d5bb 	.word	0x0800d5bb
 800d53c:	0800d629 	.word	0x0800d629
 800d540:	0800d629 	.word	0x0800d629
 800d544:	0800d629 	.word	0x0800d629
 800d548:	0800d5cb 	.word	0x0800d5cb
 800d54c:	0800d629 	.word	0x0800d629
 800d550:	0800d629 	.word	0x0800d629
 800d554:	0800d629 	.word	0x0800d629
 800d558:	0800d629 	.word	0x0800d629
 800d55c:	0800d629 	.word	0x0800d629
 800d560:	0800d629 	.word	0x0800d629
 800d564:	0800d629 	.word	0x0800d629
 800d568:	0800d5db 	.word	0x0800d5db
 800d56c:	0800d629 	.word	0x0800d629
 800d570:	0800d629 	.word	0x0800d629
 800d574:	0800d629 	.word	0x0800d629
 800d578:	0800d629 	.word	0x0800d629
 800d57c:	0800d629 	.word	0x0800d629
 800d580:	0800d629 	.word	0x0800d629
 800d584:	0800d629 	.word	0x0800d629
 800d588:	0800d629 	.word	0x0800d629
 800d58c:	0800d629 	.word	0x0800d629
 800d590:	0800d629 	.word	0x0800d629
 800d594:	0800d629 	.word	0x0800d629
 800d598:	0800d629 	.word	0x0800d629
 800d59c:	0800d629 	.word	0x0800d629
 800d5a0:	0800d629 	.word	0x0800d629
 800d5a4:	0800d629 	.word	0x0800d629
 800d5a8:	0800d61b 	.word	0x0800d61b
 800d5ac:	2b40      	cmp	r3, #64	; 0x40
 800d5ae:	d037      	beq.n	800d620 <UART_SetConfig+0x6bc>
 800d5b0:	e03a      	b.n	800d628 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d5b2:	f7fc fbc9 	bl	8009d48 <HAL_RCCEx_GetD3PCLK1Freq>
 800d5b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d5b8:	e03c      	b.n	800d634 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fc fbd8 	bl	8009d74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5c8:	e034      	b.n	800d634 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5ca:	f107 0318 	add.w	r3, r7, #24
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7fc fd24 	bl	800a01c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5d8:	e02c      	b.n	800d634 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5da:	4b09      	ldr	r3, [pc, #36]	; (800d600 <UART_SetConfig+0x69c>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f003 0320 	and.w	r3, r3, #32
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d016      	beq.n	800d614 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5e6:	4b06      	ldr	r3, [pc, #24]	; (800d600 <UART_SetConfig+0x69c>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	08db      	lsrs	r3, r3, #3
 800d5ec:	f003 0303 	and.w	r3, r3, #3
 800d5f0:	4a07      	ldr	r2, [pc, #28]	; (800d610 <UART_SetConfig+0x6ac>)
 800d5f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5f8:	e01c      	b.n	800d634 <UART_SetConfig+0x6d0>
 800d5fa:	bf00      	nop
 800d5fc:	40011400 	.word	0x40011400
 800d600:	58024400 	.word	0x58024400
 800d604:	40007800 	.word	0x40007800
 800d608:	40007c00 	.word	0x40007c00
 800d60c:	58000c00 	.word	0x58000c00
 800d610:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d614:	4b9d      	ldr	r3, [pc, #628]	; (800d88c <UART_SetConfig+0x928>)
 800d616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d618:	e00c      	b.n	800d634 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d61a:	4b9d      	ldr	r3, [pc, #628]	; (800d890 <UART_SetConfig+0x92c>)
 800d61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d61e:	e009      	b.n	800d634 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d626:	e005      	b.n	800d634 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d628:	2300      	movs	r3, #0
 800d62a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d632:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d636:	2b00      	cmp	r3, #0
 800d638:	f000 81de 	beq.w	800d9f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d640:	4a94      	ldr	r2, [pc, #592]	; (800d894 <UART_SetConfig+0x930>)
 800d642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d646:	461a      	mov	r2, r3
 800d648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d64a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d64e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	4613      	mov	r3, r2
 800d656:	005b      	lsls	r3, r3, #1
 800d658:	4413      	add	r3, r2
 800d65a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d305      	bcc.n	800d66c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d668:	429a      	cmp	r2, r3
 800d66a:	d903      	bls.n	800d674 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d672:	e1c1      	b.n	800d9f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d676:	2200      	movs	r2, #0
 800d678:	60bb      	str	r3, [r7, #8]
 800d67a:	60fa      	str	r2, [r7, #12]
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d680:	4a84      	ldr	r2, [pc, #528]	; (800d894 <UART_SetConfig+0x930>)
 800d682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d686:	b29b      	uxth	r3, r3
 800d688:	2200      	movs	r2, #0
 800d68a:	603b      	str	r3, [r7, #0]
 800d68c:	607a      	str	r2, [r7, #4]
 800d68e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d692:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d696:	f7f3 f837 	bl	8000708 <__aeabi_uldivmod>
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	4610      	mov	r0, r2
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f04f 0200 	mov.w	r2, #0
 800d6a6:	f04f 0300 	mov.w	r3, #0
 800d6aa:	020b      	lsls	r3, r1, #8
 800d6ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d6b0:	0202      	lsls	r2, r0, #8
 800d6b2:	6979      	ldr	r1, [r7, #20]
 800d6b4:	6849      	ldr	r1, [r1, #4]
 800d6b6:	0849      	lsrs	r1, r1, #1
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	460c      	mov	r4, r1
 800d6bc:	4605      	mov	r5, r0
 800d6be:	eb12 0804 	adds.w	r8, r2, r4
 800d6c2:	eb43 0905 	adc.w	r9, r3, r5
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	469a      	mov	sl, r3
 800d6ce:	4693      	mov	fp, r2
 800d6d0:	4652      	mov	r2, sl
 800d6d2:	465b      	mov	r3, fp
 800d6d4:	4640      	mov	r0, r8
 800d6d6:	4649      	mov	r1, r9
 800d6d8:	f7f3 f816 	bl	8000708 <__aeabi_uldivmod>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	460b      	mov	r3, r1
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d6ea:	d308      	bcc.n	800d6fe <UART_SetConfig+0x79a>
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6f2:	d204      	bcs.n	800d6fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6fa:	60da      	str	r2, [r3, #12]
 800d6fc:	e17c      	b.n	800d9f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d704:	e178      	b.n	800d9f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	69db      	ldr	r3, [r3, #28]
 800d70a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d70e:	f040 80c5 	bne.w	800d89c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d712:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d716:	2b20      	cmp	r3, #32
 800d718:	dc48      	bgt.n	800d7ac <UART_SetConfig+0x848>
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	db7b      	blt.n	800d816 <UART_SetConfig+0x8b2>
 800d71e:	2b20      	cmp	r3, #32
 800d720:	d879      	bhi.n	800d816 <UART_SetConfig+0x8b2>
 800d722:	a201      	add	r2, pc, #4	; (adr r2, 800d728 <UART_SetConfig+0x7c4>)
 800d724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d728:	0800d7b3 	.word	0x0800d7b3
 800d72c:	0800d7bb 	.word	0x0800d7bb
 800d730:	0800d817 	.word	0x0800d817
 800d734:	0800d817 	.word	0x0800d817
 800d738:	0800d7c3 	.word	0x0800d7c3
 800d73c:	0800d817 	.word	0x0800d817
 800d740:	0800d817 	.word	0x0800d817
 800d744:	0800d817 	.word	0x0800d817
 800d748:	0800d7d3 	.word	0x0800d7d3
 800d74c:	0800d817 	.word	0x0800d817
 800d750:	0800d817 	.word	0x0800d817
 800d754:	0800d817 	.word	0x0800d817
 800d758:	0800d817 	.word	0x0800d817
 800d75c:	0800d817 	.word	0x0800d817
 800d760:	0800d817 	.word	0x0800d817
 800d764:	0800d817 	.word	0x0800d817
 800d768:	0800d7e3 	.word	0x0800d7e3
 800d76c:	0800d817 	.word	0x0800d817
 800d770:	0800d817 	.word	0x0800d817
 800d774:	0800d817 	.word	0x0800d817
 800d778:	0800d817 	.word	0x0800d817
 800d77c:	0800d817 	.word	0x0800d817
 800d780:	0800d817 	.word	0x0800d817
 800d784:	0800d817 	.word	0x0800d817
 800d788:	0800d817 	.word	0x0800d817
 800d78c:	0800d817 	.word	0x0800d817
 800d790:	0800d817 	.word	0x0800d817
 800d794:	0800d817 	.word	0x0800d817
 800d798:	0800d817 	.word	0x0800d817
 800d79c:	0800d817 	.word	0x0800d817
 800d7a0:	0800d817 	.word	0x0800d817
 800d7a4:	0800d817 	.word	0x0800d817
 800d7a8:	0800d809 	.word	0x0800d809
 800d7ac:	2b40      	cmp	r3, #64	; 0x40
 800d7ae:	d02e      	beq.n	800d80e <UART_SetConfig+0x8aa>
 800d7b0:	e031      	b.n	800d816 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7b2:	f7fb fb57 	bl	8008e64 <HAL_RCC_GetPCLK1Freq>
 800d7b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d7b8:	e033      	b.n	800d822 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7ba:	f7fb fb69 	bl	8008e90 <HAL_RCC_GetPCLK2Freq>
 800d7be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d7c0:	e02f      	b.n	800d822 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fc fad4 	bl	8009d74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7d0:	e027      	b.n	800d822 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7d2:	f107 0318 	add.w	r3, r7, #24
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fc fc20 	bl	800a01c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7e0:	e01f      	b.n	800d822 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7e2:	4b2d      	ldr	r3, [pc, #180]	; (800d898 <UART_SetConfig+0x934>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f003 0320 	and.w	r3, r3, #32
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d009      	beq.n	800d802 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7ee:	4b2a      	ldr	r3, [pc, #168]	; (800d898 <UART_SetConfig+0x934>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	08db      	lsrs	r3, r3, #3
 800d7f4:	f003 0303 	and.w	r3, r3, #3
 800d7f8:	4a24      	ldr	r2, [pc, #144]	; (800d88c <UART_SetConfig+0x928>)
 800d7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800d7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d800:	e00f      	b.n	800d822 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d802:	4b22      	ldr	r3, [pc, #136]	; (800d88c <UART_SetConfig+0x928>)
 800d804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d806:	e00c      	b.n	800d822 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d808:	4b21      	ldr	r3, [pc, #132]	; (800d890 <UART_SetConfig+0x92c>)
 800d80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d80c:	e009      	b.n	800d822 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d80e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d814:	e005      	b.n	800d822 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d816:	2300      	movs	r3, #0
 800d818:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d820:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 80e7 	beq.w	800d9f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82e:	4a19      	ldr	r2, [pc, #100]	; (800d894 <UART_SetConfig+0x930>)
 800d830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d834:	461a      	mov	r2, r3
 800d836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d838:	fbb3 f3f2 	udiv	r3, r3, r2
 800d83c:	005a      	lsls	r2, r3, #1
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	085b      	lsrs	r3, r3, #1
 800d844:	441a      	add	r2, r3
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d84e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d852:	2b0f      	cmp	r3, #15
 800d854:	d916      	bls.n	800d884 <UART_SetConfig+0x920>
 800d856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d85c:	d212      	bcs.n	800d884 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d860:	b29b      	uxth	r3, r3
 800d862:	f023 030f 	bic.w	r3, r3, #15
 800d866:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86a:	085b      	lsrs	r3, r3, #1
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	f003 0307 	and.w	r3, r3, #7
 800d872:	b29a      	uxth	r2, r3
 800d874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d876:	4313      	orrs	r3, r2
 800d878:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d880:	60da      	str	r2, [r3, #12]
 800d882:	e0b9      	b.n	800d9f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d884:	2301      	movs	r3, #1
 800d886:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d88a:	e0b5      	b.n	800d9f8 <UART_SetConfig+0xa94>
 800d88c:	03d09000 	.word	0x03d09000
 800d890:	003d0900 	.word	0x003d0900
 800d894:	08012360 	.word	0x08012360
 800d898:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d89c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d8a0:	2b20      	cmp	r3, #32
 800d8a2:	dc49      	bgt.n	800d938 <UART_SetConfig+0x9d4>
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	db7c      	blt.n	800d9a2 <UART_SetConfig+0xa3e>
 800d8a8:	2b20      	cmp	r3, #32
 800d8aa:	d87a      	bhi.n	800d9a2 <UART_SetConfig+0xa3e>
 800d8ac:	a201      	add	r2, pc, #4	; (adr r2, 800d8b4 <UART_SetConfig+0x950>)
 800d8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b2:	bf00      	nop
 800d8b4:	0800d93f 	.word	0x0800d93f
 800d8b8:	0800d947 	.word	0x0800d947
 800d8bc:	0800d9a3 	.word	0x0800d9a3
 800d8c0:	0800d9a3 	.word	0x0800d9a3
 800d8c4:	0800d94f 	.word	0x0800d94f
 800d8c8:	0800d9a3 	.word	0x0800d9a3
 800d8cc:	0800d9a3 	.word	0x0800d9a3
 800d8d0:	0800d9a3 	.word	0x0800d9a3
 800d8d4:	0800d95f 	.word	0x0800d95f
 800d8d8:	0800d9a3 	.word	0x0800d9a3
 800d8dc:	0800d9a3 	.word	0x0800d9a3
 800d8e0:	0800d9a3 	.word	0x0800d9a3
 800d8e4:	0800d9a3 	.word	0x0800d9a3
 800d8e8:	0800d9a3 	.word	0x0800d9a3
 800d8ec:	0800d9a3 	.word	0x0800d9a3
 800d8f0:	0800d9a3 	.word	0x0800d9a3
 800d8f4:	0800d96f 	.word	0x0800d96f
 800d8f8:	0800d9a3 	.word	0x0800d9a3
 800d8fc:	0800d9a3 	.word	0x0800d9a3
 800d900:	0800d9a3 	.word	0x0800d9a3
 800d904:	0800d9a3 	.word	0x0800d9a3
 800d908:	0800d9a3 	.word	0x0800d9a3
 800d90c:	0800d9a3 	.word	0x0800d9a3
 800d910:	0800d9a3 	.word	0x0800d9a3
 800d914:	0800d9a3 	.word	0x0800d9a3
 800d918:	0800d9a3 	.word	0x0800d9a3
 800d91c:	0800d9a3 	.word	0x0800d9a3
 800d920:	0800d9a3 	.word	0x0800d9a3
 800d924:	0800d9a3 	.word	0x0800d9a3
 800d928:	0800d9a3 	.word	0x0800d9a3
 800d92c:	0800d9a3 	.word	0x0800d9a3
 800d930:	0800d9a3 	.word	0x0800d9a3
 800d934:	0800d995 	.word	0x0800d995
 800d938:	2b40      	cmp	r3, #64	; 0x40
 800d93a:	d02e      	beq.n	800d99a <UART_SetConfig+0xa36>
 800d93c:	e031      	b.n	800d9a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d93e:	f7fb fa91 	bl	8008e64 <HAL_RCC_GetPCLK1Freq>
 800d942:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d944:	e033      	b.n	800d9ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d946:	f7fb faa3 	bl	8008e90 <HAL_RCC_GetPCLK2Freq>
 800d94a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d94c:	e02f      	b.n	800d9ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d94e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d952:	4618      	mov	r0, r3
 800d954:	f7fc fa0e 	bl	8009d74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d95c:	e027      	b.n	800d9ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d95e:	f107 0318 	add.w	r3, r7, #24
 800d962:	4618      	mov	r0, r3
 800d964:	f7fc fb5a 	bl	800a01c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d96c:	e01f      	b.n	800d9ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d96e:	4b2d      	ldr	r3, [pc, #180]	; (800da24 <UART_SetConfig+0xac0>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f003 0320 	and.w	r3, r3, #32
 800d976:	2b00      	cmp	r3, #0
 800d978:	d009      	beq.n	800d98e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d97a:	4b2a      	ldr	r3, [pc, #168]	; (800da24 <UART_SetConfig+0xac0>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	08db      	lsrs	r3, r3, #3
 800d980:	f003 0303 	and.w	r3, r3, #3
 800d984:	4a28      	ldr	r2, [pc, #160]	; (800da28 <UART_SetConfig+0xac4>)
 800d986:	fa22 f303 	lsr.w	r3, r2, r3
 800d98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d98c:	e00f      	b.n	800d9ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d98e:	4b26      	ldr	r3, [pc, #152]	; (800da28 <UART_SetConfig+0xac4>)
 800d990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d992:	e00c      	b.n	800d9ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d994:	4b25      	ldr	r3, [pc, #148]	; (800da2c <UART_SetConfig+0xac8>)
 800d996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d998:	e009      	b.n	800d9ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d99a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9a0:	e005      	b.n	800d9ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d9ac:	bf00      	nop
    }

    if (pclk != 0U)
 800d9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d021      	beq.n	800d9f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b8:	4a1d      	ldr	r2, [pc, #116]	; (800da30 <UART_SetConfig+0xacc>)
 800d9ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	085b      	lsrs	r3, r3, #1
 800d9cc:	441a      	add	r2, r3
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9da:	2b0f      	cmp	r3, #15
 800d9dc:	d909      	bls.n	800d9f2 <UART_SetConfig+0xa8e>
 800d9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9e4:	d205      	bcs.n	800d9f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	60da      	str	r2, [r3, #12]
 800d9f0:	e002      	b.n	800d9f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	2201      	movs	r2, #1
 800da04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	2200      	movs	r2, #0
 800da0c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	2200      	movs	r2, #0
 800da12:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800da14:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3748      	adds	r7, #72	; 0x48
 800da1c:	46bd      	mov	sp, r7
 800da1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800da22:	bf00      	nop
 800da24:	58024400 	.word	0x58024400
 800da28:	03d09000 	.word	0x03d09000
 800da2c:	003d0900 	.word	0x003d0900
 800da30:	08012360 	.word	0x08012360

0800da34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da40:	f003 0301 	and.w	r3, r3, #1
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00a      	beq.n	800da5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	430a      	orrs	r2, r1
 800da5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da62:	f003 0302 	and.w	r3, r3, #2
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00a      	beq.n	800da80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	430a      	orrs	r2, r1
 800da7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da84:	f003 0304 	and.w	r3, r3, #4
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00a      	beq.n	800daa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	430a      	orrs	r2, r1
 800daa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa6:	f003 0308 	and.w	r3, r3, #8
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00a      	beq.n	800dac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	430a      	orrs	r2, r1
 800dac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac8:	f003 0310 	and.w	r3, r3, #16
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00a      	beq.n	800dae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	430a      	orrs	r2, r1
 800dae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daea:	f003 0320 	and.w	r3, r3, #32
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00a      	beq.n	800db08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	430a      	orrs	r2, r1
 800db06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db10:	2b00      	cmp	r3, #0
 800db12:	d01a      	beq.n	800db4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	430a      	orrs	r2, r1
 800db28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db32:	d10a      	bne.n	800db4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	430a      	orrs	r2, r1
 800db48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00a      	beq.n	800db6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	430a      	orrs	r2, r1
 800db6a:	605a      	str	r2, [r3, #4]
  }
}
 800db6c:	bf00      	nop
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b086      	sub	sp, #24
 800db7c:	af02      	add	r7, sp, #8
 800db7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db88:	f7f9 f8c6 	bl	8006d18 <HAL_GetTick>
 800db8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f003 0308 	and.w	r3, r3, #8
 800db98:	2b08      	cmp	r3, #8
 800db9a:	d10e      	bne.n	800dbba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2200      	movs	r2, #0
 800dba6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 f82f 	bl	800dc0e <UART_WaitOnFlagUntilTimeout>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d001      	beq.n	800dbba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	e025      	b.n	800dc06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 0304 	and.w	r3, r3, #4
 800dbc4:	2b04      	cmp	r3, #4
 800dbc6:	d10e      	bne.n	800dbe6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dbc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dbcc:	9300      	str	r3, [sp, #0]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 f819 	bl	800dc0e <UART_WaitOnFlagUntilTimeout>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d001      	beq.n	800dbe6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbe2:	2303      	movs	r3, #3
 800dbe4:	e00f      	b.n	800dc06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2220      	movs	r2, #32
 800dbea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2220      	movs	r2, #32
 800dbf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b09c      	sub	sp, #112	; 0x70
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	60f8      	str	r0, [r7, #12]
 800dc16:	60b9      	str	r1, [r7, #8]
 800dc18:	603b      	str	r3, [r7, #0]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc1e:	e0a9      	b.n	800dd74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc26:	f000 80a5 	beq.w	800dd74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc2a:	f7f9 f875 	bl	8006d18 <HAL_GetTick>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	1ad3      	subs	r3, r2, r3
 800dc34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d302      	bcc.n	800dc40 <UART_WaitOnFlagUntilTimeout+0x32>
 800dc3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d140      	bne.n	800dcc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc48:	e853 3f00 	ldrex	r3, [r3]
 800dc4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dc4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dc54:	667b      	str	r3, [r7, #100]	; 0x64
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc66:	e841 2300 	strex	r3, r2, [r1]
 800dc6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dc6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1e6      	bne.n	800dc40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	3308      	adds	r3, #8
 800dc78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc7c:	e853 3f00 	ldrex	r3, [r3]
 800dc80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc84:	f023 0301 	bic.w	r3, r3, #1
 800dc88:	663b      	str	r3, [r7, #96]	; 0x60
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	3308      	adds	r3, #8
 800dc90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dc92:	64ba      	str	r2, [r7, #72]	; 0x48
 800dc94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc9a:	e841 2300 	strex	r3, r2, [r1]
 800dc9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1e5      	bne.n	800dc72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2220      	movs	r2, #32
 800dcaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2220      	movs	r2, #32
 800dcb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dcbe:	2303      	movs	r3, #3
 800dcc0:	e069      	b.n	800dd96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f003 0304 	and.w	r3, r3, #4
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d051      	beq.n	800dd74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	69db      	ldr	r3, [r3, #28]
 800dcd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dcda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcde:	d149      	bne.n	800dd74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dce8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf2:	e853 3f00 	ldrex	r3, [r3]
 800dcf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dcfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	461a      	mov	r2, r3
 800dd06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd08:	637b      	str	r3, [r7, #52]	; 0x34
 800dd0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd10:	e841 2300 	strex	r3, r2, [r1]
 800dd14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d1e6      	bne.n	800dcea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	3308      	adds	r3, #8
 800dd22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	e853 3f00 	ldrex	r3, [r3]
 800dd2a:	613b      	str	r3, [r7, #16]
   return(result);
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	f023 0301 	bic.w	r3, r3, #1
 800dd32:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	3308      	adds	r3, #8
 800dd3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dd3c:	623a      	str	r2, [r7, #32]
 800dd3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd40:	69f9      	ldr	r1, [r7, #28]
 800dd42:	6a3a      	ldr	r2, [r7, #32]
 800dd44:	e841 2300 	strex	r3, r2, [r1]
 800dd48:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1e5      	bne.n	800dd1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2220      	movs	r2, #32
 800dd54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2220      	movs	r2, #32
 800dd5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2220      	movs	r2, #32
 800dd64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dd70:	2303      	movs	r3, #3
 800dd72:	e010      	b.n	800dd96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	69da      	ldr	r2, [r3, #28]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	4013      	ands	r3, r2
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	bf0c      	ite	eq
 800dd84:	2301      	moveq	r3, #1
 800dd86:	2300      	movne	r3, #0
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	79fb      	ldrb	r3, [r7, #7]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	f43f af46 	beq.w	800dc20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd94:	2300      	movs	r3, #0
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3770      	adds	r7, #112	; 0x70
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
	...

0800dda0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b0a3      	sub	sp, #140	; 0x8c
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	4613      	mov	r3, r2
 800ddac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	68ba      	ldr	r2, [r7, #8]
 800ddb2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	88fa      	ldrh	r2, [r7, #6]
 800ddb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	88fa      	ldrh	r2, [r7, #6]
 800ddc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddd2:	d10e      	bne.n	800ddf2 <UART_Start_Receive_IT+0x52>
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d105      	bne.n	800dde8 <UART_Start_Receive_IT+0x48>
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dde2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dde6:	e02d      	b.n	800de44 <UART_Start_Receive_IT+0xa4>
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	22ff      	movs	r2, #255	; 0xff
 800ddec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ddf0:	e028      	b.n	800de44 <UART_Start_Receive_IT+0xa4>
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10d      	bne.n	800de16 <UART_Start_Receive_IT+0x76>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d104      	bne.n	800de0c <UART_Start_Receive_IT+0x6c>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	22ff      	movs	r2, #255	; 0xff
 800de06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de0a:	e01b      	b.n	800de44 <UART_Start_Receive_IT+0xa4>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	227f      	movs	r2, #127	; 0x7f
 800de10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de14:	e016      	b.n	800de44 <UART_Start_Receive_IT+0xa4>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de1e:	d10d      	bne.n	800de3c <UART_Start_Receive_IT+0x9c>
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	691b      	ldr	r3, [r3, #16]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d104      	bne.n	800de32 <UART_Start_Receive_IT+0x92>
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	227f      	movs	r2, #127	; 0x7f
 800de2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de30:	e008      	b.n	800de44 <UART_Start_Receive_IT+0xa4>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	223f      	movs	r2, #63	; 0x3f
 800de36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de3a:	e003      	b.n	800de44 <UART_Start_Receive_IT+0xa4>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2200      	movs	r2, #0
 800de40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2222      	movs	r2, #34	; 0x22
 800de50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	3308      	adds	r3, #8
 800de5a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de5e:	e853 3f00 	ldrex	r3, [r3]
 800de62:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800de64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de66:	f043 0301 	orr.w	r3, r3, #1
 800de6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	3308      	adds	r3, #8
 800de74:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800de78:	673a      	str	r2, [r7, #112]	; 0x70
 800de7a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de7c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800de7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800de80:	e841 2300 	strex	r3, r2, [r1]
 800de84:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800de86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1e3      	bne.n	800de54 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de94:	d153      	bne.n	800df3e <UART_Start_Receive_IT+0x19e>
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800de9c:	88fa      	ldrh	r2, [r7, #6]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d34d      	bcc.n	800df3e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800deaa:	d107      	bne.n	800debc <UART_Start_Receive_IT+0x11c>
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	691b      	ldr	r3, [r3, #16]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d103      	bne.n	800debc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	4a4b      	ldr	r2, [pc, #300]	; (800dfe4 <UART_Start_Receive_IT+0x244>)
 800deb8:	671a      	str	r2, [r3, #112]	; 0x70
 800deba:	e002      	b.n	800dec2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	4a4a      	ldr	r2, [pc, #296]	; (800dfe8 <UART_Start_Receive_IT+0x248>)
 800dec0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d01a      	beq.n	800df08 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deda:	e853 3f00 	ldrex	r3, [r3]
 800dede:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	461a      	mov	r2, r3
 800def0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800def4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800def6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800defa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800defc:	e841 2300 	strex	r3, r2, [r1]
 800df00:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800df02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1e4      	bne.n	800ded2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	3308      	adds	r3, #8
 800df0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df12:	e853 3f00 	ldrex	r3, [r3]
 800df16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	3308      	adds	r3, #8
 800df26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800df28:	64ba      	str	r2, [r7, #72]	; 0x48
 800df2a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df30:	e841 2300 	strex	r3, r2, [r1]
 800df34:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800df36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1e5      	bne.n	800df08 <UART_Start_Receive_IT+0x168>
 800df3c:	e04a      	b.n	800dfd4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df46:	d107      	bne.n	800df58 <UART_Start_Receive_IT+0x1b8>
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d103      	bne.n	800df58 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	4a26      	ldr	r2, [pc, #152]	; (800dfec <UART_Start_Receive_IT+0x24c>)
 800df54:	671a      	str	r2, [r3, #112]	; 0x70
 800df56:	e002      	b.n	800df5e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	4a25      	ldr	r2, [pc, #148]	; (800dff0 <UART_Start_Receive_IT+0x250>)
 800df5c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2200      	movs	r2, #0
 800df62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	691b      	ldr	r3, [r3, #16]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d019      	beq.n	800dfa2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df76:	e853 3f00 	ldrex	r3, [r3]
 800df7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800df82:	677b      	str	r3, [r7, #116]	; 0x74
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	461a      	mov	r2, r3
 800df8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df8c:	637b      	str	r3, [r7, #52]	; 0x34
 800df8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df94:	e841 2300 	strex	r3, r2, [r1]
 800df98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800df9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1e6      	bne.n	800df6e <UART_Start_Receive_IT+0x1ce>
 800dfa0:	e018      	b.n	800dfd4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	e853 3f00 	ldrex	r3, [r3]
 800dfae:	613b      	str	r3, [r7, #16]
   return(result);
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	f043 0320 	orr.w	r3, r3, #32
 800dfb6:	67bb      	str	r3, [r7, #120]	; 0x78
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dfc0:	623b      	str	r3, [r7, #32]
 800dfc2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc4:	69f9      	ldr	r1, [r7, #28]
 800dfc6:	6a3a      	ldr	r2, [r7, #32]
 800dfc8:	e841 2300 	strex	r3, r2, [r1]
 800dfcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1e6      	bne.n	800dfa2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	378c      	adds	r7, #140	; 0x8c
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	0800e6fd 	.word	0x0800e6fd
 800dfe8:	0800e405 	.word	0x0800e405
 800dfec:	0800e2a3 	.word	0x0800e2a3
 800dff0:	0800e143 	.word	0x0800e143

0800dff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b095      	sub	sp, #84	; 0x54
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e004:	e853 3f00 	ldrex	r3, [r3]
 800e008:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e010:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	461a      	mov	r2, r3
 800e018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e01a:	643b      	str	r3, [r7, #64]	; 0x40
 800e01c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e022:	e841 2300 	strex	r3, r2, [r1]
 800e026:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d1e6      	bne.n	800dffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3308      	adds	r3, #8
 800e034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e036:	6a3b      	ldr	r3, [r7, #32]
 800e038:	e853 3f00 	ldrex	r3, [r3]
 800e03c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e03e:	69fa      	ldr	r2, [r7, #28]
 800e040:	4b1e      	ldr	r3, [pc, #120]	; (800e0bc <UART_EndRxTransfer+0xc8>)
 800e042:	4013      	ands	r3, r2
 800e044:	64bb      	str	r3, [r7, #72]	; 0x48
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	3308      	adds	r3, #8
 800e04c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e04e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e050:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e056:	e841 2300 	strex	r3, r2, [r1]
 800e05a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1e5      	bne.n	800e02e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e066:	2b01      	cmp	r3, #1
 800e068:	d118      	bne.n	800e09c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	e853 3f00 	ldrex	r3, [r3]
 800e076:	60bb      	str	r3, [r7, #8]
   return(result);
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	f023 0310 	bic.w	r3, r3, #16
 800e07e:	647b      	str	r3, [r7, #68]	; 0x44
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	461a      	mov	r2, r3
 800e086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e088:	61bb      	str	r3, [r7, #24]
 800e08a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e08c:	6979      	ldr	r1, [r7, #20]
 800e08e:	69ba      	ldr	r2, [r7, #24]
 800e090:	e841 2300 	strex	r3, r2, [r1]
 800e094:	613b      	str	r3, [r7, #16]
   return(result);
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d1e6      	bne.n	800e06a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2220      	movs	r2, #32
 800e0a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e0b0:	bf00      	nop
 800e0b2:	3754      	adds	r7, #84	; 0x54
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	effffffe 	.word	0xeffffffe

0800e0c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f7fe ff2a 	bl	800cf38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0e4:	bf00      	nop
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b088      	sub	sp, #32
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	e853 3f00 	ldrex	r3, [r3]
 800e100:	60bb      	str	r3, [r7, #8]
   return(result);
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e108:	61fb      	str	r3, [r7, #28]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	461a      	mov	r2, r3
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	61bb      	str	r3, [r7, #24]
 800e114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e116:	6979      	ldr	r1, [r7, #20]
 800e118:	69ba      	ldr	r2, [r7, #24]
 800e11a:	e841 2300 	strex	r3, r2, [r1]
 800e11e:	613b      	str	r3, [r7, #16]
   return(result);
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d1e6      	bne.n	800e0f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2220      	movs	r2, #32
 800e12a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7f4 ff33 	bl	8002fa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e13a:	bf00      	nop
 800e13c:	3720      	adds	r7, #32
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b096      	sub	sp, #88	; 0x58
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e150:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e15a:	2b22      	cmp	r3, #34	; 0x22
 800e15c:	f040 8095 	bne.w	800e28a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e166:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e16a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e16e:	b2d9      	uxtb	r1, r3
 800e170:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e174:	b2da      	uxtb	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e17a:	400a      	ands	r2, r1
 800e17c:	b2d2      	uxtb	r2, r2
 800e17e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e184:	1c5a      	adds	r2, r3, #1
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e190:	b29b      	uxth	r3, r3
 800e192:	3b01      	subs	r3, #1
 800e194:	b29a      	uxth	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d178      	bne.n	800e29a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b0:	e853 3f00 	ldrex	r3, [r3]
 800e1b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e1bc:	653b      	str	r3, [r7, #80]	; 0x50
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1c6:	647b      	str	r3, [r7, #68]	; 0x44
 800e1c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1ce:	e841 2300 	strex	r3, r2, [r1]
 800e1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d1e6      	bne.n	800e1a8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	3308      	adds	r3, #8
 800e1e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	e853 3f00 	ldrex	r3, [r3]
 800e1e8:	623b      	str	r3, [r7, #32]
   return(result);
 800e1ea:	6a3b      	ldr	r3, [r7, #32]
 800e1ec:	f023 0301 	bic.w	r3, r3, #1
 800e1f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	3308      	adds	r3, #8
 800e1f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e1fa:	633a      	str	r2, [r7, #48]	; 0x30
 800e1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e202:	e841 2300 	strex	r3, r2, [r1]
 800e206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d1e5      	bne.n	800e1da <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2220      	movs	r2, #32
 800e212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e220:	2b01      	cmp	r3, #1
 800e222:	d12e      	bne.n	800e282 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2200      	movs	r2, #0
 800e228:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	e853 3f00 	ldrex	r3, [r3]
 800e236:	60fb      	str	r3, [r7, #12]
   return(result);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f023 0310 	bic.w	r3, r3, #16
 800e23e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	461a      	mov	r2, r3
 800e246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e248:	61fb      	str	r3, [r7, #28]
 800e24a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24c:	69b9      	ldr	r1, [r7, #24]
 800e24e:	69fa      	ldr	r2, [r7, #28]
 800e250:	e841 2300 	strex	r3, r2, [r1]
 800e254:	617b      	str	r3, [r7, #20]
   return(result);
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1e6      	bne.n	800e22a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	69db      	ldr	r3, [r3, #28]
 800e262:	f003 0310 	and.w	r3, r3, #16
 800e266:	2b10      	cmp	r3, #16
 800e268:	d103      	bne.n	800e272 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2210      	movs	r2, #16
 800e270:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e278:	4619      	mov	r1, r3
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7fe fe66 	bl	800cf4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e280:	e00b      	b.n	800e29a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7f4 fe18 	bl	8002eb8 <HAL_UART_RxCpltCallback>
}
 800e288:	e007      	b.n	800e29a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	699a      	ldr	r2, [r3, #24]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f042 0208 	orr.w	r2, r2, #8
 800e298:	619a      	str	r2, [r3, #24]
}
 800e29a:	bf00      	nop
 800e29c:	3758      	adds	r7, #88	; 0x58
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b096      	sub	sp, #88	; 0x58
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2ba:	2b22      	cmp	r3, #34	; 0x22
 800e2bc:	f040 8095 	bne.w	800e3ea <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2ce:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e2d0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e2d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e2d8:	4013      	ands	r3, r2
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2e4:	1c9a      	adds	r2, r3, #2
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	b29a      	uxth	r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e302:	b29b      	uxth	r3, r3
 800e304:	2b00      	cmp	r3, #0
 800e306:	d178      	bne.n	800e3fa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e310:	e853 3f00 	ldrex	r3, [r3]
 800e314:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e31c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	461a      	mov	r2, r3
 800e324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e326:	643b      	str	r3, [r7, #64]	; 0x40
 800e328:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e32a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e32c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e32e:	e841 2300 	strex	r3, r2, [r1]
 800e332:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e336:	2b00      	cmp	r3, #0
 800e338:	d1e6      	bne.n	800e308 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	3308      	adds	r3, #8
 800e340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e342:	6a3b      	ldr	r3, [r7, #32]
 800e344:	e853 3f00 	ldrex	r3, [r3]
 800e348:	61fb      	str	r3, [r7, #28]
   return(result);
 800e34a:	69fb      	ldr	r3, [r7, #28]
 800e34c:	f023 0301 	bic.w	r3, r3, #1
 800e350:	64bb      	str	r3, [r7, #72]	; 0x48
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	3308      	adds	r3, #8
 800e358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e35a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e35c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e35e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e362:	e841 2300 	strex	r3, r2, [r1]
 800e366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d1e5      	bne.n	800e33a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2220      	movs	r2, #32
 800e372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e380:	2b01      	cmp	r3, #1
 800e382:	d12e      	bne.n	800e3e2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	e853 3f00 	ldrex	r3, [r3]
 800e396:	60bb      	str	r3, [r7, #8]
   return(result);
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	f023 0310 	bic.w	r3, r3, #16
 800e39e:	647b      	str	r3, [r7, #68]	; 0x44
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3a8:	61bb      	str	r3, [r7, #24]
 800e3aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ac:	6979      	ldr	r1, [r7, #20]
 800e3ae:	69ba      	ldr	r2, [r7, #24]
 800e3b0:	e841 2300 	strex	r3, r2, [r1]
 800e3b4:	613b      	str	r3, [r7, #16]
   return(result);
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d1e6      	bne.n	800e38a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	69db      	ldr	r3, [r3, #28]
 800e3c2:	f003 0310 	and.w	r3, r3, #16
 800e3c6:	2b10      	cmp	r3, #16
 800e3c8:	d103      	bne.n	800e3d2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	2210      	movs	r2, #16
 800e3d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e3d8:	4619      	mov	r1, r3
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7fe fdb6 	bl	800cf4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e3e0:	e00b      	b.n	800e3fa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f7f4 fd68 	bl	8002eb8 <HAL_UART_RxCpltCallback>
}
 800e3e8:	e007      	b.n	800e3fa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	699a      	ldr	r2, [r3, #24]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f042 0208 	orr.w	r2, r2, #8
 800e3f8:	619a      	str	r2, [r3, #24]
}
 800e3fa:	bf00      	nop
 800e3fc:	3758      	adds	r7, #88	; 0x58
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
	...

0800e404 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b0a6      	sub	sp, #152	; 0x98
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e412:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	69db      	ldr	r3, [r3, #28]
 800e41c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	689b      	ldr	r3, [r3, #8]
 800e430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e43a:	2b22      	cmp	r3, #34	; 0x22
 800e43c:	f040 814d 	bne.w	800e6da <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e446:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e44a:	e0f4      	b.n	800e636 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e452:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e456:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e45a:	b2d9      	uxtb	r1, r3
 800e45c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e460:	b2da      	uxtb	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e466:	400a      	ands	r2, r1
 800e468:	b2d2      	uxtb	r2, r2
 800e46a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e470:	1c5a      	adds	r2, r3, #1
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	3b01      	subs	r3, #1
 800e480:	b29a      	uxth	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	69db      	ldr	r3, [r3, #28]
 800e48e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e492:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e496:	f003 0307 	and.w	r3, r3, #7
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d053      	beq.n	800e546 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e49e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4a2:	f003 0301 	and.w	r3, r3, #1
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d011      	beq.n	800e4ce <UART_RxISR_8BIT_FIFOEN+0xca>
 800e4aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d00b      	beq.n	800e4ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4c4:	f043 0201 	orr.w	r2, r3, #1
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4d2:	f003 0302 	and.w	r3, r3, #2
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d011      	beq.n	800e4fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e4da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4de:	f003 0301 	and.w	r3, r3, #1
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00b      	beq.n	800e4fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2202      	movs	r2, #2
 800e4ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4f4:	f043 0204 	orr.w	r2, r3, #4
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e502:	f003 0304 	and.w	r3, r3, #4
 800e506:	2b00      	cmp	r3, #0
 800e508:	d011      	beq.n	800e52e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e50a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e50e:	f003 0301 	and.w	r3, r3, #1
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00b      	beq.n	800e52e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2204      	movs	r2, #4
 800e51c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e524:	f043 0202 	orr.w	r2, r3, #2
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e534:	2b00      	cmp	r3, #0
 800e536:	d006      	beq.n	800e546 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7fe fcfd 	bl	800cf38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d171      	bne.n	800e636 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e55a:	e853 3f00 	ldrex	r3, [r3]
 800e55e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	461a      	mov	r2, r3
 800e570:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e574:	66bb      	str	r3, [r7, #104]	; 0x68
 800e576:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e578:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e57a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e57c:	e841 2300 	strex	r3, r2, [r1]
 800e580:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e584:	2b00      	cmp	r3, #0
 800e586:	d1e4      	bne.n	800e552 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	3308      	adds	r3, #8
 800e58e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e592:	e853 3f00 	ldrex	r3, [r3]
 800e596:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e598:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e59a:	4b56      	ldr	r3, [pc, #344]	; (800e6f4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800e59c:	4013      	ands	r3, r2
 800e59e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	3308      	adds	r3, #8
 800e5a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e5a8:	657a      	str	r2, [r7, #84]	; 0x54
 800e5aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e5ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e5b0:	e841 2300 	strex	r3, r2, [r1]
 800e5b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1e5      	bne.n	800e588 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2220      	movs	r2, #32
 800e5c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d12e      	bne.n	800e630 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5e0:	e853 3f00 	ldrex	r3, [r3]
 800e5e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e8:	f023 0310 	bic.w	r3, r3, #16
 800e5ec:	67bb      	str	r3, [r7, #120]	; 0x78
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5f6:	643b      	str	r3, [r7, #64]	; 0x40
 800e5f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5fe:	e841 2300 	strex	r3, r2, [r1]
 800e602:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1e6      	bne.n	800e5d8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	69db      	ldr	r3, [r3, #28]
 800e610:	f003 0310 	and.w	r3, r3, #16
 800e614:	2b10      	cmp	r3, #16
 800e616:	d103      	bne.n	800e620 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2210      	movs	r2, #16
 800e61e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e626:	4619      	mov	r1, r3
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7fe fc8f 	bl	800cf4c <HAL_UARTEx_RxEventCallback>
 800e62e:	e002      	b.n	800e636 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7f4 fc41 	bl	8002eb8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e636:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d006      	beq.n	800e64c <UART_RxISR_8BIT_FIFOEN+0x248>
 800e63e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e642:	f003 0320 	and.w	r3, r3, #32
 800e646:	2b00      	cmp	r3, #0
 800e648:	f47f af00 	bne.w	800e44c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e652:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e656:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d045      	beq.n	800e6ea <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e664:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e668:	429a      	cmp	r2, r3
 800e66a:	d23e      	bcs.n	800e6ea <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	3308      	adds	r3, #8
 800e672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e674:	6a3b      	ldr	r3, [r7, #32]
 800e676:	e853 3f00 	ldrex	r3, [r3]
 800e67a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e682:	673b      	str	r3, [r7, #112]	; 0x70
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	3308      	adds	r3, #8
 800e68a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e68c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e68e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e694:	e841 2300 	strex	r3, r2, [r1]
 800e698:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d1e5      	bne.n	800e66c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	4a15      	ldr	r2, [pc, #84]	; (800e6f8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e6a4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	e853 3f00 	ldrex	r3, [r3]
 800e6b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	f043 0320 	orr.w	r3, r3, #32
 800e6ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6c4:	61bb      	str	r3, [r7, #24]
 800e6c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c8:	6979      	ldr	r1, [r7, #20]
 800e6ca:	69ba      	ldr	r2, [r7, #24]
 800e6cc:	e841 2300 	strex	r3, r2, [r1]
 800e6d0:	613b      	str	r3, [r7, #16]
   return(result);
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1e6      	bne.n	800e6a6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e6d8:	e007      	b.n	800e6ea <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	699a      	ldr	r2, [r3, #24]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f042 0208 	orr.w	r2, r2, #8
 800e6e8:	619a      	str	r2, [r3, #24]
}
 800e6ea:	bf00      	nop
 800e6ec:	3798      	adds	r7, #152	; 0x98
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	effffffe 	.word	0xeffffffe
 800e6f8:	0800e143 	.word	0x0800e143

0800e6fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b0a8      	sub	sp, #160	; 0xa0
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e70a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	69db      	ldr	r3, [r3, #28]
 800e714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e732:	2b22      	cmp	r3, #34	; 0x22
 800e734:	f040 8151 	bne.w	800e9da <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e73e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e742:	e0f8      	b.n	800e936 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e74a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e752:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e756:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e75a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e75e:	4013      	ands	r3, r2
 800e760:	b29a      	uxth	r2, r3
 800e762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e766:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e76c:	1c9a      	adds	r2, r3, #2
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e778:	b29b      	uxth	r3, r3
 800e77a:	3b01      	subs	r3, #1
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	69db      	ldr	r3, [r3, #28]
 800e78a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e78e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e792:	f003 0307 	and.w	r3, r3, #7
 800e796:	2b00      	cmp	r3, #0
 800e798:	d053      	beq.n	800e842 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e79a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e79e:	f003 0301 	and.w	r3, r3, #1
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d011      	beq.n	800e7ca <UART_RxISR_16BIT_FIFOEN+0xce>
 800e7a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e7aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d00b      	beq.n	800e7ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7c0:	f043 0201 	orr.w	r2, r3, #1
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e7ce:	f003 0302 	and.w	r3, r3, #2
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d011      	beq.n	800e7fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e7d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e7da:	f003 0301 	and.w	r3, r3, #1
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d00b      	beq.n	800e7fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2202      	movs	r2, #2
 800e7e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7f0:	f043 0204 	orr.w	r2, r3, #4
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e7fe:	f003 0304 	and.w	r3, r3, #4
 800e802:	2b00      	cmp	r3, #0
 800e804:	d011      	beq.n	800e82a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e806:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e80a:	f003 0301 	and.w	r3, r3, #1
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00b      	beq.n	800e82a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2204      	movs	r2, #4
 800e818:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e820:	f043 0202 	orr.w	r2, r3, #2
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e830:	2b00      	cmp	r3, #0
 800e832:	d006      	beq.n	800e842 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f7fe fb7f 	bl	800cf38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e848:	b29b      	uxth	r3, r3
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d173      	bne.n	800e936 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e854:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e856:	e853 3f00 	ldrex	r3, [r3]
 800e85a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e85c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e85e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	461a      	mov	r2, r3
 800e86c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e870:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e872:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e874:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e876:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e878:	e841 2300 	strex	r3, r2, [r1]
 800e87c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e87e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e880:	2b00      	cmp	r3, #0
 800e882:	d1e4      	bne.n	800e84e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3308      	adds	r3, #8
 800e88a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e88c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e88e:	e853 3f00 	ldrex	r3, [r3]
 800e892:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e896:	4b57      	ldr	r3, [pc, #348]	; (800e9f4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800e898:	4013      	ands	r3, r2
 800e89a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e8a8:	65ba      	str	r2, [r7, #88]	; 0x58
 800e8aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8b0:	e841 2300 	strex	r3, r2, [r1]
 800e8b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e8b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1e3      	bne.n	800e884 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2220      	movs	r2, #32
 800e8c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	d12e      	bne.n	800e930 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e0:	e853 3f00 	ldrex	r3, [r3]
 800e8e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8e8:	f023 0310 	bic.w	r3, r3, #16
 800e8ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e8f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e8f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e8fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8fe:	e841 2300 	strex	r3, r2, [r1]
 800e902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1e6      	bne.n	800e8d8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	69db      	ldr	r3, [r3, #28]
 800e910:	f003 0310 	and.w	r3, r3, #16
 800e914:	2b10      	cmp	r3, #16
 800e916:	d103      	bne.n	800e920 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2210      	movs	r2, #16
 800e91e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e926:	4619      	mov	r1, r3
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f7fe fb0f 	bl	800cf4c <HAL_UARTEx_RxEventCallback>
 800e92e:	e002      	b.n	800e936 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7f4 fac1 	bl	8002eb8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e936:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d006      	beq.n	800e94c <UART_RxISR_16BIT_FIFOEN+0x250>
 800e93e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e942:	f003 0320 	and.w	r3, r3, #32
 800e946:	2b00      	cmp	r3, #0
 800e948:	f47f aefc 	bne.w	800e744 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e952:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e956:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d045      	beq.n	800e9ea <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e964:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e968:	429a      	cmp	r2, r3
 800e96a:	d23e      	bcs.n	800e9ea <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3308      	adds	r3, #8
 800e972:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e976:	e853 3f00 	ldrex	r3, [r3]
 800e97a:	623b      	str	r3, [r7, #32]
   return(result);
 800e97c:	6a3b      	ldr	r3, [r7, #32]
 800e97e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e982:	677b      	str	r3, [r7, #116]	; 0x74
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	3308      	adds	r3, #8
 800e98a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e98c:	633a      	str	r2, [r7, #48]	; 0x30
 800e98e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e990:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e994:	e841 2300 	strex	r3, r2, [r1]
 800e998:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d1e5      	bne.n	800e96c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	4a15      	ldr	r2, [pc, #84]	; (800e9f8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e9a4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	e853 3f00 	ldrex	r3, [r3]
 800e9b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f043 0320 	orr.w	r3, r3, #32
 800e9ba:	673b      	str	r3, [r7, #112]	; 0x70
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e9c4:	61fb      	str	r3, [r7, #28]
 800e9c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c8:	69b9      	ldr	r1, [r7, #24]
 800e9ca:	69fa      	ldr	r2, [r7, #28]
 800e9cc:	e841 2300 	strex	r3, r2, [r1]
 800e9d0:	617b      	str	r3, [r7, #20]
   return(result);
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1e6      	bne.n	800e9a6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e9d8:	e007      	b.n	800e9ea <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	699a      	ldr	r2, [r3, #24]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f042 0208 	orr.w	r2, r2, #8
 800e9e8:	619a      	str	r2, [r3, #24]
}
 800e9ea:	bf00      	nop
 800e9ec:	37a0      	adds	r7, #160	; 0xa0
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	effffffe 	.word	0xeffffffe
 800e9f8:	0800e2a3 	.word	0x0800e2a3

0800e9fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea04:	bf00      	nop
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ea18:	bf00      	nop
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ea2c:	bf00      	nop
 800ea2e:	370c      	adds	r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d101      	bne.n	800ea4e <HAL_UARTEx_DisableFifoMode+0x16>
 800ea4a:	2302      	movs	r3, #2
 800ea4c:	e027      	b.n	800ea9e <HAL_UARTEx_DisableFifoMode+0x66>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2224      	movs	r2, #36	; 0x24
 800ea5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f022 0201 	bic.w	r2, r2, #1
 800ea74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ea7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2220      	movs	r2, #32
 800ea90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2200      	movs	r2, #0
 800ea98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3714      	adds	r7, #20
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b084      	sub	sp, #16
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
 800eab2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d101      	bne.n	800eac2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eabe:	2302      	movs	r3, #2
 800eac0:	e02d      	b.n	800eb1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2224      	movs	r2, #36	; 0x24
 800eace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f022 0201 	bic.w	r2, r2, #1
 800eae8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	689b      	ldr	r3, [r3, #8]
 800eaf0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	683a      	ldr	r2, [r7, #0]
 800eafa:	430a      	orrs	r2, r1
 800eafc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f000 f850 	bl	800eba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68fa      	ldr	r2, [r7, #12]
 800eb0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2220      	movs	r2, #32
 800eb10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b084      	sub	sp, #16
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
 800eb2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d101      	bne.n	800eb3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eb3a:	2302      	movs	r3, #2
 800eb3c:	e02d      	b.n	800eb9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2201      	movs	r2, #1
 800eb42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2224      	movs	r2, #36	; 0x24
 800eb4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f022 0201 	bic.w	r2, r2, #1
 800eb64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	683a      	ldr	r2, [r7, #0]
 800eb76:	430a      	orrs	r2, r1
 800eb78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 f812 	bl	800eba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2220      	movs	r2, #32
 800eb8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
	...

0800eba4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d108      	bne.n	800ebc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ebc4:	e031      	b.n	800ec2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ebc6:	2310      	movs	r3, #16
 800ebc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ebca:	2310      	movs	r3, #16
 800ebcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	0e5b      	lsrs	r3, r3, #25
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	f003 0307 	and.w	r3, r3, #7
 800ebdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	0f5b      	lsrs	r3, r3, #29
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	f003 0307 	and.w	r3, r3, #7
 800ebec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebee:	7bbb      	ldrb	r3, [r7, #14]
 800ebf0:	7b3a      	ldrb	r2, [r7, #12]
 800ebf2:	4911      	ldr	r1, [pc, #68]	; (800ec38 <UARTEx_SetNbDataToProcess+0x94>)
 800ebf4:	5c8a      	ldrb	r2, [r1, r2]
 800ebf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ebfa:	7b3a      	ldrb	r2, [r7, #12]
 800ebfc:	490f      	ldr	r1, [pc, #60]	; (800ec3c <UARTEx_SetNbDataToProcess+0x98>)
 800ebfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec00:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec0c:	7bfb      	ldrb	r3, [r7, #15]
 800ec0e:	7b7a      	ldrb	r2, [r7, #13]
 800ec10:	4909      	ldr	r1, [pc, #36]	; (800ec38 <UARTEx_SetNbDataToProcess+0x94>)
 800ec12:	5c8a      	ldrb	r2, [r1, r2]
 800ec14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec18:	7b7a      	ldrb	r2, [r7, #13]
 800ec1a:	4908      	ldr	r1, [pc, #32]	; (800ec3c <UARTEx_SetNbDataToProcess+0x98>)
 800ec1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ec2a:	bf00      	nop
 800ec2c:	3714      	adds	r7, #20
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	08012378 	.word	0x08012378
 800ec3c:	08012380 	.word	0x08012380

0800ec40 <__errno>:
 800ec40:	4b01      	ldr	r3, [pc, #4]	; (800ec48 <__errno+0x8>)
 800ec42:	6818      	ldr	r0, [r3, #0]
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	240000b0 	.word	0x240000b0

0800ec4c <__libc_init_array>:
 800ec4c:	b570      	push	{r4, r5, r6, lr}
 800ec4e:	4d0d      	ldr	r5, [pc, #52]	; (800ec84 <__libc_init_array+0x38>)
 800ec50:	4c0d      	ldr	r4, [pc, #52]	; (800ec88 <__libc_init_array+0x3c>)
 800ec52:	1b64      	subs	r4, r4, r5
 800ec54:	10a4      	asrs	r4, r4, #2
 800ec56:	2600      	movs	r6, #0
 800ec58:	42a6      	cmp	r6, r4
 800ec5a:	d109      	bne.n	800ec70 <__libc_init_array+0x24>
 800ec5c:	4d0b      	ldr	r5, [pc, #44]	; (800ec8c <__libc_init_array+0x40>)
 800ec5e:	4c0c      	ldr	r4, [pc, #48]	; (800ec90 <__libc_init_array+0x44>)
 800ec60:	f003 fae8 	bl	8012234 <_init>
 800ec64:	1b64      	subs	r4, r4, r5
 800ec66:	10a4      	asrs	r4, r4, #2
 800ec68:	2600      	movs	r6, #0
 800ec6a:	42a6      	cmp	r6, r4
 800ec6c:	d105      	bne.n	800ec7a <__libc_init_array+0x2e>
 800ec6e:	bd70      	pop	{r4, r5, r6, pc}
 800ec70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec74:	4798      	blx	r3
 800ec76:	3601      	adds	r6, #1
 800ec78:	e7ee      	b.n	800ec58 <__libc_init_array+0xc>
 800ec7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec7e:	4798      	blx	r3
 800ec80:	3601      	adds	r6, #1
 800ec82:	e7f2      	b.n	800ec6a <__libc_init_array+0x1e>
 800ec84:	08014078 	.word	0x08014078
 800ec88:	08014078 	.word	0x08014078
 800ec8c:	08014078 	.word	0x08014078
 800ec90:	0801407c 	.word	0x0801407c

0800ec94 <memcpy>:
 800ec94:	440a      	add	r2, r1
 800ec96:	4291      	cmp	r1, r2
 800ec98:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec9c:	d100      	bne.n	800eca0 <memcpy+0xc>
 800ec9e:	4770      	bx	lr
 800eca0:	b510      	push	{r4, lr}
 800eca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecaa:	4291      	cmp	r1, r2
 800ecac:	d1f9      	bne.n	800eca2 <memcpy+0xe>
 800ecae:	bd10      	pop	{r4, pc}

0800ecb0 <memset>:
 800ecb0:	4402      	add	r2, r0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d100      	bne.n	800ecba <memset+0xa>
 800ecb8:	4770      	bx	lr
 800ecba:	f803 1b01 	strb.w	r1, [r3], #1
 800ecbe:	e7f9      	b.n	800ecb4 <memset+0x4>

0800ecc0 <sulp>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	460d      	mov	r5, r1
 800ecc6:	4616      	mov	r6, r2
 800ecc8:	ec45 4b10 	vmov	d0, r4, r5
 800eccc:	f001 fcca 	bl	8010664 <__ulp>
 800ecd0:	b17e      	cbz	r6, 800ecf2 <sulp+0x32>
 800ecd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ecd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	dd09      	ble.n	800ecf2 <sulp+0x32>
 800ecde:	051b      	lsls	r3, r3, #20
 800ece0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ece4:	2000      	movs	r0, #0
 800ece6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ecea:	ec41 0b17 	vmov	d7, r0, r1
 800ecee:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}
 800ecf4:	0000      	movs	r0, r0
	...

0800ecf8 <_strtod_l>:
 800ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfc:	ed2d 8b0e 	vpush	{d8-d14}
 800ed00:	b097      	sub	sp, #92	; 0x5c
 800ed02:	461f      	mov	r7, r3
 800ed04:	2300      	movs	r3, #0
 800ed06:	9312      	str	r3, [sp, #72]	; 0x48
 800ed08:	4ba1      	ldr	r3, [pc, #644]	; (800ef90 <_strtod_l+0x298>)
 800ed0a:	920d      	str	r2, [sp, #52]	; 0x34
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	9307      	str	r3, [sp, #28]
 800ed10:	4604      	mov	r4, r0
 800ed12:	4618      	mov	r0, r3
 800ed14:	468b      	mov	fp, r1
 800ed16:	f7f1 fae3 	bl	80002e0 <strlen>
 800ed1a:	f04f 0800 	mov.w	r8, #0
 800ed1e:	4605      	mov	r5, r0
 800ed20:	f04f 0900 	mov.w	r9, #0
 800ed24:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ed28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ed2a:	7813      	ldrb	r3, [r2, #0]
 800ed2c:	2b2b      	cmp	r3, #43	; 0x2b
 800ed2e:	d04d      	beq.n	800edcc <_strtod_l+0xd4>
 800ed30:	d83a      	bhi.n	800eda8 <_strtod_l+0xb0>
 800ed32:	2b0d      	cmp	r3, #13
 800ed34:	d833      	bhi.n	800ed9e <_strtod_l+0xa6>
 800ed36:	2b08      	cmp	r3, #8
 800ed38:	d833      	bhi.n	800eda2 <_strtod_l+0xaa>
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d03d      	beq.n	800edba <_strtod_l+0xc2>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	9308      	str	r3, [sp, #32]
 800ed42:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ed44:	7833      	ldrb	r3, [r6, #0]
 800ed46:	2b30      	cmp	r3, #48	; 0x30
 800ed48:	f040 80b0 	bne.w	800eeac <_strtod_l+0x1b4>
 800ed4c:	7873      	ldrb	r3, [r6, #1]
 800ed4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ed52:	2b58      	cmp	r3, #88	; 0x58
 800ed54:	d167      	bne.n	800ee26 <_strtod_l+0x12e>
 800ed56:	9b08      	ldr	r3, [sp, #32]
 800ed58:	9301      	str	r3, [sp, #4]
 800ed5a:	ab12      	add	r3, sp, #72	; 0x48
 800ed5c:	9702      	str	r7, [sp, #8]
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	4a8c      	ldr	r2, [pc, #560]	; (800ef94 <_strtod_l+0x29c>)
 800ed62:	ab13      	add	r3, sp, #76	; 0x4c
 800ed64:	a911      	add	r1, sp, #68	; 0x44
 800ed66:	4620      	mov	r0, r4
 800ed68:	f000 fdf0 	bl	800f94c <__gethex>
 800ed6c:	f010 0507 	ands.w	r5, r0, #7
 800ed70:	4607      	mov	r7, r0
 800ed72:	d005      	beq.n	800ed80 <_strtod_l+0x88>
 800ed74:	2d06      	cmp	r5, #6
 800ed76:	d12b      	bne.n	800edd0 <_strtod_l+0xd8>
 800ed78:	3601      	adds	r6, #1
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	9611      	str	r6, [sp, #68]	; 0x44
 800ed7e:	9308      	str	r3, [sp, #32]
 800ed80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f040 854e 	bne.w	800f824 <_strtod_l+0xb2c>
 800ed88:	9b08      	ldr	r3, [sp, #32]
 800ed8a:	b1e3      	cbz	r3, 800edc6 <_strtod_l+0xce>
 800ed8c:	ec49 8b17 	vmov	d7, r8, r9
 800ed90:	eeb1 0b47 	vneg.f64	d0, d7
 800ed94:	b017      	add	sp, #92	; 0x5c
 800ed96:	ecbd 8b0e 	vpop	{d8-d14}
 800ed9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed9e:	2b20      	cmp	r3, #32
 800eda0:	d1cd      	bne.n	800ed3e <_strtod_l+0x46>
 800eda2:	3201      	adds	r2, #1
 800eda4:	9211      	str	r2, [sp, #68]	; 0x44
 800eda6:	e7bf      	b.n	800ed28 <_strtod_l+0x30>
 800eda8:	2b2d      	cmp	r3, #45	; 0x2d
 800edaa:	d1c8      	bne.n	800ed3e <_strtod_l+0x46>
 800edac:	2301      	movs	r3, #1
 800edae:	9308      	str	r3, [sp, #32]
 800edb0:	1c53      	adds	r3, r2, #1
 800edb2:	9311      	str	r3, [sp, #68]	; 0x44
 800edb4:	7853      	ldrb	r3, [r2, #1]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1c3      	bne.n	800ed42 <_strtod_l+0x4a>
 800edba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edbc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	f040 852d 	bne.w	800f820 <_strtod_l+0xb28>
 800edc6:	ec49 8b10 	vmov	d0, r8, r9
 800edca:	e7e3      	b.n	800ed94 <_strtod_l+0x9c>
 800edcc:	2300      	movs	r3, #0
 800edce:	e7ee      	b.n	800edae <_strtod_l+0xb6>
 800edd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800edd2:	b13a      	cbz	r2, 800ede4 <_strtod_l+0xec>
 800edd4:	2135      	movs	r1, #53	; 0x35
 800edd6:	a814      	add	r0, sp, #80	; 0x50
 800edd8:	f001 fd4c 	bl	8010874 <__copybits>
 800eddc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800edde:	4620      	mov	r0, r4
 800ede0:	f001 f90e 	bl	8010000 <_Bfree>
 800ede4:	3d01      	subs	r5, #1
 800ede6:	2d04      	cmp	r5, #4
 800ede8:	d806      	bhi.n	800edf8 <_strtod_l+0x100>
 800edea:	e8df f005 	tbb	[pc, r5]
 800edee:	030a      	.short	0x030a
 800edf0:	1714      	.short	0x1714
 800edf2:	0a          	.byte	0x0a
 800edf3:	00          	.byte	0x00
 800edf4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800edf8:	073f      	lsls	r7, r7, #28
 800edfa:	d5c1      	bpl.n	800ed80 <_strtod_l+0x88>
 800edfc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ee00:	e7be      	b.n	800ed80 <_strtod_l+0x88>
 800ee02:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800ee06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ee08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ee0c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ee10:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ee14:	e7f0      	b.n	800edf8 <_strtod_l+0x100>
 800ee16:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800ef98 <_strtod_l+0x2a0>
 800ee1a:	e7ed      	b.n	800edf8 <_strtod_l+0x100>
 800ee1c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ee20:	f04f 38ff 	mov.w	r8, #4294967295
 800ee24:	e7e8      	b.n	800edf8 <_strtod_l+0x100>
 800ee26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee28:	1c5a      	adds	r2, r3, #1
 800ee2a:	9211      	str	r2, [sp, #68]	; 0x44
 800ee2c:	785b      	ldrb	r3, [r3, #1]
 800ee2e:	2b30      	cmp	r3, #48	; 0x30
 800ee30:	d0f9      	beq.n	800ee26 <_strtod_l+0x12e>
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d0a4      	beq.n	800ed80 <_strtod_l+0x88>
 800ee36:	2301      	movs	r3, #1
 800ee38:	f04f 0a00 	mov.w	sl, #0
 800ee3c:	9304      	str	r3, [sp, #16]
 800ee3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee40:	930a      	str	r3, [sp, #40]	; 0x28
 800ee42:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ee46:	f8cd a018 	str.w	sl, [sp, #24]
 800ee4a:	220a      	movs	r2, #10
 800ee4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ee4e:	7807      	ldrb	r7, [r0, #0]
 800ee50:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ee54:	b2d9      	uxtb	r1, r3
 800ee56:	2909      	cmp	r1, #9
 800ee58:	d92a      	bls.n	800eeb0 <_strtod_l+0x1b8>
 800ee5a:	9907      	ldr	r1, [sp, #28]
 800ee5c:	462a      	mov	r2, r5
 800ee5e:	f001 fe0f 	bl	8010a80 <strncmp>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d033      	beq.n	800eece <_strtod_l+0x1d6>
 800ee66:	2000      	movs	r0, #0
 800ee68:	9b06      	ldr	r3, [sp, #24]
 800ee6a:	463a      	mov	r2, r7
 800ee6c:	4601      	mov	r1, r0
 800ee6e:	4607      	mov	r7, r0
 800ee70:	2a65      	cmp	r2, #101	; 0x65
 800ee72:	d001      	beq.n	800ee78 <_strtod_l+0x180>
 800ee74:	2a45      	cmp	r2, #69	; 0x45
 800ee76:	d117      	bne.n	800eea8 <_strtod_l+0x1b0>
 800ee78:	b91b      	cbnz	r3, 800ee82 <_strtod_l+0x18a>
 800ee7a:	9b04      	ldr	r3, [sp, #16]
 800ee7c:	4303      	orrs	r3, r0
 800ee7e:	d09c      	beq.n	800edba <_strtod_l+0xc2>
 800ee80:	2300      	movs	r3, #0
 800ee82:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800ee86:	f10b 0201 	add.w	r2, fp, #1
 800ee8a:	9211      	str	r2, [sp, #68]	; 0x44
 800ee8c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800ee90:	2a2b      	cmp	r2, #43	; 0x2b
 800ee92:	d071      	beq.n	800ef78 <_strtod_l+0x280>
 800ee94:	2a2d      	cmp	r2, #45	; 0x2d
 800ee96:	d077      	beq.n	800ef88 <_strtod_l+0x290>
 800ee98:	f04f 0e00 	mov.w	lr, #0
 800ee9c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800eea0:	2d09      	cmp	r5, #9
 800eea2:	d97f      	bls.n	800efa4 <_strtod_l+0x2ac>
 800eea4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800eea8:	2500      	movs	r5, #0
 800eeaa:	e09b      	b.n	800efe4 <_strtod_l+0x2ec>
 800eeac:	2300      	movs	r3, #0
 800eeae:	e7c3      	b.n	800ee38 <_strtod_l+0x140>
 800eeb0:	9906      	ldr	r1, [sp, #24]
 800eeb2:	2908      	cmp	r1, #8
 800eeb4:	bfdd      	ittte	le
 800eeb6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800eeb8:	fb02 3301 	mlale	r3, r2, r1, r3
 800eebc:	9309      	strle	r3, [sp, #36]	; 0x24
 800eebe:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800eec2:	9b06      	ldr	r3, [sp, #24]
 800eec4:	3001      	adds	r0, #1
 800eec6:	3301      	adds	r3, #1
 800eec8:	9306      	str	r3, [sp, #24]
 800eeca:	9011      	str	r0, [sp, #68]	; 0x44
 800eecc:	e7be      	b.n	800ee4c <_strtod_l+0x154>
 800eece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eed0:	195a      	adds	r2, r3, r5
 800eed2:	9211      	str	r2, [sp, #68]	; 0x44
 800eed4:	5d5a      	ldrb	r2, [r3, r5]
 800eed6:	9b06      	ldr	r3, [sp, #24]
 800eed8:	b3a3      	cbz	r3, 800ef44 <_strtod_l+0x24c>
 800eeda:	4607      	mov	r7, r0
 800eedc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800eee0:	2909      	cmp	r1, #9
 800eee2:	d912      	bls.n	800ef0a <_strtod_l+0x212>
 800eee4:	2101      	movs	r1, #1
 800eee6:	e7c3      	b.n	800ee70 <_strtod_l+0x178>
 800eee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eeea:	1c5a      	adds	r2, r3, #1
 800eeec:	9211      	str	r2, [sp, #68]	; 0x44
 800eeee:	785a      	ldrb	r2, [r3, #1]
 800eef0:	3001      	adds	r0, #1
 800eef2:	2a30      	cmp	r2, #48	; 0x30
 800eef4:	d0f8      	beq.n	800eee8 <_strtod_l+0x1f0>
 800eef6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800eefa:	2b08      	cmp	r3, #8
 800eefc:	f200 8497 	bhi.w	800f82e <_strtod_l+0xb36>
 800ef00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef02:	930a      	str	r3, [sp, #40]	; 0x28
 800ef04:	4607      	mov	r7, r0
 800ef06:	2000      	movs	r0, #0
 800ef08:	4603      	mov	r3, r0
 800ef0a:	3a30      	subs	r2, #48	; 0x30
 800ef0c:	f100 0101 	add.w	r1, r0, #1
 800ef10:	d012      	beq.n	800ef38 <_strtod_l+0x240>
 800ef12:	440f      	add	r7, r1
 800ef14:	eb00 0c03 	add.w	ip, r0, r3
 800ef18:	4619      	mov	r1, r3
 800ef1a:	250a      	movs	r5, #10
 800ef1c:	4561      	cmp	r1, ip
 800ef1e:	d113      	bne.n	800ef48 <_strtod_l+0x250>
 800ef20:	1819      	adds	r1, r3, r0
 800ef22:	2908      	cmp	r1, #8
 800ef24:	f103 0301 	add.w	r3, r3, #1
 800ef28:	4403      	add	r3, r0
 800ef2a:	dc1c      	bgt.n	800ef66 <_strtod_l+0x26e>
 800ef2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef2e:	210a      	movs	r1, #10
 800ef30:	fb01 2200 	mla	r2, r1, r0, r2
 800ef34:	9209      	str	r2, [sp, #36]	; 0x24
 800ef36:	2100      	movs	r1, #0
 800ef38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef3a:	1c50      	adds	r0, r2, #1
 800ef3c:	9011      	str	r0, [sp, #68]	; 0x44
 800ef3e:	7852      	ldrb	r2, [r2, #1]
 800ef40:	4608      	mov	r0, r1
 800ef42:	e7cb      	b.n	800eedc <_strtod_l+0x1e4>
 800ef44:	9806      	ldr	r0, [sp, #24]
 800ef46:	e7d4      	b.n	800eef2 <_strtod_l+0x1fa>
 800ef48:	2908      	cmp	r1, #8
 800ef4a:	dc04      	bgt.n	800ef56 <_strtod_l+0x25e>
 800ef4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ef4e:	436e      	muls	r6, r5
 800ef50:	9609      	str	r6, [sp, #36]	; 0x24
 800ef52:	3101      	adds	r1, #1
 800ef54:	e7e2      	b.n	800ef1c <_strtod_l+0x224>
 800ef56:	f101 0e01 	add.w	lr, r1, #1
 800ef5a:	f1be 0f10 	cmp.w	lr, #16
 800ef5e:	bfd8      	it	le
 800ef60:	fb05 fa0a 	mulle.w	sl, r5, sl
 800ef64:	e7f5      	b.n	800ef52 <_strtod_l+0x25a>
 800ef66:	2b10      	cmp	r3, #16
 800ef68:	bfdc      	itt	le
 800ef6a:	210a      	movle	r1, #10
 800ef6c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800ef70:	e7e1      	b.n	800ef36 <_strtod_l+0x23e>
 800ef72:	2700      	movs	r7, #0
 800ef74:	2101      	movs	r1, #1
 800ef76:	e780      	b.n	800ee7a <_strtod_l+0x182>
 800ef78:	f04f 0e00 	mov.w	lr, #0
 800ef7c:	f10b 0202 	add.w	r2, fp, #2
 800ef80:	9211      	str	r2, [sp, #68]	; 0x44
 800ef82:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800ef86:	e789      	b.n	800ee9c <_strtod_l+0x1a4>
 800ef88:	f04f 0e01 	mov.w	lr, #1
 800ef8c:	e7f6      	b.n	800ef7c <_strtod_l+0x284>
 800ef8e:	bf00      	nop
 800ef90:	08012460 	.word	0x08012460
 800ef94:	08012398 	.word	0x08012398
 800ef98:	7ff00000 	.word	0x7ff00000
 800ef9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef9e:	1c55      	adds	r5, r2, #1
 800efa0:	9511      	str	r5, [sp, #68]	; 0x44
 800efa2:	7852      	ldrb	r2, [r2, #1]
 800efa4:	2a30      	cmp	r2, #48	; 0x30
 800efa6:	d0f9      	beq.n	800ef9c <_strtod_l+0x2a4>
 800efa8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800efac:	2d08      	cmp	r5, #8
 800efae:	f63f af7b 	bhi.w	800eea8 <_strtod_l+0x1b0>
 800efb2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800efb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efb8:	9207      	str	r2, [sp, #28]
 800efba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efbc:	1c55      	adds	r5, r2, #1
 800efbe:	9511      	str	r5, [sp, #68]	; 0x44
 800efc0:	7852      	ldrb	r2, [r2, #1]
 800efc2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800efc6:	2e09      	cmp	r6, #9
 800efc8:	d937      	bls.n	800f03a <_strtod_l+0x342>
 800efca:	9e07      	ldr	r6, [sp, #28]
 800efcc:	1bad      	subs	r5, r5, r6
 800efce:	2d08      	cmp	r5, #8
 800efd0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800efd4:	dc02      	bgt.n	800efdc <_strtod_l+0x2e4>
 800efd6:	4565      	cmp	r5, ip
 800efd8:	bfa8      	it	ge
 800efda:	4665      	movge	r5, ip
 800efdc:	f1be 0f00 	cmp.w	lr, #0
 800efe0:	d000      	beq.n	800efe4 <_strtod_l+0x2ec>
 800efe2:	426d      	negs	r5, r5
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d14d      	bne.n	800f084 <_strtod_l+0x38c>
 800efe8:	9b04      	ldr	r3, [sp, #16]
 800efea:	4303      	orrs	r3, r0
 800efec:	f47f aec8 	bne.w	800ed80 <_strtod_l+0x88>
 800eff0:	2900      	cmp	r1, #0
 800eff2:	f47f aee2 	bne.w	800edba <_strtod_l+0xc2>
 800eff6:	2a69      	cmp	r2, #105	; 0x69
 800eff8:	d027      	beq.n	800f04a <_strtod_l+0x352>
 800effa:	dc24      	bgt.n	800f046 <_strtod_l+0x34e>
 800effc:	2a49      	cmp	r2, #73	; 0x49
 800effe:	d024      	beq.n	800f04a <_strtod_l+0x352>
 800f000:	2a4e      	cmp	r2, #78	; 0x4e
 800f002:	f47f aeda 	bne.w	800edba <_strtod_l+0xc2>
 800f006:	4996      	ldr	r1, [pc, #600]	; (800f260 <_strtod_l+0x568>)
 800f008:	a811      	add	r0, sp, #68	; 0x44
 800f00a:	f000 fef7 	bl	800fdfc <__match>
 800f00e:	2800      	cmp	r0, #0
 800f010:	f43f aed3 	beq.w	800edba <_strtod_l+0xc2>
 800f014:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	2b28      	cmp	r3, #40	; 0x28
 800f01a:	d12d      	bne.n	800f078 <_strtod_l+0x380>
 800f01c:	4991      	ldr	r1, [pc, #580]	; (800f264 <_strtod_l+0x56c>)
 800f01e:	aa14      	add	r2, sp, #80	; 0x50
 800f020:	a811      	add	r0, sp, #68	; 0x44
 800f022:	f000 feff 	bl	800fe24 <__hexnan>
 800f026:	2805      	cmp	r0, #5
 800f028:	d126      	bne.n	800f078 <_strtod_l+0x380>
 800f02a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f02c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f030:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f034:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f038:	e6a2      	b.n	800ed80 <_strtod_l+0x88>
 800f03a:	250a      	movs	r5, #10
 800f03c:	fb05 250c 	mla	r5, r5, ip, r2
 800f040:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f044:	e7b9      	b.n	800efba <_strtod_l+0x2c2>
 800f046:	2a6e      	cmp	r2, #110	; 0x6e
 800f048:	e7db      	b.n	800f002 <_strtod_l+0x30a>
 800f04a:	4987      	ldr	r1, [pc, #540]	; (800f268 <_strtod_l+0x570>)
 800f04c:	a811      	add	r0, sp, #68	; 0x44
 800f04e:	f000 fed5 	bl	800fdfc <__match>
 800f052:	2800      	cmp	r0, #0
 800f054:	f43f aeb1 	beq.w	800edba <_strtod_l+0xc2>
 800f058:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f05a:	4984      	ldr	r1, [pc, #528]	; (800f26c <_strtod_l+0x574>)
 800f05c:	3b01      	subs	r3, #1
 800f05e:	a811      	add	r0, sp, #68	; 0x44
 800f060:	9311      	str	r3, [sp, #68]	; 0x44
 800f062:	f000 fecb 	bl	800fdfc <__match>
 800f066:	b910      	cbnz	r0, 800f06e <_strtod_l+0x376>
 800f068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f06a:	3301      	adds	r3, #1
 800f06c:	9311      	str	r3, [sp, #68]	; 0x44
 800f06e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f280 <_strtod_l+0x588>
 800f072:	f04f 0800 	mov.w	r8, #0
 800f076:	e683      	b.n	800ed80 <_strtod_l+0x88>
 800f078:	487d      	ldr	r0, [pc, #500]	; (800f270 <_strtod_l+0x578>)
 800f07a:	f001 fce9 	bl	8010a50 <nan>
 800f07e:	ec59 8b10 	vmov	r8, r9, d0
 800f082:	e67d      	b.n	800ed80 <_strtod_l+0x88>
 800f084:	1bea      	subs	r2, r5, r7
 800f086:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f08a:	9207      	str	r2, [sp, #28]
 800f08c:	9a06      	ldr	r2, [sp, #24]
 800f08e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f092:	2a00      	cmp	r2, #0
 800f094:	bf08      	it	eq
 800f096:	461a      	moveq	r2, r3
 800f098:	2b10      	cmp	r3, #16
 800f09a:	9206      	str	r2, [sp, #24]
 800f09c:	461a      	mov	r2, r3
 800f09e:	bfa8      	it	ge
 800f0a0:	2210      	movge	r2, #16
 800f0a2:	2b09      	cmp	r3, #9
 800f0a4:	ec59 8b17 	vmov	r8, r9, d7
 800f0a8:	dd0c      	ble.n	800f0c4 <_strtod_l+0x3cc>
 800f0aa:	4972      	ldr	r1, [pc, #456]	; (800f274 <_strtod_l+0x57c>)
 800f0ac:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f0b0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f0b4:	ee06 aa90 	vmov	s13, sl
 800f0b8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f0bc:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f0c0:	ec59 8b16 	vmov	r8, r9, d6
 800f0c4:	2b0f      	cmp	r3, #15
 800f0c6:	dc36      	bgt.n	800f136 <_strtod_l+0x43e>
 800f0c8:	9907      	ldr	r1, [sp, #28]
 800f0ca:	2900      	cmp	r1, #0
 800f0cc:	f43f ae58 	beq.w	800ed80 <_strtod_l+0x88>
 800f0d0:	dd23      	ble.n	800f11a <_strtod_l+0x422>
 800f0d2:	2916      	cmp	r1, #22
 800f0d4:	dc0b      	bgt.n	800f0ee <_strtod_l+0x3f6>
 800f0d6:	4b67      	ldr	r3, [pc, #412]	; (800f274 <_strtod_l+0x57c>)
 800f0d8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f0dc:	ed93 7b00 	vldr	d7, [r3]
 800f0e0:	ec49 8b16 	vmov	d6, r8, r9
 800f0e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f0e8:	ec59 8b17 	vmov	r8, r9, d7
 800f0ec:	e648      	b.n	800ed80 <_strtod_l+0x88>
 800f0ee:	9807      	ldr	r0, [sp, #28]
 800f0f0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f0f4:	4281      	cmp	r1, r0
 800f0f6:	db1e      	blt.n	800f136 <_strtod_l+0x43e>
 800f0f8:	4a5e      	ldr	r2, [pc, #376]	; (800f274 <_strtod_l+0x57c>)
 800f0fa:	f1c3 030f 	rsb	r3, r3, #15
 800f0fe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f102:	ed91 7b00 	vldr	d7, [r1]
 800f106:	ec49 8b16 	vmov	d6, r8, r9
 800f10a:	1ac3      	subs	r3, r0, r3
 800f10c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f110:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f114:	ed92 6b00 	vldr	d6, [r2]
 800f118:	e7e4      	b.n	800f0e4 <_strtod_l+0x3ec>
 800f11a:	9907      	ldr	r1, [sp, #28]
 800f11c:	3116      	adds	r1, #22
 800f11e:	db0a      	blt.n	800f136 <_strtod_l+0x43e>
 800f120:	4b54      	ldr	r3, [pc, #336]	; (800f274 <_strtod_l+0x57c>)
 800f122:	1b7d      	subs	r5, r7, r5
 800f124:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f128:	ed95 7b00 	vldr	d7, [r5]
 800f12c:	ec49 8b16 	vmov	d6, r8, r9
 800f130:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f134:	e7d8      	b.n	800f0e8 <_strtod_l+0x3f0>
 800f136:	9907      	ldr	r1, [sp, #28]
 800f138:	1a9a      	subs	r2, r3, r2
 800f13a:	440a      	add	r2, r1
 800f13c:	2a00      	cmp	r2, #0
 800f13e:	dd6f      	ble.n	800f220 <_strtod_l+0x528>
 800f140:	f012 000f 	ands.w	r0, r2, #15
 800f144:	d00a      	beq.n	800f15c <_strtod_l+0x464>
 800f146:	494b      	ldr	r1, [pc, #300]	; (800f274 <_strtod_l+0x57c>)
 800f148:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f14c:	ed91 7b00 	vldr	d7, [r1]
 800f150:	ec49 8b16 	vmov	d6, r8, r9
 800f154:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f158:	ec59 8b17 	vmov	r8, r9, d7
 800f15c:	f032 020f 	bics.w	r2, r2, #15
 800f160:	d04f      	beq.n	800f202 <_strtod_l+0x50a>
 800f162:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f166:	dd22      	ble.n	800f1ae <_strtod_l+0x4b6>
 800f168:	2500      	movs	r5, #0
 800f16a:	462e      	mov	r6, r5
 800f16c:	9506      	str	r5, [sp, #24]
 800f16e:	462f      	mov	r7, r5
 800f170:	2322      	movs	r3, #34	; 0x22
 800f172:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f280 <_strtod_l+0x588>
 800f176:	6023      	str	r3, [r4, #0]
 800f178:	f04f 0800 	mov.w	r8, #0
 800f17c:	9b06      	ldr	r3, [sp, #24]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f43f adfe 	beq.w	800ed80 <_strtod_l+0x88>
 800f184:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f186:	4620      	mov	r0, r4
 800f188:	f000 ff3a 	bl	8010000 <_Bfree>
 800f18c:	4639      	mov	r1, r7
 800f18e:	4620      	mov	r0, r4
 800f190:	f000 ff36 	bl	8010000 <_Bfree>
 800f194:	4631      	mov	r1, r6
 800f196:	4620      	mov	r0, r4
 800f198:	f000 ff32 	bl	8010000 <_Bfree>
 800f19c:	9906      	ldr	r1, [sp, #24]
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f000 ff2e 	bl	8010000 <_Bfree>
 800f1a4:	4629      	mov	r1, r5
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	f000 ff2a 	bl	8010000 <_Bfree>
 800f1ac:	e5e8      	b.n	800ed80 <_strtod_l+0x88>
 800f1ae:	2000      	movs	r0, #0
 800f1b0:	ec49 8b17 	vmov	d7, r8, r9
 800f1b4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f278 <_strtod_l+0x580>
 800f1b8:	1112      	asrs	r2, r2, #4
 800f1ba:	4601      	mov	r1, r0
 800f1bc:	2a01      	cmp	r2, #1
 800f1be:	dc23      	bgt.n	800f208 <_strtod_l+0x510>
 800f1c0:	b108      	cbz	r0, 800f1c6 <_strtod_l+0x4ce>
 800f1c2:	ec59 8b17 	vmov	r8, r9, d7
 800f1c6:	4a2c      	ldr	r2, [pc, #176]	; (800f278 <_strtod_l+0x580>)
 800f1c8:	482c      	ldr	r0, [pc, #176]	; (800f27c <_strtod_l+0x584>)
 800f1ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f1ce:	ed92 7b00 	vldr	d7, [r2]
 800f1d2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f1d6:	ec49 8b16 	vmov	d6, r8, r9
 800f1da:	4a29      	ldr	r2, [pc, #164]	; (800f280 <_strtod_l+0x588>)
 800f1dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f1e0:	ee17 1a90 	vmov	r1, s15
 800f1e4:	400a      	ands	r2, r1
 800f1e6:	4282      	cmp	r2, r0
 800f1e8:	ec59 8b17 	vmov	r8, r9, d7
 800f1ec:	d8bc      	bhi.n	800f168 <_strtod_l+0x470>
 800f1ee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f1f2:	4282      	cmp	r2, r0
 800f1f4:	bf86      	itte	hi
 800f1f6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f284 <_strtod_l+0x58c>
 800f1fa:	f04f 38ff 	movhi.w	r8, #4294967295
 800f1fe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f202:	2200      	movs	r2, #0
 800f204:	9204      	str	r2, [sp, #16]
 800f206:	e078      	b.n	800f2fa <_strtod_l+0x602>
 800f208:	07d6      	lsls	r6, r2, #31
 800f20a:	d504      	bpl.n	800f216 <_strtod_l+0x51e>
 800f20c:	ed9c 6b00 	vldr	d6, [ip]
 800f210:	2001      	movs	r0, #1
 800f212:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f216:	3101      	adds	r1, #1
 800f218:	1052      	asrs	r2, r2, #1
 800f21a:	f10c 0c08 	add.w	ip, ip, #8
 800f21e:	e7cd      	b.n	800f1bc <_strtod_l+0x4c4>
 800f220:	d0ef      	beq.n	800f202 <_strtod_l+0x50a>
 800f222:	4252      	negs	r2, r2
 800f224:	f012 000f 	ands.w	r0, r2, #15
 800f228:	d00a      	beq.n	800f240 <_strtod_l+0x548>
 800f22a:	4912      	ldr	r1, [pc, #72]	; (800f274 <_strtod_l+0x57c>)
 800f22c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f230:	ed91 7b00 	vldr	d7, [r1]
 800f234:	ec49 8b16 	vmov	d6, r8, r9
 800f238:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f23c:	ec59 8b17 	vmov	r8, r9, d7
 800f240:	1112      	asrs	r2, r2, #4
 800f242:	d0de      	beq.n	800f202 <_strtod_l+0x50a>
 800f244:	2a1f      	cmp	r2, #31
 800f246:	dd1f      	ble.n	800f288 <_strtod_l+0x590>
 800f248:	2500      	movs	r5, #0
 800f24a:	462e      	mov	r6, r5
 800f24c:	9506      	str	r5, [sp, #24]
 800f24e:	462f      	mov	r7, r5
 800f250:	2322      	movs	r3, #34	; 0x22
 800f252:	f04f 0800 	mov.w	r8, #0
 800f256:	f04f 0900 	mov.w	r9, #0
 800f25a:	6023      	str	r3, [r4, #0]
 800f25c:	e78e      	b.n	800f17c <_strtod_l+0x484>
 800f25e:	bf00      	nop
 800f260:	08012395 	.word	0x08012395
 800f264:	080123ac 	.word	0x080123ac
 800f268:	0801238c 	.word	0x0801238c
 800f26c:	0801238f 	.word	0x0801238f
 800f270:	0801261f 	.word	0x0801261f
 800f274:	08012510 	.word	0x08012510
 800f278:	080124e8 	.word	0x080124e8
 800f27c:	7ca00000 	.word	0x7ca00000
 800f280:	7ff00000 	.word	0x7ff00000
 800f284:	7fefffff 	.word	0x7fefffff
 800f288:	f012 0110 	ands.w	r1, r2, #16
 800f28c:	bf18      	it	ne
 800f28e:	216a      	movne	r1, #106	; 0x6a
 800f290:	9104      	str	r1, [sp, #16]
 800f292:	ec49 8b17 	vmov	d7, r8, r9
 800f296:	49be      	ldr	r1, [pc, #760]	; (800f590 <_strtod_l+0x898>)
 800f298:	2000      	movs	r0, #0
 800f29a:	07d6      	lsls	r6, r2, #31
 800f29c:	d504      	bpl.n	800f2a8 <_strtod_l+0x5b0>
 800f29e:	ed91 6b00 	vldr	d6, [r1]
 800f2a2:	2001      	movs	r0, #1
 800f2a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2a8:	1052      	asrs	r2, r2, #1
 800f2aa:	f101 0108 	add.w	r1, r1, #8
 800f2ae:	d1f4      	bne.n	800f29a <_strtod_l+0x5a2>
 800f2b0:	b108      	cbz	r0, 800f2b6 <_strtod_l+0x5be>
 800f2b2:	ec59 8b17 	vmov	r8, r9, d7
 800f2b6:	9a04      	ldr	r2, [sp, #16]
 800f2b8:	b1c2      	cbz	r2, 800f2ec <_strtod_l+0x5f4>
 800f2ba:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f2be:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f2c2:	2a00      	cmp	r2, #0
 800f2c4:	4648      	mov	r0, r9
 800f2c6:	dd11      	ble.n	800f2ec <_strtod_l+0x5f4>
 800f2c8:	2a1f      	cmp	r2, #31
 800f2ca:	f340 812e 	ble.w	800f52a <_strtod_l+0x832>
 800f2ce:	2a34      	cmp	r2, #52	; 0x34
 800f2d0:	bfde      	ittt	le
 800f2d2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f2d6:	f04f 32ff 	movle.w	r2, #4294967295
 800f2da:	fa02 f101 	lslle.w	r1, r2, r1
 800f2de:	f04f 0800 	mov.w	r8, #0
 800f2e2:	bfcc      	ite	gt
 800f2e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f2e8:	ea01 0900 	andle.w	r9, r1, r0
 800f2ec:	ec49 8b17 	vmov	d7, r8, r9
 800f2f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2f8:	d0a6      	beq.n	800f248 <_strtod_l+0x550>
 800f2fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2fc:	9200      	str	r2, [sp, #0]
 800f2fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f300:	9a06      	ldr	r2, [sp, #24]
 800f302:	4620      	mov	r0, r4
 800f304:	f000 fee4 	bl	80100d0 <__s2b>
 800f308:	9006      	str	r0, [sp, #24]
 800f30a:	2800      	cmp	r0, #0
 800f30c:	f43f af2c 	beq.w	800f168 <_strtod_l+0x470>
 800f310:	9b07      	ldr	r3, [sp, #28]
 800f312:	1b7d      	subs	r5, r7, r5
 800f314:	2b00      	cmp	r3, #0
 800f316:	bfb4      	ite	lt
 800f318:	462b      	movlt	r3, r5
 800f31a:	2300      	movge	r3, #0
 800f31c:	9309      	str	r3, [sp, #36]	; 0x24
 800f31e:	9b07      	ldr	r3, [sp, #28]
 800f320:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800f570 <_strtod_l+0x878>
 800f324:	ed9f ab94 	vldr	d10, [pc, #592]	; 800f578 <_strtod_l+0x880>
 800f328:	ed9f bb95 	vldr	d11, [pc, #596]	; 800f580 <_strtod_l+0x888>
 800f32c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f330:	2500      	movs	r5, #0
 800f332:	930c      	str	r3, [sp, #48]	; 0x30
 800f334:	462e      	mov	r6, r5
 800f336:	9b06      	ldr	r3, [sp, #24]
 800f338:	4620      	mov	r0, r4
 800f33a:	6859      	ldr	r1, [r3, #4]
 800f33c:	f000 fe20 	bl	800ff80 <_Balloc>
 800f340:	4607      	mov	r7, r0
 800f342:	2800      	cmp	r0, #0
 800f344:	f43f af14 	beq.w	800f170 <_strtod_l+0x478>
 800f348:	9b06      	ldr	r3, [sp, #24]
 800f34a:	691a      	ldr	r2, [r3, #16]
 800f34c:	3202      	adds	r2, #2
 800f34e:	f103 010c 	add.w	r1, r3, #12
 800f352:	0092      	lsls	r2, r2, #2
 800f354:	300c      	adds	r0, #12
 800f356:	f7ff fc9d 	bl	800ec94 <memcpy>
 800f35a:	ec49 8b10 	vmov	d0, r8, r9
 800f35e:	aa14      	add	r2, sp, #80	; 0x50
 800f360:	a913      	add	r1, sp, #76	; 0x4c
 800f362:	4620      	mov	r0, r4
 800f364:	f001 f9fa 	bl	801075c <__d2b>
 800f368:	ec49 8b18 	vmov	d8, r8, r9
 800f36c:	9012      	str	r0, [sp, #72]	; 0x48
 800f36e:	2800      	cmp	r0, #0
 800f370:	f43f aefe 	beq.w	800f170 <_strtod_l+0x478>
 800f374:	2101      	movs	r1, #1
 800f376:	4620      	mov	r0, r4
 800f378:	f000 ff44 	bl	8010204 <__i2b>
 800f37c:	4606      	mov	r6, r0
 800f37e:	2800      	cmp	r0, #0
 800f380:	f43f aef6 	beq.w	800f170 <_strtod_l+0x478>
 800f384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f386:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f388:	2b00      	cmp	r3, #0
 800f38a:	bfab      	itete	ge
 800f38c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f38e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f390:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f394:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f398:	bfac      	ite	ge
 800f39a:	eb03 0b02 	addge.w	fp, r3, r2
 800f39e:	eba2 0a03 	sublt.w	sl, r2, r3
 800f3a2:	9a04      	ldr	r2, [sp, #16]
 800f3a4:	1a9b      	subs	r3, r3, r2
 800f3a6:	440b      	add	r3, r1
 800f3a8:	4a7a      	ldr	r2, [pc, #488]	; (800f594 <_strtod_l+0x89c>)
 800f3aa:	3b01      	subs	r3, #1
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f3b2:	f280 80cd 	bge.w	800f550 <_strtod_l+0x858>
 800f3b6:	1ad2      	subs	r2, r2, r3
 800f3b8:	2a1f      	cmp	r2, #31
 800f3ba:	eba1 0102 	sub.w	r1, r1, r2
 800f3be:	f04f 0001 	mov.w	r0, #1
 800f3c2:	f300 80b9 	bgt.w	800f538 <_strtod_l+0x840>
 800f3c6:	fa00 f302 	lsl.w	r3, r0, r2
 800f3ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	930a      	str	r3, [sp, #40]	; 0x28
 800f3d0:	eb0b 0301 	add.w	r3, fp, r1
 800f3d4:	9a04      	ldr	r2, [sp, #16]
 800f3d6:	459b      	cmp	fp, r3
 800f3d8:	448a      	add	sl, r1
 800f3da:	4492      	add	sl, r2
 800f3dc:	465a      	mov	r2, fp
 800f3de:	bfa8      	it	ge
 800f3e0:	461a      	movge	r2, r3
 800f3e2:	4552      	cmp	r2, sl
 800f3e4:	bfa8      	it	ge
 800f3e6:	4652      	movge	r2, sl
 800f3e8:	2a00      	cmp	r2, #0
 800f3ea:	bfc2      	ittt	gt
 800f3ec:	1a9b      	subgt	r3, r3, r2
 800f3ee:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f3f2:	ebab 0b02 	subgt.w	fp, fp, r2
 800f3f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3f8:	2a00      	cmp	r2, #0
 800f3fa:	dd18      	ble.n	800f42e <_strtod_l+0x736>
 800f3fc:	4631      	mov	r1, r6
 800f3fe:	4620      	mov	r0, r4
 800f400:	930f      	str	r3, [sp, #60]	; 0x3c
 800f402:	f000 ffbf 	bl	8010384 <__pow5mult>
 800f406:	4606      	mov	r6, r0
 800f408:	2800      	cmp	r0, #0
 800f40a:	f43f aeb1 	beq.w	800f170 <_strtod_l+0x478>
 800f40e:	4601      	mov	r1, r0
 800f410:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f412:	4620      	mov	r0, r4
 800f414:	f000 ff0c 	bl	8010230 <__multiply>
 800f418:	900e      	str	r0, [sp, #56]	; 0x38
 800f41a:	2800      	cmp	r0, #0
 800f41c:	f43f aea8 	beq.w	800f170 <_strtod_l+0x478>
 800f420:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f422:	4620      	mov	r0, r4
 800f424:	f000 fdec 	bl	8010000 <_Bfree>
 800f428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f42a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f42c:	9212      	str	r2, [sp, #72]	; 0x48
 800f42e:	2b00      	cmp	r3, #0
 800f430:	f300 8093 	bgt.w	800f55a <_strtod_l+0x862>
 800f434:	9b07      	ldr	r3, [sp, #28]
 800f436:	2b00      	cmp	r3, #0
 800f438:	dd08      	ble.n	800f44c <_strtod_l+0x754>
 800f43a:	4639      	mov	r1, r7
 800f43c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f43e:	4620      	mov	r0, r4
 800f440:	f000 ffa0 	bl	8010384 <__pow5mult>
 800f444:	4607      	mov	r7, r0
 800f446:	2800      	cmp	r0, #0
 800f448:	f43f ae92 	beq.w	800f170 <_strtod_l+0x478>
 800f44c:	f1ba 0f00 	cmp.w	sl, #0
 800f450:	dd08      	ble.n	800f464 <_strtod_l+0x76c>
 800f452:	4639      	mov	r1, r7
 800f454:	4652      	mov	r2, sl
 800f456:	4620      	mov	r0, r4
 800f458:	f000 ffee 	bl	8010438 <__lshift>
 800f45c:	4607      	mov	r7, r0
 800f45e:	2800      	cmp	r0, #0
 800f460:	f43f ae86 	beq.w	800f170 <_strtod_l+0x478>
 800f464:	f1bb 0f00 	cmp.w	fp, #0
 800f468:	dd08      	ble.n	800f47c <_strtod_l+0x784>
 800f46a:	4631      	mov	r1, r6
 800f46c:	465a      	mov	r2, fp
 800f46e:	4620      	mov	r0, r4
 800f470:	f000 ffe2 	bl	8010438 <__lshift>
 800f474:	4606      	mov	r6, r0
 800f476:	2800      	cmp	r0, #0
 800f478:	f43f ae7a 	beq.w	800f170 <_strtod_l+0x478>
 800f47c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f47e:	463a      	mov	r2, r7
 800f480:	4620      	mov	r0, r4
 800f482:	f001 f865 	bl	8010550 <__mdiff>
 800f486:	4605      	mov	r5, r0
 800f488:	2800      	cmp	r0, #0
 800f48a:	f43f ae71 	beq.w	800f170 <_strtod_l+0x478>
 800f48e:	2300      	movs	r3, #0
 800f490:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f494:	60c3      	str	r3, [r0, #12]
 800f496:	4631      	mov	r1, r6
 800f498:	f001 f83e 	bl	8010518 <__mcmp>
 800f49c:	2800      	cmp	r0, #0
 800f49e:	da7d      	bge.n	800f59c <_strtod_l+0x8a4>
 800f4a0:	ea5a 0308 	orrs.w	r3, sl, r8
 800f4a4:	f040 80a3 	bne.w	800f5ee <_strtod_l+0x8f6>
 800f4a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f040 809e 	bne.w	800f5ee <_strtod_l+0x8f6>
 800f4b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f4b6:	0d1b      	lsrs	r3, r3, #20
 800f4b8:	051b      	lsls	r3, r3, #20
 800f4ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f4be:	f240 8096 	bls.w	800f5ee <_strtod_l+0x8f6>
 800f4c2:	696b      	ldr	r3, [r5, #20]
 800f4c4:	b91b      	cbnz	r3, 800f4ce <_strtod_l+0x7d6>
 800f4c6:	692b      	ldr	r3, [r5, #16]
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	f340 8090 	ble.w	800f5ee <_strtod_l+0x8f6>
 800f4ce:	4629      	mov	r1, r5
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	f000 ffb0 	bl	8010438 <__lshift>
 800f4d8:	4631      	mov	r1, r6
 800f4da:	4605      	mov	r5, r0
 800f4dc:	f001 f81c 	bl	8010518 <__mcmp>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	f340 8084 	ble.w	800f5ee <_strtod_l+0x8f6>
 800f4e6:	9904      	ldr	r1, [sp, #16]
 800f4e8:	4a2b      	ldr	r2, [pc, #172]	; (800f598 <_strtod_l+0x8a0>)
 800f4ea:	464b      	mov	r3, r9
 800f4ec:	2900      	cmp	r1, #0
 800f4ee:	f000 809d 	beq.w	800f62c <_strtod_l+0x934>
 800f4f2:	ea02 0109 	and.w	r1, r2, r9
 800f4f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f4fa:	f300 8097 	bgt.w	800f62c <_strtod_l+0x934>
 800f4fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f502:	f77f aea5 	ble.w	800f250 <_strtod_l+0x558>
 800f506:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f588 <_strtod_l+0x890>
 800f50a:	ec49 8b16 	vmov	d6, r8, r9
 800f50e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f512:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f516:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	bf08      	it	eq
 800f51e:	2322      	moveq	r3, #34	; 0x22
 800f520:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f524:	bf08      	it	eq
 800f526:	6023      	streq	r3, [r4, #0]
 800f528:	e62c      	b.n	800f184 <_strtod_l+0x48c>
 800f52a:	f04f 31ff 	mov.w	r1, #4294967295
 800f52e:	fa01 f202 	lsl.w	r2, r1, r2
 800f532:	ea02 0808 	and.w	r8, r2, r8
 800f536:	e6d9      	b.n	800f2ec <_strtod_l+0x5f4>
 800f538:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800f53c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f540:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800f544:	33e2      	adds	r3, #226	; 0xe2
 800f546:	fa00 f303 	lsl.w	r3, r0, r3
 800f54a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800f54e:	e73f      	b.n	800f3d0 <_strtod_l+0x6d8>
 800f550:	2200      	movs	r2, #0
 800f552:	2301      	movs	r3, #1
 800f554:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f558:	e73a      	b.n	800f3d0 <_strtod_l+0x6d8>
 800f55a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f55c:	461a      	mov	r2, r3
 800f55e:	4620      	mov	r0, r4
 800f560:	f000 ff6a 	bl	8010438 <__lshift>
 800f564:	9012      	str	r0, [sp, #72]	; 0x48
 800f566:	2800      	cmp	r0, #0
 800f568:	f47f af64 	bne.w	800f434 <_strtod_l+0x73c>
 800f56c:	e600      	b.n	800f170 <_strtod_l+0x478>
 800f56e:	bf00      	nop
 800f570:	94a03595 	.word	0x94a03595
 800f574:	3fcfffff 	.word	0x3fcfffff
 800f578:	94a03595 	.word	0x94a03595
 800f57c:	3fdfffff 	.word	0x3fdfffff
 800f580:	35afe535 	.word	0x35afe535
 800f584:	3fe00000 	.word	0x3fe00000
 800f588:	00000000 	.word	0x00000000
 800f58c:	39500000 	.word	0x39500000
 800f590:	080123c0 	.word	0x080123c0
 800f594:	fffffc02 	.word	0xfffffc02
 800f598:	7ff00000 	.word	0x7ff00000
 800f59c:	46cb      	mov	fp, r9
 800f59e:	d15f      	bne.n	800f660 <_strtod_l+0x968>
 800f5a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f5a4:	f1ba 0f00 	cmp.w	sl, #0
 800f5a8:	d02a      	beq.n	800f600 <_strtod_l+0x908>
 800f5aa:	4aa7      	ldr	r2, [pc, #668]	; (800f848 <_strtod_l+0xb50>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d12b      	bne.n	800f608 <_strtod_l+0x910>
 800f5b0:	9b04      	ldr	r3, [sp, #16]
 800f5b2:	4642      	mov	r2, r8
 800f5b4:	b1fb      	cbz	r3, 800f5f6 <_strtod_l+0x8fe>
 800f5b6:	4ba5      	ldr	r3, [pc, #660]	; (800f84c <_strtod_l+0xb54>)
 800f5b8:	ea09 0303 	and.w	r3, r9, r3
 800f5bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f5c0:	f04f 31ff 	mov.w	r1, #4294967295
 800f5c4:	d81a      	bhi.n	800f5fc <_strtod_l+0x904>
 800f5c6:	0d1b      	lsrs	r3, r3, #20
 800f5c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f5cc:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d119      	bne.n	800f608 <_strtod_l+0x910>
 800f5d4:	4b9e      	ldr	r3, [pc, #632]	; (800f850 <_strtod_l+0xb58>)
 800f5d6:	459b      	cmp	fp, r3
 800f5d8:	d102      	bne.n	800f5e0 <_strtod_l+0x8e8>
 800f5da:	3201      	adds	r2, #1
 800f5dc:	f43f adc8 	beq.w	800f170 <_strtod_l+0x478>
 800f5e0:	4b9a      	ldr	r3, [pc, #616]	; (800f84c <_strtod_l+0xb54>)
 800f5e2:	ea0b 0303 	and.w	r3, fp, r3
 800f5e6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f5ea:	f04f 0800 	mov.w	r8, #0
 800f5ee:	9b04      	ldr	r3, [sp, #16]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d188      	bne.n	800f506 <_strtod_l+0x80e>
 800f5f4:	e5c6      	b.n	800f184 <_strtod_l+0x48c>
 800f5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f5fa:	e7e9      	b.n	800f5d0 <_strtod_l+0x8d8>
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	e7e7      	b.n	800f5d0 <_strtod_l+0x8d8>
 800f600:	ea53 0308 	orrs.w	r3, r3, r8
 800f604:	f43f af6f 	beq.w	800f4e6 <_strtod_l+0x7ee>
 800f608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f60a:	b1cb      	cbz	r3, 800f640 <_strtod_l+0x948>
 800f60c:	ea13 0f0b 	tst.w	r3, fp
 800f610:	d0ed      	beq.n	800f5ee <_strtod_l+0x8f6>
 800f612:	9a04      	ldr	r2, [sp, #16]
 800f614:	4640      	mov	r0, r8
 800f616:	4649      	mov	r1, r9
 800f618:	f1ba 0f00 	cmp.w	sl, #0
 800f61c:	d014      	beq.n	800f648 <_strtod_l+0x950>
 800f61e:	f7ff fb4f 	bl	800ecc0 <sulp>
 800f622:	ee38 7b00 	vadd.f64	d7, d8, d0
 800f626:	ec59 8b17 	vmov	r8, r9, d7
 800f62a:	e7e0      	b.n	800f5ee <_strtod_l+0x8f6>
 800f62c:	4013      	ands	r3, r2
 800f62e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f632:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f636:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f63a:	f04f 38ff 	mov.w	r8, #4294967295
 800f63e:	e7d6      	b.n	800f5ee <_strtod_l+0x8f6>
 800f640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f642:	ea13 0f08 	tst.w	r3, r8
 800f646:	e7e3      	b.n	800f610 <_strtod_l+0x918>
 800f648:	f7ff fb3a 	bl	800ecc0 <sulp>
 800f64c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800f650:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f658:	ec59 8b10 	vmov	r8, r9, d0
 800f65c:	d1c7      	bne.n	800f5ee <_strtod_l+0x8f6>
 800f65e:	e5f7      	b.n	800f250 <_strtod_l+0x558>
 800f660:	4631      	mov	r1, r6
 800f662:	4628      	mov	r0, r5
 800f664:	f001 f8d6 	bl	8010814 <__ratio>
 800f668:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f66c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f674:	d865      	bhi.n	800f742 <_strtod_l+0xa4a>
 800f676:	f1ba 0f00 	cmp.w	sl, #0
 800f67a:	d042      	beq.n	800f702 <_strtod_l+0xa0a>
 800f67c:	4b75      	ldr	r3, [pc, #468]	; (800f854 <_strtod_l+0xb5c>)
 800f67e:	2200      	movs	r2, #0
 800f680:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800f684:	4871      	ldr	r0, [pc, #452]	; (800f84c <_strtod_l+0xb54>)
 800f686:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800f860 <_strtod_l+0xb68>
 800f68a:	ea0b 0100 	and.w	r1, fp, r0
 800f68e:	4561      	cmp	r1, ip
 800f690:	f040 808e 	bne.w	800f7b0 <_strtod_l+0xab8>
 800f694:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800f698:	ec49 8b10 	vmov	d0, r8, r9
 800f69c:	ec43 2b1c 	vmov	d12, r2, r3
 800f6a0:	910a      	str	r1, [sp, #40]	; 0x28
 800f6a2:	f000 ffdf 	bl	8010664 <__ulp>
 800f6a6:	ec49 8b1e 	vmov	d14, r8, r9
 800f6aa:	4868      	ldr	r0, [pc, #416]	; (800f84c <_strtod_l+0xb54>)
 800f6ac:	eeac eb00 	vfma.f64	d14, d12, d0
 800f6b0:	ee1e 3a90 	vmov	r3, s29
 800f6b4:	4a68      	ldr	r2, [pc, #416]	; (800f858 <_strtod_l+0xb60>)
 800f6b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f6b8:	4018      	ands	r0, r3
 800f6ba:	4290      	cmp	r0, r2
 800f6bc:	ec59 8b1e 	vmov	r8, r9, d14
 800f6c0:	d94e      	bls.n	800f760 <_strtod_l+0xa68>
 800f6c2:	ee18 3a90 	vmov	r3, s17
 800f6c6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d104      	bne.n	800f6d8 <_strtod_l+0x9e0>
 800f6ce:	ee18 3a10 	vmov	r3, s16
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	f43f ad4c 	beq.w	800f170 <_strtod_l+0x478>
 800f6d8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800f850 <_strtod_l+0xb58>
 800f6dc:	f04f 38ff 	mov.w	r8, #4294967295
 800f6e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f000 fc8c 	bl	8010000 <_Bfree>
 800f6e8:	4639      	mov	r1, r7
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f000 fc88 	bl	8010000 <_Bfree>
 800f6f0:	4631      	mov	r1, r6
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	f000 fc84 	bl	8010000 <_Bfree>
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f000 fc80 	bl	8010000 <_Bfree>
 800f700:	e619      	b.n	800f336 <_strtod_l+0x63e>
 800f702:	f1b8 0f00 	cmp.w	r8, #0
 800f706:	d112      	bne.n	800f72e <_strtod_l+0xa36>
 800f708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f70c:	b9b3      	cbnz	r3, 800f73c <_strtod_l+0xa44>
 800f70e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f712:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f71a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f71e:	bf58      	it	pl
 800f720:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800f724:	eeb1 7b4d 	vneg.f64	d7, d13
 800f728:	ec53 2b17 	vmov	r2, r3, d7
 800f72c:	e7aa      	b.n	800f684 <_strtod_l+0x98c>
 800f72e:	f1b8 0f01 	cmp.w	r8, #1
 800f732:	d103      	bne.n	800f73c <_strtod_l+0xa44>
 800f734:	f1b9 0f00 	cmp.w	r9, #0
 800f738:	f43f ad8a 	beq.w	800f250 <_strtod_l+0x558>
 800f73c:	4b47      	ldr	r3, [pc, #284]	; (800f85c <_strtod_l+0xb64>)
 800f73e:	2200      	movs	r2, #0
 800f740:	e79e      	b.n	800f680 <_strtod_l+0x988>
 800f742:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f746:	ee20 db0d 	vmul.f64	d13, d0, d13
 800f74a:	f1ba 0f00 	cmp.w	sl, #0
 800f74e:	d104      	bne.n	800f75a <_strtod_l+0xa62>
 800f750:	eeb1 7b4d 	vneg.f64	d7, d13
 800f754:	ec53 2b17 	vmov	r2, r3, d7
 800f758:	e794      	b.n	800f684 <_strtod_l+0x98c>
 800f75a:	eeb0 7b4d 	vmov.f64	d7, d13
 800f75e:	e7f9      	b.n	800f754 <_strtod_l+0xa5c>
 800f760:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f764:	9b04      	ldr	r3, [sp, #16]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d1ba      	bne.n	800f6e0 <_strtod_l+0x9e8>
 800f76a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f76e:	0d1b      	lsrs	r3, r3, #20
 800f770:	051b      	lsls	r3, r3, #20
 800f772:	4299      	cmp	r1, r3
 800f774:	d1b4      	bne.n	800f6e0 <_strtod_l+0x9e8>
 800f776:	ec51 0b1d 	vmov	r0, r1, d13
 800f77a:	f7f0 ffdd 	bl	8000738 <__aeabi_d2lz>
 800f77e:	f7f0 ff95 	bl	80006ac <__aeabi_l2d>
 800f782:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f786:	ec41 0b17 	vmov	d7, r0, r1
 800f78a:	ea43 0308 	orr.w	r3, r3, r8
 800f78e:	ea53 030a 	orrs.w	r3, r3, sl
 800f792:	ee3d db47 	vsub.f64	d13, d13, d7
 800f796:	d03c      	beq.n	800f812 <_strtod_l+0xb1a>
 800f798:	eeb4 dbca 	vcmpe.f64	d13, d10
 800f79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a0:	f53f acf0 	bmi.w	800f184 <_strtod_l+0x48c>
 800f7a4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800f7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ac:	dd98      	ble.n	800f6e0 <_strtod_l+0x9e8>
 800f7ae:	e4e9      	b.n	800f184 <_strtod_l+0x48c>
 800f7b0:	9804      	ldr	r0, [sp, #16]
 800f7b2:	b1f0      	cbz	r0, 800f7f2 <_strtod_l+0xafa>
 800f7b4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800f7b8:	d81b      	bhi.n	800f7f2 <_strtod_l+0xafa>
 800f7ba:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800f840 <_strtod_l+0xb48>
 800f7be:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800f7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c6:	d811      	bhi.n	800f7ec <_strtod_l+0xaf4>
 800f7c8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800f7cc:	ee1d 3a10 	vmov	r3, s26
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	bf38      	it	cc
 800f7d4:	2301      	movcc	r3, #1
 800f7d6:	ee0d 3a10 	vmov	s26, r3
 800f7da:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800f7de:	f1ba 0f00 	cmp.w	sl, #0
 800f7e2:	d113      	bne.n	800f80c <_strtod_l+0xb14>
 800f7e4:	eeb1 7b4d 	vneg.f64	d7, d13
 800f7e8:	ec53 2b17 	vmov	r2, r3, d7
 800f7ec:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800f7f0:	1a43      	subs	r3, r0, r1
 800f7f2:	eeb0 0b48 	vmov.f64	d0, d8
 800f7f6:	ec43 2b1c 	vmov	d12, r2, r3
 800f7fa:	910a      	str	r1, [sp, #40]	; 0x28
 800f7fc:	f000 ff32 	bl	8010664 <__ulp>
 800f800:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f802:	eeac 8b00 	vfma.f64	d8, d12, d0
 800f806:	ec59 8b18 	vmov	r8, r9, d8
 800f80a:	e7ab      	b.n	800f764 <_strtod_l+0xa6c>
 800f80c:	eeb0 7b4d 	vmov.f64	d7, d13
 800f810:	e7ea      	b.n	800f7e8 <_strtod_l+0xaf0>
 800f812:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800f816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f81a:	f57f af61 	bpl.w	800f6e0 <_strtod_l+0x9e8>
 800f81e:	e4b1      	b.n	800f184 <_strtod_l+0x48c>
 800f820:	2300      	movs	r3, #0
 800f822:	9308      	str	r3, [sp, #32]
 800f824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f826:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f828:	6013      	str	r3, [r2, #0]
 800f82a:	f7ff baad 	b.w	800ed88 <_strtod_l+0x90>
 800f82e:	2a65      	cmp	r2, #101	; 0x65
 800f830:	f43f ab9f 	beq.w	800ef72 <_strtod_l+0x27a>
 800f834:	2a45      	cmp	r2, #69	; 0x45
 800f836:	f43f ab9c 	beq.w	800ef72 <_strtod_l+0x27a>
 800f83a:	2101      	movs	r1, #1
 800f83c:	f7ff bbd4 	b.w	800efe8 <_strtod_l+0x2f0>
 800f840:	ffc00000 	.word	0xffc00000
 800f844:	41dfffff 	.word	0x41dfffff
 800f848:	000fffff 	.word	0x000fffff
 800f84c:	7ff00000 	.word	0x7ff00000
 800f850:	7fefffff 	.word	0x7fefffff
 800f854:	3ff00000 	.word	0x3ff00000
 800f858:	7c9fffff 	.word	0x7c9fffff
 800f85c:	bff00000 	.word	0xbff00000
 800f860:	7fe00000 	.word	0x7fe00000

0800f864 <strtod>:
 800f864:	460a      	mov	r2, r1
 800f866:	4601      	mov	r1, r0
 800f868:	4802      	ldr	r0, [pc, #8]	; (800f874 <strtod+0x10>)
 800f86a:	4b03      	ldr	r3, [pc, #12]	; (800f878 <strtod+0x14>)
 800f86c:	6800      	ldr	r0, [r0, #0]
 800f86e:	f7ff ba43 	b.w	800ecf8 <_strtod_l>
 800f872:	bf00      	nop
 800f874:	240000b0 	.word	0x240000b0
 800f878:	24000118 	.word	0x24000118

0800f87c <rshift>:
 800f87c:	6903      	ldr	r3, [r0, #16]
 800f87e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f882:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f886:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f88a:	f100 0414 	add.w	r4, r0, #20
 800f88e:	dd45      	ble.n	800f91c <rshift+0xa0>
 800f890:	f011 011f 	ands.w	r1, r1, #31
 800f894:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f898:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f89c:	d10c      	bne.n	800f8b8 <rshift+0x3c>
 800f89e:	f100 0710 	add.w	r7, r0, #16
 800f8a2:	4629      	mov	r1, r5
 800f8a4:	42b1      	cmp	r1, r6
 800f8a6:	d334      	bcc.n	800f912 <rshift+0x96>
 800f8a8:	1a9b      	subs	r3, r3, r2
 800f8aa:	009b      	lsls	r3, r3, #2
 800f8ac:	1eea      	subs	r2, r5, #3
 800f8ae:	4296      	cmp	r6, r2
 800f8b0:	bf38      	it	cc
 800f8b2:	2300      	movcc	r3, #0
 800f8b4:	4423      	add	r3, r4
 800f8b6:	e015      	b.n	800f8e4 <rshift+0x68>
 800f8b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f8bc:	f1c1 0820 	rsb	r8, r1, #32
 800f8c0:	40cf      	lsrs	r7, r1
 800f8c2:	f105 0e04 	add.w	lr, r5, #4
 800f8c6:	46a1      	mov	r9, r4
 800f8c8:	4576      	cmp	r6, lr
 800f8ca:	46f4      	mov	ip, lr
 800f8cc:	d815      	bhi.n	800f8fa <rshift+0x7e>
 800f8ce:	1a9a      	subs	r2, r3, r2
 800f8d0:	0092      	lsls	r2, r2, #2
 800f8d2:	3a04      	subs	r2, #4
 800f8d4:	3501      	adds	r5, #1
 800f8d6:	42ae      	cmp	r6, r5
 800f8d8:	bf38      	it	cc
 800f8da:	2200      	movcc	r2, #0
 800f8dc:	18a3      	adds	r3, r4, r2
 800f8de:	50a7      	str	r7, [r4, r2]
 800f8e0:	b107      	cbz	r7, 800f8e4 <rshift+0x68>
 800f8e2:	3304      	adds	r3, #4
 800f8e4:	1b1a      	subs	r2, r3, r4
 800f8e6:	42a3      	cmp	r3, r4
 800f8e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f8ec:	bf08      	it	eq
 800f8ee:	2300      	moveq	r3, #0
 800f8f0:	6102      	str	r2, [r0, #16]
 800f8f2:	bf08      	it	eq
 800f8f4:	6143      	streq	r3, [r0, #20]
 800f8f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8fa:	f8dc c000 	ldr.w	ip, [ip]
 800f8fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800f902:	ea4c 0707 	orr.w	r7, ip, r7
 800f906:	f849 7b04 	str.w	r7, [r9], #4
 800f90a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f90e:	40cf      	lsrs	r7, r1
 800f910:	e7da      	b.n	800f8c8 <rshift+0x4c>
 800f912:	f851 cb04 	ldr.w	ip, [r1], #4
 800f916:	f847 cf04 	str.w	ip, [r7, #4]!
 800f91a:	e7c3      	b.n	800f8a4 <rshift+0x28>
 800f91c:	4623      	mov	r3, r4
 800f91e:	e7e1      	b.n	800f8e4 <rshift+0x68>

0800f920 <__hexdig_fun>:
 800f920:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f924:	2b09      	cmp	r3, #9
 800f926:	d802      	bhi.n	800f92e <__hexdig_fun+0xe>
 800f928:	3820      	subs	r0, #32
 800f92a:	b2c0      	uxtb	r0, r0
 800f92c:	4770      	bx	lr
 800f92e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f932:	2b05      	cmp	r3, #5
 800f934:	d801      	bhi.n	800f93a <__hexdig_fun+0x1a>
 800f936:	3847      	subs	r0, #71	; 0x47
 800f938:	e7f7      	b.n	800f92a <__hexdig_fun+0xa>
 800f93a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f93e:	2b05      	cmp	r3, #5
 800f940:	d801      	bhi.n	800f946 <__hexdig_fun+0x26>
 800f942:	3827      	subs	r0, #39	; 0x27
 800f944:	e7f1      	b.n	800f92a <__hexdig_fun+0xa>
 800f946:	2000      	movs	r0, #0
 800f948:	4770      	bx	lr
	...

0800f94c <__gethex>:
 800f94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f950:	ed2d 8b02 	vpush	{d8}
 800f954:	b089      	sub	sp, #36	; 0x24
 800f956:	ee08 0a10 	vmov	s16, r0
 800f95a:	9304      	str	r3, [sp, #16]
 800f95c:	4bb4      	ldr	r3, [pc, #720]	; (800fc30 <__gethex+0x2e4>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	9301      	str	r3, [sp, #4]
 800f962:	4618      	mov	r0, r3
 800f964:	468b      	mov	fp, r1
 800f966:	4690      	mov	r8, r2
 800f968:	f7f0 fcba 	bl	80002e0 <strlen>
 800f96c:	9b01      	ldr	r3, [sp, #4]
 800f96e:	f8db 2000 	ldr.w	r2, [fp]
 800f972:	4403      	add	r3, r0
 800f974:	4682      	mov	sl, r0
 800f976:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f97a:	9305      	str	r3, [sp, #20]
 800f97c:	1c93      	adds	r3, r2, #2
 800f97e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f982:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f986:	32fe      	adds	r2, #254	; 0xfe
 800f988:	18d1      	adds	r1, r2, r3
 800f98a:	461f      	mov	r7, r3
 800f98c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f990:	9100      	str	r1, [sp, #0]
 800f992:	2830      	cmp	r0, #48	; 0x30
 800f994:	d0f8      	beq.n	800f988 <__gethex+0x3c>
 800f996:	f7ff ffc3 	bl	800f920 <__hexdig_fun>
 800f99a:	4604      	mov	r4, r0
 800f99c:	2800      	cmp	r0, #0
 800f99e:	d13a      	bne.n	800fa16 <__gethex+0xca>
 800f9a0:	9901      	ldr	r1, [sp, #4]
 800f9a2:	4652      	mov	r2, sl
 800f9a4:	4638      	mov	r0, r7
 800f9a6:	f001 f86b 	bl	8010a80 <strncmp>
 800f9aa:	4605      	mov	r5, r0
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d168      	bne.n	800fa82 <__gethex+0x136>
 800f9b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f9b4:	eb07 060a 	add.w	r6, r7, sl
 800f9b8:	f7ff ffb2 	bl	800f920 <__hexdig_fun>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	d062      	beq.n	800fa86 <__gethex+0x13a>
 800f9c0:	4633      	mov	r3, r6
 800f9c2:	7818      	ldrb	r0, [r3, #0]
 800f9c4:	2830      	cmp	r0, #48	; 0x30
 800f9c6:	461f      	mov	r7, r3
 800f9c8:	f103 0301 	add.w	r3, r3, #1
 800f9cc:	d0f9      	beq.n	800f9c2 <__gethex+0x76>
 800f9ce:	f7ff ffa7 	bl	800f920 <__hexdig_fun>
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	fab0 f480 	clz	r4, r0
 800f9d8:	0964      	lsrs	r4, r4, #5
 800f9da:	4635      	mov	r5, r6
 800f9dc:	9300      	str	r3, [sp, #0]
 800f9de:	463a      	mov	r2, r7
 800f9e0:	4616      	mov	r6, r2
 800f9e2:	3201      	adds	r2, #1
 800f9e4:	7830      	ldrb	r0, [r6, #0]
 800f9e6:	f7ff ff9b 	bl	800f920 <__hexdig_fun>
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	d1f8      	bne.n	800f9e0 <__gethex+0x94>
 800f9ee:	9901      	ldr	r1, [sp, #4]
 800f9f0:	4652      	mov	r2, sl
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	f001 f844 	bl	8010a80 <strncmp>
 800f9f8:	b980      	cbnz	r0, 800fa1c <__gethex+0xd0>
 800f9fa:	b94d      	cbnz	r5, 800fa10 <__gethex+0xc4>
 800f9fc:	eb06 050a 	add.w	r5, r6, sl
 800fa00:	462a      	mov	r2, r5
 800fa02:	4616      	mov	r6, r2
 800fa04:	3201      	adds	r2, #1
 800fa06:	7830      	ldrb	r0, [r6, #0]
 800fa08:	f7ff ff8a 	bl	800f920 <__hexdig_fun>
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	d1f8      	bne.n	800fa02 <__gethex+0xb6>
 800fa10:	1bad      	subs	r5, r5, r6
 800fa12:	00ad      	lsls	r5, r5, #2
 800fa14:	e004      	b.n	800fa20 <__gethex+0xd4>
 800fa16:	2400      	movs	r4, #0
 800fa18:	4625      	mov	r5, r4
 800fa1a:	e7e0      	b.n	800f9de <__gethex+0x92>
 800fa1c:	2d00      	cmp	r5, #0
 800fa1e:	d1f7      	bne.n	800fa10 <__gethex+0xc4>
 800fa20:	7833      	ldrb	r3, [r6, #0]
 800fa22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fa26:	2b50      	cmp	r3, #80	; 0x50
 800fa28:	d13b      	bne.n	800faa2 <__gethex+0x156>
 800fa2a:	7873      	ldrb	r3, [r6, #1]
 800fa2c:	2b2b      	cmp	r3, #43	; 0x2b
 800fa2e:	d02c      	beq.n	800fa8a <__gethex+0x13e>
 800fa30:	2b2d      	cmp	r3, #45	; 0x2d
 800fa32:	d02e      	beq.n	800fa92 <__gethex+0x146>
 800fa34:	1c71      	adds	r1, r6, #1
 800fa36:	f04f 0900 	mov.w	r9, #0
 800fa3a:	7808      	ldrb	r0, [r1, #0]
 800fa3c:	f7ff ff70 	bl	800f920 <__hexdig_fun>
 800fa40:	1e43      	subs	r3, r0, #1
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	2b18      	cmp	r3, #24
 800fa46:	d82c      	bhi.n	800faa2 <__gethex+0x156>
 800fa48:	f1a0 0210 	sub.w	r2, r0, #16
 800fa4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fa50:	f7ff ff66 	bl	800f920 <__hexdig_fun>
 800fa54:	1e43      	subs	r3, r0, #1
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	2b18      	cmp	r3, #24
 800fa5a:	d91d      	bls.n	800fa98 <__gethex+0x14c>
 800fa5c:	f1b9 0f00 	cmp.w	r9, #0
 800fa60:	d000      	beq.n	800fa64 <__gethex+0x118>
 800fa62:	4252      	negs	r2, r2
 800fa64:	4415      	add	r5, r2
 800fa66:	f8cb 1000 	str.w	r1, [fp]
 800fa6a:	b1e4      	cbz	r4, 800faa6 <__gethex+0x15a>
 800fa6c:	9b00      	ldr	r3, [sp, #0]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	bf14      	ite	ne
 800fa72:	2700      	movne	r7, #0
 800fa74:	2706      	moveq	r7, #6
 800fa76:	4638      	mov	r0, r7
 800fa78:	b009      	add	sp, #36	; 0x24
 800fa7a:	ecbd 8b02 	vpop	{d8}
 800fa7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa82:	463e      	mov	r6, r7
 800fa84:	4625      	mov	r5, r4
 800fa86:	2401      	movs	r4, #1
 800fa88:	e7ca      	b.n	800fa20 <__gethex+0xd4>
 800fa8a:	f04f 0900 	mov.w	r9, #0
 800fa8e:	1cb1      	adds	r1, r6, #2
 800fa90:	e7d3      	b.n	800fa3a <__gethex+0xee>
 800fa92:	f04f 0901 	mov.w	r9, #1
 800fa96:	e7fa      	b.n	800fa8e <__gethex+0x142>
 800fa98:	230a      	movs	r3, #10
 800fa9a:	fb03 0202 	mla	r2, r3, r2, r0
 800fa9e:	3a10      	subs	r2, #16
 800faa0:	e7d4      	b.n	800fa4c <__gethex+0x100>
 800faa2:	4631      	mov	r1, r6
 800faa4:	e7df      	b.n	800fa66 <__gethex+0x11a>
 800faa6:	1bf3      	subs	r3, r6, r7
 800faa8:	3b01      	subs	r3, #1
 800faaa:	4621      	mov	r1, r4
 800faac:	2b07      	cmp	r3, #7
 800faae:	dc0b      	bgt.n	800fac8 <__gethex+0x17c>
 800fab0:	ee18 0a10 	vmov	r0, s16
 800fab4:	f000 fa64 	bl	800ff80 <_Balloc>
 800fab8:	4604      	mov	r4, r0
 800faba:	b940      	cbnz	r0, 800face <__gethex+0x182>
 800fabc:	4b5d      	ldr	r3, [pc, #372]	; (800fc34 <__gethex+0x2e8>)
 800fabe:	4602      	mov	r2, r0
 800fac0:	21de      	movs	r1, #222	; 0xde
 800fac2:	485d      	ldr	r0, [pc, #372]	; (800fc38 <__gethex+0x2ec>)
 800fac4:	f000 fffe 	bl	8010ac4 <__assert_func>
 800fac8:	3101      	adds	r1, #1
 800faca:	105b      	asrs	r3, r3, #1
 800facc:	e7ee      	b.n	800faac <__gethex+0x160>
 800face:	f100 0914 	add.w	r9, r0, #20
 800fad2:	f04f 0b00 	mov.w	fp, #0
 800fad6:	f1ca 0301 	rsb	r3, sl, #1
 800fada:	f8cd 9008 	str.w	r9, [sp, #8]
 800fade:	f8cd b000 	str.w	fp, [sp]
 800fae2:	9306      	str	r3, [sp, #24]
 800fae4:	42b7      	cmp	r7, r6
 800fae6:	d340      	bcc.n	800fb6a <__gethex+0x21e>
 800fae8:	9802      	ldr	r0, [sp, #8]
 800faea:	9b00      	ldr	r3, [sp, #0]
 800faec:	f840 3b04 	str.w	r3, [r0], #4
 800faf0:	eba0 0009 	sub.w	r0, r0, r9
 800faf4:	1080      	asrs	r0, r0, #2
 800faf6:	0146      	lsls	r6, r0, #5
 800faf8:	6120      	str	r0, [r4, #16]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f000 fb32 	bl	8010164 <__hi0bits>
 800fb00:	1a30      	subs	r0, r6, r0
 800fb02:	f8d8 6000 	ldr.w	r6, [r8]
 800fb06:	42b0      	cmp	r0, r6
 800fb08:	dd63      	ble.n	800fbd2 <__gethex+0x286>
 800fb0a:	1b87      	subs	r7, r0, r6
 800fb0c:	4639      	mov	r1, r7
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f000 fed3 	bl	80108ba <__any_on>
 800fb14:	4682      	mov	sl, r0
 800fb16:	b1a8      	cbz	r0, 800fb44 <__gethex+0x1f8>
 800fb18:	1e7b      	subs	r3, r7, #1
 800fb1a:	1159      	asrs	r1, r3, #5
 800fb1c:	f003 021f 	and.w	r2, r3, #31
 800fb20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fb24:	f04f 0a01 	mov.w	sl, #1
 800fb28:	fa0a f202 	lsl.w	r2, sl, r2
 800fb2c:	420a      	tst	r2, r1
 800fb2e:	d009      	beq.n	800fb44 <__gethex+0x1f8>
 800fb30:	4553      	cmp	r3, sl
 800fb32:	dd05      	ble.n	800fb40 <__gethex+0x1f4>
 800fb34:	1eb9      	subs	r1, r7, #2
 800fb36:	4620      	mov	r0, r4
 800fb38:	f000 febf 	bl	80108ba <__any_on>
 800fb3c:	2800      	cmp	r0, #0
 800fb3e:	d145      	bne.n	800fbcc <__gethex+0x280>
 800fb40:	f04f 0a02 	mov.w	sl, #2
 800fb44:	4639      	mov	r1, r7
 800fb46:	4620      	mov	r0, r4
 800fb48:	f7ff fe98 	bl	800f87c <rshift>
 800fb4c:	443d      	add	r5, r7
 800fb4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb52:	42ab      	cmp	r3, r5
 800fb54:	da4c      	bge.n	800fbf0 <__gethex+0x2a4>
 800fb56:	ee18 0a10 	vmov	r0, s16
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	f000 fa50 	bl	8010000 <_Bfree>
 800fb60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fb62:	2300      	movs	r3, #0
 800fb64:	6013      	str	r3, [r2, #0]
 800fb66:	27a3      	movs	r7, #163	; 0xa3
 800fb68:	e785      	b.n	800fa76 <__gethex+0x12a>
 800fb6a:	1e73      	subs	r3, r6, #1
 800fb6c:	9a05      	ldr	r2, [sp, #20]
 800fb6e:	9303      	str	r3, [sp, #12]
 800fb70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d019      	beq.n	800fbac <__gethex+0x260>
 800fb78:	f1bb 0f20 	cmp.w	fp, #32
 800fb7c:	d107      	bne.n	800fb8e <__gethex+0x242>
 800fb7e:	9b02      	ldr	r3, [sp, #8]
 800fb80:	9a00      	ldr	r2, [sp, #0]
 800fb82:	f843 2b04 	str.w	r2, [r3], #4
 800fb86:	9302      	str	r3, [sp, #8]
 800fb88:	2300      	movs	r3, #0
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	469b      	mov	fp, r3
 800fb8e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fb92:	f7ff fec5 	bl	800f920 <__hexdig_fun>
 800fb96:	9b00      	ldr	r3, [sp, #0]
 800fb98:	f000 000f 	and.w	r0, r0, #15
 800fb9c:	fa00 f00b 	lsl.w	r0, r0, fp
 800fba0:	4303      	orrs	r3, r0
 800fba2:	9300      	str	r3, [sp, #0]
 800fba4:	f10b 0b04 	add.w	fp, fp, #4
 800fba8:	9b03      	ldr	r3, [sp, #12]
 800fbaa:	e00d      	b.n	800fbc8 <__gethex+0x27c>
 800fbac:	9b03      	ldr	r3, [sp, #12]
 800fbae:	9a06      	ldr	r2, [sp, #24]
 800fbb0:	4413      	add	r3, r2
 800fbb2:	42bb      	cmp	r3, r7
 800fbb4:	d3e0      	bcc.n	800fb78 <__gethex+0x22c>
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	9901      	ldr	r1, [sp, #4]
 800fbba:	9307      	str	r3, [sp, #28]
 800fbbc:	4652      	mov	r2, sl
 800fbbe:	f000 ff5f 	bl	8010a80 <strncmp>
 800fbc2:	9b07      	ldr	r3, [sp, #28]
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d1d7      	bne.n	800fb78 <__gethex+0x22c>
 800fbc8:	461e      	mov	r6, r3
 800fbca:	e78b      	b.n	800fae4 <__gethex+0x198>
 800fbcc:	f04f 0a03 	mov.w	sl, #3
 800fbd0:	e7b8      	b.n	800fb44 <__gethex+0x1f8>
 800fbd2:	da0a      	bge.n	800fbea <__gethex+0x29e>
 800fbd4:	1a37      	subs	r7, r6, r0
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	ee18 0a10 	vmov	r0, s16
 800fbdc:	463a      	mov	r2, r7
 800fbde:	f000 fc2b 	bl	8010438 <__lshift>
 800fbe2:	1bed      	subs	r5, r5, r7
 800fbe4:	4604      	mov	r4, r0
 800fbe6:	f100 0914 	add.w	r9, r0, #20
 800fbea:	f04f 0a00 	mov.w	sl, #0
 800fbee:	e7ae      	b.n	800fb4e <__gethex+0x202>
 800fbf0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fbf4:	42a8      	cmp	r0, r5
 800fbf6:	dd72      	ble.n	800fcde <__gethex+0x392>
 800fbf8:	1b45      	subs	r5, r0, r5
 800fbfa:	42ae      	cmp	r6, r5
 800fbfc:	dc36      	bgt.n	800fc6c <__gethex+0x320>
 800fbfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc02:	2b02      	cmp	r3, #2
 800fc04:	d02a      	beq.n	800fc5c <__gethex+0x310>
 800fc06:	2b03      	cmp	r3, #3
 800fc08:	d02c      	beq.n	800fc64 <__gethex+0x318>
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d11c      	bne.n	800fc48 <__gethex+0x2fc>
 800fc0e:	42ae      	cmp	r6, r5
 800fc10:	d11a      	bne.n	800fc48 <__gethex+0x2fc>
 800fc12:	2e01      	cmp	r6, #1
 800fc14:	d112      	bne.n	800fc3c <__gethex+0x2f0>
 800fc16:	9a04      	ldr	r2, [sp, #16]
 800fc18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc1c:	6013      	str	r3, [r2, #0]
 800fc1e:	2301      	movs	r3, #1
 800fc20:	6123      	str	r3, [r4, #16]
 800fc22:	f8c9 3000 	str.w	r3, [r9]
 800fc26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc28:	2762      	movs	r7, #98	; 0x62
 800fc2a:	601c      	str	r4, [r3, #0]
 800fc2c:	e723      	b.n	800fa76 <__gethex+0x12a>
 800fc2e:	bf00      	nop
 800fc30:	08012460 	.word	0x08012460
 800fc34:	080123e8 	.word	0x080123e8
 800fc38:	080123f9 	.word	0x080123f9
 800fc3c:	1e71      	subs	r1, r6, #1
 800fc3e:	4620      	mov	r0, r4
 800fc40:	f000 fe3b 	bl	80108ba <__any_on>
 800fc44:	2800      	cmp	r0, #0
 800fc46:	d1e6      	bne.n	800fc16 <__gethex+0x2ca>
 800fc48:	ee18 0a10 	vmov	r0, s16
 800fc4c:	4621      	mov	r1, r4
 800fc4e:	f000 f9d7 	bl	8010000 <_Bfree>
 800fc52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fc54:	2300      	movs	r3, #0
 800fc56:	6013      	str	r3, [r2, #0]
 800fc58:	2750      	movs	r7, #80	; 0x50
 800fc5a:	e70c      	b.n	800fa76 <__gethex+0x12a>
 800fc5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d1f2      	bne.n	800fc48 <__gethex+0x2fc>
 800fc62:	e7d8      	b.n	800fc16 <__gethex+0x2ca>
 800fc64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d1d5      	bne.n	800fc16 <__gethex+0x2ca>
 800fc6a:	e7ed      	b.n	800fc48 <__gethex+0x2fc>
 800fc6c:	1e6f      	subs	r7, r5, #1
 800fc6e:	f1ba 0f00 	cmp.w	sl, #0
 800fc72:	d131      	bne.n	800fcd8 <__gethex+0x38c>
 800fc74:	b127      	cbz	r7, 800fc80 <__gethex+0x334>
 800fc76:	4639      	mov	r1, r7
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f000 fe1e 	bl	80108ba <__any_on>
 800fc7e:	4682      	mov	sl, r0
 800fc80:	117b      	asrs	r3, r7, #5
 800fc82:	2101      	movs	r1, #1
 800fc84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fc88:	f007 071f 	and.w	r7, r7, #31
 800fc8c:	fa01 f707 	lsl.w	r7, r1, r7
 800fc90:	421f      	tst	r7, r3
 800fc92:	4629      	mov	r1, r5
 800fc94:	4620      	mov	r0, r4
 800fc96:	bf18      	it	ne
 800fc98:	f04a 0a02 	orrne.w	sl, sl, #2
 800fc9c:	1b76      	subs	r6, r6, r5
 800fc9e:	f7ff fded 	bl	800f87c <rshift>
 800fca2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fca6:	2702      	movs	r7, #2
 800fca8:	f1ba 0f00 	cmp.w	sl, #0
 800fcac:	d048      	beq.n	800fd40 <__gethex+0x3f4>
 800fcae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fcb2:	2b02      	cmp	r3, #2
 800fcb4:	d015      	beq.n	800fce2 <__gethex+0x396>
 800fcb6:	2b03      	cmp	r3, #3
 800fcb8:	d017      	beq.n	800fcea <__gethex+0x39e>
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d109      	bne.n	800fcd2 <__gethex+0x386>
 800fcbe:	f01a 0f02 	tst.w	sl, #2
 800fcc2:	d006      	beq.n	800fcd2 <__gethex+0x386>
 800fcc4:	f8d9 0000 	ldr.w	r0, [r9]
 800fcc8:	ea4a 0a00 	orr.w	sl, sl, r0
 800fccc:	f01a 0f01 	tst.w	sl, #1
 800fcd0:	d10e      	bne.n	800fcf0 <__gethex+0x3a4>
 800fcd2:	f047 0710 	orr.w	r7, r7, #16
 800fcd6:	e033      	b.n	800fd40 <__gethex+0x3f4>
 800fcd8:	f04f 0a01 	mov.w	sl, #1
 800fcdc:	e7d0      	b.n	800fc80 <__gethex+0x334>
 800fcde:	2701      	movs	r7, #1
 800fce0:	e7e2      	b.n	800fca8 <__gethex+0x35c>
 800fce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fce4:	f1c3 0301 	rsb	r3, r3, #1
 800fce8:	9315      	str	r3, [sp, #84]	; 0x54
 800fcea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d0f0      	beq.n	800fcd2 <__gethex+0x386>
 800fcf0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fcf4:	f104 0314 	add.w	r3, r4, #20
 800fcf8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fcfc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd00:	f04f 0c00 	mov.w	ip, #0
 800fd04:	4618      	mov	r0, r3
 800fd06:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd0a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fd0e:	d01c      	beq.n	800fd4a <__gethex+0x3fe>
 800fd10:	3201      	adds	r2, #1
 800fd12:	6002      	str	r2, [r0, #0]
 800fd14:	2f02      	cmp	r7, #2
 800fd16:	f104 0314 	add.w	r3, r4, #20
 800fd1a:	d13f      	bne.n	800fd9c <__gethex+0x450>
 800fd1c:	f8d8 2000 	ldr.w	r2, [r8]
 800fd20:	3a01      	subs	r2, #1
 800fd22:	42b2      	cmp	r2, r6
 800fd24:	d10a      	bne.n	800fd3c <__gethex+0x3f0>
 800fd26:	1171      	asrs	r1, r6, #5
 800fd28:	2201      	movs	r2, #1
 800fd2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd2e:	f006 061f 	and.w	r6, r6, #31
 800fd32:	fa02 f606 	lsl.w	r6, r2, r6
 800fd36:	421e      	tst	r6, r3
 800fd38:	bf18      	it	ne
 800fd3a:	4617      	movne	r7, r2
 800fd3c:	f047 0720 	orr.w	r7, r7, #32
 800fd40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd42:	601c      	str	r4, [r3, #0]
 800fd44:	9b04      	ldr	r3, [sp, #16]
 800fd46:	601d      	str	r5, [r3, #0]
 800fd48:	e695      	b.n	800fa76 <__gethex+0x12a>
 800fd4a:	4299      	cmp	r1, r3
 800fd4c:	f843 cc04 	str.w	ip, [r3, #-4]
 800fd50:	d8d8      	bhi.n	800fd04 <__gethex+0x3b8>
 800fd52:	68a3      	ldr	r3, [r4, #8]
 800fd54:	459b      	cmp	fp, r3
 800fd56:	db19      	blt.n	800fd8c <__gethex+0x440>
 800fd58:	6861      	ldr	r1, [r4, #4]
 800fd5a:	ee18 0a10 	vmov	r0, s16
 800fd5e:	3101      	adds	r1, #1
 800fd60:	f000 f90e 	bl	800ff80 <_Balloc>
 800fd64:	4681      	mov	r9, r0
 800fd66:	b918      	cbnz	r0, 800fd70 <__gethex+0x424>
 800fd68:	4b1a      	ldr	r3, [pc, #104]	; (800fdd4 <__gethex+0x488>)
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	2184      	movs	r1, #132	; 0x84
 800fd6e:	e6a8      	b.n	800fac2 <__gethex+0x176>
 800fd70:	6922      	ldr	r2, [r4, #16]
 800fd72:	3202      	adds	r2, #2
 800fd74:	f104 010c 	add.w	r1, r4, #12
 800fd78:	0092      	lsls	r2, r2, #2
 800fd7a:	300c      	adds	r0, #12
 800fd7c:	f7fe ff8a 	bl	800ec94 <memcpy>
 800fd80:	4621      	mov	r1, r4
 800fd82:	ee18 0a10 	vmov	r0, s16
 800fd86:	f000 f93b 	bl	8010000 <_Bfree>
 800fd8a:	464c      	mov	r4, r9
 800fd8c:	6923      	ldr	r3, [r4, #16]
 800fd8e:	1c5a      	adds	r2, r3, #1
 800fd90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd94:	6122      	str	r2, [r4, #16]
 800fd96:	2201      	movs	r2, #1
 800fd98:	615a      	str	r2, [r3, #20]
 800fd9a:	e7bb      	b.n	800fd14 <__gethex+0x3c8>
 800fd9c:	6922      	ldr	r2, [r4, #16]
 800fd9e:	455a      	cmp	r2, fp
 800fda0:	dd0b      	ble.n	800fdba <__gethex+0x46e>
 800fda2:	2101      	movs	r1, #1
 800fda4:	4620      	mov	r0, r4
 800fda6:	f7ff fd69 	bl	800f87c <rshift>
 800fdaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdae:	3501      	adds	r5, #1
 800fdb0:	42ab      	cmp	r3, r5
 800fdb2:	f6ff aed0 	blt.w	800fb56 <__gethex+0x20a>
 800fdb6:	2701      	movs	r7, #1
 800fdb8:	e7c0      	b.n	800fd3c <__gethex+0x3f0>
 800fdba:	f016 061f 	ands.w	r6, r6, #31
 800fdbe:	d0fa      	beq.n	800fdb6 <__gethex+0x46a>
 800fdc0:	4453      	add	r3, sl
 800fdc2:	f1c6 0620 	rsb	r6, r6, #32
 800fdc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fdca:	f000 f9cb 	bl	8010164 <__hi0bits>
 800fdce:	42b0      	cmp	r0, r6
 800fdd0:	dbe7      	blt.n	800fda2 <__gethex+0x456>
 800fdd2:	e7f0      	b.n	800fdb6 <__gethex+0x46a>
 800fdd4:	080123e8 	.word	0x080123e8

0800fdd8 <L_shift>:
 800fdd8:	f1c2 0208 	rsb	r2, r2, #8
 800fddc:	0092      	lsls	r2, r2, #2
 800fdde:	b570      	push	{r4, r5, r6, lr}
 800fde0:	f1c2 0620 	rsb	r6, r2, #32
 800fde4:	6843      	ldr	r3, [r0, #4]
 800fde6:	6804      	ldr	r4, [r0, #0]
 800fde8:	fa03 f506 	lsl.w	r5, r3, r6
 800fdec:	432c      	orrs	r4, r5
 800fdee:	40d3      	lsrs	r3, r2
 800fdf0:	6004      	str	r4, [r0, #0]
 800fdf2:	f840 3f04 	str.w	r3, [r0, #4]!
 800fdf6:	4288      	cmp	r0, r1
 800fdf8:	d3f4      	bcc.n	800fde4 <L_shift+0xc>
 800fdfa:	bd70      	pop	{r4, r5, r6, pc}

0800fdfc <__match>:
 800fdfc:	b530      	push	{r4, r5, lr}
 800fdfe:	6803      	ldr	r3, [r0, #0]
 800fe00:	3301      	adds	r3, #1
 800fe02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe06:	b914      	cbnz	r4, 800fe0e <__match+0x12>
 800fe08:	6003      	str	r3, [r0, #0]
 800fe0a:	2001      	movs	r0, #1
 800fe0c:	bd30      	pop	{r4, r5, pc}
 800fe0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fe16:	2d19      	cmp	r5, #25
 800fe18:	bf98      	it	ls
 800fe1a:	3220      	addls	r2, #32
 800fe1c:	42a2      	cmp	r2, r4
 800fe1e:	d0f0      	beq.n	800fe02 <__match+0x6>
 800fe20:	2000      	movs	r0, #0
 800fe22:	e7f3      	b.n	800fe0c <__match+0x10>

0800fe24 <__hexnan>:
 800fe24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe28:	680b      	ldr	r3, [r1, #0]
 800fe2a:	115e      	asrs	r6, r3, #5
 800fe2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fe30:	f013 031f 	ands.w	r3, r3, #31
 800fe34:	b087      	sub	sp, #28
 800fe36:	bf18      	it	ne
 800fe38:	3604      	addne	r6, #4
 800fe3a:	2500      	movs	r5, #0
 800fe3c:	1f37      	subs	r7, r6, #4
 800fe3e:	4690      	mov	r8, r2
 800fe40:	6802      	ldr	r2, [r0, #0]
 800fe42:	9301      	str	r3, [sp, #4]
 800fe44:	4682      	mov	sl, r0
 800fe46:	f846 5c04 	str.w	r5, [r6, #-4]
 800fe4a:	46b9      	mov	r9, r7
 800fe4c:	463c      	mov	r4, r7
 800fe4e:	9502      	str	r5, [sp, #8]
 800fe50:	46ab      	mov	fp, r5
 800fe52:	7851      	ldrb	r1, [r2, #1]
 800fe54:	1c53      	adds	r3, r2, #1
 800fe56:	9303      	str	r3, [sp, #12]
 800fe58:	b341      	cbz	r1, 800feac <__hexnan+0x88>
 800fe5a:	4608      	mov	r0, r1
 800fe5c:	9205      	str	r2, [sp, #20]
 800fe5e:	9104      	str	r1, [sp, #16]
 800fe60:	f7ff fd5e 	bl	800f920 <__hexdig_fun>
 800fe64:	2800      	cmp	r0, #0
 800fe66:	d14f      	bne.n	800ff08 <__hexnan+0xe4>
 800fe68:	9904      	ldr	r1, [sp, #16]
 800fe6a:	9a05      	ldr	r2, [sp, #20]
 800fe6c:	2920      	cmp	r1, #32
 800fe6e:	d818      	bhi.n	800fea2 <__hexnan+0x7e>
 800fe70:	9b02      	ldr	r3, [sp, #8]
 800fe72:	459b      	cmp	fp, r3
 800fe74:	dd13      	ble.n	800fe9e <__hexnan+0x7a>
 800fe76:	454c      	cmp	r4, r9
 800fe78:	d206      	bcs.n	800fe88 <__hexnan+0x64>
 800fe7a:	2d07      	cmp	r5, #7
 800fe7c:	dc04      	bgt.n	800fe88 <__hexnan+0x64>
 800fe7e:	462a      	mov	r2, r5
 800fe80:	4649      	mov	r1, r9
 800fe82:	4620      	mov	r0, r4
 800fe84:	f7ff ffa8 	bl	800fdd8 <L_shift>
 800fe88:	4544      	cmp	r4, r8
 800fe8a:	d950      	bls.n	800ff2e <__hexnan+0x10a>
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	f1a4 0904 	sub.w	r9, r4, #4
 800fe92:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe96:	f8cd b008 	str.w	fp, [sp, #8]
 800fe9a:	464c      	mov	r4, r9
 800fe9c:	461d      	mov	r5, r3
 800fe9e:	9a03      	ldr	r2, [sp, #12]
 800fea0:	e7d7      	b.n	800fe52 <__hexnan+0x2e>
 800fea2:	2929      	cmp	r1, #41	; 0x29
 800fea4:	d156      	bne.n	800ff54 <__hexnan+0x130>
 800fea6:	3202      	adds	r2, #2
 800fea8:	f8ca 2000 	str.w	r2, [sl]
 800feac:	f1bb 0f00 	cmp.w	fp, #0
 800feb0:	d050      	beq.n	800ff54 <__hexnan+0x130>
 800feb2:	454c      	cmp	r4, r9
 800feb4:	d206      	bcs.n	800fec4 <__hexnan+0xa0>
 800feb6:	2d07      	cmp	r5, #7
 800feb8:	dc04      	bgt.n	800fec4 <__hexnan+0xa0>
 800feba:	462a      	mov	r2, r5
 800febc:	4649      	mov	r1, r9
 800febe:	4620      	mov	r0, r4
 800fec0:	f7ff ff8a 	bl	800fdd8 <L_shift>
 800fec4:	4544      	cmp	r4, r8
 800fec6:	d934      	bls.n	800ff32 <__hexnan+0x10e>
 800fec8:	f1a8 0204 	sub.w	r2, r8, #4
 800fecc:	4623      	mov	r3, r4
 800fece:	f853 1b04 	ldr.w	r1, [r3], #4
 800fed2:	f842 1f04 	str.w	r1, [r2, #4]!
 800fed6:	429f      	cmp	r7, r3
 800fed8:	d2f9      	bcs.n	800fece <__hexnan+0xaa>
 800feda:	1b3b      	subs	r3, r7, r4
 800fedc:	f023 0303 	bic.w	r3, r3, #3
 800fee0:	3304      	adds	r3, #4
 800fee2:	3401      	adds	r4, #1
 800fee4:	3e03      	subs	r6, #3
 800fee6:	42b4      	cmp	r4, r6
 800fee8:	bf88      	it	hi
 800feea:	2304      	movhi	r3, #4
 800feec:	4443      	add	r3, r8
 800feee:	2200      	movs	r2, #0
 800fef0:	f843 2b04 	str.w	r2, [r3], #4
 800fef4:	429f      	cmp	r7, r3
 800fef6:	d2fb      	bcs.n	800fef0 <__hexnan+0xcc>
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	b91b      	cbnz	r3, 800ff04 <__hexnan+0xe0>
 800fefc:	4547      	cmp	r7, r8
 800fefe:	d127      	bne.n	800ff50 <__hexnan+0x12c>
 800ff00:	2301      	movs	r3, #1
 800ff02:	603b      	str	r3, [r7, #0]
 800ff04:	2005      	movs	r0, #5
 800ff06:	e026      	b.n	800ff56 <__hexnan+0x132>
 800ff08:	3501      	adds	r5, #1
 800ff0a:	2d08      	cmp	r5, #8
 800ff0c:	f10b 0b01 	add.w	fp, fp, #1
 800ff10:	dd06      	ble.n	800ff20 <__hexnan+0xfc>
 800ff12:	4544      	cmp	r4, r8
 800ff14:	d9c3      	bls.n	800fe9e <__hexnan+0x7a>
 800ff16:	2300      	movs	r3, #0
 800ff18:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff1c:	2501      	movs	r5, #1
 800ff1e:	3c04      	subs	r4, #4
 800ff20:	6822      	ldr	r2, [r4, #0]
 800ff22:	f000 000f 	and.w	r0, r0, #15
 800ff26:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ff2a:	6022      	str	r2, [r4, #0]
 800ff2c:	e7b7      	b.n	800fe9e <__hexnan+0x7a>
 800ff2e:	2508      	movs	r5, #8
 800ff30:	e7b5      	b.n	800fe9e <__hexnan+0x7a>
 800ff32:	9b01      	ldr	r3, [sp, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d0df      	beq.n	800fef8 <__hexnan+0xd4>
 800ff38:	f04f 32ff 	mov.w	r2, #4294967295
 800ff3c:	f1c3 0320 	rsb	r3, r3, #32
 800ff40:	fa22 f303 	lsr.w	r3, r2, r3
 800ff44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ff48:	401a      	ands	r2, r3
 800ff4a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ff4e:	e7d3      	b.n	800fef8 <__hexnan+0xd4>
 800ff50:	3f04      	subs	r7, #4
 800ff52:	e7d1      	b.n	800fef8 <__hexnan+0xd4>
 800ff54:	2004      	movs	r0, #4
 800ff56:	b007      	add	sp, #28
 800ff58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff5c <__ascii_mbtowc>:
 800ff5c:	b082      	sub	sp, #8
 800ff5e:	b901      	cbnz	r1, 800ff62 <__ascii_mbtowc+0x6>
 800ff60:	a901      	add	r1, sp, #4
 800ff62:	b142      	cbz	r2, 800ff76 <__ascii_mbtowc+0x1a>
 800ff64:	b14b      	cbz	r3, 800ff7a <__ascii_mbtowc+0x1e>
 800ff66:	7813      	ldrb	r3, [r2, #0]
 800ff68:	600b      	str	r3, [r1, #0]
 800ff6a:	7812      	ldrb	r2, [r2, #0]
 800ff6c:	1e10      	subs	r0, r2, #0
 800ff6e:	bf18      	it	ne
 800ff70:	2001      	movne	r0, #1
 800ff72:	b002      	add	sp, #8
 800ff74:	4770      	bx	lr
 800ff76:	4610      	mov	r0, r2
 800ff78:	e7fb      	b.n	800ff72 <__ascii_mbtowc+0x16>
 800ff7a:	f06f 0001 	mvn.w	r0, #1
 800ff7e:	e7f8      	b.n	800ff72 <__ascii_mbtowc+0x16>

0800ff80 <_Balloc>:
 800ff80:	b570      	push	{r4, r5, r6, lr}
 800ff82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ff84:	4604      	mov	r4, r0
 800ff86:	460d      	mov	r5, r1
 800ff88:	b976      	cbnz	r6, 800ffa8 <_Balloc+0x28>
 800ff8a:	2010      	movs	r0, #16
 800ff8c:	f000 fdca 	bl	8010b24 <malloc>
 800ff90:	4602      	mov	r2, r0
 800ff92:	6260      	str	r0, [r4, #36]	; 0x24
 800ff94:	b920      	cbnz	r0, 800ffa0 <_Balloc+0x20>
 800ff96:	4b18      	ldr	r3, [pc, #96]	; (800fff8 <_Balloc+0x78>)
 800ff98:	4818      	ldr	r0, [pc, #96]	; (800fffc <_Balloc+0x7c>)
 800ff9a:	2166      	movs	r1, #102	; 0x66
 800ff9c:	f000 fd92 	bl	8010ac4 <__assert_func>
 800ffa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffa4:	6006      	str	r6, [r0, #0]
 800ffa6:	60c6      	str	r6, [r0, #12]
 800ffa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ffaa:	68f3      	ldr	r3, [r6, #12]
 800ffac:	b183      	cbz	r3, 800ffd0 <_Balloc+0x50>
 800ffae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ffb6:	b9b8      	cbnz	r0, 800ffe8 <_Balloc+0x68>
 800ffb8:	2101      	movs	r1, #1
 800ffba:	fa01 f605 	lsl.w	r6, r1, r5
 800ffbe:	1d72      	adds	r2, r6, #5
 800ffc0:	0092      	lsls	r2, r2, #2
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	f000 fc9a 	bl	80108fc <_calloc_r>
 800ffc8:	b160      	cbz	r0, 800ffe4 <_Balloc+0x64>
 800ffca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ffce:	e00e      	b.n	800ffee <_Balloc+0x6e>
 800ffd0:	2221      	movs	r2, #33	; 0x21
 800ffd2:	2104      	movs	r1, #4
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	f000 fc91 	bl	80108fc <_calloc_r>
 800ffda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffdc:	60f0      	str	r0, [r6, #12]
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d1e4      	bne.n	800ffae <_Balloc+0x2e>
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	bd70      	pop	{r4, r5, r6, pc}
 800ffe8:	6802      	ldr	r2, [r0, #0]
 800ffea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ffee:	2300      	movs	r3, #0
 800fff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fff4:	e7f7      	b.n	800ffe6 <_Balloc+0x66>
 800fff6:	bf00      	nop
 800fff8:	08012474 	.word	0x08012474
 800fffc:	0801248b 	.word	0x0801248b

08010000 <_Bfree>:
 8010000:	b570      	push	{r4, r5, r6, lr}
 8010002:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010004:	4605      	mov	r5, r0
 8010006:	460c      	mov	r4, r1
 8010008:	b976      	cbnz	r6, 8010028 <_Bfree+0x28>
 801000a:	2010      	movs	r0, #16
 801000c:	f000 fd8a 	bl	8010b24 <malloc>
 8010010:	4602      	mov	r2, r0
 8010012:	6268      	str	r0, [r5, #36]	; 0x24
 8010014:	b920      	cbnz	r0, 8010020 <_Bfree+0x20>
 8010016:	4b09      	ldr	r3, [pc, #36]	; (801003c <_Bfree+0x3c>)
 8010018:	4809      	ldr	r0, [pc, #36]	; (8010040 <_Bfree+0x40>)
 801001a:	218a      	movs	r1, #138	; 0x8a
 801001c:	f000 fd52 	bl	8010ac4 <__assert_func>
 8010020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010024:	6006      	str	r6, [r0, #0]
 8010026:	60c6      	str	r6, [r0, #12]
 8010028:	b13c      	cbz	r4, 801003a <_Bfree+0x3a>
 801002a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801002c:	6862      	ldr	r2, [r4, #4]
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010034:	6021      	str	r1, [r4, #0]
 8010036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801003a:	bd70      	pop	{r4, r5, r6, pc}
 801003c:	08012474 	.word	0x08012474
 8010040:	0801248b 	.word	0x0801248b

08010044 <__multadd>:
 8010044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010048:	690d      	ldr	r5, [r1, #16]
 801004a:	4607      	mov	r7, r0
 801004c:	460c      	mov	r4, r1
 801004e:	461e      	mov	r6, r3
 8010050:	f101 0c14 	add.w	ip, r1, #20
 8010054:	2000      	movs	r0, #0
 8010056:	f8dc 3000 	ldr.w	r3, [ip]
 801005a:	b299      	uxth	r1, r3
 801005c:	fb02 6101 	mla	r1, r2, r1, r6
 8010060:	0c1e      	lsrs	r6, r3, #16
 8010062:	0c0b      	lsrs	r3, r1, #16
 8010064:	fb02 3306 	mla	r3, r2, r6, r3
 8010068:	b289      	uxth	r1, r1
 801006a:	3001      	adds	r0, #1
 801006c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010070:	4285      	cmp	r5, r0
 8010072:	f84c 1b04 	str.w	r1, [ip], #4
 8010076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801007a:	dcec      	bgt.n	8010056 <__multadd+0x12>
 801007c:	b30e      	cbz	r6, 80100c2 <__multadd+0x7e>
 801007e:	68a3      	ldr	r3, [r4, #8]
 8010080:	42ab      	cmp	r3, r5
 8010082:	dc19      	bgt.n	80100b8 <__multadd+0x74>
 8010084:	6861      	ldr	r1, [r4, #4]
 8010086:	4638      	mov	r0, r7
 8010088:	3101      	adds	r1, #1
 801008a:	f7ff ff79 	bl	800ff80 <_Balloc>
 801008e:	4680      	mov	r8, r0
 8010090:	b928      	cbnz	r0, 801009e <__multadd+0x5a>
 8010092:	4602      	mov	r2, r0
 8010094:	4b0c      	ldr	r3, [pc, #48]	; (80100c8 <__multadd+0x84>)
 8010096:	480d      	ldr	r0, [pc, #52]	; (80100cc <__multadd+0x88>)
 8010098:	21b5      	movs	r1, #181	; 0xb5
 801009a:	f000 fd13 	bl	8010ac4 <__assert_func>
 801009e:	6922      	ldr	r2, [r4, #16]
 80100a0:	3202      	adds	r2, #2
 80100a2:	f104 010c 	add.w	r1, r4, #12
 80100a6:	0092      	lsls	r2, r2, #2
 80100a8:	300c      	adds	r0, #12
 80100aa:	f7fe fdf3 	bl	800ec94 <memcpy>
 80100ae:	4621      	mov	r1, r4
 80100b0:	4638      	mov	r0, r7
 80100b2:	f7ff ffa5 	bl	8010000 <_Bfree>
 80100b6:	4644      	mov	r4, r8
 80100b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80100bc:	3501      	adds	r5, #1
 80100be:	615e      	str	r6, [r3, #20]
 80100c0:	6125      	str	r5, [r4, #16]
 80100c2:	4620      	mov	r0, r4
 80100c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100c8:	080123e8 	.word	0x080123e8
 80100cc:	0801248b 	.word	0x0801248b

080100d0 <__s2b>:
 80100d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100d4:	460c      	mov	r4, r1
 80100d6:	4615      	mov	r5, r2
 80100d8:	461f      	mov	r7, r3
 80100da:	2209      	movs	r2, #9
 80100dc:	3308      	adds	r3, #8
 80100de:	4606      	mov	r6, r0
 80100e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80100e4:	2100      	movs	r1, #0
 80100e6:	2201      	movs	r2, #1
 80100e8:	429a      	cmp	r2, r3
 80100ea:	db09      	blt.n	8010100 <__s2b+0x30>
 80100ec:	4630      	mov	r0, r6
 80100ee:	f7ff ff47 	bl	800ff80 <_Balloc>
 80100f2:	b940      	cbnz	r0, 8010106 <__s2b+0x36>
 80100f4:	4602      	mov	r2, r0
 80100f6:	4b19      	ldr	r3, [pc, #100]	; (801015c <__s2b+0x8c>)
 80100f8:	4819      	ldr	r0, [pc, #100]	; (8010160 <__s2b+0x90>)
 80100fa:	21ce      	movs	r1, #206	; 0xce
 80100fc:	f000 fce2 	bl	8010ac4 <__assert_func>
 8010100:	0052      	lsls	r2, r2, #1
 8010102:	3101      	adds	r1, #1
 8010104:	e7f0      	b.n	80100e8 <__s2b+0x18>
 8010106:	9b08      	ldr	r3, [sp, #32]
 8010108:	6143      	str	r3, [r0, #20]
 801010a:	2d09      	cmp	r5, #9
 801010c:	f04f 0301 	mov.w	r3, #1
 8010110:	6103      	str	r3, [r0, #16]
 8010112:	dd16      	ble.n	8010142 <__s2b+0x72>
 8010114:	f104 0909 	add.w	r9, r4, #9
 8010118:	46c8      	mov	r8, r9
 801011a:	442c      	add	r4, r5
 801011c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010120:	4601      	mov	r1, r0
 8010122:	3b30      	subs	r3, #48	; 0x30
 8010124:	220a      	movs	r2, #10
 8010126:	4630      	mov	r0, r6
 8010128:	f7ff ff8c 	bl	8010044 <__multadd>
 801012c:	45a0      	cmp	r8, r4
 801012e:	d1f5      	bne.n	801011c <__s2b+0x4c>
 8010130:	f1a5 0408 	sub.w	r4, r5, #8
 8010134:	444c      	add	r4, r9
 8010136:	1b2d      	subs	r5, r5, r4
 8010138:	1963      	adds	r3, r4, r5
 801013a:	42bb      	cmp	r3, r7
 801013c:	db04      	blt.n	8010148 <__s2b+0x78>
 801013e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010142:	340a      	adds	r4, #10
 8010144:	2509      	movs	r5, #9
 8010146:	e7f6      	b.n	8010136 <__s2b+0x66>
 8010148:	f814 3b01 	ldrb.w	r3, [r4], #1
 801014c:	4601      	mov	r1, r0
 801014e:	3b30      	subs	r3, #48	; 0x30
 8010150:	220a      	movs	r2, #10
 8010152:	4630      	mov	r0, r6
 8010154:	f7ff ff76 	bl	8010044 <__multadd>
 8010158:	e7ee      	b.n	8010138 <__s2b+0x68>
 801015a:	bf00      	nop
 801015c:	080123e8 	.word	0x080123e8
 8010160:	0801248b 	.word	0x0801248b

08010164 <__hi0bits>:
 8010164:	0c03      	lsrs	r3, r0, #16
 8010166:	041b      	lsls	r3, r3, #16
 8010168:	b9d3      	cbnz	r3, 80101a0 <__hi0bits+0x3c>
 801016a:	0400      	lsls	r0, r0, #16
 801016c:	2310      	movs	r3, #16
 801016e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010172:	bf04      	itt	eq
 8010174:	0200      	lsleq	r0, r0, #8
 8010176:	3308      	addeq	r3, #8
 8010178:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801017c:	bf04      	itt	eq
 801017e:	0100      	lsleq	r0, r0, #4
 8010180:	3304      	addeq	r3, #4
 8010182:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010186:	bf04      	itt	eq
 8010188:	0080      	lsleq	r0, r0, #2
 801018a:	3302      	addeq	r3, #2
 801018c:	2800      	cmp	r0, #0
 801018e:	db05      	blt.n	801019c <__hi0bits+0x38>
 8010190:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010194:	f103 0301 	add.w	r3, r3, #1
 8010198:	bf08      	it	eq
 801019a:	2320      	moveq	r3, #32
 801019c:	4618      	mov	r0, r3
 801019e:	4770      	bx	lr
 80101a0:	2300      	movs	r3, #0
 80101a2:	e7e4      	b.n	801016e <__hi0bits+0xa>

080101a4 <__lo0bits>:
 80101a4:	6803      	ldr	r3, [r0, #0]
 80101a6:	f013 0207 	ands.w	r2, r3, #7
 80101aa:	4601      	mov	r1, r0
 80101ac:	d00b      	beq.n	80101c6 <__lo0bits+0x22>
 80101ae:	07da      	lsls	r2, r3, #31
 80101b0:	d423      	bmi.n	80101fa <__lo0bits+0x56>
 80101b2:	0798      	lsls	r0, r3, #30
 80101b4:	bf49      	itett	mi
 80101b6:	085b      	lsrmi	r3, r3, #1
 80101b8:	089b      	lsrpl	r3, r3, #2
 80101ba:	2001      	movmi	r0, #1
 80101bc:	600b      	strmi	r3, [r1, #0]
 80101be:	bf5c      	itt	pl
 80101c0:	600b      	strpl	r3, [r1, #0]
 80101c2:	2002      	movpl	r0, #2
 80101c4:	4770      	bx	lr
 80101c6:	b298      	uxth	r0, r3
 80101c8:	b9a8      	cbnz	r0, 80101f6 <__lo0bits+0x52>
 80101ca:	0c1b      	lsrs	r3, r3, #16
 80101cc:	2010      	movs	r0, #16
 80101ce:	b2da      	uxtb	r2, r3
 80101d0:	b90a      	cbnz	r2, 80101d6 <__lo0bits+0x32>
 80101d2:	3008      	adds	r0, #8
 80101d4:	0a1b      	lsrs	r3, r3, #8
 80101d6:	071a      	lsls	r2, r3, #28
 80101d8:	bf04      	itt	eq
 80101da:	091b      	lsreq	r3, r3, #4
 80101dc:	3004      	addeq	r0, #4
 80101de:	079a      	lsls	r2, r3, #30
 80101e0:	bf04      	itt	eq
 80101e2:	089b      	lsreq	r3, r3, #2
 80101e4:	3002      	addeq	r0, #2
 80101e6:	07da      	lsls	r2, r3, #31
 80101e8:	d403      	bmi.n	80101f2 <__lo0bits+0x4e>
 80101ea:	085b      	lsrs	r3, r3, #1
 80101ec:	f100 0001 	add.w	r0, r0, #1
 80101f0:	d005      	beq.n	80101fe <__lo0bits+0x5a>
 80101f2:	600b      	str	r3, [r1, #0]
 80101f4:	4770      	bx	lr
 80101f6:	4610      	mov	r0, r2
 80101f8:	e7e9      	b.n	80101ce <__lo0bits+0x2a>
 80101fa:	2000      	movs	r0, #0
 80101fc:	4770      	bx	lr
 80101fe:	2020      	movs	r0, #32
 8010200:	4770      	bx	lr
	...

08010204 <__i2b>:
 8010204:	b510      	push	{r4, lr}
 8010206:	460c      	mov	r4, r1
 8010208:	2101      	movs	r1, #1
 801020a:	f7ff feb9 	bl	800ff80 <_Balloc>
 801020e:	4602      	mov	r2, r0
 8010210:	b928      	cbnz	r0, 801021e <__i2b+0x1a>
 8010212:	4b05      	ldr	r3, [pc, #20]	; (8010228 <__i2b+0x24>)
 8010214:	4805      	ldr	r0, [pc, #20]	; (801022c <__i2b+0x28>)
 8010216:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801021a:	f000 fc53 	bl	8010ac4 <__assert_func>
 801021e:	2301      	movs	r3, #1
 8010220:	6144      	str	r4, [r0, #20]
 8010222:	6103      	str	r3, [r0, #16]
 8010224:	bd10      	pop	{r4, pc}
 8010226:	bf00      	nop
 8010228:	080123e8 	.word	0x080123e8
 801022c:	0801248b 	.word	0x0801248b

08010230 <__multiply>:
 8010230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010234:	4691      	mov	r9, r2
 8010236:	690a      	ldr	r2, [r1, #16]
 8010238:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801023c:	429a      	cmp	r2, r3
 801023e:	bfb8      	it	lt
 8010240:	460b      	movlt	r3, r1
 8010242:	460c      	mov	r4, r1
 8010244:	bfbc      	itt	lt
 8010246:	464c      	movlt	r4, r9
 8010248:	4699      	movlt	r9, r3
 801024a:	6927      	ldr	r7, [r4, #16]
 801024c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010250:	68a3      	ldr	r3, [r4, #8]
 8010252:	6861      	ldr	r1, [r4, #4]
 8010254:	eb07 060a 	add.w	r6, r7, sl
 8010258:	42b3      	cmp	r3, r6
 801025a:	b085      	sub	sp, #20
 801025c:	bfb8      	it	lt
 801025e:	3101      	addlt	r1, #1
 8010260:	f7ff fe8e 	bl	800ff80 <_Balloc>
 8010264:	b930      	cbnz	r0, 8010274 <__multiply+0x44>
 8010266:	4602      	mov	r2, r0
 8010268:	4b44      	ldr	r3, [pc, #272]	; (801037c <__multiply+0x14c>)
 801026a:	4845      	ldr	r0, [pc, #276]	; (8010380 <__multiply+0x150>)
 801026c:	f240 115d 	movw	r1, #349	; 0x15d
 8010270:	f000 fc28 	bl	8010ac4 <__assert_func>
 8010274:	f100 0514 	add.w	r5, r0, #20
 8010278:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801027c:	462b      	mov	r3, r5
 801027e:	2200      	movs	r2, #0
 8010280:	4543      	cmp	r3, r8
 8010282:	d321      	bcc.n	80102c8 <__multiply+0x98>
 8010284:	f104 0314 	add.w	r3, r4, #20
 8010288:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801028c:	f109 0314 	add.w	r3, r9, #20
 8010290:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010294:	9202      	str	r2, [sp, #8]
 8010296:	1b3a      	subs	r2, r7, r4
 8010298:	3a15      	subs	r2, #21
 801029a:	f022 0203 	bic.w	r2, r2, #3
 801029e:	3204      	adds	r2, #4
 80102a0:	f104 0115 	add.w	r1, r4, #21
 80102a4:	428f      	cmp	r7, r1
 80102a6:	bf38      	it	cc
 80102a8:	2204      	movcc	r2, #4
 80102aa:	9201      	str	r2, [sp, #4]
 80102ac:	9a02      	ldr	r2, [sp, #8]
 80102ae:	9303      	str	r3, [sp, #12]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d80c      	bhi.n	80102ce <__multiply+0x9e>
 80102b4:	2e00      	cmp	r6, #0
 80102b6:	dd03      	ble.n	80102c0 <__multiply+0x90>
 80102b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d05a      	beq.n	8010376 <__multiply+0x146>
 80102c0:	6106      	str	r6, [r0, #16]
 80102c2:	b005      	add	sp, #20
 80102c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c8:	f843 2b04 	str.w	r2, [r3], #4
 80102cc:	e7d8      	b.n	8010280 <__multiply+0x50>
 80102ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80102d2:	f1ba 0f00 	cmp.w	sl, #0
 80102d6:	d024      	beq.n	8010322 <__multiply+0xf2>
 80102d8:	f104 0e14 	add.w	lr, r4, #20
 80102dc:	46a9      	mov	r9, r5
 80102de:	f04f 0c00 	mov.w	ip, #0
 80102e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80102e6:	f8d9 1000 	ldr.w	r1, [r9]
 80102ea:	fa1f fb82 	uxth.w	fp, r2
 80102ee:	b289      	uxth	r1, r1
 80102f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80102f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80102f8:	f8d9 2000 	ldr.w	r2, [r9]
 80102fc:	4461      	add	r1, ip
 80102fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010302:	fb0a c20b 	mla	r2, sl, fp, ip
 8010306:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801030a:	b289      	uxth	r1, r1
 801030c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010310:	4577      	cmp	r7, lr
 8010312:	f849 1b04 	str.w	r1, [r9], #4
 8010316:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801031a:	d8e2      	bhi.n	80102e2 <__multiply+0xb2>
 801031c:	9a01      	ldr	r2, [sp, #4]
 801031e:	f845 c002 	str.w	ip, [r5, r2]
 8010322:	9a03      	ldr	r2, [sp, #12]
 8010324:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010328:	3304      	adds	r3, #4
 801032a:	f1b9 0f00 	cmp.w	r9, #0
 801032e:	d020      	beq.n	8010372 <__multiply+0x142>
 8010330:	6829      	ldr	r1, [r5, #0]
 8010332:	f104 0c14 	add.w	ip, r4, #20
 8010336:	46ae      	mov	lr, r5
 8010338:	f04f 0a00 	mov.w	sl, #0
 801033c:	f8bc b000 	ldrh.w	fp, [ip]
 8010340:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010344:	fb09 220b 	mla	r2, r9, fp, r2
 8010348:	4492      	add	sl, r2
 801034a:	b289      	uxth	r1, r1
 801034c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010350:	f84e 1b04 	str.w	r1, [lr], #4
 8010354:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010358:	f8be 1000 	ldrh.w	r1, [lr]
 801035c:	0c12      	lsrs	r2, r2, #16
 801035e:	fb09 1102 	mla	r1, r9, r2, r1
 8010362:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010366:	4567      	cmp	r7, ip
 8010368:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801036c:	d8e6      	bhi.n	801033c <__multiply+0x10c>
 801036e:	9a01      	ldr	r2, [sp, #4]
 8010370:	50a9      	str	r1, [r5, r2]
 8010372:	3504      	adds	r5, #4
 8010374:	e79a      	b.n	80102ac <__multiply+0x7c>
 8010376:	3e01      	subs	r6, #1
 8010378:	e79c      	b.n	80102b4 <__multiply+0x84>
 801037a:	bf00      	nop
 801037c:	080123e8 	.word	0x080123e8
 8010380:	0801248b 	.word	0x0801248b

08010384 <__pow5mult>:
 8010384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010388:	4615      	mov	r5, r2
 801038a:	f012 0203 	ands.w	r2, r2, #3
 801038e:	4606      	mov	r6, r0
 8010390:	460f      	mov	r7, r1
 8010392:	d007      	beq.n	80103a4 <__pow5mult+0x20>
 8010394:	4c25      	ldr	r4, [pc, #148]	; (801042c <__pow5mult+0xa8>)
 8010396:	3a01      	subs	r2, #1
 8010398:	2300      	movs	r3, #0
 801039a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801039e:	f7ff fe51 	bl	8010044 <__multadd>
 80103a2:	4607      	mov	r7, r0
 80103a4:	10ad      	asrs	r5, r5, #2
 80103a6:	d03d      	beq.n	8010424 <__pow5mult+0xa0>
 80103a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80103aa:	b97c      	cbnz	r4, 80103cc <__pow5mult+0x48>
 80103ac:	2010      	movs	r0, #16
 80103ae:	f000 fbb9 	bl	8010b24 <malloc>
 80103b2:	4602      	mov	r2, r0
 80103b4:	6270      	str	r0, [r6, #36]	; 0x24
 80103b6:	b928      	cbnz	r0, 80103c4 <__pow5mult+0x40>
 80103b8:	4b1d      	ldr	r3, [pc, #116]	; (8010430 <__pow5mult+0xac>)
 80103ba:	481e      	ldr	r0, [pc, #120]	; (8010434 <__pow5mult+0xb0>)
 80103bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80103c0:	f000 fb80 	bl	8010ac4 <__assert_func>
 80103c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80103c8:	6004      	str	r4, [r0, #0]
 80103ca:	60c4      	str	r4, [r0, #12]
 80103cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80103d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80103d4:	b94c      	cbnz	r4, 80103ea <__pow5mult+0x66>
 80103d6:	f240 2171 	movw	r1, #625	; 0x271
 80103da:	4630      	mov	r0, r6
 80103dc:	f7ff ff12 	bl	8010204 <__i2b>
 80103e0:	2300      	movs	r3, #0
 80103e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80103e6:	4604      	mov	r4, r0
 80103e8:	6003      	str	r3, [r0, #0]
 80103ea:	f04f 0900 	mov.w	r9, #0
 80103ee:	07eb      	lsls	r3, r5, #31
 80103f0:	d50a      	bpl.n	8010408 <__pow5mult+0x84>
 80103f2:	4639      	mov	r1, r7
 80103f4:	4622      	mov	r2, r4
 80103f6:	4630      	mov	r0, r6
 80103f8:	f7ff ff1a 	bl	8010230 <__multiply>
 80103fc:	4639      	mov	r1, r7
 80103fe:	4680      	mov	r8, r0
 8010400:	4630      	mov	r0, r6
 8010402:	f7ff fdfd 	bl	8010000 <_Bfree>
 8010406:	4647      	mov	r7, r8
 8010408:	106d      	asrs	r5, r5, #1
 801040a:	d00b      	beq.n	8010424 <__pow5mult+0xa0>
 801040c:	6820      	ldr	r0, [r4, #0]
 801040e:	b938      	cbnz	r0, 8010420 <__pow5mult+0x9c>
 8010410:	4622      	mov	r2, r4
 8010412:	4621      	mov	r1, r4
 8010414:	4630      	mov	r0, r6
 8010416:	f7ff ff0b 	bl	8010230 <__multiply>
 801041a:	6020      	str	r0, [r4, #0]
 801041c:	f8c0 9000 	str.w	r9, [r0]
 8010420:	4604      	mov	r4, r0
 8010422:	e7e4      	b.n	80103ee <__pow5mult+0x6a>
 8010424:	4638      	mov	r0, r7
 8010426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801042a:	bf00      	nop
 801042c:	080125d8 	.word	0x080125d8
 8010430:	08012474 	.word	0x08012474
 8010434:	0801248b 	.word	0x0801248b

08010438 <__lshift>:
 8010438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801043c:	460c      	mov	r4, r1
 801043e:	6849      	ldr	r1, [r1, #4]
 8010440:	6923      	ldr	r3, [r4, #16]
 8010442:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010446:	68a3      	ldr	r3, [r4, #8]
 8010448:	4607      	mov	r7, r0
 801044a:	4691      	mov	r9, r2
 801044c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010450:	f108 0601 	add.w	r6, r8, #1
 8010454:	42b3      	cmp	r3, r6
 8010456:	db0b      	blt.n	8010470 <__lshift+0x38>
 8010458:	4638      	mov	r0, r7
 801045a:	f7ff fd91 	bl	800ff80 <_Balloc>
 801045e:	4605      	mov	r5, r0
 8010460:	b948      	cbnz	r0, 8010476 <__lshift+0x3e>
 8010462:	4602      	mov	r2, r0
 8010464:	4b2a      	ldr	r3, [pc, #168]	; (8010510 <__lshift+0xd8>)
 8010466:	482b      	ldr	r0, [pc, #172]	; (8010514 <__lshift+0xdc>)
 8010468:	f240 11d9 	movw	r1, #473	; 0x1d9
 801046c:	f000 fb2a 	bl	8010ac4 <__assert_func>
 8010470:	3101      	adds	r1, #1
 8010472:	005b      	lsls	r3, r3, #1
 8010474:	e7ee      	b.n	8010454 <__lshift+0x1c>
 8010476:	2300      	movs	r3, #0
 8010478:	f100 0114 	add.w	r1, r0, #20
 801047c:	f100 0210 	add.w	r2, r0, #16
 8010480:	4618      	mov	r0, r3
 8010482:	4553      	cmp	r3, sl
 8010484:	db37      	blt.n	80104f6 <__lshift+0xbe>
 8010486:	6920      	ldr	r0, [r4, #16]
 8010488:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801048c:	f104 0314 	add.w	r3, r4, #20
 8010490:	f019 091f 	ands.w	r9, r9, #31
 8010494:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010498:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801049c:	d02f      	beq.n	80104fe <__lshift+0xc6>
 801049e:	f1c9 0e20 	rsb	lr, r9, #32
 80104a2:	468a      	mov	sl, r1
 80104a4:	f04f 0c00 	mov.w	ip, #0
 80104a8:	681a      	ldr	r2, [r3, #0]
 80104aa:	fa02 f209 	lsl.w	r2, r2, r9
 80104ae:	ea42 020c 	orr.w	r2, r2, ip
 80104b2:	f84a 2b04 	str.w	r2, [sl], #4
 80104b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80104ba:	4298      	cmp	r0, r3
 80104bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80104c0:	d8f2      	bhi.n	80104a8 <__lshift+0x70>
 80104c2:	1b03      	subs	r3, r0, r4
 80104c4:	3b15      	subs	r3, #21
 80104c6:	f023 0303 	bic.w	r3, r3, #3
 80104ca:	3304      	adds	r3, #4
 80104cc:	f104 0215 	add.w	r2, r4, #21
 80104d0:	4290      	cmp	r0, r2
 80104d2:	bf38      	it	cc
 80104d4:	2304      	movcc	r3, #4
 80104d6:	f841 c003 	str.w	ip, [r1, r3]
 80104da:	f1bc 0f00 	cmp.w	ip, #0
 80104de:	d001      	beq.n	80104e4 <__lshift+0xac>
 80104e0:	f108 0602 	add.w	r6, r8, #2
 80104e4:	3e01      	subs	r6, #1
 80104e6:	4638      	mov	r0, r7
 80104e8:	612e      	str	r6, [r5, #16]
 80104ea:	4621      	mov	r1, r4
 80104ec:	f7ff fd88 	bl	8010000 <_Bfree>
 80104f0:	4628      	mov	r0, r5
 80104f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80104fa:	3301      	adds	r3, #1
 80104fc:	e7c1      	b.n	8010482 <__lshift+0x4a>
 80104fe:	3904      	subs	r1, #4
 8010500:	f853 2b04 	ldr.w	r2, [r3], #4
 8010504:	f841 2f04 	str.w	r2, [r1, #4]!
 8010508:	4298      	cmp	r0, r3
 801050a:	d8f9      	bhi.n	8010500 <__lshift+0xc8>
 801050c:	e7ea      	b.n	80104e4 <__lshift+0xac>
 801050e:	bf00      	nop
 8010510:	080123e8 	.word	0x080123e8
 8010514:	0801248b 	.word	0x0801248b

08010518 <__mcmp>:
 8010518:	b530      	push	{r4, r5, lr}
 801051a:	6902      	ldr	r2, [r0, #16]
 801051c:	690c      	ldr	r4, [r1, #16]
 801051e:	1b12      	subs	r2, r2, r4
 8010520:	d10e      	bne.n	8010540 <__mcmp+0x28>
 8010522:	f100 0314 	add.w	r3, r0, #20
 8010526:	3114      	adds	r1, #20
 8010528:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801052c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010530:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010534:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010538:	42a5      	cmp	r5, r4
 801053a:	d003      	beq.n	8010544 <__mcmp+0x2c>
 801053c:	d305      	bcc.n	801054a <__mcmp+0x32>
 801053e:	2201      	movs	r2, #1
 8010540:	4610      	mov	r0, r2
 8010542:	bd30      	pop	{r4, r5, pc}
 8010544:	4283      	cmp	r3, r0
 8010546:	d3f3      	bcc.n	8010530 <__mcmp+0x18>
 8010548:	e7fa      	b.n	8010540 <__mcmp+0x28>
 801054a:	f04f 32ff 	mov.w	r2, #4294967295
 801054e:	e7f7      	b.n	8010540 <__mcmp+0x28>

08010550 <__mdiff>:
 8010550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010554:	460c      	mov	r4, r1
 8010556:	4606      	mov	r6, r0
 8010558:	4611      	mov	r1, r2
 801055a:	4620      	mov	r0, r4
 801055c:	4690      	mov	r8, r2
 801055e:	f7ff ffdb 	bl	8010518 <__mcmp>
 8010562:	1e05      	subs	r5, r0, #0
 8010564:	d110      	bne.n	8010588 <__mdiff+0x38>
 8010566:	4629      	mov	r1, r5
 8010568:	4630      	mov	r0, r6
 801056a:	f7ff fd09 	bl	800ff80 <_Balloc>
 801056e:	b930      	cbnz	r0, 801057e <__mdiff+0x2e>
 8010570:	4b3a      	ldr	r3, [pc, #232]	; (801065c <__mdiff+0x10c>)
 8010572:	4602      	mov	r2, r0
 8010574:	f240 2132 	movw	r1, #562	; 0x232
 8010578:	4839      	ldr	r0, [pc, #228]	; (8010660 <__mdiff+0x110>)
 801057a:	f000 faa3 	bl	8010ac4 <__assert_func>
 801057e:	2301      	movs	r3, #1
 8010580:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010588:	bfa4      	itt	ge
 801058a:	4643      	movge	r3, r8
 801058c:	46a0      	movge	r8, r4
 801058e:	4630      	mov	r0, r6
 8010590:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010594:	bfa6      	itte	ge
 8010596:	461c      	movge	r4, r3
 8010598:	2500      	movge	r5, #0
 801059a:	2501      	movlt	r5, #1
 801059c:	f7ff fcf0 	bl	800ff80 <_Balloc>
 80105a0:	b920      	cbnz	r0, 80105ac <__mdiff+0x5c>
 80105a2:	4b2e      	ldr	r3, [pc, #184]	; (801065c <__mdiff+0x10c>)
 80105a4:	4602      	mov	r2, r0
 80105a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80105aa:	e7e5      	b.n	8010578 <__mdiff+0x28>
 80105ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80105b0:	6926      	ldr	r6, [r4, #16]
 80105b2:	60c5      	str	r5, [r0, #12]
 80105b4:	f104 0914 	add.w	r9, r4, #20
 80105b8:	f108 0514 	add.w	r5, r8, #20
 80105bc:	f100 0e14 	add.w	lr, r0, #20
 80105c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80105c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80105c8:	f108 0210 	add.w	r2, r8, #16
 80105cc:	46f2      	mov	sl, lr
 80105ce:	2100      	movs	r1, #0
 80105d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80105d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80105d8:	fa1f f883 	uxth.w	r8, r3
 80105dc:	fa11 f18b 	uxtah	r1, r1, fp
 80105e0:	0c1b      	lsrs	r3, r3, #16
 80105e2:	eba1 0808 	sub.w	r8, r1, r8
 80105e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80105ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80105ee:	fa1f f888 	uxth.w	r8, r8
 80105f2:	1419      	asrs	r1, r3, #16
 80105f4:	454e      	cmp	r6, r9
 80105f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80105fa:	f84a 3b04 	str.w	r3, [sl], #4
 80105fe:	d8e7      	bhi.n	80105d0 <__mdiff+0x80>
 8010600:	1b33      	subs	r3, r6, r4
 8010602:	3b15      	subs	r3, #21
 8010604:	f023 0303 	bic.w	r3, r3, #3
 8010608:	3304      	adds	r3, #4
 801060a:	3415      	adds	r4, #21
 801060c:	42a6      	cmp	r6, r4
 801060e:	bf38      	it	cc
 8010610:	2304      	movcc	r3, #4
 8010612:	441d      	add	r5, r3
 8010614:	4473      	add	r3, lr
 8010616:	469e      	mov	lr, r3
 8010618:	462e      	mov	r6, r5
 801061a:	4566      	cmp	r6, ip
 801061c:	d30e      	bcc.n	801063c <__mdiff+0xec>
 801061e:	f10c 0203 	add.w	r2, ip, #3
 8010622:	1b52      	subs	r2, r2, r5
 8010624:	f022 0203 	bic.w	r2, r2, #3
 8010628:	3d03      	subs	r5, #3
 801062a:	45ac      	cmp	ip, r5
 801062c:	bf38      	it	cc
 801062e:	2200      	movcc	r2, #0
 8010630:	441a      	add	r2, r3
 8010632:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010636:	b17b      	cbz	r3, 8010658 <__mdiff+0x108>
 8010638:	6107      	str	r7, [r0, #16]
 801063a:	e7a3      	b.n	8010584 <__mdiff+0x34>
 801063c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010640:	fa11 f288 	uxtah	r2, r1, r8
 8010644:	1414      	asrs	r4, r2, #16
 8010646:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801064a:	b292      	uxth	r2, r2
 801064c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010650:	f84e 2b04 	str.w	r2, [lr], #4
 8010654:	1421      	asrs	r1, r4, #16
 8010656:	e7e0      	b.n	801061a <__mdiff+0xca>
 8010658:	3f01      	subs	r7, #1
 801065a:	e7ea      	b.n	8010632 <__mdiff+0xe2>
 801065c:	080123e8 	.word	0x080123e8
 8010660:	0801248b 	.word	0x0801248b

08010664 <__ulp>:
 8010664:	b082      	sub	sp, #8
 8010666:	ed8d 0b00 	vstr	d0, [sp]
 801066a:	9b01      	ldr	r3, [sp, #4]
 801066c:	4912      	ldr	r1, [pc, #72]	; (80106b8 <__ulp+0x54>)
 801066e:	4019      	ands	r1, r3
 8010670:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010674:	2900      	cmp	r1, #0
 8010676:	dd05      	ble.n	8010684 <__ulp+0x20>
 8010678:	2200      	movs	r2, #0
 801067a:	460b      	mov	r3, r1
 801067c:	ec43 2b10 	vmov	d0, r2, r3
 8010680:	b002      	add	sp, #8
 8010682:	4770      	bx	lr
 8010684:	4249      	negs	r1, r1
 8010686:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801068a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801068e:	f04f 0200 	mov.w	r2, #0
 8010692:	f04f 0300 	mov.w	r3, #0
 8010696:	da04      	bge.n	80106a2 <__ulp+0x3e>
 8010698:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801069c:	fa41 f300 	asr.w	r3, r1, r0
 80106a0:	e7ec      	b.n	801067c <__ulp+0x18>
 80106a2:	f1a0 0114 	sub.w	r1, r0, #20
 80106a6:	291e      	cmp	r1, #30
 80106a8:	bfda      	itte	le
 80106aa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80106ae:	fa20 f101 	lsrle.w	r1, r0, r1
 80106b2:	2101      	movgt	r1, #1
 80106b4:	460a      	mov	r2, r1
 80106b6:	e7e1      	b.n	801067c <__ulp+0x18>
 80106b8:	7ff00000 	.word	0x7ff00000

080106bc <__b2d>:
 80106bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106be:	6905      	ldr	r5, [r0, #16]
 80106c0:	f100 0714 	add.w	r7, r0, #20
 80106c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80106c8:	1f2e      	subs	r6, r5, #4
 80106ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80106ce:	4620      	mov	r0, r4
 80106d0:	f7ff fd48 	bl	8010164 <__hi0bits>
 80106d4:	f1c0 0320 	rsb	r3, r0, #32
 80106d8:	280a      	cmp	r0, #10
 80106da:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010758 <__b2d+0x9c>
 80106de:	600b      	str	r3, [r1, #0]
 80106e0:	dc14      	bgt.n	801070c <__b2d+0x50>
 80106e2:	f1c0 0e0b 	rsb	lr, r0, #11
 80106e6:	fa24 f10e 	lsr.w	r1, r4, lr
 80106ea:	42b7      	cmp	r7, r6
 80106ec:	ea41 030c 	orr.w	r3, r1, ip
 80106f0:	bf34      	ite	cc
 80106f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80106f6:	2100      	movcs	r1, #0
 80106f8:	3015      	adds	r0, #21
 80106fa:	fa04 f000 	lsl.w	r0, r4, r0
 80106fe:	fa21 f10e 	lsr.w	r1, r1, lr
 8010702:	ea40 0201 	orr.w	r2, r0, r1
 8010706:	ec43 2b10 	vmov	d0, r2, r3
 801070a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801070c:	42b7      	cmp	r7, r6
 801070e:	bf3a      	itte	cc
 8010710:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010714:	f1a5 0608 	subcc.w	r6, r5, #8
 8010718:	2100      	movcs	r1, #0
 801071a:	380b      	subs	r0, #11
 801071c:	d017      	beq.n	801074e <__b2d+0x92>
 801071e:	f1c0 0c20 	rsb	ip, r0, #32
 8010722:	fa04 f500 	lsl.w	r5, r4, r0
 8010726:	42be      	cmp	r6, r7
 8010728:	fa21 f40c 	lsr.w	r4, r1, ip
 801072c:	ea45 0504 	orr.w	r5, r5, r4
 8010730:	bf8c      	ite	hi
 8010732:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010736:	2400      	movls	r4, #0
 8010738:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801073c:	fa01 f000 	lsl.w	r0, r1, r0
 8010740:	fa24 f40c 	lsr.w	r4, r4, ip
 8010744:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010748:	ea40 0204 	orr.w	r2, r0, r4
 801074c:	e7db      	b.n	8010706 <__b2d+0x4a>
 801074e:	ea44 030c 	orr.w	r3, r4, ip
 8010752:	460a      	mov	r2, r1
 8010754:	e7d7      	b.n	8010706 <__b2d+0x4a>
 8010756:	bf00      	nop
 8010758:	3ff00000 	.word	0x3ff00000

0801075c <__d2b>:
 801075c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010760:	4689      	mov	r9, r1
 8010762:	2101      	movs	r1, #1
 8010764:	ec57 6b10 	vmov	r6, r7, d0
 8010768:	4690      	mov	r8, r2
 801076a:	f7ff fc09 	bl	800ff80 <_Balloc>
 801076e:	4604      	mov	r4, r0
 8010770:	b930      	cbnz	r0, 8010780 <__d2b+0x24>
 8010772:	4602      	mov	r2, r0
 8010774:	4b25      	ldr	r3, [pc, #148]	; (801080c <__d2b+0xb0>)
 8010776:	4826      	ldr	r0, [pc, #152]	; (8010810 <__d2b+0xb4>)
 8010778:	f240 310a 	movw	r1, #778	; 0x30a
 801077c:	f000 f9a2 	bl	8010ac4 <__assert_func>
 8010780:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010784:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010788:	bb35      	cbnz	r5, 80107d8 <__d2b+0x7c>
 801078a:	2e00      	cmp	r6, #0
 801078c:	9301      	str	r3, [sp, #4]
 801078e:	d028      	beq.n	80107e2 <__d2b+0x86>
 8010790:	4668      	mov	r0, sp
 8010792:	9600      	str	r6, [sp, #0]
 8010794:	f7ff fd06 	bl	80101a4 <__lo0bits>
 8010798:	9900      	ldr	r1, [sp, #0]
 801079a:	b300      	cbz	r0, 80107de <__d2b+0x82>
 801079c:	9a01      	ldr	r2, [sp, #4]
 801079e:	f1c0 0320 	rsb	r3, r0, #32
 80107a2:	fa02 f303 	lsl.w	r3, r2, r3
 80107a6:	430b      	orrs	r3, r1
 80107a8:	40c2      	lsrs	r2, r0
 80107aa:	6163      	str	r3, [r4, #20]
 80107ac:	9201      	str	r2, [sp, #4]
 80107ae:	9b01      	ldr	r3, [sp, #4]
 80107b0:	61a3      	str	r3, [r4, #24]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	bf14      	ite	ne
 80107b6:	2202      	movne	r2, #2
 80107b8:	2201      	moveq	r2, #1
 80107ba:	6122      	str	r2, [r4, #16]
 80107bc:	b1d5      	cbz	r5, 80107f4 <__d2b+0x98>
 80107be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80107c2:	4405      	add	r5, r0
 80107c4:	f8c9 5000 	str.w	r5, [r9]
 80107c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80107cc:	f8c8 0000 	str.w	r0, [r8]
 80107d0:	4620      	mov	r0, r4
 80107d2:	b003      	add	sp, #12
 80107d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80107dc:	e7d5      	b.n	801078a <__d2b+0x2e>
 80107de:	6161      	str	r1, [r4, #20]
 80107e0:	e7e5      	b.n	80107ae <__d2b+0x52>
 80107e2:	a801      	add	r0, sp, #4
 80107e4:	f7ff fcde 	bl	80101a4 <__lo0bits>
 80107e8:	9b01      	ldr	r3, [sp, #4]
 80107ea:	6163      	str	r3, [r4, #20]
 80107ec:	2201      	movs	r2, #1
 80107ee:	6122      	str	r2, [r4, #16]
 80107f0:	3020      	adds	r0, #32
 80107f2:	e7e3      	b.n	80107bc <__d2b+0x60>
 80107f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80107f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80107fc:	f8c9 0000 	str.w	r0, [r9]
 8010800:	6918      	ldr	r0, [r3, #16]
 8010802:	f7ff fcaf 	bl	8010164 <__hi0bits>
 8010806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801080a:	e7df      	b.n	80107cc <__d2b+0x70>
 801080c:	080123e8 	.word	0x080123e8
 8010810:	0801248b 	.word	0x0801248b

08010814 <__ratio>:
 8010814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010818:	4688      	mov	r8, r1
 801081a:	4669      	mov	r1, sp
 801081c:	4681      	mov	r9, r0
 801081e:	f7ff ff4d 	bl	80106bc <__b2d>
 8010822:	a901      	add	r1, sp, #4
 8010824:	4640      	mov	r0, r8
 8010826:	ec55 4b10 	vmov	r4, r5, d0
 801082a:	ee10 aa10 	vmov	sl, s0
 801082e:	f7ff ff45 	bl	80106bc <__b2d>
 8010832:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010836:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801083a:	1a59      	subs	r1, r3, r1
 801083c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010840:	1ad3      	subs	r3, r2, r3
 8010842:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010846:	ec57 6b10 	vmov	r6, r7, d0
 801084a:	2b00      	cmp	r3, #0
 801084c:	bfd6      	itet	le
 801084e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010852:	462a      	movgt	r2, r5
 8010854:	463a      	movle	r2, r7
 8010856:	46ab      	mov	fp, r5
 8010858:	bfd6      	itet	le
 801085a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801085e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010862:	ee00 3a90 	vmovle	s1, r3
 8010866:	ec4b ab17 	vmov	d7, sl, fp
 801086a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801086e:	b003      	add	sp, #12
 8010870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010874 <__copybits>:
 8010874:	3901      	subs	r1, #1
 8010876:	b570      	push	{r4, r5, r6, lr}
 8010878:	1149      	asrs	r1, r1, #5
 801087a:	6914      	ldr	r4, [r2, #16]
 801087c:	3101      	adds	r1, #1
 801087e:	f102 0314 	add.w	r3, r2, #20
 8010882:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010886:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801088a:	1f05      	subs	r5, r0, #4
 801088c:	42a3      	cmp	r3, r4
 801088e:	d30c      	bcc.n	80108aa <__copybits+0x36>
 8010890:	1aa3      	subs	r3, r4, r2
 8010892:	3b11      	subs	r3, #17
 8010894:	f023 0303 	bic.w	r3, r3, #3
 8010898:	3211      	adds	r2, #17
 801089a:	42a2      	cmp	r2, r4
 801089c:	bf88      	it	hi
 801089e:	2300      	movhi	r3, #0
 80108a0:	4418      	add	r0, r3
 80108a2:	2300      	movs	r3, #0
 80108a4:	4288      	cmp	r0, r1
 80108a6:	d305      	bcc.n	80108b4 <__copybits+0x40>
 80108a8:	bd70      	pop	{r4, r5, r6, pc}
 80108aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80108ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80108b2:	e7eb      	b.n	801088c <__copybits+0x18>
 80108b4:	f840 3b04 	str.w	r3, [r0], #4
 80108b8:	e7f4      	b.n	80108a4 <__copybits+0x30>

080108ba <__any_on>:
 80108ba:	f100 0214 	add.w	r2, r0, #20
 80108be:	6900      	ldr	r0, [r0, #16]
 80108c0:	114b      	asrs	r3, r1, #5
 80108c2:	4298      	cmp	r0, r3
 80108c4:	b510      	push	{r4, lr}
 80108c6:	db11      	blt.n	80108ec <__any_on+0x32>
 80108c8:	dd0a      	ble.n	80108e0 <__any_on+0x26>
 80108ca:	f011 011f 	ands.w	r1, r1, #31
 80108ce:	d007      	beq.n	80108e0 <__any_on+0x26>
 80108d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80108d4:	fa24 f001 	lsr.w	r0, r4, r1
 80108d8:	fa00 f101 	lsl.w	r1, r0, r1
 80108dc:	428c      	cmp	r4, r1
 80108de:	d10b      	bne.n	80108f8 <__any_on+0x3e>
 80108e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d803      	bhi.n	80108f0 <__any_on+0x36>
 80108e8:	2000      	movs	r0, #0
 80108ea:	bd10      	pop	{r4, pc}
 80108ec:	4603      	mov	r3, r0
 80108ee:	e7f7      	b.n	80108e0 <__any_on+0x26>
 80108f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80108f4:	2900      	cmp	r1, #0
 80108f6:	d0f5      	beq.n	80108e4 <__any_on+0x2a>
 80108f8:	2001      	movs	r0, #1
 80108fa:	e7f6      	b.n	80108ea <__any_on+0x30>

080108fc <_calloc_r>:
 80108fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108fe:	fba1 2402 	umull	r2, r4, r1, r2
 8010902:	b94c      	cbnz	r4, 8010918 <_calloc_r+0x1c>
 8010904:	4611      	mov	r1, r2
 8010906:	9201      	str	r2, [sp, #4]
 8010908:	f000 f82e 	bl	8010968 <_malloc_r>
 801090c:	9a01      	ldr	r2, [sp, #4]
 801090e:	4605      	mov	r5, r0
 8010910:	b930      	cbnz	r0, 8010920 <_calloc_r+0x24>
 8010912:	4628      	mov	r0, r5
 8010914:	b003      	add	sp, #12
 8010916:	bd30      	pop	{r4, r5, pc}
 8010918:	220c      	movs	r2, #12
 801091a:	6002      	str	r2, [r0, #0]
 801091c:	2500      	movs	r5, #0
 801091e:	e7f8      	b.n	8010912 <_calloc_r+0x16>
 8010920:	4621      	mov	r1, r4
 8010922:	f7fe f9c5 	bl	800ecb0 <memset>
 8010926:	e7f4      	b.n	8010912 <_calloc_r+0x16>

08010928 <sbrk_aligned>:
 8010928:	b570      	push	{r4, r5, r6, lr}
 801092a:	4e0e      	ldr	r6, [pc, #56]	; (8010964 <sbrk_aligned+0x3c>)
 801092c:	460c      	mov	r4, r1
 801092e:	6831      	ldr	r1, [r6, #0]
 8010930:	4605      	mov	r5, r0
 8010932:	b911      	cbnz	r1, 801093a <sbrk_aligned+0x12>
 8010934:	f000 f894 	bl	8010a60 <_sbrk_r>
 8010938:	6030      	str	r0, [r6, #0]
 801093a:	4621      	mov	r1, r4
 801093c:	4628      	mov	r0, r5
 801093e:	f000 f88f 	bl	8010a60 <_sbrk_r>
 8010942:	1c43      	adds	r3, r0, #1
 8010944:	d00a      	beq.n	801095c <sbrk_aligned+0x34>
 8010946:	1cc4      	adds	r4, r0, #3
 8010948:	f024 0403 	bic.w	r4, r4, #3
 801094c:	42a0      	cmp	r0, r4
 801094e:	d007      	beq.n	8010960 <sbrk_aligned+0x38>
 8010950:	1a21      	subs	r1, r4, r0
 8010952:	4628      	mov	r0, r5
 8010954:	f000 f884 	bl	8010a60 <_sbrk_r>
 8010958:	3001      	adds	r0, #1
 801095a:	d101      	bne.n	8010960 <sbrk_aligned+0x38>
 801095c:	f04f 34ff 	mov.w	r4, #4294967295
 8010960:	4620      	mov	r0, r4
 8010962:	bd70      	pop	{r4, r5, r6, pc}
 8010964:	24000d88 	.word	0x24000d88

08010968 <_malloc_r>:
 8010968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801096c:	1ccd      	adds	r5, r1, #3
 801096e:	f025 0503 	bic.w	r5, r5, #3
 8010972:	3508      	adds	r5, #8
 8010974:	2d0c      	cmp	r5, #12
 8010976:	bf38      	it	cc
 8010978:	250c      	movcc	r5, #12
 801097a:	2d00      	cmp	r5, #0
 801097c:	4607      	mov	r7, r0
 801097e:	db01      	blt.n	8010984 <_malloc_r+0x1c>
 8010980:	42a9      	cmp	r1, r5
 8010982:	d905      	bls.n	8010990 <_malloc_r+0x28>
 8010984:	230c      	movs	r3, #12
 8010986:	603b      	str	r3, [r7, #0]
 8010988:	2600      	movs	r6, #0
 801098a:	4630      	mov	r0, r6
 801098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010990:	4e2e      	ldr	r6, [pc, #184]	; (8010a4c <_malloc_r+0xe4>)
 8010992:	f000 f8cf 	bl	8010b34 <__malloc_lock>
 8010996:	6833      	ldr	r3, [r6, #0]
 8010998:	461c      	mov	r4, r3
 801099a:	bb34      	cbnz	r4, 80109ea <_malloc_r+0x82>
 801099c:	4629      	mov	r1, r5
 801099e:	4638      	mov	r0, r7
 80109a0:	f7ff ffc2 	bl	8010928 <sbrk_aligned>
 80109a4:	1c43      	adds	r3, r0, #1
 80109a6:	4604      	mov	r4, r0
 80109a8:	d14d      	bne.n	8010a46 <_malloc_r+0xde>
 80109aa:	6834      	ldr	r4, [r6, #0]
 80109ac:	4626      	mov	r6, r4
 80109ae:	2e00      	cmp	r6, #0
 80109b0:	d140      	bne.n	8010a34 <_malloc_r+0xcc>
 80109b2:	6823      	ldr	r3, [r4, #0]
 80109b4:	4631      	mov	r1, r6
 80109b6:	4638      	mov	r0, r7
 80109b8:	eb04 0803 	add.w	r8, r4, r3
 80109bc:	f000 f850 	bl	8010a60 <_sbrk_r>
 80109c0:	4580      	cmp	r8, r0
 80109c2:	d13a      	bne.n	8010a3a <_malloc_r+0xd2>
 80109c4:	6821      	ldr	r1, [r4, #0]
 80109c6:	3503      	adds	r5, #3
 80109c8:	1a6d      	subs	r5, r5, r1
 80109ca:	f025 0503 	bic.w	r5, r5, #3
 80109ce:	3508      	adds	r5, #8
 80109d0:	2d0c      	cmp	r5, #12
 80109d2:	bf38      	it	cc
 80109d4:	250c      	movcc	r5, #12
 80109d6:	4629      	mov	r1, r5
 80109d8:	4638      	mov	r0, r7
 80109da:	f7ff ffa5 	bl	8010928 <sbrk_aligned>
 80109de:	3001      	adds	r0, #1
 80109e0:	d02b      	beq.n	8010a3a <_malloc_r+0xd2>
 80109e2:	6823      	ldr	r3, [r4, #0]
 80109e4:	442b      	add	r3, r5
 80109e6:	6023      	str	r3, [r4, #0]
 80109e8:	e00e      	b.n	8010a08 <_malloc_r+0xa0>
 80109ea:	6822      	ldr	r2, [r4, #0]
 80109ec:	1b52      	subs	r2, r2, r5
 80109ee:	d41e      	bmi.n	8010a2e <_malloc_r+0xc6>
 80109f0:	2a0b      	cmp	r2, #11
 80109f2:	d916      	bls.n	8010a22 <_malloc_r+0xba>
 80109f4:	1961      	adds	r1, r4, r5
 80109f6:	42a3      	cmp	r3, r4
 80109f8:	6025      	str	r5, [r4, #0]
 80109fa:	bf18      	it	ne
 80109fc:	6059      	strne	r1, [r3, #4]
 80109fe:	6863      	ldr	r3, [r4, #4]
 8010a00:	bf08      	it	eq
 8010a02:	6031      	streq	r1, [r6, #0]
 8010a04:	5162      	str	r2, [r4, r5]
 8010a06:	604b      	str	r3, [r1, #4]
 8010a08:	4638      	mov	r0, r7
 8010a0a:	f104 060b 	add.w	r6, r4, #11
 8010a0e:	f000 f897 	bl	8010b40 <__malloc_unlock>
 8010a12:	f026 0607 	bic.w	r6, r6, #7
 8010a16:	1d23      	adds	r3, r4, #4
 8010a18:	1af2      	subs	r2, r6, r3
 8010a1a:	d0b6      	beq.n	801098a <_malloc_r+0x22>
 8010a1c:	1b9b      	subs	r3, r3, r6
 8010a1e:	50a3      	str	r3, [r4, r2]
 8010a20:	e7b3      	b.n	801098a <_malloc_r+0x22>
 8010a22:	6862      	ldr	r2, [r4, #4]
 8010a24:	42a3      	cmp	r3, r4
 8010a26:	bf0c      	ite	eq
 8010a28:	6032      	streq	r2, [r6, #0]
 8010a2a:	605a      	strne	r2, [r3, #4]
 8010a2c:	e7ec      	b.n	8010a08 <_malloc_r+0xa0>
 8010a2e:	4623      	mov	r3, r4
 8010a30:	6864      	ldr	r4, [r4, #4]
 8010a32:	e7b2      	b.n	801099a <_malloc_r+0x32>
 8010a34:	4634      	mov	r4, r6
 8010a36:	6876      	ldr	r6, [r6, #4]
 8010a38:	e7b9      	b.n	80109ae <_malloc_r+0x46>
 8010a3a:	230c      	movs	r3, #12
 8010a3c:	603b      	str	r3, [r7, #0]
 8010a3e:	4638      	mov	r0, r7
 8010a40:	f000 f87e 	bl	8010b40 <__malloc_unlock>
 8010a44:	e7a1      	b.n	801098a <_malloc_r+0x22>
 8010a46:	6025      	str	r5, [r4, #0]
 8010a48:	e7de      	b.n	8010a08 <_malloc_r+0xa0>
 8010a4a:	bf00      	nop
 8010a4c:	24000d84 	.word	0x24000d84

08010a50 <nan>:
 8010a50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010a58 <nan+0x8>
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	00000000 	.word	0x00000000
 8010a5c:	7ff80000 	.word	0x7ff80000

08010a60 <_sbrk_r>:
 8010a60:	b538      	push	{r3, r4, r5, lr}
 8010a62:	4d06      	ldr	r5, [pc, #24]	; (8010a7c <_sbrk_r+0x1c>)
 8010a64:	2300      	movs	r3, #0
 8010a66:	4604      	mov	r4, r0
 8010a68:	4608      	mov	r0, r1
 8010a6a:	602b      	str	r3, [r5, #0]
 8010a6c:	f7f3 fa46 	bl	8003efc <_sbrk>
 8010a70:	1c43      	adds	r3, r0, #1
 8010a72:	d102      	bne.n	8010a7a <_sbrk_r+0x1a>
 8010a74:	682b      	ldr	r3, [r5, #0]
 8010a76:	b103      	cbz	r3, 8010a7a <_sbrk_r+0x1a>
 8010a78:	6023      	str	r3, [r4, #0]
 8010a7a:	bd38      	pop	{r3, r4, r5, pc}
 8010a7c:	24000d8c 	.word	0x24000d8c

08010a80 <strncmp>:
 8010a80:	b510      	push	{r4, lr}
 8010a82:	b17a      	cbz	r2, 8010aa4 <strncmp+0x24>
 8010a84:	4603      	mov	r3, r0
 8010a86:	3901      	subs	r1, #1
 8010a88:	1884      	adds	r4, r0, r2
 8010a8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010a8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010a92:	4290      	cmp	r0, r2
 8010a94:	d101      	bne.n	8010a9a <strncmp+0x1a>
 8010a96:	42a3      	cmp	r3, r4
 8010a98:	d101      	bne.n	8010a9e <strncmp+0x1e>
 8010a9a:	1a80      	subs	r0, r0, r2
 8010a9c:	bd10      	pop	{r4, pc}
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d1f3      	bne.n	8010a8a <strncmp+0xa>
 8010aa2:	e7fa      	b.n	8010a9a <strncmp+0x1a>
 8010aa4:	4610      	mov	r0, r2
 8010aa6:	e7f9      	b.n	8010a9c <strncmp+0x1c>

08010aa8 <__ascii_wctomb>:
 8010aa8:	b149      	cbz	r1, 8010abe <__ascii_wctomb+0x16>
 8010aaa:	2aff      	cmp	r2, #255	; 0xff
 8010aac:	bf85      	ittet	hi
 8010aae:	238a      	movhi	r3, #138	; 0x8a
 8010ab0:	6003      	strhi	r3, [r0, #0]
 8010ab2:	700a      	strbls	r2, [r1, #0]
 8010ab4:	f04f 30ff 	movhi.w	r0, #4294967295
 8010ab8:	bf98      	it	ls
 8010aba:	2001      	movls	r0, #1
 8010abc:	4770      	bx	lr
 8010abe:	4608      	mov	r0, r1
 8010ac0:	4770      	bx	lr
	...

08010ac4 <__assert_func>:
 8010ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ac6:	4614      	mov	r4, r2
 8010ac8:	461a      	mov	r2, r3
 8010aca:	4b09      	ldr	r3, [pc, #36]	; (8010af0 <__assert_func+0x2c>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	4605      	mov	r5, r0
 8010ad0:	68d8      	ldr	r0, [r3, #12]
 8010ad2:	b14c      	cbz	r4, 8010ae8 <__assert_func+0x24>
 8010ad4:	4b07      	ldr	r3, [pc, #28]	; (8010af4 <__assert_func+0x30>)
 8010ad6:	9100      	str	r1, [sp, #0]
 8010ad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010adc:	4906      	ldr	r1, [pc, #24]	; (8010af8 <__assert_func+0x34>)
 8010ade:	462b      	mov	r3, r5
 8010ae0:	f000 f80e 	bl	8010b00 <fiprintf>
 8010ae4:	f000 fc2c 	bl	8011340 <abort>
 8010ae8:	4b04      	ldr	r3, [pc, #16]	; (8010afc <__assert_func+0x38>)
 8010aea:	461c      	mov	r4, r3
 8010aec:	e7f3      	b.n	8010ad6 <__assert_func+0x12>
 8010aee:	bf00      	nop
 8010af0:	240000b0 	.word	0x240000b0
 8010af4:	080125e4 	.word	0x080125e4
 8010af8:	080125f1 	.word	0x080125f1
 8010afc:	0801261f 	.word	0x0801261f

08010b00 <fiprintf>:
 8010b00:	b40e      	push	{r1, r2, r3}
 8010b02:	b503      	push	{r0, r1, lr}
 8010b04:	4601      	mov	r1, r0
 8010b06:	ab03      	add	r3, sp, #12
 8010b08:	4805      	ldr	r0, [pc, #20]	; (8010b20 <fiprintf+0x20>)
 8010b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b0e:	6800      	ldr	r0, [r0, #0]
 8010b10:	9301      	str	r3, [sp, #4]
 8010b12:	f000 f891 	bl	8010c38 <_vfiprintf_r>
 8010b16:	b002      	add	sp, #8
 8010b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b1c:	b003      	add	sp, #12
 8010b1e:	4770      	bx	lr
 8010b20:	240000b0 	.word	0x240000b0

08010b24 <malloc>:
 8010b24:	4b02      	ldr	r3, [pc, #8]	; (8010b30 <malloc+0xc>)
 8010b26:	4601      	mov	r1, r0
 8010b28:	6818      	ldr	r0, [r3, #0]
 8010b2a:	f7ff bf1d 	b.w	8010968 <_malloc_r>
 8010b2e:	bf00      	nop
 8010b30:	240000b0 	.word	0x240000b0

08010b34 <__malloc_lock>:
 8010b34:	4801      	ldr	r0, [pc, #4]	; (8010b3c <__malloc_lock+0x8>)
 8010b36:	f000 bdc3 	b.w	80116c0 <__retarget_lock_acquire_recursive>
 8010b3a:	bf00      	nop
 8010b3c:	24000d90 	.word	0x24000d90

08010b40 <__malloc_unlock>:
 8010b40:	4801      	ldr	r0, [pc, #4]	; (8010b48 <__malloc_unlock+0x8>)
 8010b42:	f000 bdbe 	b.w	80116c2 <__retarget_lock_release_recursive>
 8010b46:	bf00      	nop
 8010b48:	24000d90 	.word	0x24000d90

08010b4c <_free_r>:
 8010b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b4e:	2900      	cmp	r1, #0
 8010b50:	d044      	beq.n	8010bdc <_free_r+0x90>
 8010b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b56:	9001      	str	r0, [sp, #4]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8010b5e:	bfb8      	it	lt
 8010b60:	18e4      	addlt	r4, r4, r3
 8010b62:	f7ff ffe7 	bl	8010b34 <__malloc_lock>
 8010b66:	4a1e      	ldr	r2, [pc, #120]	; (8010be0 <_free_r+0x94>)
 8010b68:	9801      	ldr	r0, [sp, #4]
 8010b6a:	6813      	ldr	r3, [r2, #0]
 8010b6c:	b933      	cbnz	r3, 8010b7c <_free_r+0x30>
 8010b6e:	6063      	str	r3, [r4, #4]
 8010b70:	6014      	str	r4, [r2, #0]
 8010b72:	b003      	add	sp, #12
 8010b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b78:	f7ff bfe2 	b.w	8010b40 <__malloc_unlock>
 8010b7c:	42a3      	cmp	r3, r4
 8010b7e:	d908      	bls.n	8010b92 <_free_r+0x46>
 8010b80:	6825      	ldr	r5, [r4, #0]
 8010b82:	1961      	adds	r1, r4, r5
 8010b84:	428b      	cmp	r3, r1
 8010b86:	bf01      	itttt	eq
 8010b88:	6819      	ldreq	r1, [r3, #0]
 8010b8a:	685b      	ldreq	r3, [r3, #4]
 8010b8c:	1949      	addeq	r1, r1, r5
 8010b8e:	6021      	streq	r1, [r4, #0]
 8010b90:	e7ed      	b.n	8010b6e <_free_r+0x22>
 8010b92:	461a      	mov	r2, r3
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	b10b      	cbz	r3, 8010b9c <_free_r+0x50>
 8010b98:	42a3      	cmp	r3, r4
 8010b9a:	d9fa      	bls.n	8010b92 <_free_r+0x46>
 8010b9c:	6811      	ldr	r1, [r2, #0]
 8010b9e:	1855      	adds	r5, r2, r1
 8010ba0:	42a5      	cmp	r5, r4
 8010ba2:	d10b      	bne.n	8010bbc <_free_r+0x70>
 8010ba4:	6824      	ldr	r4, [r4, #0]
 8010ba6:	4421      	add	r1, r4
 8010ba8:	1854      	adds	r4, r2, r1
 8010baa:	42a3      	cmp	r3, r4
 8010bac:	6011      	str	r1, [r2, #0]
 8010bae:	d1e0      	bne.n	8010b72 <_free_r+0x26>
 8010bb0:	681c      	ldr	r4, [r3, #0]
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	6053      	str	r3, [r2, #4]
 8010bb6:	4421      	add	r1, r4
 8010bb8:	6011      	str	r1, [r2, #0]
 8010bba:	e7da      	b.n	8010b72 <_free_r+0x26>
 8010bbc:	d902      	bls.n	8010bc4 <_free_r+0x78>
 8010bbe:	230c      	movs	r3, #12
 8010bc0:	6003      	str	r3, [r0, #0]
 8010bc2:	e7d6      	b.n	8010b72 <_free_r+0x26>
 8010bc4:	6825      	ldr	r5, [r4, #0]
 8010bc6:	1961      	adds	r1, r4, r5
 8010bc8:	428b      	cmp	r3, r1
 8010bca:	bf04      	itt	eq
 8010bcc:	6819      	ldreq	r1, [r3, #0]
 8010bce:	685b      	ldreq	r3, [r3, #4]
 8010bd0:	6063      	str	r3, [r4, #4]
 8010bd2:	bf04      	itt	eq
 8010bd4:	1949      	addeq	r1, r1, r5
 8010bd6:	6021      	streq	r1, [r4, #0]
 8010bd8:	6054      	str	r4, [r2, #4]
 8010bda:	e7ca      	b.n	8010b72 <_free_r+0x26>
 8010bdc:	b003      	add	sp, #12
 8010bde:	bd30      	pop	{r4, r5, pc}
 8010be0:	24000d84 	.word	0x24000d84

08010be4 <__sfputc_r>:
 8010be4:	6893      	ldr	r3, [r2, #8]
 8010be6:	3b01      	subs	r3, #1
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	b410      	push	{r4}
 8010bec:	6093      	str	r3, [r2, #8]
 8010bee:	da08      	bge.n	8010c02 <__sfputc_r+0x1e>
 8010bf0:	6994      	ldr	r4, [r2, #24]
 8010bf2:	42a3      	cmp	r3, r4
 8010bf4:	db01      	blt.n	8010bfa <__sfputc_r+0x16>
 8010bf6:	290a      	cmp	r1, #10
 8010bf8:	d103      	bne.n	8010c02 <__sfputc_r+0x1e>
 8010bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bfe:	f000 badf 	b.w	80111c0 <__swbuf_r>
 8010c02:	6813      	ldr	r3, [r2, #0]
 8010c04:	1c58      	adds	r0, r3, #1
 8010c06:	6010      	str	r0, [r2, #0]
 8010c08:	7019      	strb	r1, [r3, #0]
 8010c0a:	4608      	mov	r0, r1
 8010c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c10:	4770      	bx	lr

08010c12 <__sfputs_r>:
 8010c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c14:	4606      	mov	r6, r0
 8010c16:	460f      	mov	r7, r1
 8010c18:	4614      	mov	r4, r2
 8010c1a:	18d5      	adds	r5, r2, r3
 8010c1c:	42ac      	cmp	r4, r5
 8010c1e:	d101      	bne.n	8010c24 <__sfputs_r+0x12>
 8010c20:	2000      	movs	r0, #0
 8010c22:	e007      	b.n	8010c34 <__sfputs_r+0x22>
 8010c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c28:	463a      	mov	r2, r7
 8010c2a:	4630      	mov	r0, r6
 8010c2c:	f7ff ffda 	bl	8010be4 <__sfputc_r>
 8010c30:	1c43      	adds	r3, r0, #1
 8010c32:	d1f3      	bne.n	8010c1c <__sfputs_r+0xa>
 8010c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c38 <_vfiprintf_r>:
 8010c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3c:	460d      	mov	r5, r1
 8010c3e:	b09d      	sub	sp, #116	; 0x74
 8010c40:	4614      	mov	r4, r2
 8010c42:	4698      	mov	r8, r3
 8010c44:	4606      	mov	r6, r0
 8010c46:	b118      	cbz	r0, 8010c50 <_vfiprintf_r+0x18>
 8010c48:	6983      	ldr	r3, [r0, #24]
 8010c4a:	b90b      	cbnz	r3, 8010c50 <_vfiprintf_r+0x18>
 8010c4c:	f000 fc9a 	bl	8011584 <__sinit>
 8010c50:	4b89      	ldr	r3, [pc, #548]	; (8010e78 <_vfiprintf_r+0x240>)
 8010c52:	429d      	cmp	r5, r3
 8010c54:	d11b      	bne.n	8010c8e <_vfiprintf_r+0x56>
 8010c56:	6875      	ldr	r5, [r6, #4]
 8010c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c5a:	07d9      	lsls	r1, r3, #31
 8010c5c:	d405      	bmi.n	8010c6a <_vfiprintf_r+0x32>
 8010c5e:	89ab      	ldrh	r3, [r5, #12]
 8010c60:	059a      	lsls	r2, r3, #22
 8010c62:	d402      	bmi.n	8010c6a <_vfiprintf_r+0x32>
 8010c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c66:	f000 fd2b 	bl	80116c0 <__retarget_lock_acquire_recursive>
 8010c6a:	89ab      	ldrh	r3, [r5, #12]
 8010c6c:	071b      	lsls	r3, r3, #28
 8010c6e:	d501      	bpl.n	8010c74 <_vfiprintf_r+0x3c>
 8010c70:	692b      	ldr	r3, [r5, #16]
 8010c72:	b9eb      	cbnz	r3, 8010cb0 <_vfiprintf_r+0x78>
 8010c74:	4629      	mov	r1, r5
 8010c76:	4630      	mov	r0, r6
 8010c78:	f000 faf4 	bl	8011264 <__swsetup_r>
 8010c7c:	b1c0      	cbz	r0, 8010cb0 <_vfiprintf_r+0x78>
 8010c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c80:	07dc      	lsls	r4, r3, #31
 8010c82:	d50e      	bpl.n	8010ca2 <_vfiprintf_r+0x6a>
 8010c84:	f04f 30ff 	mov.w	r0, #4294967295
 8010c88:	b01d      	add	sp, #116	; 0x74
 8010c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c8e:	4b7b      	ldr	r3, [pc, #492]	; (8010e7c <_vfiprintf_r+0x244>)
 8010c90:	429d      	cmp	r5, r3
 8010c92:	d101      	bne.n	8010c98 <_vfiprintf_r+0x60>
 8010c94:	68b5      	ldr	r5, [r6, #8]
 8010c96:	e7df      	b.n	8010c58 <_vfiprintf_r+0x20>
 8010c98:	4b79      	ldr	r3, [pc, #484]	; (8010e80 <_vfiprintf_r+0x248>)
 8010c9a:	429d      	cmp	r5, r3
 8010c9c:	bf08      	it	eq
 8010c9e:	68f5      	ldreq	r5, [r6, #12]
 8010ca0:	e7da      	b.n	8010c58 <_vfiprintf_r+0x20>
 8010ca2:	89ab      	ldrh	r3, [r5, #12]
 8010ca4:	0598      	lsls	r0, r3, #22
 8010ca6:	d4ed      	bmi.n	8010c84 <_vfiprintf_r+0x4c>
 8010ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010caa:	f000 fd0a 	bl	80116c2 <__retarget_lock_release_recursive>
 8010cae:	e7e9      	b.n	8010c84 <_vfiprintf_r+0x4c>
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8010cb4:	2320      	movs	r3, #32
 8010cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cbe:	2330      	movs	r3, #48	; 0x30
 8010cc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010e84 <_vfiprintf_r+0x24c>
 8010cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010cc8:	f04f 0901 	mov.w	r9, #1
 8010ccc:	4623      	mov	r3, r4
 8010cce:	469a      	mov	sl, r3
 8010cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cd4:	b10a      	cbz	r2, 8010cda <_vfiprintf_r+0xa2>
 8010cd6:	2a25      	cmp	r2, #37	; 0x25
 8010cd8:	d1f9      	bne.n	8010cce <_vfiprintf_r+0x96>
 8010cda:	ebba 0b04 	subs.w	fp, sl, r4
 8010cde:	d00b      	beq.n	8010cf8 <_vfiprintf_r+0xc0>
 8010ce0:	465b      	mov	r3, fp
 8010ce2:	4622      	mov	r2, r4
 8010ce4:	4629      	mov	r1, r5
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	f7ff ff93 	bl	8010c12 <__sfputs_r>
 8010cec:	3001      	adds	r0, #1
 8010cee:	f000 80aa 	beq.w	8010e46 <_vfiprintf_r+0x20e>
 8010cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cf4:	445a      	add	r2, fp
 8010cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8010cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	f000 80a2 	beq.w	8010e46 <_vfiprintf_r+0x20e>
 8010d02:	2300      	movs	r3, #0
 8010d04:	f04f 32ff 	mov.w	r2, #4294967295
 8010d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d0c:	f10a 0a01 	add.w	sl, sl, #1
 8010d10:	9304      	str	r3, [sp, #16]
 8010d12:	9307      	str	r3, [sp, #28]
 8010d14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d18:	931a      	str	r3, [sp, #104]	; 0x68
 8010d1a:	4654      	mov	r4, sl
 8010d1c:	2205      	movs	r2, #5
 8010d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d22:	4858      	ldr	r0, [pc, #352]	; (8010e84 <_vfiprintf_r+0x24c>)
 8010d24:	f7ef fae4 	bl	80002f0 <memchr>
 8010d28:	9a04      	ldr	r2, [sp, #16]
 8010d2a:	b9d8      	cbnz	r0, 8010d64 <_vfiprintf_r+0x12c>
 8010d2c:	06d1      	lsls	r1, r2, #27
 8010d2e:	bf44      	itt	mi
 8010d30:	2320      	movmi	r3, #32
 8010d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d36:	0713      	lsls	r3, r2, #28
 8010d38:	bf44      	itt	mi
 8010d3a:	232b      	movmi	r3, #43	; 0x2b
 8010d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d40:	f89a 3000 	ldrb.w	r3, [sl]
 8010d44:	2b2a      	cmp	r3, #42	; 0x2a
 8010d46:	d015      	beq.n	8010d74 <_vfiprintf_r+0x13c>
 8010d48:	9a07      	ldr	r2, [sp, #28]
 8010d4a:	4654      	mov	r4, sl
 8010d4c:	2000      	movs	r0, #0
 8010d4e:	f04f 0c0a 	mov.w	ip, #10
 8010d52:	4621      	mov	r1, r4
 8010d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d58:	3b30      	subs	r3, #48	; 0x30
 8010d5a:	2b09      	cmp	r3, #9
 8010d5c:	d94e      	bls.n	8010dfc <_vfiprintf_r+0x1c4>
 8010d5e:	b1b0      	cbz	r0, 8010d8e <_vfiprintf_r+0x156>
 8010d60:	9207      	str	r2, [sp, #28]
 8010d62:	e014      	b.n	8010d8e <_vfiprintf_r+0x156>
 8010d64:	eba0 0308 	sub.w	r3, r0, r8
 8010d68:	fa09 f303 	lsl.w	r3, r9, r3
 8010d6c:	4313      	orrs	r3, r2
 8010d6e:	9304      	str	r3, [sp, #16]
 8010d70:	46a2      	mov	sl, r4
 8010d72:	e7d2      	b.n	8010d1a <_vfiprintf_r+0xe2>
 8010d74:	9b03      	ldr	r3, [sp, #12]
 8010d76:	1d19      	adds	r1, r3, #4
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	9103      	str	r1, [sp, #12]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	bfbb      	ittet	lt
 8010d80:	425b      	neglt	r3, r3
 8010d82:	f042 0202 	orrlt.w	r2, r2, #2
 8010d86:	9307      	strge	r3, [sp, #28]
 8010d88:	9307      	strlt	r3, [sp, #28]
 8010d8a:	bfb8      	it	lt
 8010d8c:	9204      	strlt	r2, [sp, #16]
 8010d8e:	7823      	ldrb	r3, [r4, #0]
 8010d90:	2b2e      	cmp	r3, #46	; 0x2e
 8010d92:	d10c      	bne.n	8010dae <_vfiprintf_r+0x176>
 8010d94:	7863      	ldrb	r3, [r4, #1]
 8010d96:	2b2a      	cmp	r3, #42	; 0x2a
 8010d98:	d135      	bne.n	8010e06 <_vfiprintf_r+0x1ce>
 8010d9a:	9b03      	ldr	r3, [sp, #12]
 8010d9c:	1d1a      	adds	r2, r3, #4
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	9203      	str	r2, [sp, #12]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	bfb8      	it	lt
 8010da6:	f04f 33ff 	movlt.w	r3, #4294967295
 8010daa:	3402      	adds	r4, #2
 8010dac:	9305      	str	r3, [sp, #20]
 8010dae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010e94 <_vfiprintf_r+0x25c>
 8010db2:	7821      	ldrb	r1, [r4, #0]
 8010db4:	2203      	movs	r2, #3
 8010db6:	4650      	mov	r0, sl
 8010db8:	f7ef fa9a 	bl	80002f0 <memchr>
 8010dbc:	b140      	cbz	r0, 8010dd0 <_vfiprintf_r+0x198>
 8010dbe:	2340      	movs	r3, #64	; 0x40
 8010dc0:	eba0 000a 	sub.w	r0, r0, sl
 8010dc4:	fa03 f000 	lsl.w	r0, r3, r0
 8010dc8:	9b04      	ldr	r3, [sp, #16]
 8010dca:	4303      	orrs	r3, r0
 8010dcc:	3401      	adds	r4, #1
 8010dce:	9304      	str	r3, [sp, #16]
 8010dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dd4:	482c      	ldr	r0, [pc, #176]	; (8010e88 <_vfiprintf_r+0x250>)
 8010dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010dda:	2206      	movs	r2, #6
 8010ddc:	f7ef fa88 	bl	80002f0 <memchr>
 8010de0:	2800      	cmp	r0, #0
 8010de2:	d03f      	beq.n	8010e64 <_vfiprintf_r+0x22c>
 8010de4:	4b29      	ldr	r3, [pc, #164]	; (8010e8c <_vfiprintf_r+0x254>)
 8010de6:	bb1b      	cbnz	r3, 8010e30 <_vfiprintf_r+0x1f8>
 8010de8:	9b03      	ldr	r3, [sp, #12]
 8010dea:	3307      	adds	r3, #7
 8010dec:	f023 0307 	bic.w	r3, r3, #7
 8010df0:	3308      	adds	r3, #8
 8010df2:	9303      	str	r3, [sp, #12]
 8010df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010df6:	443b      	add	r3, r7
 8010df8:	9309      	str	r3, [sp, #36]	; 0x24
 8010dfa:	e767      	b.n	8010ccc <_vfiprintf_r+0x94>
 8010dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e00:	460c      	mov	r4, r1
 8010e02:	2001      	movs	r0, #1
 8010e04:	e7a5      	b.n	8010d52 <_vfiprintf_r+0x11a>
 8010e06:	2300      	movs	r3, #0
 8010e08:	3401      	adds	r4, #1
 8010e0a:	9305      	str	r3, [sp, #20]
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	f04f 0c0a 	mov.w	ip, #10
 8010e12:	4620      	mov	r0, r4
 8010e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e18:	3a30      	subs	r2, #48	; 0x30
 8010e1a:	2a09      	cmp	r2, #9
 8010e1c:	d903      	bls.n	8010e26 <_vfiprintf_r+0x1ee>
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d0c5      	beq.n	8010dae <_vfiprintf_r+0x176>
 8010e22:	9105      	str	r1, [sp, #20]
 8010e24:	e7c3      	b.n	8010dae <_vfiprintf_r+0x176>
 8010e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	e7f0      	b.n	8010e12 <_vfiprintf_r+0x1da>
 8010e30:	ab03      	add	r3, sp, #12
 8010e32:	9300      	str	r3, [sp, #0]
 8010e34:	462a      	mov	r2, r5
 8010e36:	4b16      	ldr	r3, [pc, #88]	; (8010e90 <_vfiprintf_r+0x258>)
 8010e38:	a904      	add	r1, sp, #16
 8010e3a:	4630      	mov	r0, r6
 8010e3c:	f3af 8000 	nop.w
 8010e40:	4607      	mov	r7, r0
 8010e42:	1c78      	adds	r0, r7, #1
 8010e44:	d1d6      	bne.n	8010df4 <_vfiprintf_r+0x1bc>
 8010e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e48:	07d9      	lsls	r1, r3, #31
 8010e4a:	d405      	bmi.n	8010e58 <_vfiprintf_r+0x220>
 8010e4c:	89ab      	ldrh	r3, [r5, #12]
 8010e4e:	059a      	lsls	r2, r3, #22
 8010e50:	d402      	bmi.n	8010e58 <_vfiprintf_r+0x220>
 8010e52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e54:	f000 fc35 	bl	80116c2 <__retarget_lock_release_recursive>
 8010e58:	89ab      	ldrh	r3, [r5, #12]
 8010e5a:	065b      	lsls	r3, r3, #25
 8010e5c:	f53f af12 	bmi.w	8010c84 <_vfiprintf_r+0x4c>
 8010e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e62:	e711      	b.n	8010c88 <_vfiprintf_r+0x50>
 8010e64:	ab03      	add	r3, sp, #12
 8010e66:	9300      	str	r3, [sp, #0]
 8010e68:	462a      	mov	r2, r5
 8010e6a:	4b09      	ldr	r3, [pc, #36]	; (8010e90 <_vfiprintf_r+0x258>)
 8010e6c:	a904      	add	r1, sp, #16
 8010e6e:	4630      	mov	r0, r6
 8010e70:	f000 f880 	bl	8010f74 <_printf_i>
 8010e74:	e7e4      	b.n	8010e40 <_vfiprintf_r+0x208>
 8010e76:	bf00      	nop
 8010e78:	08012774 	.word	0x08012774
 8010e7c:	08012794 	.word	0x08012794
 8010e80:	08012754 	.word	0x08012754
 8010e84:	08012721 	.word	0x08012721
 8010e88:	0801272b 	.word	0x0801272b
 8010e8c:	00000000 	.word	0x00000000
 8010e90:	08010c13 	.word	0x08010c13
 8010e94:	08012727 	.word	0x08012727

08010e98 <_printf_common>:
 8010e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e9c:	4616      	mov	r6, r2
 8010e9e:	4699      	mov	r9, r3
 8010ea0:	688a      	ldr	r2, [r1, #8]
 8010ea2:	690b      	ldr	r3, [r1, #16]
 8010ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	bfb8      	it	lt
 8010eac:	4613      	movlt	r3, r2
 8010eae:	6033      	str	r3, [r6, #0]
 8010eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010eb4:	4607      	mov	r7, r0
 8010eb6:	460c      	mov	r4, r1
 8010eb8:	b10a      	cbz	r2, 8010ebe <_printf_common+0x26>
 8010eba:	3301      	adds	r3, #1
 8010ebc:	6033      	str	r3, [r6, #0]
 8010ebe:	6823      	ldr	r3, [r4, #0]
 8010ec0:	0699      	lsls	r1, r3, #26
 8010ec2:	bf42      	ittt	mi
 8010ec4:	6833      	ldrmi	r3, [r6, #0]
 8010ec6:	3302      	addmi	r3, #2
 8010ec8:	6033      	strmi	r3, [r6, #0]
 8010eca:	6825      	ldr	r5, [r4, #0]
 8010ecc:	f015 0506 	ands.w	r5, r5, #6
 8010ed0:	d106      	bne.n	8010ee0 <_printf_common+0x48>
 8010ed2:	f104 0a19 	add.w	sl, r4, #25
 8010ed6:	68e3      	ldr	r3, [r4, #12]
 8010ed8:	6832      	ldr	r2, [r6, #0]
 8010eda:	1a9b      	subs	r3, r3, r2
 8010edc:	42ab      	cmp	r3, r5
 8010ede:	dc26      	bgt.n	8010f2e <_printf_common+0x96>
 8010ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010ee4:	1e13      	subs	r3, r2, #0
 8010ee6:	6822      	ldr	r2, [r4, #0]
 8010ee8:	bf18      	it	ne
 8010eea:	2301      	movne	r3, #1
 8010eec:	0692      	lsls	r2, r2, #26
 8010eee:	d42b      	bmi.n	8010f48 <_printf_common+0xb0>
 8010ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ef4:	4649      	mov	r1, r9
 8010ef6:	4638      	mov	r0, r7
 8010ef8:	47c0      	blx	r8
 8010efa:	3001      	adds	r0, #1
 8010efc:	d01e      	beq.n	8010f3c <_printf_common+0xa4>
 8010efe:	6823      	ldr	r3, [r4, #0]
 8010f00:	68e5      	ldr	r5, [r4, #12]
 8010f02:	6832      	ldr	r2, [r6, #0]
 8010f04:	f003 0306 	and.w	r3, r3, #6
 8010f08:	2b04      	cmp	r3, #4
 8010f0a:	bf08      	it	eq
 8010f0c:	1aad      	subeq	r5, r5, r2
 8010f0e:	68a3      	ldr	r3, [r4, #8]
 8010f10:	6922      	ldr	r2, [r4, #16]
 8010f12:	bf0c      	ite	eq
 8010f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f18:	2500      	movne	r5, #0
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	bfc4      	itt	gt
 8010f1e:	1a9b      	subgt	r3, r3, r2
 8010f20:	18ed      	addgt	r5, r5, r3
 8010f22:	2600      	movs	r6, #0
 8010f24:	341a      	adds	r4, #26
 8010f26:	42b5      	cmp	r5, r6
 8010f28:	d11a      	bne.n	8010f60 <_printf_common+0xc8>
 8010f2a:	2000      	movs	r0, #0
 8010f2c:	e008      	b.n	8010f40 <_printf_common+0xa8>
 8010f2e:	2301      	movs	r3, #1
 8010f30:	4652      	mov	r2, sl
 8010f32:	4649      	mov	r1, r9
 8010f34:	4638      	mov	r0, r7
 8010f36:	47c0      	blx	r8
 8010f38:	3001      	adds	r0, #1
 8010f3a:	d103      	bne.n	8010f44 <_printf_common+0xac>
 8010f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f44:	3501      	adds	r5, #1
 8010f46:	e7c6      	b.n	8010ed6 <_printf_common+0x3e>
 8010f48:	18e1      	adds	r1, r4, r3
 8010f4a:	1c5a      	adds	r2, r3, #1
 8010f4c:	2030      	movs	r0, #48	; 0x30
 8010f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f52:	4422      	add	r2, r4
 8010f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f5c:	3302      	adds	r3, #2
 8010f5e:	e7c7      	b.n	8010ef0 <_printf_common+0x58>
 8010f60:	2301      	movs	r3, #1
 8010f62:	4622      	mov	r2, r4
 8010f64:	4649      	mov	r1, r9
 8010f66:	4638      	mov	r0, r7
 8010f68:	47c0      	blx	r8
 8010f6a:	3001      	adds	r0, #1
 8010f6c:	d0e6      	beq.n	8010f3c <_printf_common+0xa4>
 8010f6e:	3601      	adds	r6, #1
 8010f70:	e7d9      	b.n	8010f26 <_printf_common+0x8e>
	...

08010f74 <_printf_i>:
 8010f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f78:	7e0f      	ldrb	r7, [r1, #24]
 8010f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f7c:	2f78      	cmp	r7, #120	; 0x78
 8010f7e:	4691      	mov	r9, r2
 8010f80:	4680      	mov	r8, r0
 8010f82:	460c      	mov	r4, r1
 8010f84:	469a      	mov	sl, r3
 8010f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010f8a:	d807      	bhi.n	8010f9c <_printf_i+0x28>
 8010f8c:	2f62      	cmp	r7, #98	; 0x62
 8010f8e:	d80a      	bhi.n	8010fa6 <_printf_i+0x32>
 8010f90:	2f00      	cmp	r7, #0
 8010f92:	f000 80d8 	beq.w	8011146 <_printf_i+0x1d2>
 8010f96:	2f58      	cmp	r7, #88	; 0x58
 8010f98:	f000 80a3 	beq.w	80110e2 <_printf_i+0x16e>
 8010f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010fa4:	e03a      	b.n	801101c <_printf_i+0xa8>
 8010fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010faa:	2b15      	cmp	r3, #21
 8010fac:	d8f6      	bhi.n	8010f9c <_printf_i+0x28>
 8010fae:	a101      	add	r1, pc, #4	; (adr r1, 8010fb4 <_printf_i+0x40>)
 8010fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010fb4:	0801100d 	.word	0x0801100d
 8010fb8:	08011021 	.word	0x08011021
 8010fbc:	08010f9d 	.word	0x08010f9d
 8010fc0:	08010f9d 	.word	0x08010f9d
 8010fc4:	08010f9d 	.word	0x08010f9d
 8010fc8:	08010f9d 	.word	0x08010f9d
 8010fcc:	08011021 	.word	0x08011021
 8010fd0:	08010f9d 	.word	0x08010f9d
 8010fd4:	08010f9d 	.word	0x08010f9d
 8010fd8:	08010f9d 	.word	0x08010f9d
 8010fdc:	08010f9d 	.word	0x08010f9d
 8010fe0:	0801112d 	.word	0x0801112d
 8010fe4:	08011051 	.word	0x08011051
 8010fe8:	0801110f 	.word	0x0801110f
 8010fec:	08010f9d 	.word	0x08010f9d
 8010ff0:	08010f9d 	.word	0x08010f9d
 8010ff4:	0801114f 	.word	0x0801114f
 8010ff8:	08010f9d 	.word	0x08010f9d
 8010ffc:	08011051 	.word	0x08011051
 8011000:	08010f9d 	.word	0x08010f9d
 8011004:	08010f9d 	.word	0x08010f9d
 8011008:	08011117 	.word	0x08011117
 801100c:	682b      	ldr	r3, [r5, #0]
 801100e:	1d1a      	adds	r2, r3, #4
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	602a      	str	r2, [r5, #0]
 8011014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801101c:	2301      	movs	r3, #1
 801101e:	e0a3      	b.n	8011168 <_printf_i+0x1f4>
 8011020:	6820      	ldr	r0, [r4, #0]
 8011022:	6829      	ldr	r1, [r5, #0]
 8011024:	0606      	lsls	r6, r0, #24
 8011026:	f101 0304 	add.w	r3, r1, #4
 801102a:	d50a      	bpl.n	8011042 <_printf_i+0xce>
 801102c:	680e      	ldr	r6, [r1, #0]
 801102e:	602b      	str	r3, [r5, #0]
 8011030:	2e00      	cmp	r6, #0
 8011032:	da03      	bge.n	801103c <_printf_i+0xc8>
 8011034:	232d      	movs	r3, #45	; 0x2d
 8011036:	4276      	negs	r6, r6
 8011038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801103c:	485e      	ldr	r0, [pc, #376]	; (80111b8 <_printf_i+0x244>)
 801103e:	230a      	movs	r3, #10
 8011040:	e019      	b.n	8011076 <_printf_i+0x102>
 8011042:	680e      	ldr	r6, [r1, #0]
 8011044:	602b      	str	r3, [r5, #0]
 8011046:	f010 0f40 	tst.w	r0, #64	; 0x40
 801104a:	bf18      	it	ne
 801104c:	b236      	sxthne	r6, r6
 801104e:	e7ef      	b.n	8011030 <_printf_i+0xbc>
 8011050:	682b      	ldr	r3, [r5, #0]
 8011052:	6820      	ldr	r0, [r4, #0]
 8011054:	1d19      	adds	r1, r3, #4
 8011056:	6029      	str	r1, [r5, #0]
 8011058:	0601      	lsls	r1, r0, #24
 801105a:	d501      	bpl.n	8011060 <_printf_i+0xec>
 801105c:	681e      	ldr	r6, [r3, #0]
 801105e:	e002      	b.n	8011066 <_printf_i+0xf2>
 8011060:	0646      	lsls	r6, r0, #25
 8011062:	d5fb      	bpl.n	801105c <_printf_i+0xe8>
 8011064:	881e      	ldrh	r6, [r3, #0]
 8011066:	4854      	ldr	r0, [pc, #336]	; (80111b8 <_printf_i+0x244>)
 8011068:	2f6f      	cmp	r7, #111	; 0x6f
 801106a:	bf0c      	ite	eq
 801106c:	2308      	moveq	r3, #8
 801106e:	230a      	movne	r3, #10
 8011070:	2100      	movs	r1, #0
 8011072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011076:	6865      	ldr	r5, [r4, #4]
 8011078:	60a5      	str	r5, [r4, #8]
 801107a:	2d00      	cmp	r5, #0
 801107c:	bfa2      	ittt	ge
 801107e:	6821      	ldrge	r1, [r4, #0]
 8011080:	f021 0104 	bicge.w	r1, r1, #4
 8011084:	6021      	strge	r1, [r4, #0]
 8011086:	b90e      	cbnz	r6, 801108c <_printf_i+0x118>
 8011088:	2d00      	cmp	r5, #0
 801108a:	d04d      	beq.n	8011128 <_printf_i+0x1b4>
 801108c:	4615      	mov	r5, r2
 801108e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011092:	fb03 6711 	mls	r7, r3, r1, r6
 8011096:	5dc7      	ldrb	r7, [r0, r7]
 8011098:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801109c:	4637      	mov	r7, r6
 801109e:	42bb      	cmp	r3, r7
 80110a0:	460e      	mov	r6, r1
 80110a2:	d9f4      	bls.n	801108e <_printf_i+0x11a>
 80110a4:	2b08      	cmp	r3, #8
 80110a6:	d10b      	bne.n	80110c0 <_printf_i+0x14c>
 80110a8:	6823      	ldr	r3, [r4, #0]
 80110aa:	07de      	lsls	r6, r3, #31
 80110ac:	d508      	bpl.n	80110c0 <_printf_i+0x14c>
 80110ae:	6923      	ldr	r3, [r4, #16]
 80110b0:	6861      	ldr	r1, [r4, #4]
 80110b2:	4299      	cmp	r1, r3
 80110b4:	bfde      	ittt	le
 80110b6:	2330      	movle	r3, #48	; 0x30
 80110b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80110bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80110c0:	1b52      	subs	r2, r2, r5
 80110c2:	6122      	str	r2, [r4, #16]
 80110c4:	f8cd a000 	str.w	sl, [sp]
 80110c8:	464b      	mov	r3, r9
 80110ca:	aa03      	add	r2, sp, #12
 80110cc:	4621      	mov	r1, r4
 80110ce:	4640      	mov	r0, r8
 80110d0:	f7ff fee2 	bl	8010e98 <_printf_common>
 80110d4:	3001      	adds	r0, #1
 80110d6:	d14c      	bne.n	8011172 <_printf_i+0x1fe>
 80110d8:	f04f 30ff 	mov.w	r0, #4294967295
 80110dc:	b004      	add	sp, #16
 80110de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110e2:	4835      	ldr	r0, [pc, #212]	; (80111b8 <_printf_i+0x244>)
 80110e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80110e8:	6829      	ldr	r1, [r5, #0]
 80110ea:	6823      	ldr	r3, [r4, #0]
 80110ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80110f0:	6029      	str	r1, [r5, #0]
 80110f2:	061d      	lsls	r5, r3, #24
 80110f4:	d514      	bpl.n	8011120 <_printf_i+0x1ac>
 80110f6:	07df      	lsls	r7, r3, #31
 80110f8:	bf44      	itt	mi
 80110fa:	f043 0320 	orrmi.w	r3, r3, #32
 80110fe:	6023      	strmi	r3, [r4, #0]
 8011100:	b91e      	cbnz	r6, 801110a <_printf_i+0x196>
 8011102:	6823      	ldr	r3, [r4, #0]
 8011104:	f023 0320 	bic.w	r3, r3, #32
 8011108:	6023      	str	r3, [r4, #0]
 801110a:	2310      	movs	r3, #16
 801110c:	e7b0      	b.n	8011070 <_printf_i+0xfc>
 801110e:	6823      	ldr	r3, [r4, #0]
 8011110:	f043 0320 	orr.w	r3, r3, #32
 8011114:	6023      	str	r3, [r4, #0]
 8011116:	2378      	movs	r3, #120	; 0x78
 8011118:	4828      	ldr	r0, [pc, #160]	; (80111bc <_printf_i+0x248>)
 801111a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801111e:	e7e3      	b.n	80110e8 <_printf_i+0x174>
 8011120:	0659      	lsls	r1, r3, #25
 8011122:	bf48      	it	mi
 8011124:	b2b6      	uxthmi	r6, r6
 8011126:	e7e6      	b.n	80110f6 <_printf_i+0x182>
 8011128:	4615      	mov	r5, r2
 801112a:	e7bb      	b.n	80110a4 <_printf_i+0x130>
 801112c:	682b      	ldr	r3, [r5, #0]
 801112e:	6826      	ldr	r6, [r4, #0]
 8011130:	6961      	ldr	r1, [r4, #20]
 8011132:	1d18      	adds	r0, r3, #4
 8011134:	6028      	str	r0, [r5, #0]
 8011136:	0635      	lsls	r5, r6, #24
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	d501      	bpl.n	8011140 <_printf_i+0x1cc>
 801113c:	6019      	str	r1, [r3, #0]
 801113e:	e002      	b.n	8011146 <_printf_i+0x1d2>
 8011140:	0670      	lsls	r0, r6, #25
 8011142:	d5fb      	bpl.n	801113c <_printf_i+0x1c8>
 8011144:	8019      	strh	r1, [r3, #0]
 8011146:	2300      	movs	r3, #0
 8011148:	6123      	str	r3, [r4, #16]
 801114a:	4615      	mov	r5, r2
 801114c:	e7ba      	b.n	80110c4 <_printf_i+0x150>
 801114e:	682b      	ldr	r3, [r5, #0]
 8011150:	1d1a      	adds	r2, r3, #4
 8011152:	602a      	str	r2, [r5, #0]
 8011154:	681d      	ldr	r5, [r3, #0]
 8011156:	6862      	ldr	r2, [r4, #4]
 8011158:	2100      	movs	r1, #0
 801115a:	4628      	mov	r0, r5
 801115c:	f7ef f8c8 	bl	80002f0 <memchr>
 8011160:	b108      	cbz	r0, 8011166 <_printf_i+0x1f2>
 8011162:	1b40      	subs	r0, r0, r5
 8011164:	6060      	str	r0, [r4, #4]
 8011166:	6863      	ldr	r3, [r4, #4]
 8011168:	6123      	str	r3, [r4, #16]
 801116a:	2300      	movs	r3, #0
 801116c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011170:	e7a8      	b.n	80110c4 <_printf_i+0x150>
 8011172:	6923      	ldr	r3, [r4, #16]
 8011174:	462a      	mov	r2, r5
 8011176:	4649      	mov	r1, r9
 8011178:	4640      	mov	r0, r8
 801117a:	47d0      	blx	sl
 801117c:	3001      	adds	r0, #1
 801117e:	d0ab      	beq.n	80110d8 <_printf_i+0x164>
 8011180:	6823      	ldr	r3, [r4, #0]
 8011182:	079b      	lsls	r3, r3, #30
 8011184:	d413      	bmi.n	80111ae <_printf_i+0x23a>
 8011186:	68e0      	ldr	r0, [r4, #12]
 8011188:	9b03      	ldr	r3, [sp, #12]
 801118a:	4298      	cmp	r0, r3
 801118c:	bfb8      	it	lt
 801118e:	4618      	movlt	r0, r3
 8011190:	e7a4      	b.n	80110dc <_printf_i+0x168>
 8011192:	2301      	movs	r3, #1
 8011194:	4632      	mov	r2, r6
 8011196:	4649      	mov	r1, r9
 8011198:	4640      	mov	r0, r8
 801119a:	47d0      	blx	sl
 801119c:	3001      	adds	r0, #1
 801119e:	d09b      	beq.n	80110d8 <_printf_i+0x164>
 80111a0:	3501      	adds	r5, #1
 80111a2:	68e3      	ldr	r3, [r4, #12]
 80111a4:	9903      	ldr	r1, [sp, #12]
 80111a6:	1a5b      	subs	r3, r3, r1
 80111a8:	42ab      	cmp	r3, r5
 80111aa:	dcf2      	bgt.n	8011192 <_printf_i+0x21e>
 80111ac:	e7eb      	b.n	8011186 <_printf_i+0x212>
 80111ae:	2500      	movs	r5, #0
 80111b0:	f104 0619 	add.w	r6, r4, #25
 80111b4:	e7f5      	b.n	80111a2 <_printf_i+0x22e>
 80111b6:	bf00      	nop
 80111b8:	08012732 	.word	0x08012732
 80111bc:	08012743 	.word	0x08012743

080111c0 <__swbuf_r>:
 80111c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c2:	460e      	mov	r6, r1
 80111c4:	4614      	mov	r4, r2
 80111c6:	4605      	mov	r5, r0
 80111c8:	b118      	cbz	r0, 80111d2 <__swbuf_r+0x12>
 80111ca:	6983      	ldr	r3, [r0, #24]
 80111cc:	b90b      	cbnz	r3, 80111d2 <__swbuf_r+0x12>
 80111ce:	f000 f9d9 	bl	8011584 <__sinit>
 80111d2:	4b21      	ldr	r3, [pc, #132]	; (8011258 <__swbuf_r+0x98>)
 80111d4:	429c      	cmp	r4, r3
 80111d6:	d12b      	bne.n	8011230 <__swbuf_r+0x70>
 80111d8:	686c      	ldr	r4, [r5, #4]
 80111da:	69a3      	ldr	r3, [r4, #24]
 80111dc:	60a3      	str	r3, [r4, #8]
 80111de:	89a3      	ldrh	r3, [r4, #12]
 80111e0:	071a      	lsls	r2, r3, #28
 80111e2:	d52f      	bpl.n	8011244 <__swbuf_r+0x84>
 80111e4:	6923      	ldr	r3, [r4, #16]
 80111e6:	b36b      	cbz	r3, 8011244 <__swbuf_r+0x84>
 80111e8:	6923      	ldr	r3, [r4, #16]
 80111ea:	6820      	ldr	r0, [r4, #0]
 80111ec:	1ac0      	subs	r0, r0, r3
 80111ee:	6963      	ldr	r3, [r4, #20]
 80111f0:	b2f6      	uxtb	r6, r6
 80111f2:	4283      	cmp	r3, r0
 80111f4:	4637      	mov	r7, r6
 80111f6:	dc04      	bgt.n	8011202 <__swbuf_r+0x42>
 80111f8:	4621      	mov	r1, r4
 80111fa:	4628      	mov	r0, r5
 80111fc:	f000 f92e 	bl	801145c <_fflush_r>
 8011200:	bb30      	cbnz	r0, 8011250 <__swbuf_r+0x90>
 8011202:	68a3      	ldr	r3, [r4, #8]
 8011204:	3b01      	subs	r3, #1
 8011206:	60a3      	str	r3, [r4, #8]
 8011208:	6823      	ldr	r3, [r4, #0]
 801120a:	1c5a      	adds	r2, r3, #1
 801120c:	6022      	str	r2, [r4, #0]
 801120e:	701e      	strb	r6, [r3, #0]
 8011210:	6963      	ldr	r3, [r4, #20]
 8011212:	3001      	adds	r0, #1
 8011214:	4283      	cmp	r3, r0
 8011216:	d004      	beq.n	8011222 <__swbuf_r+0x62>
 8011218:	89a3      	ldrh	r3, [r4, #12]
 801121a:	07db      	lsls	r3, r3, #31
 801121c:	d506      	bpl.n	801122c <__swbuf_r+0x6c>
 801121e:	2e0a      	cmp	r6, #10
 8011220:	d104      	bne.n	801122c <__swbuf_r+0x6c>
 8011222:	4621      	mov	r1, r4
 8011224:	4628      	mov	r0, r5
 8011226:	f000 f919 	bl	801145c <_fflush_r>
 801122a:	b988      	cbnz	r0, 8011250 <__swbuf_r+0x90>
 801122c:	4638      	mov	r0, r7
 801122e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011230:	4b0a      	ldr	r3, [pc, #40]	; (801125c <__swbuf_r+0x9c>)
 8011232:	429c      	cmp	r4, r3
 8011234:	d101      	bne.n	801123a <__swbuf_r+0x7a>
 8011236:	68ac      	ldr	r4, [r5, #8]
 8011238:	e7cf      	b.n	80111da <__swbuf_r+0x1a>
 801123a:	4b09      	ldr	r3, [pc, #36]	; (8011260 <__swbuf_r+0xa0>)
 801123c:	429c      	cmp	r4, r3
 801123e:	bf08      	it	eq
 8011240:	68ec      	ldreq	r4, [r5, #12]
 8011242:	e7ca      	b.n	80111da <__swbuf_r+0x1a>
 8011244:	4621      	mov	r1, r4
 8011246:	4628      	mov	r0, r5
 8011248:	f000 f80c 	bl	8011264 <__swsetup_r>
 801124c:	2800      	cmp	r0, #0
 801124e:	d0cb      	beq.n	80111e8 <__swbuf_r+0x28>
 8011250:	f04f 37ff 	mov.w	r7, #4294967295
 8011254:	e7ea      	b.n	801122c <__swbuf_r+0x6c>
 8011256:	bf00      	nop
 8011258:	08012774 	.word	0x08012774
 801125c:	08012794 	.word	0x08012794
 8011260:	08012754 	.word	0x08012754

08011264 <__swsetup_r>:
 8011264:	4b32      	ldr	r3, [pc, #200]	; (8011330 <__swsetup_r+0xcc>)
 8011266:	b570      	push	{r4, r5, r6, lr}
 8011268:	681d      	ldr	r5, [r3, #0]
 801126a:	4606      	mov	r6, r0
 801126c:	460c      	mov	r4, r1
 801126e:	b125      	cbz	r5, 801127a <__swsetup_r+0x16>
 8011270:	69ab      	ldr	r3, [r5, #24]
 8011272:	b913      	cbnz	r3, 801127a <__swsetup_r+0x16>
 8011274:	4628      	mov	r0, r5
 8011276:	f000 f985 	bl	8011584 <__sinit>
 801127a:	4b2e      	ldr	r3, [pc, #184]	; (8011334 <__swsetup_r+0xd0>)
 801127c:	429c      	cmp	r4, r3
 801127e:	d10f      	bne.n	80112a0 <__swsetup_r+0x3c>
 8011280:	686c      	ldr	r4, [r5, #4]
 8011282:	89a3      	ldrh	r3, [r4, #12]
 8011284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011288:	0719      	lsls	r1, r3, #28
 801128a:	d42c      	bmi.n	80112e6 <__swsetup_r+0x82>
 801128c:	06dd      	lsls	r5, r3, #27
 801128e:	d411      	bmi.n	80112b4 <__swsetup_r+0x50>
 8011290:	2309      	movs	r3, #9
 8011292:	6033      	str	r3, [r6, #0]
 8011294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011298:	81a3      	strh	r3, [r4, #12]
 801129a:	f04f 30ff 	mov.w	r0, #4294967295
 801129e:	e03e      	b.n	801131e <__swsetup_r+0xba>
 80112a0:	4b25      	ldr	r3, [pc, #148]	; (8011338 <__swsetup_r+0xd4>)
 80112a2:	429c      	cmp	r4, r3
 80112a4:	d101      	bne.n	80112aa <__swsetup_r+0x46>
 80112a6:	68ac      	ldr	r4, [r5, #8]
 80112a8:	e7eb      	b.n	8011282 <__swsetup_r+0x1e>
 80112aa:	4b24      	ldr	r3, [pc, #144]	; (801133c <__swsetup_r+0xd8>)
 80112ac:	429c      	cmp	r4, r3
 80112ae:	bf08      	it	eq
 80112b0:	68ec      	ldreq	r4, [r5, #12]
 80112b2:	e7e6      	b.n	8011282 <__swsetup_r+0x1e>
 80112b4:	0758      	lsls	r0, r3, #29
 80112b6:	d512      	bpl.n	80112de <__swsetup_r+0x7a>
 80112b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112ba:	b141      	cbz	r1, 80112ce <__swsetup_r+0x6a>
 80112bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112c0:	4299      	cmp	r1, r3
 80112c2:	d002      	beq.n	80112ca <__swsetup_r+0x66>
 80112c4:	4630      	mov	r0, r6
 80112c6:	f7ff fc41 	bl	8010b4c <_free_r>
 80112ca:	2300      	movs	r3, #0
 80112cc:	6363      	str	r3, [r4, #52]	; 0x34
 80112ce:	89a3      	ldrh	r3, [r4, #12]
 80112d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80112d4:	81a3      	strh	r3, [r4, #12]
 80112d6:	2300      	movs	r3, #0
 80112d8:	6063      	str	r3, [r4, #4]
 80112da:	6923      	ldr	r3, [r4, #16]
 80112dc:	6023      	str	r3, [r4, #0]
 80112de:	89a3      	ldrh	r3, [r4, #12]
 80112e0:	f043 0308 	orr.w	r3, r3, #8
 80112e4:	81a3      	strh	r3, [r4, #12]
 80112e6:	6923      	ldr	r3, [r4, #16]
 80112e8:	b94b      	cbnz	r3, 80112fe <__swsetup_r+0x9a>
 80112ea:	89a3      	ldrh	r3, [r4, #12]
 80112ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80112f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112f4:	d003      	beq.n	80112fe <__swsetup_r+0x9a>
 80112f6:	4621      	mov	r1, r4
 80112f8:	4630      	mov	r0, r6
 80112fa:	f000 fa09 	bl	8011710 <__smakebuf_r>
 80112fe:	89a0      	ldrh	r0, [r4, #12]
 8011300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011304:	f010 0301 	ands.w	r3, r0, #1
 8011308:	d00a      	beq.n	8011320 <__swsetup_r+0xbc>
 801130a:	2300      	movs	r3, #0
 801130c:	60a3      	str	r3, [r4, #8]
 801130e:	6963      	ldr	r3, [r4, #20]
 8011310:	425b      	negs	r3, r3
 8011312:	61a3      	str	r3, [r4, #24]
 8011314:	6923      	ldr	r3, [r4, #16]
 8011316:	b943      	cbnz	r3, 801132a <__swsetup_r+0xc6>
 8011318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801131c:	d1ba      	bne.n	8011294 <__swsetup_r+0x30>
 801131e:	bd70      	pop	{r4, r5, r6, pc}
 8011320:	0781      	lsls	r1, r0, #30
 8011322:	bf58      	it	pl
 8011324:	6963      	ldrpl	r3, [r4, #20]
 8011326:	60a3      	str	r3, [r4, #8]
 8011328:	e7f4      	b.n	8011314 <__swsetup_r+0xb0>
 801132a:	2000      	movs	r0, #0
 801132c:	e7f7      	b.n	801131e <__swsetup_r+0xba>
 801132e:	bf00      	nop
 8011330:	240000b0 	.word	0x240000b0
 8011334:	08012774 	.word	0x08012774
 8011338:	08012794 	.word	0x08012794
 801133c:	08012754 	.word	0x08012754

08011340 <abort>:
 8011340:	b508      	push	{r3, lr}
 8011342:	2006      	movs	r0, #6
 8011344:	f000 fa4c 	bl	80117e0 <raise>
 8011348:	2001      	movs	r0, #1
 801134a:	f7f2 fd5f 	bl	8003e0c <_exit>
	...

08011350 <__sflush_r>:
 8011350:	898a      	ldrh	r2, [r1, #12]
 8011352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011356:	4605      	mov	r5, r0
 8011358:	0710      	lsls	r0, r2, #28
 801135a:	460c      	mov	r4, r1
 801135c:	d458      	bmi.n	8011410 <__sflush_r+0xc0>
 801135e:	684b      	ldr	r3, [r1, #4]
 8011360:	2b00      	cmp	r3, #0
 8011362:	dc05      	bgt.n	8011370 <__sflush_r+0x20>
 8011364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011366:	2b00      	cmp	r3, #0
 8011368:	dc02      	bgt.n	8011370 <__sflush_r+0x20>
 801136a:	2000      	movs	r0, #0
 801136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011372:	2e00      	cmp	r6, #0
 8011374:	d0f9      	beq.n	801136a <__sflush_r+0x1a>
 8011376:	2300      	movs	r3, #0
 8011378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801137c:	682f      	ldr	r7, [r5, #0]
 801137e:	602b      	str	r3, [r5, #0]
 8011380:	d032      	beq.n	80113e8 <__sflush_r+0x98>
 8011382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011384:	89a3      	ldrh	r3, [r4, #12]
 8011386:	075a      	lsls	r2, r3, #29
 8011388:	d505      	bpl.n	8011396 <__sflush_r+0x46>
 801138a:	6863      	ldr	r3, [r4, #4]
 801138c:	1ac0      	subs	r0, r0, r3
 801138e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011390:	b10b      	cbz	r3, 8011396 <__sflush_r+0x46>
 8011392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011394:	1ac0      	subs	r0, r0, r3
 8011396:	2300      	movs	r3, #0
 8011398:	4602      	mov	r2, r0
 801139a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801139c:	6a21      	ldr	r1, [r4, #32]
 801139e:	4628      	mov	r0, r5
 80113a0:	47b0      	blx	r6
 80113a2:	1c43      	adds	r3, r0, #1
 80113a4:	89a3      	ldrh	r3, [r4, #12]
 80113a6:	d106      	bne.n	80113b6 <__sflush_r+0x66>
 80113a8:	6829      	ldr	r1, [r5, #0]
 80113aa:	291d      	cmp	r1, #29
 80113ac:	d82c      	bhi.n	8011408 <__sflush_r+0xb8>
 80113ae:	4a2a      	ldr	r2, [pc, #168]	; (8011458 <__sflush_r+0x108>)
 80113b0:	40ca      	lsrs	r2, r1
 80113b2:	07d6      	lsls	r6, r2, #31
 80113b4:	d528      	bpl.n	8011408 <__sflush_r+0xb8>
 80113b6:	2200      	movs	r2, #0
 80113b8:	6062      	str	r2, [r4, #4]
 80113ba:	04d9      	lsls	r1, r3, #19
 80113bc:	6922      	ldr	r2, [r4, #16]
 80113be:	6022      	str	r2, [r4, #0]
 80113c0:	d504      	bpl.n	80113cc <__sflush_r+0x7c>
 80113c2:	1c42      	adds	r2, r0, #1
 80113c4:	d101      	bne.n	80113ca <__sflush_r+0x7a>
 80113c6:	682b      	ldr	r3, [r5, #0]
 80113c8:	b903      	cbnz	r3, 80113cc <__sflush_r+0x7c>
 80113ca:	6560      	str	r0, [r4, #84]	; 0x54
 80113cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113ce:	602f      	str	r7, [r5, #0]
 80113d0:	2900      	cmp	r1, #0
 80113d2:	d0ca      	beq.n	801136a <__sflush_r+0x1a>
 80113d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113d8:	4299      	cmp	r1, r3
 80113da:	d002      	beq.n	80113e2 <__sflush_r+0x92>
 80113dc:	4628      	mov	r0, r5
 80113de:	f7ff fbb5 	bl	8010b4c <_free_r>
 80113e2:	2000      	movs	r0, #0
 80113e4:	6360      	str	r0, [r4, #52]	; 0x34
 80113e6:	e7c1      	b.n	801136c <__sflush_r+0x1c>
 80113e8:	6a21      	ldr	r1, [r4, #32]
 80113ea:	2301      	movs	r3, #1
 80113ec:	4628      	mov	r0, r5
 80113ee:	47b0      	blx	r6
 80113f0:	1c41      	adds	r1, r0, #1
 80113f2:	d1c7      	bne.n	8011384 <__sflush_r+0x34>
 80113f4:	682b      	ldr	r3, [r5, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d0c4      	beq.n	8011384 <__sflush_r+0x34>
 80113fa:	2b1d      	cmp	r3, #29
 80113fc:	d001      	beq.n	8011402 <__sflush_r+0xb2>
 80113fe:	2b16      	cmp	r3, #22
 8011400:	d101      	bne.n	8011406 <__sflush_r+0xb6>
 8011402:	602f      	str	r7, [r5, #0]
 8011404:	e7b1      	b.n	801136a <__sflush_r+0x1a>
 8011406:	89a3      	ldrh	r3, [r4, #12]
 8011408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801140c:	81a3      	strh	r3, [r4, #12]
 801140e:	e7ad      	b.n	801136c <__sflush_r+0x1c>
 8011410:	690f      	ldr	r7, [r1, #16]
 8011412:	2f00      	cmp	r7, #0
 8011414:	d0a9      	beq.n	801136a <__sflush_r+0x1a>
 8011416:	0793      	lsls	r3, r2, #30
 8011418:	680e      	ldr	r6, [r1, #0]
 801141a:	bf08      	it	eq
 801141c:	694b      	ldreq	r3, [r1, #20]
 801141e:	600f      	str	r7, [r1, #0]
 8011420:	bf18      	it	ne
 8011422:	2300      	movne	r3, #0
 8011424:	eba6 0807 	sub.w	r8, r6, r7
 8011428:	608b      	str	r3, [r1, #8]
 801142a:	f1b8 0f00 	cmp.w	r8, #0
 801142e:	dd9c      	ble.n	801136a <__sflush_r+0x1a>
 8011430:	6a21      	ldr	r1, [r4, #32]
 8011432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011434:	4643      	mov	r3, r8
 8011436:	463a      	mov	r2, r7
 8011438:	4628      	mov	r0, r5
 801143a:	47b0      	blx	r6
 801143c:	2800      	cmp	r0, #0
 801143e:	dc06      	bgt.n	801144e <__sflush_r+0xfe>
 8011440:	89a3      	ldrh	r3, [r4, #12]
 8011442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011446:	81a3      	strh	r3, [r4, #12]
 8011448:	f04f 30ff 	mov.w	r0, #4294967295
 801144c:	e78e      	b.n	801136c <__sflush_r+0x1c>
 801144e:	4407      	add	r7, r0
 8011450:	eba8 0800 	sub.w	r8, r8, r0
 8011454:	e7e9      	b.n	801142a <__sflush_r+0xda>
 8011456:	bf00      	nop
 8011458:	20400001 	.word	0x20400001

0801145c <_fflush_r>:
 801145c:	b538      	push	{r3, r4, r5, lr}
 801145e:	690b      	ldr	r3, [r1, #16]
 8011460:	4605      	mov	r5, r0
 8011462:	460c      	mov	r4, r1
 8011464:	b913      	cbnz	r3, 801146c <_fflush_r+0x10>
 8011466:	2500      	movs	r5, #0
 8011468:	4628      	mov	r0, r5
 801146a:	bd38      	pop	{r3, r4, r5, pc}
 801146c:	b118      	cbz	r0, 8011476 <_fflush_r+0x1a>
 801146e:	6983      	ldr	r3, [r0, #24]
 8011470:	b90b      	cbnz	r3, 8011476 <_fflush_r+0x1a>
 8011472:	f000 f887 	bl	8011584 <__sinit>
 8011476:	4b14      	ldr	r3, [pc, #80]	; (80114c8 <_fflush_r+0x6c>)
 8011478:	429c      	cmp	r4, r3
 801147a:	d11b      	bne.n	80114b4 <_fflush_r+0x58>
 801147c:	686c      	ldr	r4, [r5, #4]
 801147e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d0ef      	beq.n	8011466 <_fflush_r+0xa>
 8011486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011488:	07d0      	lsls	r0, r2, #31
 801148a:	d404      	bmi.n	8011496 <_fflush_r+0x3a>
 801148c:	0599      	lsls	r1, r3, #22
 801148e:	d402      	bmi.n	8011496 <_fflush_r+0x3a>
 8011490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011492:	f000 f915 	bl	80116c0 <__retarget_lock_acquire_recursive>
 8011496:	4628      	mov	r0, r5
 8011498:	4621      	mov	r1, r4
 801149a:	f7ff ff59 	bl	8011350 <__sflush_r>
 801149e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114a0:	07da      	lsls	r2, r3, #31
 80114a2:	4605      	mov	r5, r0
 80114a4:	d4e0      	bmi.n	8011468 <_fflush_r+0xc>
 80114a6:	89a3      	ldrh	r3, [r4, #12]
 80114a8:	059b      	lsls	r3, r3, #22
 80114aa:	d4dd      	bmi.n	8011468 <_fflush_r+0xc>
 80114ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114ae:	f000 f908 	bl	80116c2 <__retarget_lock_release_recursive>
 80114b2:	e7d9      	b.n	8011468 <_fflush_r+0xc>
 80114b4:	4b05      	ldr	r3, [pc, #20]	; (80114cc <_fflush_r+0x70>)
 80114b6:	429c      	cmp	r4, r3
 80114b8:	d101      	bne.n	80114be <_fflush_r+0x62>
 80114ba:	68ac      	ldr	r4, [r5, #8]
 80114bc:	e7df      	b.n	801147e <_fflush_r+0x22>
 80114be:	4b04      	ldr	r3, [pc, #16]	; (80114d0 <_fflush_r+0x74>)
 80114c0:	429c      	cmp	r4, r3
 80114c2:	bf08      	it	eq
 80114c4:	68ec      	ldreq	r4, [r5, #12]
 80114c6:	e7da      	b.n	801147e <_fflush_r+0x22>
 80114c8:	08012774 	.word	0x08012774
 80114cc:	08012794 	.word	0x08012794
 80114d0:	08012754 	.word	0x08012754

080114d4 <std>:
 80114d4:	2300      	movs	r3, #0
 80114d6:	b510      	push	{r4, lr}
 80114d8:	4604      	mov	r4, r0
 80114da:	e9c0 3300 	strd	r3, r3, [r0]
 80114de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80114e2:	6083      	str	r3, [r0, #8]
 80114e4:	8181      	strh	r1, [r0, #12]
 80114e6:	6643      	str	r3, [r0, #100]	; 0x64
 80114e8:	81c2      	strh	r2, [r0, #14]
 80114ea:	6183      	str	r3, [r0, #24]
 80114ec:	4619      	mov	r1, r3
 80114ee:	2208      	movs	r2, #8
 80114f0:	305c      	adds	r0, #92	; 0x5c
 80114f2:	f7fd fbdd 	bl	800ecb0 <memset>
 80114f6:	4b05      	ldr	r3, [pc, #20]	; (801150c <std+0x38>)
 80114f8:	6263      	str	r3, [r4, #36]	; 0x24
 80114fa:	4b05      	ldr	r3, [pc, #20]	; (8011510 <std+0x3c>)
 80114fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80114fe:	4b05      	ldr	r3, [pc, #20]	; (8011514 <std+0x40>)
 8011500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011502:	4b05      	ldr	r3, [pc, #20]	; (8011518 <std+0x44>)
 8011504:	6224      	str	r4, [r4, #32]
 8011506:	6323      	str	r3, [r4, #48]	; 0x30
 8011508:	bd10      	pop	{r4, pc}
 801150a:	bf00      	nop
 801150c:	08011819 	.word	0x08011819
 8011510:	0801183b 	.word	0x0801183b
 8011514:	08011873 	.word	0x08011873
 8011518:	08011897 	.word	0x08011897

0801151c <_cleanup_r>:
 801151c:	4901      	ldr	r1, [pc, #4]	; (8011524 <_cleanup_r+0x8>)
 801151e:	f000 b8af 	b.w	8011680 <_fwalk_reent>
 8011522:	bf00      	nop
 8011524:	0801145d 	.word	0x0801145d

08011528 <__sfmoreglue>:
 8011528:	b570      	push	{r4, r5, r6, lr}
 801152a:	2268      	movs	r2, #104	; 0x68
 801152c:	1e4d      	subs	r5, r1, #1
 801152e:	4355      	muls	r5, r2
 8011530:	460e      	mov	r6, r1
 8011532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011536:	f7ff fa17 	bl	8010968 <_malloc_r>
 801153a:	4604      	mov	r4, r0
 801153c:	b140      	cbz	r0, 8011550 <__sfmoreglue+0x28>
 801153e:	2100      	movs	r1, #0
 8011540:	e9c0 1600 	strd	r1, r6, [r0]
 8011544:	300c      	adds	r0, #12
 8011546:	60a0      	str	r0, [r4, #8]
 8011548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801154c:	f7fd fbb0 	bl	800ecb0 <memset>
 8011550:	4620      	mov	r0, r4
 8011552:	bd70      	pop	{r4, r5, r6, pc}

08011554 <__sfp_lock_acquire>:
 8011554:	4801      	ldr	r0, [pc, #4]	; (801155c <__sfp_lock_acquire+0x8>)
 8011556:	f000 b8b3 	b.w	80116c0 <__retarget_lock_acquire_recursive>
 801155a:	bf00      	nop
 801155c:	24000d91 	.word	0x24000d91

08011560 <__sfp_lock_release>:
 8011560:	4801      	ldr	r0, [pc, #4]	; (8011568 <__sfp_lock_release+0x8>)
 8011562:	f000 b8ae 	b.w	80116c2 <__retarget_lock_release_recursive>
 8011566:	bf00      	nop
 8011568:	24000d91 	.word	0x24000d91

0801156c <__sinit_lock_acquire>:
 801156c:	4801      	ldr	r0, [pc, #4]	; (8011574 <__sinit_lock_acquire+0x8>)
 801156e:	f000 b8a7 	b.w	80116c0 <__retarget_lock_acquire_recursive>
 8011572:	bf00      	nop
 8011574:	24000d92 	.word	0x24000d92

08011578 <__sinit_lock_release>:
 8011578:	4801      	ldr	r0, [pc, #4]	; (8011580 <__sinit_lock_release+0x8>)
 801157a:	f000 b8a2 	b.w	80116c2 <__retarget_lock_release_recursive>
 801157e:	bf00      	nop
 8011580:	24000d92 	.word	0x24000d92

08011584 <__sinit>:
 8011584:	b510      	push	{r4, lr}
 8011586:	4604      	mov	r4, r0
 8011588:	f7ff fff0 	bl	801156c <__sinit_lock_acquire>
 801158c:	69a3      	ldr	r3, [r4, #24]
 801158e:	b11b      	cbz	r3, 8011598 <__sinit+0x14>
 8011590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011594:	f7ff bff0 	b.w	8011578 <__sinit_lock_release>
 8011598:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801159c:	6523      	str	r3, [r4, #80]	; 0x50
 801159e:	4b13      	ldr	r3, [pc, #76]	; (80115ec <__sinit+0x68>)
 80115a0:	4a13      	ldr	r2, [pc, #76]	; (80115f0 <__sinit+0x6c>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80115a6:	42a3      	cmp	r3, r4
 80115a8:	bf04      	itt	eq
 80115aa:	2301      	moveq	r3, #1
 80115ac:	61a3      	streq	r3, [r4, #24]
 80115ae:	4620      	mov	r0, r4
 80115b0:	f000 f820 	bl	80115f4 <__sfp>
 80115b4:	6060      	str	r0, [r4, #4]
 80115b6:	4620      	mov	r0, r4
 80115b8:	f000 f81c 	bl	80115f4 <__sfp>
 80115bc:	60a0      	str	r0, [r4, #8]
 80115be:	4620      	mov	r0, r4
 80115c0:	f000 f818 	bl	80115f4 <__sfp>
 80115c4:	2200      	movs	r2, #0
 80115c6:	60e0      	str	r0, [r4, #12]
 80115c8:	2104      	movs	r1, #4
 80115ca:	6860      	ldr	r0, [r4, #4]
 80115cc:	f7ff ff82 	bl	80114d4 <std>
 80115d0:	68a0      	ldr	r0, [r4, #8]
 80115d2:	2201      	movs	r2, #1
 80115d4:	2109      	movs	r1, #9
 80115d6:	f7ff ff7d 	bl	80114d4 <std>
 80115da:	68e0      	ldr	r0, [r4, #12]
 80115dc:	2202      	movs	r2, #2
 80115de:	2112      	movs	r1, #18
 80115e0:	f7ff ff78 	bl	80114d4 <std>
 80115e4:	2301      	movs	r3, #1
 80115e6:	61a3      	str	r3, [r4, #24]
 80115e8:	e7d2      	b.n	8011590 <__sinit+0xc>
 80115ea:	bf00      	nop
 80115ec:	08012388 	.word	0x08012388
 80115f0:	0801151d 	.word	0x0801151d

080115f4 <__sfp>:
 80115f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115f6:	4607      	mov	r7, r0
 80115f8:	f7ff ffac 	bl	8011554 <__sfp_lock_acquire>
 80115fc:	4b1e      	ldr	r3, [pc, #120]	; (8011678 <__sfp+0x84>)
 80115fe:	681e      	ldr	r6, [r3, #0]
 8011600:	69b3      	ldr	r3, [r6, #24]
 8011602:	b913      	cbnz	r3, 801160a <__sfp+0x16>
 8011604:	4630      	mov	r0, r6
 8011606:	f7ff ffbd 	bl	8011584 <__sinit>
 801160a:	3648      	adds	r6, #72	; 0x48
 801160c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011610:	3b01      	subs	r3, #1
 8011612:	d503      	bpl.n	801161c <__sfp+0x28>
 8011614:	6833      	ldr	r3, [r6, #0]
 8011616:	b30b      	cbz	r3, 801165c <__sfp+0x68>
 8011618:	6836      	ldr	r6, [r6, #0]
 801161a:	e7f7      	b.n	801160c <__sfp+0x18>
 801161c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011620:	b9d5      	cbnz	r5, 8011658 <__sfp+0x64>
 8011622:	4b16      	ldr	r3, [pc, #88]	; (801167c <__sfp+0x88>)
 8011624:	60e3      	str	r3, [r4, #12]
 8011626:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801162a:	6665      	str	r5, [r4, #100]	; 0x64
 801162c:	f000 f847 	bl	80116be <__retarget_lock_init_recursive>
 8011630:	f7ff ff96 	bl	8011560 <__sfp_lock_release>
 8011634:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011638:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801163c:	6025      	str	r5, [r4, #0]
 801163e:	61a5      	str	r5, [r4, #24]
 8011640:	2208      	movs	r2, #8
 8011642:	4629      	mov	r1, r5
 8011644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011648:	f7fd fb32 	bl	800ecb0 <memset>
 801164c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011654:	4620      	mov	r0, r4
 8011656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011658:	3468      	adds	r4, #104	; 0x68
 801165a:	e7d9      	b.n	8011610 <__sfp+0x1c>
 801165c:	2104      	movs	r1, #4
 801165e:	4638      	mov	r0, r7
 8011660:	f7ff ff62 	bl	8011528 <__sfmoreglue>
 8011664:	4604      	mov	r4, r0
 8011666:	6030      	str	r0, [r6, #0]
 8011668:	2800      	cmp	r0, #0
 801166a:	d1d5      	bne.n	8011618 <__sfp+0x24>
 801166c:	f7ff ff78 	bl	8011560 <__sfp_lock_release>
 8011670:	230c      	movs	r3, #12
 8011672:	603b      	str	r3, [r7, #0]
 8011674:	e7ee      	b.n	8011654 <__sfp+0x60>
 8011676:	bf00      	nop
 8011678:	08012388 	.word	0x08012388
 801167c:	ffff0001 	.word	0xffff0001

08011680 <_fwalk_reent>:
 8011680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011684:	4606      	mov	r6, r0
 8011686:	4688      	mov	r8, r1
 8011688:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801168c:	2700      	movs	r7, #0
 801168e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011692:	f1b9 0901 	subs.w	r9, r9, #1
 8011696:	d505      	bpl.n	80116a4 <_fwalk_reent+0x24>
 8011698:	6824      	ldr	r4, [r4, #0]
 801169a:	2c00      	cmp	r4, #0
 801169c:	d1f7      	bne.n	801168e <_fwalk_reent+0xe>
 801169e:	4638      	mov	r0, r7
 80116a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116a4:	89ab      	ldrh	r3, [r5, #12]
 80116a6:	2b01      	cmp	r3, #1
 80116a8:	d907      	bls.n	80116ba <_fwalk_reent+0x3a>
 80116aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116ae:	3301      	adds	r3, #1
 80116b0:	d003      	beq.n	80116ba <_fwalk_reent+0x3a>
 80116b2:	4629      	mov	r1, r5
 80116b4:	4630      	mov	r0, r6
 80116b6:	47c0      	blx	r8
 80116b8:	4307      	orrs	r7, r0
 80116ba:	3568      	adds	r5, #104	; 0x68
 80116bc:	e7e9      	b.n	8011692 <_fwalk_reent+0x12>

080116be <__retarget_lock_init_recursive>:
 80116be:	4770      	bx	lr

080116c0 <__retarget_lock_acquire_recursive>:
 80116c0:	4770      	bx	lr

080116c2 <__retarget_lock_release_recursive>:
 80116c2:	4770      	bx	lr

080116c4 <__swhatbuf_r>:
 80116c4:	b570      	push	{r4, r5, r6, lr}
 80116c6:	460e      	mov	r6, r1
 80116c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116cc:	2900      	cmp	r1, #0
 80116ce:	b096      	sub	sp, #88	; 0x58
 80116d0:	4614      	mov	r4, r2
 80116d2:	461d      	mov	r5, r3
 80116d4:	da08      	bge.n	80116e8 <__swhatbuf_r+0x24>
 80116d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80116da:	2200      	movs	r2, #0
 80116dc:	602a      	str	r2, [r5, #0]
 80116de:	061a      	lsls	r2, r3, #24
 80116e0:	d410      	bmi.n	8011704 <__swhatbuf_r+0x40>
 80116e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116e6:	e00e      	b.n	8011706 <__swhatbuf_r+0x42>
 80116e8:	466a      	mov	r2, sp
 80116ea:	f000 f8fb 	bl	80118e4 <_fstat_r>
 80116ee:	2800      	cmp	r0, #0
 80116f0:	dbf1      	blt.n	80116d6 <__swhatbuf_r+0x12>
 80116f2:	9a01      	ldr	r2, [sp, #4]
 80116f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80116f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80116fc:	425a      	negs	r2, r3
 80116fe:	415a      	adcs	r2, r3
 8011700:	602a      	str	r2, [r5, #0]
 8011702:	e7ee      	b.n	80116e2 <__swhatbuf_r+0x1e>
 8011704:	2340      	movs	r3, #64	; 0x40
 8011706:	2000      	movs	r0, #0
 8011708:	6023      	str	r3, [r4, #0]
 801170a:	b016      	add	sp, #88	; 0x58
 801170c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011710 <__smakebuf_r>:
 8011710:	898b      	ldrh	r3, [r1, #12]
 8011712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011714:	079d      	lsls	r5, r3, #30
 8011716:	4606      	mov	r6, r0
 8011718:	460c      	mov	r4, r1
 801171a:	d507      	bpl.n	801172c <__smakebuf_r+0x1c>
 801171c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011720:	6023      	str	r3, [r4, #0]
 8011722:	6123      	str	r3, [r4, #16]
 8011724:	2301      	movs	r3, #1
 8011726:	6163      	str	r3, [r4, #20]
 8011728:	b002      	add	sp, #8
 801172a:	bd70      	pop	{r4, r5, r6, pc}
 801172c:	ab01      	add	r3, sp, #4
 801172e:	466a      	mov	r2, sp
 8011730:	f7ff ffc8 	bl	80116c4 <__swhatbuf_r>
 8011734:	9900      	ldr	r1, [sp, #0]
 8011736:	4605      	mov	r5, r0
 8011738:	4630      	mov	r0, r6
 801173a:	f7ff f915 	bl	8010968 <_malloc_r>
 801173e:	b948      	cbnz	r0, 8011754 <__smakebuf_r+0x44>
 8011740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011744:	059a      	lsls	r2, r3, #22
 8011746:	d4ef      	bmi.n	8011728 <__smakebuf_r+0x18>
 8011748:	f023 0303 	bic.w	r3, r3, #3
 801174c:	f043 0302 	orr.w	r3, r3, #2
 8011750:	81a3      	strh	r3, [r4, #12]
 8011752:	e7e3      	b.n	801171c <__smakebuf_r+0xc>
 8011754:	4b0d      	ldr	r3, [pc, #52]	; (801178c <__smakebuf_r+0x7c>)
 8011756:	62b3      	str	r3, [r6, #40]	; 0x28
 8011758:	89a3      	ldrh	r3, [r4, #12]
 801175a:	6020      	str	r0, [r4, #0]
 801175c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011760:	81a3      	strh	r3, [r4, #12]
 8011762:	9b00      	ldr	r3, [sp, #0]
 8011764:	6163      	str	r3, [r4, #20]
 8011766:	9b01      	ldr	r3, [sp, #4]
 8011768:	6120      	str	r0, [r4, #16]
 801176a:	b15b      	cbz	r3, 8011784 <__smakebuf_r+0x74>
 801176c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011770:	4630      	mov	r0, r6
 8011772:	f000 f8c9 	bl	8011908 <_isatty_r>
 8011776:	b128      	cbz	r0, 8011784 <__smakebuf_r+0x74>
 8011778:	89a3      	ldrh	r3, [r4, #12]
 801177a:	f023 0303 	bic.w	r3, r3, #3
 801177e:	f043 0301 	orr.w	r3, r3, #1
 8011782:	81a3      	strh	r3, [r4, #12]
 8011784:	89a0      	ldrh	r0, [r4, #12]
 8011786:	4305      	orrs	r5, r0
 8011788:	81a5      	strh	r5, [r4, #12]
 801178a:	e7cd      	b.n	8011728 <__smakebuf_r+0x18>
 801178c:	0801151d 	.word	0x0801151d

08011790 <_raise_r>:
 8011790:	291f      	cmp	r1, #31
 8011792:	b538      	push	{r3, r4, r5, lr}
 8011794:	4604      	mov	r4, r0
 8011796:	460d      	mov	r5, r1
 8011798:	d904      	bls.n	80117a4 <_raise_r+0x14>
 801179a:	2316      	movs	r3, #22
 801179c:	6003      	str	r3, [r0, #0]
 801179e:	f04f 30ff 	mov.w	r0, #4294967295
 80117a2:	bd38      	pop	{r3, r4, r5, pc}
 80117a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80117a6:	b112      	cbz	r2, 80117ae <_raise_r+0x1e>
 80117a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80117ac:	b94b      	cbnz	r3, 80117c2 <_raise_r+0x32>
 80117ae:	4620      	mov	r0, r4
 80117b0:	f000 f830 	bl	8011814 <_getpid_r>
 80117b4:	462a      	mov	r2, r5
 80117b6:	4601      	mov	r1, r0
 80117b8:	4620      	mov	r0, r4
 80117ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117be:	f000 b817 	b.w	80117f0 <_kill_r>
 80117c2:	2b01      	cmp	r3, #1
 80117c4:	d00a      	beq.n	80117dc <_raise_r+0x4c>
 80117c6:	1c59      	adds	r1, r3, #1
 80117c8:	d103      	bne.n	80117d2 <_raise_r+0x42>
 80117ca:	2316      	movs	r3, #22
 80117cc:	6003      	str	r3, [r0, #0]
 80117ce:	2001      	movs	r0, #1
 80117d0:	e7e7      	b.n	80117a2 <_raise_r+0x12>
 80117d2:	2400      	movs	r4, #0
 80117d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80117d8:	4628      	mov	r0, r5
 80117da:	4798      	blx	r3
 80117dc:	2000      	movs	r0, #0
 80117de:	e7e0      	b.n	80117a2 <_raise_r+0x12>

080117e0 <raise>:
 80117e0:	4b02      	ldr	r3, [pc, #8]	; (80117ec <raise+0xc>)
 80117e2:	4601      	mov	r1, r0
 80117e4:	6818      	ldr	r0, [r3, #0]
 80117e6:	f7ff bfd3 	b.w	8011790 <_raise_r>
 80117ea:	bf00      	nop
 80117ec:	240000b0 	.word	0x240000b0

080117f0 <_kill_r>:
 80117f0:	b538      	push	{r3, r4, r5, lr}
 80117f2:	4d07      	ldr	r5, [pc, #28]	; (8011810 <_kill_r+0x20>)
 80117f4:	2300      	movs	r3, #0
 80117f6:	4604      	mov	r4, r0
 80117f8:	4608      	mov	r0, r1
 80117fa:	4611      	mov	r1, r2
 80117fc:	602b      	str	r3, [r5, #0]
 80117fe:	f7f2 faf5 	bl	8003dec <_kill>
 8011802:	1c43      	adds	r3, r0, #1
 8011804:	d102      	bne.n	801180c <_kill_r+0x1c>
 8011806:	682b      	ldr	r3, [r5, #0]
 8011808:	b103      	cbz	r3, 801180c <_kill_r+0x1c>
 801180a:	6023      	str	r3, [r4, #0]
 801180c:	bd38      	pop	{r3, r4, r5, pc}
 801180e:	bf00      	nop
 8011810:	24000d8c 	.word	0x24000d8c

08011814 <_getpid_r>:
 8011814:	f7f2 bae2 	b.w	8003ddc <_getpid>

08011818 <__sread>:
 8011818:	b510      	push	{r4, lr}
 801181a:	460c      	mov	r4, r1
 801181c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011820:	f000 f894 	bl	801194c <_read_r>
 8011824:	2800      	cmp	r0, #0
 8011826:	bfab      	itete	ge
 8011828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801182a:	89a3      	ldrhlt	r3, [r4, #12]
 801182c:	181b      	addge	r3, r3, r0
 801182e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011832:	bfac      	ite	ge
 8011834:	6563      	strge	r3, [r4, #84]	; 0x54
 8011836:	81a3      	strhlt	r3, [r4, #12]
 8011838:	bd10      	pop	{r4, pc}

0801183a <__swrite>:
 801183a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801183e:	461f      	mov	r7, r3
 8011840:	898b      	ldrh	r3, [r1, #12]
 8011842:	05db      	lsls	r3, r3, #23
 8011844:	4605      	mov	r5, r0
 8011846:	460c      	mov	r4, r1
 8011848:	4616      	mov	r6, r2
 801184a:	d505      	bpl.n	8011858 <__swrite+0x1e>
 801184c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011850:	2302      	movs	r3, #2
 8011852:	2200      	movs	r2, #0
 8011854:	f000 f868 	bl	8011928 <_lseek_r>
 8011858:	89a3      	ldrh	r3, [r4, #12]
 801185a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801185e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011862:	81a3      	strh	r3, [r4, #12]
 8011864:	4632      	mov	r2, r6
 8011866:	463b      	mov	r3, r7
 8011868:	4628      	mov	r0, r5
 801186a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801186e:	f000 b817 	b.w	80118a0 <_write_r>

08011872 <__sseek>:
 8011872:	b510      	push	{r4, lr}
 8011874:	460c      	mov	r4, r1
 8011876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801187a:	f000 f855 	bl	8011928 <_lseek_r>
 801187e:	1c43      	adds	r3, r0, #1
 8011880:	89a3      	ldrh	r3, [r4, #12]
 8011882:	bf15      	itete	ne
 8011884:	6560      	strne	r0, [r4, #84]	; 0x54
 8011886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801188a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801188e:	81a3      	strheq	r3, [r4, #12]
 8011890:	bf18      	it	ne
 8011892:	81a3      	strhne	r3, [r4, #12]
 8011894:	bd10      	pop	{r4, pc}

08011896 <__sclose>:
 8011896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801189a:	f000 b813 	b.w	80118c4 <_close_r>
	...

080118a0 <_write_r>:
 80118a0:	b538      	push	{r3, r4, r5, lr}
 80118a2:	4d07      	ldr	r5, [pc, #28]	; (80118c0 <_write_r+0x20>)
 80118a4:	4604      	mov	r4, r0
 80118a6:	4608      	mov	r0, r1
 80118a8:	4611      	mov	r1, r2
 80118aa:	2200      	movs	r2, #0
 80118ac:	602a      	str	r2, [r5, #0]
 80118ae:	461a      	mov	r2, r3
 80118b0:	f7f2 fad3 	bl	8003e5a <_write>
 80118b4:	1c43      	adds	r3, r0, #1
 80118b6:	d102      	bne.n	80118be <_write_r+0x1e>
 80118b8:	682b      	ldr	r3, [r5, #0]
 80118ba:	b103      	cbz	r3, 80118be <_write_r+0x1e>
 80118bc:	6023      	str	r3, [r4, #0]
 80118be:	bd38      	pop	{r3, r4, r5, pc}
 80118c0:	24000d8c 	.word	0x24000d8c

080118c4 <_close_r>:
 80118c4:	b538      	push	{r3, r4, r5, lr}
 80118c6:	4d06      	ldr	r5, [pc, #24]	; (80118e0 <_close_r+0x1c>)
 80118c8:	2300      	movs	r3, #0
 80118ca:	4604      	mov	r4, r0
 80118cc:	4608      	mov	r0, r1
 80118ce:	602b      	str	r3, [r5, #0]
 80118d0:	f7f2 fadf 	bl	8003e92 <_close>
 80118d4:	1c43      	adds	r3, r0, #1
 80118d6:	d102      	bne.n	80118de <_close_r+0x1a>
 80118d8:	682b      	ldr	r3, [r5, #0]
 80118da:	b103      	cbz	r3, 80118de <_close_r+0x1a>
 80118dc:	6023      	str	r3, [r4, #0]
 80118de:	bd38      	pop	{r3, r4, r5, pc}
 80118e0:	24000d8c 	.word	0x24000d8c

080118e4 <_fstat_r>:
 80118e4:	b538      	push	{r3, r4, r5, lr}
 80118e6:	4d07      	ldr	r5, [pc, #28]	; (8011904 <_fstat_r+0x20>)
 80118e8:	2300      	movs	r3, #0
 80118ea:	4604      	mov	r4, r0
 80118ec:	4608      	mov	r0, r1
 80118ee:	4611      	mov	r1, r2
 80118f0:	602b      	str	r3, [r5, #0]
 80118f2:	f7f2 fada 	bl	8003eaa <_fstat>
 80118f6:	1c43      	adds	r3, r0, #1
 80118f8:	d102      	bne.n	8011900 <_fstat_r+0x1c>
 80118fa:	682b      	ldr	r3, [r5, #0]
 80118fc:	b103      	cbz	r3, 8011900 <_fstat_r+0x1c>
 80118fe:	6023      	str	r3, [r4, #0]
 8011900:	bd38      	pop	{r3, r4, r5, pc}
 8011902:	bf00      	nop
 8011904:	24000d8c 	.word	0x24000d8c

08011908 <_isatty_r>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	4d06      	ldr	r5, [pc, #24]	; (8011924 <_isatty_r+0x1c>)
 801190c:	2300      	movs	r3, #0
 801190e:	4604      	mov	r4, r0
 8011910:	4608      	mov	r0, r1
 8011912:	602b      	str	r3, [r5, #0]
 8011914:	f7f2 fad9 	bl	8003eca <_isatty>
 8011918:	1c43      	adds	r3, r0, #1
 801191a:	d102      	bne.n	8011922 <_isatty_r+0x1a>
 801191c:	682b      	ldr	r3, [r5, #0]
 801191e:	b103      	cbz	r3, 8011922 <_isatty_r+0x1a>
 8011920:	6023      	str	r3, [r4, #0]
 8011922:	bd38      	pop	{r3, r4, r5, pc}
 8011924:	24000d8c 	.word	0x24000d8c

08011928 <_lseek_r>:
 8011928:	b538      	push	{r3, r4, r5, lr}
 801192a:	4d07      	ldr	r5, [pc, #28]	; (8011948 <_lseek_r+0x20>)
 801192c:	4604      	mov	r4, r0
 801192e:	4608      	mov	r0, r1
 8011930:	4611      	mov	r1, r2
 8011932:	2200      	movs	r2, #0
 8011934:	602a      	str	r2, [r5, #0]
 8011936:	461a      	mov	r2, r3
 8011938:	f7f2 fad2 	bl	8003ee0 <_lseek>
 801193c:	1c43      	adds	r3, r0, #1
 801193e:	d102      	bne.n	8011946 <_lseek_r+0x1e>
 8011940:	682b      	ldr	r3, [r5, #0]
 8011942:	b103      	cbz	r3, 8011946 <_lseek_r+0x1e>
 8011944:	6023      	str	r3, [r4, #0]
 8011946:	bd38      	pop	{r3, r4, r5, pc}
 8011948:	24000d8c 	.word	0x24000d8c

0801194c <_read_r>:
 801194c:	b538      	push	{r3, r4, r5, lr}
 801194e:	4d07      	ldr	r5, [pc, #28]	; (801196c <_read_r+0x20>)
 8011950:	4604      	mov	r4, r0
 8011952:	4608      	mov	r0, r1
 8011954:	4611      	mov	r1, r2
 8011956:	2200      	movs	r2, #0
 8011958:	602a      	str	r2, [r5, #0]
 801195a:	461a      	mov	r2, r3
 801195c:	f7f2 fa60 	bl	8003e20 <_read>
 8011960:	1c43      	adds	r3, r0, #1
 8011962:	d102      	bne.n	801196a <_read_r+0x1e>
 8011964:	682b      	ldr	r3, [r5, #0]
 8011966:	b103      	cbz	r3, 801196a <_read_r+0x1e>
 8011968:	6023      	str	r3, [r4, #0]
 801196a:	bd38      	pop	{r3, r4, r5, pc}
 801196c:	24000d8c 	.word	0x24000d8c

08011970 <checkint>:
 8011970:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011974:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011978:	429a      	cmp	r2, r3
 801197a:	b570      	push	{r4, r5, r6, lr}
 801197c:	dd2a      	ble.n	80119d4 <checkint+0x64>
 801197e:	f240 4333 	movw	r3, #1075	; 0x433
 8011982:	429a      	cmp	r2, r3
 8011984:	dc24      	bgt.n	80119d0 <checkint+0x60>
 8011986:	1a9b      	subs	r3, r3, r2
 8011988:	f1a3 0620 	sub.w	r6, r3, #32
 801198c:	f04f 32ff 	mov.w	r2, #4294967295
 8011990:	fa02 f403 	lsl.w	r4, r2, r3
 8011994:	fa02 f606 	lsl.w	r6, r2, r6
 8011998:	f1c3 0520 	rsb	r5, r3, #32
 801199c:	fa22 f505 	lsr.w	r5, r2, r5
 80119a0:	4334      	orrs	r4, r6
 80119a2:	432c      	orrs	r4, r5
 80119a4:	409a      	lsls	r2, r3
 80119a6:	ea20 0202 	bic.w	r2, r0, r2
 80119aa:	ea21 0404 	bic.w	r4, r1, r4
 80119ae:	4322      	orrs	r2, r4
 80119b0:	f1a3 0420 	sub.w	r4, r3, #32
 80119b4:	f1c3 0220 	rsb	r2, r3, #32
 80119b8:	d10c      	bne.n	80119d4 <checkint+0x64>
 80119ba:	40d8      	lsrs	r0, r3
 80119bc:	fa01 f302 	lsl.w	r3, r1, r2
 80119c0:	4318      	orrs	r0, r3
 80119c2:	40e1      	lsrs	r1, r4
 80119c4:	4308      	orrs	r0, r1
 80119c6:	f000 0001 	and.w	r0, r0, #1
 80119ca:	f1d0 0002 	rsbs	r0, r0, #2
 80119ce:	bd70      	pop	{r4, r5, r6, pc}
 80119d0:	2002      	movs	r0, #2
 80119d2:	e7fc      	b.n	80119ce <checkint+0x5e>
 80119d4:	2000      	movs	r0, #0
 80119d6:	e7fa      	b.n	80119ce <checkint+0x5e>

080119d8 <pow>:
 80119d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119dc:	ee10 4a90 	vmov	r4, s1
 80119e0:	ed2d 8b0a 	vpush	{d8-d12}
 80119e4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80119e8:	ee11 7a90 	vmov	r7, s3
 80119ec:	f10a 32ff 	add.w	r2, sl, #4294967295
 80119f0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80119f4:	429a      	cmp	r2, r3
 80119f6:	ee10 6a10 	vmov	r6, s0
 80119fa:	ee11 0a10 	vmov	r0, s2
 80119fe:	b086      	sub	sp, #24
 8011a00:	46d4      	mov	ip, sl
 8011a02:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8011a06:	d806      	bhi.n	8011a16 <pow+0x3e>
 8011a08:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8011a0c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011a10:	2b7f      	cmp	r3, #127	; 0x7f
 8011a12:	f240 8156 	bls.w	8011cc2 <pow+0x2ea>
 8011a16:	1802      	adds	r2, r0, r0
 8011a18:	eb47 0107 	adc.w	r1, r7, r7
 8011a1c:	f06f 0e01 	mvn.w	lr, #1
 8011a20:	f112 39ff 	adds.w	r9, r2, #4294967295
 8011a24:	f141 38ff 	adc.w	r8, r1, #4294967295
 8011a28:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8011a2c:	45ce      	cmp	lr, r9
 8011a2e:	eb73 0808 	sbcs.w	r8, r3, r8
 8011a32:	d23f      	bcs.n	8011ab4 <pow+0xdc>
 8011a34:	ea52 0301 	orrs.w	r3, r2, r1
 8011a38:	f04f 0300 	mov.w	r3, #0
 8011a3c:	d10c      	bne.n	8011a58 <pow+0x80>
 8011a3e:	19b6      	adds	r6, r6, r6
 8011a40:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8011a44:	4164      	adcs	r4, r4
 8011a46:	42b3      	cmp	r3, r6
 8011a48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a4c:	41a3      	sbcs	r3, r4
 8011a4e:	f0c0 808c 	bcc.w	8011b6a <pow+0x192>
 8011a52:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011a56:	e028      	b.n	8011aaa <pow+0xd2>
 8011a58:	4da3      	ldr	r5, [pc, #652]	; (8011ce8 <pow+0x310>)
 8011a5a:	42ac      	cmp	r4, r5
 8011a5c:	bf08      	it	eq
 8011a5e:	429e      	cmpeq	r6, r3
 8011a60:	d107      	bne.n	8011a72 <pow+0x9a>
 8011a62:	1800      	adds	r0, r0, r0
 8011a64:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011a68:	417f      	adcs	r7, r7
 8011a6a:	4283      	cmp	r3, r0
 8011a6c:	4b9f      	ldr	r3, [pc, #636]	; (8011cec <pow+0x314>)
 8011a6e:	41bb      	sbcs	r3, r7
 8011a70:	e7ed      	b.n	8011a4e <pow+0x76>
 8011a72:	19b6      	adds	r6, r6, r6
 8011a74:	489e      	ldr	r0, [pc, #632]	; (8011cf0 <pow+0x318>)
 8011a76:	4164      	adcs	r4, r4
 8011a78:	42b3      	cmp	r3, r6
 8011a7a:	eb70 0504 	sbcs.w	r5, r0, r4
 8011a7e:	d374      	bcc.n	8011b6a <pow+0x192>
 8011a80:	4281      	cmp	r1, r0
 8011a82:	bf08      	it	eq
 8011a84:	429a      	cmpeq	r2, r3
 8011a86:	d170      	bne.n	8011b6a <pow+0x192>
 8011a88:	4a9a      	ldr	r2, [pc, #616]	; (8011cf4 <pow+0x31c>)
 8011a8a:	4294      	cmp	r4, r2
 8011a8c:	bf08      	it	eq
 8011a8e:	429e      	cmpeq	r6, r3
 8011a90:	d0df      	beq.n	8011a52 <pow+0x7a>
 8011a92:	4294      	cmp	r4, r2
 8011a94:	ea6f 0707 	mvn.w	r7, r7
 8011a98:	bf34      	ite	cc
 8011a9a:	2400      	movcc	r4, #0
 8011a9c:	2401      	movcs	r4, #1
 8011a9e:	0fff      	lsrs	r7, r7, #31
 8011aa0:	42bc      	cmp	r4, r7
 8011aa2:	f040 81d9 	bne.w	8011e58 <pow+0x480>
 8011aa6:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011aaa:	b006      	add	sp, #24
 8011aac:	ecbd 8b0a 	vpop	{d8-d12}
 8011ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ab4:	eb16 0806 	adds.w	r8, r6, r6
 8011ab8:	eb44 0904 	adc.w	r9, r4, r4
 8011abc:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011ac0:	f169 0200 	sbc.w	r2, r9, #0
 8011ac4:	458e      	cmp	lr, r1
 8011ac6:	4193      	sbcs	r3, r2
 8011ac8:	d223      	bcs.n	8011b12 <pow+0x13a>
 8011aca:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011ace:	2c00      	cmp	r4, #0
 8011ad0:	da12      	bge.n	8011af8 <pow+0x120>
 8011ad2:	4639      	mov	r1, r7
 8011ad4:	f7ff ff4c 	bl	8011970 <checkint>
 8011ad8:	2801      	cmp	r0, #1
 8011ada:	d10d      	bne.n	8011af8 <pow+0x120>
 8011adc:	eeb1 0b40 	vneg.f64	d0, d0
 8011ae0:	ea58 0309 	orrs.w	r3, r8, r9
 8011ae4:	d10a      	bne.n	8011afc <pow+0x124>
 8011ae6:	2f00      	cmp	r7, #0
 8011ae8:	dadf      	bge.n	8011aaa <pow+0xd2>
 8011aea:	b006      	add	sp, #24
 8011aec:	ecbd 8b0a 	vpop	{d8-d12}
 8011af0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011af4:	f000 bb50 	b.w	8012198 <__math_divzero>
 8011af8:	2000      	movs	r0, #0
 8011afa:	e7f1      	b.n	8011ae0 <pow+0x108>
 8011afc:	2f00      	cmp	r7, #0
 8011afe:	dad4      	bge.n	8011aaa <pow+0xd2>
 8011b00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011b04:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011b08:	ed8d 7b00 	vstr	d7, [sp]
 8011b0c:	ed9d 0b00 	vldr	d0, [sp]
 8011b10:	e7cb      	b.n	8011aaa <pow+0xd2>
 8011b12:	2c00      	cmp	r4, #0
 8011b14:	da2c      	bge.n	8011b70 <pow+0x198>
 8011b16:	4639      	mov	r1, r7
 8011b18:	f7ff ff2a 	bl	8011970 <checkint>
 8011b1c:	b930      	cbnz	r0, 8011b2c <pow+0x154>
 8011b1e:	b006      	add	sp, #24
 8011b20:	ecbd 8b0a 	vpop	{d8-d12}
 8011b24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b28:	f000 bb4e 	b.w	80121c8 <__math_invalid>
 8011b2c:	2801      	cmp	r0, #1
 8011b2e:	bf14      	ite	ne
 8011b30:	2000      	movne	r0, #0
 8011b32:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011b36:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011b3a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011b3e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011b42:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011b46:	2b7f      	cmp	r3, #127	; 0x7f
 8011b48:	d92d      	bls.n	8011ba6 <pow+0x1ce>
 8011b4a:	4b67      	ldr	r3, [pc, #412]	; (8011ce8 <pow+0x310>)
 8011b4c:	2000      	movs	r0, #0
 8011b4e:	429c      	cmp	r4, r3
 8011b50:	bf08      	it	eq
 8011b52:	4286      	cmpeq	r6, r0
 8011b54:	f43f af7d 	beq.w	8011a52 <pow+0x7a>
 8011b58:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011b5c:	428a      	cmp	r2, r1
 8011b5e:	d80c      	bhi.n	8011b7a <pow+0x1a2>
 8011b60:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011b64:	42b0      	cmp	r0, r6
 8011b66:	41a3      	sbcs	r3, r4
 8011b68:	d204      	bcs.n	8011b74 <pow+0x19c>
 8011b6a:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011b6e:	e79c      	b.n	8011aaa <pow+0xd2>
 8011b70:	2000      	movs	r0, #0
 8011b72:	e7e4      	b.n	8011b3e <pow+0x166>
 8011b74:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011b78:	e797      	b.n	8011aaa <pow+0xd2>
 8011b7a:	2e01      	cmp	r6, #1
 8011b7c:	eb74 0303 	sbcs.w	r3, r4, r3
 8011b80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011b84:	bf34      	ite	cc
 8011b86:	2301      	movcc	r3, #1
 8011b88:	2300      	movcs	r3, #0
 8011b8a:	4295      	cmp	r5, r2
 8011b8c:	bf8c      	ite	hi
 8011b8e:	2500      	movhi	r5, #0
 8011b90:	2501      	movls	r5, #1
 8011b92:	42ab      	cmp	r3, r5
 8011b94:	f000 809d 	beq.w	8011cd2 <pow+0x2fa>
 8011b98:	b006      	add	sp, #24
 8011b9a:	ecbd 8b0a 	vpop	{d8-d12}
 8011b9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ba2:	f000 baf1 	b.w	8012188 <__math_oflow>
 8011ba6:	f1bc 0f00 	cmp.w	ip, #0
 8011baa:	d10b      	bne.n	8011bc4 <pow+0x1ec>
 8011bac:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011ce0 <pow+0x308>
 8011bb0:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011bb4:	ec53 2b17 	vmov	r2, r3, d7
 8011bb8:	ee17 6a10 	vmov	r6, s14
 8011bbc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011bc0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011bc4:	4b4c      	ldr	r3, [pc, #304]	; (8011cf8 <pow+0x320>)
 8011bc6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011bca:	4423      	add	r3, r4
 8011bcc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011bd0:	1519      	asrs	r1, r3, #20
 8011bd2:	0d1b      	lsrs	r3, r3, #20
 8011bd4:	051b      	lsls	r3, r3, #20
 8011bd6:	eba4 0903 	sub.w	r9, r4, r3
 8011bda:	4b48      	ldr	r3, [pc, #288]	; (8011cfc <pow+0x324>)
 8011bdc:	ee04 1a10 	vmov	s8, r1
 8011be0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011be4:	f1b6 0800 	subs.w	r8, r6, #0
 8011be8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8011bec:	ec49 8b15 	vmov	d5, r8, r9
 8011bf0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011bf4:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011bf8:	ed93 7b00 	vldr	d7, [r3]
 8011bfc:	ed93 5b02 	vldr	d5, [r3, #8]
 8011c00:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011c04:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011c08:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8011c0c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011c10:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8011c14:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011c18:	ed93 5b04 	vldr	d5, [r3, #16]
 8011c1c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011c20:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011c24:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011c28:	ed93 4b08 	vldr	d4, [r3, #32]
 8011c2c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011c30:	eeb0 9b40 	vmov.f64	d9, d0
 8011c34:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011c38:	ed93 5b06 	vldr	d5, [r3, #24]
 8011c3c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011c40:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011c44:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011c48:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011c4c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011c50:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011c54:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011c58:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011c5c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011c60:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011c64:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011c68:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011c6c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011c70:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011c74:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011c78:	eeab ab05 	vfma.f64	d10, d11, d5
 8011c7c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011c80:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011c84:	ee17 3a90 	vmov	r3, s15
 8011c88:	eeb0 5b47 	vmov.f64	d5, d7
 8011c8c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011c90:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011c94:	18b2      	adds	r2, r6, r2
 8011c96:	2a3e      	cmp	r2, #62	; 0x3e
 8011c98:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011c9c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011ca0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011ca4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011ca8:	d92b      	bls.n	8011d02 <pow+0x32a>
 8011caa:	2a00      	cmp	r2, #0
 8011cac:	da0b      	bge.n	8011cc6 <pow+0x2ee>
 8011cae:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011cb2:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	f43f aef7 	beq.w	8011aaa <pow+0xd2>
 8011cbc:	eeb1 0b40 	vneg.f64	d0, d0
 8011cc0:	e6f3      	b.n	8011aaa <pow+0xd2>
 8011cc2:	2000      	movs	r0, #0
 8011cc4:	e77e      	b.n	8011bc4 <pow+0x1ec>
 8011cc6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011cca:	d919      	bls.n	8011d00 <pow+0x328>
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	f6bf af63 	bge.w	8011b98 <pow+0x1c0>
 8011cd2:	b006      	add	sp, #24
 8011cd4:	ecbd 8b0a 	vpop	{d8-d12}
 8011cd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cdc:	f000 ba4c 	b.w	8012178 <__math_uflow>
 8011ce0:	00000000 	.word	0x00000000
 8011ce4:	43300000 	.word	0x43300000
 8011ce8:	3ff00000 	.word	0x3ff00000
 8011cec:	fff00000 	.word	0xfff00000
 8011cf0:	ffe00000 	.word	0xffe00000
 8011cf4:	7fe00000 	.word	0x7fe00000
 8011cf8:	c0196aab 	.word	0xc0196aab
 8011cfc:	080127b8 	.word	0x080127b8
 8011d00:	2600      	movs	r6, #0
 8011d02:	495d      	ldr	r1, [pc, #372]	; (8011e78 <pow+0x4a0>)
 8011d04:	ed91 4b02 	vldr	d4, [r1, #8]
 8011d08:	ed91 3b00 	vldr	d3, [r1]
 8011d0c:	eeb0 6b44 	vmov.f64	d6, d4
 8011d10:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011d14:	ee16 5a10 	vmov	r5, s12
 8011d18:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011d1c:	ed91 4b04 	vldr	d4, [r1, #16]
 8011d20:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011d24:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011d28:	eeb0 0b47 	vmov.f64	d0, d7
 8011d2c:	ed91 7b06 	vldr	d7, [r1, #24]
 8011d30:	18dc      	adds	r4, r3, r3
 8011d32:	f104 030f 	add.w	r3, r4, #15
 8011d36:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011d3a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011d3e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011d42:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011d46:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011d4a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011d4e:	ed91 5b08 	vldr	d5, [r1, #32]
 8011d52:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011d56:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011d5a:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011d5e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011d62:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011d66:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011d6a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8011d6e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011d72:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011d76:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011d7a:	1940      	adds	r0, r0, r5
 8011d7c:	2700      	movs	r7, #0
 8011d7e:	eb17 020c 	adds.w	r2, r7, ip
 8011d82:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011d86:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011d8a:	2e00      	cmp	r6, #0
 8011d8c:	d15f      	bne.n	8011e4e <pow+0x476>
 8011d8e:	42bd      	cmp	r5, r7
 8011d90:	db13      	blt.n	8011dba <pow+0x3e2>
 8011d92:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011d96:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8011d9a:	4610      	mov	r0, r2
 8011d9c:	ec41 0b10 	vmov	d0, r0, r1
 8011da0:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011da4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011e60 <pow+0x488>
 8011da8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011dac:	b006      	add	sp, #24
 8011dae:	ecbd 8b0a 	vpop	{d8-d12}
 8011db2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011db6:	f000 ba1f 	b.w	80121f8 <__math_check_oflow>
 8011dba:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011dbe:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011dc2:	4610      	mov	r0, r2
 8011dc4:	ec41 0b15 	vmov	d5, r0, r1
 8011dc8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011dcc:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011dd0:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011dd4:	eeb0 3bc7 	vabs.f64	d3, d7
 8011dd8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8011ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011de0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011e68 <pow+0x490>
 8011de4:	d52a      	bpl.n	8011e3c <pow+0x464>
 8011de6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011dea:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df2:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011df6:	ee35 6b06 	vadd.f64	d6, d5, d6
 8011dfa:	bf48      	it	mi
 8011dfc:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011e00:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011e04:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011e08:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011e0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011e10:	ee37 7b03 	vadd.f64	d7, d7, d3
 8011e14:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011e18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e20:	d104      	bne.n	8011e2c <pow+0x454>
 8011e22:	4632      	mov	r2, r6
 8011e24:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011e28:	ec43 2b17 	vmov	d7, r2, r3
 8011e2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011e30:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011e34:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011e38:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011e3c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011e40:	b006      	add	sp, #24
 8011e42:	ecbd 8b0a 	vpop	{d8-d12}
 8011e46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e4a:	f000 b9cc 	b.w	80121e6 <__math_check_uflow>
 8011e4e:	ec43 2b10 	vmov	d0, r2, r3
 8011e52:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011e56:	e628      	b.n	8011aaa <pow+0xd2>
 8011e58:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011e70 <pow+0x498>
 8011e5c:	e625      	b.n	8011aaa <pow+0xd2>
 8011e5e:	bf00      	nop
 8011e60:	00000000 	.word	0x00000000
 8011e64:	7f000000 	.word	0x7f000000
 8011e68:	00000000 	.word	0x00000000
 8011e6c:	00100000 	.word	0x00100000
	...
 8011e78:	08013800 	.word	0x08013800

08011e7c <asin>:
 8011e7c:	b508      	push	{r3, lr}
 8011e7e:	ed2d 8b04 	vpush	{d8-d9}
 8011e82:	eeb0 8b40 	vmov.f64	d8, d0
 8011e86:	f000 f847 	bl	8011f18 <__ieee754_asin>
 8011e8a:	eeb4 8b48 	vcmp.f64	d8, d8
 8011e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e92:	eeb0 9b40 	vmov.f64	d9, d0
 8011e96:	d615      	bvs.n	8011ec4 <asin+0x48>
 8011e98:	eeb0 0b48 	vmov.f64	d0, d8
 8011e9c:	f000 f9c0 	bl	8012220 <fabs>
 8011ea0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011ea4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eac:	dd0a      	ble.n	8011ec4 <asin+0x48>
 8011eae:	f7fc fec7 	bl	800ec40 <__errno>
 8011eb2:	ecbd 8b04 	vpop	{d8-d9}
 8011eb6:	2321      	movs	r3, #33	; 0x21
 8011eb8:	6003      	str	r3, [r0, #0]
 8011eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011ebe:	4804      	ldr	r0, [pc, #16]	; (8011ed0 <asin+0x54>)
 8011ec0:	f7fe bdc6 	b.w	8010a50 <nan>
 8011ec4:	eeb0 0b49 	vmov.f64	d0, d9
 8011ec8:	ecbd 8b04 	vpop	{d8-d9}
 8011ecc:	bd08      	pop	{r3, pc}
 8011ece:	bf00      	nop
 8011ed0:	0801261f 	.word	0x0801261f
 8011ed4:	00000000 	.word	0x00000000

08011ed8 <sqrt>:
 8011ed8:	b508      	push	{r3, lr}
 8011eda:	ed2d 8b04 	vpush	{d8-d9}
 8011ede:	eeb0 8b40 	vmov.f64	d8, d0
 8011ee2:	f000 f927 	bl	8012134 <__ieee754_sqrt>
 8011ee6:	eeb4 8b48 	vcmp.f64	d8, d8
 8011eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eee:	d60c      	bvs.n	8011f0a <sqrt+0x32>
 8011ef0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8011f10 <sqrt+0x38>
 8011ef4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efc:	d505      	bpl.n	8011f0a <sqrt+0x32>
 8011efe:	f7fc fe9f 	bl	800ec40 <__errno>
 8011f02:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011f06:	2321      	movs	r3, #33	; 0x21
 8011f08:	6003      	str	r3, [r0, #0]
 8011f0a:	ecbd 8b04 	vpop	{d8-d9}
 8011f0e:	bd08      	pop	{r3, pc}
	...

08011f18 <__ieee754_asin>:
 8011f18:	b538      	push	{r3, r4, r5, lr}
 8011f1a:	ee10 5a90 	vmov	r5, s1
 8011f1e:	4b82      	ldr	r3, [pc, #520]	; (8012128 <__ieee754_asin+0x210>)
 8011f20:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011f24:	429c      	cmp	r4, r3
 8011f26:	ed2d 8b06 	vpush	{d8-d10}
 8011f2a:	dd19      	ble.n	8011f60 <__ieee754_asin+0x48>
 8011f2c:	ee10 3a10 	vmov	r3, s0
 8011f30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011f34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011f38:	4323      	orrs	r3, r4
 8011f3a:	d10c      	bne.n	8011f56 <__ieee754_asin+0x3e>
 8011f3c:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 80120b0 <__ieee754_asin+0x198>
 8011f40:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 80120b8 <__ieee754_asin+0x1a0>
 8011f44:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011f48:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011f4c:	eeb0 0b47 	vmov.f64	d0, d7
 8011f50:	ecbd 8b06 	vpop	{d8-d10}
 8011f54:	bd38      	pop	{r3, r4, r5, pc}
 8011f56:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011f5a:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011f5e:	e7f7      	b.n	8011f50 <__ieee754_asin+0x38>
 8011f60:	4b72      	ldr	r3, [pc, #456]	; (801212c <__ieee754_asin+0x214>)
 8011f62:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8011f66:	429c      	cmp	r4, r3
 8011f68:	dc0b      	bgt.n	8011f82 <__ieee754_asin+0x6a>
 8011f6a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8011f6e:	da52      	bge.n	8012016 <__ieee754_asin+0xfe>
 8011f70:	ed9f 7b53 	vldr	d7, [pc, #332]	; 80120c0 <__ieee754_asin+0x1a8>
 8011f74:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011f78:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8011f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f80:	dce6      	bgt.n	8011f50 <__ieee754_asin+0x38>
 8011f82:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011f86:	f000 f94b 	bl	8012220 <fabs>
 8011f8a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80120c8 <__ieee754_asin+0x1b0>
 8011f8e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011f92:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011f96:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80120d0 <__ieee754_asin+0x1b8>
 8011f9a:	eeb0 0b48 	vmov.f64	d0, d8
 8011f9e:	eea8 6b07 	vfma.f64	d6, d8, d7
 8011fa2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80120d8 <__ieee754_asin+0x1c0>
 8011fa6:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011faa:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80120e0 <__ieee754_asin+0x1c8>
 8011fae:	ed9f ab4e 	vldr	d10, [pc, #312]	; 80120e8 <__ieee754_asin+0x1d0>
 8011fb2:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011fb6:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 80120f0 <__ieee754_asin+0x1d8>
 8011fba:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011fbe:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80120f8 <__ieee754_asin+0x1e0>
 8011fc2:	eea7 ab08 	vfma.f64	d10, d7, d8
 8011fc6:	ee2a ab08 	vmul.f64	d10, d10, d8
 8011fca:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012100 <__ieee754_asin+0x1e8>
 8011fce:	eea8 7b06 	vfma.f64	d7, d8, d6
 8011fd2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012108 <__ieee754_asin+0x1f0>
 8011fd6:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011fda:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012110 <__ieee754_asin+0x1f8>
 8011fde:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011fe2:	eea7 9b08 	vfma.f64	d9, d7, d8
 8011fe6:	f000 f8a5 	bl	8012134 <__ieee754_sqrt>
 8011fea:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8011fee:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8011ff2:	4b4f      	ldr	r3, [pc, #316]	; (8012130 <__ieee754_asin+0x218>)
 8011ff4:	429c      	cmp	r4, r3
 8011ff6:	dd3d      	ble.n	8012074 <__ieee754_asin+0x15c>
 8011ff8:	eea0 0b05 	vfma.f64	d0, d0, d5
 8011ffc:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012118 <__ieee754_asin+0x200>
 8012000:	eea0 7b04 	vfma.f64	d7, d0, d4
 8012004:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 80120b8 <__ieee754_asin+0x1a0>
 8012008:	ee30 0b47 	vsub.f64	d0, d0, d7
 801200c:	2d00      	cmp	r5, #0
 801200e:	bfd8      	it	le
 8012010:	eeb1 0b40 	vnegle.f64	d0, d0
 8012014:	e79c      	b.n	8011f50 <__ieee754_asin+0x38>
 8012016:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80120c8 <__ieee754_asin+0x1b0>
 801201a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801201e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80120d0 <__ieee754_asin+0x1b8>
 8012022:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012026:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80120d8 <__ieee754_asin+0x1c0>
 801202a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801202e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80120e0 <__ieee754_asin+0x1c8>
 8012032:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012036:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80120f0 <__ieee754_asin+0x1d8>
 801203a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801203e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80120e8 <__ieee754_asin+0x1d0>
 8012042:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 80120f8 <__ieee754_asin+0x1e0>
 8012046:	eea5 6b07 	vfma.f64	d6, d5, d7
 801204a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801204e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012100 <__ieee754_asin+0x1e8>
 8012052:	eea7 5b04 	vfma.f64	d5, d7, d4
 8012056:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8012108 <__ieee754_asin+0x1f0>
 801205a:	eea5 4b07 	vfma.f64	d4, d5, d7
 801205e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012110 <__ieee754_asin+0x1f8>
 8012062:	eea4 5b07 	vfma.f64	d5, d4, d7
 8012066:	eea5 9b07 	vfma.f64	d9, d5, d7
 801206a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801206e:	eea0 0b07 	vfma.f64	d0, d0, d7
 8012072:	e76d      	b.n	8011f50 <__ieee754_asin+0x38>
 8012074:	ec53 2b10 	vmov	r2, r3, d0
 8012078:	2200      	movs	r2, #0
 801207a:	ec43 2b16 	vmov	d6, r2, r3
 801207e:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012082:	eea6 8b46 	vfms.f64	d8, d6, d6
 8012086:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801208a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80120b0 <__ieee754_asin+0x198>
 801208e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012092:	eea3 7b44 	vfms.f64	d7, d3, d4
 8012096:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801209a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8012120 <__ieee754_asin+0x208>
 801209e:	eeb0 0b45 	vmov.f64	d0, d5
 80120a2:	eea6 0b44 	vfms.f64	d0, d6, d4
 80120a6:	ee37 0b40 	vsub.f64	d0, d7, d0
 80120aa:	ee35 0b40 	vsub.f64	d0, d5, d0
 80120ae:	e7ad      	b.n	801200c <__ieee754_asin+0xf4>
 80120b0:	33145c07 	.word	0x33145c07
 80120b4:	3c91a626 	.word	0x3c91a626
 80120b8:	54442d18 	.word	0x54442d18
 80120bc:	3ff921fb 	.word	0x3ff921fb
 80120c0:	8800759c 	.word	0x8800759c
 80120c4:	7e37e43c 	.word	0x7e37e43c
 80120c8:	0dfdf709 	.word	0x0dfdf709
 80120cc:	3f023de1 	.word	0x3f023de1
 80120d0:	7501b288 	.word	0x7501b288
 80120d4:	3f49efe0 	.word	0x3f49efe0
 80120d8:	b5688f3b 	.word	0xb5688f3b
 80120dc:	bfa48228 	.word	0xbfa48228
 80120e0:	0e884455 	.word	0x0e884455
 80120e4:	3fc9c155 	.word	0x3fc9c155
 80120e8:	55555555 	.word	0x55555555
 80120ec:	3fc55555 	.word	0x3fc55555
 80120f0:	03eb6f7d 	.word	0x03eb6f7d
 80120f4:	bfd4d612 	.word	0xbfd4d612
 80120f8:	b12e9282 	.word	0xb12e9282
 80120fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8012100:	1b8d0159 	.word	0x1b8d0159
 8012104:	bfe6066c 	.word	0xbfe6066c
 8012108:	9c598ac8 	.word	0x9c598ac8
 801210c:	40002ae5 	.word	0x40002ae5
 8012110:	1c8a2d4b 	.word	0x1c8a2d4b
 8012114:	c0033a27 	.word	0xc0033a27
 8012118:	33145c07 	.word	0x33145c07
 801211c:	bc91a626 	.word	0xbc91a626
 8012120:	54442d18 	.word	0x54442d18
 8012124:	3fe921fb 	.word	0x3fe921fb
 8012128:	3fefffff 	.word	0x3fefffff
 801212c:	3fdfffff 	.word	0x3fdfffff
 8012130:	3fef3332 	.word	0x3fef3332

08012134 <__ieee754_sqrt>:
 8012134:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012138:	4770      	bx	lr

0801213a <with_errno>:
 801213a:	b513      	push	{r0, r1, r4, lr}
 801213c:	4604      	mov	r4, r0
 801213e:	ed8d 0b00 	vstr	d0, [sp]
 8012142:	f7fc fd7d 	bl	800ec40 <__errno>
 8012146:	ed9d 0b00 	vldr	d0, [sp]
 801214a:	6004      	str	r4, [r0, #0]
 801214c:	b002      	add	sp, #8
 801214e:	bd10      	pop	{r4, pc}

08012150 <xflow>:
 8012150:	b082      	sub	sp, #8
 8012152:	b158      	cbz	r0, 801216c <xflow+0x1c>
 8012154:	eeb1 7b40 	vneg.f64	d7, d0
 8012158:	ed8d 7b00 	vstr	d7, [sp]
 801215c:	ed9d 7b00 	vldr	d7, [sp]
 8012160:	2022      	movs	r0, #34	; 0x22
 8012162:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012166:	b002      	add	sp, #8
 8012168:	f7ff bfe7 	b.w	801213a <with_errno>
 801216c:	eeb0 7b40 	vmov.f64	d7, d0
 8012170:	e7f2      	b.n	8012158 <xflow+0x8>
 8012172:	0000      	movs	r0, r0
 8012174:	0000      	movs	r0, r0
	...

08012178 <__math_uflow>:
 8012178:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012180 <__math_uflow+0x8>
 801217c:	f7ff bfe8 	b.w	8012150 <xflow>
 8012180:	00000000 	.word	0x00000000
 8012184:	10000000 	.word	0x10000000

08012188 <__math_oflow>:
 8012188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012190 <__math_oflow+0x8>
 801218c:	f7ff bfe0 	b.w	8012150 <xflow>
 8012190:	00000000 	.word	0x00000000
 8012194:	70000000 	.word	0x70000000

08012198 <__math_divzero>:
 8012198:	b082      	sub	sp, #8
 801219a:	2800      	cmp	r0, #0
 801219c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80121a0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80121a4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80121a8:	ed8d 7b00 	vstr	d7, [sp]
 80121ac:	ed9d 0b00 	vldr	d0, [sp]
 80121b0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80121c0 <__math_divzero+0x28>
 80121b4:	2022      	movs	r0, #34	; 0x22
 80121b6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80121ba:	b002      	add	sp, #8
 80121bc:	f7ff bfbd 	b.w	801213a <with_errno>
	...

080121c8 <__math_invalid>:
 80121c8:	eeb0 7b40 	vmov.f64	d7, d0
 80121cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80121d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80121d8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80121dc:	d602      	bvs.n	80121e4 <__math_invalid+0x1c>
 80121de:	2021      	movs	r0, #33	; 0x21
 80121e0:	f7ff bfab 	b.w	801213a <with_errno>
 80121e4:	4770      	bx	lr

080121e6 <__math_check_uflow>:
 80121e6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80121ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ee:	d102      	bne.n	80121f6 <__math_check_uflow+0x10>
 80121f0:	2022      	movs	r0, #34	; 0x22
 80121f2:	f7ff bfa2 	b.w	801213a <with_errno>
 80121f6:	4770      	bx	lr

080121f8 <__math_check_oflow>:
 80121f8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012218 <__math_check_oflow+0x20>
 80121fc:	eeb0 7bc0 	vabs.f64	d7, d0
 8012200:	eeb4 7b46 	vcmp.f64	d7, d6
 8012204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012208:	dd02      	ble.n	8012210 <__math_check_oflow+0x18>
 801220a:	2022      	movs	r0, #34	; 0x22
 801220c:	f7ff bf95 	b.w	801213a <with_errno>
 8012210:	4770      	bx	lr
 8012212:	bf00      	nop
 8012214:	f3af 8000 	nop.w
 8012218:	ffffffff 	.word	0xffffffff
 801221c:	7fefffff 	.word	0x7fefffff

08012220 <fabs>:
 8012220:	ec51 0b10 	vmov	r0, r1, d0
 8012224:	ee10 2a10 	vmov	r2, s0
 8012228:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801222c:	ec43 2b10 	vmov	d0, r2, r3
 8012230:	4770      	bx	lr
	...

08012234 <_init>:
 8012234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012236:	bf00      	nop
 8012238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801223a:	bc08      	pop	{r3}
 801223c:	469e      	mov	lr, r3
 801223e:	4770      	bx	lr

08012240 <_fini>:
 8012240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012242:	bf00      	nop
 8012244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012246:	bc08      	pop	{r3}
 8012248:	469e      	mov	lr, r3
 801224a:	4770      	bx	lr
