
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010de4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  08011088  08011088  00021088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012dd0  08012dd0  00030250  2**0
                  CONTENTS
  4 .ARM          00000008  08012dd0  08012dd0  00022dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012dd8  08012dd8  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012dd8  08012dd8  00022dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ddc  08012ddc  00022ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  24000000  08012de0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  24000250  08013030  00030250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000a0c  08013030  00030a0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c332  00000000  00000000  0003027e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000345a  00000000  00000000  0004c5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0004fa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00050cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000541e  00000000  00000000  00051e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb8e  00000000  00000000  00057236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165912  00000000  00000000  00073dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d96d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a4  00000000  00000000  001d9728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000250 	.word	0x24000250
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801106c 	.word	0x0801106c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000254 	.word	0x24000254
 80002dc:	0801106c 	.word	0x0801106c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b74      	ldr	r3, [pc, #464]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a72      	ldr	r2, [pc, #456]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b70      	ldr	r3, [pc, #448]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b6c      	ldr	r3, [pc, #432]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a6b      	ldr	r2, [pc, #428]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b68      	ldr	r3, [pc, #416]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b65      	ldr	r3, [pc, #404]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a63      	ldr	r2, [pc, #396]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b61      	ldr	r3, [pc, #388]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a5c      	ldr	r2, [pc, #368]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b59      	ldr	r3, [pc, #356]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b56      	ldr	r3, [pc, #344]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a54      	ldr	r2, [pc, #336]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b52      	ldr	r3, [pc, #328]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a4d      	ldr	r2, [pc, #308]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a45      	ldr	r2, [pc, #276]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b6a:	483f      	ldr	r0, [pc, #252]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000b6c:	f006 f8e8 	bl	8006d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2170      	movs	r1, #112	; 0x70
 8000b74:	483d      	ldr	r0, [pc, #244]	; (8000c6c <MX_GPIO_Init+0x1f0>)
 8000b76:	f006 f8e3 	bl	8006d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8000b7a:	233f      	movs	r3, #63	; 0x3f
 8000b7c:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4838      	ldr	r0, [pc, #224]	; (8000c70 <MX_GPIO_Init+0x1f4>)
 8000b90:	f005 ff0e 	bl	80069b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482f      	ldr	r0, [pc, #188]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000bac:	f005 ff00 	bl	80069b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000bb0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4827      	ldr	r0, [pc, #156]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000bca:	f005 fef1 	bl	80069b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8000bce:	2370      	movs	r3, #112	; 0x70
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4821      	ldr	r0, [pc, #132]	; (8000c6c <MX_GPIO_Init+0x1f0>)
 8000be6:	f005 fee3 	bl	80069b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	2006      	movs	r0, #6
 8000bf0:	f005 f937 	bl	8005e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bf4:	2006      	movs	r0, #6
 8000bf6:	f005 f94e 	bl	8005e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f005 f92f 	bl	8005e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c04:	2007      	movs	r0, #7
 8000c06:	f005 f946 	bl	8005e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2008      	movs	r0, #8
 8000c10:	f005 f927 	bl	8005e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c14:	2008      	movs	r0, #8
 8000c16:	f005 f93e 	bl	8005e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	2009      	movs	r0, #9
 8000c20:	f005 f91f 	bl	8005e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c24:	2009      	movs	r0, #9
 8000c26:	f005 f936 	bl	8005e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	200a      	movs	r0, #10
 8000c30:	f005 f917 	bl	8005e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c34:	200a      	movs	r0, #10
 8000c36:	f005 f92e 	bl	8005e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	2017      	movs	r0, #23
 8000c40:	f005 f90f 	bl	8005e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c44:	2017      	movs	r0, #23
 8000c46:	f005 f926 	bl	8005e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	2028      	movs	r0, #40	; 0x28
 8000c50:	f005 f907 	bl	8005e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c54:	2028      	movs	r0, #40	; 0x28
 8000c56:	f005 f91e 	bl	8005e96 <HAL_NVIC_EnableIRQ>

}
 8000c5a:	bf00      	nop
 8000c5c:	3730      	adds	r7, #48	; 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	58024400 	.word	0x58024400
 8000c68:	58020800 	.word	0x58020800
 8000c6c:	58020c00 	.word	0x58020c00
 8000c70:	58021000 	.word	0x58021000
 8000c74:	00000000 	.word	0x00000000

08000c78 <homing>:

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

	homAprox = true;
 8000c7c:	4bb0      	ldr	r3, [pc, #704]	; (8000f40 <homing+0x2c8>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000c82:	4bb0      	ldr	r3, [pc, #704]	; (8000f44 <homing+0x2cc>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000c88:	4baf      	ldr	r3, [pc, #700]	; (8000f48 <homing+0x2d0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2020 	strb.w	r2, [r3, #32]
    motor2.hom = false;
 8000c90:	4bae      	ldr	r3, [pc, #696]	; (8000f4c <homing+0x2d4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2020 	strb.w	r2, [r3, #32]
    motor3.hom = false;
 8000c98:	4bad      	ldr	r3, [pc, #692]	; (8000f50 <homing+0x2d8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca6:	48ab      	ldr	r0, [pc, #684]	; (8000f54 <homing+0x2dc>)
 8000ca8:	f006 f84a 	bl	8006d40 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb2:	48a8      	ldr	r0, [pc, #672]	; (8000f54 <homing+0x2dc>)
 8000cb4:	f006 f844 	bl	8006d40 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cbe:	48a5      	ldr	r0, [pc, #660]	; (8000f54 <homing+0x2dc>)
 8000cc0:	f006 f83e 	bl	8006d40 <HAL_GPIO_WritePin>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000cc4:	2006      	movs	r0, #6
 8000cc6:	f005 f8f4 	bl	8005eb2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f005 f8f1 	bl	8005eb2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000cd0:	2008      	movs	r0, #8
 8000cd2:	f005 f8ee 	bl	8005eb2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000cd6:	2009      	movs	r0, #9
 8000cd8:	f005 f8eb 	bl	8005eb2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f005 f8e8 	bl	8005eb2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000ce2:	2017      	movs	r0, #23
 8000ce4:	f005 f8e5 	bl	8005eb2 <HAL_NVIC_DisableIRQ>

    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8000ce8:	2100      	movs	r1, #0
 8000cea:	489b      	ldr	r0, [pc, #620]	; (8000f58 <homing+0x2e0>)
 8000cec:	f008 febe 	bl	8009a6c <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	489a      	ldr	r0, [pc, #616]	; (8000f5c <homing+0x2e4>)
 8000cf4:	f008 feba 	bl	8009a6c <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4899      	ldr	r0, [pc, #612]	; (8000f60 <homing+0x2e8>)
 8000cfc:	f008 feb6 	bl	8009a6c <HAL_TIM_PWM_Stop>


	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm)); //Escritura del registro ARR
 8000d00:	4b98      	ldr	r3, [pc, #608]	; (8000f64 <homing+0x2ec>)
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d14:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8000f28 <homing+0x2b0>
 8000d18:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d1c:	4b92      	ldr	r3, [pc, #584]	; (8000f68 <homing+0x2f0>)
 8000d1e:	ed93 7b00 	vldr	d7, [r3]
 8000d22:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8000f30 <homing+0x2b8>
 8000d26:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d2a:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8000f38 <homing+0x2c0>
 8000d2e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d36:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d3e:	4b86      	ldr	r3, [pc, #536]	; (8000f58 <homing+0x2e0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d46:	ee17 2a90 	vmov	r2, s15
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d4c:	4b85      	ldr	r3, [pc, #532]	; (8000f64 <homing+0x2ec>)
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	ee07 3a90 	vmov	s15, r3
 8000d54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d58:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d60:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8000f28 <homing+0x2b0>
 8000d64:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d68:	4b7f      	ldr	r3, [pc, #508]	; (8000f68 <homing+0x2f0>)
 8000d6a:	ed93 7b00 	vldr	d7, [r3]
 8000d6e:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8000f30 <homing+0x2b8>
 8000d72:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d76:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8000f38 <homing+0x2c0>
 8000d7a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d82:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d8e:	ee17 2a90 	vmov	r2, s15
 8000d92:	4b71      	ldr	r3, [pc, #452]	; (8000f58 <homing+0x2e0>)
 8000d94:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm));
 8000d96:	4b73      	ldr	r3, [pc, #460]	; (8000f64 <homing+0x2ec>)
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000da2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000da6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000daa:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8000f28 <homing+0x2b0>
 8000dae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000db2:	4b6d      	ldr	r3, [pc, #436]	; (8000f68 <homing+0x2f0>)
 8000db4:	ed93 7b00 	vldr	d7, [r3]
 8000db8:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000f30 <homing+0x2b8>
 8000dbc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000dc0:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8000f38 <homing+0x2c0>
 8000dc4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dc8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dcc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dd4:	4b61      	ldr	r3, [pc, #388]	; (8000f5c <homing+0x2e4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ddc:	ee17 2a90 	vmov	r2, s15
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de2:	4b60      	ldr	r3, [pc, #384]	; (8000f64 <homing+0x2ec>)
 8000de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000df2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000df6:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000f28 <homing+0x2b0>
 8000dfa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dfe:	4b5a      	ldr	r3, [pc, #360]	; (8000f68 <homing+0x2f0>)
 8000e00:	ed93 7b00 	vldr	d7, [r3]
 8000e04:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000f30 <homing+0x2b8>
 8000e08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e0c:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8000f38 <homing+0x2c0>
 8000e10:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e24:	ee17 2a90 	vmov	r2, s15
 8000e28:	4b4c      	ldr	r3, [pc, #304]	; (8000f5c <homing+0x2e4>)
 8000e2a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm));
 8000e2c:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <homing+0x2ec>)
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	ee07 3a90 	vmov	s15, r3
 8000e34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e40:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000f28 <homing+0x2b0>
 8000e44:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e48:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <homing+0x2f0>)
 8000e4a:	ed93 7b00 	vldr	d7, [r3]
 8000e4e:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8000f30 <homing+0x2b8>
 8000e52:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e56:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8000f38 <homing+0x2c0>
 8000e5a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e62:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <homing+0x2e8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e72:	ee17 2a90 	vmov	r2, s15
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e78:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <homing+0x2ec>)
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e8c:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000f28 <homing+0x2b0>
 8000e90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e94:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <homing+0x2f0>)
 8000e96:	ed93 7b00 	vldr	d7, [r3]
 8000e9a:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000f30 <homing+0x2b8>
 8000e9e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000ea2:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000f38 <homing+0x2c0>
 8000ea6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000eaa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000eae:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000eb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000eb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000eba:	ee17 2a90 	vmov	r2, s15
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <homing+0x2e8>)
 8000ec0:	60da      	str	r2, [r3, #12]



	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <homing+0x2ec>)
 8000ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ece:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ed2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <homing+0x2ec>)
 8000ed8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000edc:	ee17 2a90 	vmov	r2, s15
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <homing+0x2f4>)
 8000ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000eee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ef2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <homing+0x2f4>)
 8000ef8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000efc:	ee17 2a90 	vmov	r2, s15
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <homing+0x2f8>)
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <homing+0x2f8>)
 8000f18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f1c:	ee17 2a90 	vmov	r2, s15
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 8000f22:	e06f      	b.n	8001004 <homing+0x38c>
 8000f24:	f3af 8000 	nop.w
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	418e8480 	.word	0x418e8480
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40bf4000 	.word	0x40bf4000
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	404e0000 	.word	0x404e0000
 8000f40:	2400026c 	.word	0x2400026c
 8000f44:	2400026d 	.word	0x2400026d
 8000f48:	24000358 	.word	0x24000358
 8000f4c:	24000398 	.word	0x24000398
 8000f50:	240003d8 	.word	0x240003d8
 8000f54:	58020800 	.word	0x58020800
 8000f58:	240006a8 	.word	0x240006a8
 8000f5c:	240006f4 	.word	0x240006f4
 8000f60:	24000740 	.word	0x24000740
 8000f64:	40001800 	.word	0x40001800
 8000f68:	24000000 	.word	0x24000000
 8000f6c:	40001c00 	.word	0x40001c00
 8000f70:	40002000 	.word	0x40002000

        Start_PWM_MOTOR_1;
 8000f74:	2100      	movs	r1, #0
 8000f76:	4890      	ldr	r0, [pc, #576]	; (80011b8 <homing+0x540>)
 8000f78:	f008 fc6a 	bl	8009850 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	488f      	ldr	r0, [pc, #572]	; (80011bc <homing+0x544>)
 8000f80:	f008 fc66 	bl	8009850 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 8000f84:	2100      	movs	r1, #0
 8000f86:	488e      	ldr	r0, [pc, #568]	; (80011c0 <homing+0x548>)
 8000f88:	f008 fc62 	bl	8009850 <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	488d      	ldr	r0, [pc, #564]	; (80011c4 <homing+0x54c>)
 8000f90:	f005 febe 	bl	8006d10 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00d      	beq.n	8000fb6 <homing+0x33e>
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	4889      	ldr	r0, [pc, #548]	; (80011c4 <homing+0x54c>)
 8000f9e:	f005 feb7 	bl	8006d10 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <homing+0x33e>
 8000fa8:	2110      	movs	r1, #16
 8000faa:	4886      	ldr	r0, [pc, #536]	; (80011c4 <homing+0x54c>)
 8000fac:	f005 feb0 	bl	8006d10 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d126      	bne.n	8001004 <homing+0x38c>
            HAL_Delay(30);
 8000fb6:	201e      	movs	r0, #30
 8000fb8:	f004 fe24 	bl	8005c04 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4881      	ldr	r0, [pc, #516]	; (80011c4 <homing+0x54c>)
 8000fc0:	f005 fea6 	bl	8006d10 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00d      	beq.n	8000fe6 <homing+0x36e>
 8000fca:	2104      	movs	r1, #4
 8000fcc:	487d      	ldr	r0, [pc, #500]	; (80011c4 <homing+0x54c>)
 8000fce:	f005 fe9f 	bl	8006d10 <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <homing+0x36e>
 8000fd8:	2110      	movs	r1, #16
 8000fda:	487a      	ldr	r0, [pc, #488]	; (80011c4 <homing+0x54c>)
 8000fdc:	f005 fe98 	bl	8006d10 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10e      	bne.n	8001004 <homing+0x38c>

                Stop_PWM_MOTOR_1;
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4873      	ldr	r0, [pc, #460]	; (80011b8 <homing+0x540>)
 8000fea:	f008 fd3f 	bl	8009a6c <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4872      	ldr	r0, [pc, #456]	; (80011bc <homing+0x544>)
 8000ff2:	f008 fd3b 	bl	8009a6c <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4871      	ldr	r0, [pc, #452]	; (80011c0 <homing+0x548>)
 8000ffa:	f008 fd37 	bl	8009a6c <HAL_TIM_PWM_Stop>

                homAprox = false;
 8000ffe:	4b72      	ldr	r3, [pc, #456]	; (80011c8 <homing+0x550>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 8001004:	4b70      	ldr	r3, [pc, #448]	; (80011c8 <homing+0x550>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1b3      	bne.n	8000f74 <homing+0x2fc>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 800100c:	e14d      	b.n	80012aa <homing+0x632>

        if (ES1s_PRESSED && !motor1.hom) {
 800100e:	2101      	movs	r1, #1
 8001010:	486c      	ldr	r0, [pc, #432]	; (80011c4 <homing+0x54c>)
 8001012:	f005 fe7d 	bl	8006d10 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d159      	bne.n	80010d0 <homing+0x458>
 800101c:	4b6b      	ldr	r3, [pc, #428]	; (80011cc <homing+0x554>)
 800101e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d154      	bne.n	80010d0 <homing+0x458>

            Stop_PWM_MOTOR_2;
 8001026:	2100      	movs	r1, #0
 8001028:	4864      	ldr	r0, [pc, #400]	; (80011bc <homing+0x544>)
 800102a:	f008 fd1f 	bl	8009a6c <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 800102e:	2100      	movs	r1, #0
 8001030:	4863      	ldr	r0, [pc, #396]	; (80011c0 <homing+0x548>)
 8001032:	f008 fd1b 	bl	8009a6c <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 8001036:	201e      	movs	r0, #30
 8001038:	f004 fde4 	bl	8005c04 <HAL_Delay>

            while(ES1s_PRESSED){
 800103c:	e010      	b.n	8001060 <homing+0x3e8>

                negative_Dir_MOTOR_1;
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001044:	4862      	ldr	r0, [pc, #392]	; (80011d0 <homing+0x558>)
 8001046:	f005 fe7b 	bl	8006d40 <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 800104a:	2000      	movs	r0, #0
 800104c:	f004 fdda 	bl	8005c04 <HAL_Delay>
                Start_PWM_MOTOR_1;
 8001050:	2100      	movs	r1, #0
 8001052:	4859      	ldr	r0, [pc, #356]	; (80011b8 <homing+0x540>)
 8001054:	f008 fbfc 	bl	8009850 <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 8001058:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105c:	f004 fdd2 	bl	8005c04 <HAL_Delay>
            while(ES1s_PRESSED){
 8001060:	2101      	movs	r1, #1
 8001062:	4858      	ldr	r0, [pc, #352]	; (80011c4 <homing+0x54c>)
 8001064:	f005 fe54 	bl	8006d10 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0e7      	beq.n	800103e <homing+0x3c6>

            }

            Stop_PWM_MOTOR_1;
 800106e:	2100      	movs	r1, #0
 8001070:	4851      	ldr	r0, [pc, #324]	; (80011b8 <homing+0x540>)
 8001072:	f008 fcfb 	bl	8009a6c <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 8001076:	4b55      	ldr	r3, [pc, #340]	; (80011cc <homing+0x554>)
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2204      	movs	r2, #4
 8001082:	4954      	ldr	r1, [pc, #336]	; (80011d4 <homing+0x55c>)
 8001084:	4854      	ldr	r0, [pc, #336]	; (80011d8 <homing+0x560>)
 8001086:	f00a f9e9 	bl	800b45c <HAL_UART_Transmit>
            HAL_Delay(30);
 800108a:	201e      	movs	r0, #30
 800108c:	f004 fdba 	bl	8005c04 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 8001090:	2104      	movs	r1, #4
 8001092:	484c      	ldr	r0, [pc, #304]	; (80011c4 <homing+0x54c>)
 8001094:	f005 fe3c 	bl	8006d10 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d008      	beq.n	80010b0 <homing+0x438>
 800109e:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <homing+0x564>)
 80010a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <homing+0x438>
 80010a8:	2100      	movs	r1, #0
 80010aa:	4844      	ldr	r0, [pc, #272]	; (80011bc <homing+0x544>)
 80010ac:	f008 fbd0 	bl	8009850 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 80010b0:	2110      	movs	r1, #16
 80010b2:	4844      	ldr	r0, [pc, #272]	; (80011c4 <homing+0x54c>)
 80010b4:	f005 fe2c 	bl	8006d10 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d008      	beq.n	80010d0 <homing+0x458>
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <homing+0x568>)
 80010c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <homing+0x458>
 80010c8:	2100      	movs	r1, #0
 80010ca:	483d      	ldr	r0, [pc, #244]	; (80011c0 <homing+0x548>)
 80010cc:	f008 fbc0 	bl	8009850 <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 80010d0:	2104      	movs	r1, #4
 80010d2:	483c      	ldr	r0, [pc, #240]	; (80011c4 <homing+0x54c>)
 80010d4:	f005 fe1c 	bl	8006d10 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d159      	bne.n	8001192 <homing+0x51a>
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <homing+0x564>)
 80010e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d154      	bne.n	8001192 <homing+0x51a>

            Stop_PWM_MOTOR_1;
 80010e8:	2100      	movs	r1, #0
 80010ea:	4833      	ldr	r0, [pc, #204]	; (80011b8 <homing+0x540>)
 80010ec:	f008 fcbe 	bl	8009a6c <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80010f0:	2100      	movs	r1, #0
 80010f2:	4833      	ldr	r0, [pc, #204]	; (80011c0 <homing+0x548>)
 80010f4:	f008 fcba 	bl	8009a6c <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 80010f8:	201e      	movs	r0, #30
 80010fa:	f004 fd83 	bl	8005c04 <HAL_Delay>

            while(ES2s_PRESSED){
 80010fe:	e010      	b.n	8001122 <homing+0x4aa>

                negative_Dir_MOTOR_2;
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001106:	4832      	ldr	r0, [pc, #200]	; (80011d0 <homing+0x558>)
 8001108:	f005 fe1a 	bl	8006d40 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 800110c:	2000      	movs	r0, #0
 800110e:	f004 fd79 	bl	8005c04 <HAL_Delay>
                Start_PWM_MOTOR_2;
 8001112:	2100      	movs	r1, #0
 8001114:	4829      	ldr	r0, [pc, #164]	; (80011bc <homing+0x544>)
 8001116:	f008 fb9b 	bl	8009850 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 800111a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800111e:	f004 fd71 	bl	8005c04 <HAL_Delay>
            while(ES2s_PRESSED){
 8001122:	2104      	movs	r1, #4
 8001124:	4827      	ldr	r0, [pc, #156]	; (80011c4 <homing+0x54c>)
 8001126:	f005 fdf3 	bl	8006d10 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0e7      	beq.n	8001100 <homing+0x488>

            }

            Stop_PWM_MOTOR_2;
 8001130:	2100      	movs	r1, #0
 8001132:	4822      	ldr	r0, [pc, #136]	; (80011bc <homing+0x544>)
 8001134:	f008 fc9a 	bl	8009a6c <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <homing+0x564>)
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	2204      	movs	r2, #4
 8001144:	4927      	ldr	r1, [pc, #156]	; (80011e4 <homing+0x56c>)
 8001146:	4824      	ldr	r0, [pc, #144]	; (80011d8 <homing+0x560>)
 8001148:	f00a f988 	bl	800b45c <HAL_UART_Transmit>
            HAL_Delay(30);
 800114c:	201e      	movs	r0, #30
 800114e:	f004 fd59 	bl	8005c04 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 8001152:	2101      	movs	r1, #1
 8001154:	481b      	ldr	r0, [pc, #108]	; (80011c4 <homing+0x54c>)
 8001156:	f005 fddb 	bl	8006d10 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <homing+0x4fa>
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <homing+0x554>)
 8001162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <homing+0x4fa>
 800116a:	2100      	movs	r1, #0
 800116c:	4812      	ldr	r0, [pc, #72]	; (80011b8 <homing+0x540>)
 800116e:	f008 fb6f 	bl	8009850 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001172:	2110      	movs	r1, #16
 8001174:	4813      	ldr	r0, [pc, #76]	; (80011c4 <homing+0x54c>)
 8001176:	f005 fdcb 	bl	8006d10 <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <homing+0x51a>
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <homing+0x568>)
 8001182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d103      	bne.n	8001192 <homing+0x51a>
 800118a:	2100      	movs	r1, #0
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <homing+0x548>)
 800118e:	f008 fb5f 	bl	8009850 <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 8001192:	2110      	movs	r1, #16
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <homing+0x54c>)
 8001196:	f005 fdbb 	bl	8006d10 <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d16c      	bne.n	800127a <homing+0x602>

            Stop_PWM_MOTOR_1;
 80011a0:	2100      	movs	r1, #0
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <homing+0x540>)
 80011a4:	f008 fc62 	bl	8009a6c <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 80011a8:	2100      	movs	r1, #0
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <homing+0x544>)
 80011ac:	f008 fc5e 	bl	8009a6c <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 80011b0:	201e      	movs	r0, #30
 80011b2:	f004 fd27 	bl	8005c04 <HAL_Delay>

            while(ES3s_PRESSED){
 80011b6:	e028      	b.n	800120a <homing+0x592>
 80011b8:	240006a8 	.word	0x240006a8
 80011bc:	240006f4 	.word	0x240006f4
 80011c0:	24000740 	.word	0x24000740
 80011c4:	58021000 	.word	0x58021000
 80011c8:	2400026c 	.word	0x2400026c
 80011cc:	24000358 	.word	0x24000358
 80011d0:	58020800 	.word	0x58020800
 80011d4:	08011088 	.word	0x08011088
 80011d8:	24000968 	.word	0x24000968
 80011dc:	24000398 	.word	0x24000398
 80011e0:	240003d8 	.word	0x240003d8
 80011e4:	0801108c 	.word	0x0801108c

                negative_Dir_MOTOR_3;
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	4833      	ldr	r0, [pc, #204]	; (80012bc <homing+0x644>)
 80011f0:	f005 fda6 	bl	8006d40 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f004 fd05 	bl	8005c04 <HAL_Delay>
                Start_PWM_MOTOR_3;
 80011fa:	2100      	movs	r1, #0
 80011fc:	4830      	ldr	r0, [pc, #192]	; (80012c0 <homing+0x648>)
 80011fe:	f008 fb27 	bl	8009850 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 8001202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001206:	f004 fcfd 	bl	8005c04 <HAL_Delay>
            while(ES3s_PRESSED){
 800120a:	2110      	movs	r1, #16
 800120c:	482d      	ldr	r0, [pc, #180]	; (80012c4 <homing+0x64c>)
 800120e:	f005 fd7f 	bl	8006d10 <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0e7      	beq.n	80011e8 <homing+0x570>
            }

            Stop_PWM_MOTOR_3;
 8001218:	2100      	movs	r1, #0
 800121a:	4829      	ldr	r0, [pc, #164]	; (80012c0 <homing+0x648>)
 800121c:	f008 fc26 	bl	8009a6c <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <homing+0x650>)
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	2204      	movs	r2, #4
 800122c:	4927      	ldr	r1, [pc, #156]	; (80012cc <homing+0x654>)
 800122e:	4828      	ldr	r0, [pc, #160]	; (80012d0 <homing+0x658>)
 8001230:	f00a f914 	bl	800b45c <HAL_UART_Transmit>
			HAL_Delay(30);
 8001234:	201e      	movs	r0, #30
 8001236:	f004 fce5 	bl	8005c04 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 800123a:	2101      	movs	r1, #1
 800123c:	4821      	ldr	r0, [pc, #132]	; (80012c4 <homing+0x64c>)
 800123e:	f005 fd67 	bl	8006d10 <HAL_GPIO_ReadPin>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <homing+0x5e2>
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <homing+0x65c>)
 800124a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <homing+0x5e2>
 8001252:	2100      	movs	r1, #0
 8001254:	4820      	ldr	r0, [pc, #128]	; (80012d8 <homing+0x660>)
 8001256:	f008 fafb 	bl	8009850 <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 800125a:	2104      	movs	r1, #4
 800125c:	4819      	ldr	r0, [pc, #100]	; (80012c4 <homing+0x64c>)
 800125e:	f005 fd57 	bl	8006d10 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <homing+0x602>
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <homing+0x664>)
 800126a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <homing+0x602>
 8001272:	2100      	movs	r1, #0
 8001274:	481a      	ldr	r0, [pc, #104]	; (80012e0 <homing+0x668>)
 8001276:	f008 faeb 	bl	8009850 <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <homing+0x65c>)
 800127c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d012      	beq.n	80012aa <homing+0x632>
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <homing+0x664>)
 8001286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00d      	beq.n	80012aa <homing+0x632>
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <homing+0x650>)
 8001290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d008      	beq.n	80012aa <homing+0x632>
        	homFin=true;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <homing+0x66c>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 800129e:	2364      	movs	r3, #100	; 0x64
 80012a0:	2204      	movs	r2, #4
 80012a2:	4911      	ldr	r1, [pc, #68]	; (80012e8 <homing+0x670>)
 80012a4:	480a      	ldr	r0, [pc, #40]	; (80012d0 <homing+0x658>)
 80012a6:	f00a f8d9 	bl	800b45c <HAL_UART_Transmit>
    while (!homFin){
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <homing+0x66c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f43f aead 	beq.w	800100e <homing+0x396>
        }
       }


    }
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	58020800 	.word	0x58020800
 80012c0:	24000740 	.word	0x24000740
 80012c4:	58021000 	.word	0x58021000
 80012c8:	240003d8 	.word	0x240003d8
 80012cc:	08011090 	.word	0x08011090
 80012d0:	24000968 	.word	0x24000968
 80012d4:	24000358 	.word	0x24000358
 80012d8:	240006a8 	.word	0x240006a8
 80012dc:	24000398 	.word	0x24000398
 80012e0:	240006f4 	.word	0x240006f4
 80012e4:	24000419 	.word	0x24000419
 80012e8:	08011094 	.word	0x08011094

080012ec <interpretaComando>:


volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 80012f2:	4b6e      	ldr	r3, [pc, #440]	; (80014ac <interpretaComando+0x1c0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b70      	cmp	r3, #112	; 0x70
 80012f8:	d010      	beq.n	800131c <interpretaComando+0x30>
 80012fa:	2b70      	cmp	r3, #112	; 0x70
 80012fc:	f300 80d1 	bgt.w	80014a2 <interpretaComando+0x1b6>
 8001300:	2b68      	cmp	r3, #104	; 0x68
 8001302:	d007      	beq.n	8001314 <interpretaComando+0x28>
 8001304:	2b68      	cmp	r3, #104	; 0x68
 8001306:	f300 80cc 	bgt.w	80014a2 <interpretaComando+0x1b6>
 800130a:	2b48      	cmp	r3, #72	; 0x48
 800130c:	d002      	beq.n	8001314 <interpretaComando+0x28>
 800130e:	2b50      	cmp	r3, #80	; 0x50
 8001310:	d004      	beq.n	800131c <interpretaComando+0x30>



	}

}
 8001312:	e0c6      	b.n	80014a2 <interpretaComando+0x1b6>
		state = HOME;
 8001314:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <interpretaComando+0x1c4>)
 8001316:	2203      	movs	r2, #3
 8001318:	701a      	strb	r2, [r3, #0]
	break;
 800131a:	e0c2      	b.n	80014a2 <interpretaComando+0x1b6>
		flagErrorEndStop = 0;
 800131c:	4965      	ldr	r1, [pc, #404]	; (80014b4 <interpretaComando+0x1c8>)
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 8001332:	e0ac      	b.n	800148e <interpretaComando+0x1a2>
			if(rx_buffer[i] == 'x'){
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4a5d      	ldr	r2, [pc, #372]	; (80014ac <interpretaComando+0x1c0>)
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	2b78      	cmp	r3, #120	; 0x78
 800133c:	d133      	bne.n	80013a6 <interpretaComando+0xba>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800133e:	e00c      	b.n	800135a <interpretaComando+0x6e>
					auxString[j] = rx_buffer[i+1];
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	4959      	ldr	r1, [pc, #356]	; (80014ac <interpretaComando+0x1c0>)
 8001348:	5c89      	ldrb	r1, [r1, r2]
 800134a:	4a5b      	ldr	r2, [pc, #364]	; (80014b8 <interpretaComando+0x1cc>)
 800134c:	54d1      	strb	r1, [r2, r3]
					j++;
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	3301      	adds	r3, #1
 8001352:	73bb      	strb	r3, [r7, #14]
					i++;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	3301      	adds	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	3301      	adds	r3, #1
 800135e:	4a53      	ldr	r2, [pc, #332]	; (80014ac <interpretaComando+0x1c0>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	2b20      	cmp	r3, #32
 8001364:	d1ec      	bne.n	8001340 <interpretaComando+0x54>
				Pfin.x = strtod(&auxString[0], NULL);
 8001366:	2100      	movs	r1, #0
 8001368:	4853      	ldr	r0, [pc, #332]	; (80014b8 <interpretaComando+0x1cc>)
 800136a:	f00d f987 	bl	800e67c <strtod>
 800136e:	eeb0 7b40 	vmov.f64	d7, d0
 8001372:	4b52      	ldr	r3, [pc, #328]	; (80014bc <interpretaComando+0x1d0>)
 8001374:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e007      	b.n	800138e <interpretaComando+0xa2>
					auxString[k] = 0;
 800137e:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <interpretaComando+0x1cc>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4413      	add	r3, r2
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3301      	adds	r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b0a      	cmp	r3, #10
 8001392:	ddf4      	ble.n	800137e <interpretaComando+0x92>
				j=0;
 8001394:	2300      	movs	r3, #0
 8001396:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	2207      	movs	r2, #7
 800139c:	4948      	ldr	r1, [pc, #288]	; (80014c0 <interpretaComando+0x1d4>)
 800139e:	4849      	ldr	r0, [pc, #292]	; (80014c4 <interpretaComando+0x1d8>)
 80013a0:	f00a f85c 	bl	800b45c <HAL_UART_Transmit>
 80013a4:	e070      	b.n	8001488 <interpretaComando+0x19c>
			else if(rx_buffer[i] == 'y'){
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4a40      	ldr	r2, [pc, #256]	; (80014ac <interpretaComando+0x1c0>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	2b79      	cmp	r3, #121	; 0x79
 80013ae:	d133      	bne.n	8001418 <interpretaComando+0x12c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80013b0:	e00c      	b.n	80013cc <interpretaComando+0xe0>
					auxString[j] = rx_buffer[i+1];
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	493c      	ldr	r1, [pc, #240]	; (80014ac <interpretaComando+0x1c0>)
 80013ba:	5c89      	ldrb	r1, [r1, r2]
 80013bc:	4a3e      	ldr	r2, [pc, #248]	; (80014b8 <interpretaComando+0x1cc>)
 80013be:	54d1      	strb	r1, [r2, r3]
					j++;
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	3301      	adds	r3, #1
 80013c4:	73bb      	strb	r3, [r7, #14]
					i++;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	3301      	adds	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a36      	ldr	r2, [pc, #216]	; (80014ac <interpretaComando+0x1c0>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	d1ec      	bne.n	80013b2 <interpretaComando+0xc6>
				Pfin.y = strtod(&auxString[0], NULL);
 80013d8:	2100      	movs	r1, #0
 80013da:	4837      	ldr	r0, [pc, #220]	; (80014b8 <interpretaComando+0x1cc>)
 80013dc:	f00d f94e 	bl	800e67c <strtod>
 80013e0:	eeb0 7b40 	vmov.f64	d7, d0
 80013e4:	4b35      	ldr	r3, [pc, #212]	; (80014bc <interpretaComando+0x1d0>)
 80013e6:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	e007      	b.n	8001400 <interpretaComando+0x114>
					auxString[k] = 0;
 80013f0:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <interpretaComando+0x1cc>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3301      	adds	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b0a      	cmp	r3, #10
 8001404:	ddf4      	ble.n	80013f0 <interpretaComando+0x104>
				j=0;
 8001406:	2300      	movs	r3, #0
 8001408:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 800140a:	2364      	movs	r3, #100	; 0x64
 800140c:	2207      	movs	r2, #7
 800140e:	492e      	ldr	r1, [pc, #184]	; (80014c8 <interpretaComando+0x1dc>)
 8001410:	482c      	ldr	r0, [pc, #176]	; (80014c4 <interpretaComando+0x1d8>)
 8001412:	f00a f823 	bl	800b45c <HAL_UART_Transmit>
 8001416:	e037      	b.n	8001488 <interpretaComando+0x19c>
			else if(rx_buffer[i] == 'z'){
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	4a24      	ldr	r2, [pc, #144]	; (80014ac <interpretaComando+0x1c0>)
 800141c:	5cd3      	ldrb	r3, [r2, r3]
 800141e:	2b7a      	cmp	r3, #122	; 0x7a
 8001420:	d132      	bne.n	8001488 <interpretaComando+0x19c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001422:	e00c      	b.n	800143e <interpretaComando+0x152>
					auxString[j] = rx_buffer[i+1];
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	4920      	ldr	r1, [pc, #128]	; (80014ac <interpretaComando+0x1c0>)
 800142c:	5c89      	ldrb	r1, [r1, r2]
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <interpretaComando+0x1cc>)
 8001430:	54d1      	strb	r1, [r2, r3]
					j++;
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	3301      	adds	r3, #1
 8001436:	73bb      	strb	r3, [r7, #14]
					i++;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	3301      	adds	r3, #1
 8001442:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <interpretaComando+0x1c0>)
 8001444:	5cd3      	ldrb	r3, [r2, r3]
 8001446:	2b20      	cmp	r3, #32
 8001448:	d1ec      	bne.n	8001424 <interpretaComando+0x138>
				Pfin.z = strtod(&auxString[0], NULL);
 800144a:	2100      	movs	r1, #0
 800144c:	481a      	ldr	r0, [pc, #104]	; (80014b8 <interpretaComando+0x1cc>)
 800144e:	f00d f915 	bl	800e67c <strtod>
 8001452:	eeb0 7b40 	vmov.f64	d7, d0
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <interpretaComando+0x1d0>)
 8001458:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 800145c:	2300      	movs	r3, #0
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	e007      	b.n	8001472 <interpretaComando+0x186>
					auxString[k] = 0;
 8001462:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <interpretaComando+0x1cc>)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	4413      	add	r3, r2
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b0a      	cmp	r3, #10
 8001476:	ddf4      	ble.n	8001462 <interpretaComando+0x176>
				j=0;
 8001478:	2300      	movs	r3, #0
 800147a:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	2207      	movs	r2, #7
 8001480:	4912      	ldr	r1, [pc, #72]	; (80014cc <interpretaComando+0x1e0>)
 8001482:	4810      	ldr	r0, [pc, #64]	; (80014c4 <interpretaComando+0x1d8>)
 8001484:	f009 ffea 	bl	800b45c <HAL_UART_Transmit>
			i++;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3301      	adds	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <interpretaComando+0x1c0>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f47f af4d 	bne.w	8001334 <interpretaComando+0x48>
		receptionFlag = true;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <interpretaComando+0x1e4>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
		break;
 80014a0:	bf00      	nop
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000544 	.word	0x24000544
 80014b0:	24000418 	.word	0x24000418
 80014b4:	24000568 	.word	0x24000568
 80014b8:	24000270 	.word	0x24000270
 80014bc:	24000478 	.word	0x24000478
 80014c0:	08011098 	.word	0x08011098
 80014c4:	24000968 	.word	0x24000968
 80014c8:	080110a0 	.word	0x080110a0
 80014cc:	080110a8 	.word	0x080110a8
 80014d0:	24000563 	.word	0x24000563
 80014d4:	00000000 	.word	0x00000000

080014d8 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	ed2d 8b04 	vpush	{d8-d9}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	eeb0 5b40 	vmov.f64	d5, d0
 80014e6:	eeb0 6b41 	vmov.f64	d6, d1
 80014ea:	eeb0 7b42 	vmov.f64	d7, d2
 80014ee:	ed87 5b00 	vstr	d5, [r7]
 80014f2:	ed87 6b02 	vstr	d6, [r7, #8]
 80014f6:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 80014fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80014fe:	ed9f 6bee 	vldr	d6, [pc, #952]	; 80018b8 <inverseKinematic+0x3e0>
 8001502:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001506:	ed9f 6bee 	vldr	d6, [pc, #952]	; 80018c0 <inverseKinematic+0x3e8>
 800150a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800150e:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001512:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001516:	ed97 7b04 	vldr	d7, [r7, #16]
 800151a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800151e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001522:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001526:	eeb0 0b45 	vmov.f64	d0, d5
 800152a:	f00f f971 	bl	8010810 <pow>
 800152e:	eeb0 7b40 	vmov.f64	d7, d0
 8001532:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001536:	ee37 7b06 	vadd.f64	d7, d7, d6
 800153a:	4bf9      	ldr	r3, [pc, #996]	; (8001920 <inverseKinematic+0x448>)
 800153c:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8001540:	ed97 7b00 	vldr	d7, [r7]
 8001544:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80018c8 <inverseKinematic+0x3f0>
 8001548:	ee37 7b06 	vadd.f64	d7, d7, d6
 800154c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80018d0 <inverseKinematic+0x3f8>
 8001550:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001554:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80018d8 <inverseKinematic+0x400>
 8001558:	ee36 6b47 	vsub.f64	d6, d6, d7
 800155c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001560:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 80018e0 <inverseKinematic+0x408>
 8001564:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001568:	ee37 7b07 	vadd.f64	d7, d7, d7
 800156c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001570:	ed97 7b04 	vldr	d7, [r7, #16]
 8001574:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001578:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800157c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001580:	eeb0 0b45 	vmov.f64	d0, d5
 8001584:	f00f f944 	bl	8010810 <pow>
 8001588:	eeb0 7b40 	vmov.f64	d7, d0
 800158c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001590:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001594:	4be3      	ldr	r3, [pc, #908]	; (8001924 <inverseKinematic+0x44c>)
 8001596:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 800159a:	ed97 7b00 	vldr	d7, [r7]
 800159e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80018c8 <inverseKinematic+0x3f0>
 80015a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80015a6:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80018d0 <inverseKinematic+0x3f8>
 80015aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80015b2:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 80018e0 <inverseKinematic+0x408>
 80015b6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80015ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80015be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015c2:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 80018e8 <inverseKinematic+0x410>
 80015c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015ca:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 80018c0 <inverseKinematic+0x3e8>
 80015ce:	ee37 6b06 	vadd.f64	d6, d7, d6
 80015d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80015d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80015da:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80015de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015e2:	eeb0 0b45 	vmov.f64	d0, d5
 80015e6:	f00f f913 	bl	8010810 <pow>
 80015ea:	eeb0 7b40 	vmov.f64	d7, d0
 80015ee:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80015f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015f6:	4bcc      	ldr	r3, [pc, #816]	; (8001928 <inverseKinematic+0x450>)
 80015f8:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 80015fc:	ed97 7b02 	vldr	d7, [r7, #8]
 8001600:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80018b8 <inverseKinematic+0x3e0>
 8001604:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001608:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80018c0 <inverseKinematic+0x3e8>
 800160c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001610:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001614:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001618:	ed97 7b04 	vldr	d7, [r7, #16]
 800161c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001620:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001624:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001628:	ed97 7b02 	vldr	d7, [r7, #8]
 800162c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80018b8 <inverseKinematic+0x3e0>
 8001630:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001634:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001638:	eeb0 0b47 	vmov.f64	d0, d7
 800163c:	f00f f8e8 	bl	8010810 <pow>
 8001640:	eeb0 7b40 	vmov.f64	d7, d0
 8001644:	ed9f 6baa 	vldr	d6, [pc, #680]	; 80018f0 <inverseKinematic+0x418>
 8001648:	ee37 9b06 	vadd.f64	d9, d7, d6
 800164c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001650:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001654:	eeb0 0b47 	vmov.f64	d0, d7
 8001658:	f00f f8da 	bl	8010810 <pow>
 800165c:	eeb0 7b40 	vmov.f64	d7, d0
 8001660:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001664:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80018f8 <inverseKinematic+0x420>
 8001668:	ee37 9b46 	vsub.f64	d9, d7, d6
 800166c:	ed97 7b00 	vldr	d7, [r7]
 8001670:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001674:	eeb0 0b47 	vmov.f64	d0, d7
 8001678:	f00f f8ca 	bl	8010810 <pow>
 800167c:	eeb0 7b40 	vmov.f64	d7, d0
 8001680:	ee39 5b07 	vadd.f64	d5, d9, d7
 8001684:	ed97 7b04 	vldr	d7, [r7, #16]
 8001688:	ee37 6b07 	vadd.f64	d6, d7, d7
 800168c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001690:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001694:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001900 <inverseKinematic+0x428>
 8001698:	ee37 7b06 	vadd.f64	d7, d7, d6
 800169c:	4ba3      	ldr	r3, [pc, #652]	; (800192c <inverseKinematic+0x454>)
 800169e:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 80016a2:	ed97 7b00 	vldr	d7, [r7]
 80016a6:	ed9f 6b88 	vldr	d6, [pc, #544]	; 80018c8 <inverseKinematic+0x3f0>
 80016aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016ae:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001908 <inverseKinematic+0x430>
 80016b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016b6:	ed97 7b02 	vldr	d7, [r7, #8]
 80016ba:	ed9f 5b89 	vldr	d5, [pc, #548]	; 80018e0 <inverseKinematic+0x408>
 80016be:	ee37 7b05 	vadd.f64	d7, d7, d5
 80016c2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016ca:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80018d8 <inverseKinematic+0x400>
 80016ce:	ee37 5b06 	vadd.f64	d5, d7, d6
 80016d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80016d6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80016da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016de:	ee37 8b07 	vadd.f64	d8, d7, d7
 80016e2:	ed97 7b00 	vldr	d7, [r7]
 80016e6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80018c8 <inverseKinematic+0x3f0>
 80016ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016ee:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80016f2:	eeb0 0b47 	vmov.f64	d0, d7
 80016f6:	f00f f88b 	bl	8010810 <pow>
 80016fa:	eeb0 7b40 	vmov.f64	d7, d0
 80016fe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80018f0 <inverseKinematic+0x418>
 8001702:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001706:	ed97 7b02 	vldr	d7, [r7, #8]
 800170a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 80018e0 <inverseKinematic+0x408>
 800170e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001712:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001716:	eeb0 0b47 	vmov.f64	d0, d7
 800171a:	f00f f879 	bl	8010810 <pow>
 800171e:	eeb0 7b40 	vmov.f64	d7, d0
 8001722:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001726:	ed97 7b04 	vldr	d7, [r7, #16]
 800172a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800172e:	eeb0 0b47 	vmov.f64	d0, d7
 8001732:	f00f f86d 	bl	8010810 <pow>
 8001736:	eeb0 7b40 	vmov.f64	d7, d0
 800173a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800173e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80018f8 <inverseKinematic+0x420>
 8001742:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001746:	ed97 7b04 	vldr	d7, [r7, #16]
 800174a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800174e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001752:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001756:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80018d8 <inverseKinematic+0x400>
 800175a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800175e:	4b74      	ldr	r3, [pc, #464]	; (8001930 <inverseKinematic+0x458>)
 8001760:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001764:	ed97 7b00 	vldr	d7, [r7]
 8001768:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80018c8 <inverseKinematic+0x3f0>
 800176c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001770:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80018d0 <inverseKinematic+0x3f8>
 8001774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001778:	ed97 7b02 	vldr	d7, [r7, #8]
 800177c:	ed9f 5b58 	vldr	d5, [pc, #352]	; 80018e0 <inverseKinematic+0x408>
 8001780:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001784:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001788:	ee36 7b47 	vsub.f64	d7, d6, d7
 800178c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80018e8 <inverseKinematic+0x410>
 8001790:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001794:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80018c0 <inverseKinematic+0x3e8>
 8001798:	ee37 5b06 	vadd.f64	d5, d7, d6
 800179c:	ed97 7b04 	vldr	d7, [r7, #16]
 80017a0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017a8:	ee37 8b07 	vadd.f64	d8, d7, d7
 80017ac:	ed97 7b00 	vldr	d7, [r7]
 80017b0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80018c8 <inverseKinematic+0x3f0>
 80017b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017bc:	eeb0 0b47 	vmov.f64	d0, d7
 80017c0:	f00f f826 	bl	8010810 <pow>
 80017c4:	eeb0 9b40 	vmov.f64	d9, d0
 80017c8:	ed97 7b02 	vldr	d7, [r7, #8]
 80017cc:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80018e0 <inverseKinematic+0x408>
 80017d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017d4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017d8:	eeb0 0b47 	vmov.f64	d0, d7
 80017dc:	f00f f818 	bl	8010810 <pow>
 80017e0:	eeb0 7b40 	vmov.f64	d7, d0
 80017e4:	ee39 9b07 	vadd.f64	d9, d9, d7
 80017e8:	ed97 7b04 	vldr	d7, [r7, #16]
 80017ec:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017f0:	eeb0 0b47 	vmov.f64	d0, d7
 80017f4:	f00f f80c 	bl	8010810 <pow>
 80017f8:	eeb0 7b40 	vmov.f64	d7, d0
 80017fc:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001800:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80018f8 <inverseKinematic+0x420>
 8001804:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001808:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001910 <inverseKinematic+0x438>
 800180c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001810:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001918 <inverseKinematic+0x440>
 8001814:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001818:	ed97 7b04 	vldr	d7, [r7, #16]
 800181c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001820:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001824:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001828:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80018d8 <inverseKinematic+0x400>
 800182c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001830:	4b40      	ldr	r3, [pc, #256]	; (8001934 <inverseKinematic+0x45c>)
 8001832:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8001836:	ed97 7b02 	vldr	d7, [r7, #8]
 800183a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80018b8 <inverseKinematic+0x3e0>
 800183e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001842:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001846:	eeb0 0b47 	vmov.f64	d0, d7
 800184a:	f00e ffe1 	bl	8010810 <pow>
 800184e:	eeb0 8b40 	vmov.f64	d8, d0
 8001852:	ed97 7b04 	vldr	d7, [r7, #16]
 8001856:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800185a:	eeb0 0b47 	vmov.f64	d0, d7
 800185e:	f00e ffd7 	bl	8010810 <pow>
 8001862:	eeb0 7b40 	vmov.f64	d7, d0
 8001866:	ee38 7b07 	vadd.f64	d7, d8, d7
 800186a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80018f8 <inverseKinematic+0x420>
 800186e:	ee37 8b46 	vsub.f64	d8, d7, d6
 8001872:	ed97 7b00 	vldr	d7, [r7]
 8001876:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800187a:	eeb0 0b47 	vmov.f64	d0, d7
 800187e:	f00e ffc7 	bl	8010810 <pow>
 8001882:	eeb0 7b40 	vmov.f64	d7, d0
 8001886:	ee38 7b07 	vadd.f64	d7, d8, d7
 800188a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001910 <inverseKinematic+0x438>
 800188e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001892:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001918 <inverseKinematic+0x440>
 8001896:	ee37 6b06 	vadd.f64	d6, d7, d6
 800189a:	ed97 7b04 	vldr	d7, [r7, #16]
 800189e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018a2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80018a6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018aa:	eeb0 0b45 	vmov.f64	d0, d5
 80018ae:	f00e ffaf 	bl	8010810 <pow>
 80018b2:	eeb0 7b40 	vmov.f64	d7, d0
 80018b6:	e03f      	b.n	8001938 <inverseKinematic+0x460>
 80018b8:	1eb851ec 	.word	0x1eb851ec
 80018bc:	3fb1eb85 	.word	0x3fb1eb85
 80018c0:	24dd2f1b 	.word	0x24dd2f1b
 80018c4:	3fc58106 	.word	0x3fc58106
 80018c8:	5625749b 	.word	0x5625749b
 80018cc:	3faf09d1 	.word	0x3faf09d1
 80018d0:	e8584caa 	.word	0xe8584caa
 80018d4:	400bb67a 	.word	0x400bb67a
 80018d8:	24dd2f1d 	.word	0x24dd2f1d
 80018dc:	3fe58106 	.word	0x3fe58106
 80018e0:	1eb851ec 	.word	0x1eb851ec
 80018e4:	3fa1eb85 	.word	0x3fa1eb85
 80018e8:	9ba5e356 	.word	0x9ba5e356
 80018ec:	3fe020c4 	.word	0x3fe020c4
 80018f0:	f705857e 	.word	0xf705857e
 80018f4:	3f881e03 	.word	0x3f881e03
 80018f8:	70a3d70a 	.word	0x70a3d70a
 80018fc:	3fd70a3d 	.word	0x3fd70a3d
 8001900:	24dd2f1b 	.word	0x24dd2f1b
 8001904:	3fd58106 	.word	0x3fd58106
 8001908:	e8584caa 	.word	0xe8584caa
 800190c:	c00bb67a 	.word	0xc00bb67a
 8001910:	93d96639 	.word	0x93d96639
 8001914:	3f9ce6c0 	.word	0x3f9ce6c0
 8001918:	47ae147c 	.word	0x47ae147c
 800191c:	3fa47ae1 	.word	0x3fa47ae1
 8001920:	24000280 	.word	0x24000280
 8001924:	240002c8 	.word	0x240002c8
 8001928:	24000310 	.word	0x24000310
 800192c:	24000288 	.word	0x24000288
 8001930:	240002d0 	.word	0x240002d0
 8001934:	24000318 	.word	0x24000318
 8001938:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001cb8 <inverseKinematic+0x7e0>
 800193c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001940:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001cc0 <inverseKinematic+0x7e8>
 8001944:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001948:	4be7      	ldr	r3, [pc, #924]	; (8001ce8 <inverseKinematic+0x810>)
 800194a:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 800194e:	ed97 7b00 	vldr	d7, [r7]
 8001952:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001cc8 <inverseKinematic+0x7f0>
 8001956:	ee37 7b06 	vadd.f64	d7, d7, d6
 800195a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800195e:	eeb0 0b47 	vmov.f64	d0, d7
 8001962:	f00e ff55 	bl	8010810 <pow>
 8001966:	eeb0 7b40 	vmov.f64	d7, d0
 800196a:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001cd0 <inverseKinematic+0x7f8>
 800196e:	ee37 8b06 	vadd.f64	d8, d7, d6
 8001972:	ed97 7b02 	vldr	d7, [r7, #8]
 8001976:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001cd8 <inverseKinematic+0x800>
 800197a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800197e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001982:	eeb0 0b47 	vmov.f64	d0, d7
 8001986:	f00e ff43 	bl	8010810 <pow>
 800198a:	eeb0 7b40 	vmov.f64	d7, d0
 800198e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001992:	ed97 7b04 	vldr	d7, [r7, #16]
 8001996:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800199a:	eeb0 0b47 	vmov.f64	d0, d7
 800199e:	f00e ff37 	bl	8010810 <pow>
 80019a2:	eeb0 7b40 	vmov.f64	d7, d0
 80019a6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80019aa:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001ce0 <inverseKinematic+0x808>
 80019ae:	ee37 6b46 	vsub.f64	d6, d7, d6
 80019b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80019b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80019ba:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80019be:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019c2:	eeb0 0b45 	vmov.f64	d0, d5
 80019c6:	f00e ff23 	bl	8010810 <pow>
 80019ca:	eeb0 7b40 	vmov.f64	d7, d0
 80019ce:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001cd0 <inverseKinematic+0x7f8>
 80019d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019d6:	4bc5      	ldr	r3, [pc, #788]	; (8001cec <inverseKinematic+0x814>)
 80019d8:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 80019dc:	ed97 7b00 	vldr	d7, [r7]
 80019e0:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001cc8 <inverseKinematic+0x7f0>
 80019e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019ec:	eeb0 0b47 	vmov.f64	d0, d7
 80019f0:	f00e ff0e 	bl	8010810 <pow>
 80019f4:	eeb0 8b40 	vmov.f64	d8, d0
 80019f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80019fc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001cd8 <inverseKinematic+0x800>
 8001a00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a04:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a08:	eeb0 0b47 	vmov.f64	d0, d7
 8001a0c:	f00e ff00 	bl	8010810 <pow>
 8001a10:	eeb0 7b40 	vmov.f64	d7, d0
 8001a14:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001a18:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a1c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a20:	eeb0 0b47 	vmov.f64	d0, d7
 8001a24:	f00e fef4 	bl	8010810 <pow>
 8001a28:	eeb0 7b40 	vmov.f64	d7, d0
 8001a2c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a30:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001ce0 <inverseKinematic+0x808>
 8001a34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a38:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001cc0 <inverseKinematic+0x7e8>
 8001a3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a40:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001cb8 <inverseKinematic+0x7e0>
 8001a44:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a48:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a4c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a50:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001a54:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a58:	eeb0 0b45 	vmov.f64	d0, d5
 8001a5c:	f00e fed8 	bl	8010810 <pow>
 8001a60:	eeb0 7b40 	vmov.f64	d7, d0
 8001a64:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001cd0 <inverseKinematic+0x7f8>
 8001a68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a6c:	4ba0      	ldr	r3, [pc, #640]	; (8001cf0 <inverseKinematic+0x818>)
 8001a6e:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001a72:	4ba0      	ldr	r3, [pc, #640]	; (8001cf4 <inverseKinematic+0x81c>)
 8001a74:	ed93 7b00 	vldr	d7, [r3]
 8001a78:	eeb1 8b47 	vneg.f64	d8, d7
 8001a7c:	4b9d      	ldr	r3, [pc, #628]	; (8001cf4 <inverseKinematic+0x81c>)
 8001a7e:	ed93 7b00 	vldr	d7, [r3]
 8001a82:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a86:	eeb0 0b47 	vmov.f64	d0, d7
 8001a8a:	f00e fec1 	bl	8010810 <pow>
 8001a8e:	eeb0 5b40 	vmov.f64	d5, d0
 8001a92:	4b99      	ldr	r3, [pc, #612]	; (8001cf8 <inverseKinematic+0x820>)
 8001a94:	ed93 7b00 	vldr	d7, [r3]
 8001a98:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001a9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001aa0:	4b91      	ldr	r3, [pc, #580]	; (8001ce8 <inverseKinematic+0x810>)
 8001aa2:	ed93 7b00 	vldr	d7, [r3]
 8001aa6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001aaa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001aae:	eeb0 0b47 	vmov.f64	d0, d7
 8001ab2:	f00f f92d 	bl	8010d10 <sqrt>
 8001ab6:	eeb0 7b40 	vmov.f64	d7, d0
 8001aba:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001abe:	4b8e      	ldr	r3, [pc, #568]	; (8001cf8 <inverseKinematic+0x820>)
 8001ac0:	ed93 7b00 	vldr	d7, [r3]
 8001ac4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001ac8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001acc:	4b8b      	ldr	r3, [pc, #556]	; (8001cfc <inverseKinematic+0x824>)
 8001ace:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001ad2:	4b88      	ldr	r3, [pc, #544]	; (8001cf4 <inverseKinematic+0x81c>)
 8001ad4:	ed93 7b00 	vldr	d7, [r3]
 8001ad8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001adc:	eeb0 0b47 	vmov.f64	d0, d7
 8001ae0:	f00e fe96 	bl	8010810 <pow>
 8001ae4:	eeb0 5b40 	vmov.f64	d5, d0
 8001ae8:	4b83      	ldr	r3, [pc, #524]	; (8001cf8 <inverseKinematic+0x820>)
 8001aea:	ed93 7b00 	vldr	d7, [r3]
 8001aee:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001af2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001af6:	4b7c      	ldr	r3, [pc, #496]	; (8001ce8 <inverseKinematic+0x810>)
 8001af8:	ed93 7b00 	vldr	d7, [r3]
 8001afc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b00:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001b04:	eeb0 0b47 	vmov.f64	d0, d7
 8001b08:	f00f f902 	bl	8010d10 <sqrt>
 8001b0c:	eeb0 6b40 	vmov.f64	d6, d0
 8001b10:	4b78      	ldr	r3, [pc, #480]	; (8001cf4 <inverseKinematic+0x81c>)
 8001b12:	ed93 7b00 	vldr	d7, [r3]
 8001b16:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001b1a:	4b77      	ldr	r3, [pc, #476]	; (8001cf8 <inverseKinematic+0x820>)
 8001b1c:	ed93 7b00 	vldr	d7, [r3]
 8001b20:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001b24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b28:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <inverseKinematic+0x828>)
 8001b2a:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001b2e:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <inverseKinematic+0x82c>)
 8001b30:	ed93 7b00 	vldr	d7, [r3]
 8001b34:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b38:	eeb0 0b47 	vmov.f64	d0, d7
 8001b3c:	f00e fe68 	bl	8010810 <pow>
 8001b40:	eeb0 5b40 	vmov.f64	d5, d0
 8001b44:	4b70      	ldr	r3, [pc, #448]	; (8001d08 <inverseKinematic+0x830>)
 8001b46:	ed93 7b00 	vldr	d7, [r3]
 8001b4a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001b4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b52:	4b66      	ldr	r3, [pc, #408]	; (8001cec <inverseKinematic+0x814>)
 8001b54:	ed93 7b00 	vldr	d7, [r3]
 8001b58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001b60:	eeb0 0b47 	vmov.f64	d0, d7
 8001b64:	f00f f8d4 	bl	8010d10 <sqrt>
 8001b68:	eeb0 6b40 	vmov.f64	d6, d0
 8001b6c:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <inverseKinematic+0x82c>)
 8001b6e:	ed93 7b00 	vldr	d7, [r3]
 8001b72:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001b76:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <inverseKinematic+0x830>)
 8001b78:	ed93 7b00 	vldr	d7, [r3]
 8001b7c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001b80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b84:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <inverseKinematic+0x834>)
 8001b86:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001b8a:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <inverseKinematic+0x82c>)
 8001b8c:	ed93 7b00 	vldr	d7, [r3]
 8001b90:	eeb1 8b47 	vneg.f64	d8, d7
 8001b94:	4b5b      	ldr	r3, [pc, #364]	; (8001d04 <inverseKinematic+0x82c>)
 8001b96:	ed93 7b00 	vldr	d7, [r3]
 8001b9a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b9e:	eeb0 0b47 	vmov.f64	d0, d7
 8001ba2:	f00e fe35 	bl	8010810 <pow>
 8001ba6:	eeb0 5b40 	vmov.f64	d5, d0
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <inverseKinematic+0x830>)
 8001bac:	ed93 7b00 	vldr	d7, [r3]
 8001bb0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001bb4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <inverseKinematic+0x814>)
 8001bba:	ed93 7b00 	vldr	d7, [r3]
 8001bbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001bc6:	eeb0 0b47 	vmov.f64	d0, d7
 8001bca:	f00f f8a1 	bl	8010d10 <sqrt>
 8001bce:	eeb0 7b40 	vmov.f64	d7, d0
 8001bd2:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <inverseKinematic+0x830>)
 8001bd8:	ed93 7b00 	vldr	d7, [r3]
 8001bdc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001be0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001be4:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <inverseKinematic+0x838>)
 8001be6:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <inverseKinematic+0x83c>)
 8001bec:	ed93 7b00 	vldr	d7, [r3]
 8001bf0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bf4:	eeb0 0b47 	vmov.f64	d0, d7
 8001bf8:	f00e fe0a 	bl	8010810 <pow>
 8001bfc:	eeb0 5b40 	vmov.f64	d5, d0
 8001c00:	4b45      	ldr	r3, [pc, #276]	; (8001d18 <inverseKinematic+0x840>)
 8001c02:	ed93 7b00 	vldr	d7, [r3]
 8001c06:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c0e:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <inverseKinematic+0x818>)
 8001c10:	ed93 7b00 	vldr	d7, [r3]
 8001c14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c20:	f00f f876 	bl	8010d10 <sqrt>
 8001c24:	eeb0 6b40 	vmov.f64	d6, d0
 8001c28:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <inverseKinematic+0x83c>)
 8001c2a:	ed93 7b00 	vldr	d7, [r3]
 8001c2e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001c32:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <inverseKinematic+0x840>)
 8001c34:	ed93 7b00 	vldr	d7, [r3]
 8001c38:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001c3c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <inverseKinematic+0x844>)
 8001c42:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001c46:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <inverseKinematic+0x83c>)
 8001c48:	ed93 7b00 	vldr	d7, [r3]
 8001c4c:	eeb1 8b47 	vneg.f64	d8, d7
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <inverseKinematic+0x83c>)
 8001c52:	ed93 7b00 	vldr	d7, [r3]
 8001c56:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c5a:	eeb0 0b47 	vmov.f64	d0, d7
 8001c5e:	f00e fdd7 	bl	8010810 <pow>
 8001c62:	eeb0 5b40 	vmov.f64	d5, d0
 8001c66:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <inverseKinematic+0x840>)
 8001c68:	ed93 7b00 	vldr	d7, [r3]
 8001c6c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <inverseKinematic+0x818>)
 8001c76:	ed93 7b00 	vldr	d7, [r3]
 8001c7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c7e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c82:	eeb0 0b47 	vmov.f64	d0, d7
 8001c86:	f00f f843 	bl	8010d10 <sqrt>
 8001c8a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c8e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <inverseKinematic+0x840>)
 8001c94:	ed93 7b00 	vldr	d7, [r3]
 8001c98:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001c9c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <inverseKinematic+0x848>)
 8001ca2:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8001ca6:	491f      	ldr	r1, [pc, #124]	; (8001d24 <inverseKinematic+0x84c>)
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9c1 2300 	strd	r2, r3, [r1]
 8001cb4:	e038      	b.n	8001d28 <inverseKinematic+0x850>
 8001cb6:	bf00      	nop
 8001cb8:	47ae147c 	.word	0x47ae147c
 8001cbc:	3fa47ae1 	.word	0x3fa47ae1
 8001cc0:	93d96639 	.word	0x93d96639
 8001cc4:	3f9ce6c0 	.word	0x3f9ce6c0
 8001cc8:	5625749b 	.word	0x5625749b
 8001ccc:	3faf09d1 	.word	0x3faf09d1
 8001cd0:	f705857e 	.word	0xf705857e
 8001cd4:	3f881e03 	.word	0x3f881e03
 8001cd8:	1eb851ec 	.word	0x1eb851ec
 8001cdc:	3fa1eb85 	.word	0x3fa1eb85
 8001ce0:	70a3d70a 	.word	0x70a3d70a
 8001ce4:	3fd70a3d 	.word	0x3fd70a3d
 8001ce8:	24000290 	.word	0x24000290
 8001cec:	240002d8 	.word	0x240002d8
 8001cf0:	24000320 	.word	0x24000320
 8001cf4:	24000288 	.word	0x24000288
 8001cf8:	24000280 	.word	0x24000280
 8001cfc:	240002a8 	.word	0x240002a8
 8001d00:	240002b0 	.word	0x240002b0
 8001d04:	240002d0 	.word	0x240002d0
 8001d08:	240002c8 	.word	0x240002c8
 8001d0c:	240002f0 	.word	0x240002f0
 8001d10:	240002f8 	.word	0x240002f8
 8001d14:	24000318 	.word	0x24000318
 8001d18:	24000310 	.word	0x24000310
 8001d1c:	24000338 	.word	0x24000338
 8001d20:	24000340 	.word	0x24000340
 8001d24:	24000298 	.word	0x24000298
	XJ1_2 = 0;
 8001d28:	49f1      	ldr	r1, [pc, #964]	; (80020f0 <inverseKinematic+0xc18>)
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8001d36:	4bef      	ldr	r3, [pc, #956]	; (80020f4 <inverseKinematic+0xc1c>)
 8001d38:	ed93 7b00 	vldr	d7, [r3]
 8001d3c:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8002088 <inverseKinematic+0xbb0>
 8001d40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d44:	4bec      	ldr	r3, [pc, #944]	; (80020f8 <inverseKinematic+0xc20>)
 8001d46:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8001d4a:	4bec      	ldr	r3, [pc, #944]	; (80020fc <inverseKinematic+0xc24>)
 8001d4c:	ed93 7b00 	vldr	d7, [r3]
 8001d50:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8002088 <inverseKinematic+0xbb0>
 8001d54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d58:	4be9      	ldr	r3, [pc, #932]	; (8002100 <inverseKinematic+0xc28>)
 8001d5a:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001d5e:	4be9      	ldr	r3, [pc, #932]	; (8002104 <inverseKinematic+0xc2c>)
 8001d60:	ed93 7b00 	vldr	d7, [r3]
 8001d64:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8002090 <inverseKinematic+0xbb8>
 8001d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d6c:	4be6      	ldr	r3, [pc, #920]	; (8002108 <inverseKinematic+0xc30>)
 8001d6e:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8001d72:	4be6      	ldr	r3, [pc, #920]	; (800210c <inverseKinematic+0xc34>)
 8001d74:	ed93 7b00 	vldr	d7, [r3]
 8001d78:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8002090 <inverseKinematic+0xbb8>
 8001d7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d80:	4be3      	ldr	r3, [pc, #908]	; (8002110 <inverseKinematic+0xc38>)
 8001d82:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001d86:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d8a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002098 <inverseKinematic+0xbc0>
 8001d8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d92:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 80020a0 <inverseKinematic+0xbc8>
 8001d96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d9a:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001d9e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001da2:	ed97 7b04 	vldr	d7, [r7, #16]
 8001da6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001daa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001dae:	4bd9      	ldr	r3, [pc, #868]	; (8002114 <inverseKinematic+0xc3c>)
 8001db0:	ed93 7b00 	vldr	d7, [r3]
 8001db4:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001db8:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dbc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8002098 <inverseKinematic+0xbc0>
 8001dc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dc4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001dc8:	eeb0 0b47 	vmov.f64	d0, d7
 8001dcc:	f00e fd20 	bl	8010810 <pow>
 8001dd0:	eeb0 9b40 	vmov.f64	d9, d0
 8001dd4:	ed97 7b04 	vldr	d7, [r7, #16]
 8001dd8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ddc:	eeb0 0b47 	vmov.f64	d0, d7
 8001de0:	f00e fd16 	bl	8010810 <pow>
 8001de4:	eeb0 7b40 	vmov.f64	d7, d0
 8001de8:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001dec:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80020a8 <inverseKinematic+0xbd0>
 8001df0:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001df4:	ed97 7b00 	vldr	d7, [r7]
 8001df8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001dfc:	eeb0 0b47 	vmov.f64	d0, d7
 8001e00:	f00e fd06 	bl	8010810 <pow>
 8001e04:	eeb0 7b40 	vmov.f64	d7, d0
 8001e08:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001e0c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80020b0 <inverseKinematic+0xbd8>
 8001e10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e14:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80020b8 <inverseKinematic+0xbe0>
 8001e18:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001e1c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e20:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e28:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001e2c:	4bba      	ldr	r3, [pc, #744]	; (8002118 <inverseKinematic+0xc40>)
 8001e2e:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001e32:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e36:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002098 <inverseKinematic+0xbc0>
 8001e3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e3e:	ed9f 6b98 	vldr	d6, [pc, #608]	; 80020a0 <inverseKinematic+0xbc8>
 8001e42:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e46:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001e4a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001e4e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001e56:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001e5a:	4bb0      	ldr	r3, [pc, #704]	; (800211c <inverseKinematic+0xc44>)
 8001e5c:	ed93 7b00 	vldr	d7, [r3]
 8001e60:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001e64:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e68:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002098 <inverseKinematic+0xbc0>
 8001e6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e70:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e74:	eeb0 0b47 	vmov.f64	d0, d7
 8001e78:	f00e fcca 	bl	8010810 <pow>
 8001e7c:	eeb0 9b40 	vmov.f64	d9, d0
 8001e80:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e84:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e88:	eeb0 0b47 	vmov.f64	d0, d7
 8001e8c:	f00e fcc0 	bl	8010810 <pow>
 8001e90:	eeb0 7b40 	vmov.f64	d7, d0
 8001e94:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001e98:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80020a8 <inverseKinematic+0xbd0>
 8001e9c:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001ea0:	ed97 7b00 	vldr	d7, [r7]
 8001ea4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ea8:	eeb0 0b47 	vmov.f64	d0, d7
 8001eac:	f00e fcb0 	bl	8010810 <pow>
 8001eb0:	eeb0 7b40 	vmov.f64	d7, d0
 8001eb4:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001eb8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80020b0 <inverseKinematic+0xbd8>
 8001ebc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ec0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80020b8 <inverseKinematic+0xbe0>
 8001ec4:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001ec8:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ecc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001ed0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ed4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001ed8:	4b91      	ldr	r3, [pc, #580]	; (8002120 <inverseKinematic+0xc48>)
 8001eda:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001ede:	ed97 7b00 	vldr	d7, [r7]
 8001ee2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80020c0 <inverseKinematic+0xbe8>
 8001ee6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001eea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80020c8 <inverseKinematic+0xbf0>
 8001eee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ef2:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ef6:	ed9f 5b76 	vldr	d5, [pc, #472]	; 80020d0 <inverseKinematic+0xbf8>
 8001efa:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001efe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f06:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80020d8 <inverseKinematic+0xc00>
 8001f0a:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001f0e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f12:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f16:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001f1a:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <inverseKinematic+0xc1c>)
 8001f1c:	ed93 7b00 	vldr	d7, [r3]
 8001f20:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001f24:	ed97 7b00 	vldr	d7, [r7]
 8001f28:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80020c0 <inverseKinematic+0xbe8>
 8001f2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f30:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f34:	eeb0 0b47 	vmov.f64	d0, d7
 8001f38:	f00e fc6a 	bl	8010810 <pow>
 8001f3c:	eeb0 7b40 	vmov.f64	d7, d0
 8001f40:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80020e0 <inverseKinematic+0xc08>
 8001f44:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001f48:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f4c:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80020d0 <inverseKinematic+0xbf8>
 8001f50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f54:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f58:	eeb0 0b47 	vmov.f64	d0, d7
 8001f5c:	f00e fc58 	bl	8010810 <pow>
 8001f60:	eeb0 7b40 	vmov.f64	d7, d0
 8001f64:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001f68:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f6c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f70:	eeb0 0b47 	vmov.f64	d0, d7
 8001f74:	f00e fc4c 	bl	8010810 <pow>
 8001f78:	eeb0 7b40 	vmov.f64	d7, d0
 8001f7c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001f80:	ed9f 6b49 	vldr	d6, [pc, #292]	; 80020a8 <inverseKinematic+0xbd0>
 8001f84:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001f88:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f8c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001f90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f94:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001f98:	4b62      	ldr	r3, [pc, #392]	; (8002124 <inverseKinematic+0xc4c>)
 8001f9a:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001f9e:	ed97 7b00 	vldr	d7, [r7]
 8001fa2:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80020c0 <inverseKinematic+0xbe8>
 8001fa6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001faa:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80020c8 <inverseKinematic+0xbf0>
 8001fae:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fb2:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fb6:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80020d0 <inverseKinematic+0xbf8>
 8001fba:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001fbe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fc6:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80020d8 <inverseKinematic+0xc00>
 8001fca:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001fce:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fd2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fd6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001fda:	4b48      	ldr	r3, [pc, #288]	; (80020fc <inverseKinematic+0xc24>)
 8001fdc:	ed93 7b00 	vldr	d7, [r3]
 8001fe0:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001fe4:	ed97 7b00 	vldr	d7, [r7]
 8001fe8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80020c0 <inverseKinematic+0xbe8>
 8001fec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ff0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ff4:	eeb0 0b47 	vmov.f64	d0, d7
 8001ff8:	f00e fc0a 	bl	8010810 <pow>
 8001ffc:	eeb0 7b40 	vmov.f64	d7, d0
 8002000:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80020e0 <inverseKinematic+0xc08>
 8002004:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002008:	ed97 7b02 	vldr	d7, [r7, #8]
 800200c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80020d0 <inverseKinematic+0xbf8>
 8002010:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002014:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002018:	eeb0 0b47 	vmov.f64	d0, d7
 800201c:	f00e fbf8 	bl	8010810 <pow>
 8002020:	eeb0 7b40 	vmov.f64	d7, d0
 8002024:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002028:	ed97 7b04 	vldr	d7, [r7, #16]
 800202c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002030:	eeb0 0b47 	vmov.f64	d0, d7
 8002034:	f00e fbec 	bl	8010810 <pow>
 8002038:	eeb0 7b40 	vmov.f64	d7, d0
 800203c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002040:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80020a8 <inverseKinematic+0xbd0>
 8002044:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002048:	ed97 7b04 	vldr	d7, [r7, #16]
 800204c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002050:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002054:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002058:	4b33      	ldr	r3, [pc, #204]	; (8002128 <inverseKinematic+0xc50>)
 800205a:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800205e:	ed97 7b00 	vldr	d7, [r7]
 8002062:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80020c0 <inverseKinematic+0xbe8>
 8002066:	ee37 7b46 	vsub.f64	d7, d7, d6
 800206a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80020e8 <inverseKinematic+0xc10>
 800206e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002072:	ed97 7b02 	vldr	d7, [r7, #8]
 8002076:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80020d0 <inverseKinematic+0xbf8>
 800207a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800207e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002082:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002086:	e051      	b.n	800212c <inverseKinematic+0xc54>
 8002088:	e8584caa 	.word	0xe8584caa
 800208c:	3ffbb67a 	.word	0x3ffbb67a
 8002090:	e8584caa 	.word	0xe8584caa
 8002094:	bffbb67a 	.word	0xbffbb67a
 8002098:	1eb851ec 	.word	0x1eb851ec
 800209c:	3fb1eb85 	.word	0x3fb1eb85
 80020a0:	24dd2f1b 	.word	0x24dd2f1b
 80020a4:	3fc58106 	.word	0x3fc58106
 80020a8:	70a3d70a 	.word	0x70a3d70a
 80020ac:	3fd70a3d 	.word	0x3fd70a3d
 80020b0:	93d96639 	.word	0x93d96639
 80020b4:	3f9ce6c0 	.word	0x3f9ce6c0
 80020b8:	47ae147c 	.word	0x47ae147c
 80020bc:	3fa47ae1 	.word	0x3fa47ae1
 80020c0:	5625749b 	.word	0x5625749b
 80020c4:	3faf09d1 	.word	0x3faf09d1
 80020c8:	e8584caa 	.word	0xe8584caa
 80020cc:	c00bb67a 	.word	0xc00bb67a
 80020d0:	1eb851ec 	.word	0x1eb851ec
 80020d4:	3fa1eb85 	.word	0x3fa1eb85
 80020d8:	24dd2f1d 	.word	0x24dd2f1d
 80020dc:	3fe58106 	.word	0x3fe58106
 80020e0:	f705857e 	.word	0xf705857e
 80020e4:	3f881e03 	.word	0x3f881e03
 80020e8:	e8584caa 	.word	0xe8584caa
 80020ec:	400bb67a 	.word	0x400bb67a
 80020f0:	240002a0 	.word	0x240002a0
 80020f4:	240002f0 	.word	0x240002f0
 80020f8:	240002e0 	.word	0x240002e0
 80020fc:	240002f8 	.word	0x240002f8
 8002100:	240002e8 	.word	0x240002e8
 8002104:	24000338 	.word	0x24000338
 8002108:	24000328 	.word	0x24000328
 800210c:	24000340 	.word	0x24000340
 8002110:	24000330 	.word	0x24000330
 8002114:	240002a8 	.word	0x240002a8
 8002118:	240002b8 	.word	0x240002b8
 800211c:	240002b0 	.word	0x240002b0
 8002120:	240002c0 	.word	0x240002c0
 8002124:	24000300 	.word	0x24000300
 8002128:	24000308 	.word	0x24000308
 800212c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002370 <inverseKinematic+0xe98>
 8002130:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002134:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002378 <inverseKinematic+0xea0>
 8002138:	ee37 5b06 	vadd.f64	d5, d7, d6
 800213c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002140:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002144:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002148:	4b9f      	ldr	r3, [pc, #636]	; (80023c8 <inverseKinematic+0xef0>)
 800214a:	ed93 7b00 	vldr	d7, [r3]
 800214e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002152:	ed97 7b00 	vldr	d7, [r7]
 8002156:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8002380 <inverseKinematic+0xea8>
 800215a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800215e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002162:	eeb0 0b47 	vmov.f64	d0, d7
 8002166:	f00e fb53 	bl	8010810 <pow>
 800216a:	eeb0 9b40 	vmov.f64	d9, d0
 800216e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002172:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002388 <inverseKinematic+0xeb0>
 8002176:	ee37 7b06 	vadd.f64	d7, d7, d6
 800217a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800217e:	eeb0 0b47 	vmov.f64	d0, d7
 8002182:	f00e fb45 	bl	8010810 <pow>
 8002186:	eeb0 7b40 	vmov.f64	d7, d0
 800218a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800218e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002192:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002196:	eeb0 0b47 	vmov.f64	d0, d7
 800219a:	f00e fb39 	bl	8010810 <pow>
 800219e:	eeb0 7b40 	vmov.f64	d7, d0
 80021a2:	ee39 7b07 	vadd.f64	d7, d9, d7
 80021a6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002390 <inverseKinematic+0xeb8>
 80021aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021ae:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002398 <inverseKinematic+0xec0>
 80021b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021b6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80023a0 <inverseKinematic+0xec8>
 80021ba:	ee37 5b06 	vadd.f64	d5, d7, d6
 80021be:	ed97 7b04 	vldr	d7, [r7, #16]
 80021c2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80021c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021ca:	ee38 7b07 	vadd.f64	d7, d8, d7
 80021ce:	4b7f      	ldr	r3, [pc, #508]	; (80023cc <inverseKinematic+0xef4>)
 80021d0:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80021d4:	ed97 7b00 	vldr	d7, [r7]
 80021d8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002380 <inverseKinematic+0xea8>
 80021dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021e0:	ed9f 6b71 	vldr	d6, [pc, #452]	; 80023a8 <inverseKinematic+0xed0>
 80021e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021e8:	ed97 7b02 	vldr	d7, [r7, #8]
 80021ec:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002388 <inverseKinematic+0xeb0>
 80021f0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80021f4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021fc:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002370 <inverseKinematic+0xe98>
 8002200:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002204:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002378 <inverseKinematic+0xea0>
 8002208:	ee37 5b06 	vadd.f64	d5, d7, d6
 800220c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002210:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002214:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002218:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <inverseKinematic+0xef8>)
 800221a:	ed93 7b00 	vldr	d7, [r3]
 800221e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002222:	ed97 7b00 	vldr	d7, [r7]
 8002226:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002380 <inverseKinematic+0xea8>
 800222a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800222e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002232:	eeb0 0b47 	vmov.f64	d0, d7
 8002236:	f00e faeb 	bl	8010810 <pow>
 800223a:	eeb0 9b40 	vmov.f64	d9, d0
 800223e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002242:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002388 <inverseKinematic+0xeb0>
 8002246:	ee37 7b06 	vadd.f64	d7, d7, d6
 800224a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800224e:	eeb0 0b47 	vmov.f64	d0, d7
 8002252:	f00e fadd 	bl	8010810 <pow>
 8002256:	eeb0 7b40 	vmov.f64	d7, d0
 800225a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800225e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002262:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002266:	eeb0 0b47 	vmov.f64	d0, d7
 800226a:	f00e fad1 	bl	8010810 <pow>
 800226e:	eeb0 7b40 	vmov.f64	d7, d0
 8002272:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002276:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002390 <inverseKinematic+0xeb8>
 800227a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800227e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002398 <inverseKinematic+0xec0>
 8002282:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002286:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80023a0 <inverseKinematic+0xec8>
 800228a:	ee37 5b06 	vadd.f64	d5, d7, d6
 800228e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002292:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002296:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800229a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <inverseKinematic+0xefc>)
 80022a0:	ed83 7b00 	vstr	d7, [r3]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 80022a4:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <inverseKinematic+0xf00>)
 80022a6:	ed93 7b00 	vldr	d7, [r3]
 80022aa:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80023b0 <inverseKinematic+0xed8>
 80022ae:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80022b2:	eeb0 0b46 	vmov.f64	d0, d6
 80022b6:	f00e fcfd 	bl	8010cb4 <asin>
 80022ba:	eeb0 7b40 	vmov.f64	d7, d0
 80022be:	eeb1 7b47 	vneg.f64	d7, d7
 80022c2:	4b46      	ldr	r3, [pc, #280]	; (80023dc <inverseKinematic+0xf04>)
 80022c4:	ed83 7b02 	vstr	d7, [r3, #8]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 80022c8:	4b44      	ldr	r3, [pc, #272]	; (80023dc <inverseKinematic+0xf04>)
 80022ca:	ed93 7b02 	vldr	d7, [r3, #8]
 80022ce:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80023b8 <inverseKinematic+0xee0>
 80022d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80022d6:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 80023c0 <inverseKinematic+0xee8>
 80022da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022de:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <inverseKinematic+0xf04>)
 80022e0:	ed83 7b02 	vstr	d7, [r3, #8]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 80022e4:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <inverseKinematic+0xf08>)
 80022e6:	ed93 7b00 	vldr	d7, [r3]
 80022ea:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80023b0 <inverseKinematic+0xed8>
 80022ee:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80022f2:	eeb0 0b46 	vmov.f64	d0, d6
 80022f6:	f00e fcdd 	bl	8010cb4 <asin>
 80022fa:	eeb0 7b40 	vmov.f64	d7, d0
 80022fe:	eeb1 7b47 	vneg.f64	d7, d7
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <inverseKinematic+0xf0c>)
 8002304:	ed83 7b02 	vstr	d7, [r3, #8]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <inverseKinematic+0xf0c>)
 800230a:	ed93 7b02 	vldr	d7, [r3, #8]
 800230e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80023b8 <inverseKinematic+0xee0>
 8002312:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002316:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80023c0 <inverseKinematic+0xee8>
 800231a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <inverseKinematic+0xf0c>)
 8002320:	ed83 7b02 	vstr	d7, [r3, #8]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <inverseKinematic+0xef4>)
 8002326:	ed93 7b00 	vldr	d7, [r3]
 800232a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80023b0 <inverseKinematic+0xed8>
 800232e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002332:	eeb0 0b46 	vmov.f64	d0, d6
 8002336:	f00e fcbd 	bl	8010cb4 <asin>
 800233a:	eeb0 7b40 	vmov.f64	d7, d0
 800233e:	eeb1 7b47 	vneg.f64	d7, d7
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <inverseKinematic+0xf10>)
 8002344:	ed83 7b02 	vstr	d7, [r3, #8]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <inverseKinematic+0xf10>)
 800234a:	ed93 7b02 	vldr	d7, [r3, #8]
 800234e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80023b8 <inverseKinematic+0xee0>
 8002352:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002356:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 80023c0 <inverseKinematic+0xee8>
 800235a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <inverseKinematic+0xf10>)
 8002360:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	ecbd 8b04 	vpop	{d8-d9}
 800236e:	bd80      	pop	{r7, pc}
 8002370:	9ba5e356 	.word	0x9ba5e356
 8002374:	3fe020c4 	.word	0x3fe020c4
 8002378:	24dd2f1b 	.word	0x24dd2f1b
 800237c:	3fc58106 	.word	0x3fc58106
 8002380:	5625749b 	.word	0x5625749b
 8002384:	3faf09d1 	.word	0x3faf09d1
 8002388:	1eb851ec 	.word	0x1eb851ec
 800238c:	3fa1eb85 	.word	0x3fa1eb85
 8002390:	70a3d70a 	.word	0x70a3d70a
 8002394:	3fd70a3d 	.word	0x3fd70a3d
 8002398:	93d96639 	.word	0x93d96639
 800239c:	3f9ce6c0 	.word	0x3f9ce6c0
 80023a0:	47ae147c 	.word	0x47ae147c
 80023a4:	3fa47ae1 	.word	0x3fa47ae1
 80023a8:	e8584caa 	.word	0xe8584caa
 80023ac:	400bb67a 	.word	0x400bb67a
 80023b0:	9999999a 	.word	0x9999999a
 80023b4:	3fc99999 	.word	0x3fc99999
 80023b8:	00000000 	.word	0x00000000
 80023bc:	40668000 	.word	0x40668000
 80023c0:	54442eea 	.word	0x54442eea
 80023c4:	400921fb 	.word	0x400921fb
 80023c8:	24000338 	.word	0x24000338
 80023cc:	24000348 	.word	0x24000348
 80023d0:	24000340 	.word	0x24000340
 80023d4:	24000350 	.word	0x24000350
 80023d8:	240002b8 	.word	0x240002b8
 80023dc:	24000358 	.word	0x24000358
 80023e0:	24000300 	.word	0x24000300
 80023e4:	24000398 	.word	0x24000398
 80023e8:	240003d8 	.word	0x240003d8

080023ec <robotInitialization>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void robotInitialization(void){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */


	HAL_TIM_Base_Start(&htim12);
 80023f0:	481d      	ldr	r0, [pc, #116]	; (8002468 <robotInitialization+0x7c>)
 80023f2:	f007 f88d 	bl	8009510 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 80023f6:	481d      	ldr	r0, [pc, #116]	; (800246c <robotInitialization+0x80>)
 80023f8:	f007 f88a 	bl	8009510 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 80023fc:	481c      	ldr	r0, [pc, #112]	; (8002470 <robotInitialization+0x84>)
 80023fe:	f007 f887 	bl	8009510 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	2110      	movs	r1, #16
 8002406:	481b      	ldr	r0, [pc, #108]	; (8002474 <robotInitialization+0x88>)
 8002408:	f004 fc9a 	bl	8006d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	2120      	movs	r1, #32
 8002410:	4818      	ldr	r0, [pc, #96]	; (8002474 <robotInitialization+0x88>)
 8002412:	f004 fc95 	bl	8006d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	2140      	movs	r1, #64	; 0x40
 800241a:	4816      	ldr	r0, [pc, #88]	; (8002474 <robotInitialization+0x88>)
 800241c:	f004 fc90 	bl	8006d40 <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002420:	2032      	movs	r0, #50	; 0x32
 8002422:	f003 fbef 	bl	8005c04 <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 8002426:	2200      	movs	r2, #0
 8002428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242c:	4812      	ldr	r0, [pc, #72]	; (8002478 <robotInitialization+0x8c>)
 800242e:	f004 fc87 	bl	8006d40 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002438:	480f      	ldr	r0, [pc, #60]	; (8002478 <robotInitialization+0x8c>)
 800243a:	f004 fc81 	bl	8006d40 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <robotInitialization+0x8c>)
 8002446:	f004 fc7b 	bl	8006d40 <HAL_GPIO_WritePin>
    Stop_PWM_MOTOR_1;
    Stop_PWM_MOTOR_2;
    Stop_PWM_MOTOR_3;

    */
	motor1.stepReached = false;
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <robotInitialization+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	motor2.stepReached = false;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <robotInitialization+0x94>)
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	motor3.stepReached = false;
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <robotInitialization+0x98>)
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	240006a8 	.word	0x240006a8
 800246c:	240006f4 	.word	0x240006f4
 8002470:	24000740 	.word	0x24000740
 8002474:	58020c00 	.word	0x58020c00
 8002478:	58020800 	.word	0x58020800
 800247c:	24000358 	.word	0x24000358
 8002480:	24000398 	.word	0x24000398
 8002484:	240003d8 	.word	0x240003d8

08002488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800248c:	f003 fb28 	bl	8005ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002490:	f000 fa9c 	bl	80029cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002494:	f7fe faf2 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002498:	f000 ff26 	bl	80032e8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800249c:	f003 f97e 	bl	800579c <MX_USART3_UART_Init>
  MX_TIM12_Init();
 80024a0:	f001 f8c4 	bl	800362c <MX_TIM12_Init>
  MX_TIM13_Init();
 80024a4:	f001 f924 	bl	80036f0 <MX_TIM13_Init>
  MX_TIM14_Init();
 80024a8:	f001 f96e 	bl	8003788 <MX_TIM14_Init>
  MX_TIM5_Init();
 80024ac:	f001 f870 	bl	8003590 <MX_TIM5_Init>
  MX_TIM15_Init();
 80024b0:	f001 f9b6 	bl	8003820 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 80024b4:	f003 f926 	bl	8005704 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80024b8:	f003 f8d8 	bl	800566c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80024bc:	f000 ff84 	bl	80033c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80024c0:	f000 fff4 	bl	80034ac <MX_TIM4_Init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		switch (state){
 80024c4:	4b60      	ldr	r3, [pc, #384]	; (8002648 <main+0x1c0>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	f200 8243 	bhi.w	8002954 <main+0x4cc>
 80024ce:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <main+0x4c>)
 80024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d4:	080024e9 	.word	0x080024e9
 80024d8:	08002811 	.word	0x08002811
 80024dc:	080025fd 	.word	0x080025fd
 80024e0:	08002517 	.word	0x08002517
 80024e4:	08002955 	.word	0x08002955

		case INIT:

			  HAL_UART_Transmit(&huart3, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 80024e8:	2364      	movs	r3, #100	; 0x64
 80024ea:	221c      	movs	r2, #28
 80024ec:	4957      	ldr	r1, [pc, #348]	; (800264c <main+0x1c4>)
 80024ee:	4858      	ldr	r0, [pc, #352]	; (8002650 <main+0x1c8>)
 80024f0:	f008 ffb4 	bl	800b45c <HAL_UART_Transmit>
			  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80024f4:	2201      	movs	r2, #1
 80024f6:	4957      	ldr	r1, [pc, #348]	; (8002654 <main+0x1cc>)
 80024f8:	4855      	ldr	r0, [pc, #340]	; (8002650 <main+0x1c8>)
 80024fa:	f009 f845 	bl	800b588 <HAL_UART_Receive_IT>
			  robotInitialization();
 80024fe:	f7ff ff75 	bl	80023ec <robotInitialization>
			  HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8002502:	2364      	movs	r3, #100	; 0x64
 8002504:	2227      	movs	r2, #39	; 0x27
 8002506:	4954      	ldr	r1, [pc, #336]	; (8002658 <main+0x1d0>)
 8002508:	4851      	ldr	r0, [pc, #324]	; (8002650 <main+0x1c8>)
 800250a:	f008 ffa7 	bl	800b45c <HAL_UART_Transmit>

			  state = READY;
 800250e:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <main+0x1c0>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]

			break;
 8002514:	e223      	b.n	800295e <main+0x4d6>

		case HOME:

			receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8002516:	4b51      	ldr	r3, [pc, #324]	; (800265c <main+0x1d4>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]

			//Ponemos el enable en bajo para habilitar el driver

			HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	2110      	movs	r1, #16
 8002520:	484f      	ldr	r0, [pc, #316]	; (8002660 <main+0x1d8>)
 8002522:	f004 fc0d 	bl	8006d40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	2120      	movs	r1, #32
 800252a:	484d      	ldr	r0, [pc, #308]	; (8002660 <main+0x1d8>)
 800252c:	f004 fc08 	bl	8006d40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	484a      	ldr	r0, [pc, #296]	; (8002660 <main+0x1d8>)
 8002536:	f004 fc03 	bl	8006d40 <HAL_GPIO_WritePin>

			HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 800253a:	2032      	movs	r0, #50	; 0x32
 800253c:	f003 fb62 	bl	8005c04 <HAL_Delay>

			homing();
 8002540:	f7fe fb9a 	bl	8000c78 <homing>

	        if(homFin){
 8002544:	4b47      	ldr	r3, [pc, #284]	; (8002664 <main+0x1dc>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8205 	beq.w	8002958 <main+0x4d0>

	        	homFin = false;
 800254e:	4b45      	ldr	r3, [pc, #276]	; (8002664 <main+0x1dc>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]

	        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8002554:	2006      	movs	r0, #6
 8002556:	f003 fc9e 	bl	8005e96 <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 800255a:	2007      	movs	r0, #7
 800255c:	f003 fc9b 	bl	8005e96 <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 8002560:	2008      	movs	r0, #8
 8002562:	f003 fc98 	bl	8005e96 <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 8002566:	2009      	movs	r0, #9
 8002568:	f003 fc95 	bl	8005e96 <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 800256c:	200a      	movs	r0, #10
 800256e:	f003 fc92 	bl	8005e96 <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 8002572:	2017      	movs	r0, #23
 8002574:	f003 fc8f 	bl	8005e96 <HAL_NVIC_EnableIRQ>

				Pini.x=0;
 8002578:	493b      	ldr	r1, [pc, #236]	; (8002668 <main+0x1e0>)
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9c1 2300 	strd	r2, r3, [r1]
				Pini.y=0;
 8002586:	4938      	ldr	r1, [pc, #224]	; (8002668 <main+0x1e0>)
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9c1 2302 	strd	r2, r3, [r1, #8]
				Pini.z =-0.5208; //antes era -0.33
 8002594:	4934      	ldr	r1, [pc, #208]	; (8002668 <main+0x1e0>)
 8002596:	a32a      	add	r3, pc, #168	; (adr r3, 8002640 <main+0x1b8>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	e9c1 2304 	strd	r2, r3, [r1, #16]

				motor1.theta = 0.0;
 80025a0:	4932      	ldr	r1, [pc, #200]	; (800266c <main+0x1e4>)
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
				motor2.theta = 0.0;
 80025ae:	4930      	ldr	r1, [pc, #192]	; (8002670 <main+0x1e8>)
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
				motor3.theta = 0.0;
 80025bc:	492d      	ldr	r1, [pc, #180]	; (8002674 <main+0x1ec>)
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9c1 2302 	strd	r2, r3, [r1, #8]

				motor1.currentAngle = 0.0;
 80025ca:	4928      	ldr	r1, [pc, #160]	; (800266c <main+0x1e4>)
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				motor2.currentAngle = 0.0;
 80025d8:	4925      	ldr	r1, [pc, #148]	; (8002670 <main+0x1e8>)
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				motor3.currentAngle = 0.0;
 80025e6:	4923      	ldr	r1, [pc, #140]	; (8002674 <main+0x1ec>)
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

				state = READY;
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <main+0x1c0>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]

	        }


			break;
 80025fa:	e1ad      	b.n	8002958 <main+0x4d0>

		case WORKING:

			receptionFlag = false;
 80025fc:	4b17      	ldr	r3, [pc, #92]	; (800265c <main+0x1d4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]

			while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8002602:	e0a9      	b.n	8002758 <main+0x2d0>

				if (motor1.stepReached) {
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <main+0x1e4>)
 8002606:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <main+0x198>
					Stop_PWM_MOTOR_1;
 800260e:	2100      	movs	r1, #0
 8002610:	4819      	ldr	r0, [pc, #100]	; (8002678 <main+0x1f0>)
 8002612:	f007 fa2b 	bl	8009a6c <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002616:	2100      	movs	r1, #0
 8002618:	4818      	ldr	r0, [pc, #96]	; (800267c <main+0x1f4>)
 800261a:	f007 fb1e 	bl	8009c5a <HAL_TIM_IC_Stop>
 800261e:	e03e      	b.n	800269e <main+0x216>
				}else if (motor2.stepReached) {
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <main+0x1e8>)
 8002622:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02c      	beq.n	8002684 <main+0x1fc>
					Stop_PWM_MOTOR_2;
 800262a:	2100      	movs	r1, #0
 800262c:	4814      	ldr	r0, [pc, #80]	; (8002680 <main+0x1f8>)
 800262e:	f007 fa1d 	bl	8009a6c <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_2);
 8002632:	2104      	movs	r1, #4
 8002634:	4811      	ldr	r0, [pc, #68]	; (800267c <main+0x1f4>)
 8002636:	f007 fb10 	bl	8009c5a <HAL_TIM_IC_Stop>
 800263a:	e030      	b.n	800269e <main+0x216>
 800263c:	f3af 8000 	nop.w
 8002640:	c2f837b5 	.word	0xc2f837b5
 8002644:	bfe0aa64 	.word	0xbfe0aa64
 8002648:	24000418 	.word	0x24000418
 800264c:	24000028 	.word	0x24000028
 8002650:	24000968 	.word	0x24000968
 8002654:	24000562 	.word	0x24000562
 8002658:	24000044 	.word	0x24000044
 800265c:	24000563 	.word	0x24000563
 8002660:	58020c00 	.word	0x58020c00
 8002664:	24000419 	.word	0x24000419
 8002668:	24000460 	.word	0x24000460
 800266c:	24000358 	.word	0x24000358
 8002670:	24000398 	.word	0x24000398
 8002674:	240003d8 	.word	0x240003d8
 8002678:	240006a8 	.word	0x240006a8
 800267c:	24000578 	.word	0x24000578
 8002680:	240006f4 	.word	0x240006f4
				}else if (motor3.stepReached){
 8002684:	4bb6      	ldr	r3, [pc, #728]	; (8002960 <main+0x4d8>)
 8002686:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <main+0x216>
					Stop_PWM_MOTOR_3;
 800268e:	2100      	movs	r1, #0
 8002690:	48b4      	ldr	r0, [pc, #720]	; (8002964 <main+0x4dc>)
 8002692:	f007 f9eb 	bl	8009a6c <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_3);
 8002696:	2108      	movs	r1, #8
 8002698:	48b3      	ldr	r0, [pc, #716]	; (8002968 <main+0x4e0>)
 800269a:	f007 fade 	bl	8009c5a <HAL_TIM_IC_Stop>
				}

				motor1.omega = get_Straj(time,motor1.currentAngle,motor1.theta,arrayParams1);
 800269e:	4bb3      	ldr	r3, [pc, #716]	; (800296c <main+0x4e4>)
 80026a0:	ed93 7b00 	vldr	d7, [r3]
 80026a4:	4bb2      	ldr	r3, [pc, #712]	; (8002970 <main+0x4e8>)
 80026a6:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80026aa:	4bb1      	ldr	r3, [pc, #708]	; (8002970 <main+0x4e8>)
 80026ac:	ed93 5b02 	vldr	d5, [r3, #8]
 80026b0:	48b0      	ldr	r0, [pc, #704]	; (8002974 <main+0x4ec>)
 80026b2:	eeb0 2b45 	vmov.f64	d2, d5
 80026b6:	eeb0 1b46 	vmov.f64	d1, d6
 80026ba:	eeb0 0b47 	vmov.f64	d0, d7
 80026be:	f001 fad9 	bl	8003c74 <get_Straj>
 80026c2:	eeb0 7b40 	vmov.f64	d7, d0
 80026c6:	4baa      	ldr	r3, [pc, #680]	; (8002970 <main+0x4e8>)
 80026c8:	ed83 7b04 	vstr	d7, [r3, #16]
				motor2.omega = get_Straj(time,motor2.currentAngle,motor2.theta,arrayParams2);
 80026cc:	4ba7      	ldr	r3, [pc, #668]	; (800296c <main+0x4e4>)
 80026ce:	ed93 7b00 	vldr	d7, [r3]
 80026d2:	4ba9      	ldr	r3, [pc, #676]	; (8002978 <main+0x4f0>)
 80026d4:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80026d8:	4ba7      	ldr	r3, [pc, #668]	; (8002978 <main+0x4f0>)
 80026da:	ed93 5b02 	vldr	d5, [r3, #8]
 80026de:	48a7      	ldr	r0, [pc, #668]	; (800297c <main+0x4f4>)
 80026e0:	eeb0 2b45 	vmov.f64	d2, d5
 80026e4:	eeb0 1b46 	vmov.f64	d1, d6
 80026e8:	eeb0 0b47 	vmov.f64	d0, d7
 80026ec:	f001 fac2 	bl	8003c74 <get_Straj>
 80026f0:	eeb0 7b40 	vmov.f64	d7, d0
 80026f4:	4ba0      	ldr	r3, [pc, #640]	; (8002978 <main+0x4f0>)
 80026f6:	ed83 7b04 	vstr	d7, [r3, #16]
				motor3.omega = get_Straj(time,motor3.currentAngle,motor3.theta,arrayParams3);
 80026fa:	4b9c      	ldr	r3, [pc, #624]	; (800296c <main+0x4e4>)
 80026fc:	ed93 7b00 	vldr	d7, [r3]
 8002700:	4b97      	ldr	r3, [pc, #604]	; (8002960 <main+0x4d8>)
 8002702:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8002706:	4b96      	ldr	r3, [pc, #600]	; (8002960 <main+0x4d8>)
 8002708:	ed93 5b02 	vldr	d5, [r3, #8]
 800270c:	489c      	ldr	r0, [pc, #624]	; (8002980 <main+0x4f8>)
 800270e:	eeb0 2b45 	vmov.f64	d2, d5
 8002712:	eeb0 1b46 	vmov.f64	d1, d6
 8002716:	eeb0 0b47 	vmov.f64	d0, d7
 800271a:	f001 faab 	bl	8003c74 <get_Straj>
 800271e:	eeb0 7b40 	vmov.f64	d7, d0
 8002722:	4b8f      	ldr	r3, [pc, #572]	; (8002960 <main+0x4d8>)
 8002724:	ed83 7b04 	vstr	d7, [r3, #16]

				setProfilTimer();
 8002728:	f002 fe46 	bl	80053b8 <setProfilTimer>


				if(startMotors){
 800272c:	4b95      	ldr	r3, [pc, #596]	; (8002984 <main+0x4fc>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00e      	beq.n	8002752 <main+0x2ca>
					startMotors = false;
 8002734:	4b93      	ldr	r3, [pc, #588]	; (8002984 <main+0x4fc>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
					Start_PWM_MOTOR_1;	// Activar generacion de pwm
 800273a:	2100      	movs	r1, #0
 800273c:	4892      	ldr	r0, [pc, #584]	; (8002988 <main+0x500>)
 800273e:	f007 f887 	bl	8009850 <HAL_TIM_PWM_Start>
					Start_PWM_MOTOR_2;	// Activar generacion de pwm
 8002742:	2100      	movs	r1, #0
 8002744:	4891      	ldr	r0, [pc, #580]	; (800298c <main+0x504>)
 8002746:	f007 f883 	bl	8009850 <HAL_TIM_PWM_Start>
					Start_PWM_MOTOR_3;	// Activar generacion de pwm
 800274a:	2100      	movs	r1, #0
 800274c:	4885      	ldr	r0, [pc, #532]	; (8002964 <main+0x4dc>)
 800274e:	f007 f87f 	bl	8009850 <HAL_TIM_PWM_Start>
				}

				stopMotors = true;
 8002752:	4b8f      	ldr	r3, [pc, #572]	; (8002990 <main+0x508>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
			while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8002758:	4b85      	ldr	r3, [pc, #532]	; (8002970 <main+0x4e8>)
 800275a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800275e:	2b00      	cmp	r3, #0
 8002760:	f43f af50 	beq.w	8002604 <main+0x17c>
 8002764:	4b84      	ldr	r3, [pc, #528]	; (8002978 <main+0x4f0>)
 8002766:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800276a:	2b00      	cmp	r3, #0
 800276c:	f43f af4a 	beq.w	8002604 <main+0x17c>
 8002770:	4b7b      	ldr	r3, [pc, #492]	; (8002960 <main+0x4d8>)
 8002772:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002776:	2b00      	cmp	r3, #0
 8002778:	f43f af44 	beq.w	8002604 <main+0x17c>

			}// End while


			if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 800277c:	4b84      	ldr	r3, [pc, #528]	; (8002990 <main+0x508>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d029      	beq.n	80027d8 <main+0x350>

				startMotors = false;
 8002784:	4b7f      	ldr	r3, [pc, #508]	; (8002984 <main+0x4fc>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]

				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800278a:	2100      	movs	r1, #0
 800278c:	4876      	ldr	r0, [pc, #472]	; (8002968 <main+0x4e0>)
 800278e:	f007 fa64 	bl	8009c5a <HAL_TIM_IC_Stop>
				HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002792:	2100      	movs	r1, #0
 8002794:	487f      	ldr	r0, [pc, #508]	; (8002994 <main+0x50c>)
 8002796:	f007 fa60 	bl	8009c5a <HAL_TIM_IC_Stop>
				HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 800279a:	2100      	movs	r1, #0
 800279c:	487e      	ldr	r0, [pc, #504]	; (8002998 <main+0x510>)
 800279e:	f007 fa5c 	bl	8009c5a <HAL_TIM_IC_Stop>

				if (motor1.stepReached) Stop_PWM_MOTOR_1;
 80027a2:	4b73      	ldr	r3, [pc, #460]	; (8002970 <main+0x4e8>)
 80027a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <main+0x32c>
 80027ac:	2100      	movs	r1, #0
 80027ae:	4876      	ldr	r0, [pc, #472]	; (8002988 <main+0x500>)
 80027b0:	f007 f95c 	bl	8009a6c <HAL_TIM_PWM_Stop>
				if (motor2.stepReached) Stop_PWM_MOTOR_2;
 80027b4:	4b70      	ldr	r3, [pc, #448]	; (8002978 <main+0x4f0>)
 80027b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <main+0x33e>
 80027be:	2100      	movs	r1, #0
 80027c0:	4872      	ldr	r0, [pc, #456]	; (800298c <main+0x504>)
 80027c2:	f007 f953 	bl	8009a6c <HAL_TIM_PWM_Stop>
				if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 80027c6:	4b66      	ldr	r3, [pc, #408]	; (8002960 <main+0x4d8>)
 80027c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <main+0x350>
 80027d0:	2100      	movs	r1, #0
 80027d2:	4864      	ldr	r0, [pc, #400]	; (8002964 <main+0x4dc>)
 80027d4:	f007 f94a 	bl	8009a6c <HAL_TIM_PWM_Stop>
			}

			//Update coordinantes
			Pini.x = Pfin.x;
 80027d8:	4b70      	ldr	r3, [pc, #448]	; (800299c <main+0x514>)
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	4970      	ldr	r1, [pc, #448]	; (80029a0 <main+0x518>)
 80027e0:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y = Pfin.y;
 80027e4:	4b6d      	ldr	r3, [pc, #436]	; (800299c <main+0x514>)
 80027e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027ea:	496d      	ldr	r1, [pc, #436]	; (80029a0 <main+0x518>)
 80027ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z = Pfin.z;
 80027f0:	4b6a      	ldr	r3, [pc, #424]	; (800299c <main+0x514>)
 80027f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027f6:	496a      	ldr	r1, [pc, #424]	; (80029a0 <main+0x518>)
 80027f8:	e9c1 2304 	strd	r2, r3, [r1, #16]

			HAL_TIM_Base_Stop_IT(&htim15);
 80027fc:	4869      	ldr	r0, [pc, #420]	; (80029a4 <main+0x51c>)
 80027fe:	f006 ff97 	bl	8009730 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 8002802:	4869      	ldr	r0, [pc, #420]	; (80029a8 <main+0x520>)
 8002804:	f006 fef4 	bl	80095f0 <HAL_TIM_Base_Stop>


			state = READY;
 8002808:	4b68      	ldr	r3, [pc, #416]	; (80029ac <main+0x524>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]

			break;
 800280e:	e0a6      	b.n	800295e <main+0x4d6>

		case READY:

			if (receptionFlag){
 8002810:	4b67      	ldr	r3, [pc, #412]	; (80029b0 <main+0x528>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80a1 	beq.w	800295c <main+0x4d4>

				receptionFlag = false;
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <main+0x528>)
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]

				startMotors = true;
 8002820:	4b58      	ldr	r3, [pc, #352]	; (8002984 <main+0x4fc>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]

				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002826:	2100      	movs	r1, #0
 8002828:	484f      	ldr	r0, [pc, #316]	; (8002968 <main+0x4e0>)
 800282a:	f007 fa87 	bl	8009d3c <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800282e:	2100      	movs	r1, #0
 8002830:	4858      	ldr	r0, [pc, #352]	; (8002994 <main+0x50c>)
 8002832:	f007 fa83 	bl	8009d3c <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002836:	2100      	movs	r1, #0
 8002838:	4857      	ldr	r0, [pc, #348]	; (8002998 <main+0x510>)
 800283a:	f007 fa7f 	bl	8009d3c <HAL_TIM_IC_Start_IT>

				inverseKinematic(Pfin);
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <main+0x514>)
 8002840:	ed93 5b00 	vldr	d5, [r3]
 8002844:	ed93 6b02 	vldr	d6, [r3, #8]
 8002848:	ed93 7b04 	vldr	d7, [r3, #16]
 800284c:	eeb0 0b45 	vmov.f64	d0, d5
 8002850:	eeb0 1b46 	vmov.f64	d1, d6
 8002854:	eeb0 2b47 	vmov.f64	d2, d7
 8002858:	f7fe fe3e 	bl	80014d8 <inverseKinematic>

				update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax, arrayParams1);
 800285c:	4b44      	ldr	r3, [pc, #272]	; (8002970 <main+0x4e8>)
 800285e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002862:	4b43      	ldr	r3, [pc, #268]	; (8002970 <main+0x4e8>)
 8002864:	ed93 1b02 	vldr	d1, [r3, #8]
 8002868:	4b52      	ldr	r3, [pc, #328]	; (80029b4 <main+0x52c>)
 800286a:	ed93 2b00 	vldr	d2, [r3]
 800286e:	4b52      	ldr	r3, [pc, #328]	; (80029b8 <main+0x530>)
 8002870:	ed93 3b00 	vldr	d3, [r3]
 8002874:	4b51      	ldr	r3, [pc, #324]	; (80029bc <main+0x534>)
 8002876:	ed93 4b00 	vldr	d4, [r3]
 800287a:	4b51      	ldr	r3, [pc, #324]	; (80029c0 <main+0x538>)
 800287c:	ed93 5b00 	vldr	d5, [r3]
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <main+0x53c>)
 8002882:	ed93 6b00 	vldr	d6, [r3]
 8002886:	483b      	ldr	r0, [pc, #236]	; (8002974 <main+0x4ec>)
 8002888:	eeb0 0b47 	vmov.f64	d0, d7
 800288c:	f002 f8ac 	bl	80049e8 <update_ScurveTraj>
				update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax, arrayParams2);
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <main+0x4f0>)
 8002892:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002896:	4b38      	ldr	r3, [pc, #224]	; (8002978 <main+0x4f0>)
 8002898:	ed93 1b02 	vldr	d1, [r3, #8]
 800289c:	4b45      	ldr	r3, [pc, #276]	; (80029b4 <main+0x52c>)
 800289e:	ed93 2b00 	vldr	d2, [r3]
 80028a2:	4b45      	ldr	r3, [pc, #276]	; (80029b8 <main+0x530>)
 80028a4:	ed93 3b00 	vldr	d3, [r3]
 80028a8:	4b44      	ldr	r3, [pc, #272]	; (80029bc <main+0x534>)
 80028aa:	ed93 4b00 	vldr	d4, [r3]
 80028ae:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <main+0x538>)
 80028b0:	ed93 5b00 	vldr	d5, [r3]
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <main+0x53c>)
 80028b6:	ed93 6b00 	vldr	d6, [r3]
 80028ba:	4830      	ldr	r0, [pc, #192]	; (800297c <main+0x4f4>)
 80028bc:	eeb0 0b47 	vmov.f64	d0, d7
 80028c0:	f002 f892 	bl	80049e8 <update_ScurveTraj>
				update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax, arrayParams3);
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <main+0x4d8>)
 80028c6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80028ca:	4b25      	ldr	r3, [pc, #148]	; (8002960 <main+0x4d8>)
 80028cc:	ed93 1b02 	vldr	d1, [r3, #8]
 80028d0:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <main+0x52c>)
 80028d2:	ed93 2b00 	vldr	d2, [r3]
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <main+0x530>)
 80028d8:	ed93 3b00 	vldr	d3, [r3]
 80028dc:	4b37      	ldr	r3, [pc, #220]	; (80029bc <main+0x534>)
 80028de:	ed93 4b00 	vldr	d4, [r3]
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <main+0x538>)
 80028e4:	ed93 5b00 	vldr	d5, [r3]
 80028e8:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <main+0x53c>)
 80028ea:	ed93 6b00 	vldr	d6, [r3]
 80028ee:	4824      	ldr	r0, [pc, #144]	; (8002980 <main+0x4f8>)
 80028f0:	eeb0 0b47 	vmov.f64	d0, d7
 80028f4:	f002 f878 	bl	80049e8 <update_ScurveTraj>

				configMotor(&motor1,1);
 80028f8:	2101      	movs	r1, #1
 80028fa:	481d      	ldr	r0, [pc, #116]	; (8002970 <main+0x4e8>)
 80028fc:	f000 fa38 	bl	8002d70 <configMotor>
				configMotor(&motor2,2);
 8002900:	2102      	movs	r1, #2
 8002902:	481d      	ldr	r0, [pc, #116]	; (8002978 <main+0x4f0>)
 8002904:	f000 fa34 	bl	8002d70 <configMotor>
				configMotor(&motor3,3);
 8002908:	2103      	movs	r1, #3
 800290a:	4815      	ldr	r0, [pc, #84]	; (8002960 <main+0x4d8>)
 800290c:	f000 fa30 	bl	8002d70 <configMotor>

				timeFlag = false;
 8002910:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <main+0x540>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]

				motor1.pMotor = 0;
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <main+0x4e8>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
				motor2.pMotor = 0;
 800291c:	4b16      	ldr	r3, [pc, #88]	; (8002978 <main+0x4f0>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
				motor3.pMotor = 0;
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <main+0x4d8>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

				motor1.stepReached = false;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <main+0x4e8>)
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				motor2.stepReached = false;
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <main+0x4f0>)
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				motor3.stepReached = false;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <main+0x4d8>)
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				HAL_TIM_Base_Start(&htim5);
 8002940:	4819      	ldr	r0, [pc, #100]	; (80029a8 <main+0x520>)
 8002942:	f006 fde5 	bl	8009510 <HAL_TIM_Base_Start>
				HAL_TIM_Base_Start_IT(&htim15);
 8002946:	4817      	ldr	r0, [pc, #92]	; (80029a4 <main+0x51c>)
 8002948:	f006 fe7a 	bl	8009640 <HAL_TIM_Base_Start_IT>


				state = WORKING;
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <main+0x524>)
 800294e:	2202      	movs	r2, #2
 8002950:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002952:	e003      	b.n	800295c <main+0x4d4>
			//TODO: DESARROLLAR EL ESTADO DE EMERGENCIA/ERROR


			break;

		default:break;
 8002954:	bf00      	nop
 8002956:	e5b5      	b.n	80024c4 <main+0x3c>
			break;
 8002958:	bf00      	nop
 800295a:	e5b3      	b.n	80024c4 <main+0x3c>
			break;
 800295c:	bf00      	nop
		switch (state){
 800295e:	e5b1      	b.n	80024c4 <main+0x3c>
 8002960:	240003d8 	.word	0x240003d8
 8002964:	24000740 	.word	0x24000740
 8002968:	24000578 	.word	0x24000578
 800296c:	24000538 	.word	0x24000538
 8002970:	24000358 	.word	0x24000358
 8002974:	24000490 	.word	0x24000490
 8002978:	24000398 	.word	0x24000398
 800297c:	240004c8 	.word	0x240004c8
 8002980:	24000500 	.word	0x24000500
 8002984:	2400041a 	.word	0x2400041a
 8002988:	240006a8 	.word	0x240006a8
 800298c:	240006f4 	.word	0x240006f4
 8002990:	2400041b 	.word	0x2400041b
 8002994:	240005c4 	.word	0x240005c4
 8002998:	24000610 	.word	0x24000610
 800299c:	24000478 	.word	0x24000478
 80029a0:	24000460 	.word	0x24000460
 80029a4:	2400078c 	.word	0x2400078c
 80029a8:	2400065c 	.word	0x2400065c
 80029ac:	24000418 	.word	0x24000418
 80029b0:	24000563 	.word	0x24000563
 80029b4:	24000018 	.word	0x24000018
 80029b8:	24000450 	.word	0x24000450
 80029bc:	24000010 	.word	0x24000010
 80029c0:	24000020 	.word	0x24000020
 80029c4:	24000008 	.word	0x24000008
 80029c8:	24000571 	.word	0x24000571

080029cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b09c      	sub	sp, #112	; 0x70
 80029d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d6:	224c      	movs	r2, #76	; 0x4c
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f00b f876 	bl	800dacc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	2220      	movs	r2, #32
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f00b f870 	bl	800dacc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80029ec:	2002      	movs	r0, #2
 80029ee:	f004 f9db 	bl	8006da8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80029f2:	2300      	movs	r3, #0
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <SystemClock_Config+0xf4>)
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	4a31      	ldr	r2, [pc, #196]	; (8002ac0 <SystemClock_Config+0xf4>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002a02:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <SystemClock_Config+0xf4>)
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <SystemClock_Config+0xf8>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a14:	4a2b      	ldr	r2, [pc, #172]	; (8002ac4 <SystemClock_Config+0xf8>)
 8002a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a1a:	6193      	str	r3, [r2, #24]
 8002a1c:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <SystemClock_Config+0xf8>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002a28:	bf00      	nop
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <SystemClock_Config+0xf8>)
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a36:	d1f8      	bne.n	8002a2a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a40:	2340      	movs	r3, #64	; 0x40
 8002a42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a44:	2302      	movs	r3, #2
 8002a46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002a50:	2310      	movs	r3, #16
 8002a52:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002a54:	2302      	movs	r3, #2
 8002a56:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002a60:	230c      	movs	r3, #12
 8002a62:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a70:	4618      	mov	r0, r3
 8002a72:	f004 f9d3 	bl	8006e1c <HAL_RCC_OscConfig>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002a7c:	f000 f970 	bl	8002d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a80:	233f      	movs	r3, #63	; 0x3f
 8002a82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a84:	2303      	movs	r3, #3
 8002a86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002a94:	2340      	movs	r3, #64	; 0x40
 8002a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 fde6 	bl	8007678 <HAL_RCC_ClockConfig>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002ab2:	f000 f955 	bl	8002d60 <Error_Handler>
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	3770      	adds	r7, #112	; 0x70
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	58000400 	.word	0x58000400
 8002ac4:	58024800 	.word	0x58024800

08002ac8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == E_EndStop1_Inf_Pin ){
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d103      	bne.n	8002ae0 <HAL_GPIO_EXTI_Callback+0x18>
		Stop_PWM_MOTOR_1;
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4815      	ldr	r0, [pc, #84]	; (8002b30 <HAL_GPIO_EXTI_Callback+0x68>)
 8002adc:	f006 ffc6 	bl	8009a6c <HAL_TIM_PWM_Stop>
		//HAL_UART_Transmit(&huart3, "EndStop1Inf\n\r", 13, 100);
	}
	if (GPIO_Pin == E_EndStop1_Sup_Pin ){
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d103      	bne.n	8002aee <HAL_GPIO_EXTI_Callback+0x26>
		Stop_PWM_MOTOR_1;
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4811      	ldr	r0, [pc, #68]	; (8002b30 <HAL_GPIO_EXTI_Callback+0x68>)
 8002aea:	f006 ffbf 	bl	8009a6c <HAL_TIM_PWM_Stop>
		//HAL_UART_Transmit(&huart3, "EndStop1Sup\n\r", 13, 100);
	}
	if (GPIO_Pin == E_EndStop2_Inf_Pin ){
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d103      	bne.n	8002afc <HAL_GPIO_EXTI_Callback+0x34>
		Stop_PWM_MOTOR_2;
 8002af4:	2100      	movs	r1, #0
 8002af6:	480f      	ldr	r0, [pc, #60]	; (8002b34 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002af8:	f006 ffb8 	bl	8009a6c <HAL_TIM_PWM_Stop>
		//HAL_UART_Transmit(&huart3, "EndStop2Inf\n\r", 13, 100);
	}
	if (GPIO_Pin == E_EndStop2_Sup_Pin ){
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d103      	bne.n	8002b0a <HAL_GPIO_EXTI_Callback+0x42>
		Stop_PWM_MOTOR_2;
 8002b02:	2100      	movs	r1, #0
 8002b04:	480b      	ldr	r0, [pc, #44]	; (8002b34 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002b06:	f006 ffb1 	bl	8009a6c <HAL_TIM_PWM_Stop>
		//HAL_UART_Transmit(&huart3, "EndStop2Sup\n\r", 13, 100);
	}
	if (GPIO_Pin == E_EndStop3_Inf_Pin ){
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d103      	bne.n	8002b18 <HAL_GPIO_EXTI_Callback+0x50>
		Stop_PWM_MOTOR_3;
 8002b10:	2100      	movs	r1, #0
 8002b12:	4809      	ldr	r0, [pc, #36]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x70>)
 8002b14:	f006 ffaa 	bl	8009a6c <HAL_TIM_PWM_Stop>
		//HAL_UART_Transmit(&huart3, "EndStop3Inf\n\r", 13, 100);
	}
	if (GPIO_Pin == E_EndStop3_Sup_Pin ){
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d103      	bne.n	8002b26 <HAL_GPIO_EXTI_Callback+0x5e>
		Stop_PWM_MOTOR_3;
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4805      	ldr	r0, [pc, #20]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x70>)
 8002b22:	f006 ffa3 	bl	8009a6c <HAL_TIM_PWM_Stop>
		//HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
	}


}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	240006a8 	.word	0x240006a8
 8002b34:	240006f4 	.word	0x240006f4
 8002b38:	24000740 	.word	0x24000740

08002b3c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a30      	ldr	r2, [pc, #192]	; (8002c0c <HAL_UART_RxCpltCallback+0xd0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d14d      	bne.n	8002bea <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8002b4e:	4b30      	ldr	r3, [pc, #192]	; (8002c10 <HAL_UART_RxCpltCallback+0xd4>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b3a      	cmp	r3, #58	; 0x3a
 8002b58:	d006      	beq.n	8002b68 <HAL_UART_RxCpltCallback+0x2c>
 8002b5a:	2b3a      	cmp	r3, #58	; 0x3a
 8002b5c:	dc36      	bgt.n	8002bcc <HAL_UART_RxCpltCallback+0x90>
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d009      	beq.n	8002b76 <HAL_UART_RxCpltCallback+0x3a>
 8002b62:	2b0d      	cmp	r3, #13
 8002b64:	d01e      	beq.n	8002ba4 <HAL_UART_RxCpltCallback+0x68>
 8002b66:	e031      	b.n	8002bcc <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8002b68:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_UART_RxCpltCallback+0xdc>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
			break;
 8002b74:	e040      	b.n	8002bf8 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 8002b76:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d037      	beq.n	8002bee <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8002b7e:	4b25      	ldr	r3, [pc, #148]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002b88:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002b8a:	e030      	b.n	8002bee <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8002b8c:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <HAL_UART_RxCpltCallback+0xe0>)
 8002b94:	2100      	movs	r1, #0
 8002b96:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8002b98:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002ba2:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b1e      	cmp	r3, #30
 8002baa:	d1ef      	bne.n	8002b8c <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_UART_RxCpltCallback+0xdc>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d11e      	bne.n	8002bf2 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_UART_RxCpltCallback+0xe0>)
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8002bc0:	f7fe fb94 	bl	80012ec <interpretaComando>
				cm0 = 0;
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_UART_RxCpltCallback+0xdc>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]

			}
			break;
 8002bca:	e012      	b.n	8002bf2 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b1d      	cmp	r3, #29
 8002bd2:	d810      	bhi.n	8002bf6 <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	b2d1      	uxtb	r1, r2
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_UART_RxCpltCallback+0xd8>)
 8002bde:	7011      	strb	r1, [r2, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <HAL_UART_RxCpltCallback+0xe0>)
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	5453      	strb	r3, [r2, r1]
			}
			break;
 8002be8:	e005      	b.n	8002bf6 <HAL_UART_RxCpltCallback+0xba>
		}
	}
 8002bea:	bf00      	nop
 8002bec:	e004      	b.n	8002bf8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002bee:	bf00      	nop
 8002bf0:	e002      	b.n	8002bf8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002bf2:	bf00      	nop
 8002bf4:	e000      	b.n	8002bf8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002bf6:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4905      	ldr	r1, [pc, #20]	; (8002c10 <HAL_UART_RxCpltCallback+0xd4>)
 8002bfc:	4808      	ldr	r0, [pc, #32]	; (8002c20 <HAL_UART_RxCpltCallback+0xe4>)
 8002bfe:	f008 fcc3 	bl	800b588 <HAL_UART_Receive_IT>
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40004800 	.word	0x40004800
 8002c10:	24000562 	.word	0x24000562
 8002c14:	24000540 	.word	0x24000540
 8002c18:	24000570 	.word	0x24000570
 8002c1c:	24000544 	.word	0x24000544
 8002c20:	24000968 	.word	0x24000968

08002c24 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	__NOP();
 8002c2c:	bf00      	nop
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4c:	d110      	bne.n	8002c70 <HAL_TIM_IC_CaptureCallback+0x34>
		if (motor1.pMotor == motor1.numStep) {
 8002c4e:	4b21      	ldr	r3, [pc, #132]	; (8002cd4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d104      	bne.n	8002c64 <HAL_TIM_IC_CaptureCallback+0x28>
			motor1.stepReached = true;
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}
		else{}
	}
	*/

}
 8002c62:	e030      	b.n	8002cc6 <HAL_TIM_IC_CaptureCallback+0x8a>
			motor1.pMotor++;
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a1a      	ldr	r2, [pc, #104]	; (8002cd4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002c6c:	6013      	str	r3, [r2, #0]
}
 8002c6e:	e02a      	b.n	8002cc6 <HAL_TIM_IC_CaptureCallback+0x8a>
	}else if (htim->Instance == TIM3){
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d110      	bne.n	8002c9c <HAL_TIM_IC_CaptureCallback+0x60>
		if (motor2.pMotor == motor2.numStep) {
 8002c7a:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d104      	bne.n	8002c90 <HAL_TIM_IC_CaptureCallback+0x54>
			motor2.stepReached = true;
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002c8e:	e01a      	b.n	8002cc6 <HAL_TIM_IC_CaptureCallback+0x8a>
			motor2.pMotor++;
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3301      	adds	r3, #1
 8002c96:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002c98:	6013      	str	r3, [r2, #0]
}
 8002c9a:	e014      	b.n	8002cc6 <HAL_TIM_IC_CaptureCallback+0x8a>
	}else if (htim->Instance == TIM4){
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0f      	ldr	r2, [pc, #60]	; (8002ce0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10f      	bne.n	8002cc6 <HAL_TIM_IC_CaptureCallback+0x8a>
		if (motor3.pMotor == motor3.numStep) {
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d104      	bne.n	8002cbc <HAL_TIM_IC_CaptureCallback+0x80>
			motor3.stepReached = true;
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002cba:	e004      	b.n	8002cc6 <HAL_TIM_IC_CaptureCallback+0x8a>
			motor3.pMotor++;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002cc4:	6013      	str	r3, [r2, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	24000358 	.word	0x24000358
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	24000398 	.word	0x24000398
 8002ce0:	40000800 	.word	0x40000800
 8002ce4:	240003d8 	.word	0x240003d8

08002ce8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer that update velocity'curve
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d11f      	bne.n	8002d38 <HAL_TIM_PeriodElapsedCallback+0x50>

		if (!timeFlag) {
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <HAL_TIM_PeriodElapsedCallback+0x24>
			timeFlag = true;
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
			TIM5->CNT = 0;	//We start counting from here
 8002d06:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / FCL));
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002d26:	ed9f 4b08 	vldr	d4, [pc, #32]	; 8002d48 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002d2a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002d2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002d34:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	f3af 8000 	nop.w
 8002d48:	00000000 	.word	0x00000000
 8002d4c:	418e8480 	.word	0x418e8480
 8002d50:	2400078c 	.word	0x2400078c
 8002d54:	24000571 	.word	0x24000571
 8002d58:	40000c00 	.word	0x40000c00
 8002d5c:	24000538 	.word	0x24000538

08002d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	ed93 6b02 	vldr	d6, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002d8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	db39      	blt.n	8002e0a <configMotor+0x9a>
		if(ES1i_PRESSED){
 8002d96:	2102      	movs	r1, #2
 8002d98:	4861      	ldr	r0, [pc, #388]	; (8002f20 <configMotor+0x1b0>)
 8002d9a:	f003 ffb9 	bl	8006d10 <HAL_GPIO_ReadPin>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d106      	bne.n	8002db2 <configMotor+0x42>
			flagErrorEndStop = 1;
 8002da4:	495f      	ldr	r1, [pc, #380]	; (8002f24 <configMotor+0x1b4>)
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <configMotor+0x1b8>)
 8002dac:	e9c1 2300 	strd	r2, r3, [r1]
 8002db0:	e064      	b.n	8002e7c <configMotor+0x10c>
		} else {
			diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	ed93 6b02 	vldr	d6, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002dbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002dc2:	ed87 7b02 	vstr	d7, [r7, #8]
			motor->currentAngle = motor->theta;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <configMotor+0x74>
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dde:	4853      	ldr	r0, [pc, #332]	; (8002f2c <configMotor+0x1bc>)
 8002de0:	f003 ffae 	bl	8006d40 <HAL_GPIO_WritePin>
            if (i==1) negative_Dir_MOTOR_2;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d105      	bne.n	8002df6 <configMotor+0x86>
 8002dea:	2201      	movs	r2, #1
 8002dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002df0:	484e      	ldr	r0, [pc, #312]	; (8002f2c <configMotor+0x1bc>)
 8002df2:	f003 ffa5 	bl	8006d40 <HAL_GPIO_WritePin>
            if (i==2) negative_Dir_MOTOR_3;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d13f      	bne.n	8002e7c <configMotor+0x10c>
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e02:	484a      	ldr	r0, [pc, #296]	; (8002f2c <configMotor+0x1bc>)
 8002e04:	f003 ff9c 	bl	8006d40 <HAL_GPIO_WritePin>
 8002e08:	e038      	b.n	8002e7c <configMotor+0x10c>
		}
	} else {
		if(ES1s_PRESSED){
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4844      	ldr	r0, [pc, #272]	; (8002f20 <configMotor+0x1b0>)
 8002e0e:	f003 ff7f 	bl	8006d10 <HAL_GPIO_ReadPin>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <configMotor+0xb6>
			flagErrorEndStop = 1;
 8002e18:	4942      	ldr	r1, [pc, #264]	; (8002f24 <configMotor+0x1b4>)
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	4b42      	ldr	r3, [pc, #264]	; (8002f28 <configMotor+0x1b8>)
 8002e20:	e9c1 2300 	strd	r2, r3, [r1]
 8002e24:	e02a      	b.n	8002e7c <configMotor+0x10c>
		} else {
			diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	ed93 7b02 	vldr	d7, [r3, #8]
 8002e32:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e36:	ed87 7b02 	vstr	d7, [r7, #8]
			motor->currentAngle = motor->theta;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

			if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <configMotor+0xe8>
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e52:	4836      	ldr	r0, [pc, #216]	; (8002f2c <configMotor+0x1bc>)
 8002e54:	f003 ff74 	bl	8006d40 <HAL_GPIO_WritePin>
            if (i==1) positive_Dir_MOTOR_2;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d105      	bne.n	8002e6a <configMotor+0xfa>
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e64:	4831      	ldr	r0, [pc, #196]	; (8002f2c <configMotor+0x1bc>)
 8002e66:	f003 ff6b 	bl	8006d40 <HAL_GPIO_WritePin>
            if (i==2) positive_Dir_MOTOR_3;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d105      	bne.n	8002e7c <configMotor+0x10c>
 8002e70:	2200      	movs	r2, #0
 8002e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e76:	482d      	ldr	r0, [pc, #180]	; (8002f2c <configMotor+0x1bc>)
 8002e78:	f003 ff62 	bl	8006d40 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	motor->calcStep = (diffAngles * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 8002e7c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002e80:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002f10 <configMotor+0x1a0>
 8002e84:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002e88:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8002f18 <configMotor+0x1a8>
 8002e8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	motor->numStep = (uint32_t) motor->calcStep;	// cuando pasa la unidad lo sumo al numero de pasos para
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002e9c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ea0:	ee17 2a90 	vmov	r2, s15
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	605a      	str	r2, [r3, #4]
	motor->remanente = motor->remanente + (motor->calcStep - motor->numStep);// que el error no se amplifique.
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	ee07 3a90 	vmov	s15, r3
 8002ebc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002ec0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002ec4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	if (motor->remanente >= 1) {
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002ed4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002ed8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee0:	da00      	bge.n	8002ee4 <configMotor+0x174>
		motor->remanente = motor->remanente - 1;
		motor->numStep = motor->numStep + 1;
	}

}
 8002ee2:	e00e      	b.n	8002f02 <configMotor+0x192>
		motor->remanente = motor->remanente - 1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002eea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002eee:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		motor->numStep = motor->numStep + 1;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	605a      	str	r2, [r3, #4]
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	f3af 8000 	nop.w
 8002f10:	00000000 	.word	0x00000000
 8002f14:	40bf4000 	.word	0x40bf4000
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	40768000 	.word	0x40768000
 8002f20:	58021000 	.word	0x58021000
 8002f24:	24000568 	.word	0x24000568
 8002f28:	3ff00000 	.word	0x3ff00000
 8002f2c:	58020800 	.word	0x58020800

08002f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_MspInit+0x44>)
 8002f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <HAL_MspInit+0x44>)
 8002f3e:	f043 0302 	orr.w	r3, r3, #2
 8002f42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_MspInit+0x44>)
 8002f48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002f54:	2005      	movs	r0, #5
 8002f56:	f002 ff79 	bl	8005e4c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	2051      	movs	r0, #81	; 0x51
 8002f60:	f002 ff7f 	bl	8005e62 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002f64:	2051      	movs	r0, #81	; 0x51
 8002f66:	f002 ff96 	bl	8005e96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	58024400 	.word	0x58024400

08002f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f8a:	e7fe      	b.n	8002f8a <HardFault_Handler+0x4>

08002f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f90:	e7fe      	b.n	8002f90 <MemManage_Handler+0x4>

08002f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f96:	e7fe      	b.n	8002f96 <BusFault_Handler+0x4>

08002f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f9c:	e7fe      	b.n	8002f9c <UsageFault_Handler+0x4>

08002f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fcc:	f002 fdfa 	bl	8005bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8002fd8:	2001      	movs	r0, #1
 8002fda:	f003 feca 	bl	8006d72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	f003 fec3 	bl	8006d72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8002ff4:	2004      	movs	r0, #4
 8002ff6:	f003 febc 	bl	8006d72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003002:	2008      	movs	r0, #8
 8003004:	f003 feb5 	bl	8006d72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}

0800300c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003010:	2010      	movs	r0, #16
 8003012:	f003 feae 	bl	8006d72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}

0800301a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 800301e:	2020      	movs	r0, #32
 8003020:	f003 fea7 	bl	8006d72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}

08003028 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <TIM2_IRQHandler+0x10>)
 800302e:	f006 ffd5 	bl	8009fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	24000578 	.word	0x24000578

0800303c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <TIM3_IRQHandler+0x10>)
 8003042:	f006 ffcb 	bl	8009fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	240005c4 	.word	0x240005c4

08003050 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <TIM4_IRQHandler+0x10>)
 8003056:	f006 ffc1 	bl	8009fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	24000610 	.word	0x24000610

08003064 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003068:	4802      	ldr	r0, [pc, #8]	; (8003074 <USART3_IRQHandler+0x10>)
 800306a:	f008 fae3 	bl	800b634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	24000968 	.word	0x24000968

08003078 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800307c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003080:	f003 fe77 	bl	8006d72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}

08003088 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <TIM15_IRQHandler+0x10>)
 800309e:	f006 ff9d 	bl	8009fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2400078c 	.word	0x2400078c

080030ac <_getpid>:
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	2301      	movs	r3, #1
 80030b2:	4618      	mov	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <_kill>:
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	f00a fcd7 	bl	800da78 <__errno>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2216      	movs	r2, #22
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <_exit>:
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ffe7 	bl	80030bc <_kill>
 80030ee:	e7fe      	b.n	80030ee <_exit+0x12>

080030f0 <_read>:
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	e00a      	b.n	8003118 <_read+0x28>
 8003102:	f3af 8000 	nop.w
 8003106:	4601      	mov	r1, r0
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	60ba      	str	r2, [r7, #8]
 800310e:	b2ca      	uxtb	r2, r1
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	dbf0      	blt.n	8003102 <_read+0x12>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <_write>:
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e009      	b.n	8003150 <_write+0x26>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	60ba      	str	r2, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f3af 8000 	nop.w
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3301      	adds	r3, #1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	dbf1      	blt.n	800313c <_write+0x12>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <_close>:
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	f04f 33ff 	mov.w	r3, #4294967295
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <_fstat>:
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	2300      	movs	r3, #0
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <_isatty>:
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	2301      	movs	r3, #1
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <_lseek>:
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	2300      	movs	r3, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <_sbrk>:
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <_sbrk+0x50>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <_sbrk+0x16>
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <_sbrk+0x50>)
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <_sbrk+0x54>)
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <_sbrk+0x50>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <_sbrk+0x50>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	466a      	mov	r2, sp
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d907      	bls.n	8003206 <_sbrk+0x3a>
 80031f6:	f00a fc3f 	bl	800da78 <__errno>
 80031fa:	4603      	mov	r3, r0
 80031fc:	220c      	movs	r2, #12
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f04f 33ff 	mov.w	r3, #4294967295
 8003204:	e006      	b.n	8003214 <_sbrk+0x48>
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <_sbrk+0x50>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	4a03      	ldr	r2, [pc, #12]	; (800321c <_sbrk+0x50>)
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	24000574 	.word	0x24000574
 8003220:	24000a10 	.word	0x24000a10

08003224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003228:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <SystemInit+0xac>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <SystemInit+0xac>)
 8003230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <SystemInit+0xb0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a25      	ldr	r2, [pc, #148]	; (80032d4 <SystemInit+0xb0>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <SystemInit+0xb0>)
 8003246:	2200      	movs	r2, #0
 8003248:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800324a:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <SystemInit+0xb0>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4921      	ldr	r1, [pc, #132]	; (80032d4 <SystemInit+0xb0>)
 8003250:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <SystemInit+0xb4>)
 8003252:	4013      	ands	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003256:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <SystemInit+0xb0>)
 8003258:	2200      	movs	r2, #0
 800325a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <SystemInit+0xb0>)
 800325e:	2200      	movs	r2, #0
 8003260:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003262:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <SystemInit+0xb0>)
 8003264:	2200      	movs	r2, #0
 8003266:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <SystemInit+0xb0>)
 800326a:	2200      	movs	r2, #0
 800326c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800326e:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <SystemInit+0xb0>)
 8003270:	2200      	movs	r2, #0
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003274:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <SystemInit+0xb0>)
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <SystemInit+0xb0>)
 800327c:	2200      	movs	r2, #0
 800327e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003280:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <SystemInit+0xb0>)
 8003282:	2200      	movs	r2, #0
 8003284:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <SystemInit+0xb0>)
 8003288:	2200      	movs	r2, #0
 800328a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <SystemInit+0xb0>)
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <SystemInit+0xb0>)
 8003294:	2200      	movs	r2, #0
 8003296:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <SystemInit+0xb0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <SystemInit+0xb0>)
 800329e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <SystemInit+0xb0>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <SystemInit+0xb8>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <SystemInit+0xbc>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b6:	d202      	bcs.n	80032be <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <SystemInit+0xc0>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <SystemInit+0xac>)
 80032c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032c4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00
 80032d4:	58024400 	.word	0x58024400
 80032d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80032dc:	5c001000 	.word	0x5c001000
 80032e0:	ffff0000 	.word	0xffff0000
 80032e4:	51008108 	.word	0x51008108

080032e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	; 0x30
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ee:	f107 0320 	add.w	r3, r7, #32
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003314:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <MX_TIM2_Init+0xdc>)
 8003316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800331a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800331c:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <MX_TIM2_Init+0xdc>)
 800331e:	2200      	movs	r2, #0
 8003320:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003322:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <MX_TIM2_Init+0xdc>)
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003328:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <MX_TIM2_Init+0xdc>)
 800332a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800332e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003330:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <MX_TIM2_Init+0xdc>)
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003336:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <MX_TIM2_Init+0xdc>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800333c:	4821      	ldr	r0, [pc, #132]	; (80033c4 <MX_TIM2_Init+0xdc>)
 800333e:	f006 f88f 	bl	8009460 <HAL_TIM_Base_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003348:	f7ff fd0a 	bl	8002d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800334c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003350:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003352:	f107 0320 	add.w	r3, r7, #32
 8003356:	4619      	mov	r1, r3
 8003358:	481a      	ldr	r0, [pc, #104]	; (80033c4 <MX_TIM2_Init+0xdc>)
 800335a:	f007 f90f 	bl	800a57c <HAL_TIM_ConfigClockSource>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003364:	f7ff fcfc 	bl	8002d60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003368:	4816      	ldr	r0, [pc, #88]	; (80033c4 <MX_TIM2_Init+0xdc>)
 800336a:	f006 fc15 	bl	8009b98 <HAL_TIM_IC_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003374:	f7ff fcf4 	bl	8002d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	4619      	mov	r1, r3
 8003386:	480f      	ldr	r0, [pc, #60]	; (80033c4 <MX_TIM2_Init+0xdc>)
 8003388:	f007 ff6c 	bl	800b264 <HAL_TIMEx_MasterConfigSynchronization>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003392:	f7ff fce5 	bl	8002d60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800339a:	2301      	movs	r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	2200      	movs	r2, #0
 80033aa:	4619      	mov	r1, r3
 80033ac:	4805      	ldr	r0, [pc, #20]	; (80033c4 <MX_TIM2_Init+0xdc>)
 80033ae:	f006 ff34 	bl	800a21a <HAL_TIM_IC_ConfigChannel>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80033b8:	f7ff fcd2 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033bc:	bf00      	nop
 80033be:	3730      	adds	r7, #48	; 0x30
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	24000578 	.word	0x24000578

080033c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ce:	f107 0320 	add.w	r3, r7, #32
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	609a      	str	r2, [r3, #8]
 80033da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033f4:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <MX_TIM3_Init+0xdc>)
 80033f6:	4a2c      	ldr	r2, [pc, #176]	; (80034a8 <MX_TIM3_Init+0xe0>)
 80033f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033fa:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <MX_TIM3_Init+0xdc>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003400:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <MX_TIM3_Init+0xdc>)
 8003402:	2200      	movs	r2, #0
 8003404:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003406:	4b27      	ldr	r3, [pc, #156]	; (80034a4 <MX_TIM3_Init+0xdc>)
 8003408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800340c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800340e:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <MX_TIM3_Init+0xdc>)
 8003410:	2200      	movs	r2, #0
 8003412:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003414:	4b23      	ldr	r3, [pc, #140]	; (80034a4 <MX_TIM3_Init+0xdc>)
 8003416:	2200      	movs	r2, #0
 8003418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800341a:	4822      	ldr	r0, [pc, #136]	; (80034a4 <MX_TIM3_Init+0xdc>)
 800341c:	f006 f820 	bl	8009460 <HAL_TIM_Base_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8003426:	f7ff fc9b 	bl	8002d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800342a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800342e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003430:	f107 0320 	add.w	r3, r7, #32
 8003434:	4619      	mov	r1, r3
 8003436:	481b      	ldr	r0, [pc, #108]	; (80034a4 <MX_TIM3_Init+0xdc>)
 8003438:	f007 f8a0 	bl	800a57c <HAL_TIM_ConfigClockSource>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003442:	f7ff fc8d 	bl	8002d60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003446:	4817      	ldr	r0, [pc, #92]	; (80034a4 <MX_TIM3_Init+0xdc>)
 8003448:	f006 fba6 	bl	8009b98 <HAL_TIM_IC_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003452:	f7ff fc85 	bl	8002d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800345e:	f107 0314 	add.w	r3, r7, #20
 8003462:	4619      	mov	r1, r3
 8003464:	480f      	ldr	r0, [pc, #60]	; (80034a4 <MX_TIM3_Init+0xdc>)
 8003466:	f007 fefd 	bl	800b264 <HAL_TIMEx_MasterConfigSynchronization>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8003470:	f7ff fc76 	bl	8002d60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003474:	2300      	movs	r3, #0
 8003476:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003478:	2301      	movs	r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	2200      	movs	r2, #0
 8003488:	4619      	mov	r1, r3
 800348a:	4806      	ldr	r0, [pc, #24]	; (80034a4 <MX_TIM3_Init+0xdc>)
 800348c:	f006 fec5 	bl	800a21a <HAL_TIM_IC_ConfigChannel>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003496:	f7ff fc63 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800349a:	bf00      	nop
 800349c:	3730      	adds	r7, #48	; 0x30
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	240005c4 	.word	0x240005c4
 80034a8:	40000400 	.word	0x40000400

080034ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08c      	sub	sp, #48	; 0x30
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034b2:	f107 0320 	add.w	r3, r7, #32
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80034cc:	1d3b      	adds	r3, r7, #4
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	609a      	str	r2, [r3, #8]
 80034d6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034d8:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <MX_TIM4_Init+0xdc>)
 80034da:	4a2c      	ldr	r2, [pc, #176]	; (800358c <MX_TIM4_Init+0xe0>)
 80034dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80034de:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <MX_TIM4_Init+0xdc>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034e4:	4b28      	ldr	r3, [pc, #160]	; (8003588 <MX_TIM4_Init+0xdc>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80034ea:	4b27      	ldr	r3, [pc, #156]	; (8003588 <MX_TIM4_Init+0xdc>)
 80034ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034f2:	4b25      	ldr	r3, [pc, #148]	; (8003588 <MX_TIM4_Init+0xdc>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f8:	4b23      	ldr	r3, [pc, #140]	; (8003588 <MX_TIM4_Init+0xdc>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80034fe:	4822      	ldr	r0, [pc, #136]	; (8003588 <MX_TIM4_Init+0xdc>)
 8003500:	f005 ffae 	bl	8009460 <HAL_TIM_Base_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800350a:	f7ff fc29 	bl	8002d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800350e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003512:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003514:	f107 0320 	add.w	r3, r7, #32
 8003518:	4619      	mov	r1, r3
 800351a:	481b      	ldr	r0, [pc, #108]	; (8003588 <MX_TIM4_Init+0xdc>)
 800351c:	f007 f82e 	bl	800a57c <HAL_TIM_ConfigClockSource>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003526:	f7ff fc1b 	bl	8002d60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800352a:	4817      	ldr	r0, [pc, #92]	; (8003588 <MX_TIM4_Init+0xdc>)
 800352c:	f006 fb34 	bl	8009b98 <HAL_TIM_IC_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003536:	f7ff fc13 	bl	8002d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	4619      	mov	r1, r3
 8003548:	480f      	ldr	r0, [pc, #60]	; (8003588 <MX_TIM4_Init+0xdc>)
 800354a:	f007 fe8b 	bl	800b264 <HAL_TIMEx_MasterConfigSynchronization>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8003554:	f7ff fc04 	bl	8002d60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003558:	2300      	movs	r3, #0
 800355a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800355c:	2301      	movs	r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	2200      	movs	r2, #0
 800356c:	4619      	mov	r1, r3
 800356e:	4806      	ldr	r0, [pc, #24]	; (8003588 <MX_TIM4_Init+0xdc>)
 8003570:	f006 fe53 	bl	800a21a <HAL_TIM_IC_ConfigChannel>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800357a:	f7ff fbf1 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800357e:	bf00      	nop
 8003580:	3730      	adds	r7, #48	; 0x30
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	24000610 	.word	0x24000610
 800358c:	40000800 	.word	0x40000800

08003590 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003596:	f107 0310 	add.w	r3, r7, #16
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <MX_TIM5_Init+0x94>)
 80035b0:	4a1d      	ldr	r2, [pc, #116]	; (8003628 <MX_TIM5_Init+0x98>)
 80035b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <MX_TIM5_Init+0x94>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ba:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <MX_TIM5_Init+0x94>)
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80035c0:	4b18      	ldr	r3, [pc, #96]	; (8003624 <MX_TIM5_Init+0x94>)
 80035c2:	f04f 32ff 	mov.w	r2, #4294967295
 80035c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <MX_TIM5_Init+0x94>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <MX_TIM5_Init+0x94>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80035d4:	4813      	ldr	r0, [pc, #76]	; (8003624 <MX_TIM5_Init+0x94>)
 80035d6:	f005 ff43 	bl	8009460 <HAL_TIM_Base_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80035e0:	f7ff fbbe 	bl	8002d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80035ea:	f107 0310 	add.w	r3, r7, #16
 80035ee:	4619      	mov	r1, r3
 80035f0:	480c      	ldr	r0, [pc, #48]	; (8003624 <MX_TIM5_Init+0x94>)
 80035f2:	f006 ffc3 	bl	800a57c <HAL_TIM_ConfigClockSource>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80035fc:	f7ff fbb0 	bl	8002d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003600:	2300      	movs	r3, #0
 8003602:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4805      	ldr	r0, [pc, #20]	; (8003624 <MX_TIM5_Init+0x94>)
 800360e:	f007 fe29 	bl	800b264 <HAL_TIMEx_MasterConfigSynchronization>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003618:	f7ff fba2 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800361c:	bf00      	nop
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	2400065c 	.word	0x2400065c
 8003628:	40000c00 	.word	0x40000c00

0800362c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08c      	sub	sp, #48	; 0x30
 8003630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003632:	f107 0320 	add.w	r3, r7, #32
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	609a      	str	r2, [r3, #8]
 800363e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	611a      	str	r2, [r3, #16]
 800364e:	615a      	str	r2, [r3, #20]
 8003650:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003652:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <MX_TIM12_Init+0xbc>)
 8003654:	4a25      	ldr	r2, [pc, #148]	; (80036ec <MX_TIM12_Init+0xc0>)
 8003656:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 8003658:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <MX_TIM12_Init+0xbc>)
 800365a:	223f      	movs	r2, #63	; 0x3f
 800365c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365e:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <MX_TIM12_Init+0xbc>)
 8003660:	2200      	movs	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8003664:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <MX_TIM12_Init+0xbc>)
 8003666:	2200      	movs	r2, #0
 8003668:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800366a:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <MX_TIM12_Init+0xbc>)
 800366c:	2200      	movs	r2, #0
 800366e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <MX_TIM12_Init+0xbc>)
 8003672:	2200      	movs	r2, #0
 8003674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003676:	481c      	ldr	r0, [pc, #112]	; (80036e8 <MX_TIM12_Init+0xbc>)
 8003678:	f005 fef2 	bl	8009460 <HAL_TIM_Base_Init>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8003682:	f7ff fb6d 	bl	8002d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800368a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800368c:	f107 0320 	add.w	r3, r7, #32
 8003690:	4619      	mov	r1, r3
 8003692:	4815      	ldr	r0, [pc, #84]	; (80036e8 <MX_TIM12_Init+0xbc>)
 8003694:	f006 ff72 	bl	800a57c <HAL_TIM_ConfigClockSource>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 800369e:	f7ff fb5f 	bl	8002d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80036a2:	4811      	ldr	r0, [pc, #68]	; (80036e8 <MX_TIM12_Init+0xbc>)
 80036a4:	f006 f873 	bl	800978e <HAL_TIM_PWM_Init>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 80036ae:	f7ff fb57 	bl	8002d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036b2:	2360      	movs	r3, #96	; 0x60
 80036b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036c2:	1d3b      	adds	r3, r7, #4
 80036c4:	2200      	movs	r2, #0
 80036c6:	4619      	mov	r1, r3
 80036c8:	4807      	ldr	r0, [pc, #28]	; (80036e8 <MX_TIM12_Init+0xbc>)
 80036ca:	f006 fe43 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 80036d4:	f7ff fb44 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80036d8:	4803      	ldr	r0, [pc, #12]	; (80036e8 <MX_TIM12_Init+0xbc>)
 80036da:	f000 fa3d 	bl	8003b58 <HAL_TIM_MspPostInit>

}
 80036de:	bf00      	nop
 80036e0:	3730      	adds	r7, #48	; 0x30
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	240006a8 	.word	0x240006a8
 80036ec:	40001800 	.word	0x40001800

080036f0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
 8003704:	615a      	str	r2, [r3, #20]
 8003706:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <MX_TIM13_Init+0x90>)
 800370a:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <MX_TIM13_Init+0x94>)
 800370c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64-1;
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <MX_TIM13_Init+0x90>)
 8003710:	223f      	movs	r2, #63	; 0x3f
 8003712:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <MX_TIM13_Init+0x90>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 800371a:	4b19      	ldr	r3, [pc, #100]	; (8003780 <MX_TIM13_Init+0x90>)
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003720:	4b17      	ldr	r3, [pc, #92]	; (8003780 <MX_TIM13_Init+0x90>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <MX_TIM13_Init+0x90>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800372c:	4814      	ldr	r0, [pc, #80]	; (8003780 <MX_TIM13_Init+0x90>)
 800372e:	f005 fe97 	bl	8009460 <HAL_TIM_Base_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8003738:	f7ff fb12 	bl	8002d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800373c:	4810      	ldr	r0, [pc, #64]	; (8003780 <MX_TIM13_Init+0x90>)
 800373e:	f006 f826 	bl	800978e <HAL_TIM_PWM_Init>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8003748:	f7ff fb0a 	bl	8002d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800374c:	2360      	movs	r3, #96	; 0x60
 800374e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800375c:	1d3b      	adds	r3, r7, #4
 800375e:	2200      	movs	r2, #0
 8003760:	4619      	mov	r1, r3
 8003762:	4807      	ldr	r0, [pc, #28]	; (8003780 <MX_TIM13_Init+0x90>)
 8003764:	f006 fdf6 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 800376e:	f7ff faf7 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003772:	4803      	ldr	r0, [pc, #12]	; (8003780 <MX_TIM13_Init+0x90>)
 8003774:	f000 f9f0 	bl	8003b58 <HAL_TIM_MspPostInit>

}
 8003778:	bf00      	nop
 800377a:	3720      	adds	r7, #32
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	240006f4 	.word	0x240006f4
 8003784:	40001c00 	.word	0x40001c00

08003788 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
 800379c:	615a      	str	r2, [r3, #20]
 800379e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <MX_TIM14_Init+0x90>)
 80037a2:	4a1e      	ldr	r2, [pc, #120]	; (800381c <MX_TIM14_Init+0x94>)
 80037a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 80037a6:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <MX_TIM14_Init+0x90>)
 80037a8:	223f      	movs	r2, #63	; 0x3f
 80037aa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ac:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <MX_TIM14_Init+0x90>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <MX_TIM14_Init+0x90>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b8:	4b17      	ldr	r3, [pc, #92]	; (8003818 <MX_TIM14_Init+0x90>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <MX_TIM14_Init+0x90>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80037c4:	4814      	ldr	r0, [pc, #80]	; (8003818 <MX_TIM14_Init+0x90>)
 80037c6:	f005 fe4b 	bl	8009460 <HAL_TIM_Base_Init>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 80037d0:	f7ff fac6 	bl	8002d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80037d4:	4810      	ldr	r0, [pc, #64]	; (8003818 <MX_TIM14_Init+0x90>)
 80037d6:	f005 ffda 	bl	800978e <HAL_TIM_PWM_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 80037e0:	f7ff fabe 	bl	8002d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037e4:	2360      	movs	r3, #96	; 0x60
 80037e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037f4:	1d3b      	adds	r3, r7, #4
 80037f6:	2200      	movs	r2, #0
 80037f8:	4619      	mov	r1, r3
 80037fa:	4807      	ldr	r0, [pc, #28]	; (8003818 <MX_TIM14_Init+0x90>)
 80037fc:	f006 fdaa 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8003806:	f7ff faab 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800380a:	4803      	ldr	r0, [pc, #12]	; (8003818 <MX_TIM14_Init+0x90>)
 800380c:	f000 f9a4 	bl	8003b58 <HAL_TIM_MspPostInit>

}
 8003810:	bf00      	nop
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	24000740 	.word	0x24000740
 800381c:	40002000 	.word	0x40002000

08003820 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003826:	f107 0310 	add.w	r3, r7, #16
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800383e:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <MX_TIM15_Init+0x9c>)
 8003840:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <MX_TIM15_Init+0xa0>)
 8003842:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003844:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <MX_TIM15_Init+0x9c>)
 8003846:	2200      	movs	r2, #0
 8003848:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384a:	4b1c      	ldr	r3, [pc, #112]	; (80038bc <MX_TIM15_Init+0x9c>)
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8003850:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <MX_TIM15_Init+0x9c>)
 8003852:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003856:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003858:	4b18      	ldr	r3, [pc, #96]	; (80038bc <MX_TIM15_Init+0x9c>)
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800385e:	4b17      	ldr	r3, [pc, #92]	; (80038bc <MX_TIM15_Init+0x9c>)
 8003860:	2200      	movs	r2, #0
 8003862:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003864:	4b15      	ldr	r3, [pc, #84]	; (80038bc <MX_TIM15_Init+0x9c>)
 8003866:	2200      	movs	r2, #0
 8003868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800386a:	4814      	ldr	r0, [pc, #80]	; (80038bc <MX_TIM15_Init+0x9c>)
 800386c:	f005 fdf8 	bl	8009460 <HAL_TIM_Base_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003876:	f7ff fa73 	bl	8002d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800387a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800387e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003880:	f107 0310 	add.w	r3, r7, #16
 8003884:	4619      	mov	r1, r3
 8003886:	480d      	ldr	r0, [pc, #52]	; (80038bc <MX_TIM15_Init+0x9c>)
 8003888:	f006 fe78 	bl	800a57c <HAL_TIM_ConfigClockSource>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8003892:	f7ff fa65 	bl	8002d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4806      	ldr	r0, [pc, #24]	; (80038bc <MX_TIM15_Init+0x9c>)
 80038a4:	f007 fcde 	bl	800b264 <HAL_TIMEx_MasterConfigSynchronization>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80038ae:	f7ff fa57 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80038b2:	bf00      	nop
 80038b4:	3720      	adds	r7, #32
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	2400078c 	.word	0x2400078c
 80038c0:	40014000 	.word	0x40014000

080038c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b092      	sub	sp, #72	; 0x48
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d136      	bne.n	8003954 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038e6:	4b92      	ldr	r3, [pc, #584]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 80038e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ec:	4a90      	ldr	r2, [pc, #576]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038f6:	4b8e      	ldr	r3, [pc, #568]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 80038f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003904:	4b8a      	ldr	r3, [pc, #552]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800390a:	4a89      	ldr	r2, [pc, #548]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003914:	4b86      	ldr	r3, [pc, #536]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = stepFeedback1_Pin;
 8003922:	2301      	movs	r3, #1
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003926:	2302      	movs	r3, #2
 8003928:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392e:	2300      	movs	r3, #0
 8003930:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003932:	2301      	movs	r3, #1
 8003934:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback1_GPIO_Port, &GPIO_InitStruct);
 8003936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800393a:	4619      	mov	r1, r3
 800393c:	487d      	ldr	r0, [pc, #500]	; (8003b34 <HAL_TIM_Base_MspInit+0x270>)
 800393e:	f003 f837 	bl	80069b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003942:	2200      	movs	r2, #0
 8003944:	2101      	movs	r1, #1
 8003946:	201c      	movs	r0, #28
 8003948:	f002 fa8b 	bl	8005e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800394c:	201c      	movs	r0, #28
 800394e:	f002 faa2 	bl	8005e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003952:	e0e8      	b.n	8003b26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a77      	ldr	r2, [pc, #476]	; (8003b38 <HAL_TIM_Base_MspInit+0x274>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d136      	bne.n	80039cc <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800395e:	4b74      	ldr	r3, [pc, #464]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003964:	4a72      	ldr	r2, [pc, #456]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003966:	f043 0302 	orr.w	r3, r3, #2
 800396a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800396e:	4b70      	ldr	r3, [pc, #448]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397c:	4b6c      	ldr	r3, [pc, #432]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 800397e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003982:	4a6b      	ldr	r2, [pc, #428]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800398c:	4b68      	ldr	r3, [pc, #416]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 800398e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = stepFeedback2_Pin;
 800399a:	2340      	movs	r3, #64	; 0x40
 800399c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	2302      	movs	r3, #2
 80039a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a6:	2300      	movs	r3, #0
 80039a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039aa:	2302      	movs	r3, #2
 80039ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback2_GPIO_Port, &GPIO_InitStruct);
 80039ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039b2:	4619      	mov	r1, r3
 80039b4:	485f      	ldr	r0, [pc, #380]	; (8003b34 <HAL_TIM_Base_MspInit+0x270>)
 80039b6:	f002 fffb 	bl	80069b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2101      	movs	r1, #1
 80039be:	201d      	movs	r0, #29
 80039c0:	f002 fa4f 	bl	8005e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039c4:	201d      	movs	r0, #29
 80039c6:	f002 fa66 	bl	8005e96 <HAL_NVIC_EnableIRQ>
}
 80039ca:	e0ac      	b.n	8003b26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a5a      	ldr	r2, [pc, #360]	; (8003b3c <HAL_TIM_Base_MspInit+0x278>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d137      	bne.n	8003a46 <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039d6:	4b56      	ldr	r3, [pc, #344]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 80039d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039dc:	4a54      	ldr	r2, [pc, #336]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 80039de:	f043 0304 	orr.w	r3, r3, #4
 80039e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039e6:	4b52      	ldr	r3, [pc, #328]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 80039e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039f4:	4b4e      	ldr	r3, [pc, #312]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 80039f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039fa:	4a4d      	ldr	r2, [pc, #308]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 80039fc:	f043 0308 	orr.w	r3, r3, #8
 8003a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a04:	4b4a      	ldr	r3, [pc, #296]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = stepFeedback3_Pin;
 8003a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a20:	2300      	movs	r3, #0
 8003a22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a24:	2302      	movs	r3, #2
 8003a26:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback3_GPIO_Port, &GPIO_InitStruct);
 8003a28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4844      	ldr	r0, [pc, #272]	; (8003b40 <HAL_TIM_Base_MspInit+0x27c>)
 8003a30:	f002 ffbe 	bl	80069b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2101      	movs	r1, #1
 8003a38:	201e      	movs	r0, #30
 8003a3a:	f002 fa12 	bl	8005e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a3e:	201e      	movs	r0, #30
 8003a40:	f002 fa29 	bl	8005e96 <HAL_NVIC_EnableIRQ>
}
 8003a44:	e06f      	b.n	8003b26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a3e      	ldr	r2, [pc, #248]	; (8003b44 <HAL_TIM_Base_MspInit+0x280>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d10f      	bne.n	8003a70 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a50:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a56:	4a36      	ldr	r2, [pc, #216]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003a58:	f043 0308 	orr.w	r3, r3, #8
 8003a5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a60:	4b33      	ldr	r3, [pc, #204]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003a62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
}
 8003a6e:	e05a      	b.n	8003b26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a34      	ldr	r2, [pc, #208]	; (8003b48 <HAL_TIM_Base_MspInit+0x284>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10f      	bne.n	8003a9a <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003a7a:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a80:	4a2b      	ldr	r2, [pc, #172]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a8a:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	697b      	ldr	r3, [r7, #20]
}
 8003a98:	e045      	b.n	8003b26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2b      	ldr	r2, [pc, #172]	; (8003b4c <HAL_TIM_Base_MspInit+0x288>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10f      	bne.n	8003ac4 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003aa4:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003aa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aaa:	4a21      	ldr	r2, [pc, #132]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ab4:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	693b      	ldr	r3, [r7, #16]
}
 8003ac2:	e030      	b.n	8003b26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <HAL_TIM_Base_MspInit+0x28c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10f      	bne.n	8003aee <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003ace:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ad4:	4a16      	ldr	r2, [pc, #88]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
}
 8003aec:	e01b      	b.n	8003b26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_TIM_Base_MspInit+0x290>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d116      	bne.n	8003b26 <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003af8:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003afe:	4a0c      	ldr	r2, [pc, #48]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_TIM_Base_MspInit+0x26c>)
 8003b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2101      	movs	r1, #1
 8003b1a:	2074      	movs	r0, #116	; 0x74
 8003b1c:	f002 f9a1 	bl	8005e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003b20:	2074      	movs	r0, #116	; 0x74
 8003b22:	f002 f9b8 	bl	8005e96 <HAL_NVIC_EnableIRQ>
}
 8003b26:	bf00      	nop
 8003b28:	3748      	adds	r7, #72	; 0x48
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	58024400 	.word	0x58024400
 8003b34:	58020000 	.word	0x58020000
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800
 8003b40:	58020c00 	.word	0x58020c00
 8003b44:	40000c00 	.word	0x40000c00
 8003b48:	40001800 	.word	0x40001800
 8003b4c:	40001c00 	.word	0x40001c00
 8003b50:	40002000 	.word	0x40002000
 8003b54:	40014000 	.word	0x40014000

08003b58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	; 0x28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	60da      	str	r2, [r3, #12]
 8003b6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a39      	ldr	r2, [pc, #228]	; (8003c5c <HAL_TIM_MspPostInit+0x104>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d120      	bne.n	8003bbc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b7a:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <HAL_TIM_MspPostInit+0x108>)
 8003b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b80:	4a37      	ldr	r2, [pc, #220]	; (8003c60 <HAL_TIM_MspPostInit+0x108>)
 8003b82:	f043 0302 	orr.w	r3, r3, #2
 8003b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b8a:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <HAL_TIM_MspPostInit+0x108>)
 8003b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8003b98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003baa:	2302      	movs	r3, #2
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8003bae:	f107 0314 	add.w	r3, r7, #20
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	482b      	ldr	r0, [pc, #172]	; (8003c64 <HAL_TIM_MspPostInit+0x10c>)
 8003bb6:	f002 fefb 	bl	80069b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003bba:	e04a      	b.n	8003c52 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <HAL_TIM_MspPostInit+0x110>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d120      	bne.n	8003c08 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bc6:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <HAL_TIM_MspPostInit+0x108>)
 8003bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bcc:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <HAL_TIM_MspPostInit+0x108>)
 8003bce:	f043 0320 	orr.w	r3, r3, #32
 8003bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bd6:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <HAL_TIM_MspPostInit+0x108>)
 8003bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8003be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bea:	2302      	movs	r3, #2
 8003bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003bf6:	2309      	movs	r3, #9
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8003bfa:	f107 0314 	add.w	r3, r7, #20
 8003bfe:	4619      	mov	r1, r3
 8003c00:	481a      	ldr	r0, [pc, #104]	; (8003c6c <HAL_TIM_MspPostInit+0x114>)
 8003c02:	f002 fed5 	bl	80069b0 <HAL_GPIO_Init>
}
 8003c06:	e024      	b.n	8003c52 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_TIM_MspPostInit+0x118>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d11f      	bne.n	8003c52 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c12:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_TIM_MspPostInit+0x108>)
 8003c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c18:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <HAL_TIM_MspPostInit+0x108>)
 8003c1a:	f043 0320 	orr.w	r3, r3, #32
 8003c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c22:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <HAL_TIM_MspPostInit+0x108>)
 8003c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8003c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c36:	2302      	movs	r3, #2
 8003c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003c42:	2309      	movs	r3, #9
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4807      	ldr	r0, [pc, #28]	; (8003c6c <HAL_TIM_MspPostInit+0x114>)
 8003c4e:	f002 feaf 	bl	80069b0 <HAL_GPIO_Init>
}
 8003c52:	bf00      	nop
 8003c54:	3728      	adds	r7, #40	; 0x28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40001800 	.word	0x40001800
 8003c60:	58024400 	.word	0x58024400
 8003c64:	58020400 	.word	0x58020400
 8003c68:	40001c00 	.word	0x40001c00
 8003c6c:	58021400 	.word	0x58021400
 8003c70:	40002000 	.word	0x40002000

08003c74 <get_Straj>:
double T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
double qi,qf;

double _rpm1,_rpm2,_rpm3;

double get_Straj(double t,double _qi, double _qf ,double *params){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	ed2d 8b06 	vpush	{d8-d10}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	ed87 0b06 	vstr	d0, [r7, #24]
 8003c82:	ed87 1b04 	vstr	d1, [r7, #16]
 8003c86:	ed87 2b02 	vstr	d2, [r7, #8]
 8003c8a:	6078      	str	r0, [r7, #4]

	Tj1 = params[0];
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	495f      	ldr	r1, [pc, #380]	; (8003e10 <get_Straj+0x19c>)
 8003c94:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c9e:	495d      	ldr	r1, [pc, #372]	; (8003e14 <get_Straj+0x1a0>)
 8003ca0:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003caa:	495b      	ldr	r1, [pc, #364]	; (8003e18 <get_Straj+0x1a4>)
 8003cac:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cb6:	4959      	ldr	r1, [pc, #356]	; (8003e1c <get_Straj+0x1a8>)
 8003cb8:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003cc2:	4957      	ldr	r1, [pc, #348]	; (8003e20 <get_Straj+0x1ac>)
 8003cc4:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003cce:	4955      	ldr	r1, [pc, #340]	; (8003e24 <get_Straj+0x1b0>)
 8003cd0:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003cda:	4953      	ldr	r1, [pc, #332]	; (8003e28 <get_Straj+0x1b4>)
 8003cdc:	e9c1 2300 	strd	r2, r3, [r1]

	qi=_qi;
 8003ce0:	4952      	ldr	r1, [pc, #328]	; (8003e2c <get_Straj+0x1b8>)
 8003ce2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ce6:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8003cea:	4951      	ldr	r1, [pc, #324]	; (8003e30 <get_Straj+0x1bc>)
 8003cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf0:	e9c1 2300 	strd	r2, r3, [r1]

    if (qf < qi){
 8003cf4:	4b4e      	ldr	r3, [pc, #312]	; (8003e30 <get_Straj+0x1bc>)
 8003cf6:	ed93 6b00 	vldr	d6, [r3]
 8003cfa:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <get_Straj+0x1b8>)
 8003cfc:	ed93 7b00 	vldr	d7, [r3]
 8003d00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d08:	f140 80ac 	bpl.w	8003e64 <get_Straj+0x1f0>

    flagInv = true;
 8003d0c:	4b49      	ldr	r3, [pc, #292]	; (8003e34 <get_Straj+0x1c0>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 8003d12:	4b46      	ldr	r3, [pc, #280]	; (8003e2c <get_Straj+0x1b8>)
 8003d14:	ed93 7b00 	vldr	d7, [r3]
 8003d18:	eeb1 7b47 	vneg.f64	d7, d7
 8003d1c:	4b43      	ldr	r3, [pc, #268]	; (8003e2c <get_Straj+0x1b8>)
 8003d1e:	ed83 7b00 	vstr	d7, [r3]
    qf = -qf;
 8003d22:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <get_Straj+0x1bc>)
 8003d24:	ed93 7b00 	vldr	d7, [r3]
 8003d28:	eeb1 7b47 	vneg.f64	d7, d7
 8003d2c:	4b40      	ldr	r3, [pc, #256]	; (8003e30 <get_Straj+0x1bc>)
 8003d2e:	ed83 7b00 	vstr	d7, [r3]
    vi = -vi;
 8003d32:	4b41      	ldr	r3, [pc, #260]	; (8003e38 <get_Straj+0x1c4>)
 8003d34:	ed93 7b00 	vldr	d7, [r3]
 8003d38:	eeb1 7b47 	vneg.f64	d7, d7
 8003d3c:	4b3e      	ldr	r3, [pc, #248]	; (8003e38 <get_Straj+0x1c4>)
 8003d3e:	ed83 7b00 	vstr	d7, [r3]
    vf = -vf;
 8003d42:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <get_Straj+0x1c8>)
 8003d44:	ed93 7b00 	vldr	d7, [r3]
 8003d48:	eeb1 7b47 	vneg.f64	d7, d7
 8003d4c:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <get_Straj+0x1c8>)
 8003d4e:	ed83 7b00 	vstr	d7, [r3]

    vmax = -vmin;
 8003d52:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <get_Straj+0x1cc>)
 8003d54:	ed93 7b00 	vldr	d7, [r3]
 8003d58:	eeb1 7b47 	vneg.f64	d7, d7
 8003d5c:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <get_Straj+0x1d0>)
 8003d5e:	ed83 7b00 	vstr	d7, [r3]
    vmin = -vmax;
 8003d62:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <get_Straj+0x1d0>)
 8003d64:	ed93 7b00 	vldr	d7, [r3]
 8003d68:	eeb1 7b47 	vneg.f64	d7, d7
 8003d6c:	4b34      	ldr	r3, [pc, #208]	; (8003e40 <get_Straj+0x1cc>)
 8003d6e:	ed83 7b00 	vstr	d7, [r3]
    amax = -amin;
 8003d72:	4b35      	ldr	r3, [pc, #212]	; (8003e48 <get_Straj+0x1d4>)
 8003d74:	ed93 7b00 	vldr	d7, [r3]
 8003d78:	eeb1 7b47 	vneg.f64	d7, d7
 8003d7c:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <get_Straj+0x1d8>)
 8003d7e:	ed83 7b00 	vstr	d7, [r3]
    amin = -amax;
 8003d82:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <get_Straj+0x1d8>)
 8003d84:	ed93 7b00 	vldr	d7, [r3]
 8003d88:	eeb1 7b47 	vneg.f64	d7, d7
 8003d8c:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <get_Straj+0x1d4>)
 8003d8e:	ed83 7b00 	vstr	d7, [r3]
    jmax = -jmin;
 8003d92:	4b2f      	ldr	r3, [pc, #188]	; (8003e50 <get_Straj+0x1dc>)
 8003d94:	ed93 7b00 	vldr	d7, [r3]
 8003d98:	eeb1 7b47 	vneg.f64	d7, d7
 8003d9c:	4b2d      	ldr	r3, [pc, #180]	; (8003e54 <get_Straj+0x1e0>)
 8003d9e:	ed83 7b00 	vstr	d7, [r3]
    jmin = -jmax;
 8003da2:	4b2c      	ldr	r3, [pc, #176]	; (8003e54 <get_Straj+0x1e0>)
 8003da4:	ed93 7b00 	vldr	d7, [r3]
 8003da8:	eeb1 7b47 	vneg.f64	d7, d7
 8003dac:	4b28      	ldr	r3, [pc, #160]	; (8003e50 <get_Straj+0x1dc>)
 8003dae:	ed83 7b00 	vstr	d7, [r3]

    alima = jmax*Tj1;
 8003db2:	4b28      	ldr	r3, [pc, #160]	; (8003e54 <get_Straj+0x1e0>)
 8003db4:	ed93 6b00 	vldr	d6, [r3]
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <get_Straj+0x19c>)
 8003dba:	ed93 7b00 	vldr	d7, [r3]
 8003dbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003dc2:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <get_Straj+0x1e4>)
 8003dc4:	ed83 7b00 	vstr	d7, [r3]
    alimd = -jmax*Tj2;
 8003dc8:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <get_Straj+0x1e0>)
 8003dca:	ed93 7b00 	vldr	d7, [r3]
 8003dce:	eeb1 6b47 	vneg.f64	d6, d7
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <get_Straj+0x1a0>)
 8003dd4:	ed93 7b00 	vldr	d7, [r3]
 8003dd8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003ddc:	4b1f      	ldr	r3, [pc, #124]	; (8003e5c <get_Straj+0x1e8>)
 8003dde:	ed83 7b00 	vstr	d7, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 8003de2:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <get_Straj+0x1a8>)
 8003de4:	ed93 6b00 	vldr	d6, [r3]
 8003de8:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <get_Straj+0x19c>)
 8003dea:	ed93 7b00 	vldr	d7, [r3]
 8003dee:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003df2:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <get_Straj+0x1e4>)
 8003df4:	ed93 7b00 	vldr	d7, [r3]
 8003df8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <get_Straj+0x1c4>)
 8003dfe:	ed93 7b00 	vldr	d7, [r3]
 8003e02:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e06:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <get_Straj+0x1ec>)
 8003e08:	ed83 7b00 	vstr	d7, [r3]
 8003e0c:	e06f      	b.n	8003eee <get_Straj+0x27a>
 8003e0e:	bf00      	nop
 8003e10:	24000818 	.word	0x24000818
 8003e14:	24000820 	.word	0x24000820
 8003e18:	24000828 	.word	0x24000828
 8003e1c:	24000800 	.word	0x24000800
 8003e20:	24000808 	.word	0x24000808
 8003e24:	24000810 	.word	0x24000810
 8003e28:	240007f8 	.word	0x240007f8
 8003e2c:	24000838 	.word	0x24000838
 8003e30:	24000840 	.word	0x24000840
 8003e34:	240007d8 	.word	0x240007d8
 8003e38:	24000018 	.word	0x24000018
 8003e3c:	24000450 	.word	0x24000450
 8003e40:	24000448 	.word	0x24000448
 8003e44:	24000010 	.word	0x24000010
 8003e48:	24000458 	.word	0x24000458
 8003e4c:	24000020 	.word	0x24000020
 8003e50:	24000440 	.word	0x24000440
 8003e54:	24000008 	.word	0x24000008
 8003e58:	240007e0 	.word	0x240007e0
 8003e5c:	240007e8 	.word	0x240007e8
 8003e60:	240007f0 	.word	0x240007f0

    }else{
        jmin = -jmax;
 8003e64:	4bbc      	ldr	r3, [pc, #752]	; (8004158 <get_Straj+0x4e4>)
 8003e66:	ed93 7b00 	vldr	d7, [r3]
 8003e6a:	eeb1 7b47 	vneg.f64	d7, d7
 8003e6e:	4bbb      	ldr	r3, [pc, #748]	; (800415c <get_Straj+0x4e8>)
 8003e70:	ed83 7b00 	vstr	d7, [r3]
        amin = -amax;
 8003e74:	4bba      	ldr	r3, [pc, #744]	; (8004160 <get_Straj+0x4ec>)
 8003e76:	ed93 7b00 	vldr	d7, [r3]
 8003e7a:	eeb1 7b47 	vneg.f64	d7, d7
 8003e7e:	4bb9      	ldr	r3, [pc, #740]	; (8004164 <get_Straj+0x4f0>)
 8003e80:	ed83 7b00 	vstr	d7, [r3]
        vmin = -vmax;
 8003e84:	4bb8      	ldr	r3, [pc, #736]	; (8004168 <get_Straj+0x4f4>)
 8003e86:	ed93 7b00 	vldr	d7, [r3]
 8003e8a:	eeb1 7b47 	vneg.f64	d7, d7
 8003e8e:	4bb7      	ldr	r3, [pc, #732]	; (800416c <get_Straj+0x4f8>)
 8003e90:	ed83 7b00 	vstr	d7, [r3]

        alima = jmax*Tj1;
 8003e94:	4bb0      	ldr	r3, [pc, #704]	; (8004158 <get_Straj+0x4e4>)
 8003e96:	ed93 6b00 	vldr	d6, [r3]
 8003e9a:	4bb5      	ldr	r3, [pc, #724]	; (8004170 <get_Straj+0x4fc>)
 8003e9c:	ed93 7b00 	vldr	d7, [r3]
 8003ea0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003ea4:	4bb3      	ldr	r3, [pc, #716]	; (8004174 <get_Straj+0x500>)
 8003ea6:	ed83 7b00 	vstr	d7, [r3]
        alimd = -jmax*Tj2;
 8003eaa:	4bab      	ldr	r3, [pc, #684]	; (8004158 <get_Straj+0x4e4>)
 8003eac:	ed93 7b00 	vldr	d7, [r3]
 8003eb0:	eeb1 6b47 	vneg.f64	d6, d7
 8003eb4:	4bb0      	ldr	r3, [pc, #704]	; (8004178 <get_Straj+0x504>)
 8003eb6:	ed93 7b00 	vldr	d7, [r3]
 8003eba:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003ebe:	4baf      	ldr	r3, [pc, #700]	; (800417c <get_Straj+0x508>)
 8003ec0:	ed83 7b00 	vstr	d7, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 8003ec4:	4bae      	ldr	r3, [pc, #696]	; (8004180 <get_Straj+0x50c>)
 8003ec6:	ed93 6b00 	vldr	d6, [r3]
 8003eca:	4ba9      	ldr	r3, [pc, #676]	; (8004170 <get_Straj+0x4fc>)
 8003ecc:	ed93 7b00 	vldr	d7, [r3]
 8003ed0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003ed4:	4ba7      	ldr	r3, [pc, #668]	; (8004174 <get_Straj+0x500>)
 8003ed6:	ed93 7b00 	vldr	d7, [r3]
 8003eda:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003ede:	4ba9      	ldr	r3, [pc, #676]	; (8004184 <get_Straj+0x510>)
 8003ee0:	ed93 7b00 	vldr	d7, [r3]
 8003ee4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ee8:	4ba7      	ldr	r3, [pc, #668]	; (8004188 <get_Straj+0x514>)
 8003eea:	ed83 7b00 	vstr	d7, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 8003eee:	ed97 7b06 	vldr	d7, [r7, #24]
 8003ef2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efa:	db7e      	blt.n	8003ffa <get_Straj+0x386>
 8003efc:	4b9c      	ldr	r3, [pc, #624]	; (8004170 <get_Straj+0x4fc>)
 8003efe:	ed93 7b00 	vldr	d7, [r3]
 8003f02:	ed97 6b06 	vldr	d6, [r7, #24]
 8003f06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0e:	d874      	bhi.n	8003ffa <get_Straj+0x386>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 8003f10:	4b9c      	ldr	r3, [pc, #624]	; (8004184 <get_Straj+0x510>)
 8003f12:	ed93 6b00 	vldr	d6, [r3]
 8003f16:	ed97 7b06 	vldr	d7, [r7, #24]
 8003f1a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003f1e:	4b9b      	ldr	r3, [pc, #620]	; (800418c <get_Straj+0x518>)
 8003f20:	ed93 7b00 	vldr	d7, [r3]
 8003f24:	ee36 8b07 	vadd.f64	d8, d6, d7
 8003f28:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8003f2c:	ed97 0b06 	vldr	d0, [r7, #24]
 8003f30:	f00c fc6e 	bl	8010810 <pow>
 8003f34:	eeb0 6b40 	vmov.f64	d6, d0
 8003f38:	4b87      	ldr	r3, [pc, #540]	; (8004158 <get_Straj+0x4e4>)
 8003f3a:	ed93 7b00 	vldr	d7, [r3]
 8003f3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003f42:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8003f46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f4a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003f4e:	4b90      	ldr	r3, [pc, #576]	; (8004190 <get_Straj+0x51c>)
 8003f50:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+jmax*pow(t,2)/2;
 8003f54:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003f58:	ed97 0b06 	vldr	d0, [r7, #24]
 8003f5c:	f00c fc58 	bl	8010810 <pow>
 8003f60:	eeb0 6b40 	vmov.f64	d6, d0
 8003f64:	4b7c      	ldr	r3, [pc, #496]	; (8004158 <get_Straj+0x4e4>)
 8003f66:	ed93 7b00 	vldr	d7, [r3]
 8003f6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003f6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003f72:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003f76:	4b83      	ldr	r3, [pc, #524]	; (8004184 <get_Straj+0x510>)
 8003f78:	ed93 7b00 	vldr	d7, [r3]
 8003f7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f80:	4b84      	ldr	r3, [pc, #528]	; (8004194 <get_Straj+0x520>)
 8003f82:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*t;
 8003f86:	4b74      	ldr	r3, [pc, #464]	; (8004158 <get_Straj+0x4e4>)
 8003f88:	ed93 6b00 	vldr	d6, [r3]
 8003f8c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003f90:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003f94:	4b80      	ldr	r3, [pc, #512]	; (8004198 <get_Straj+0x524>)
 8003f96:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 8003f9a:	4b6f      	ldr	r3, [pc, #444]	; (8004158 <get_Straj+0x4e4>)
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	497e      	ldr	r1, [pc, #504]	; (800419c <get_Straj+0x528>)
 8003fa2:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8003fa6:	4b7e      	ldr	r3, [pc, #504]	; (80041a0 <get_Straj+0x52c>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 84fb 	beq.w	80049a6 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8003fb0:	4b77      	ldr	r3, [pc, #476]	; (8004190 <get_Straj+0x51c>)
 8003fb2:	ed93 7b00 	vldr	d7, [r3]
 8003fb6:	eeb1 7b47 	vneg.f64	d7, d7
 8003fba:	4b75      	ldr	r3, [pc, #468]	; (8004190 <get_Straj+0x51c>)
 8003fbc:	ed83 7b00 	vstr	d7, [r3]
 8003fc0:	4b74      	ldr	r3, [pc, #464]	; (8004194 <get_Straj+0x520>)
 8003fc2:	ed93 7b00 	vldr	d7, [r3]
 8003fc6:	eeb1 7b47 	vneg.f64	d7, d7
 8003fca:	4b72      	ldr	r3, [pc, #456]	; (8004194 <get_Straj+0x520>)
 8003fcc:	ed83 7b00 	vstr	d7, [r3]
 8003fd0:	4b71      	ldr	r3, [pc, #452]	; (8004198 <get_Straj+0x524>)
 8003fd2:	ed93 7b00 	vldr	d7, [r3]
 8003fd6:	eeb1 7b47 	vneg.f64	d7, d7
 8003fda:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <get_Straj+0x524>)
 8003fdc:	ed83 7b00 	vstr	d7, [r3]
 8003fe0:	4b6e      	ldr	r3, [pc, #440]	; (800419c <get_Straj+0x528>)
 8003fe2:	ed93 7b00 	vldr	d7, [r3]
 8003fe6:	eeb1 7b47 	vneg.f64	d7, d7
 8003fea:	4b6c      	ldr	r3, [pc, #432]	; (800419c <get_Straj+0x528>)
 8003fec:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8003ff0:	4b6b      	ldr	r3, [pc, #428]	; (80041a0 <get_Straj+0x52c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8003ff6:	f000 bcd6 	b.w	80049a6 <get_Straj+0xd32>
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8003ffa:	4b5d      	ldr	r3, [pc, #372]	; (8004170 <get_Straj+0x4fc>)
 8003ffc:	ed93 7b00 	vldr	d7, [r3]
 8004000:	ed97 6b06 	vldr	d6, [r7, #24]
 8004004:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400c:	f340 80ca 	ble.w	80041a4 <get_Straj+0x530>
 8004010:	4b5b      	ldr	r3, [pc, #364]	; (8004180 <get_Straj+0x50c>)
 8004012:	ed93 6b00 	vldr	d6, [r3]
 8004016:	4b56      	ldr	r3, [pc, #344]	; (8004170 <get_Straj+0x4fc>)
 8004018:	ed93 7b00 	vldr	d7, [r3]
 800401c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004020:	ed97 6b06 	vldr	d6, [r7, #24]
 8004024:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	f200 80ba 	bhi.w	80041a4 <get_Straj+0x530>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8004030:	4b54      	ldr	r3, [pc, #336]	; (8004184 <get_Straj+0x510>)
 8004032:	ed93 6b00 	vldr	d6, [r3]
 8004036:	ed97 7b06 	vldr	d7, [r7, #24]
 800403a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800403e:	4b53      	ldr	r3, [pc, #332]	; (800418c <get_Straj+0x518>)
 8004040:	ed93 7b00 	vldr	d7, [r3]
 8004044:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004048:	4b4a      	ldr	r3, [pc, #296]	; (8004174 <get_Straj+0x500>)
 800404a:	ed93 7b00 	vldr	d7, [r3]
 800404e:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004052:	ee87 9b06 	vdiv.f64	d9, d7, d6
 8004056:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800405a:	ed97 0b06 	vldr	d0, [r7, #24]
 800405e:	f00c fbd7 	bl	8010810 <pow>
 8004062:	eeb0 7b40 	vmov.f64	d7, d0
 8004066:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800406a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800406e:	4b40      	ldr	r3, [pc, #256]	; (8004170 <get_Straj+0x4fc>)
 8004070:	ed93 7b00 	vldr	d7, [r3]
 8004074:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8004078:	ee27 5b05 	vmul.f64	d5, d7, d5
 800407c:	ed97 7b06 	vldr	d7, [r7, #24]
 8004080:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004084:	ee36 ab47 	vsub.f64	d10, d6, d7
 8004088:	4b39      	ldr	r3, [pc, #228]	; (8004170 <get_Straj+0x4fc>)
 800408a:	ed93 7b00 	vldr	d7, [r3]
 800408e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004092:	eeb0 0b47 	vmov.f64	d0, d7
 8004096:	f00c fbbb 	bl	8010810 <pow>
 800409a:	eeb0 7b40 	vmov.f64	d7, d0
 800409e:	ee3a 7b07 	vadd.f64	d7, d10, d7
 80040a2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80040a6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80040aa:	4b39      	ldr	r3, [pc, #228]	; (8004190 <get_Straj+0x51c>)
 80040ac:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+amax*(t-Tj1/2);
 80040b0:	4b2f      	ldr	r3, [pc, #188]	; (8004170 <get_Straj+0x4fc>)
 80040b2:	ed93 6b00 	vldr	d6, [r3]
 80040b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80040ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80040be:	ed97 6b06 	vldr	d6, [r7, #24]
 80040c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <get_Straj+0x4ec>)
 80040c8:	ed93 7b00 	vldr	d7, [r3]
 80040cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80040d0:	4b2c      	ldr	r3, [pc, #176]	; (8004184 <get_Straj+0x510>)
 80040d2:	ed93 7b00 	vldr	d7, [r3]
 80040d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80040da:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <get_Straj+0x520>)
 80040dc:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*Tj1;
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <get_Straj+0x4e4>)
 80040e2:	ed93 6b00 	vldr	d6, [r3]
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <get_Straj+0x4fc>)
 80040e8:	ed93 7b00 	vldr	d7, [r3]
 80040ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80040f0:	4b29      	ldr	r3, [pc, #164]	; (8004198 <get_Straj+0x524>)
 80040f2:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 80040f6:	4929      	ldr	r1, [pc, #164]	; (800419c <get_Straj+0x528>)
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9c1 2300 	strd	r2, r3, [r1]

        if (flagInv){
 8004104:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <get_Straj+0x52c>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 844c 	beq.w	80049a6 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800410e:	4b20      	ldr	r3, [pc, #128]	; (8004190 <get_Straj+0x51c>)
 8004110:	ed93 7b00 	vldr	d7, [r3]
 8004114:	eeb1 7b47 	vneg.f64	d7, d7
 8004118:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <get_Straj+0x51c>)
 800411a:	ed83 7b00 	vstr	d7, [r3]
 800411e:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <get_Straj+0x520>)
 8004120:	ed93 7b00 	vldr	d7, [r3]
 8004124:	eeb1 7b47 	vneg.f64	d7, d7
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <get_Straj+0x520>)
 800412a:	ed83 7b00 	vstr	d7, [r3]
 800412e:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <get_Straj+0x524>)
 8004130:	ed93 7b00 	vldr	d7, [r3]
 8004134:	eeb1 7b47 	vneg.f64	d7, d7
 8004138:	4b17      	ldr	r3, [pc, #92]	; (8004198 <get_Straj+0x524>)
 800413a:	ed83 7b00 	vstr	d7, [r3]
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <get_Straj+0x528>)
 8004140:	ed93 7b00 	vldr	d7, [r3]
 8004144:	eeb1 7b47 	vneg.f64	d7, d7
 8004148:	4b14      	ldr	r3, [pc, #80]	; (800419c <get_Straj+0x528>)
 800414a:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <get_Straj+0x52c>)
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004154:	f000 bc27 	b.w	80049a6 <get_Straj+0xd32>
 8004158:	24000008 	.word	0x24000008
 800415c:	24000440 	.word	0x24000440
 8004160:	24000020 	.word	0x24000020
 8004164:	24000458 	.word	0x24000458
 8004168:	24000010 	.word	0x24000010
 800416c:	24000448 	.word	0x24000448
 8004170:	24000818 	.word	0x24000818
 8004174:	240007e0 	.word	0x240007e0
 8004178:	24000820 	.word	0x24000820
 800417c:	240007e8 	.word	0x240007e8
 8004180:	24000800 	.word	0x24000800
 8004184:	24000018 	.word	0x24000018
 8004188:	240007f0 	.word	0x240007f0
 800418c:	24000838 	.word	0x24000838
 8004190:	24000420 	.word	0x24000420
 8004194:	24000428 	.word	0x24000428
 8004198:	24000430 	.word	0x24000430
 800419c:	24000438 	.word	0x24000438
 80041a0:	240007d8 	.word	0x240007d8
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 80041a4:	4b9c      	ldr	r3, [pc, #624]	; (8004418 <get_Straj+0x7a4>)
 80041a6:	ed93 6b00 	vldr	d6, [r3]
 80041aa:	4b9c      	ldr	r3, [pc, #624]	; (800441c <get_Straj+0x7a8>)
 80041ac:	ed93 7b00 	vldr	d7, [r3]
 80041b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80041b4:	ed97 6b06 	vldr	d6, [r7, #24]
 80041b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80041bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c0:	f340 80ac 	ble.w	800431c <get_Straj+0x6a8>
 80041c4:	4b94      	ldr	r3, [pc, #592]	; (8004418 <get_Straj+0x7a4>)
 80041c6:	ed93 7b00 	vldr	d7, [r3]
 80041ca:	ed97 6b06 	vldr	d6, [r7, #24]
 80041ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80041d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d6:	f200 80a1 	bhi.w	800431c <get_Straj+0x6a8>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 80041da:	4b91      	ldr	r3, [pc, #580]	; (8004420 <get_Straj+0x7ac>)
 80041dc:	ed93 6b00 	vldr	d6, [r3]
 80041e0:	4b90      	ldr	r3, [pc, #576]	; (8004424 <get_Straj+0x7b0>)
 80041e2:	ed93 7b00 	vldr	d7, [r3]
 80041e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80041ea:	4b8b      	ldr	r3, [pc, #556]	; (8004418 <get_Straj+0x7a4>)
 80041ec:	ed93 7b00 	vldr	d7, [r3]
 80041f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80041f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80041f8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80041fc:	4b8a      	ldr	r3, [pc, #552]	; (8004428 <get_Straj+0x7b4>)
 80041fe:	ed93 7b00 	vldr	d7, [r3]
 8004202:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004206:	4b84      	ldr	r3, [pc, #528]	; (8004418 <get_Straj+0x7a4>)
 8004208:	ed93 5b00 	vldr	d5, [r3]
 800420c:	ed97 7b06 	vldr	d7, [r7, #24]
 8004210:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004214:	4b82      	ldr	r3, [pc, #520]	; (8004420 <get_Straj+0x7ac>)
 8004216:	ed93 7b00 	vldr	d7, [r3]
 800421a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800421e:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004222:	4b7d      	ldr	r3, [pc, #500]	; (8004418 <get_Straj+0x7a4>)
 8004224:	ed93 6b00 	vldr	d6, [r3]
 8004228:	ed97 7b06 	vldr	d7, [r7, #24]
 800422c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004230:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004234:	eeb0 0b47 	vmov.f64	d0, d7
 8004238:	f00c faea 	bl	8010810 <pow>
 800423c:	eeb0 6b40 	vmov.f64	d6, d0
 8004240:	4b7a      	ldr	r3, [pc, #488]	; (800442c <get_Straj+0x7b8>)
 8004242:	ed93 7b00 	vldr	d7, [r3]
 8004246:	ee26 6b07 	vmul.f64	d6, d6, d7
 800424a:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800424e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004252:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004256:	4b76      	ldr	r3, [pc, #472]	; (8004430 <get_Straj+0x7bc>)
 8004258:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax+jmin*pow(Ta-t,2)/2;
 800425c:	4b6e      	ldr	r3, [pc, #440]	; (8004418 <get_Straj+0x7a4>)
 800425e:	ed93 6b00 	vldr	d6, [r3]
 8004262:	ed97 7b06 	vldr	d7, [r7, #24]
 8004266:	ee36 7b47 	vsub.f64	d7, d6, d7
 800426a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800426e:	eeb0 0b47 	vmov.f64	d0, d7
 8004272:	f00c facd 	bl	8010810 <pow>
 8004276:	eeb0 6b40 	vmov.f64	d6, d0
 800427a:	4b6c      	ldr	r3, [pc, #432]	; (800442c <get_Straj+0x7b8>)
 800427c:	ed93 7b00 	vldr	d7, [r3]
 8004280:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004284:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004288:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800428c:	4b69      	ldr	r3, [pc, #420]	; (8004434 <get_Straj+0x7c0>)
 800428e:	ed93 7b00 	vldr	d7, [r3]
 8004292:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004296:	4b68      	ldr	r3, [pc, #416]	; (8004438 <get_Straj+0x7c4>)
 8004298:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmin*(Ta-t);
 800429c:	4b63      	ldr	r3, [pc, #396]	; (800442c <get_Straj+0x7b8>)
 800429e:	ed93 7b00 	vldr	d7, [r3]
 80042a2:	eeb1 6b47 	vneg.f64	d6, d7
 80042a6:	4b5c      	ldr	r3, [pc, #368]	; (8004418 <get_Straj+0x7a4>)
 80042a8:	ed93 5b00 	vldr	d5, [r3]
 80042ac:	ed97 7b06 	vldr	d7, [r7, #24]
 80042b0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80042b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80042b8:	4b60      	ldr	r3, [pc, #384]	; (800443c <get_Straj+0x7c8>)
 80042ba:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmin;
 80042be:	4b5b      	ldr	r3, [pc, #364]	; (800442c <get_Straj+0x7b8>)
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	495e      	ldr	r1, [pc, #376]	; (8004440 <get_Straj+0x7cc>)
 80042c6:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80042ca:	4b5e      	ldr	r3, [pc, #376]	; (8004444 <get_Straj+0x7d0>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8369 	beq.w	80049a6 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80042d4:	4b56      	ldr	r3, [pc, #344]	; (8004430 <get_Straj+0x7bc>)
 80042d6:	ed93 7b00 	vldr	d7, [r3]
 80042da:	eeb1 7b47 	vneg.f64	d7, d7
 80042de:	4b54      	ldr	r3, [pc, #336]	; (8004430 <get_Straj+0x7bc>)
 80042e0:	ed83 7b00 	vstr	d7, [r3]
 80042e4:	4b54      	ldr	r3, [pc, #336]	; (8004438 <get_Straj+0x7c4>)
 80042e6:	ed93 7b00 	vldr	d7, [r3]
 80042ea:	eeb1 7b47 	vneg.f64	d7, d7
 80042ee:	4b52      	ldr	r3, [pc, #328]	; (8004438 <get_Straj+0x7c4>)
 80042f0:	ed83 7b00 	vstr	d7, [r3]
 80042f4:	4b51      	ldr	r3, [pc, #324]	; (800443c <get_Straj+0x7c8>)
 80042f6:	ed93 7b00 	vldr	d7, [r3]
 80042fa:	eeb1 7b47 	vneg.f64	d7, d7
 80042fe:	4b4f      	ldr	r3, [pc, #316]	; (800443c <get_Straj+0x7c8>)
 8004300:	ed83 7b00 	vstr	d7, [r3]
 8004304:	4b4e      	ldr	r3, [pc, #312]	; (8004440 <get_Straj+0x7cc>)
 8004306:	ed93 7b00 	vldr	d7, [r3]
 800430a:	eeb1 7b47 	vneg.f64	d7, d7
 800430e:	4b4c      	ldr	r3, [pc, #304]	; (8004440 <get_Straj+0x7cc>)
 8004310:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004314:	4b4b      	ldr	r3, [pc, #300]	; (8004444 <get_Straj+0x7d0>)
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800431a:	e344      	b.n	80049a6 <get_Straj+0xd32>
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 800431c:	4b3e      	ldr	r3, [pc, #248]	; (8004418 <get_Straj+0x7a4>)
 800431e:	ed93 7b00 	vldr	d7, [r3]
 8004322:	ed97 6b06 	vldr	d6, [r7, #24]
 8004326:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	f340 808d 	ble.w	800444c <get_Straj+0x7d8>
 8004332:	4b39      	ldr	r3, [pc, #228]	; (8004418 <get_Straj+0x7a4>)
 8004334:	ed93 6b00 	vldr	d6, [r3]
 8004338:	4b43      	ldr	r3, [pc, #268]	; (8004448 <get_Straj+0x7d4>)
 800433a:	ed93 7b00 	vldr	d7, [r3]
 800433e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004342:	ed97 6b06 	vldr	d6, [r7, #24]
 8004346:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800434a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434e:	d87d      	bhi.n	800444c <get_Straj+0x7d8>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8004350:	4b33      	ldr	r3, [pc, #204]	; (8004420 <get_Straj+0x7ac>)
 8004352:	ed93 6b00 	vldr	d6, [r3]
 8004356:	4b33      	ldr	r3, [pc, #204]	; (8004424 <get_Straj+0x7b0>)
 8004358:	ed93 7b00 	vldr	d7, [r3]
 800435c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004360:	4b2d      	ldr	r3, [pc, #180]	; (8004418 <get_Straj+0x7a4>)
 8004362:	ed93 7b00 	vldr	d7, [r3]
 8004366:	ee26 7b07 	vmul.f64	d7, d6, d7
 800436a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800436e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004372:	4b2d      	ldr	r3, [pc, #180]	; (8004428 <get_Straj+0x7b4>)
 8004374:	ed93 7b00 	vldr	d7, [r3]
 8004378:	ee36 6b07 	vadd.f64	d6, d6, d7
 800437c:	4b26      	ldr	r3, [pc, #152]	; (8004418 <get_Straj+0x7a4>)
 800437e:	ed93 7b00 	vldr	d7, [r3]
 8004382:	ed97 5b06 	vldr	d5, [r7, #24]
 8004386:	ee35 5b47 	vsub.f64	d5, d5, d7
 800438a:	4b25      	ldr	r3, [pc, #148]	; (8004420 <get_Straj+0x7ac>)
 800438c:	ed93 7b00 	vldr	d7, [r3]
 8004390:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004394:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004398:	4b25      	ldr	r3, [pc, #148]	; (8004430 <get_Straj+0x7bc>)
 800439a:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax;
 800439e:	4b25      	ldr	r3, [pc, #148]	; (8004434 <get_Straj+0x7c0>)
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	4924      	ldr	r1, [pc, #144]	; (8004438 <get_Straj+0x7c4>)
 80043a6:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 80043aa:	4924      	ldr	r1, [pc, #144]	; (800443c <get_Straj+0x7c8>)
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 80043b8:	4921      	ldr	r1, [pc, #132]	; (8004440 <get_Straj+0x7cc>)
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80043c6:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <get_Straj+0x7d0>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 82eb 	beq.w	80049a6 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80043d0:	4b17      	ldr	r3, [pc, #92]	; (8004430 <get_Straj+0x7bc>)
 80043d2:	ed93 7b00 	vldr	d7, [r3]
 80043d6:	eeb1 7b47 	vneg.f64	d7, d7
 80043da:	4b15      	ldr	r3, [pc, #84]	; (8004430 <get_Straj+0x7bc>)
 80043dc:	ed83 7b00 	vstr	d7, [r3]
 80043e0:	4b15      	ldr	r3, [pc, #84]	; (8004438 <get_Straj+0x7c4>)
 80043e2:	ed93 7b00 	vldr	d7, [r3]
 80043e6:	eeb1 7b47 	vneg.f64	d7, d7
 80043ea:	4b13      	ldr	r3, [pc, #76]	; (8004438 <get_Straj+0x7c4>)
 80043ec:	ed83 7b00 	vstr	d7, [r3]
 80043f0:	4b12      	ldr	r3, [pc, #72]	; (800443c <get_Straj+0x7c8>)
 80043f2:	ed93 7b00 	vldr	d7, [r3]
 80043f6:	eeb1 7b47 	vneg.f64	d7, d7
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <get_Straj+0x7c8>)
 80043fc:	ed83 7b00 	vstr	d7, [r3]
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <get_Straj+0x7cc>)
 8004402:	ed93 7b00 	vldr	d7, [r3]
 8004406:	eeb1 7b47 	vneg.f64	d7, d7
 800440a:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <get_Straj+0x7cc>)
 800440c:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <get_Straj+0x7d0>)
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004416:	e2c6      	b.n	80049a6 <get_Straj+0xd32>
 8004418:	24000800 	.word	0x24000800
 800441c:	24000818 	.word	0x24000818
 8004420:	240007f0 	.word	0x240007f0
 8004424:	24000018 	.word	0x24000018
 8004428:	24000838 	.word	0x24000838
 800442c:	24000440 	.word	0x24000440
 8004430:	24000420 	.word	0x24000420
 8004434:	24000010 	.word	0x24000010
 8004438:	24000428 	.word	0x24000428
 800443c:	24000430 	.word	0x24000430
 8004440:	24000438 	.word	0x24000438
 8004444:	240007d8 	.word	0x240007d8
 8004448:	24000810 	.word	0x24000810
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 800444c:	4b6c      	ldr	r3, [pc, #432]	; (8004600 <get_Straj+0x98c>)
 800444e:	ed93 6b00 	vldr	d6, [r3]
 8004452:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <get_Straj+0x990>)
 8004454:	ed93 7b00 	vldr	d7, [r3]
 8004458:	ee36 7b47 	vsub.f64	d7, d6, d7
 800445c:	ed97 6b06 	vldr	d6, [r7, #24]
 8004460:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004468:	f2c0 80e4 	blt.w	8004634 <get_Straj+0x9c0>
 800446c:	4b64      	ldr	r3, [pc, #400]	; (8004600 <get_Straj+0x98c>)
 800446e:	ed93 6b00 	vldr	d6, [r3]
 8004472:	4b64      	ldr	r3, [pc, #400]	; (8004604 <get_Straj+0x990>)
 8004474:	ed93 7b00 	vldr	d7, [r3]
 8004478:	ee36 6b47 	vsub.f64	d6, d6, d7
 800447c:	4b62      	ldr	r3, [pc, #392]	; (8004608 <get_Straj+0x994>)
 800447e:	ed93 7b00 	vldr	d7, [r3]
 8004482:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004486:	ed97 6b06 	vldr	d6, [r7, #24]
 800448a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800448e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004492:	f200 80cf 	bhi.w	8004634 <get_Straj+0x9c0>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 8004496:	4b5d      	ldr	r3, [pc, #372]	; (800460c <get_Straj+0x998>)
 8004498:	ed93 6b00 	vldr	d6, [r3]
 800449c:	4b5c      	ldr	r3, [pc, #368]	; (8004610 <get_Straj+0x99c>)
 800449e:	ed93 5b00 	vldr	d5, [r3]
 80044a2:	4b5c      	ldr	r3, [pc, #368]	; (8004614 <get_Straj+0x9a0>)
 80044a4:	ed93 7b00 	vldr	d7, [r3]
 80044a8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80044ac:	4b55      	ldr	r3, [pc, #340]	; (8004604 <get_Straj+0x990>)
 80044ae:	ed93 7b00 	vldr	d7, [r3]
 80044b2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80044b6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80044ba:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80044be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80044c2:	4b4f      	ldr	r3, [pc, #316]	; (8004600 <get_Straj+0x98c>)
 80044c4:	ed93 7b00 	vldr	d7, [r3]
 80044c8:	ed97 5b06 	vldr	d5, [r7, #24]
 80044cc:	ee35 5b47 	vsub.f64	d5, d5, d7
 80044d0:	4b4c      	ldr	r3, [pc, #304]	; (8004604 <get_Straj+0x990>)
 80044d2:	ed93 7b00 	vldr	d7, [r3]
 80044d6:	ee35 5b07 	vadd.f64	d5, d5, d7
 80044da:	4b4d      	ldr	r3, [pc, #308]	; (8004610 <get_Straj+0x99c>)
 80044dc:	ed93 7b00 	vldr	d7, [r3]
 80044e0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80044e4:	ee36 8b07 	vadd.f64	d8, d6, d7
 80044e8:	4b45      	ldr	r3, [pc, #276]	; (8004600 <get_Straj+0x98c>)
 80044ea:	ed93 7b00 	vldr	d7, [r3]
 80044ee:	ed97 6b06 	vldr	d6, [r7, #24]
 80044f2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80044f6:	4b43      	ldr	r3, [pc, #268]	; (8004604 <get_Straj+0x990>)
 80044f8:	ed93 7b00 	vldr	d7, [r3]
 80044fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004500:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004504:	eeb0 0b47 	vmov.f64	d0, d7
 8004508:	f00c f982 	bl	8010810 <pow>
 800450c:	eeb0 7b40 	vmov.f64	d7, d0
 8004510:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004514:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004518:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <get_Straj+0x9a4>)
 800451a:	ed93 7b00 	vldr	d7, [r3]
 800451e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004522:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004526:	4b3d      	ldr	r3, [pc, #244]	; (800461c <get_Straj+0x9a8>)
 8004528:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 800452c:	4b38      	ldr	r3, [pc, #224]	; (8004610 <get_Straj+0x99c>)
 800452e:	ed93 8b00 	vldr	d8, [r3]
 8004532:	4b33      	ldr	r3, [pc, #204]	; (8004600 <get_Straj+0x98c>)
 8004534:	ed93 7b00 	vldr	d7, [r3]
 8004538:	ed97 6b06 	vldr	d6, [r7, #24]
 800453c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <get_Straj+0x990>)
 8004542:	ed93 7b00 	vldr	d7, [r3]
 8004546:	ee36 7b07 	vadd.f64	d7, d6, d7
 800454a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800454e:	eeb0 0b47 	vmov.f64	d0, d7
 8004552:	f00c f95d 	bl	8010810 <pow>
 8004556:	eeb0 7b40 	vmov.f64	d7, d0
 800455a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800455e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004562:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <get_Straj+0x9a4>)
 8004564:	ed93 7b00 	vldr	d7, [r3]
 8004568:	ee26 7b07 	vmul.f64	d7, d6, d7
 800456c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004570:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <get_Straj+0x9ac>)
 8004572:	ed83 7b00 	vstr	d7, [r3]
        qdd=-jmax*(t-T+Td);
 8004576:	4b28      	ldr	r3, [pc, #160]	; (8004618 <get_Straj+0x9a4>)
 8004578:	ed93 7b00 	vldr	d7, [r3]
 800457c:	eeb1 6b47 	vneg.f64	d6, d7
 8004580:	4b1f      	ldr	r3, [pc, #124]	; (8004600 <get_Straj+0x98c>)
 8004582:	ed93 7b00 	vldr	d7, [r3]
 8004586:	ed97 5b06 	vldr	d5, [r7, #24]
 800458a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800458e:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <get_Straj+0x990>)
 8004590:	ed93 7b00 	vldr	d7, [r3]
 8004594:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004598:	ee26 7b07 	vmul.f64	d7, d6, d7
 800459c:	4b21      	ldr	r3, [pc, #132]	; (8004624 <get_Straj+0x9b0>)
 800459e:	ed83 7b00 	vstr	d7, [r3]
        qddd=jmin;
 80045a2:	4b21      	ldr	r3, [pc, #132]	; (8004628 <get_Straj+0x9b4>)
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	4920      	ldr	r1, [pc, #128]	; (800462c <get_Straj+0x9b8>)
 80045aa:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80045ae:	4b20      	ldr	r3, [pc, #128]	; (8004630 <get_Straj+0x9bc>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 81f7 	beq.w	80049a6 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80045b8:	4b18      	ldr	r3, [pc, #96]	; (800461c <get_Straj+0x9a8>)
 80045ba:	ed93 7b00 	vldr	d7, [r3]
 80045be:	eeb1 7b47 	vneg.f64	d7, d7
 80045c2:	4b16      	ldr	r3, [pc, #88]	; (800461c <get_Straj+0x9a8>)
 80045c4:	ed83 7b00 	vstr	d7, [r3]
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <get_Straj+0x9ac>)
 80045ca:	ed93 7b00 	vldr	d7, [r3]
 80045ce:	eeb1 7b47 	vneg.f64	d7, d7
 80045d2:	4b13      	ldr	r3, [pc, #76]	; (8004620 <get_Straj+0x9ac>)
 80045d4:	ed83 7b00 	vstr	d7, [r3]
 80045d8:	4b12      	ldr	r3, [pc, #72]	; (8004624 <get_Straj+0x9b0>)
 80045da:	ed93 7b00 	vldr	d7, [r3]
 80045de:	eeb1 7b47 	vneg.f64	d7, d7
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <get_Straj+0x9b0>)
 80045e4:	ed83 7b00 	vstr	d7, [r3]
 80045e8:	4b10      	ldr	r3, [pc, #64]	; (800462c <get_Straj+0x9b8>)
 80045ea:	ed93 7b00 	vldr	d7, [r3]
 80045ee:	eeb1 7b47 	vneg.f64	d7, d7
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <get_Straj+0x9b8>)
 80045f4:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <get_Straj+0x9bc>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80045fe:	e1d2      	b.n	80049a6 <get_Straj+0xd32>
 8004600:	240007f8 	.word	0x240007f8
 8004604:	24000808 	.word	0x24000808
 8004608:	24000820 	.word	0x24000820
 800460c:	24000840 	.word	0x24000840
 8004610:	240007f0 	.word	0x240007f0
 8004614:	24000450 	.word	0x24000450
 8004618:	24000008 	.word	0x24000008
 800461c:	24000420 	.word	0x24000420
 8004620:	24000428 	.word	0x24000428
 8004624:	24000430 	.word	0x24000430
 8004628:	24000440 	.word	0x24000440
 800462c:	24000438 	.word	0x24000438
 8004630:	240007d8 	.word	0x240007d8
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 8004634:	4b7b      	ldr	r3, [pc, #492]	; (8004824 <get_Straj+0xbb0>)
 8004636:	ed93 6b00 	vldr	d6, [r3]
 800463a:	4b7b      	ldr	r3, [pc, #492]	; (8004828 <get_Straj+0xbb4>)
 800463c:	ed93 7b00 	vldr	d7, [r3]
 8004640:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004644:	4b79      	ldr	r3, [pc, #484]	; (800482c <get_Straj+0xbb8>)
 8004646:	ed93 7b00 	vldr	d7, [r3]
 800464a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800464e:	ed97 6b06 	vldr	d6, [r7, #24]
 8004652:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465a:	f340 80fd 	ble.w	8004858 <get_Straj+0xbe4>
 800465e:	4b71      	ldr	r3, [pc, #452]	; (8004824 <get_Straj+0xbb0>)
 8004660:	ed93 6b00 	vldr	d6, [r3]
 8004664:	4b71      	ldr	r3, [pc, #452]	; (800482c <get_Straj+0xbb8>)
 8004666:	ed93 7b00 	vldr	d7, [r3]
 800466a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800466e:	ed97 6b06 	vldr	d6, [r7, #24]
 8004672:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467a:	f200 80ed 	bhi.w	8004858 <get_Straj+0xbe4>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 800467e:	4b6c      	ldr	r3, [pc, #432]	; (8004830 <get_Straj+0xbbc>)
 8004680:	ed93 6b00 	vldr	d6, [r3]
 8004684:	4b6b      	ldr	r3, [pc, #428]	; (8004834 <get_Straj+0xbc0>)
 8004686:	ed93 5b00 	vldr	d5, [r3]
 800468a:	4b6b      	ldr	r3, [pc, #428]	; (8004838 <get_Straj+0xbc4>)
 800468c:	ed93 7b00 	vldr	d7, [r3]
 8004690:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004694:	4b64      	ldr	r3, [pc, #400]	; (8004828 <get_Straj+0xbb4>)
 8004696:	ed93 7b00 	vldr	d7, [r3]
 800469a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800469e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80046a2:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80046a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80046aa:	4b5e      	ldr	r3, [pc, #376]	; (8004824 <get_Straj+0xbb0>)
 80046ac:	ed93 7b00 	vldr	d7, [r3]
 80046b0:	ed97 5b06 	vldr	d5, [r7, #24]
 80046b4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80046b8:	4b5b      	ldr	r3, [pc, #364]	; (8004828 <get_Straj+0xbb4>)
 80046ba:	ed93 7b00 	vldr	d7, [r3]
 80046be:	ee35 5b07 	vadd.f64	d5, d5, d7
 80046c2:	4b5c      	ldr	r3, [pc, #368]	; (8004834 <get_Straj+0xbc0>)
 80046c4:	ed93 7b00 	vldr	d7, [r3]
 80046c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80046cc:	ee36 8b07 	vadd.f64	d8, d6, d7
 80046d0:	4b5a      	ldr	r3, [pc, #360]	; (800483c <get_Straj+0xbc8>)
 80046d2:	ed93 7b00 	vldr	d7, [r3]
 80046d6:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80046da:	ee87 9b06 	vdiv.f64	d9, d7, d6
 80046de:	4b51      	ldr	r3, [pc, #324]	; (8004824 <get_Straj+0xbb0>)
 80046e0:	ed93 7b00 	vldr	d7, [r3]
 80046e4:	ed97 6b06 	vldr	d6, [r7, #24]
 80046e8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80046ec:	4b4e      	ldr	r3, [pc, #312]	; (8004828 <get_Straj+0xbb4>)
 80046ee:	ed93 7b00 	vldr	d7, [r3]
 80046f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046f6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80046fa:	eeb0 0b47 	vmov.f64	d0, d7
 80046fe:	f00c f887 	bl	8010810 <pow>
 8004702:	eeb0 7b40 	vmov.f64	d7, d0
 8004706:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800470a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800470e:	4b47      	ldr	r3, [pc, #284]	; (800482c <get_Straj+0xbb8>)
 8004710:	ed93 7b00 	vldr	d7, [r3]
 8004714:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8004718:	ee27 5b05 	vmul.f64	d5, d7, d5
 800471c:	4b41      	ldr	r3, [pc, #260]	; (8004824 <get_Straj+0xbb0>)
 800471e:	ed93 7b00 	vldr	d7, [r3]
 8004722:	ed97 4b06 	vldr	d4, [r7, #24]
 8004726:	ee34 4b47 	vsub.f64	d4, d4, d7
 800472a:	4b3f      	ldr	r3, [pc, #252]	; (8004828 <get_Straj+0xbb4>)
 800472c:	ed93 7b00 	vldr	d7, [r3]
 8004730:	ee34 7b07 	vadd.f64	d7, d4, d7
 8004734:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004738:	ee36 ab47 	vsub.f64	d10, d6, d7
 800473c:	4b3b      	ldr	r3, [pc, #236]	; (800482c <get_Straj+0xbb8>)
 800473e:	ed93 7b00 	vldr	d7, [r3]
 8004742:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004746:	eeb0 0b47 	vmov.f64	d0, d7
 800474a:	f00c f861 	bl	8010810 <pow>
 800474e:	eeb0 7b40 	vmov.f64	d7, d0
 8004752:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8004756:	ee29 7b07 	vmul.f64	d7, d9, d7
 800475a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800475e:	4b38      	ldr	r3, [pc, #224]	; (8004840 <get_Straj+0xbcc>)
 8004760:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 8004764:	4b2f      	ldr	r3, [pc, #188]	; (8004824 <get_Straj+0xbb0>)
 8004766:	ed93 7b00 	vldr	d7, [r3]
 800476a:	ed97 6b06 	vldr	d6, [r7, #24]
 800476e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004772:	4b2d      	ldr	r3, [pc, #180]	; (8004828 <get_Straj+0xbb4>)
 8004774:	ed93 7b00 	vldr	d7, [r3]
 8004778:	ee36 6b07 	vadd.f64	d6, d6, d7
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <get_Straj+0xbb8>)
 800477e:	ed93 5b00 	vldr	d5, [r3]
 8004782:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004786:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800478a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800478e:	4b2b      	ldr	r3, [pc, #172]	; (800483c <get_Straj+0xbc8>)
 8004790:	ed93 7b00 	vldr	d7, [r3]
 8004794:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004798:	4b26      	ldr	r3, [pc, #152]	; (8004834 <get_Straj+0xbc0>)
 800479a:	ed93 7b00 	vldr	d7, [r3]
 800479e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047a2:	4b28      	ldr	r3, [pc, #160]	; (8004844 <get_Straj+0xbd0>)
 80047a4:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*Tj2;
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <get_Straj+0xbd4>)
 80047aa:	ed93 7b00 	vldr	d7, [r3]
 80047ae:	eeb1 6b47 	vneg.f64	d6, d7
 80047b2:	4b1e      	ldr	r3, [pc, #120]	; (800482c <get_Straj+0xbb8>)
 80047b4:	ed93 7b00 	vldr	d7, [r3]
 80047b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80047bc:	4b23      	ldr	r3, [pc, #140]	; (800484c <get_Straj+0xbd8>)
 80047be:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 80047c2:	4923      	ldr	r1, [pc, #140]	; (8004850 <get_Straj+0xbdc>)
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80047d0:	4b20      	ldr	r3, [pc, #128]	; (8004854 <get_Straj+0xbe0>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80e6 	beq.w	80049a6 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80047da:	4b19      	ldr	r3, [pc, #100]	; (8004840 <get_Straj+0xbcc>)
 80047dc:	ed93 7b00 	vldr	d7, [r3]
 80047e0:	eeb1 7b47 	vneg.f64	d7, d7
 80047e4:	4b16      	ldr	r3, [pc, #88]	; (8004840 <get_Straj+0xbcc>)
 80047e6:	ed83 7b00 	vstr	d7, [r3]
 80047ea:	4b16      	ldr	r3, [pc, #88]	; (8004844 <get_Straj+0xbd0>)
 80047ec:	ed93 7b00 	vldr	d7, [r3]
 80047f0:	eeb1 7b47 	vneg.f64	d7, d7
 80047f4:	4b13      	ldr	r3, [pc, #76]	; (8004844 <get_Straj+0xbd0>)
 80047f6:	ed83 7b00 	vstr	d7, [r3]
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <get_Straj+0xbd8>)
 80047fc:	ed93 7b00 	vldr	d7, [r3]
 8004800:	eeb1 7b47 	vneg.f64	d7, d7
 8004804:	4b11      	ldr	r3, [pc, #68]	; (800484c <get_Straj+0xbd8>)
 8004806:	ed83 7b00 	vstr	d7, [r3]
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <get_Straj+0xbdc>)
 800480c:	ed93 7b00 	vldr	d7, [r3]
 8004810:	eeb1 7b47 	vneg.f64	d7, d7
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <get_Straj+0xbdc>)
 8004816:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 800481a:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <get_Straj+0xbe0>)
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004820:	e0c1      	b.n	80049a6 <get_Straj+0xd32>
 8004822:	bf00      	nop
 8004824:	240007f8 	.word	0x240007f8
 8004828:	24000808 	.word	0x24000808
 800482c:	24000820 	.word	0x24000820
 8004830:	24000840 	.word	0x24000840
 8004834:	240007f0 	.word	0x240007f0
 8004838:	24000450 	.word	0x24000450
 800483c:	240007e8 	.word	0x240007e8
 8004840:	24000420 	.word	0x24000420
 8004844:	24000428 	.word	0x24000428
 8004848:	24000008 	.word	0x24000008
 800484c:	24000430 	.word	0x24000430
 8004850:	24000438 	.word	0x24000438
 8004854:	240007d8 	.word	0x240007d8
        }

    } else if (t>T-Tj2 && t<=T){
 8004858:	4b59      	ldr	r3, [pc, #356]	; (80049c0 <get_Straj+0xd4c>)
 800485a:	ed93 6b00 	vldr	d6, [r3]
 800485e:	4b59      	ldr	r3, [pc, #356]	; (80049c4 <get_Straj+0xd50>)
 8004860:	ed93 7b00 	vldr	d7, [r3]
 8004864:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004868:	ed97 6b06 	vldr	d6, [r7, #24]
 800486c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004874:	f340 8097 	ble.w	80049a6 <get_Straj+0xd32>
 8004878:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <get_Straj+0xd4c>)
 800487a:	ed93 7b00 	vldr	d7, [r3]
 800487e:	ed97 6b06 	vldr	d6, [r7, #24]
 8004882:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488a:	f200 808c 	bhi.w	80049a6 <get_Straj+0xd32>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 800488e:	4b4e      	ldr	r3, [pc, #312]	; (80049c8 <get_Straj+0xd54>)
 8004890:	ed93 6b00 	vldr	d6, [r3]
 8004894:	4b4a      	ldr	r3, [pc, #296]	; (80049c0 <get_Straj+0xd4c>)
 8004896:	ed93 5b00 	vldr	d5, [r3]
 800489a:	ed97 7b06 	vldr	d7, [r7, #24]
 800489e:	ee35 5b47 	vsub.f64	d5, d5, d7
 80048a2:	4b4a      	ldr	r3, [pc, #296]	; (80049cc <get_Straj+0xd58>)
 80048a4:	ed93 7b00 	vldr	d7, [r3]
 80048a8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80048ac:	ee36 8b47 	vsub.f64	d8, d6, d7
 80048b0:	4b43      	ldr	r3, [pc, #268]	; (80049c0 <get_Straj+0xd4c>)
 80048b2:	ed93 6b00 	vldr	d6, [r3]
 80048b6:	ed97 7b06 	vldr	d7, [r7, #24]
 80048ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80048be:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80048c2:	eeb0 0b47 	vmov.f64	d0, d7
 80048c6:	f00b ffa3 	bl	8010810 <pow>
 80048ca:	eeb0 7b40 	vmov.f64	d7, d0
 80048ce:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80048d2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80048d6:	4b3e      	ldr	r3, [pc, #248]	; (80049d0 <get_Straj+0xd5c>)
 80048d8:	ed93 7b00 	vldr	d7, [r3]
 80048dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80048e0:	ee38 7b47 	vsub.f64	d7, d8, d7
 80048e4:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <get_Straj+0xd60>)
 80048e6:	ed83 7b00 	vstr	d7, [r3]
        qd = vf+jmax*(pow(T-t,2))/2;
 80048ea:	4b35      	ldr	r3, [pc, #212]	; (80049c0 <get_Straj+0xd4c>)
 80048ec:	ed93 6b00 	vldr	d6, [r3]
 80048f0:	ed97 7b06 	vldr	d7, [r7, #24]
 80048f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80048f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80048fc:	eeb0 0b47 	vmov.f64	d0, d7
 8004900:	f00b ff86 	bl	8010810 <pow>
 8004904:	eeb0 6b40 	vmov.f64	d6, d0
 8004908:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <get_Straj+0xd5c>)
 800490a:	ed93 7b00 	vldr	d7, [r3]
 800490e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004912:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004916:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800491a:	4b2c      	ldr	r3, [pc, #176]	; (80049cc <get_Straj+0xd58>)
 800491c:	ed93 7b00 	vldr	d7, [r3]
 8004920:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004924:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <get_Straj+0xd64>)
 8004926:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*(T-t);
 800492a:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <get_Straj+0xd5c>)
 800492c:	ed93 7b00 	vldr	d7, [r3]
 8004930:	eeb1 6b47 	vneg.f64	d6, d7
 8004934:	4b22      	ldr	r3, [pc, #136]	; (80049c0 <get_Straj+0xd4c>)
 8004936:	ed93 5b00 	vldr	d5, [r3]
 800493a:	ed97 7b06 	vldr	d7, [r7, #24]
 800493e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004942:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004946:	4b25      	ldr	r3, [pc, #148]	; (80049dc <get_Straj+0xd68>)
 8004948:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 800494c:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <get_Straj+0xd5c>)
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	4923      	ldr	r1, [pc, #140]	; (80049e0 <get_Straj+0xd6c>)
 8004954:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004958:	4b22      	ldr	r3, [pc, #136]	; (80049e4 <get_Straj+0xd70>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d022      	beq.n	80049a6 <get_Straj+0xd32>
            //printf("inv tramo7\n");
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004960:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <get_Straj+0xd60>)
 8004962:	ed93 7b00 	vldr	d7, [r3]
 8004966:	eeb1 7b47 	vneg.f64	d7, d7
 800496a:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <get_Straj+0xd60>)
 800496c:	ed83 7b00 	vstr	d7, [r3]
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <get_Straj+0xd64>)
 8004972:	ed93 7b00 	vldr	d7, [r3]
 8004976:	eeb1 7b47 	vneg.f64	d7, d7
 800497a:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <get_Straj+0xd64>)
 800497c:	ed83 7b00 	vstr	d7, [r3]
 8004980:	4b16      	ldr	r3, [pc, #88]	; (80049dc <get_Straj+0xd68>)
 8004982:	ed93 7b00 	vldr	d7, [r3]
 8004986:	eeb1 7b47 	vneg.f64	d7, d7
 800498a:	4b14      	ldr	r3, [pc, #80]	; (80049dc <get_Straj+0xd68>)
 800498c:	ed83 7b00 	vstr	d7, [r3]
 8004990:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <get_Straj+0xd6c>)
 8004992:	ed93 7b00 	vldr	d7, [r3]
 8004996:	eeb1 7b47 	vneg.f64	d7, d7
 800499a:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <get_Straj+0xd6c>)
 800499c:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <get_Straj+0xd70>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
        }
    }


    return qd;
 80049a6:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <get_Straj+0xd64>)
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80049b0:	eeb0 0b47 	vmov.f64	d0, d7
 80049b4:	3720      	adds	r7, #32
 80049b6:	46bd      	mov	sp, r7
 80049b8:	ecbd 8b06 	vpop	{d8-d10}
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	240007f8 	.word	0x240007f8
 80049c4:	24000820 	.word	0x24000820
 80049c8:	24000840 	.word	0x24000840
 80049cc:	24000450 	.word	0x24000450
 80049d0:	24000008 	.word	0x24000008
 80049d4:	24000420 	.word	0x24000420
 80049d8:	24000428 	.word	0x24000428
 80049dc:	24000430 	.word	0x24000430
 80049e0:	24000438 	.word	0x24000438
 80049e4:	240007d8 	.word	0x240007d8

080049e8 <update_ScurveTraj>:


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax, double *params){
 80049e8:	b580      	push	{r7, lr}
 80049ea:	ed2d 8b04 	vpush	{d8-d9}
 80049ee:	b092      	sub	sp, #72	; 0x48
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80049f6:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80049fa:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 80049fe:	ed87 3b08 	vstr	d3, [r7, #32]
 8004a02:	ed87 4b06 	vstr	d4, [r7, #24]
 8004a06:	ed87 5b04 	vstr	d5, [r7, #16]
 8004a0a:	ed87 6b02 	vstr	d6, [r7, #8]
 8004a0e:	6078      	str	r0, [r7, #4]

	jmin = -jmax;
 8004a10:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a14:	eeb1 7b47 	vneg.f64	d7, d7
 8004a18:	4b9e      	ldr	r3, [pc, #632]	; (8004c94 <update_ScurveTraj+0x2ac>)
 8004a1a:	ed83 7b00 	vstr	d7, [r3]
	amin = -amax;
 8004a1e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a22:	eeb1 7b47 	vneg.f64	d7, d7
 8004a26:	4b9c      	ldr	r3, [pc, #624]	; (8004c98 <update_ScurveTraj+0x2b0>)
 8004a28:	ed83 7b00 	vstr	d7, [r3]
	vmin = -vmax;
 8004a2c:	ed97 7b06 	vldr	d7, [r7, #24]
 8004a30:	eeb1 7b47 	vneg.f64	d7, d7
 8004a34:	4b99      	ldr	r3, [pc, #612]	; (8004c9c <update_ScurveTraj+0x2b4>)
 8004a36:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 8004a3a:	4999      	ldr	r1, [pc, #612]	; (8004ca0 <update_ScurveTraj+0x2b8>)
 8004a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a40:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8004a44:	4997      	ldr	r1, [pc, #604]	; (8004ca4 <update_ScurveTraj+0x2bc>)
 8004a46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a4a:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 8004a4e:	4b95      	ldr	r3, [pc, #596]	; (8004ca4 <update_ScurveTraj+0x2bc>)
 8004a50:	ed93 6b00 	vldr	d6, [r3]
 8004a54:	4b92      	ldr	r3, [pc, #584]	; (8004ca0 <update_ScurveTraj+0x2b8>)
 8004a56:	ed93 7b00 	vldr	d7, [r3]
 8004a5a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a62:	d548      	bpl.n	8004af6 <update_ScurveTraj+0x10e>

		flagInv = true;
 8004a64:	4b90      	ldr	r3, [pc, #576]	; (8004ca8 <update_ScurveTraj+0x2c0>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	701a      	strb	r2, [r3, #0]

		qi = -qi;
 8004a6a:	4b8d      	ldr	r3, [pc, #564]	; (8004ca0 <update_ScurveTraj+0x2b8>)
 8004a6c:	ed93 7b00 	vldr	d7, [r3]
 8004a70:	eeb1 7b47 	vneg.f64	d7, d7
 8004a74:	4b8a      	ldr	r3, [pc, #552]	; (8004ca0 <update_ScurveTraj+0x2b8>)
 8004a76:	ed83 7b00 	vstr	d7, [r3]
		qf = -qf;
 8004a7a:	4b8a      	ldr	r3, [pc, #552]	; (8004ca4 <update_ScurveTraj+0x2bc>)
 8004a7c:	ed93 7b00 	vldr	d7, [r3]
 8004a80:	eeb1 7b47 	vneg.f64	d7, d7
 8004a84:	4b87      	ldr	r3, [pc, #540]	; (8004ca4 <update_ScurveTraj+0x2bc>)
 8004a86:	ed83 7b00 	vstr	d7, [r3]
		vi = -vi;
 8004a8a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004a8e:	eeb1 7b47 	vneg.f64	d7, d7
 8004a92:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		vf = -vf;
 8004a96:	ed97 7b08 	vldr	d7, [r7, #32]
 8004a9a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a9e:	ed87 7b08 	vstr	d7, [r7, #32]

		vmax = -vmin;
 8004aa2:	4b7e      	ldr	r3, [pc, #504]	; (8004c9c <update_ScurveTraj+0x2b4>)
 8004aa4:	ed93 7b00 	vldr	d7, [r3]
 8004aa8:	eeb1 7b47 	vneg.f64	d7, d7
 8004aac:	ed87 7b06 	vstr	d7, [r7, #24]
		vmin = -vmax;
 8004ab0:	ed97 7b06 	vldr	d7, [r7, #24]
 8004ab4:	eeb1 7b47 	vneg.f64	d7, d7
 8004ab8:	4b78      	ldr	r3, [pc, #480]	; (8004c9c <update_ScurveTraj+0x2b4>)
 8004aba:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 8004abe:	4b76      	ldr	r3, [pc, #472]	; (8004c98 <update_ScurveTraj+0x2b0>)
 8004ac0:	ed93 7b00 	vldr	d7, [r3]
 8004ac4:	eeb1 7b47 	vneg.f64	d7, d7
 8004ac8:	ed87 7b04 	vstr	d7, [r7, #16]
		amin = -amax;
 8004acc:	ed97 7b04 	vldr	d7, [r7, #16]
 8004ad0:	eeb1 7b47 	vneg.f64	d7, d7
 8004ad4:	4b70      	ldr	r3, [pc, #448]	; (8004c98 <update_ScurveTraj+0x2b0>)
 8004ad6:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 8004ada:	4b6e      	ldr	r3, [pc, #440]	; (8004c94 <update_ScurveTraj+0x2ac>)
 8004adc:	ed93 7b00 	vldr	d7, [r3]
 8004ae0:	eeb1 7b47 	vneg.f64	d7, d7
 8004ae4:	ed87 7b02 	vstr	d7, [r7, #8]
		jmin = -jmax;
 8004ae8:	ed97 7b02 	vldr	d7, [r7, #8]
 8004aec:	eeb1 7b47 	vneg.f64	d7, d7
 8004af0:	4b68      	ldr	r3, [pc, #416]	; (8004c94 <update_ScurveTraj+0x2ac>)
 8004af2:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 8004af6:	ed97 6b08 	vldr	d6, [r7, #32]
 8004afa:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004afe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b02:	eeb0 6bc7 	vabs.f64	d6, d7
 8004b06:	ed97 7b02 	vldr	d7, [r7, #8]
 8004b0a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004b0e:	eeb0 0b45 	vmov.f64	d0, d5
 8004b12:	f00c f8fd 	bl	8010d10 <sqrt>
 8004b16:	eeb0 4b40 	vmov.f64	d4, d0
 8004b1a:	ed97 5b04 	vldr	d5, [r7, #16]
 8004b1e:	ed97 6b02 	vldr	d6, [r7, #8]
 8004b22:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004b26:	eeb4 4bc7 	vcmpe.f64	d4, d7
 8004b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2e:	d512      	bpl.n	8004b56 <update_ScurveTraj+0x16e>
 8004b30:	ed97 6b08 	vldr	d6, [r7, #32]
 8004b34:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004b38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b3c:	eeb0 6bc7 	vabs.f64	d6, d7
 8004b40:	ed97 7b02 	vldr	d7, [r7, #8]
 8004b44:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004b48:	eeb0 0b45 	vmov.f64	d0, d5
 8004b4c:	f00c f8e0 	bl	8010d10 <sqrt>
 8004b50:	eeb0 7b40 	vmov.f64	d7, d0
 8004b54:	e005      	b.n	8004b62 <update_ScurveTraj+0x17a>
 8004b56:	ed97 5b04 	vldr	d5, [r7, #16]
 8004b5a:	ed97 6b02 	vldr	d6, [r7, #8]
 8004b5e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004b62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b66:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44


	if (Tjaux<amax/jmax){
 8004b6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004b6e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004b72:	ed97 4b04 	vldr	d4, [r7, #16]
 8004b76:	ed97 5b02 	vldr	d5, [r7, #8]
 8004b7a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004b7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b86:	d400      	bmi.n	8004b8a <update_ScurveTraj+0x1a2>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 8004b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 8004b8a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004b8e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004b92:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004b96:	ed97 7b02 	vldr	d7, [r7, #8]
 8004b9a:	ee26 8b07 	vmul.f64	d8, d6, d7
 8004b9e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004ba2:	ed97 0b04 	vldr	d0, [r7, #16]
 8004ba6:	f00b fe33 	bl	8010810 <pow>
 8004baa:	eeb0 7b40 	vmov.f64	d7, d0
 8004bae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb6:	d51d      	bpl.n	8004bf4 <update_ScurveTraj+0x20c>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 8004bb8:	ed97 6b06 	vldr	d6, [r7, #24]
 8004bbc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004bc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004bc4:	eeb0 6bc7 	vabs.f64	d6, d7
 8004bc8:	ed97 7b02 	vldr	d7, [r7, #8]
 8004bcc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004bd0:	eeb0 0b45 	vmov.f64	d0, d5
 8004bd4:	f00c f89c 	bl	8010d10 <sqrt>
 8004bd8:	eeb0 7b40 	vmov.f64	d7, d0
 8004bdc:	4b33      	ldr	r3, [pc, #204]	; (8004cac <update_ScurveTraj+0x2c4>)
 8004bde:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 8004be2:	4b32      	ldr	r3, [pc, #200]	; (8004cac <update_ScurveTraj+0x2c4>)
 8004be4:	ed93 7b00 	vldr	d7, [r3]
 8004be8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004bec:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <update_ScurveTraj+0x2c8>)
 8004bee:	ed83 7b00 	vstr	d7, [r3]
 8004bf2:	e01a      	b.n	8004c2a <update_ScurveTraj+0x242>
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 8004bf4:	ed97 5b04 	vldr	d5, [r7, #16]
 8004bf8:	ed97 6b02 	vldr	d6, [r7, #8]
 8004bfc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004c00:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <update_ScurveTraj+0x2c4>)
 8004c02:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1+(vmax-vi)/amax;
 8004c06:	ed97 6b06 	vldr	d6, [r7, #24]
 8004c0a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004c0e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004c12:	ed97 7b04 	vldr	d7, [r7, #16]
 8004c16:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004c1a:	4b24      	ldr	r3, [pc, #144]	; (8004cac <update_ScurveTraj+0x2c4>)
 8004c1c:	ed93 7b00 	vldr	d7, [r3]
 8004c20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c24:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <update_ScurveTraj+0x2c8>)
 8004c26:	ed83 7b00 	vstr	d7, [r3]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 8004c2a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004c2e:	ed97 7b08 	vldr	d7, [r7, #32]
 8004c32:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004c36:	ed97 7b02 	vldr	d7, [r7, #8]
 8004c3a:	ee26 8b07 	vmul.f64	d8, d6, d7
 8004c3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004c42:	ed97 0b04 	vldr	d0, [r7, #16]
 8004c46:	f00b fde3 	bl	8010810 <pow>
 8004c4a:	eeb0 7b40 	vmov.f64	d7, d0
 8004c4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c56:	d531      	bpl.n	8004cbc <update_ScurveTraj+0x2d4>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 8004c58:	ed97 6b06 	vldr	d6, [r7, #24]
 8004c5c:	ed97 7b08 	vldr	d7, [r7, #32]
 8004c60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004c64:	eeb0 6bc7 	vabs.f64	d6, d7
 8004c68:	ed97 7b02 	vldr	d7, [r7, #8]
 8004c6c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004c70:	eeb0 0b45 	vmov.f64	d0, d5
 8004c74:	f00c f84c 	bl	8010d10 <sqrt>
 8004c78:	eeb0 7b40 	vmov.f64	d7, d0
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <update_ScurveTraj+0x2cc>)
 8004c7e:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 8004c82:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <update_ScurveTraj+0x2cc>)
 8004c84:	ed93 7b00 	vldr	d7, [r3]
 8004c88:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <update_ScurveTraj+0x2d0>)
 8004c8e:	ed83 7b00 	vstr	d7, [r3]
 8004c92:	e02e      	b.n	8004cf2 <update_ScurveTraj+0x30a>
 8004c94:	24000440 	.word	0x24000440
 8004c98:	24000458 	.word	0x24000458
 8004c9c:	24000448 	.word	0x24000448
 8004ca0:	24000838 	.word	0x24000838
 8004ca4:	24000840 	.word	0x24000840
 8004ca8:	240007d8 	.word	0x240007d8
 8004cac:	24000818 	.word	0x24000818
 8004cb0:	24000800 	.word	0x24000800
 8004cb4:	24000820 	.word	0x24000820
 8004cb8:	24000808 	.word	0x24000808
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 8004cbc:	ed97 5b04 	vldr	d5, [r7, #16]
 8004cc0:	ed97 6b02 	vldr	d6, [r7, #8]
 8004cc4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004cc8:	4b95      	ldr	r3, [pc, #596]	; (8004f20 <update_ScurveTraj+0x538>)
 8004cca:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2+(vmax-vf)/amax;
 8004cce:	ed97 6b06 	vldr	d6, [r7, #24]
 8004cd2:	ed97 7b08 	vldr	d7, [r7, #32]
 8004cd6:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004cda:	ed97 7b04 	vldr	d7, [r7, #16]
 8004cde:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004ce2:	4b8f      	ldr	r3, [pc, #572]	; (8004f20 <update_ScurveTraj+0x538>)
 8004ce4:	ed93 7b00 	vldr	d7, [r3]
 8004ce8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004cec:	4b8d      	ldr	r3, [pc, #564]	; (8004f24 <update_ScurveTraj+0x53c>)
 8004cee:	ed83 7b00 	vstr	d7, [r3]
	}


	Tv = (qf-qi)/vmax - (Ta/2)*(1+(vi/vmax))-(Td/2)*(1+(vf/vmax));
 8004cf2:	4b8d      	ldr	r3, [pc, #564]	; (8004f28 <update_ScurveTraj+0x540>)
 8004cf4:	ed93 6b00 	vldr	d6, [r3]
 8004cf8:	4b8c      	ldr	r3, [pc, #560]	; (8004f2c <update_ScurveTraj+0x544>)
 8004cfa:	ed93 7b00 	vldr	d7, [r3]
 8004cfe:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004d02:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d06:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004d0a:	4b89      	ldr	r3, [pc, #548]	; (8004f30 <update_ScurveTraj+0x548>)
 8004d0c:	ed93 7b00 	vldr	d7, [r3]
 8004d10:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004d14:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8004d18:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8004d1c:	ed97 4b06 	vldr	d4, [r7, #24]
 8004d20:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004d24:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8004d28:	ee37 7b04 	vadd.f64	d7, d7, d4
 8004d2c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d30:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d34:	4b7b      	ldr	r3, [pc, #492]	; (8004f24 <update_ScurveTraj+0x53c>)
 8004d36:	ed93 7b00 	vldr	d7, [r3]
 8004d3a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004d3e:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8004d42:	ed97 3b08 	vldr	d3, [r7, #32]
 8004d46:	ed97 4b06 	vldr	d4, [r7, #24]
 8004d4a:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004d4e:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8004d52:	ee37 7b04 	vadd.f64	d7, d7, d4
 8004d56:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d5e:	4b75      	ldr	r3, [pc, #468]	; (8004f34 <update_ScurveTraj+0x54c>)
 8004d60:	ed83 7b00 	vstr	d7, [r3]

	if (Tv>0){
 8004d64:	4b73      	ldr	r3, [pc, #460]	; (8004f34 <update_ScurveTraj+0x54c>)
 8004d66:	ed93 7b00 	vldr	d7, [r3]
 8004d6a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d72:	f300 82d5 	bgt.w	8005320 <update_ScurveTraj+0x938>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 8004d76:	ed97 5b04 	vldr	d5, [r7, #16]
 8004d7a:	ed97 6b02 	vldr	d6, [r7, #8]
 8004d7e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004d82:	4b6d      	ldr	r3, [pc, #436]	; (8004f38 <update_ScurveTraj+0x550>)
 8004d84:	ed83 7b00 	vstr	d7, [r3]
		Tj2=Tj1;
 8004d88:	4b6b      	ldr	r3, [pc, #428]	; (8004f38 <update_ScurveTraj+0x550>)
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	4964      	ldr	r1, [pc, #400]	; (8004f20 <update_ScurveTraj+0x538>)
 8004d90:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 8004d94:	4b68      	ldr	r3, [pc, #416]	; (8004f38 <update_ScurveTraj+0x550>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	4968      	ldr	r1, [pc, #416]	; (8004f3c <update_ScurveTraj+0x554>)
 8004d9c:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8004da0:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8004da4:	ed97 0b04 	vldr	d0, [r7, #16]
 8004da8:	f00b fd32 	bl	8010810 <pow>
 8004dac:	eeb0 9b40 	vmov.f64	d9, d0
 8004db0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004db4:	ed97 0b02 	vldr	d0, [r7, #8]
 8004db8:	f00b fd2a 	bl	8010810 <pow>
 8004dbc:	eeb0 7b40 	vmov.f64	d7, d0
 8004dc0:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8004dc4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004dc8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8004dcc:	f00b fd20 	bl	8010810 <pow>
 8004dd0:	eeb0 9b40 	vmov.f64	d9, d0
 8004dd4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004dd8:	ed97 0b08 	vldr	d0, [r7, #32]
 8004ddc:	f00b fd18 	bl	8010810 <pow>
 8004de0:	eeb0 7b40 	vmov.f64	d7, d0
 8004de4:	ee39 7b07 	vadd.f64	d7, d9, d7
 8004de8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004dec:	ee38 6b07 	vadd.f64	d6, d8, d7
 8004df0:	4b4d      	ldr	r3, [pc, #308]	; (8004f28 <update_ScurveTraj+0x540>)
 8004df2:	ed93 5b00 	vldr	d5, [r3]
 8004df6:	4b4d      	ldr	r3, [pc, #308]	; (8004f2c <update_ScurveTraj+0x544>)
 8004df8:	ed93 7b00 	vldr	d7, [r3]
 8004dfc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004e00:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8004e04:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004e08:	ed97 3b04 	vldr	d3, [r7, #16]
 8004e0c:	ed97 4b02 	vldr	d4, [r7, #8]
 8004e10:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004e14:	ee37 4b07 	vadd.f64	d4, d7, d7
 8004e18:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8004e1c:	ed97 7b08 	vldr	d7, [r7, #32]
 8004e20:	ee33 7b07 	vadd.f64	d7, d3, d7
 8004e24:	ee24 7b07 	vmul.f64	d7, d4, d7
 8004e28:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004e2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8004e30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004e34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e38:	4b41      	ldr	r3, [pc, #260]	; (8004f40 <update_ScurveTraj+0x558>)
 8004e3a:	ed83 7b00 	vstr	d7, [r3]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8004e3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e42:	ed97 0b04 	vldr	d0, [r7, #16]
 8004e46:	f00b fce3 	bl	8010810 <pow>
 8004e4a:	eeb0 5b40 	vmov.f64	d5, d0
 8004e4e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004e52:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004e56:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004e5a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e5e:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004e62:	4b37      	ldr	r3, [pc, #220]	; (8004f40 <update_ScurveTraj+0x558>)
 8004e64:	ed93 7b00 	vldr	d7, [r3]
 8004e68:	eeb0 0b47 	vmov.f64	d0, d7
 8004e6c:	f00b ff50 	bl	8010d10 <sqrt>
 8004e70:	eeb0 7b40 	vmov.f64	d7, d0
 8004e74:	ee38 5b07 	vadd.f64	d5, d8, d7
 8004e78:	ed97 7b04 	vldr	d7, [r7, #16]
 8004e7c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004e80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004e84:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <update_ScurveTraj+0x548>)
 8004e86:	ed83 7b00 	vstr	d7, [r3]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8004e8a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e8e:	ed97 0b04 	vldr	d0, [r7, #16]
 8004e92:	f00b fcbd 	bl	8010810 <pow>
 8004e96:	eeb0 5b40 	vmov.f64	d5, d0
 8004e9a:	ed97 7b02 	vldr	d7, [r7, #8]
 8004e9e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004ea2:	ed97 7b08 	vldr	d7, [r7, #32]
 8004ea6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004eaa:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004eae:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <update_ScurveTraj+0x558>)
 8004eb0:	ed93 7b00 	vldr	d7, [r3]
 8004eb4:	eeb0 0b47 	vmov.f64	d0, d7
 8004eb8:	f00b ff2a 	bl	8010d10 <sqrt>
 8004ebc:	eeb0 7b40 	vmov.f64	d7, d0
 8004ec0:	ee38 5b07 	vadd.f64	d5, d8, d7
 8004ec4:	ed97 7b04 	vldr	d7, [r7, #16]
 8004ec8:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004ecc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004ed0:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <update_ScurveTraj+0x53c>)
 8004ed2:	ed83 7b00 	vstr	d7, [r3]
		Tv=0;
 8004ed6:	4917      	ldr	r1, [pc, #92]	; (8004f34 <update_ScurveTraj+0x54c>)
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 8004ee4:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <update_ScurveTraj+0x554>)
 8004ee6:	ed93 7b00 	vldr	d7, [r3]
 8004eea:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004eee:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <update_ScurveTraj+0x548>)
 8004ef0:	ed93 7b00 	vldr	d7, [r3]
 8004ef4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efc:	f300 81e4 	bgt.w	80052c8 <update_ScurveTraj+0x8e0>
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <update_ScurveTraj+0x554>)
 8004f02:	ed93 7b00 	vldr	d7, [r3]
 8004f06:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <update_ScurveTraj+0x53c>)
 8004f0c:	ed93 7b00 	vldr	d7, [r3]
 8004f10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f18:	f340 8202 	ble.w	8005320 <update_ScurveTraj+0x938>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 8004f1c:	e1d4      	b.n	80052c8 <update_ScurveTraj+0x8e0>
 8004f1e:	bf00      	nop
 8004f20:	24000820 	.word	0x24000820
 8004f24:	24000808 	.word	0x24000808
 8004f28:	24000840 	.word	0x24000840
 8004f2c:	24000838 	.word	0x24000838
 8004f30:	24000800 	.word	0x24000800
 8004f34:	24000810 	.word	0x24000810
 8004f38:	24000818 	.word	0x24000818
 8004f3c:	24000828 	.word	0x24000828
 8004f40:	24000830 	.word	0x24000830

				amax=amax*0.99;
 8004f44:	ed97 7b04 	vldr	d7, [r7, #16]
 8004f48:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 80052a0 <update_ScurveTraj+0x8b8>
 8004f4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004f50:	ed87 7b04 	vstr	d7, [r7, #16]
				Tj=amax/jmax;
 8004f54:	ed97 5b04 	vldr	d5, [r7, #16]
 8004f58:	ed97 6b02 	vldr	d6, [r7, #8]
 8004f5c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004f60:	4bd1      	ldr	r3, [pc, #836]	; (80052a8 <update_ScurveTraj+0x8c0>)
 8004f62:	ed83 7b00 	vstr	d7, [r3]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8004f66:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8004f6a:	ed97 0b04 	vldr	d0, [r7, #16]
 8004f6e:	f00b fc4f 	bl	8010810 <pow>
 8004f72:	eeb0 9b40 	vmov.f64	d9, d0
 8004f76:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f7a:	ed97 0b02 	vldr	d0, [r7, #8]
 8004f7e:	f00b fc47 	bl	8010810 <pow>
 8004f82:	eeb0 7b40 	vmov.f64	d7, d0
 8004f86:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8004f8a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f8e:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8004f92:	f00b fc3d 	bl	8010810 <pow>
 8004f96:	eeb0 9b40 	vmov.f64	d9, d0
 8004f9a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f9e:	ed97 0b08 	vldr	d0, [r7, #32]
 8004fa2:	f00b fc35 	bl	8010810 <pow>
 8004fa6:	eeb0 7b40 	vmov.f64	d7, d0
 8004faa:	ee39 7b07 	vadd.f64	d7, d9, d7
 8004fae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004fb2:	ee38 6b07 	vadd.f64	d6, d8, d7
 8004fb6:	4bbd      	ldr	r3, [pc, #756]	; (80052ac <update_ScurveTraj+0x8c4>)
 8004fb8:	ed93 5b00 	vldr	d5, [r3]
 8004fbc:	4bbc      	ldr	r3, [pc, #752]	; (80052b0 <update_ScurveTraj+0x8c8>)
 8004fbe:	ed93 7b00 	vldr	d7, [r3]
 8004fc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004fc6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8004fca:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004fce:	ed97 3b04 	vldr	d3, [r7, #16]
 8004fd2:	ed97 4b02 	vldr	d4, [r7, #8]
 8004fd6:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004fda:	ee37 4b07 	vadd.f64	d4, d7, d7
 8004fde:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8004fe2:	ed97 7b08 	vldr	d7, [r7, #32]
 8004fe6:	ee33 7b07 	vadd.f64	d7, d3, d7
 8004fea:	ee24 7b07 	vmul.f64	d7, d4, d7
 8004fee:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004ff2:	ed97 7b04 	vldr	d7, [r7, #16]
 8004ff6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ffa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ffe:	4bad      	ldr	r3, [pc, #692]	; (80052b4 <update_ScurveTraj+0x8cc>)
 8005000:	ed83 7b00 	vstr	d7, [r3]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005004:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005008:	ed97 0b04 	vldr	d0, [r7, #16]
 800500c:	f00b fc00 	bl	8010810 <pow>
 8005010:	eeb0 5b40 	vmov.f64	d5, d0
 8005014:	ed97 7b02 	vldr	d7, [r7, #8]
 8005018:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800501c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005020:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005024:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005028:	4ba2      	ldr	r3, [pc, #648]	; (80052b4 <update_ScurveTraj+0x8cc>)
 800502a:	ed93 7b00 	vldr	d7, [r3]
 800502e:	eeb0 0b47 	vmov.f64	d0, d7
 8005032:	f00b fe6d 	bl	8010d10 <sqrt>
 8005036:	eeb0 7b40 	vmov.f64	d7, d0
 800503a:	ee38 5b07 	vadd.f64	d5, d8, d7
 800503e:	ed97 7b04 	vldr	d7, [r7, #16]
 8005042:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005046:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800504a:	4b9b      	ldr	r3, [pc, #620]	; (80052b8 <update_ScurveTraj+0x8d0>)
 800504c:	ed83 7b00 	vstr	d7, [r3]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005050:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005054:	ed97 0b04 	vldr	d0, [r7, #16]
 8005058:	f00b fbda 	bl	8010810 <pow>
 800505c:	eeb0 5b40 	vmov.f64	d5, d0
 8005060:	ed97 7b02 	vldr	d7, [r7, #8]
 8005064:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005068:	ed97 7b08 	vldr	d7, [r7, #32]
 800506c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005070:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005074:	4b8f      	ldr	r3, [pc, #572]	; (80052b4 <update_ScurveTraj+0x8cc>)
 8005076:	ed93 7b00 	vldr	d7, [r3]
 800507a:	eeb0 0b47 	vmov.f64	d0, d7
 800507e:	f00b fe47 	bl	8010d10 <sqrt>
 8005082:	eeb0 7b40 	vmov.f64	d7, d0
 8005086:	ee38 5b07 	vadd.f64	d5, d8, d7
 800508a:	ed97 7b04 	vldr	d7, [r7, #16]
 800508e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005092:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005096:	4b89      	ldr	r3, [pc, #548]	; (80052bc <update_ScurveTraj+0x8d4>)
 8005098:	ed83 7b00 	vstr	d7, [r3]

				//print(f'{i}',amax)


				if (Ta<0){
 800509c:	4b86      	ldr	r3, [pc, #536]	; (80052b8 <update_ScurveTraj+0x8d0>)
 800509e:	ed93 7b00 	vldr	d7, [r3]
 80050a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80050a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050aa:	d576      	bpl.n	800519a <update_ScurveTraj+0x7b2>
					Ta=0;
 80050ac:	4982      	ldr	r1, [pc, #520]	; (80052b8 <update_ScurveTraj+0x8d0>)
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 80050ba:	4981      	ldr	r1, [pc, #516]	; (80052c0 <update_ScurveTraj+0x8d8>)
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 80050c8:	4b78      	ldr	r3, [pc, #480]	; (80052ac <update_ScurveTraj+0x8c4>)
 80050ca:	ed93 6b00 	vldr	d6, [r3]
 80050ce:	4b78      	ldr	r3, [pc, #480]	; (80052b0 <update_ScurveTraj+0x8c8>)
 80050d0:	ed93 7b00 	vldr	d7, [r3]
 80050d4:	ee36 5b47 	vsub.f64	d5, d6, d7
 80050d8:	ed97 6b08 	vldr	d6, [r7, #32]
 80050dc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80050e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80050e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80050e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80050ec:	4b73      	ldr	r3, [pc, #460]	; (80052bc <update_ScurveTraj+0x8d4>)
 80050ee:	ed83 7b00 	vstr	d7, [r3]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 80050f2:	4b6e      	ldr	r3, [pc, #440]	; (80052ac <update_ScurveTraj+0x8c4>)
 80050f4:	ed93 6b00 	vldr	d6, [r3]
 80050f8:	4b6d      	ldr	r3, [pc, #436]	; (80052b0 <update_ScurveTraj+0x8c8>)
 80050fa:	ed93 7b00 	vldr	d7, [r3]
 80050fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005102:	ed97 7b02 	vldr	d7, [r7, #8]
 8005106:	ee26 8b07 	vmul.f64	d8, d6, d7
 800510a:	4b68      	ldr	r3, [pc, #416]	; (80052ac <update_ScurveTraj+0x8c4>)
 800510c:	ed93 6b00 	vldr	d6, [r3]
 8005110:	4b67      	ldr	r3, [pc, #412]	; (80052b0 <update_ScurveTraj+0x8c8>)
 8005112:	ed93 7b00 	vldr	d7, [r3]
 8005116:	ee36 7b47 	vsub.f64	d7, d6, d7
 800511a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800511e:	eeb0 0b47 	vmov.f64	d0, d7
 8005122:	f00b fb75 	bl	8010810 <pow>
 8005126:	eeb0 6b40 	vmov.f64	d6, d0
 800512a:	ed97 7b02 	vldr	d7, [r7, #8]
 800512e:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005132:	ed97 6b08 	vldr	d6, [r7, #32]
 8005136:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800513a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800513e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005142:	eeb0 0b47 	vmov.f64	d0, d7
 8005146:	f00b fb63 	bl	8010810 <pow>
 800514a:	eeb0 5b40 	vmov.f64	d5, d0
 800514e:	ed97 6b08 	vldr	d6, [r7, #32]
 8005152:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005156:	ee36 7b47 	vsub.f64	d7, d6, d7
 800515a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800515e:	ee39 6b07 	vadd.f64	d6, d9, d7
 8005162:	ed97 7b02 	vldr	d7, [r7, #8]
 8005166:	ee26 7b07 	vmul.f64	d7, d6, d7
 800516a:	eeb0 0b47 	vmov.f64	d0, d7
 800516e:	f00b fdcf 	bl	8010d10 <sqrt>
 8005172:	eeb0 7b40 	vmov.f64	d7, d0
 8005176:	ee38 5b47 	vsub.f64	d5, d8, d7
 800517a:	ed97 6b08 	vldr	d6, [r7, #32]
 800517e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005182:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005186:	ed97 7b02 	vldr	d7, [r7, #8]
 800518a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800518e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005192:	4b4c      	ldr	r3, [pc, #304]	; (80052c4 <update_ScurveTraj+0x8dc>)
 8005194:	ed83 7b00 	vstr	d7, [r3]
					break;
 8005198:	e0c2      	b.n	8005320 <update_ScurveTraj+0x938>
				}
				if (Td<0){
 800519a:	4b48      	ldr	r3, [pc, #288]	; (80052bc <update_ScurveTraj+0x8d4>)
 800519c:	ed93 7b00 	vldr	d7, [r3]
 80051a0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80051a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a8:	d400      	bmi.n	80051ac <update_ScurveTraj+0x7c4>
 80051aa:	e08d      	b.n	80052c8 <update_ScurveTraj+0x8e0>
					Td=0;
 80051ac:	4943      	ldr	r1, [pc, #268]	; (80052bc <update_ScurveTraj+0x8d4>)
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 80051ba:	4b3c      	ldr	r3, [pc, #240]	; (80052ac <update_ScurveTraj+0x8c4>)
 80051bc:	ed93 6b00 	vldr	d6, [r3]
 80051c0:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <update_ScurveTraj+0x8c8>)
 80051c2:	ed93 7b00 	vldr	d7, [r3]
 80051c6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80051ca:	ed97 6b08 	vldr	d6, [r7, #32]
 80051ce:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80051d2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80051d6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80051da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80051de:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <update_ScurveTraj+0x8d0>)
 80051e0:	ed83 7b00 	vstr	d7, [r3]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 80051e4:	4b31      	ldr	r3, [pc, #196]	; (80052ac <update_ScurveTraj+0x8c4>)
 80051e6:	ed93 6b00 	vldr	d6, [r3]
 80051ea:	4b31      	ldr	r3, [pc, #196]	; (80052b0 <update_ScurveTraj+0x8c8>)
 80051ec:	ed93 7b00 	vldr	d7, [r3]
 80051f0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80051f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80051f8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80051fc:	4b2b      	ldr	r3, [pc, #172]	; (80052ac <update_ScurveTraj+0x8c4>)
 80051fe:	ed93 6b00 	vldr	d6, [r3]
 8005202:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <update_ScurveTraj+0x8c8>)
 8005204:	ed93 7b00 	vldr	d7, [r3]
 8005208:	ee36 7b47 	vsub.f64	d7, d6, d7
 800520c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005210:	eeb0 0b47 	vmov.f64	d0, d7
 8005214:	f00b fafc 	bl	8010810 <pow>
 8005218:	eeb0 6b40 	vmov.f64	d6, d0
 800521c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005220:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005224:	ed97 6b08 	vldr	d6, [r7, #32]
 8005228:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800522c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005230:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005234:	eeb0 0b47 	vmov.f64	d0, d7
 8005238:	f00b faea 	bl	8010810 <pow>
 800523c:	eeb0 5b40 	vmov.f64	d5, d0
 8005240:	ed97 6b08 	vldr	d6, [r7, #32]
 8005244:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005248:	ee36 7b47 	vsub.f64	d7, d6, d7
 800524c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005250:	ee39 6b47 	vsub.f64	d6, d9, d7
 8005254:	ed97 7b02 	vldr	d7, [r7, #8]
 8005258:	ee26 7b07 	vmul.f64	d7, d6, d7
 800525c:	eeb0 0b47 	vmov.f64	d0, d7
 8005260:	f00b fd56 	bl	8010d10 <sqrt>
 8005264:	eeb0 7b40 	vmov.f64	d7, d0
 8005268:	ee38 5b47 	vsub.f64	d5, d8, d7
 800526c:	ed97 6b08 	vldr	d6, [r7, #32]
 8005270:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005274:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005278:	ed97 7b02 	vldr	d7, [r7, #8]
 800527c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005280:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005284:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <update_ScurveTraj+0x8d8>)
 8005286:	ed83 7b00 	vstr	d7, [r3]
					Tj2=0;
 800528a:	490e      	ldr	r1, [pc, #56]	; (80052c4 <update_ScurveTraj+0x8dc>)
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8005298:	e042      	b.n	8005320 <update_ScurveTraj+0x938>
 800529a:	bf00      	nop
 800529c:	f3af 8000 	nop.w
 80052a0:	7ae147ae 	.word	0x7ae147ae
 80052a4:	3fefae14 	.word	0x3fefae14
 80052a8:	24000828 	.word	0x24000828
 80052ac:	24000840 	.word	0x24000840
 80052b0:	24000838 	.word	0x24000838
 80052b4:	24000830 	.word	0x24000830
 80052b8:	24000800 	.word	0x24000800
 80052bc:	24000808 	.word	0x24000808
 80052c0:	24000818 	.word	0x24000818
 80052c4:	24000820 	.word	0x24000820
			while (!(Ta>2*Tj && Td>2*Tj)){
 80052c8:	4b33      	ldr	r3, [pc, #204]	; (8005398 <update_ScurveTraj+0x9b0>)
 80052ca:	ed93 7b00 	vldr	d7, [r3]
 80052ce:	ee37 6b07 	vadd.f64	d6, d7, d7
 80052d2:	4b32      	ldr	r3, [pc, #200]	; (800539c <update_ScurveTraj+0x9b4>)
 80052d4:	ed93 7b00 	vldr	d7, [r3]
 80052d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80052dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e0:	bf4c      	ite	mi
 80052e2:	2301      	movmi	r3, #1
 80052e4:	2300      	movpl	r3, #0
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f083 0301 	eor.w	r3, r3, #1
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f47f ae28 	bne.w	8004f44 <update_ScurveTraj+0x55c>
 80052f4:	4b28      	ldr	r3, [pc, #160]	; (8005398 <update_ScurveTraj+0x9b0>)
 80052f6:	ed93 7b00 	vldr	d7, [r3]
 80052fa:	ee37 6b07 	vadd.f64	d6, d7, d7
 80052fe:	4b28      	ldr	r3, [pc, #160]	; (80053a0 <update_ScurveTraj+0x9b8>)
 8005300:	ed93 7b00 	vldr	d7, [r3]
 8005304:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530c:	bf4c      	ite	mi
 800530e:	2301      	movmi	r3, #1
 8005310:	2300      	movpl	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f083 0301 	eor.w	r3, r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	f47f ae12 	bne.w	8004f44 <update_ScurveTraj+0x55c>
				}
			}
		}
	}

	*(params)=Tj1;
 8005320:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <update_ScurveTraj+0x9bc>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f103 0108 	add.w	r1, r3, #8
 8005332:	4b1d      	ldr	r3, [pc, #116]	; (80053a8 <update_ScurveTraj+0x9c0>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f103 0110 	add.w	r1, r3, #16
 8005342:	4b15      	ldr	r3, [pc, #84]	; (8005398 <update_ScurveTraj+0x9b0>)
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f103 0118 	add.w	r1, r3, #24
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <update_ScurveTraj+0x9b4>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f103 0120 	add.w	r1, r3, #32
 8005362:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <update_ScurveTraj+0x9b8>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005372:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <update_ScurveTraj+0x9c4>)
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005382:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <update_ScurveTraj+0x9c8>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	e9c1 2300 	strd	r2, r3, [r1]

}
 800538c:	bf00      	nop
 800538e:	3748      	adds	r7, #72	; 0x48
 8005390:	46bd      	mov	sp, r7
 8005392:	ecbd 8b04 	vpop	{d8-d9}
 8005396:	bd80      	pop	{r7, pc}
 8005398:	24000828 	.word	0x24000828
 800539c:	24000800 	.word	0x24000800
 80053a0:	24000808 	.word	0x24000808
 80053a4:	24000818 	.word	0x24000818
 80053a8:	24000820 	.word	0x24000820
 80053ac:	24000810 	.word	0x24000810
 80053b0:	240007f8 	.word	0x240007f8
 80053b4:	00000000 	.word	0x00000000

080053b8 <setProfilTimer>:


void setProfilTimer(void){
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 80053bc:	4ba2      	ldr	r3, [pc, #648]	; (8005648 <setProfilTimer+0x290>)
 80053be:	ed93 7b04 	vldr	d7, [r3, #16]
 80053c2:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8005628 <setProfilTimer+0x270>
 80053c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053ca:	4b9f      	ldr	r3, [pc, #636]	; (8005648 <setProfilTimer+0x290>)
 80053cc:	ed83 7b06 	vstr	d7, [r3, #24]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 80053d0:	4b9e      	ldr	r3, [pc, #632]	; (800564c <setProfilTimer+0x294>)
 80053d2:	ed93 7b04 	vldr	d7, [r3, #16]
 80053d6:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8005628 <setProfilTimer+0x270>
 80053da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053de:	4b9b      	ldr	r3, [pc, #620]	; (800564c <setProfilTimer+0x294>)
 80053e0:	ed83 7b06 	vstr	d7, [r3, #24]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 80053e4:	4b9a      	ldr	r3, [pc, #616]	; (8005650 <setProfilTimer+0x298>)
 80053e6:	ed93 7b04 	vldr	d7, [r3, #16]
 80053ea:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8005628 <setProfilTimer+0x270>
 80053ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053f2:	4b97      	ldr	r3, [pc, #604]	; (8005650 <setProfilTimer+0x298>)
 80053f4:	ed83 7b06 	vstr	d7, [r3, #24]
	//_rpm1 = 12.0;
	//_rpm2 = 12.0 ;
	//_rpm3 = 12.0;

	//Escritura del registro ARR
	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(motor1.rpm));
 80053f8:	4b96      	ldr	r3, [pc, #600]	; (8005654 <setProfilTimer+0x29c>)
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	ee07 3a90 	vmov	s15, r3
 8005400:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005404:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005408:	ee37 7b06 	vadd.f64	d7, d7, d6
 800540c:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8005630 <setProfilTimer+0x278>
 8005410:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005414:	4b8c      	ldr	r3, [pc, #560]	; (8005648 <setProfilTimer+0x290>)
 8005416:	ed93 7b06 	vldr	d7, [r3, #24]
 800541a:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8005638 <setProfilTimer+0x280>
 800541e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005422:	ed9f 4b87 	vldr	d4, [pc, #540]	; 8005640 <setProfilTimer+0x288>
 8005426:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800542a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800542e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005432:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005436:	4b88      	ldr	r3, [pc, #544]	; (8005658 <setProfilTimer+0x2a0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800543e:	ee17 2a90 	vmov	r2, s15
 8005442:	62da      	str	r2, [r3, #44]	; 0x2c
 8005444:	4b83      	ldr	r3, [pc, #524]	; (8005654 <setProfilTimer+0x29c>)
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	ee07 3a90 	vmov	s15, r3
 800544c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005450:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005454:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005458:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8005630 <setProfilTimer+0x278>
 800545c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005460:	4b79      	ldr	r3, [pc, #484]	; (8005648 <setProfilTimer+0x290>)
 8005462:	ed93 7b06 	vldr	d7, [r3, #24]
 8005466:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8005638 <setProfilTimer+0x280>
 800546a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800546e:	ed9f 4b74 	vldr	d4, [pc, #464]	; 8005640 <setProfilTimer+0x288>
 8005472:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005476:	ee26 7b07 	vmul.f64	d7, d6, d7
 800547a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800547e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005482:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005486:	ee17 2a90 	vmov	r2, s15
 800548a:	4b73      	ldr	r3, [pc, #460]	; (8005658 <setProfilTimer+0x2a0>)
 800548c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(motor2.rpm));
 800548e:	4b71      	ldr	r3, [pc, #452]	; (8005654 <setProfilTimer+0x29c>)
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800549a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800549e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80054a2:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8005630 <setProfilTimer+0x278>
 80054a6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80054aa:	4b68      	ldr	r3, [pc, #416]	; (800564c <setProfilTimer+0x294>)
 80054ac:	ed93 7b06 	vldr	d7, [r3, #24]
 80054b0:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8005638 <setProfilTimer+0x280>
 80054b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80054b8:	ed9f 4b61 	vldr	d4, [pc, #388]	; 8005640 <setProfilTimer+0x288>
 80054bc:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80054c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80054c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80054c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80054cc:	4b63      	ldr	r3, [pc, #396]	; (800565c <setProfilTimer+0x2a4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80054d4:	ee17 2a90 	vmov	r2, s15
 80054d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80054da:	4b5e      	ldr	r3, [pc, #376]	; (8005654 <setProfilTimer+0x29c>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80054e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80054ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80054ee:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8005630 <setProfilTimer+0x278>
 80054f2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80054f6:	4b55      	ldr	r3, [pc, #340]	; (800564c <setProfilTimer+0x294>)
 80054f8:	ed93 7b06 	vldr	d7, [r3, #24]
 80054fc:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8005638 <setProfilTimer+0x280>
 8005500:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005504:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 8005640 <setProfilTimer+0x288>
 8005508:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800550c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005510:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005514:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005518:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800551c:	ee17 2a90 	vmov	r2, s15
 8005520:	4b4e      	ldr	r3, [pc, #312]	; (800565c <setProfilTimer+0x2a4>)
 8005522:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(motor3.rpm));
 8005524:	4b4b      	ldr	r3, [pc, #300]	; (8005654 <setProfilTimer+0x29c>)
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	ee07 3a90 	vmov	s15, r3
 800552c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005530:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005534:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005538:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8005630 <setProfilTimer+0x278>
 800553c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005540:	4b43      	ldr	r3, [pc, #268]	; (8005650 <setProfilTimer+0x298>)
 8005542:	ed93 7b06 	vldr	d7, [r3, #24]
 8005546:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8005638 <setProfilTimer+0x280>
 800554a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800554e:	ed9f 4b3c 	vldr	d4, [pc, #240]	; 8005640 <setProfilTimer+0x288>
 8005552:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005556:	ee26 7b07 	vmul.f64	d7, d6, d7
 800555a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800555e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005562:	4b3f      	ldr	r3, [pc, #252]	; (8005660 <setProfilTimer+0x2a8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800556a:	ee17 2a90 	vmov	r2, s15
 800556e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005570:	4b38      	ldr	r3, [pc, #224]	; (8005654 <setProfilTimer+0x29c>)
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800557c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005580:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005584:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8005630 <setProfilTimer+0x278>
 8005588:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800558c:	4b30      	ldr	r3, [pc, #192]	; (8005650 <setProfilTimer+0x298>)
 800558e:	ed93 7b06 	vldr	d7, [r3, #24]
 8005592:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8005638 <setProfilTimer+0x280>
 8005596:	ee27 5b05 	vmul.f64	d5, d7, d5
 800559a:	ed9f 4b29 	vldr	d4, [pc, #164]	; 8005640 <setProfilTimer+0x288>
 800559e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80055a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80055a6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80055aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80055b2:	ee17 2a90 	vmov	r2, s15
 80055b6:	4b2a      	ldr	r3, [pc, #168]	; (8005660 <setProfilTimer+0x2a8>)
 80055b8:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 80055ba:	4b26      	ldr	r3, [pc, #152]	; (8005654 <setProfilTimer+0x29c>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80055c6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80055ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80055ce:	4b21      	ldr	r3, [pc, #132]	; (8005654 <setProfilTimer+0x29c>)
 80055d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80055d4:	ee17 2a90 	vmov	r2, s15
 80055d8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 80055da:	4b22      	ldr	r3, [pc, #136]	; (8005664 <setProfilTimer+0x2ac>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80055e6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80055ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80055ee:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <setProfilTimer+0x2ac>)
 80055f0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80055f4:	ee17 2a90 	vmov	r2, s15
 80055f8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80055fa:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <setProfilTimer+0x2b0>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8005606:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800560a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800560e:	4b16      	ldr	r3, [pc, #88]	; (8005668 <setProfilTimer+0x2b0>)
 8005610:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005614:	ee17 2a90 	vmov	r2, s15
 8005618:	635a      	str	r2, [r3, #52]	; 0x34
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		*/


}
 800561a:	bf00      	nop
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	f3af 8000 	nop.w
 8005628:	66ed2a99 	.word	0x66ed2a99
 800562c:	4023193d 	.word	0x4023193d
 8005630:	00000000 	.word	0x00000000
 8005634:	418e8480 	.word	0x418e8480
 8005638:	00000000 	.word	0x00000000
 800563c:	40bf4000 	.word	0x40bf4000
 8005640:	00000000 	.word	0x00000000
 8005644:	404e0000 	.word	0x404e0000
 8005648:	24000358 	.word	0x24000358
 800564c:	24000398 	.word	0x24000398
 8005650:	240003d8 	.word	0x240003d8
 8005654:	40001800 	.word	0x40001800
 8005658:	240006a8 	.word	0x240006a8
 800565c:	240006f4 	.word	0x240006f4
 8005660:	24000740 	.word	0x24000740
 8005664:	40001c00 	.word	0x40001c00
 8005668:	40002000 	.word	0x40002000

0800566c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005670:	4b22      	ldr	r3, [pc, #136]	; (80056fc <MX_USART1_UART_Init+0x90>)
 8005672:	4a23      	ldr	r2, [pc, #140]	; (8005700 <MX_USART1_UART_Init+0x94>)
 8005674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005676:	4b21      	ldr	r3, [pc, #132]	; (80056fc <MX_USART1_UART_Init+0x90>)
 8005678:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800567c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800567e:	4b1f      	ldr	r3, [pc, #124]	; (80056fc <MX_USART1_UART_Init+0x90>)
 8005680:	2200      	movs	r2, #0
 8005682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <MX_USART1_UART_Init+0x90>)
 8005686:	2200      	movs	r2, #0
 8005688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800568a:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <MX_USART1_UART_Init+0x90>)
 800568c:	2200      	movs	r2, #0
 800568e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005690:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <MX_USART1_UART_Init+0x90>)
 8005692:	220c      	movs	r2, #12
 8005694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005696:	4b19      	ldr	r3, [pc, #100]	; (80056fc <MX_USART1_UART_Init+0x90>)
 8005698:	2200      	movs	r2, #0
 800569a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800569c:	4b17      	ldr	r3, [pc, #92]	; (80056fc <MX_USART1_UART_Init+0x90>)
 800569e:	2200      	movs	r2, #0
 80056a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056a2:	4b16      	ldr	r3, [pc, #88]	; (80056fc <MX_USART1_UART_Init+0x90>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80056a8:	4b14      	ldr	r3, [pc, #80]	; (80056fc <MX_USART1_UART_Init+0x90>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056ae:	4b13      	ldr	r3, [pc, #76]	; (80056fc <MX_USART1_UART_Init+0x90>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80056b4:	4811      	ldr	r0, [pc, #68]	; (80056fc <MX_USART1_UART_Init+0x90>)
 80056b6:	f005 fe81 	bl	800b3bc <HAL_UART_Init>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80056c0:	f7fd fb4e 	bl	8002d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056c4:	2100      	movs	r1, #0
 80056c6:	480d      	ldr	r0, [pc, #52]	; (80056fc <MX_USART1_UART_Init+0x90>)
 80056c8:	f008 f90b 	bl	800d8e2 <HAL_UARTEx_SetTxFifoThreshold>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80056d2:	f7fd fb45 	bl	8002d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056d6:	2100      	movs	r1, #0
 80056d8:	4808      	ldr	r0, [pc, #32]	; (80056fc <MX_USART1_UART_Init+0x90>)
 80056da:	f008 f940 	bl	800d95e <HAL_UARTEx_SetRxFifoThreshold>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80056e4:	f7fd fb3c 	bl	8002d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80056e8:	4804      	ldr	r0, [pc, #16]	; (80056fc <MX_USART1_UART_Init+0x90>)
 80056ea:	f008 f8c1 	bl	800d870 <HAL_UARTEx_DisableFifoMode>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80056f4:	f7fd fb34 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80056f8:	bf00      	nop
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	24000848 	.word	0x24000848
 8005700:	40011000 	.word	0x40011000

08005704 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005708:	4b22      	ldr	r3, [pc, #136]	; (8005794 <MX_USART2_UART_Init+0x90>)
 800570a:	4a23      	ldr	r2, [pc, #140]	; (8005798 <MX_USART2_UART_Init+0x94>)
 800570c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800570e:	4b21      	ldr	r3, [pc, #132]	; (8005794 <MX_USART2_UART_Init+0x90>)
 8005710:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005716:	4b1f      	ldr	r3, [pc, #124]	; (8005794 <MX_USART2_UART_Init+0x90>)
 8005718:	2200      	movs	r2, #0
 800571a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800571c:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <MX_USART2_UART_Init+0x90>)
 800571e:	2200      	movs	r2, #0
 8005720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005722:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <MX_USART2_UART_Init+0x90>)
 8005724:	2200      	movs	r2, #0
 8005726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005728:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <MX_USART2_UART_Init+0x90>)
 800572a:	220c      	movs	r2, #12
 800572c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800572e:	4b19      	ldr	r3, [pc, #100]	; (8005794 <MX_USART2_UART_Init+0x90>)
 8005730:	2200      	movs	r2, #0
 8005732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005734:	4b17      	ldr	r3, [pc, #92]	; (8005794 <MX_USART2_UART_Init+0x90>)
 8005736:	2200      	movs	r2, #0
 8005738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800573a:	4b16      	ldr	r3, [pc, #88]	; (8005794 <MX_USART2_UART_Init+0x90>)
 800573c:	2200      	movs	r2, #0
 800573e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005740:	4b14      	ldr	r3, [pc, #80]	; (8005794 <MX_USART2_UART_Init+0x90>)
 8005742:	2200      	movs	r2, #0
 8005744:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005746:	4b13      	ldr	r3, [pc, #76]	; (8005794 <MX_USART2_UART_Init+0x90>)
 8005748:	2200      	movs	r2, #0
 800574a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800574c:	4811      	ldr	r0, [pc, #68]	; (8005794 <MX_USART2_UART_Init+0x90>)
 800574e:	f005 fe35 	bl	800b3bc <HAL_UART_Init>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005758:	f7fd fb02 	bl	8002d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800575c:	2100      	movs	r1, #0
 800575e:	480d      	ldr	r0, [pc, #52]	; (8005794 <MX_USART2_UART_Init+0x90>)
 8005760:	f008 f8bf 	bl	800d8e2 <HAL_UARTEx_SetTxFifoThreshold>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800576a:	f7fd faf9 	bl	8002d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800576e:	2100      	movs	r1, #0
 8005770:	4808      	ldr	r0, [pc, #32]	; (8005794 <MX_USART2_UART_Init+0x90>)
 8005772:	f008 f8f4 	bl	800d95e <HAL_UARTEx_SetRxFifoThreshold>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800577c:	f7fd faf0 	bl	8002d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005780:	4804      	ldr	r0, [pc, #16]	; (8005794 <MX_USART2_UART_Init+0x90>)
 8005782:	f008 f875 	bl	800d870 <HAL_UARTEx_DisableFifoMode>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800578c:	f7fd fae8 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005790:	bf00      	nop
 8005792:	bd80      	pop	{r7, pc}
 8005794:	240008d8 	.word	0x240008d8
 8005798:	40004400 	.word	0x40004400

0800579c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80057a0:	4b22      	ldr	r3, [pc, #136]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057a2:	4a23      	ldr	r2, [pc, #140]	; (8005830 <MX_USART3_UART_Init+0x94>)
 80057a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80057a6:	4b21      	ldr	r3, [pc, #132]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80057ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80057ae:	4b1f      	ldr	r3, [pc, #124]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80057b4:	4b1d      	ldr	r3, [pc, #116]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80057ba:	4b1c      	ldr	r3, [pc, #112]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057bc:	2200      	movs	r2, #0
 80057be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057c2:	220c      	movs	r2, #12
 80057c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057c6:	4b19      	ldr	r3, [pc, #100]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80057cc:	4b17      	ldr	r3, [pc, #92]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057d2:	4b16      	ldr	r3, [pc, #88]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80057d8:	4b14      	ldr	r3, [pc, #80]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057da:	2200      	movs	r2, #0
 80057dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80057e4:	4811      	ldr	r0, [pc, #68]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057e6:	f005 fde9 	bl	800b3bc <HAL_UART_Init>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80057f0:	f7fd fab6 	bl	8002d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057f4:	2100      	movs	r1, #0
 80057f6:	480d      	ldr	r0, [pc, #52]	; (800582c <MX_USART3_UART_Init+0x90>)
 80057f8:	f008 f873 	bl	800d8e2 <HAL_UARTEx_SetTxFifoThreshold>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005802:	f7fd faad 	bl	8002d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005806:	2100      	movs	r1, #0
 8005808:	4808      	ldr	r0, [pc, #32]	; (800582c <MX_USART3_UART_Init+0x90>)
 800580a:	f008 f8a8 	bl	800d95e <HAL_UARTEx_SetRxFifoThreshold>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005814:	f7fd faa4 	bl	8002d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005818:	4804      	ldr	r0, [pc, #16]	; (800582c <MX_USART3_UART_Init+0x90>)
 800581a:	f008 f829 	bl	800d870 <HAL_UARTEx_DisableFifoMode>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005824:	f7fd fa9c 	bl	8002d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005828:	bf00      	nop
 800582a:	bd80      	pop	{r7, pc}
 800582c:	24000968 	.word	0x24000968
 8005830:	40004800 	.word	0x40004800

08005834 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b0be      	sub	sp, #248	; 0xf8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800583c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	60da      	str	r2, [r3, #12]
 800584a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800584c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005850:	22bc      	movs	r2, #188	; 0xbc
 8005852:	2100      	movs	r1, #0
 8005854:	4618      	mov	r0, r3
 8005856:	f008 f939 	bl	800dacc <memset>
  if(uartHandle->Instance==USART1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a84      	ldr	r2, [pc, #528]	; (8005a70 <HAL_UART_MspInit+0x23c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d168      	bne.n	8005936 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005864:	2301      	movs	r3, #1
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800586e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005872:	4618      	mov	r0, r3
 8005874:	f002 fa8c 	bl	8007d90 <HAL_RCCEx_PeriphCLKConfig>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800587e:	f7fd fa6f 	bl	8002d60 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005882:	4b7c      	ldr	r3, [pc, #496]	; (8005a74 <HAL_UART_MspInit+0x240>)
 8005884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005888:	4a7a      	ldr	r2, [pc, #488]	; (8005a74 <HAL_UART_MspInit+0x240>)
 800588a:	f043 0310 	orr.w	r3, r3, #16
 800588e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005892:	4b78      	ldr	r3, [pc, #480]	; (8005a74 <HAL_UART_MspInit+0x240>)
 8005894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a0:	4b74      	ldr	r3, [pc, #464]	; (8005a74 <HAL_UART_MspInit+0x240>)
 80058a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058a6:	4a73      	ldr	r2, [pc, #460]	; (8005a74 <HAL_UART_MspInit+0x240>)
 80058a8:	f043 0302 	orr.w	r3, r3, #2
 80058ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80058b0:	4b70      	ldr	r3, [pc, #448]	; (8005a74 <HAL_UART_MspInit+0x240>)
 80058b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058be:	4b6d      	ldr	r3, [pc, #436]	; (8005a74 <HAL_UART_MspInit+0x240>)
 80058c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058c4:	4a6b      	ldr	r2, [pc, #428]	; (8005a74 <HAL_UART_MspInit+0x240>)
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80058ce:	4b69      	ldr	r3, [pc, #420]	; (8005a74 <HAL_UART_MspInit+0x240>)
 80058d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
 80058da:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 80058dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058e4:	2302      	movs	r3, #2
 80058e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058f0:	2300      	movs	r3, #0
 80058f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80058f6:	2304      	movs	r3, #4
 80058f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 80058fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005900:	4619      	mov	r1, r3
 8005902:	485d      	ldr	r0, [pc, #372]	; (8005a78 <HAL_UART_MspInit+0x244>)
 8005904:	f001 f854 	bl	80069b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8005908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800590c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005910:	2302      	movs	r3, #2
 8005912:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005916:	2300      	movs	r3, #0
 8005918:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800591c:	2300      	movs	r3, #0
 800591e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005922:	2307      	movs	r3, #7
 8005924:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8005928:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800592c:	4619      	mov	r1, r3
 800592e:	4853      	ldr	r0, [pc, #332]	; (8005a7c <HAL_UART_MspInit+0x248>)
 8005930:	f001 f83e 	bl	80069b0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005934:	e097      	b.n	8005a66 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a51      	ldr	r2, [pc, #324]	; (8005a80 <HAL_UART_MspInit+0x24c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d142      	bne.n	80059c6 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005940:	2302      	movs	r3, #2
 8005942:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005944:	2300      	movs	r3, #0
 8005946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800594a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800594e:	4618      	mov	r0, r3
 8005950:	f002 fa1e 	bl	8007d90 <HAL_RCCEx_PeriphCLKConfig>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_UART_MspInit+0x12a>
      Error_Handler();
 800595a:	f7fd fa01 	bl	8002d60 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800595e:	4b45      	ldr	r3, [pc, #276]	; (8005a74 <HAL_UART_MspInit+0x240>)
 8005960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005964:	4a43      	ldr	r2, [pc, #268]	; (8005a74 <HAL_UART_MspInit+0x240>)
 8005966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800596e:	4b41      	ldr	r3, [pc, #260]	; (8005a74 <HAL_UART_MspInit+0x240>)
 8005970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800597c:	4b3d      	ldr	r3, [pc, #244]	; (8005a74 <HAL_UART_MspInit+0x240>)
 800597e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005982:	4a3c      	ldr	r2, [pc, #240]	; (8005a74 <HAL_UART_MspInit+0x240>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800598c:	4b39      	ldr	r3, [pc, #228]	; (8005a74 <HAL_UART_MspInit+0x240>)
 800598e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 800599a:	230c      	movs	r3, #12
 800599c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a0:	2302      	movs	r3, #2
 80059a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ac:	2300      	movs	r3, #0
 80059ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80059b2:	2307      	movs	r3, #7
 80059b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80059bc:	4619      	mov	r1, r3
 80059be:	482f      	ldr	r0, [pc, #188]	; (8005a7c <HAL_UART_MspInit+0x248>)
 80059c0:	f000 fff6 	bl	80069b0 <HAL_GPIO_Init>
}
 80059c4:	e04f      	b.n	8005a66 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a2e      	ldr	r2, [pc, #184]	; (8005a84 <HAL_UART_MspInit+0x250>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d14a      	bne.n	8005a66 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80059d0:	2302      	movs	r3, #2
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059de:	4618      	mov	r0, r3
 80059e0:	f002 f9d6 	bl	8007d90 <HAL_RCCEx_PeriphCLKConfig>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 80059ea:	f7fd f9b9 	bl	8002d60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059ee:	4b21      	ldr	r3, [pc, #132]	; (8005a74 <HAL_UART_MspInit+0x240>)
 80059f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059f4:	4a1f      	ldr	r2, [pc, #124]	; (8005a74 <HAL_UART_MspInit+0x240>)
 80059f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059fe:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <HAL_UART_MspInit+0x240>)
 8005a00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a0c:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <HAL_UART_MspInit+0x240>)
 8005a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a12:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <HAL_UART_MspInit+0x240>)
 8005a14:	f043 0308 	orr.w	r3, r3, #8
 8005a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a1c:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <HAL_UART_MspInit+0x240>)
 8005a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8005a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a32:	2302      	movs	r3, #2
 8005a34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a44:	2307      	movs	r3, #7
 8005a46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a4a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005a4e:	4619      	mov	r1, r3
 8005a50:	480d      	ldr	r0, [pc, #52]	; (8005a88 <HAL_UART_MspInit+0x254>)
 8005a52:	f000 ffad 	bl	80069b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8005a56:	2201      	movs	r2, #1
 8005a58:	2101      	movs	r1, #1
 8005a5a:	2027      	movs	r0, #39	; 0x27
 8005a5c:	f000 fa01 	bl	8005e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a60:	2027      	movs	r0, #39	; 0x27
 8005a62:	f000 fa18 	bl	8005e96 <HAL_NVIC_EnableIRQ>
}
 8005a66:	bf00      	nop
 8005a68:	37f8      	adds	r7, #248	; 0xf8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40011000 	.word	0x40011000
 8005a74:	58024400 	.word	0x58024400
 8005a78:	58020400 	.word	0x58020400
 8005a7c:	58020000 	.word	0x58020000
 8005a80:	40004400 	.word	0x40004400
 8005a84:	40004800 	.word	0x40004800
 8005a88:	58020c00 	.word	0x58020c00

08005a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ac4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005a90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005a92:	e003      	b.n	8005a9c <LoopCopyDataInit>

08005a94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005a96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005a98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005a9a:	3104      	adds	r1, #4

08005a9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005a9c:	480b      	ldr	r0, [pc, #44]	; (8005acc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005aa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005aa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005aa4:	d3f6      	bcc.n	8005a94 <CopyDataInit>
  ldr  r2, =_sbss
 8005aa6:	4a0b      	ldr	r2, [pc, #44]	; (8005ad4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005aa8:	e002      	b.n	8005ab0 <LoopFillZerobss>

08005aaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005aaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005aac:	f842 3b04 	str.w	r3, [r2], #4

08005ab0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ab0:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ab2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ab4:	d3f9      	bcc.n	8005aaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005ab6:	f7fd fbb5 	bl	8003224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aba:	f007 ffe3 	bl	800da84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005abe:	f7fc fce3 	bl	8002488 <main>
  bx  lr    
 8005ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005ac4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8005ac8:	08012de0 	.word	0x08012de0
  ldr  r0, =_sdata
 8005acc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8005ad0:	24000250 	.word	0x24000250
  ldr  r2, =_sbss
 8005ad4:	24000250 	.word	0x24000250
  ldr  r3, = _ebss
 8005ad8:	24000a0c 	.word	0x24000a0c

08005adc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005adc:	e7fe      	b.n	8005adc <ADC3_IRQHandler>
	...

08005ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ae6:	2003      	movs	r0, #3
 8005ae8:	f000 f9b0 	bl	8005e4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005aec:	f001 ff7a 	bl	80079e4 <HAL_RCC_GetSysClockFreq>
 8005af0:	4602      	mov	r2, r0
 8005af2:	4b15      	ldr	r3, [pc, #84]	; (8005b48 <HAL_Init+0x68>)
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	4913      	ldr	r1, [pc, #76]	; (8005b4c <HAL_Init+0x6c>)
 8005afe:	5ccb      	ldrb	r3, [r1, r3]
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
 8005b08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b0a:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <HAL_Init+0x68>)
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	4a0e      	ldr	r2, [pc, #56]	; (8005b4c <HAL_Init+0x6c>)
 8005b14:	5cd3      	ldrb	r3, [r2, r3]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b20:	4a0b      	ldr	r2, [pc, #44]	; (8005b50 <HAL_Init+0x70>)
 8005b22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b24:	4a0b      	ldr	r2, [pc, #44]	; (8005b54 <HAL_Init+0x74>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f000 f814 	bl	8005b58 <HAL_InitTick>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e002      	b.n	8005b40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005b3a:	f7fd f9f9 	bl	8002f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	58024400 	.word	0x58024400
 8005b4c:	080110b0 	.word	0x080110b0
 8005b50:	24000070 	.word	0x24000070
 8005b54:	2400006c 	.word	0x2400006c

08005b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005b60:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <HAL_InitTick+0x60>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e021      	b.n	8005bb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <HAL_InitTick+0x64>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <HAL_InitTick+0x60>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	4619      	mov	r1, r3
 8005b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f9a3 	bl	8005ece <HAL_SYSTICK_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e00e      	b.n	8005bb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b0f      	cmp	r3, #15
 8005b96:	d80a      	bhi.n	8005bae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b98:	2200      	movs	r2, #0
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	f000 f95f 	bl	8005e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ba4:	4a06      	ldr	r2, [pc, #24]	; (8005bc0 <HAL_InitTick+0x68>)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	e000      	b.n	8005bb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	24000078 	.word	0x24000078
 8005bbc:	2400006c 	.word	0x2400006c
 8005bc0:	24000074 	.word	0x24000074

08005bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005bc8:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <HAL_IncTick+0x20>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <HAL_IncTick+0x24>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	4a04      	ldr	r2, [pc, #16]	; (8005be8 <HAL_IncTick+0x24>)
 8005bd6:	6013      	str	r3, [r2, #0]
}
 8005bd8:	bf00      	nop
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	24000078 	.word	0x24000078
 8005be8:	240009f8 	.word	0x240009f8

08005bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return uwTick;
 8005bf0:	4b03      	ldr	r3, [pc, #12]	; (8005c00 <HAL_GetTick+0x14>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	240009f8 	.word	0x240009f8

08005c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c0c:	f7ff ffee 	bl	8005bec <HAL_GetTick>
 8005c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d005      	beq.n	8005c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c1e:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <HAL_Delay+0x44>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c2a:	bf00      	nop
 8005c2c:	f7ff ffde 	bl	8005bec <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d8f7      	bhi.n	8005c2c <HAL_Delay+0x28>
  {
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	24000078 	.word	0x24000078

08005c4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005c50:	4b03      	ldr	r3, [pc, #12]	; (8005c60 <HAL_GetREVID+0x14>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	0c1b      	lsrs	r3, r3, #16
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	5c001000 	.word	0x5c001000

08005c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c80:	4013      	ands	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c92:	4a04      	ldr	r2, [pc, #16]	; (8005ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	60d3      	str	r3, [r2, #12]
}
 8005c98:	bf00      	nop
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	e000ed00 	.word	0xe000ed00
 8005ca8:	05fa0000 	.word	0x05fa0000

08005cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cb0:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	0a1b      	lsrs	r3, r3, #8
 8005cb6:	f003 0307 	and.w	r3, r3, #7
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	e000ed00 	.word	0xe000ed00

08005cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	db0b      	blt.n	8005cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	f003 021f 	and.w	r2, r3, #31
 8005ce0:	4907      	ldr	r1, [pc, #28]	; (8005d00 <__NVIC_EnableIRQ+0x38>)
 8005ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2001      	movs	r0, #1
 8005cea:	fa00 f202 	lsl.w	r2, r0, r2
 8005cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	e000e100 	.word	0xe000e100

08005d04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	db12      	blt.n	8005d3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	f003 021f 	and.w	r2, r3, #31
 8005d1c:	490a      	ldr	r1, [pc, #40]	; (8005d48 <__NVIC_DisableIRQ+0x44>)
 8005d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	2001      	movs	r0, #1
 8005d26:	fa00 f202 	lsl.w	r2, r0, r2
 8005d2a:	3320      	adds	r3, #32
 8005d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005d30:	f3bf 8f4f 	dsb	sy
}
 8005d34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d36:	f3bf 8f6f 	isb	sy
}
 8005d3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	e000e100 	.word	0xe000e100

08005d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	6039      	str	r1, [r7, #0]
 8005d56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	db0a      	blt.n	8005d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	490c      	ldr	r1, [pc, #48]	; (8005d98 <__NVIC_SetPriority+0x4c>)
 8005d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d6a:	0112      	lsls	r2, r2, #4
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	440b      	add	r3, r1
 8005d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d74:	e00a      	b.n	8005d8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	4908      	ldr	r1, [pc, #32]	; (8005d9c <__NVIC_SetPriority+0x50>)
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	3b04      	subs	r3, #4
 8005d84:	0112      	lsls	r2, r2, #4
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	440b      	add	r3, r1
 8005d8a:	761a      	strb	r2, [r3, #24]
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	e000e100 	.word	0xe000e100
 8005d9c:	e000ed00 	.word	0xe000ed00

08005da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b089      	sub	sp, #36	; 0x24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	f1c3 0307 	rsb	r3, r3, #7
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	bf28      	it	cs
 8005dbe:	2304      	movcs	r3, #4
 8005dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	2b06      	cmp	r3, #6
 8005dc8:	d902      	bls.n	8005dd0 <NVIC_EncodePriority+0x30>
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	3b03      	subs	r3, #3
 8005dce:	e000      	b.n	8005dd2 <NVIC_EncodePriority+0x32>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	43da      	mvns	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	401a      	ands	r2, r3
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005de8:	f04f 31ff 	mov.w	r1, #4294967295
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	fa01 f303 	lsl.w	r3, r1, r3
 8005df2:	43d9      	mvns	r1, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df8:	4313      	orrs	r3, r2
         );
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3724      	adds	r7, #36	; 0x24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e18:	d301      	bcc.n	8005e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e00f      	b.n	8005e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e1e:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <SysTick_Config+0x40>)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e26:	210f      	movs	r1, #15
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	f7ff ff8e 	bl	8005d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e30:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <SysTick_Config+0x40>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e36:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <SysTick_Config+0x40>)
 8005e38:	2207      	movs	r2, #7
 8005e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	e000e010 	.word	0xe000e010

08005e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ff05 	bl	8005c64 <__NVIC_SetPriorityGrouping>
}
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b086      	sub	sp, #24
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	4603      	mov	r3, r0
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e70:	f7ff ff1c 	bl	8005cac <__NVIC_GetPriorityGrouping>
 8005e74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	6978      	ldr	r0, [r7, #20]
 8005e7c:	f7ff ff90 	bl	8005da0 <NVIC_EncodePriority>
 8005e80:	4602      	mov	r2, r0
 8005e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff ff5f 	bl	8005d4c <__NVIC_SetPriority>
}
 8005e8e:	bf00      	nop
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff ff0f 	bl	8005cc8 <__NVIC_EnableIRQ>
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	4603      	mov	r3, r0
 8005eba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff ff1f 	bl	8005d04 <__NVIC_DisableIRQ>
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff ff96 	bl	8005e08 <SysTick_Config>
 8005edc:	4603      	mov	r3, r0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005ef0:	f7ff fe7c 	bl	8005bec <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e2dc      	b.n	80064ba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d008      	beq.n	8005f1e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2280      	movs	r2, #128	; 0x80
 8005f10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e2cd      	b.n	80064ba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a76      	ldr	r2, [pc, #472]	; (80060fc <HAL_DMA_Abort+0x214>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d04a      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a74      	ldr	r2, [pc, #464]	; (8006100 <HAL_DMA_Abort+0x218>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d045      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a73      	ldr	r2, [pc, #460]	; (8006104 <HAL_DMA_Abort+0x21c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d040      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a71      	ldr	r2, [pc, #452]	; (8006108 <HAL_DMA_Abort+0x220>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d03b      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a70      	ldr	r2, [pc, #448]	; (800610c <HAL_DMA_Abort+0x224>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d036      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a6e      	ldr	r2, [pc, #440]	; (8006110 <HAL_DMA_Abort+0x228>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d031      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a6d      	ldr	r2, [pc, #436]	; (8006114 <HAL_DMA_Abort+0x22c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d02c      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a6b      	ldr	r2, [pc, #428]	; (8006118 <HAL_DMA_Abort+0x230>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d027      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a6a      	ldr	r2, [pc, #424]	; (800611c <HAL_DMA_Abort+0x234>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d022      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a68      	ldr	r2, [pc, #416]	; (8006120 <HAL_DMA_Abort+0x238>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d01d      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a67      	ldr	r2, [pc, #412]	; (8006124 <HAL_DMA_Abort+0x23c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d018      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a65      	ldr	r2, [pc, #404]	; (8006128 <HAL_DMA_Abort+0x240>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d013      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a64      	ldr	r2, [pc, #400]	; (800612c <HAL_DMA_Abort+0x244>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00e      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a62      	ldr	r2, [pc, #392]	; (8006130 <HAL_DMA_Abort+0x248>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d009      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a61      	ldr	r2, [pc, #388]	; (8006134 <HAL_DMA_Abort+0x24c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <HAL_DMA_Abort+0xd6>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a5f      	ldr	r2, [pc, #380]	; (8006138 <HAL_DMA_Abort+0x250>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d101      	bne.n	8005fc2 <HAL_DMA_Abort+0xda>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <HAL_DMA_Abort+0xdc>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d013      	beq.n	8005ff0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 021e 	bic.w	r2, r2, #30
 8005fd6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fe6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e00a      	b.n	8006006 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 020e 	bic.w	r2, r2, #14
 8005ffe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a3c      	ldr	r2, [pc, #240]	; (80060fc <HAL_DMA_Abort+0x214>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d072      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a3a      	ldr	r2, [pc, #232]	; (8006100 <HAL_DMA_Abort+0x218>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d06d      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a39      	ldr	r2, [pc, #228]	; (8006104 <HAL_DMA_Abort+0x21c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d068      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a37      	ldr	r2, [pc, #220]	; (8006108 <HAL_DMA_Abort+0x220>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d063      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a36      	ldr	r2, [pc, #216]	; (800610c <HAL_DMA_Abort+0x224>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d05e      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a34      	ldr	r2, [pc, #208]	; (8006110 <HAL_DMA_Abort+0x228>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d059      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a33      	ldr	r2, [pc, #204]	; (8006114 <HAL_DMA_Abort+0x22c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d054      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a31      	ldr	r2, [pc, #196]	; (8006118 <HAL_DMA_Abort+0x230>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d04f      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a30      	ldr	r2, [pc, #192]	; (800611c <HAL_DMA_Abort+0x234>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d04a      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a2e      	ldr	r2, [pc, #184]	; (8006120 <HAL_DMA_Abort+0x238>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d045      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a2d      	ldr	r2, [pc, #180]	; (8006124 <HAL_DMA_Abort+0x23c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d040      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2b      	ldr	r2, [pc, #172]	; (8006128 <HAL_DMA_Abort+0x240>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d03b      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2a      	ldr	r2, [pc, #168]	; (800612c <HAL_DMA_Abort+0x244>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d036      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a28      	ldr	r2, [pc, #160]	; (8006130 <HAL_DMA_Abort+0x248>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d031      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a27      	ldr	r2, [pc, #156]	; (8006134 <HAL_DMA_Abort+0x24c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d02c      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a25      	ldr	r2, [pc, #148]	; (8006138 <HAL_DMA_Abort+0x250>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d027      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a24      	ldr	r2, [pc, #144]	; (800613c <HAL_DMA_Abort+0x254>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d022      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a22      	ldr	r2, [pc, #136]	; (8006140 <HAL_DMA_Abort+0x258>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01d      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a21      	ldr	r2, [pc, #132]	; (8006144 <HAL_DMA_Abort+0x25c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d018      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a1f      	ldr	r2, [pc, #124]	; (8006148 <HAL_DMA_Abort+0x260>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1e      	ldr	r2, [pc, #120]	; (800614c <HAL_DMA_Abort+0x264>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00e      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <HAL_DMA_Abort+0x268>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d009      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1b      	ldr	r2, [pc, #108]	; (8006154 <HAL_DMA_Abort+0x26c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d004      	beq.n	80060f6 <HAL_DMA_Abort+0x20e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a19      	ldr	r2, [pc, #100]	; (8006158 <HAL_DMA_Abort+0x270>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d132      	bne.n	800615c <HAL_DMA_Abort+0x274>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e031      	b.n	800615e <HAL_DMA_Abort+0x276>
 80060fa:	bf00      	nop
 80060fc:	40020010 	.word	0x40020010
 8006100:	40020028 	.word	0x40020028
 8006104:	40020040 	.word	0x40020040
 8006108:	40020058 	.word	0x40020058
 800610c:	40020070 	.word	0x40020070
 8006110:	40020088 	.word	0x40020088
 8006114:	400200a0 	.word	0x400200a0
 8006118:	400200b8 	.word	0x400200b8
 800611c:	40020410 	.word	0x40020410
 8006120:	40020428 	.word	0x40020428
 8006124:	40020440 	.word	0x40020440
 8006128:	40020458 	.word	0x40020458
 800612c:	40020470 	.word	0x40020470
 8006130:	40020488 	.word	0x40020488
 8006134:	400204a0 	.word	0x400204a0
 8006138:	400204b8 	.word	0x400204b8
 800613c:	58025408 	.word	0x58025408
 8006140:	5802541c 	.word	0x5802541c
 8006144:	58025430 	.word	0x58025430
 8006148:	58025444 	.word	0x58025444
 800614c:	58025458 	.word	0x58025458
 8006150:	5802546c 	.word	0x5802546c
 8006154:	58025480 	.word	0x58025480
 8006158:	58025494 	.word	0x58025494
 800615c:	2300      	movs	r3, #0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006170:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a6d      	ldr	r2, [pc, #436]	; (800632c <HAL_DMA_Abort+0x444>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d04a      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a6b      	ldr	r2, [pc, #428]	; (8006330 <HAL_DMA_Abort+0x448>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d045      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a6a      	ldr	r2, [pc, #424]	; (8006334 <HAL_DMA_Abort+0x44c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d040      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a68      	ldr	r2, [pc, #416]	; (8006338 <HAL_DMA_Abort+0x450>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d03b      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a67      	ldr	r2, [pc, #412]	; (800633c <HAL_DMA_Abort+0x454>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d036      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a65      	ldr	r2, [pc, #404]	; (8006340 <HAL_DMA_Abort+0x458>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d031      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a64      	ldr	r2, [pc, #400]	; (8006344 <HAL_DMA_Abort+0x45c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d02c      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a62      	ldr	r2, [pc, #392]	; (8006348 <HAL_DMA_Abort+0x460>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d027      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a61      	ldr	r2, [pc, #388]	; (800634c <HAL_DMA_Abort+0x464>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d022      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a5f      	ldr	r2, [pc, #380]	; (8006350 <HAL_DMA_Abort+0x468>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d01d      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a5e      	ldr	r2, [pc, #376]	; (8006354 <HAL_DMA_Abort+0x46c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d018      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a5c      	ldr	r2, [pc, #368]	; (8006358 <HAL_DMA_Abort+0x470>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d013      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a5b      	ldr	r2, [pc, #364]	; (800635c <HAL_DMA_Abort+0x474>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00e      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a59      	ldr	r2, [pc, #356]	; (8006360 <HAL_DMA_Abort+0x478>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d009      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a58      	ldr	r2, [pc, #352]	; (8006364 <HAL_DMA_Abort+0x47c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <HAL_DMA_Abort+0x32a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a56      	ldr	r2, [pc, #344]	; (8006368 <HAL_DMA_Abort+0x480>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d108      	bne.n	8006224 <HAL_DMA_Abort+0x33c>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0201 	bic.w	r2, r2, #1
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	e007      	b.n	8006234 <HAL_DMA_Abort+0x34c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0201 	bic.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006234:	e013      	b.n	800625e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006236:	f7ff fcd9 	bl	8005bec <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b05      	cmp	r3, #5
 8006242:	d90c      	bls.n	800625e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2203      	movs	r2, #3
 800624e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e12d      	b.n	80064ba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e5      	bne.n	8006236 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a2f      	ldr	r2, [pc, #188]	; (800632c <HAL_DMA_Abort+0x444>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d04a      	beq.n	800630a <HAL_DMA_Abort+0x422>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a2d      	ldr	r2, [pc, #180]	; (8006330 <HAL_DMA_Abort+0x448>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d045      	beq.n	800630a <HAL_DMA_Abort+0x422>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2c      	ldr	r2, [pc, #176]	; (8006334 <HAL_DMA_Abort+0x44c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d040      	beq.n	800630a <HAL_DMA_Abort+0x422>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2a      	ldr	r2, [pc, #168]	; (8006338 <HAL_DMA_Abort+0x450>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d03b      	beq.n	800630a <HAL_DMA_Abort+0x422>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a29      	ldr	r2, [pc, #164]	; (800633c <HAL_DMA_Abort+0x454>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d036      	beq.n	800630a <HAL_DMA_Abort+0x422>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a27      	ldr	r2, [pc, #156]	; (8006340 <HAL_DMA_Abort+0x458>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d031      	beq.n	800630a <HAL_DMA_Abort+0x422>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a26      	ldr	r2, [pc, #152]	; (8006344 <HAL_DMA_Abort+0x45c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d02c      	beq.n	800630a <HAL_DMA_Abort+0x422>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a24      	ldr	r2, [pc, #144]	; (8006348 <HAL_DMA_Abort+0x460>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d027      	beq.n	800630a <HAL_DMA_Abort+0x422>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a23      	ldr	r2, [pc, #140]	; (800634c <HAL_DMA_Abort+0x464>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d022      	beq.n	800630a <HAL_DMA_Abort+0x422>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a21      	ldr	r2, [pc, #132]	; (8006350 <HAL_DMA_Abort+0x468>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01d      	beq.n	800630a <HAL_DMA_Abort+0x422>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a20      	ldr	r2, [pc, #128]	; (8006354 <HAL_DMA_Abort+0x46c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d018      	beq.n	800630a <HAL_DMA_Abort+0x422>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1e      	ldr	r2, [pc, #120]	; (8006358 <HAL_DMA_Abort+0x470>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <HAL_DMA_Abort+0x422>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1d      	ldr	r2, [pc, #116]	; (800635c <HAL_DMA_Abort+0x474>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00e      	beq.n	800630a <HAL_DMA_Abort+0x422>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1b      	ldr	r2, [pc, #108]	; (8006360 <HAL_DMA_Abort+0x478>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d009      	beq.n	800630a <HAL_DMA_Abort+0x422>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1a      	ldr	r2, [pc, #104]	; (8006364 <HAL_DMA_Abort+0x47c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_DMA_Abort+0x422>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a18      	ldr	r2, [pc, #96]	; (8006368 <HAL_DMA_Abort+0x480>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d101      	bne.n	800630e <HAL_DMA_Abort+0x426>
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <HAL_DMA_Abort+0x428>
 800630e:	2300      	movs	r3, #0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d02b      	beq.n	800636c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	223f      	movs	r2, #63	; 0x3f
 8006324:	409a      	lsls	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	609a      	str	r2, [r3, #8]
 800632a:	e02a      	b.n	8006382 <HAL_DMA_Abort+0x49a>
 800632c:	40020010 	.word	0x40020010
 8006330:	40020028 	.word	0x40020028
 8006334:	40020040 	.word	0x40020040
 8006338:	40020058 	.word	0x40020058
 800633c:	40020070 	.word	0x40020070
 8006340:	40020088 	.word	0x40020088
 8006344:	400200a0 	.word	0x400200a0
 8006348:	400200b8 	.word	0x400200b8
 800634c:	40020410 	.word	0x40020410
 8006350:	40020428 	.word	0x40020428
 8006354:	40020440 	.word	0x40020440
 8006358:	40020458 	.word	0x40020458
 800635c:	40020470 	.word	0x40020470
 8006360:	40020488 	.word	0x40020488
 8006364:	400204a0 	.word	0x400204a0
 8006368:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006370:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	2201      	movs	r2, #1
 800637c:	409a      	lsls	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a4f      	ldr	r2, [pc, #316]	; (80064c4 <HAL_DMA_Abort+0x5dc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d072      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a4d      	ldr	r2, [pc, #308]	; (80064c8 <HAL_DMA_Abort+0x5e0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d06d      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a4c      	ldr	r2, [pc, #304]	; (80064cc <HAL_DMA_Abort+0x5e4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d068      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a4a      	ldr	r2, [pc, #296]	; (80064d0 <HAL_DMA_Abort+0x5e8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d063      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a49      	ldr	r2, [pc, #292]	; (80064d4 <HAL_DMA_Abort+0x5ec>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d05e      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a47      	ldr	r2, [pc, #284]	; (80064d8 <HAL_DMA_Abort+0x5f0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d059      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a46      	ldr	r2, [pc, #280]	; (80064dc <HAL_DMA_Abort+0x5f4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d054      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a44      	ldr	r2, [pc, #272]	; (80064e0 <HAL_DMA_Abort+0x5f8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d04f      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a43      	ldr	r2, [pc, #268]	; (80064e4 <HAL_DMA_Abort+0x5fc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d04a      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a41      	ldr	r2, [pc, #260]	; (80064e8 <HAL_DMA_Abort+0x600>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d045      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a40      	ldr	r2, [pc, #256]	; (80064ec <HAL_DMA_Abort+0x604>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d040      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a3e      	ldr	r2, [pc, #248]	; (80064f0 <HAL_DMA_Abort+0x608>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d03b      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a3d      	ldr	r2, [pc, #244]	; (80064f4 <HAL_DMA_Abort+0x60c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d036      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a3b      	ldr	r2, [pc, #236]	; (80064f8 <HAL_DMA_Abort+0x610>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d031      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a3a      	ldr	r2, [pc, #232]	; (80064fc <HAL_DMA_Abort+0x614>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d02c      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a38      	ldr	r2, [pc, #224]	; (8006500 <HAL_DMA_Abort+0x618>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d027      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a37      	ldr	r2, [pc, #220]	; (8006504 <HAL_DMA_Abort+0x61c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d022      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a35      	ldr	r2, [pc, #212]	; (8006508 <HAL_DMA_Abort+0x620>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01d      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a34      	ldr	r2, [pc, #208]	; (800650c <HAL_DMA_Abort+0x624>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d018      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a32      	ldr	r2, [pc, #200]	; (8006510 <HAL_DMA_Abort+0x628>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d013      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a31      	ldr	r2, [pc, #196]	; (8006514 <HAL_DMA_Abort+0x62c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00e      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a2f      	ldr	r2, [pc, #188]	; (8006518 <HAL_DMA_Abort+0x630>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d009      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a2e      	ldr	r2, [pc, #184]	; (800651c <HAL_DMA_Abort+0x634>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d004      	beq.n	8006472 <HAL_DMA_Abort+0x58a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a2c      	ldr	r2, [pc, #176]	; (8006520 <HAL_DMA_Abort+0x638>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d101      	bne.n	8006476 <HAL_DMA_Abort+0x58e>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <HAL_DMA_Abort+0x590>
 8006476:	2300      	movs	r3, #0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d015      	beq.n	80064a8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006484:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00c      	beq.n	80064a8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800649c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064a6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	40020010 	.word	0x40020010
 80064c8:	40020028 	.word	0x40020028
 80064cc:	40020040 	.word	0x40020040
 80064d0:	40020058 	.word	0x40020058
 80064d4:	40020070 	.word	0x40020070
 80064d8:	40020088 	.word	0x40020088
 80064dc:	400200a0 	.word	0x400200a0
 80064e0:	400200b8 	.word	0x400200b8
 80064e4:	40020410 	.word	0x40020410
 80064e8:	40020428 	.word	0x40020428
 80064ec:	40020440 	.word	0x40020440
 80064f0:	40020458 	.word	0x40020458
 80064f4:	40020470 	.word	0x40020470
 80064f8:	40020488 	.word	0x40020488
 80064fc:	400204a0 	.word	0x400204a0
 8006500:	400204b8 	.word	0x400204b8
 8006504:	58025408 	.word	0x58025408
 8006508:	5802541c 	.word	0x5802541c
 800650c:	58025430 	.word	0x58025430
 8006510:	58025444 	.word	0x58025444
 8006514:	58025458 	.word	0x58025458
 8006518:	5802546c 	.word	0x5802546c
 800651c:	58025480 	.word	0x58025480
 8006520:	58025494 	.word	0x58025494

08006524 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e237      	b.n	80069a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d004      	beq.n	800654c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2280      	movs	r2, #128	; 0x80
 8006546:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e22c      	b.n	80069a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a5c      	ldr	r2, [pc, #368]	; (80066c4 <HAL_DMA_Abort_IT+0x1a0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d04a      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a5b      	ldr	r2, [pc, #364]	; (80066c8 <HAL_DMA_Abort_IT+0x1a4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d045      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a59      	ldr	r2, [pc, #356]	; (80066cc <HAL_DMA_Abort_IT+0x1a8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d040      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a58      	ldr	r2, [pc, #352]	; (80066d0 <HAL_DMA_Abort_IT+0x1ac>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d03b      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a56      	ldr	r2, [pc, #344]	; (80066d4 <HAL_DMA_Abort_IT+0x1b0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d036      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a55      	ldr	r2, [pc, #340]	; (80066d8 <HAL_DMA_Abort_IT+0x1b4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d031      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a53      	ldr	r2, [pc, #332]	; (80066dc <HAL_DMA_Abort_IT+0x1b8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d02c      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a52      	ldr	r2, [pc, #328]	; (80066e0 <HAL_DMA_Abort_IT+0x1bc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d027      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a50      	ldr	r2, [pc, #320]	; (80066e4 <HAL_DMA_Abort_IT+0x1c0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d022      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a4f      	ldr	r2, [pc, #316]	; (80066e8 <HAL_DMA_Abort_IT+0x1c4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d01d      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a4d      	ldr	r2, [pc, #308]	; (80066ec <HAL_DMA_Abort_IT+0x1c8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a4c      	ldr	r2, [pc, #304]	; (80066f0 <HAL_DMA_Abort_IT+0x1cc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a4a      	ldr	r2, [pc, #296]	; (80066f4 <HAL_DMA_Abort_IT+0x1d0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a49      	ldr	r2, [pc, #292]	; (80066f8 <HAL_DMA_Abort_IT+0x1d4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a47      	ldr	r2, [pc, #284]	; (80066fc <HAL_DMA_Abort_IT+0x1d8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <HAL_DMA_Abort_IT+0xc8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a46      	ldr	r2, [pc, #280]	; (8006700 <HAL_DMA_Abort_IT+0x1dc>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d101      	bne.n	80065f0 <HAL_DMA_Abort_IT+0xcc>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <HAL_DMA_Abort_IT+0xce>
 80065f0:	2300      	movs	r3, #0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 8086 	beq.w	8006704 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2204      	movs	r2, #4
 80065fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a2f      	ldr	r2, [pc, #188]	; (80066c4 <HAL_DMA_Abort_IT+0x1a0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d04a      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a2e      	ldr	r2, [pc, #184]	; (80066c8 <HAL_DMA_Abort_IT+0x1a4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d045      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a2c      	ldr	r2, [pc, #176]	; (80066cc <HAL_DMA_Abort_IT+0x1a8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d040      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a2b      	ldr	r2, [pc, #172]	; (80066d0 <HAL_DMA_Abort_IT+0x1ac>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d03b      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a29      	ldr	r2, [pc, #164]	; (80066d4 <HAL_DMA_Abort_IT+0x1b0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d036      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a28      	ldr	r2, [pc, #160]	; (80066d8 <HAL_DMA_Abort_IT+0x1b4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d031      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a26      	ldr	r2, [pc, #152]	; (80066dc <HAL_DMA_Abort_IT+0x1b8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d02c      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a25      	ldr	r2, [pc, #148]	; (80066e0 <HAL_DMA_Abort_IT+0x1bc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d027      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a23      	ldr	r2, [pc, #140]	; (80066e4 <HAL_DMA_Abort_IT+0x1c0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d022      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a22      	ldr	r2, [pc, #136]	; (80066e8 <HAL_DMA_Abort_IT+0x1c4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d01d      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a20      	ldr	r2, [pc, #128]	; (80066ec <HAL_DMA_Abort_IT+0x1c8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d018      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1f      	ldr	r2, [pc, #124]	; (80066f0 <HAL_DMA_Abort_IT+0x1cc>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d013      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <HAL_DMA_Abort_IT+0x1d0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00e      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1c      	ldr	r2, [pc, #112]	; (80066f8 <HAL_DMA_Abort_IT+0x1d4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d009      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <HAL_DMA_Abort_IT+0x1d8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d004      	beq.n	80066a0 <HAL_DMA_Abort_IT+0x17c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a19      	ldr	r2, [pc, #100]	; (8006700 <HAL_DMA_Abort_IT+0x1dc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d108      	bne.n	80066b2 <HAL_DMA_Abort_IT+0x18e>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e178      	b.n	80069a4 <HAL_DMA_Abort_IT+0x480>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0201 	bic.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	e16f      	b.n	80069a4 <HAL_DMA_Abort_IT+0x480>
 80066c4:	40020010 	.word	0x40020010
 80066c8:	40020028 	.word	0x40020028
 80066cc:	40020040 	.word	0x40020040
 80066d0:	40020058 	.word	0x40020058
 80066d4:	40020070 	.word	0x40020070
 80066d8:	40020088 	.word	0x40020088
 80066dc:	400200a0 	.word	0x400200a0
 80066e0:	400200b8 	.word	0x400200b8
 80066e4:	40020410 	.word	0x40020410
 80066e8:	40020428 	.word	0x40020428
 80066ec:	40020440 	.word	0x40020440
 80066f0:	40020458 	.word	0x40020458
 80066f4:	40020470 	.word	0x40020470
 80066f8:	40020488 	.word	0x40020488
 80066fc:	400204a0 	.word	0x400204a0
 8006700:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 020e 	bic.w	r2, r2, #14
 8006712:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a6c      	ldr	r2, [pc, #432]	; (80068cc <HAL_DMA_Abort_IT+0x3a8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d04a      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a6b      	ldr	r2, [pc, #428]	; (80068d0 <HAL_DMA_Abort_IT+0x3ac>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d045      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a69      	ldr	r2, [pc, #420]	; (80068d4 <HAL_DMA_Abort_IT+0x3b0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d040      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a68      	ldr	r2, [pc, #416]	; (80068d8 <HAL_DMA_Abort_IT+0x3b4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d03b      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a66      	ldr	r2, [pc, #408]	; (80068dc <HAL_DMA_Abort_IT+0x3b8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d036      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a65      	ldr	r2, [pc, #404]	; (80068e0 <HAL_DMA_Abort_IT+0x3bc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d031      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a63      	ldr	r2, [pc, #396]	; (80068e4 <HAL_DMA_Abort_IT+0x3c0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d02c      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a62      	ldr	r2, [pc, #392]	; (80068e8 <HAL_DMA_Abort_IT+0x3c4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d027      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a60      	ldr	r2, [pc, #384]	; (80068ec <HAL_DMA_Abort_IT+0x3c8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d022      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a5f      	ldr	r2, [pc, #380]	; (80068f0 <HAL_DMA_Abort_IT+0x3cc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d01d      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a5d      	ldr	r2, [pc, #372]	; (80068f4 <HAL_DMA_Abort_IT+0x3d0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d018      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a5c      	ldr	r2, [pc, #368]	; (80068f8 <HAL_DMA_Abort_IT+0x3d4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a5a      	ldr	r2, [pc, #360]	; (80068fc <HAL_DMA_Abort_IT+0x3d8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00e      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a59      	ldr	r2, [pc, #356]	; (8006900 <HAL_DMA_Abort_IT+0x3dc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d009      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a57      	ldr	r2, [pc, #348]	; (8006904 <HAL_DMA_Abort_IT+0x3e0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <HAL_DMA_Abort_IT+0x290>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a56      	ldr	r2, [pc, #344]	; (8006908 <HAL_DMA_Abort_IT+0x3e4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d108      	bne.n	80067c6 <HAL_DMA_Abort_IT+0x2a2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	e007      	b.n	80067d6 <HAL_DMA_Abort_IT+0x2b2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0201 	bic.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a3c      	ldr	r2, [pc, #240]	; (80068cc <HAL_DMA_Abort_IT+0x3a8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d072      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a3a      	ldr	r2, [pc, #232]	; (80068d0 <HAL_DMA_Abort_IT+0x3ac>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d06d      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a39      	ldr	r2, [pc, #228]	; (80068d4 <HAL_DMA_Abort_IT+0x3b0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d068      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a37      	ldr	r2, [pc, #220]	; (80068d8 <HAL_DMA_Abort_IT+0x3b4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d063      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a36      	ldr	r2, [pc, #216]	; (80068dc <HAL_DMA_Abort_IT+0x3b8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d05e      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a34      	ldr	r2, [pc, #208]	; (80068e0 <HAL_DMA_Abort_IT+0x3bc>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d059      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a33      	ldr	r2, [pc, #204]	; (80068e4 <HAL_DMA_Abort_IT+0x3c0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d054      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a31      	ldr	r2, [pc, #196]	; (80068e8 <HAL_DMA_Abort_IT+0x3c4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d04f      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a30      	ldr	r2, [pc, #192]	; (80068ec <HAL_DMA_Abort_IT+0x3c8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d04a      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a2e      	ldr	r2, [pc, #184]	; (80068f0 <HAL_DMA_Abort_IT+0x3cc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d045      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a2d      	ldr	r2, [pc, #180]	; (80068f4 <HAL_DMA_Abort_IT+0x3d0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d040      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a2b      	ldr	r2, [pc, #172]	; (80068f8 <HAL_DMA_Abort_IT+0x3d4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d03b      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a2a      	ldr	r2, [pc, #168]	; (80068fc <HAL_DMA_Abort_IT+0x3d8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d036      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a28      	ldr	r2, [pc, #160]	; (8006900 <HAL_DMA_Abort_IT+0x3dc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d031      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a27      	ldr	r2, [pc, #156]	; (8006904 <HAL_DMA_Abort_IT+0x3e0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d02c      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a25      	ldr	r2, [pc, #148]	; (8006908 <HAL_DMA_Abort_IT+0x3e4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d027      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a24      	ldr	r2, [pc, #144]	; (800690c <HAL_DMA_Abort_IT+0x3e8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d022      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a22      	ldr	r2, [pc, #136]	; (8006910 <HAL_DMA_Abort_IT+0x3ec>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01d      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a21      	ldr	r2, [pc, #132]	; (8006914 <HAL_DMA_Abort_IT+0x3f0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d018      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a1f      	ldr	r2, [pc, #124]	; (8006918 <HAL_DMA_Abort_IT+0x3f4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d013      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1e      	ldr	r2, [pc, #120]	; (800691c <HAL_DMA_Abort_IT+0x3f8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00e      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1c      	ldr	r2, [pc, #112]	; (8006920 <HAL_DMA_Abort_IT+0x3fc>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d009      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1b      	ldr	r2, [pc, #108]	; (8006924 <HAL_DMA_Abort_IT+0x400>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d004      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x3a2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a19      	ldr	r2, [pc, #100]	; (8006928 <HAL_DMA_Abort_IT+0x404>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d132      	bne.n	800692c <HAL_DMA_Abort_IT+0x408>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e031      	b.n	800692e <HAL_DMA_Abort_IT+0x40a>
 80068ca:	bf00      	nop
 80068cc:	40020010 	.word	0x40020010
 80068d0:	40020028 	.word	0x40020028
 80068d4:	40020040 	.word	0x40020040
 80068d8:	40020058 	.word	0x40020058
 80068dc:	40020070 	.word	0x40020070
 80068e0:	40020088 	.word	0x40020088
 80068e4:	400200a0 	.word	0x400200a0
 80068e8:	400200b8 	.word	0x400200b8
 80068ec:	40020410 	.word	0x40020410
 80068f0:	40020428 	.word	0x40020428
 80068f4:	40020440 	.word	0x40020440
 80068f8:	40020458 	.word	0x40020458
 80068fc:	40020470 	.word	0x40020470
 8006900:	40020488 	.word	0x40020488
 8006904:	400204a0 	.word	0x400204a0
 8006908:	400204b8 	.word	0x400204b8
 800690c:	58025408 	.word	0x58025408
 8006910:	5802541c 	.word	0x5802541c
 8006914:	58025430 	.word	0x58025430
 8006918:	58025444 	.word	0x58025444
 800691c:	58025458 	.word	0x58025458
 8006920:	5802546c 	.word	0x5802546c
 8006924:	58025480 	.word	0x58025480
 8006928:	58025494 	.word	0x58025494
 800692c:	2300      	movs	r3, #0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d028      	beq.n	8006984 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006940:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006946:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694c:	f003 031f 	and.w	r3, r3, #31
 8006950:	2201      	movs	r2, #1
 8006952:	409a      	lsls	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006960:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00c      	beq.n	8006984 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006978:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006982:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop

080069b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b089      	sub	sp, #36	; 0x24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80069be:	4b89      	ldr	r3, [pc, #548]	; (8006be4 <HAL_GPIO_Init+0x234>)
 80069c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069c2:	e194      	b.n	8006cee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	2101      	movs	r1, #1
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	fa01 f303 	lsl.w	r3, r1, r3
 80069d0:	4013      	ands	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8186 	beq.w	8006ce8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f003 0303 	and.w	r3, r3, #3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d005      	beq.n	80069f4 <HAL_GPIO_Init+0x44>
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d130      	bne.n	8006a56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	2203      	movs	r2, #3
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
 8006a04:	43db      	mvns	r3, r3
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43db      	mvns	r3, r3
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	4013      	ands	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	091b      	lsrs	r3, r3, #4
 8006a40:	f003 0201 	and.w	r2, r3, #1
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d017      	beq.n	8006a92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	43db      	mvns	r3, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	4013      	ands	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d123      	bne.n	8006ae6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	08da      	lsrs	r2, r3, #3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3208      	adds	r2, #8
 8006aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	220f      	movs	r2, #15
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	43db      	mvns	r3, r3
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	08da      	lsrs	r2, r3, #3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3208      	adds	r2, #8
 8006ae0:	69b9      	ldr	r1, [r7, #24]
 8006ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	2203      	movs	r2, #3
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	43db      	mvns	r3, r3
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	4013      	ands	r3, r2
 8006afc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f003 0203 	and.w	r2, r3, #3
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80e0 	beq.w	8006ce8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b28:	4b2f      	ldr	r3, [pc, #188]	; (8006be8 <HAL_GPIO_Init+0x238>)
 8006b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b2e:	4a2e      	ldr	r2, [pc, #184]	; (8006be8 <HAL_GPIO_Init+0x238>)
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006b38:	4b2b      	ldr	r3, [pc, #172]	; (8006be8 <HAL_GPIO_Init+0x238>)
 8006b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b46:	4a29      	ldr	r2, [pc, #164]	; (8006bec <HAL_GPIO_Init+0x23c>)
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	089b      	lsrs	r3, r3, #2
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	220f      	movs	r2, #15
 8006b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b62:	43db      	mvns	r3, r3
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4013      	ands	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a20      	ldr	r2, [pc, #128]	; (8006bf0 <HAL_GPIO_Init+0x240>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d052      	beq.n	8006c18 <HAL_GPIO_Init+0x268>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a1f      	ldr	r2, [pc, #124]	; (8006bf4 <HAL_GPIO_Init+0x244>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d031      	beq.n	8006bde <HAL_GPIO_Init+0x22e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <HAL_GPIO_Init+0x248>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d02b      	beq.n	8006bda <HAL_GPIO_Init+0x22a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <HAL_GPIO_Init+0x24c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d025      	beq.n	8006bd6 <HAL_GPIO_Init+0x226>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a1c      	ldr	r2, [pc, #112]	; (8006c00 <HAL_GPIO_Init+0x250>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01f      	beq.n	8006bd2 <HAL_GPIO_Init+0x222>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a1b      	ldr	r2, [pc, #108]	; (8006c04 <HAL_GPIO_Init+0x254>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d019      	beq.n	8006bce <HAL_GPIO_Init+0x21e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a1a      	ldr	r2, [pc, #104]	; (8006c08 <HAL_GPIO_Init+0x258>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <HAL_GPIO_Init+0x21a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a19      	ldr	r2, [pc, #100]	; (8006c0c <HAL_GPIO_Init+0x25c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00d      	beq.n	8006bc6 <HAL_GPIO_Init+0x216>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a18      	ldr	r2, [pc, #96]	; (8006c10 <HAL_GPIO_Init+0x260>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d007      	beq.n	8006bc2 <HAL_GPIO_Init+0x212>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a17      	ldr	r2, [pc, #92]	; (8006c14 <HAL_GPIO_Init+0x264>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d101      	bne.n	8006bbe <HAL_GPIO_Init+0x20e>
 8006bba:	2309      	movs	r3, #9
 8006bbc:	e02d      	b.n	8006c1a <HAL_GPIO_Init+0x26a>
 8006bbe:	230a      	movs	r3, #10
 8006bc0:	e02b      	b.n	8006c1a <HAL_GPIO_Init+0x26a>
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	e029      	b.n	8006c1a <HAL_GPIO_Init+0x26a>
 8006bc6:	2307      	movs	r3, #7
 8006bc8:	e027      	b.n	8006c1a <HAL_GPIO_Init+0x26a>
 8006bca:	2306      	movs	r3, #6
 8006bcc:	e025      	b.n	8006c1a <HAL_GPIO_Init+0x26a>
 8006bce:	2305      	movs	r3, #5
 8006bd0:	e023      	b.n	8006c1a <HAL_GPIO_Init+0x26a>
 8006bd2:	2304      	movs	r3, #4
 8006bd4:	e021      	b.n	8006c1a <HAL_GPIO_Init+0x26a>
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e01f      	b.n	8006c1a <HAL_GPIO_Init+0x26a>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e01d      	b.n	8006c1a <HAL_GPIO_Init+0x26a>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e01b      	b.n	8006c1a <HAL_GPIO_Init+0x26a>
 8006be2:	bf00      	nop
 8006be4:	58000080 	.word	0x58000080
 8006be8:	58024400 	.word	0x58024400
 8006bec:	58000400 	.word	0x58000400
 8006bf0:	58020000 	.word	0x58020000
 8006bf4:	58020400 	.word	0x58020400
 8006bf8:	58020800 	.word	0x58020800
 8006bfc:	58020c00 	.word	0x58020c00
 8006c00:	58021000 	.word	0x58021000
 8006c04:	58021400 	.word	0x58021400
 8006c08:	58021800 	.word	0x58021800
 8006c0c:	58021c00 	.word	0x58021c00
 8006c10:	58022000 	.word	0x58022000
 8006c14:	58022400 	.word	0x58022400
 8006c18:	2300      	movs	r3, #0
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	f002 0203 	and.w	r2, r2, #3
 8006c20:	0092      	lsls	r2, r2, #2
 8006c22:	4093      	lsls	r3, r2
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c2a:	4938      	ldr	r1, [pc, #224]	; (8006d0c <HAL_GPIO_Init+0x35c>)
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	089b      	lsrs	r3, r3, #2
 8006c30:	3302      	adds	r3, #2
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	43db      	mvns	r3, r3
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	4013      	ands	r3, r2
 8006c48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	43db      	mvns	r3, r3
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	4013      	ands	r3, r2
 8006c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	43db      	mvns	r3, r3
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	3301      	adds	r3, #1
 8006cec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f47f ae63 	bne.w	80069c4 <HAL_GPIO_Init+0x14>
  }
}
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
 8006d02:	3724      	adds	r7, #36	; 0x24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	58000400 	.word	0x58000400

08006d10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	887b      	ldrh	r3, [r7, #2]
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
 8006d2c:	e001      	b.n	8006d32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	807b      	strh	r3, [r7, #2]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d50:	787b      	ldrb	r3, [r7, #1]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d56:	887a      	ldrh	r2, [r7, #2]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d5c:	e003      	b.n	8006d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d5e:	887b      	ldrh	r3, [r7, #2]
 8006d60:	041a      	lsls	r2, r3, #16
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	619a      	str	r2, [r3, #24]
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	4603      	mov	r3, r0
 8006d7a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d84:	88fb      	ldrh	r3, [r7, #6]
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d008      	beq.n	8006d9e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d90:	88fb      	ldrh	r3, [r7, #6]
 8006d92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fb fe95 	bl	8002ac8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006db0:	4b19      	ldr	r3, [pc, #100]	; (8006e18 <HAL_PWREx_ConfigSupply+0x70>)
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d00a      	beq.n	8006dd2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006dbc:	4b16      	ldr	r3, [pc, #88]	; (8006e18 <HAL_PWREx_ConfigSupply+0x70>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d001      	beq.n	8006dce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e01f      	b.n	8006e0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e01d      	b.n	8006e0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006dd2:	4b11      	ldr	r3, [pc, #68]	; (8006e18 <HAL_PWREx_ConfigSupply+0x70>)
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f023 0207 	bic.w	r2, r3, #7
 8006dda:	490f      	ldr	r1, [pc, #60]	; (8006e18 <HAL_PWREx_ConfigSupply+0x70>)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006de2:	f7fe ff03 	bl	8005bec <HAL_GetTick>
 8006de6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006de8:	e009      	b.n	8006dfe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006dea:	f7fe feff 	bl	8005bec <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006df8:	d901      	bls.n	8006dfe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e007      	b.n	8006e0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006dfe:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <HAL_PWREx_ConfigSupply+0x70>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e0a:	d1ee      	bne.n	8006dea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	58024800 	.word	0x58024800

08006e1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08c      	sub	sp, #48	; 0x30
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d102      	bne.n	8006e30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f000 bc1d 	b.w	800766a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 8087 	beq.w	8006f4c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e3e:	4b99      	ldr	r3, [pc, #612]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e48:	4b96      	ldr	r3, [pc, #600]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	2b10      	cmp	r3, #16
 8006e52:	d007      	beq.n	8006e64 <HAL_RCC_OscConfig+0x48>
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	2b18      	cmp	r3, #24
 8006e58:	d110      	bne.n	8006e7c <HAL_RCC_OscConfig+0x60>
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d10b      	bne.n	8006e7c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e64:	4b8f      	ldr	r3, [pc, #572]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d06c      	beq.n	8006f4a <HAL_RCC_OscConfig+0x12e>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d168      	bne.n	8006f4a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e3f6      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e84:	d106      	bne.n	8006e94 <HAL_RCC_OscConfig+0x78>
 8006e86:	4b87      	ldr	r3, [pc, #540]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a86      	ldr	r2, [pc, #536]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	e02e      	b.n	8006ef2 <HAL_RCC_OscConfig+0xd6>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10c      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x9a>
 8006e9c:	4b81      	ldr	r3, [pc, #516]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a80      	ldr	r2, [pc, #512]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	4b7e      	ldr	r3, [pc, #504]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a7d      	ldr	r2, [pc, #500]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	e01d      	b.n	8006ef2 <HAL_RCC_OscConfig+0xd6>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ebe:	d10c      	bne.n	8006eda <HAL_RCC_OscConfig+0xbe>
 8006ec0:	4b78      	ldr	r3, [pc, #480]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a77      	ldr	r2, [pc, #476]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	4b75      	ldr	r3, [pc, #468]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a74      	ldr	r2, [pc, #464]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e00b      	b.n	8006ef2 <HAL_RCC_OscConfig+0xd6>
 8006eda:	4b72      	ldr	r3, [pc, #456]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a71      	ldr	r2, [pc, #452]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	4b6f      	ldr	r3, [pc, #444]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a6e      	ldr	r2, [pc, #440]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ef0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d013      	beq.n	8006f22 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efa:	f7fe fe77 	bl	8005bec <HAL_GetTick>
 8006efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f00:	e008      	b.n	8006f14 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f02:	f7fe fe73 	bl	8005bec <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b64      	cmp	r3, #100	; 0x64
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e3aa      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f14:	4b63      	ldr	r3, [pc, #396]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0f0      	beq.n	8006f02 <HAL_RCC_OscConfig+0xe6>
 8006f20:	e014      	b.n	8006f4c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f22:	f7fe fe63 	bl	8005bec <HAL_GetTick>
 8006f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f2a:	f7fe fe5f 	bl	8005bec <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b64      	cmp	r3, #100	; 0x64
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e396      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f3c:	4b59      	ldr	r3, [pc, #356]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1f0      	bne.n	8006f2a <HAL_RCC_OscConfig+0x10e>
 8006f48:	e000      	b.n	8006f4c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80cb 	beq.w	80070f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f5a:	4b52      	ldr	r3, [pc, #328]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f62:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f64:	4b4f      	ldr	r3, [pc, #316]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f68:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <HAL_RCC_OscConfig+0x164>
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	2b18      	cmp	r3, #24
 8006f74:	d156      	bne.n	8007024 <HAL_RCC_OscConfig+0x208>
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d151      	bne.n	8007024 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f80:	4b48      	ldr	r3, [pc, #288]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <HAL_RCC_OscConfig+0x17c>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e368      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f98:	4b42      	ldr	r3, [pc, #264]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f023 0219 	bic.w	r2, r3, #25
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	493f      	ldr	r1, [pc, #252]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006faa:	f7fe fe1f 	bl	8005bec <HAL_GetTick>
 8006fae:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fb2:	f7fe fe1b 	bl	8005bec <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e352      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fc4:	4b37      	ldr	r3, [pc, #220]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0f0      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fd0:	f7fe fe3c 	bl	8005c4c <HAL_GetREVID>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d817      	bhi.n	800700e <HAL_RCC_OscConfig+0x1f2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d108      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x1dc>
 8006fe6:	4b2f      	ldr	r3, [pc, #188]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006fee:	4a2d      	ldr	r2, [pc, #180]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ff4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ff6:	e07b      	b.n	80070f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ff8:	4b2a      	ldr	r3, [pc, #168]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	031b      	lsls	r3, r3, #12
 8007006:	4927      	ldr	r1, [pc, #156]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8007008:	4313      	orrs	r3, r2
 800700a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800700c:	e070      	b.n	80070f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800700e:	4b25      	ldr	r3, [pc, #148]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	061b      	lsls	r3, r3, #24
 800701c:	4921      	ldr	r1, [pc, #132]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 800701e:	4313      	orrs	r3, r2
 8007020:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007022:	e065      	b.n	80070f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d048      	beq.n	80070be <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800702c:	4b1d      	ldr	r3, [pc, #116]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f023 0219 	bic.w	r2, r3, #25
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	491a      	ldr	r1, [pc, #104]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 800703a:	4313      	orrs	r3, r2
 800703c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703e:	f7fe fdd5 	bl	8005bec <HAL_GetTick>
 8007042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007046:	f7fe fdd1 	bl	8005bec <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e308      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007058:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f0      	beq.n	8007046 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007064:	f7fe fdf2 	bl	8005c4c <HAL_GetREVID>
 8007068:	4603      	mov	r3, r0
 800706a:	f241 0203 	movw	r2, #4099	; 0x1003
 800706e:	4293      	cmp	r3, r2
 8007070:	d81a      	bhi.n	80070a8 <HAL_RCC_OscConfig+0x28c>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	d108      	bne.n	800708c <HAL_RCC_OscConfig+0x270>
 800707a:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007082:	4a08      	ldr	r2, [pc, #32]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 8007084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007088:	6053      	str	r3, [r2, #4]
 800708a:	e031      	b.n	80070f0 <HAL_RCC_OscConfig+0x2d4>
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	031b      	lsls	r3, r3, #12
 800709a:	4902      	ldr	r1, [pc, #8]	; (80070a4 <HAL_RCC_OscConfig+0x288>)
 800709c:	4313      	orrs	r3, r2
 800709e:	604b      	str	r3, [r1, #4]
 80070a0:	e026      	b.n	80070f0 <HAL_RCC_OscConfig+0x2d4>
 80070a2:	bf00      	nop
 80070a4:	58024400 	.word	0x58024400
 80070a8:	4b9a      	ldr	r3, [pc, #616]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	061b      	lsls	r3, r3, #24
 80070b6:	4997      	ldr	r1, [pc, #604]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	604b      	str	r3, [r1, #4]
 80070bc:	e018      	b.n	80070f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070be:	4b95      	ldr	r3, [pc, #596]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a94      	ldr	r2, [pc, #592]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80070c4:	f023 0301 	bic.w	r3, r3, #1
 80070c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ca:	f7fe fd8f 	bl	8005bec <HAL_GetTick>
 80070ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80070d0:	e008      	b.n	80070e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070d2:	f7fe fd8b 	bl	8005bec <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e2c2      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80070e4:	4b8b      	ldr	r3, [pc, #556]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1f0      	bne.n	80070d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80a9 	beq.w	8007250 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070fe:	4b85      	ldr	r3, [pc, #532]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007106:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007108:	4b82      	ldr	r3, [pc, #520]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b08      	cmp	r3, #8
 8007112:	d007      	beq.n	8007124 <HAL_RCC_OscConfig+0x308>
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	2b18      	cmp	r3, #24
 8007118:	d13a      	bne.n	8007190 <HAL_RCC_OscConfig+0x374>
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	2b01      	cmp	r3, #1
 8007122:	d135      	bne.n	8007190 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007124:	4b7b      	ldr	r3, [pc, #492]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_RCC_OscConfig+0x320>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	2b80      	cmp	r3, #128	; 0x80
 8007136:	d001      	beq.n	800713c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e296      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800713c:	f7fe fd86 	bl	8005c4c <HAL_GetREVID>
 8007140:	4603      	mov	r3, r0
 8007142:	f241 0203 	movw	r2, #4099	; 0x1003
 8007146:	4293      	cmp	r3, r2
 8007148:	d817      	bhi.n	800717a <HAL_RCC_OscConfig+0x35e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	2b20      	cmp	r3, #32
 8007150:	d108      	bne.n	8007164 <HAL_RCC_OscConfig+0x348>
 8007152:	4b70      	ldr	r3, [pc, #448]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800715a:	4a6e      	ldr	r2, [pc, #440]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 800715c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007160:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007162:	e075      	b.n	8007250 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007164:	4b6b      	ldr	r3, [pc, #428]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	069b      	lsls	r3, r3, #26
 8007172:	4968      	ldr	r1, [pc, #416]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007174:	4313      	orrs	r3, r2
 8007176:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007178:	e06a      	b.n	8007250 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800717a:	4b66      	ldr	r3, [pc, #408]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	061b      	lsls	r3, r3, #24
 8007188:	4962      	ldr	r1, [pc, #392]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 800718a:	4313      	orrs	r3, r2
 800718c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800718e:	e05f      	b.n	8007250 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d042      	beq.n	800721e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007198:	4b5e      	ldr	r3, [pc, #376]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a5d      	ldr	r2, [pc, #372]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 800719e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a4:	f7fe fd22 	bl	8005bec <HAL_GetTick>
 80071a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071aa:	e008      	b.n	80071be <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80071ac:	f7fe fd1e 	bl	8005bec <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e255      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071be:	4b55      	ldr	r3, [pc, #340]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0f0      	beq.n	80071ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071ca:	f7fe fd3f 	bl	8005c4c <HAL_GetREVID>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d817      	bhi.n	8007208 <HAL_RCC_OscConfig+0x3ec>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	2b20      	cmp	r3, #32
 80071de:	d108      	bne.n	80071f2 <HAL_RCC_OscConfig+0x3d6>
 80071e0:	4b4c      	ldr	r3, [pc, #304]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80071e8:	4a4a      	ldr	r2, [pc, #296]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80071ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ee:	6053      	str	r3, [r2, #4]
 80071f0:	e02e      	b.n	8007250 <HAL_RCC_OscConfig+0x434>
 80071f2:	4b48      	ldr	r3, [pc, #288]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	069b      	lsls	r3, r3, #26
 8007200:	4944      	ldr	r1, [pc, #272]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007202:	4313      	orrs	r3, r2
 8007204:	604b      	str	r3, [r1, #4]
 8007206:	e023      	b.n	8007250 <HAL_RCC_OscConfig+0x434>
 8007208:	4b42      	ldr	r3, [pc, #264]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	061b      	lsls	r3, r3, #24
 8007216:	493f      	ldr	r1, [pc, #252]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007218:	4313      	orrs	r3, r2
 800721a:	60cb      	str	r3, [r1, #12]
 800721c:	e018      	b.n	8007250 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800721e:	4b3d      	ldr	r3, [pc, #244]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a3c      	ldr	r2, [pc, #240]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722a:	f7fe fcdf 	bl	8005bec <HAL_GetTick>
 800722e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007230:	e008      	b.n	8007244 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007232:	f7fe fcdb 	bl	8005bec <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e212      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007244:	4b33      	ldr	r3, [pc, #204]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f0      	bne.n	8007232 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0308 	and.w	r3, r3, #8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d036      	beq.n	80072ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d019      	beq.n	8007298 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007264:	4b2b      	ldr	r3, [pc, #172]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007268:	4a2a      	ldr	r2, [pc, #168]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 800726a:	f043 0301 	orr.w	r3, r3, #1
 800726e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007270:	f7fe fcbc 	bl	8005bec <HAL_GetTick>
 8007274:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007278:	f7fe fcb8 	bl	8005bec <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e1ef      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800728a:	4b22      	ldr	r3, [pc, #136]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 800728c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0f0      	beq.n	8007278 <HAL_RCC_OscConfig+0x45c>
 8007296:	e018      	b.n	80072ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007298:	4b1e      	ldr	r3, [pc, #120]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 800729a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800729c:	4a1d      	ldr	r2, [pc, #116]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 800729e:	f023 0301 	bic.w	r3, r3, #1
 80072a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a4:	f7fe fca2 	bl	8005bec <HAL_GetTick>
 80072a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072ac:	f7fe fc9e 	bl	8005bec <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e1d5      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072be:	4b15      	ldr	r3, [pc, #84]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80072c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1f0      	bne.n	80072ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d039      	beq.n	800734a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01c      	beq.n	8007318 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072de:	4b0d      	ldr	r3, [pc, #52]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a0c      	ldr	r2, [pc, #48]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 80072e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072ea:	f7fe fc7f 	bl	8005bec <HAL_GetTick>
 80072ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072f0:	e008      	b.n	8007304 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072f2:	f7fe fc7b 	bl	8005bec <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e1b2      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007304:	4b03      	ldr	r3, [pc, #12]	; (8007314 <HAL_RCC_OscConfig+0x4f8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0f0      	beq.n	80072f2 <HAL_RCC_OscConfig+0x4d6>
 8007310:	e01b      	b.n	800734a <HAL_RCC_OscConfig+0x52e>
 8007312:	bf00      	nop
 8007314:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007318:	4b9b      	ldr	r3, [pc, #620]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a9a      	ldr	r2, [pc, #616]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 800731e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007322:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007324:	f7fe fc62 	bl	8005bec <HAL_GetTick>
 8007328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800732c:	f7fe fc5e 	bl	8005bec <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e195      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800733e:	4b92      	ldr	r3, [pc, #584]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f0      	bne.n	800732c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 8081 	beq.w	800745a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007358:	4b8c      	ldr	r3, [pc, #560]	; (800758c <HAL_RCC_OscConfig+0x770>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a8b      	ldr	r2, [pc, #556]	; (800758c <HAL_RCC_OscConfig+0x770>)
 800735e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007362:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007364:	f7fe fc42 	bl	8005bec <HAL_GetTick>
 8007368:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800736c:	f7fe fc3e 	bl	8005bec <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b64      	cmp	r3, #100	; 0x64
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e175      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800737e:	4b83      	ldr	r3, [pc, #524]	; (800758c <HAL_RCC_OscConfig+0x770>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007386:	2b00      	cmp	r3, #0
 8007388:	d0f0      	beq.n	800736c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d106      	bne.n	80073a0 <HAL_RCC_OscConfig+0x584>
 8007392:	4b7d      	ldr	r3, [pc, #500]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007396:	4a7c      	ldr	r2, [pc, #496]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007398:	f043 0301 	orr.w	r3, r3, #1
 800739c:	6713      	str	r3, [r2, #112]	; 0x70
 800739e:	e02d      	b.n	80073fc <HAL_RCC_OscConfig+0x5e0>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10c      	bne.n	80073c2 <HAL_RCC_OscConfig+0x5a6>
 80073a8:	4b77      	ldr	r3, [pc, #476]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ac:	4a76      	ldr	r2, [pc, #472]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	6713      	str	r3, [r2, #112]	; 0x70
 80073b4:	4b74      	ldr	r3, [pc, #464]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b8:	4a73      	ldr	r2, [pc, #460]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073ba:	f023 0304 	bic.w	r3, r3, #4
 80073be:	6713      	str	r3, [r2, #112]	; 0x70
 80073c0:	e01c      	b.n	80073fc <HAL_RCC_OscConfig+0x5e0>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	2b05      	cmp	r3, #5
 80073c8:	d10c      	bne.n	80073e4 <HAL_RCC_OscConfig+0x5c8>
 80073ca:	4b6f      	ldr	r3, [pc, #444]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ce:	4a6e      	ldr	r2, [pc, #440]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073d0:	f043 0304 	orr.w	r3, r3, #4
 80073d4:	6713      	str	r3, [r2, #112]	; 0x70
 80073d6:	4b6c      	ldr	r3, [pc, #432]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073da:	4a6b      	ldr	r2, [pc, #428]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	6713      	str	r3, [r2, #112]	; 0x70
 80073e2:	e00b      	b.n	80073fc <HAL_RCC_OscConfig+0x5e0>
 80073e4:	4b68      	ldr	r3, [pc, #416]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e8:	4a67      	ldr	r2, [pc, #412]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073ea:	f023 0301 	bic.w	r3, r3, #1
 80073ee:	6713      	str	r3, [r2, #112]	; 0x70
 80073f0:	4b65      	ldr	r3, [pc, #404]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f4:	4a64      	ldr	r2, [pc, #400]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80073f6:	f023 0304 	bic.w	r3, r3, #4
 80073fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d015      	beq.n	8007430 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007404:	f7fe fbf2 	bl	8005bec <HAL_GetTick>
 8007408:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800740a:	e00a      	b.n	8007422 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800740c:	f7fe fbee 	bl	8005bec <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	f241 3288 	movw	r2, #5000	; 0x1388
 800741a:	4293      	cmp	r3, r2
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e123      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007422:	4b59      	ldr	r3, [pc, #356]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0ee      	beq.n	800740c <HAL_RCC_OscConfig+0x5f0>
 800742e:	e014      	b.n	800745a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007430:	f7fe fbdc 	bl	8005bec <HAL_GetTick>
 8007434:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007436:	e00a      	b.n	800744e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007438:	f7fe fbd8 	bl	8005bec <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	f241 3288 	movw	r2, #5000	; 0x1388
 8007446:	4293      	cmp	r3, r2
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e10d      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800744e:	4b4e      	ldr	r3, [pc, #312]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1ee      	bne.n	8007438 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8102 	beq.w	8007668 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007464:	4b48      	ldr	r3, [pc, #288]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800746c:	2b18      	cmp	r3, #24
 800746e:	f000 80bd 	beq.w	80075ec <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b02      	cmp	r3, #2
 8007478:	f040 809e 	bne.w	80075b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800747c:	4b42      	ldr	r3, [pc, #264]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a41      	ldr	r2, [pc, #260]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007488:	f7fe fbb0 	bl	8005bec <HAL_GetTick>
 800748c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800748e:	e008      	b.n	80074a2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007490:	f7fe fbac 	bl	8005bec <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	2b02      	cmp	r3, #2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e0e3      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074a2:	4b39      	ldr	r3, [pc, #228]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f0      	bne.n	8007490 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074ae:	4b36      	ldr	r3, [pc, #216]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80074b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074b2:	4b37      	ldr	r3, [pc, #220]	; (8007590 <HAL_RCC_OscConfig+0x774>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80074be:	0112      	lsls	r2, r2, #4
 80074c0:	430a      	orrs	r2, r1
 80074c2:	4931      	ldr	r1, [pc, #196]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	628b      	str	r3, [r1, #40]	; 0x28
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074cc:	3b01      	subs	r3, #1
 80074ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d6:	3b01      	subs	r3, #1
 80074d8:	025b      	lsls	r3, r3, #9
 80074da:	b29b      	uxth	r3, r3
 80074dc:	431a      	orrs	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	3b01      	subs	r3, #1
 80074e4:	041b      	lsls	r3, r3, #16
 80074e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f0:	3b01      	subs	r3, #1
 80074f2:	061b      	lsls	r3, r3, #24
 80074f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074f8:	4923      	ldr	r1, [pc, #140]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80074fe:	4b22      	ldr	r3, [pc, #136]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	4a21      	ldr	r2, [pc, #132]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007504:	f023 0301 	bic.w	r3, r3, #1
 8007508:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800750a:	4b1f      	ldr	r3, [pc, #124]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 800750c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800750e:	4b21      	ldr	r3, [pc, #132]	; (8007594 <HAL_RCC_OscConfig+0x778>)
 8007510:	4013      	ands	r3, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007516:	00d2      	lsls	r2, r2, #3
 8007518:	491b      	ldr	r1, [pc, #108]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 800751a:	4313      	orrs	r3, r2
 800751c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800751e:	4b1a      	ldr	r3, [pc, #104]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	f023 020c 	bic.w	r2, r3, #12
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	4917      	ldr	r1, [pc, #92]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 800752c:	4313      	orrs	r3, r2
 800752e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007530:	4b15      	ldr	r3, [pc, #84]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	f023 0202 	bic.w	r2, r3, #2
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753c:	4912      	ldr	r1, [pc, #72]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 800753e:	4313      	orrs	r3, r2
 8007540:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007542:	4b11      	ldr	r3, [pc, #68]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007546:	4a10      	ldr	r2, [pc, #64]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800754c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800754e:	4b0e      	ldr	r3, [pc, #56]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007552:	4a0d      	ldr	r2, [pc, #52]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007558:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800755a:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	4a0a      	ldr	r2, [pc, #40]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007564:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007566:	4b08      	ldr	r3, [pc, #32]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	4a07      	ldr	r2, [pc, #28]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 800756c:	f043 0301 	orr.w	r3, r3, #1
 8007570:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007572:	4b05      	ldr	r3, [pc, #20]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a04      	ldr	r2, [pc, #16]	; (8007588 <HAL_RCC_OscConfig+0x76c>)
 8007578:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800757c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800757e:	f7fe fb35 	bl	8005bec <HAL_GetTick>
 8007582:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007584:	e011      	b.n	80075aa <HAL_RCC_OscConfig+0x78e>
 8007586:	bf00      	nop
 8007588:	58024400 	.word	0x58024400
 800758c:	58024800 	.word	0x58024800
 8007590:	fffffc0c 	.word	0xfffffc0c
 8007594:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007598:	f7fe fb28 	bl	8005bec <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e05f      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075aa:	4b32      	ldr	r3, [pc, #200]	; (8007674 <HAL_RCC_OscConfig+0x858>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0f0      	beq.n	8007598 <HAL_RCC_OscConfig+0x77c>
 80075b6:	e057      	b.n	8007668 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075b8:	4b2e      	ldr	r3, [pc, #184]	; (8007674 <HAL_RCC_OscConfig+0x858>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2d      	ldr	r2, [pc, #180]	; (8007674 <HAL_RCC_OscConfig+0x858>)
 80075be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c4:	f7fe fb12 	bl	8005bec <HAL_GetTick>
 80075c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075ca:	e008      	b.n	80075de <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075cc:	f7fe fb0e 	bl	8005bec <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e045      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075de:	4b25      	ldr	r3, [pc, #148]	; (8007674 <HAL_RCC_OscConfig+0x858>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1f0      	bne.n	80075cc <HAL_RCC_OscConfig+0x7b0>
 80075ea:	e03d      	b.n	8007668 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80075ec:	4b21      	ldr	r3, [pc, #132]	; (8007674 <HAL_RCC_OscConfig+0x858>)
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80075f2:	4b20      	ldr	r3, [pc, #128]	; (8007674 <HAL_RCC_OscConfig+0x858>)
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d031      	beq.n	8007664 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f003 0203 	and.w	r2, r3, #3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800760a:	429a      	cmp	r2, r3
 800760c:	d12a      	bne.n	8007664 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	091b      	lsrs	r3, r3, #4
 8007612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800761a:	429a      	cmp	r2, r3
 800761c:	d122      	bne.n	8007664 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800762a:	429a      	cmp	r2, r3
 800762c:	d11a      	bne.n	8007664 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	0a5b      	lsrs	r3, r3, #9
 8007632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800763c:	429a      	cmp	r2, r3
 800763e:	d111      	bne.n	8007664 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	0c1b      	lsrs	r3, r3, #16
 8007644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800764e:	429a      	cmp	r2, r3
 8007650:	d108      	bne.n	8007664 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	0e1b      	lsrs	r3, r3, #24
 8007656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007660:	429a      	cmp	r2, r3
 8007662:	d001      	beq.n	8007668 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e000      	b.n	800766a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3730      	adds	r7, #48	; 0x30
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	58024400 	.word	0x58024400

08007678 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e19c      	b.n	80079c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800768c:	4b8a      	ldr	r3, [pc, #552]	; (80078b8 <HAL_RCC_ClockConfig+0x240>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 030f 	and.w	r3, r3, #15
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d910      	bls.n	80076bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800769a:	4b87      	ldr	r3, [pc, #540]	; (80078b8 <HAL_RCC_ClockConfig+0x240>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f023 020f 	bic.w	r2, r3, #15
 80076a2:	4985      	ldr	r1, [pc, #532]	; (80078b8 <HAL_RCC_ClockConfig+0x240>)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076aa:	4b83      	ldr	r3, [pc, #524]	; (80078b8 <HAL_RCC_ClockConfig+0x240>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d001      	beq.n	80076bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e184      	b.n	80079c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d010      	beq.n	80076ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	4b7b      	ldr	r3, [pc, #492]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d908      	bls.n	80076ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076d8:	4b78      	ldr	r3, [pc, #480]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	4975      	ldr	r1, [pc, #468]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d010      	beq.n	8007718 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	695a      	ldr	r2, [r3, #20]
 80076fa:	4b70      	ldr	r3, [pc, #448]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007702:	429a      	cmp	r2, r3
 8007704:	d908      	bls.n	8007718 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007706:	4b6d      	ldr	r3, [pc, #436]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	496a      	ldr	r1, [pc, #424]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007714:	4313      	orrs	r3, r2
 8007716:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0310 	and.w	r3, r3, #16
 8007720:	2b00      	cmp	r3, #0
 8007722:	d010      	beq.n	8007746 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699a      	ldr	r2, [r3, #24]
 8007728:	4b64      	ldr	r3, [pc, #400]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007730:	429a      	cmp	r2, r3
 8007732:	d908      	bls.n	8007746 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007734:	4b61      	ldr	r3, [pc, #388]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	495e      	ldr	r1, [pc, #376]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007742:	4313      	orrs	r3, r2
 8007744:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b00      	cmp	r3, #0
 8007750:	d010      	beq.n	8007774 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	69da      	ldr	r2, [r3, #28]
 8007756:	4b59      	ldr	r3, [pc, #356]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800775e:	429a      	cmp	r2, r3
 8007760:	d908      	bls.n	8007774 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007762:	4b56      	ldr	r3, [pc, #344]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	4953      	ldr	r1, [pc, #332]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007770:	4313      	orrs	r3, r2
 8007772:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d010      	beq.n	80077a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	4b4d      	ldr	r3, [pc, #308]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	429a      	cmp	r2, r3
 800778e:	d908      	bls.n	80077a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007790:	4b4a      	ldr	r3, [pc, #296]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	f023 020f 	bic.w	r2, r3, #15
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	4947      	ldr	r1, [pc, #284]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d055      	beq.n	800785a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80077ae:	4b43      	ldr	r3, [pc, #268]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	4940      	ldr	r1, [pc, #256]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d107      	bne.n	80077d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077c8:	4b3c      	ldr	r3, [pc, #240]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d121      	bne.n	8007818 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0f6      	b.n	80079c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d107      	bne.n	80077f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80077e0:	4b36      	ldr	r3, [pc, #216]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d115      	bne.n	8007818 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e0ea      	b.n	80079c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d107      	bne.n	8007808 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077f8:	4b30      	ldr	r3, [pc, #192]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	d109      	bne.n	8007818 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e0de      	b.n	80079c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007808:	4b2c      	ldr	r3, [pc, #176]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0d6      	b.n	80079c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007818:	4b28      	ldr	r3, [pc, #160]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f023 0207 	bic.w	r2, r3, #7
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	4925      	ldr	r1, [pc, #148]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007826:	4313      	orrs	r3, r2
 8007828:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800782a:	f7fe f9df 	bl	8005bec <HAL_GetTick>
 800782e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007830:	e00a      	b.n	8007848 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007832:	f7fe f9db 	bl	8005bec <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007840:	4293      	cmp	r3, r2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e0be      	b.n	80079c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007848:	4b1c      	ldr	r3, [pc, #112]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	429a      	cmp	r2, r3
 8007858:	d1eb      	bne.n	8007832 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d010      	beq.n	8007888 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	4b14      	ldr	r3, [pc, #80]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	429a      	cmp	r2, r3
 8007874:	d208      	bcs.n	8007888 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007876:	4b11      	ldr	r3, [pc, #68]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	f023 020f 	bic.w	r2, r3, #15
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	490e      	ldr	r1, [pc, #56]	; (80078bc <HAL_RCC_ClockConfig+0x244>)
 8007884:	4313      	orrs	r3, r2
 8007886:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007888:	4b0b      	ldr	r3, [pc, #44]	; (80078b8 <HAL_RCC_ClockConfig+0x240>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 030f 	and.w	r3, r3, #15
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d214      	bcs.n	80078c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007896:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <HAL_RCC_ClockConfig+0x240>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f023 020f 	bic.w	r2, r3, #15
 800789e:	4906      	ldr	r1, [pc, #24]	; (80078b8 <HAL_RCC_ClockConfig+0x240>)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078a6:	4b04      	ldr	r3, [pc, #16]	; (80078b8 <HAL_RCC_ClockConfig+0x240>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d005      	beq.n	80078c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e086      	b.n	80079c6 <HAL_RCC_ClockConfig+0x34e>
 80078b8:	52002000 	.word	0x52002000
 80078bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d010      	beq.n	80078ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691a      	ldr	r2, [r3, #16]
 80078d0:	4b3f      	ldr	r3, [pc, #252]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078d8:	429a      	cmp	r2, r3
 80078da:	d208      	bcs.n	80078ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078dc:	4b3c      	ldr	r3, [pc, #240]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	4939      	ldr	r1, [pc, #228]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0308 	and.w	r3, r3, #8
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d010      	beq.n	800791c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	695a      	ldr	r2, [r3, #20]
 80078fe:	4b34      	ldr	r3, [pc, #208]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 8007900:	69db      	ldr	r3, [r3, #28]
 8007902:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007906:	429a      	cmp	r2, r3
 8007908:	d208      	bcs.n	800791c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800790a:	4b31      	ldr	r3, [pc, #196]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	492e      	ldr	r1, [pc, #184]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 8007918:	4313      	orrs	r3, r2
 800791a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b00      	cmp	r3, #0
 8007926:	d010      	beq.n	800794a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699a      	ldr	r2, [r3, #24]
 800792c:	4b28      	ldr	r3, [pc, #160]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007934:	429a      	cmp	r2, r3
 8007936:	d208      	bcs.n	800794a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007938:	4b25      	ldr	r3, [pc, #148]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	4922      	ldr	r1, [pc, #136]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 8007946:	4313      	orrs	r3, r2
 8007948:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b00      	cmp	r3, #0
 8007954:	d010      	beq.n	8007978 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69da      	ldr	r2, [r3, #28]
 800795a:	4b1d      	ldr	r3, [pc, #116]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007962:	429a      	cmp	r2, r3
 8007964:	d208      	bcs.n	8007978 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007966:	4b1a      	ldr	r3, [pc, #104]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	4917      	ldr	r1, [pc, #92]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 8007974:	4313      	orrs	r3, r2
 8007976:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007978:	f000 f834 	bl	80079e4 <HAL_RCC_GetSysClockFreq>
 800797c:	4602      	mov	r2, r0
 800797e:	4b14      	ldr	r3, [pc, #80]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	0a1b      	lsrs	r3, r3, #8
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	4912      	ldr	r1, [pc, #72]	; (80079d4 <HAL_RCC_ClockConfig+0x35c>)
 800798a:	5ccb      	ldrb	r3, [r1, r3]
 800798c:	f003 031f 	and.w	r3, r3, #31
 8007990:	fa22 f303 	lsr.w	r3, r2, r3
 8007994:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007996:	4b0e      	ldr	r3, [pc, #56]	; (80079d0 <HAL_RCC_ClockConfig+0x358>)
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	4a0d      	ldr	r2, [pc, #52]	; (80079d4 <HAL_RCC_ClockConfig+0x35c>)
 80079a0:	5cd3      	ldrb	r3, [r2, r3]
 80079a2:	f003 031f 	and.w	r3, r3, #31
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	fa22 f303 	lsr.w	r3, r2, r3
 80079ac:	4a0a      	ldr	r2, [pc, #40]	; (80079d8 <HAL_RCC_ClockConfig+0x360>)
 80079ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079b0:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <HAL_RCC_ClockConfig+0x364>)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80079b6:	4b0a      	ldr	r3, [pc, #40]	; (80079e0 <HAL_RCC_ClockConfig+0x368>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe f8cc 	bl	8005b58 <HAL_InitTick>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	58024400 	.word	0x58024400
 80079d4:	080110b0 	.word	0x080110b0
 80079d8:	24000070 	.word	0x24000070
 80079dc:	2400006c 	.word	0x2400006c
 80079e0:	24000074 	.word	0x24000074

080079e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b089      	sub	sp, #36	; 0x24
 80079e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079ea:	4bb3      	ldr	r3, [pc, #716]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079f2:	2b18      	cmp	r3, #24
 80079f4:	f200 8155 	bhi.w	8007ca2 <HAL_RCC_GetSysClockFreq+0x2be>
 80079f8:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <HAL_RCC_GetSysClockFreq+0x1c>)
 80079fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fe:	bf00      	nop
 8007a00:	08007a65 	.word	0x08007a65
 8007a04:	08007ca3 	.word	0x08007ca3
 8007a08:	08007ca3 	.word	0x08007ca3
 8007a0c:	08007ca3 	.word	0x08007ca3
 8007a10:	08007ca3 	.word	0x08007ca3
 8007a14:	08007ca3 	.word	0x08007ca3
 8007a18:	08007ca3 	.word	0x08007ca3
 8007a1c:	08007ca3 	.word	0x08007ca3
 8007a20:	08007a8b 	.word	0x08007a8b
 8007a24:	08007ca3 	.word	0x08007ca3
 8007a28:	08007ca3 	.word	0x08007ca3
 8007a2c:	08007ca3 	.word	0x08007ca3
 8007a30:	08007ca3 	.word	0x08007ca3
 8007a34:	08007ca3 	.word	0x08007ca3
 8007a38:	08007ca3 	.word	0x08007ca3
 8007a3c:	08007ca3 	.word	0x08007ca3
 8007a40:	08007a91 	.word	0x08007a91
 8007a44:	08007ca3 	.word	0x08007ca3
 8007a48:	08007ca3 	.word	0x08007ca3
 8007a4c:	08007ca3 	.word	0x08007ca3
 8007a50:	08007ca3 	.word	0x08007ca3
 8007a54:	08007ca3 	.word	0x08007ca3
 8007a58:	08007ca3 	.word	0x08007ca3
 8007a5c:	08007ca3 	.word	0x08007ca3
 8007a60:	08007a97 	.word	0x08007a97
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a64:	4b94      	ldr	r3, [pc, #592]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a70:	4b91      	ldr	r3, [pc, #580]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	08db      	lsrs	r3, r3, #3
 8007a76:	f003 0303 	and.w	r3, r3, #3
 8007a7a:	4a90      	ldr	r2, [pc, #576]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007a82:	e111      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a84:	4b8d      	ldr	r3, [pc, #564]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a86:	61bb      	str	r3, [r7, #24]
    break;
 8007a88:	e10e      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007a8a:	4b8d      	ldr	r3, [pc, #564]	; (8007cc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a8c:	61bb      	str	r3, [r7, #24]
    break;
 8007a8e:	e10b      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007a90:	4b8c      	ldr	r3, [pc, #560]	; (8007cc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a92:	61bb      	str	r3, [r7, #24]
    break;
 8007a94:	e108      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a96:	4b88      	ldr	r3, [pc, #544]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007aa0:	4b85      	ldr	r3, [pc, #532]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa4:	091b      	lsrs	r3, r3, #4
 8007aa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aaa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007aac:	4b82      	ldr	r3, [pc, #520]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007ab6:	4b80      	ldr	r3, [pc, #512]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aba:	08db      	lsrs	r3, r3, #3
 8007abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	fb02 f303 	mul.w	r3, r2, r3
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ace:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 80e1 	beq.w	8007c9c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	f000 8083 	beq.w	8007be8 <HAL_RCC_GetSysClockFreq+0x204>
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	f200 80a1 	bhi.w	8007c2c <HAL_RCC_GetSysClockFreq+0x248>
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <HAL_RCC_GetSysClockFreq+0x114>
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d056      	beq.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007af6:	e099      	b.n	8007c2c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007af8:	4b6f      	ldr	r3, [pc, #444]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0320 	and.w	r3, r3, #32
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d02d      	beq.n	8007b60 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b04:	4b6c      	ldr	r3, [pc, #432]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	08db      	lsrs	r3, r3, #3
 8007b0a:	f003 0303 	and.w	r3, r3, #3
 8007b0e:	4a6b      	ldr	r2, [pc, #428]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b10:	fa22 f303 	lsr.w	r3, r2, r3
 8007b14:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	ee07 3a90 	vmov	s15, r3
 8007b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2e:	4b62      	ldr	r3, [pc, #392]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007cc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007b5e:	e087      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007ccc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b72:	4b51      	ldr	r3, [pc, #324]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007cc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ba2:	e065      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007cd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb6:	4b40      	ldr	r3, [pc, #256]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007cc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007be6:	e043      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007cd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfa:	4b2f      	ldr	r3, [pc, #188]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007cc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c2a:	e021      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007cd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3e:	4b1e      	ldr	r3, [pc, #120]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007cc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c6e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007c70:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c74:	0a5b      	lsrs	r3, r3, #9
 8007c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	ee07 3a90 	vmov	s15, r3
 8007c84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c88:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c94:	ee17 3a90 	vmov	r3, s15
 8007c98:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007c9a:	e005      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61bb      	str	r3, [r7, #24]
    break;
 8007ca0:	e002      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007ca2:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ca4:	61bb      	str	r3, [r7, #24]
    break;
 8007ca6:	bf00      	nop
  }

  return sysclockfreq;
 8007ca8:	69bb      	ldr	r3, [r7, #24]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3724      	adds	r7, #36	; 0x24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	58024400 	.word	0x58024400
 8007cbc:	03d09000 	.word	0x03d09000
 8007cc0:	003d0900 	.word	0x003d0900
 8007cc4:	017d7840 	.word	0x017d7840
 8007cc8:	46000000 	.word	0x46000000
 8007ccc:	4c742400 	.word	0x4c742400
 8007cd0:	4a742400 	.word	0x4a742400
 8007cd4:	4bbebc20 	.word	0x4bbebc20

08007cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007cde:	f7ff fe81 	bl	80079e4 <HAL_RCC_GetSysClockFreq>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	4b10      	ldr	r3, [pc, #64]	; (8007d28 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	0a1b      	lsrs	r3, r3, #8
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	490f      	ldr	r1, [pc, #60]	; (8007d2c <HAL_RCC_GetHCLKFreq+0x54>)
 8007cf0:	5ccb      	ldrb	r3, [r1, r3]
 8007cf2:	f003 031f 	and.w	r3, r3, #31
 8007cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <HAL_RCC_GetHCLKFreq+0x50>)
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	4a09      	ldr	r2, [pc, #36]	; (8007d2c <HAL_RCC_GetHCLKFreq+0x54>)
 8007d06:	5cd3      	ldrb	r3, [r2, r3]
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d12:	4a07      	ldr	r2, [pc, #28]	; (8007d30 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d16:	4a07      	ldr	r2, [pc, #28]	; (8007d34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007d1c:	4b04      	ldr	r3, [pc, #16]	; (8007d30 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	58024400 	.word	0x58024400
 8007d2c:	080110b0 	.word	0x080110b0
 8007d30:	24000070 	.word	0x24000070
 8007d34:	2400006c 	.word	0x2400006c

08007d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007d3c:	f7ff ffcc 	bl	8007cd8 <HAL_RCC_GetHCLKFreq>
 8007d40:	4602      	mov	r2, r0
 8007d42:	4b06      	ldr	r3, [pc, #24]	; (8007d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	091b      	lsrs	r3, r3, #4
 8007d48:	f003 0307 	and.w	r3, r3, #7
 8007d4c:	4904      	ldr	r1, [pc, #16]	; (8007d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d4e:	5ccb      	ldrb	r3, [r1, r3]
 8007d50:	f003 031f 	and.w	r3, r3, #31
 8007d54:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	080110b0 	.word	0x080110b0

08007d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007d68:	f7ff ffb6 	bl	8007cd8 <HAL_RCC_GetHCLKFreq>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	0a1b      	lsrs	r3, r3, #8
 8007d74:	f003 0307 	and.w	r3, r3, #7
 8007d78:	4904      	ldr	r1, [pc, #16]	; (8007d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d7a:	5ccb      	ldrb	r3, [r1, r3]
 8007d7c:	f003 031f 	and.w	r3, r3, #31
 8007d80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	58024400 	.word	0x58024400
 8007d8c:	080110b0 	.word	0x080110b0

08007d90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d98:	2300      	movs	r3, #0
 8007d9a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d03f      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007db4:	d02a      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007db6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dba:	d824      	bhi.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007dbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dc0:	d018      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dc6:	d81e      	bhi.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd0:	d007      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007dd2:	e018      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd4:	4ba3      	ldr	r3, [pc, #652]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	4aa2      	ldr	r2, [pc, #648]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007de0:	e015      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3304      	adds	r3, #4
 8007de6:	2102      	movs	r1, #2
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 f9d5 	bl	8009198 <RCCEx_PLL2_Config>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007df2:	e00c      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3324      	adds	r3, #36	; 0x24
 8007df8:	2102      	movs	r1, #2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f001 fa7e 	bl	80092fc <RCCEx_PLL3_Config>
 8007e00:	4603      	mov	r3, r0
 8007e02:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e04:	e003      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0a:	e000      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d109      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e14:	4b93      	ldr	r3, [pc, #588]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e20:	4990      	ldr	r1, [pc, #576]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	650b      	str	r3, [r1, #80]	; 0x50
 8007e26:	e001      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d03d      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d826      	bhi.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007e40:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e46:	bf00      	nop
 8007e48:	08007e5d 	.word	0x08007e5d
 8007e4c:	08007e6b 	.word	0x08007e6b
 8007e50:	08007e7d 	.word	0x08007e7d
 8007e54:	08007e95 	.word	0x08007e95
 8007e58:	08007e95 	.word	0x08007e95
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e5c:	4b81      	ldr	r3, [pc, #516]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	4a80      	ldr	r2, [pc, #512]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e68:	e015      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 f991 	bl	8009198 <RCCEx_PLL2_Config>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e7a:	e00c      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3324      	adds	r3, #36	; 0x24
 8007e80:	2100      	movs	r1, #0
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 fa3a 	bl	80092fc <RCCEx_PLL3_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e8c:	e003      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	75fb      	strb	r3, [r7, #23]
      break;
 8007e92:	e000      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e9c:	4b71      	ldr	r3, [pc, #452]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea0:	f023 0207 	bic.w	r2, r3, #7
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea8:	496e      	ldr	r1, [pc, #440]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	650b      	str	r3, [r1, #80]	; 0x50
 8007eae:	e001      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d042      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec8:	d02b      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ece:	d825      	bhi.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ed0:	2bc0      	cmp	r3, #192	; 0xc0
 8007ed2:	d028      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007ed4:	2bc0      	cmp	r3, #192	; 0xc0
 8007ed6:	d821      	bhi.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ed8:	2b80      	cmp	r3, #128	; 0x80
 8007eda:	d016      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007edc:	2b80      	cmp	r3, #128	; 0x80
 8007ede:	d81d      	bhi.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	d007      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007ee8:	e018      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eea:	4b5e      	ldr	r3, [pc, #376]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	4a5d      	ldr	r2, [pc, #372]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007ef6:	e017      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3304      	adds	r3, #4
 8007efc:	2100      	movs	r1, #0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f001 f94a 	bl	8009198 <RCCEx_PLL2_Config>
 8007f04:	4603      	mov	r3, r0
 8007f06:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007f08:	e00e      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3324      	adds	r3, #36	; 0x24
 8007f0e:	2100      	movs	r1, #0
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f9f3 	bl	80092fc <RCCEx_PLL3_Config>
 8007f16:	4603      	mov	r3, r0
 8007f18:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007f1a:	e005      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f20:	e002      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007f22:	bf00      	nop
 8007f24:	e000      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007f2e:	4b4d      	ldr	r3, [pc, #308]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f32:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f3a:	494a      	ldr	r1, [pc, #296]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	650b      	str	r3, [r1, #80]	; 0x50
 8007f40:	e001      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d049      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f5c:	d030      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007f5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f62:	d82a      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f68:	d02c      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007f6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f6e:	d824      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f74:	d018      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f7a:	d81e      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007f80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f84:	d007      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007f86:	e018      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f88:	4b36      	ldr	r3, [pc, #216]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	4a35      	ldr	r2, [pc, #212]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f94:	e017      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f001 f8fb 	bl	8009198 <RCCEx_PLL2_Config>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007fa6:	e00e      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3324      	adds	r3, #36	; 0x24
 8007fac:	2100      	movs	r1, #0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 f9a4 	bl	80092fc <RCCEx_PLL3_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fb8:	e005      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007fbe:	e002      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007fc0:	bf00      	nop
 8007fc2:	e000      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10a      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007fcc:	4b25      	ldr	r3, [pc, #148]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fda:	4922      	ldr	r1, [pc, #136]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	658b      	str	r3, [r1, #88]	; 0x58
 8007fe0:	e001      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d04b      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ffc:	d030      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007ffe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008002:	d82a      	bhi.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008004:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008008:	d02e      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800800a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800800e:	d824      	bhi.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008014:	d018      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800801a:	d81e      	bhi.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008024:	d007      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008026:	e018      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008028:	4b0e      	ldr	r3, [pc, #56]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	4a0d      	ldr	r2, [pc, #52]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800802e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008032:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008034:	e019      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	3304      	adds	r3, #4
 800803a:	2100      	movs	r1, #0
 800803c:	4618      	mov	r0, r3
 800803e:	f001 f8ab 	bl	8009198 <RCCEx_PLL2_Config>
 8008042:	4603      	mov	r3, r0
 8008044:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008046:	e010      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3324      	adds	r3, #36	; 0x24
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f001 f954 	bl	80092fc <RCCEx_PLL3_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008058:	e007      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	75fb      	strb	r3, [r7, #23]
      break;
 800805e:	e004      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008060:	bf00      	nop
 8008062:	e002      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008064:	58024400 	.word	0x58024400
      break;
 8008068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10a      	bne.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008070:	4b99      	ldr	r3, [pc, #612]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008074:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800807e:	4996      	ldr	r1, [pc, #600]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008080:	4313      	orrs	r3, r2
 8008082:	658b      	str	r3, [r1, #88]	; 0x58
 8008084:	e001      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d032      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800809a:	2b30      	cmp	r3, #48	; 0x30
 800809c:	d01c      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800809e:	2b30      	cmp	r3, #48	; 0x30
 80080a0:	d817      	bhi.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80080a2:	2b20      	cmp	r3, #32
 80080a4:	d00c      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	d813      	bhi.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d016      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80080ae:	2b10      	cmp	r3, #16
 80080b0:	d10f      	bne.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b2:	4b89      	ldr	r3, [pc, #548]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	4a88      	ldr	r2, [pc, #544]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80080be:	e00e      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3304      	adds	r3, #4
 80080c4:	2102      	movs	r1, #2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 f866 	bl	8009198 <RCCEx_PLL2_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80080d0:	e005      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	75fb      	strb	r3, [r7, #23]
      break;
 80080d6:	e002      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80080d8:	bf00      	nop
 80080da:	e000      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80080dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d109      	bne.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80080e4:	4b7c      	ldr	r3, [pc, #496]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080f0:	4979      	ldr	r1, [pc, #484]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080f6:	e001      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d047      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008110:	d030      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008116:	d82a      	bhi.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008118:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800811c:	d02c      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800811e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008122:	d824      	bhi.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008128:	d018      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800812a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800812e:	d81e      	bhi.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008130:	2b00      	cmp	r3, #0
 8008132:	d003      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008138:	d007      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800813a:	e018      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800813c:	4b66      	ldr	r3, [pc, #408]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	4a65      	ldr	r2, [pc, #404]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008146:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008148:	e017      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3304      	adds	r3, #4
 800814e:	2100      	movs	r1, #0
 8008150:	4618      	mov	r0, r3
 8008152:	f001 f821 	bl	8009198 <RCCEx_PLL2_Config>
 8008156:	4603      	mov	r3, r0
 8008158:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800815a:	e00e      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3324      	adds	r3, #36	; 0x24
 8008160:	2100      	movs	r1, #0
 8008162:	4618      	mov	r0, r3
 8008164:	f001 f8ca 	bl	80092fc <RCCEx_PLL3_Config>
 8008168:	4603      	mov	r3, r0
 800816a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800816c:	e005      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	75fb      	strb	r3, [r7, #23]
      break;
 8008172:	e002      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008174:	bf00      	nop
 8008176:	e000      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d109      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008180:	4b55      	ldr	r3, [pc, #340]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008184:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818c:	4952      	ldr	r1, [pc, #328]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800818e:	4313      	orrs	r3, r2
 8008190:	650b      	str	r3, [r1, #80]	; 0x50
 8008192:	e001      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d049      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081ac:	d02e      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80081ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081b2:	d828      	bhi.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80081b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081b8:	d02a      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80081ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081be:	d822      	bhi.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80081c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081c4:	d026      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80081c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081ca:	d81c      	bhi.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80081cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081d0:	d010      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80081d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081d6:	d816      	bhi.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01d      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80081dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e0:	d111      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3304      	adds	r3, #4
 80081e6:	2101      	movs	r1, #1
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 ffd5 	bl	8009198 <RCCEx_PLL2_Config>
 80081ee:	4603      	mov	r3, r0
 80081f0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80081f2:	e012      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3324      	adds	r3, #36	; 0x24
 80081f8:	2101      	movs	r1, #1
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 f87e 	bl	80092fc <RCCEx_PLL3_Config>
 8008200:	4603      	mov	r3, r0
 8008202:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008204:	e009      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	75fb      	strb	r3, [r7, #23]
      break;
 800820a:	e006      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800820c:	bf00      	nop
 800820e:	e004      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008210:	bf00      	nop
 8008212:	e002      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008214:	bf00      	nop
 8008216:	e000      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d109      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008220:	4b2d      	ldr	r3, [pc, #180]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008224:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822c:	492a      	ldr	r1, [pc, #168]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800822e:	4313      	orrs	r3, r2
 8008230:	650b      	str	r3, [r1, #80]	; 0x50
 8008232:	e001      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d04d      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800824a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800824e:	d02e      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008254:	d828      	bhi.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825a:	d02a      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800825c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008260:	d822      	bhi.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008262:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008266:	d026      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008268:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800826c:	d81c      	bhi.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800826e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008272:	d010      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008278:	d816      	bhi.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d01d      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800827e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008282:	d111      	bne.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3304      	adds	r3, #4
 8008288:	2101      	movs	r1, #1
 800828a:	4618      	mov	r0, r3
 800828c:	f000 ff84 	bl	8009198 <RCCEx_PLL2_Config>
 8008290:	4603      	mov	r3, r0
 8008292:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008294:	e012      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3324      	adds	r3, #36	; 0x24
 800829a:	2101      	movs	r1, #1
 800829c:	4618      	mov	r0, r3
 800829e:	f001 f82d 	bl	80092fc <RCCEx_PLL3_Config>
 80082a2:	4603      	mov	r3, r0
 80082a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80082a6:	e009      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	75fb      	strb	r3, [r7, #23]
      break;
 80082ac:	e006      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80082ae:	bf00      	nop
 80082b0:	e004      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80082b2:	bf00      	nop
 80082b4:	e002      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80082b6:	bf00      	nop
 80082b8:	e000      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80082ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10c      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80082c2:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80082c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082d0:	4901      	ldr	r1, [pc, #4]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	658b      	str	r3, [r1, #88]	; 0x58
 80082d6:	e003      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80082d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d02f      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082f4:	d00e      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80082f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082fa:	d814      	bhi.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d015      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008304:	d10f      	bne.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008306:	4baf      	ldr	r3, [pc, #700]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	4aae      	ldr	r2, [pc, #696]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800830c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008310:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008312:	e00c      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3304      	adds	r3, #4
 8008318:	2101      	movs	r1, #1
 800831a:	4618      	mov	r0, r3
 800831c:	f000 ff3c 	bl	8009198 <RCCEx_PLL2_Config>
 8008320:	4603      	mov	r3, r0
 8008322:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008324:	e003      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	75fb      	strb	r3, [r7, #23]
      break;
 800832a:	e000      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800832c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800832e:	7dfb      	ldrb	r3, [r7, #23]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d109      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008334:	4ba3      	ldr	r3, [pc, #652]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008338:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008340:	49a0      	ldr	r1, [pc, #640]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008342:	4313      	orrs	r3, r2
 8008344:	650b      	str	r3, [r1, #80]	; 0x50
 8008346:	e001      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d032      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835c:	2b03      	cmp	r3, #3
 800835e:	d81b      	bhi.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008360:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008366:	bf00      	nop
 8008368:	0800839f 	.word	0x0800839f
 800836c:	08008379 	.word	0x08008379
 8008370:	08008387 	.word	0x08008387
 8008374:	0800839f 	.word	0x0800839f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008378:	4b92      	ldr	r3, [pc, #584]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	4a91      	ldr	r2, [pc, #580]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800837e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008384:	e00c      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3304      	adds	r3, #4
 800838a:	2102      	movs	r1, #2
 800838c:	4618      	mov	r0, r3
 800838e:	f000 ff03 	bl	8009198 <RCCEx_PLL2_Config>
 8008392:	4603      	mov	r3, r0
 8008394:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008396:	e003      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	75fb      	strb	r3, [r7, #23]
      break;
 800839c:	e000      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800839e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d109      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80083a6:	4b87      	ldr	r3, [pc, #540]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083aa:	f023 0203 	bic.w	r2, r3, #3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b2:	4984      	ldr	r1, [pc, #528]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80083b8:	e001      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 8086 	beq.w	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083cc:	4b7e      	ldr	r3, [pc, #504]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a7d      	ldr	r2, [pc, #500]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80083d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083d8:	f7fd fc08 	bl	8005bec <HAL_GetTick>
 80083dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083de:	e009      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083e0:	f7fd fc04 	bl	8005bec <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b64      	cmp	r3, #100	; 0x64
 80083ec:	d902      	bls.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	75fb      	strb	r3, [r7, #23]
        break;
 80083f2:	e005      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083f4:	4b74      	ldr	r3, [pc, #464]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0ef      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008400:	7dfb      	ldrb	r3, [r7, #23]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d166      	bne.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008406:	4b6f      	ldr	r3, [pc, #444]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008408:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008410:	4053      	eors	r3, r2
 8008412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008416:	2b00      	cmp	r3, #0
 8008418:	d013      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800841a:	4b6a      	ldr	r3, [pc, #424]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008422:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008424:	4b67      	ldr	r3, [pc, #412]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008428:	4a66      	ldr	r2, [pc, #408]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800842a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800842e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008430:	4b64      	ldr	r3, [pc, #400]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008434:	4a63      	ldr	r2, [pc, #396]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800843a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800843c:	4a61      	ldr	r2, [pc, #388]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800844c:	d115      	bne.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844e:	f7fd fbcd 	bl	8005bec <HAL_GetTick>
 8008452:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008454:	e00b      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008456:	f7fd fbc9 	bl	8005bec <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	f241 3288 	movw	r2, #5000	; 0x1388
 8008464:	4293      	cmp	r3, r2
 8008466:	d902      	bls.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	75fb      	strb	r3, [r7, #23]
            break;
 800846c:	e005      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800846e:	4b55      	ldr	r3, [pc, #340]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0ed      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d126      	bne.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800848a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800848e:	d10d      	bne.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008490:	4b4c      	ldr	r3, [pc, #304]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800849e:	0919      	lsrs	r1, r3, #4
 80084a0:	4b4a      	ldr	r3, [pc, #296]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80084a2:	400b      	ands	r3, r1
 80084a4:	4947      	ldr	r1, [pc, #284]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	610b      	str	r3, [r1, #16]
 80084aa:	e005      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80084ac:	4b45      	ldr	r3, [pc, #276]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	4a44      	ldr	r2, [pc, #272]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80084b6:	6113      	str	r3, [r2, #16]
 80084b8:	4b42      	ldr	r3, [pc, #264]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084c6:	493f      	ldr	r1, [pc, #252]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	670b      	str	r3, [r1, #112]	; 0x70
 80084cc:	e004      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	75bb      	strb	r3, [r7, #22]
 80084d2:	e001      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
 80084d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 8085 	beq.w	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ea:	2b28      	cmp	r3, #40	; 0x28
 80084ec:	d866      	bhi.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	080085d1 	.word	0x080085d1
 80084f8:	080085bd 	.word	0x080085bd
 80084fc:	080085bd 	.word	0x080085bd
 8008500:	080085bd 	.word	0x080085bd
 8008504:	080085bd 	.word	0x080085bd
 8008508:	080085bd 	.word	0x080085bd
 800850c:	080085bd 	.word	0x080085bd
 8008510:	080085bd 	.word	0x080085bd
 8008514:	08008599 	.word	0x08008599
 8008518:	080085bd 	.word	0x080085bd
 800851c:	080085bd 	.word	0x080085bd
 8008520:	080085bd 	.word	0x080085bd
 8008524:	080085bd 	.word	0x080085bd
 8008528:	080085bd 	.word	0x080085bd
 800852c:	080085bd 	.word	0x080085bd
 8008530:	080085bd 	.word	0x080085bd
 8008534:	080085ab 	.word	0x080085ab
 8008538:	080085bd 	.word	0x080085bd
 800853c:	080085bd 	.word	0x080085bd
 8008540:	080085bd 	.word	0x080085bd
 8008544:	080085bd 	.word	0x080085bd
 8008548:	080085bd 	.word	0x080085bd
 800854c:	080085bd 	.word	0x080085bd
 8008550:	080085bd 	.word	0x080085bd
 8008554:	080085d1 	.word	0x080085d1
 8008558:	080085bd 	.word	0x080085bd
 800855c:	080085bd 	.word	0x080085bd
 8008560:	080085bd 	.word	0x080085bd
 8008564:	080085bd 	.word	0x080085bd
 8008568:	080085bd 	.word	0x080085bd
 800856c:	080085bd 	.word	0x080085bd
 8008570:	080085bd 	.word	0x080085bd
 8008574:	080085d1 	.word	0x080085d1
 8008578:	080085bd 	.word	0x080085bd
 800857c:	080085bd 	.word	0x080085bd
 8008580:	080085bd 	.word	0x080085bd
 8008584:	080085bd 	.word	0x080085bd
 8008588:	080085bd 	.word	0x080085bd
 800858c:	080085bd 	.word	0x080085bd
 8008590:	080085bd 	.word	0x080085bd
 8008594:	080085d1 	.word	0x080085d1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3304      	adds	r3, #4
 800859c:	2101      	movs	r1, #1
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 fdfa 	bl	8009198 <RCCEx_PLL2_Config>
 80085a4:	4603      	mov	r3, r0
 80085a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80085a8:	e013      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	3324      	adds	r3, #36	; 0x24
 80085ae:	2101      	movs	r1, #1
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fea3 	bl	80092fc <RCCEx_PLL3_Config>
 80085b6:	4603      	mov	r3, r0
 80085b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80085ba:	e00a      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	75fb      	strb	r3, [r7, #23]
      break;
 80085c0:	e007      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80085c2:	bf00      	nop
 80085c4:	58024400 	.word	0x58024400
 80085c8:	58024800 	.word	0x58024800
 80085cc:	00ffffcf 	.word	0x00ffffcf
      break;
 80085d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d109      	bne.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80085d8:	4b96      	ldr	r3, [pc, #600]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80085da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085dc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085e4:	4993      	ldr	r1, [pc, #588]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	654b      	str	r3, [r1, #84]	; 0x54
 80085ea:	e001      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ec:	7dfb      	ldrb	r3, [r7, #23]
 80085ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d038      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008600:	2b05      	cmp	r3, #5
 8008602:	d821      	bhi.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008604:	a201      	add	r2, pc, #4	; (adr r2, 800860c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	0800864f 	.word	0x0800864f
 8008610:	08008625 	.word	0x08008625
 8008614:	08008637 	.word	0x08008637
 8008618:	0800864f 	.word	0x0800864f
 800861c:	0800864f 	.word	0x0800864f
 8008620:	0800864f 	.word	0x0800864f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3304      	adds	r3, #4
 8008628:	2101      	movs	r1, #1
 800862a:	4618      	mov	r0, r3
 800862c:	f000 fdb4 	bl	8009198 <RCCEx_PLL2_Config>
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008634:	e00c      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3324      	adds	r3, #36	; 0x24
 800863a:	2101      	movs	r1, #1
 800863c:	4618      	mov	r0, r3
 800863e:	f000 fe5d 	bl	80092fc <RCCEx_PLL3_Config>
 8008642:	4603      	mov	r3, r0
 8008644:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008646:	e003      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	75fb      	strb	r3, [r7, #23]
      break;
 800864c:	e000      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800864e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d109      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008656:	4b77      	ldr	r3, [pc, #476]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865a:	f023 0207 	bic.w	r2, r3, #7
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008662:	4974      	ldr	r1, [pc, #464]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008664:	4313      	orrs	r3, r2
 8008666:	654b      	str	r3, [r1, #84]	; 0x54
 8008668:	e001      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d03a      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008680:	2b05      	cmp	r3, #5
 8008682:	d821      	bhi.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	080086cf 	.word	0x080086cf
 8008690:	080086a5 	.word	0x080086a5
 8008694:	080086b7 	.word	0x080086b7
 8008698:	080086cf 	.word	0x080086cf
 800869c:	080086cf 	.word	0x080086cf
 80086a0:	080086cf 	.word	0x080086cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3304      	adds	r3, #4
 80086a8:	2101      	movs	r1, #1
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fd74 	bl	8009198 <RCCEx_PLL2_Config>
 80086b0:	4603      	mov	r3, r0
 80086b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80086b4:	e00c      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3324      	adds	r3, #36	; 0x24
 80086ba:	2101      	movs	r1, #1
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fe1d 	bl	80092fc <RCCEx_PLL3_Config>
 80086c2:	4603      	mov	r3, r0
 80086c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80086c6:	e003      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	75fb      	strb	r3, [r7, #23]
      break;
 80086cc:	e000      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80086ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086d6:	4b57      	ldr	r3, [pc, #348]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80086d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086da:	f023 0207 	bic.w	r2, r3, #7
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e4:	4953      	ldr	r1, [pc, #332]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	658b      	str	r3, [r1, #88]	; 0x58
 80086ea:	e001      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0320 	and.w	r3, r3, #32
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d04b      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008706:	d02e      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800870c:	d828      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800870e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008712:	d02a      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008718:	d822      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800871a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800871e:	d026      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008720:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008724:	d81c      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800872a:	d010      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800872c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008730:	d816      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d01d      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800873a:	d111      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3304      	adds	r3, #4
 8008740:	2100      	movs	r1, #0
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fd28 	bl	8009198 <RCCEx_PLL2_Config>
 8008748:	4603      	mov	r3, r0
 800874a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800874c:	e012      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	3324      	adds	r3, #36	; 0x24
 8008752:	2102      	movs	r1, #2
 8008754:	4618      	mov	r0, r3
 8008756:	f000 fdd1 	bl	80092fc <RCCEx_PLL3_Config>
 800875a:	4603      	mov	r3, r0
 800875c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800875e:	e009      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	75fb      	strb	r3, [r7, #23]
      break;
 8008764:	e006      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008766:	bf00      	nop
 8008768:	e004      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800876a:	bf00      	nop
 800876c:	e002      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800876e:	bf00      	nop
 8008770:	e000      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10a      	bne.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800877a:	4b2e      	ldr	r3, [pc, #184]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800877c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008788:	492a      	ldr	r1, [pc, #168]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800878a:	4313      	orrs	r3, r2
 800878c:	654b      	str	r3, [r1, #84]	; 0x54
 800878e:	e001      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008790:	7dfb      	ldrb	r3, [r7, #23]
 8008792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879c:	2b00      	cmp	r3, #0
 800879e:	d04d      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80087aa:	d02e      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80087ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80087b0:	d828      	bhi.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80087b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087b6:	d02a      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80087b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087bc:	d822      	bhi.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80087be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087c2:	d026      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80087c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087c8:	d81c      	bhi.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80087ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ce:	d010      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80087d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087d4:	d816      	bhi.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d01d      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80087da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087de:	d111      	bne.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3304      	adds	r3, #4
 80087e4:	2100      	movs	r1, #0
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fcd6 	bl	8009198 <RCCEx_PLL2_Config>
 80087ec:	4603      	mov	r3, r0
 80087ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80087f0:	e012      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3324      	adds	r3, #36	; 0x24
 80087f6:	2102      	movs	r1, #2
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fd7f 	bl	80092fc <RCCEx_PLL3_Config>
 80087fe:	4603      	mov	r3, r0
 8008800:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008802:	e009      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	75fb      	strb	r3, [r7, #23]
      break;
 8008808:	e006      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800880a:	bf00      	nop
 800880c:	e004      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800880e:	bf00      	nop
 8008810:	e002      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008812:	bf00      	nop
 8008814:	e000      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10c      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800881e:	4b05      	ldr	r3, [pc, #20]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008822:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800882c:	4901      	ldr	r1, [pc, #4]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800882e:	4313      	orrs	r3, r2
 8008830:	658b      	str	r3, [r1, #88]	; 0x58
 8008832:	e003      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008834:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008844:	2b00      	cmp	r3, #0
 8008846:	d04b      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800884e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008852:	d02e      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008854:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008858:	d828      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800885a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800885e:	d02a      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008864:	d822      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008866:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800886a:	d026      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800886c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008870:	d81c      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008872:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008876:	d010      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800887c:	d816      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d01d      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008886:	d111      	bne.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3304      	adds	r3, #4
 800888c:	2100      	movs	r1, #0
 800888e:	4618      	mov	r0, r3
 8008890:	f000 fc82 	bl	8009198 <RCCEx_PLL2_Config>
 8008894:	4603      	mov	r3, r0
 8008896:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008898:	e012      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3324      	adds	r3, #36	; 0x24
 800889e:	2102      	movs	r1, #2
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 fd2b 	bl	80092fc <RCCEx_PLL3_Config>
 80088a6:	4603      	mov	r3, r0
 80088a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80088aa:	e009      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	75fb      	strb	r3, [r7, #23]
      break;
 80088b0:	e006      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80088b2:	bf00      	nop
 80088b4:	e004      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80088b6:	bf00      	nop
 80088b8:	e002      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80088ba:	bf00      	nop
 80088bc:	e000      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80088be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10a      	bne.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80088c6:	4b9d      	ldr	r3, [pc, #628]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088d4:	4999      	ldr	r1, [pc, #612]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	658b      	str	r3, [r1, #88]	; 0x58
 80088da:	e001      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01a      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f6:	d10a      	bne.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3324      	adds	r3, #36	; 0x24
 80088fc:	2102      	movs	r1, #2
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fcfc 	bl	80092fc <RCCEx_PLL3_Config>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800890e:	4b8b      	ldr	r3, [pc, #556]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008912:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800891c:	4987      	ldr	r1, [pc, #540]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800891e:	4313      	orrs	r3, r2
 8008920:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0310 	and.w	r3, r3, #16
 800892a:	2b00      	cmp	r3, #0
 800892c:	d01a      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008938:	d10a      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	3324      	adds	r3, #36	; 0x24
 800893e:	2102      	movs	r1, #2
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fcdb 	bl	80092fc <RCCEx_PLL3_Config>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008950:	4b7a      	ldr	r3, [pc, #488]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800895e:	4977      	ldr	r1, [pc, #476]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008960:	4313      	orrs	r3, r2
 8008962:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d034      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008976:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800897a:	d01d      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800897c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008980:	d817      	bhi.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898a:	d009      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800898c:	e011      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3304      	adds	r3, #4
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f000 fbff 	bl	8009198 <RCCEx_PLL2_Config>
 800899a:	4603      	mov	r3, r0
 800899c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800899e:	e00c      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3324      	adds	r3, #36	; 0x24
 80089a4:	2102      	movs	r1, #2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fca8 	bl	80092fc <RCCEx_PLL3_Config>
 80089ac:	4603      	mov	r3, r0
 80089ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80089b0:	e003      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	75fb      	strb	r3, [r7, #23]
      break;
 80089b6:	e000      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80089b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10a      	bne.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089c0:	4b5e      	ldr	r3, [pc, #376]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80089ce:	495b      	ldr	r1, [pc, #364]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	658b      	str	r3, [r1, #88]	; 0x58
 80089d4:	e001      	b.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d033      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089f0:	d01c      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80089f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089f6:	d816      	bhi.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80089f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089fc:	d003      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80089fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a02:	d007      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008a04:	e00f      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a06:	4b4d      	ldr	r3, [pc, #308]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	4a4c      	ldr	r2, [pc, #304]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a12:	e00c      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	3324      	adds	r3, #36	; 0x24
 8008a18:	2101      	movs	r1, #1
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fc6e 	bl	80092fc <RCCEx_PLL3_Config>
 8008a20:	4603      	mov	r3, r0
 8008a22:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a24:	e003      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	75fb      	strb	r3, [r7, #23]
      break;
 8008a2a:	e000      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a34:	4b41      	ldr	r3, [pc, #260]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a42:	493e      	ldr	r1, [pc, #248]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	654b      	str	r3, [r1, #84]	; 0x54
 8008a48:	e001      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d029      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a66:	d007      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008a68:	e00f      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a6a:	4b34      	ldr	r3, [pc, #208]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	4a33      	ldr	r2, [pc, #204]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a76:	e00b      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	2102      	movs	r1, #2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 fb8a 	bl	8009198 <RCCEx_PLL2_Config>
 8008a84:	4603      	mov	r3, r0
 8008a86:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a88:	e002      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d109      	bne.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a96:	4b29      	ldr	r3, [pc, #164]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa2:	4926      	ldr	r1, [pc, #152]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008aa8:	e001      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3324      	adds	r3, #36	; 0x24
 8008abe:	2102      	movs	r1, #2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fc1b 	bl	80092fc <RCCEx_PLL3_Config>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d033      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ae4:	d017      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008aea:	d811      	bhi.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008af0:	d013      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008af6:	d80b      	bhi.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d010      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b00:	d106      	bne.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b02:	4b0e      	ldr	r3, [pc, #56]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b06:	4a0d      	ldr	r2, [pc, #52]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008b0e:	e007      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	75fb      	strb	r3, [r7, #23]
      break;
 8008b14:	e004      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008b16:	bf00      	nop
 8008b18:	e002      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008b1a:	bf00      	nop
 8008b1c:	e000      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10c      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b32:	4902      	ldr	r1, [pc, #8]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	654b      	str	r3, [r1, #84]	; 0x54
 8008b38:	e004      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008b3a:	bf00      	nop
 8008b3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
 8008b42:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d008      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b50:	4b31      	ldr	r3, [pc, #196]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5c:	492e      	ldr	r1, [pc, #184]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b6e:	4b2a      	ldr	r3, [pc, #168]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b7c:	4926      	ldr	r1, [pc, #152]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d008      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b8e:	4b22      	ldr	r3, [pc, #136]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b9a:	491f      	ldr	r1, [pc, #124]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00d      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bac:	4b1a      	ldr	r3, [pc, #104]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	4a19      	ldr	r2, [pc, #100]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bb6:	6113      	str	r3, [r2, #16]
 8008bb8:	4b17      	ldr	r3, [pc, #92]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bba:	691a      	ldr	r2, [r3, #16]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008bc2:	4915      	ldr	r1, [pc, #84]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	da08      	bge.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008bd0:	4b11      	ldr	r3, [pc, #68]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bdc:	490e      	ldr	r1, [pc, #56]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d009      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bee:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bfc:	4906      	ldr	r1, [pc, #24]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008c02:	7dbb      	ldrb	r3, [r7, #22]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e000      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	58024400 	.word	0x58024400

08008c1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c20:	f7ff f85a 	bl	8007cd8 <HAL_RCC_GetHCLKFreq>
 8008c24:	4602      	mov	r2, r0
 8008c26:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	091b      	lsrs	r3, r3, #4
 8008c2c:	f003 0307 	and.w	r3, r3, #7
 8008c30:	4904      	ldr	r1, [pc, #16]	; (8008c44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c32:	5ccb      	ldrb	r3, [r1, r3]
 8008c34:	f003 031f 	and.w	r3, r3, #31
 8008c38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	58024400 	.word	0x58024400
 8008c44:	080110b0 	.word	0x080110b0

08008c48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b089      	sub	sp, #36	; 0x24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c50:	4ba1      	ldr	r3, [pc, #644]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c54:	f003 0303 	and.w	r3, r3, #3
 8008c58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008c5a:	4b9f      	ldr	r3, [pc, #636]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	0b1b      	lsrs	r3, r3, #12
 8008c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c66:	4b9c      	ldr	r3, [pc, #624]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	091b      	lsrs	r3, r3, #4
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008c72:	4b99      	ldr	r3, [pc, #612]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c76:	08db      	lsrs	r3, r3, #3
 8008c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	fb02 f303 	mul.w	r3, r2, r3
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 8111 	beq.w	8008eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	f000 8083 	beq.w	8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	f200 80a1 	bhi.w	8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d056      	beq.n	8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008cb2:	e099      	b.n	8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cb4:	4b88      	ldr	r3, [pc, #544]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0320 	and.w	r3, r3, #32
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d02d      	beq.n	8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cc0:	4b85      	ldr	r3, [pc, #532]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	08db      	lsrs	r3, r3, #3
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	4a84      	ldr	r2, [pc, #528]	; (8008edc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	ee07 3a90 	vmov	s15, r3
 8008cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	ee07 3a90 	vmov	s15, r3
 8008ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cea:	4b7b      	ldr	r3, [pc, #492]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008d1a:	e087      	b.n	8008e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2e:	4b6a      	ldr	r3, [pc, #424]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d5e:	e065      	b.n	8008e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d72:	4b59      	ldr	r3, [pc, #356]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008da2:	e043      	b.n	8008e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b48      	ldr	r3, [pc, #288]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008de6:	e021      	b.n	8008e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfa:	4b37      	ldr	r3, [pc, #220]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008e2c:	4b2a      	ldr	r3, [pc, #168]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e30:	0a5b      	lsrs	r3, r3, #9
 8008e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e52:	ee17 2a90 	vmov	r2, s15
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008e5a:	4b1f      	ldr	r3, [pc, #124]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	0c1b      	lsrs	r3, r3, #16
 8008e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e64:	ee07 3a90 	vmov	s15, r3
 8008e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e80:	ee17 2a90 	vmov	r2, s15
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008e88:	4b13      	ldr	r3, [pc, #76]	; (8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8c:	0e1b      	lsrs	r3, r3, #24
 8008e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eae:	ee17 2a90 	vmov	r2, s15
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008eb6:	e008      	b.n	8008eca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	609a      	str	r2, [r3, #8]
}
 8008eca:	bf00      	nop
 8008ecc:	3724      	adds	r7, #36	; 0x24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	58024400 	.word	0x58024400
 8008edc:	03d09000 	.word	0x03d09000
 8008ee0:	46000000 	.word	0x46000000
 8008ee4:	4c742400 	.word	0x4c742400
 8008ee8:	4a742400 	.word	0x4a742400
 8008eec:	4bbebc20 	.word	0x4bbebc20

08008ef0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b089      	sub	sp, #36	; 0x24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ef8:	4ba1      	ldr	r3, [pc, #644]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efc:	f003 0303 	and.w	r3, r3, #3
 8008f00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008f02:	4b9f      	ldr	r3, [pc, #636]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f06:	0d1b      	lsrs	r3, r3, #20
 8008f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f0e:	4b9c      	ldr	r3, [pc, #624]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f12:	0a1b      	lsrs	r3, r3, #8
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008f1a:	4b99      	ldr	r3, [pc, #612]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f1e:	08db      	lsrs	r3, r3, #3
 8008f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	fb02 f303 	mul.w	r3, r2, r3
 8008f2a:	ee07 3a90 	vmov	s15, r3
 8008f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 8111 	beq.w	8009160 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	f000 8083 	beq.w	800904c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	f200 80a1 	bhi.w	8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d056      	beq.n	8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f5a:	e099      	b.n	8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f5c:	4b88      	ldr	r3, [pc, #544]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0320 	and.w	r3, r3, #32
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d02d      	beq.n	8008fc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f68:	4b85      	ldr	r3, [pc, #532]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	08db      	lsrs	r3, r3, #3
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	4a84      	ldr	r2, [pc, #528]	; (8009184 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f74:	fa22 f303 	lsr.w	r3, r2, r3
 8008f78:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	ee07 3a90 	vmov	s15, r3
 8008f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	ee07 3a90 	vmov	s15, r3
 8008f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f92:	4b7b      	ldr	r3, [pc, #492]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f9a:	ee07 3a90 	vmov	s15, r3
 8008f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fa6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fbe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008fc2:	e087      	b.n	80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800918c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd6:	4b6a      	ldr	r3, [pc, #424]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fde:	ee07 3a90 	vmov	s15, r3
 8008fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009002:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009006:	e065      	b.n	80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009012:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800901a:	4b59      	ldr	r3, [pc, #356]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800901c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800902a:	ed97 6a03 	vldr	s12, [r7, #12]
 800902e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800903a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800903e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009046:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800904a:	e043      	b.n	80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009056:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800905a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905e:	4b48      	ldr	r3, [pc, #288]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009072:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800907a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800908a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800908e:	e021      	b.n	80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800909e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a2:	4b37      	ldr	r3, [pc, #220]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80090d4:	4b2a      	ldr	r3, [pc, #168]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d8:	0a5b      	lsrs	r3, r3, #9
 80090da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80090f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090fa:	ee17 2a90 	vmov	r2, s15
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009102:	4b1f      	ldr	r3, [pc, #124]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	0c1b      	lsrs	r3, r3, #16
 8009108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800910c:	ee07 3a90 	vmov	s15, r3
 8009110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009118:	ee37 7a87 	vadd.f32	s14, s15, s14
 800911c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009128:	ee17 2a90 	vmov	r2, s15
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009130:	4b13      	ldr	r3, [pc, #76]	; (8009180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009134:	0e1b      	lsrs	r3, r3, #24
 8009136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009142:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800914a:	edd7 6a07 	vldr	s13, [r7, #28]
 800914e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009156:	ee17 2a90 	vmov	r2, s15
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800915e:	e008      	b.n	8009172 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	609a      	str	r2, [r3, #8]
}
 8009172:	bf00      	nop
 8009174:	3724      	adds	r7, #36	; 0x24
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	58024400 	.word	0x58024400
 8009184:	03d09000 	.word	0x03d09000
 8009188:	46000000 	.word	0x46000000
 800918c:	4c742400 	.word	0x4c742400
 8009190:	4a742400 	.word	0x4a742400
 8009194:	4bbebc20 	.word	0x4bbebc20

08009198 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091a6:	4b53      	ldr	r3, [pc, #332]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091aa:	f003 0303 	and.w	r3, r3, #3
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d101      	bne.n	80091b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e099      	b.n	80092ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80091b6:	4b4f      	ldr	r3, [pc, #316]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a4e      	ldr	r2, [pc, #312]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c2:	f7fc fd13 	bl	8005bec <HAL_GetTick>
 80091c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091c8:	e008      	b.n	80091dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80091ca:	f7fc fd0f 	bl	8005bec <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d901      	bls.n	80091dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e086      	b.n	80092ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091dc:	4b45      	ldr	r3, [pc, #276]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1f0      	bne.n	80091ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80091e8:	4b42      	ldr	r3, [pc, #264]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	031b      	lsls	r3, r3, #12
 80091f6:	493f      	ldr	r1, [pc, #252]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	628b      	str	r3, [r1, #40]	; 0x28
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	3b01      	subs	r3, #1
 8009202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	3b01      	subs	r3, #1
 800920c:	025b      	lsls	r3, r3, #9
 800920e:	b29b      	uxth	r3, r3
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	3b01      	subs	r3, #1
 8009218:	041b      	lsls	r3, r3, #16
 800921a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	3b01      	subs	r3, #1
 8009226:	061b      	lsls	r3, r3, #24
 8009228:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800922c:	4931      	ldr	r1, [pc, #196]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800922e:	4313      	orrs	r3, r2
 8009230:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009232:	4b30      	ldr	r3, [pc, #192]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	492d      	ldr	r1, [pc, #180]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009240:	4313      	orrs	r3, r2
 8009242:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009244:	4b2b      	ldr	r3, [pc, #172]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	f023 0220 	bic.w	r2, r3, #32
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	4928      	ldr	r1, [pc, #160]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009252:	4313      	orrs	r3, r2
 8009254:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009256:	4b27      	ldr	r3, [pc, #156]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925a:	4a26      	ldr	r2, [pc, #152]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800925c:	f023 0310 	bic.w	r3, r3, #16
 8009260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009262:	4b24      	ldr	r3, [pc, #144]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009266:	4b24      	ldr	r3, [pc, #144]	; (80092f8 <RCCEx_PLL2_Config+0x160>)
 8009268:	4013      	ands	r3, r2
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	69d2      	ldr	r2, [r2, #28]
 800926e:	00d2      	lsls	r2, r2, #3
 8009270:	4920      	ldr	r1, [pc, #128]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009272:	4313      	orrs	r3, r2
 8009274:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009276:	4b1f      	ldr	r3, [pc, #124]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	4a1e      	ldr	r2, [pc, #120]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800927c:	f043 0310 	orr.w	r3, r3, #16
 8009280:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d106      	bne.n	8009296 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009288:	4b1a      	ldr	r3, [pc, #104]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	4a19      	ldr	r2, [pc, #100]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800928e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009292:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009294:	e00f      	b.n	80092b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d106      	bne.n	80092aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800929c:	4b15      	ldr	r3, [pc, #84]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a14      	ldr	r2, [pc, #80]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092a8:	e005      	b.n	80092b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80092aa:	4b12      	ldr	r3, [pc, #72]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ae:	4a11      	ldr	r2, [pc, #68]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a0e      	ldr	r2, [pc, #56]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092c2:	f7fc fc93 	bl	8005bec <HAL_GetTick>
 80092c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092c8:	e008      	b.n	80092dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80092ca:	f7fc fc8f 	bl	8005bec <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d901      	bls.n	80092dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e006      	b.n	80092ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092dc:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <RCCEx_PLL2_Config+0x15c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0f0      	beq.n	80092ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	58024400 	.word	0x58024400
 80092f8:	ffff0007 	.word	0xffff0007

080092fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800930a:	4b53      	ldr	r3, [pc, #332]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	2b03      	cmp	r3, #3
 8009314:	d101      	bne.n	800931a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e099      	b.n	800944e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800931a:	4b4f      	ldr	r3, [pc, #316]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a4e      	ldr	r2, [pc, #312]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009326:	f7fc fc61 	bl	8005bec <HAL_GetTick>
 800932a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800932c:	e008      	b.n	8009340 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800932e:	f7fc fc5d 	bl	8005bec <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	2b02      	cmp	r3, #2
 800933a:	d901      	bls.n	8009340 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e086      	b.n	800944e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009340:	4b45      	ldr	r3, [pc, #276]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1f0      	bne.n	800932e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800934c:	4b42      	ldr	r3, [pc, #264]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 800934e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009350:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	051b      	lsls	r3, r3, #20
 800935a:	493f      	ldr	r1, [pc, #252]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 800935c:	4313      	orrs	r3, r2
 800935e:	628b      	str	r3, [r1, #40]	; 0x28
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	3b01      	subs	r3, #1
 8009366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	3b01      	subs	r3, #1
 8009370:	025b      	lsls	r3, r3, #9
 8009372:	b29b      	uxth	r3, r3
 8009374:	431a      	orrs	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	3b01      	subs	r3, #1
 800937c:	041b      	lsls	r3, r3, #16
 800937e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	3b01      	subs	r3, #1
 800938a:	061b      	lsls	r3, r3, #24
 800938c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009390:	4931      	ldr	r1, [pc, #196]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009392:	4313      	orrs	r3, r2
 8009394:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009396:	4b30      	ldr	r3, [pc, #192]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	492d      	ldr	r1, [pc, #180]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093a4:	4313      	orrs	r3, r2
 80093a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80093a8:	4b2b      	ldr	r3, [pc, #172]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	4928      	ldr	r1, [pc, #160]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80093ba:	4b27      	ldr	r3, [pc, #156]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093be:	4a26      	ldr	r2, [pc, #152]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80093c6:	4b24      	ldr	r3, [pc, #144]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ca:	4b24      	ldr	r3, [pc, #144]	; (800945c <RCCEx_PLL3_Config+0x160>)
 80093cc:	4013      	ands	r3, r2
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	69d2      	ldr	r2, [r2, #28]
 80093d2:	00d2      	lsls	r2, r2, #3
 80093d4:	4920      	ldr	r1, [pc, #128]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80093da:	4b1f      	ldr	r3, [pc, #124]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093de:	4a1e      	ldr	r2, [pc, #120]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d106      	bne.n	80093fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80093ec:	4b1a      	ldr	r3, [pc, #104]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	4a19      	ldr	r2, [pc, #100]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 80093f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093f8:	e00f      	b.n	800941a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d106      	bne.n	800940e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009400:	4b15      	ldr	r3, [pc, #84]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	4a14      	ldr	r2, [pc, #80]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009406:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800940a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800940c:	e005      	b.n	800941a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800940e:	4b12      	ldr	r3, [pc, #72]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	4a11      	ldr	r2, [pc, #68]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009418:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800941a:	4b0f      	ldr	r3, [pc, #60]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a0e      	ldr	r2, [pc, #56]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009426:	f7fc fbe1 	bl	8005bec <HAL_GetTick>
 800942a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800942c:	e008      	b.n	8009440 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800942e:	f7fc fbdd 	bl	8005bec <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	2b02      	cmp	r3, #2
 800943a:	d901      	bls.n	8009440 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e006      	b.n	800944e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009440:	4b05      	ldr	r3, [pc, #20]	; (8009458 <RCCEx_PLL3_Config+0x15c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0f0      	beq.n	800942e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800944c:	7bfb      	ldrb	r3, [r7, #15]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	58024400 	.word	0x58024400
 800945c:	ffff0007 	.word	0xffff0007

08009460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e049      	b.n	8009506 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7fa fa1c 	bl	80038c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3304      	adds	r3, #4
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f001 f982 	bl	800a7a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b01      	cmp	r3, #1
 8009522:	d001      	beq.n	8009528 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e04c      	b.n	80095c2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a26      	ldr	r2, [pc, #152]	; (80095d0 <HAL_TIM_Base_Start+0xc0>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d022      	beq.n	8009580 <HAL_TIM_Base_Start+0x70>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009542:	d01d      	beq.n	8009580 <HAL_TIM_Base_Start+0x70>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a22      	ldr	r2, [pc, #136]	; (80095d4 <HAL_TIM_Base_Start+0xc4>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d018      	beq.n	8009580 <HAL_TIM_Base_Start+0x70>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a21      	ldr	r2, [pc, #132]	; (80095d8 <HAL_TIM_Base_Start+0xc8>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d013      	beq.n	8009580 <HAL_TIM_Base_Start+0x70>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a1f      	ldr	r2, [pc, #124]	; (80095dc <HAL_TIM_Base_Start+0xcc>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d00e      	beq.n	8009580 <HAL_TIM_Base_Start+0x70>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a1e      	ldr	r2, [pc, #120]	; (80095e0 <HAL_TIM_Base_Start+0xd0>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d009      	beq.n	8009580 <HAL_TIM_Base_Start+0x70>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a1c      	ldr	r2, [pc, #112]	; (80095e4 <HAL_TIM_Base_Start+0xd4>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d004      	beq.n	8009580 <HAL_TIM_Base_Start+0x70>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a1b      	ldr	r2, [pc, #108]	; (80095e8 <HAL_TIM_Base_Start+0xd8>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d115      	bne.n	80095ac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	4b19      	ldr	r3, [pc, #100]	; (80095ec <HAL_TIM_Base_Start+0xdc>)
 8009588:	4013      	ands	r3, r2
 800958a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b06      	cmp	r3, #6
 8009590:	d015      	beq.n	80095be <HAL_TIM_Base_Start+0xae>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009598:	d011      	beq.n	80095be <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0201 	orr.w	r2, r2, #1
 80095a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095aa:	e008      	b.n	80095be <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 0201 	orr.w	r2, r2, #1
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	e000      	b.n	80095c0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	40010000 	.word	0x40010000
 80095d4:	40000400 	.word	0x40000400
 80095d8:	40000800 	.word	0x40000800
 80095dc:	40000c00 	.word	0x40000c00
 80095e0:	40010400 	.word	0x40010400
 80095e4:	40001800 	.word	0x40001800
 80095e8:	40014000 	.word	0x40014000
 80095ec:	00010007 	.word	0x00010007

080095f0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6a1a      	ldr	r2, [r3, #32]
 80095fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8009602:	4013      	ands	r3, r2
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10f      	bne.n	8009628 <HAL_TIM_Base_Stop+0x38>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6a1a      	ldr	r2, [r3, #32]
 800960e:	f240 4344 	movw	r3, #1092	; 0x444
 8009612:	4013      	ands	r3, r2
 8009614:	2b00      	cmp	r3, #0
 8009616:	d107      	bne.n	8009628 <HAL_TIM_Base_Stop+0x38>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f022 0201 	bic.w	r2, r2, #1
 8009626:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
	...

08009640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b01      	cmp	r3, #1
 8009652:	d001      	beq.n	8009658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e054      	b.n	8009702 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68da      	ldr	r2, [r3, #12]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f042 0201 	orr.w	r2, r2, #1
 800966e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a26      	ldr	r2, [pc, #152]	; (8009710 <HAL_TIM_Base_Start_IT+0xd0>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d022      	beq.n	80096c0 <HAL_TIM_Base_Start_IT+0x80>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009682:	d01d      	beq.n	80096c0 <HAL_TIM_Base_Start_IT+0x80>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a22      	ldr	r2, [pc, #136]	; (8009714 <HAL_TIM_Base_Start_IT+0xd4>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d018      	beq.n	80096c0 <HAL_TIM_Base_Start_IT+0x80>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a21      	ldr	r2, [pc, #132]	; (8009718 <HAL_TIM_Base_Start_IT+0xd8>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d013      	beq.n	80096c0 <HAL_TIM_Base_Start_IT+0x80>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a1f      	ldr	r2, [pc, #124]	; (800971c <HAL_TIM_Base_Start_IT+0xdc>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00e      	beq.n	80096c0 <HAL_TIM_Base_Start_IT+0x80>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a1e      	ldr	r2, [pc, #120]	; (8009720 <HAL_TIM_Base_Start_IT+0xe0>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d009      	beq.n	80096c0 <HAL_TIM_Base_Start_IT+0x80>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a1c      	ldr	r2, [pc, #112]	; (8009724 <HAL_TIM_Base_Start_IT+0xe4>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d004      	beq.n	80096c0 <HAL_TIM_Base_Start_IT+0x80>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a1b      	ldr	r2, [pc, #108]	; (8009728 <HAL_TIM_Base_Start_IT+0xe8>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d115      	bne.n	80096ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	4b19      	ldr	r3, [pc, #100]	; (800972c <HAL_TIM_Base_Start_IT+0xec>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b06      	cmp	r3, #6
 80096d0:	d015      	beq.n	80096fe <HAL_TIM_Base_Start_IT+0xbe>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d8:	d011      	beq.n	80096fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0201 	orr.w	r2, r2, #1
 80096e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ea:	e008      	b.n	80096fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 0201 	orr.w	r2, r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	e000      	b.n	8009700 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	40010000 	.word	0x40010000
 8009714:	40000400 	.word	0x40000400
 8009718:	40000800 	.word	0x40000800
 800971c:	40000c00 	.word	0x40000c00
 8009720:	40010400 	.word	0x40010400
 8009724:	40001800 	.word	0x40001800
 8009728:	40014000 	.word	0x40014000
 800972c:	00010007 	.word	0x00010007

08009730 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68da      	ldr	r2, [r3, #12]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 0201 	bic.w	r2, r2, #1
 8009746:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6a1a      	ldr	r2, [r3, #32]
 800974e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009752:	4013      	ands	r3, r2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10f      	bne.n	8009778 <HAL_TIM_Base_Stop_IT+0x48>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6a1a      	ldr	r2, [r3, #32]
 800975e:	f240 4344 	movw	r3, #1092	; 0x444
 8009762:	4013      	ands	r3, r2
 8009764:	2b00      	cmp	r3, #0
 8009766:	d107      	bne.n	8009778 <HAL_TIM_Base_Stop_IT+0x48>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 0201 	bic.w	r2, r2, #1
 8009776:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b082      	sub	sp, #8
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e049      	b.n	8009834 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d106      	bne.n	80097ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f841 	bl	800983c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2202      	movs	r2, #2
 80097be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3304      	adds	r3, #4
 80097ca:	4619      	mov	r1, r3
 80097cc:	4610      	mov	r0, r2
 80097ce:	f000 ffeb 	bl	800a7a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d109      	bne.n	8009874 <HAL_TIM_PWM_Start+0x24>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b01      	cmp	r3, #1
 800986a:	bf14      	ite	ne
 800986c:	2301      	movne	r3, #1
 800986e:	2300      	moveq	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	e03c      	b.n	80098ee <HAL_TIM_PWM_Start+0x9e>
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2b04      	cmp	r3, #4
 8009878:	d109      	bne.n	800988e <HAL_TIM_PWM_Start+0x3e>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b01      	cmp	r3, #1
 8009884:	bf14      	ite	ne
 8009886:	2301      	movne	r3, #1
 8009888:	2300      	moveq	r3, #0
 800988a:	b2db      	uxtb	r3, r3
 800988c:	e02f      	b.n	80098ee <HAL_TIM_PWM_Start+0x9e>
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b08      	cmp	r3, #8
 8009892:	d109      	bne.n	80098a8 <HAL_TIM_PWM_Start+0x58>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b01      	cmp	r3, #1
 800989e:	bf14      	ite	ne
 80098a0:	2301      	movne	r3, #1
 80098a2:	2300      	moveq	r3, #0
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	e022      	b.n	80098ee <HAL_TIM_PWM_Start+0x9e>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b0c      	cmp	r3, #12
 80098ac:	d109      	bne.n	80098c2 <HAL_TIM_PWM_Start+0x72>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	bf14      	ite	ne
 80098ba:	2301      	movne	r3, #1
 80098bc:	2300      	moveq	r3, #0
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	e015      	b.n	80098ee <HAL_TIM_PWM_Start+0x9e>
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b10      	cmp	r3, #16
 80098c6:	d109      	bne.n	80098dc <HAL_TIM_PWM_Start+0x8c>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	bf14      	ite	ne
 80098d4:	2301      	movne	r3, #1
 80098d6:	2300      	moveq	r3, #0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	e008      	b.n	80098ee <HAL_TIM_PWM_Start+0x9e>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	bf14      	ite	ne
 80098e8:	2301      	movne	r3, #1
 80098ea:	2300      	moveq	r3, #0
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e0a1      	b.n	8009a3a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d104      	bne.n	8009906 <HAL_TIM_PWM_Start+0xb6>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009904:	e023      	b.n	800994e <HAL_TIM_PWM_Start+0xfe>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b04      	cmp	r3, #4
 800990a:	d104      	bne.n	8009916 <HAL_TIM_PWM_Start+0xc6>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009914:	e01b      	b.n	800994e <HAL_TIM_PWM_Start+0xfe>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b08      	cmp	r3, #8
 800991a:	d104      	bne.n	8009926 <HAL_TIM_PWM_Start+0xd6>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009924:	e013      	b.n	800994e <HAL_TIM_PWM_Start+0xfe>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b0c      	cmp	r3, #12
 800992a:	d104      	bne.n	8009936 <HAL_TIM_PWM_Start+0xe6>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2202      	movs	r2, #2
 8009930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009934:	e00b      	b.n	800994e <HAL_TIM_PWM_Start+0xfe>
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	2b10      	cmp	r3, #16
 800993a:	d104      	bne.n	8009946 <HAL_TIM_PWM_Start+0xf6>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2202      	movs	r2, #2
 8009940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009944:	e003      	b.n	800994e <HAL_TIM_PWM_Start+0xfe>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2202      	movs	r2, #2
 800994a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2201      	movs	r2, #1
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	4618      	mov	r0, r3
 8009958:	f001 fc5e 	bl	800b218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a38      	ldr	r2, [pc, #224]	; (8009a44 <HAL_TIM_PWM_Start+0x1f4>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d013      	beq.n	800998e <HAL_TIM_PWM_Start+0x13e>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a37      	ldr	r2, [pc, #220]	; (8009a48 <HAL_TIM_PWM_Start+0x1f8>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d00e      	beq.n	800998e <HAL_TIM_PWM_Start+0x13e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a35      	ldr	r2, [pc, #212]	; (8009a4c <HAL_TIM_PWM_Start+0x1fc>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d009      	beq.n	800998e <HAL_TIM_PWM_Start+0x13e>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a34      	ldr	r2, [pc, #208]	; (8009a50 <HAL_TIM_PWM_Start+0x200>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d004      	beq.n	800998e <HAL_TIM_PWM_Start+0x13e>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a32      	ldr	r2, [pc, #200]	; (8009a54 <HAL_TIM_PWM_Start+0x204>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d101      	bne.n	8009992 <HAL_TIM_PWM_Start+0x142>
 800998e:	2301      	movs	r3, #1
 8009990:	e000      	b.n	8009994 <HAL_TIM_PWM_Start+0x144>
 8009992:	2300      	movs	r3, #0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d007      	beq.n	80099a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a25      	ldr	r2, [pc, #148]	; (8009a44 <HAL_TIM_PWM_Start+0x1f4>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d022      	beq.n	80099f8 <HAL_TIM_PWM_Start+0x1a8>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ba:	d01d      	beq.n	80099f8 <HAL_TIM_PWM_Start+0x1a8>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a25      	ldr	r2, [pc, #148]	; (8009a58 <HAL_TIM_PWM_Start+0x208>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d018      	beq.n	80099f8 <HAL_TIM_PWM_Start+0x1a8>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a24      	ldr	r2, [pc, #144]	; (8009a5c <HAL_TIM_PWM_Start+0x20c>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d013      	beq.n	80099f8 <HAL_TIM_PWM_Start+0x1a8>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a22      	ldr	r2, [pc, #136]	; (8009a60 <HAL_TIM_PWM_Start+0x210>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d00e      	beq.n	80099f8 <HAL_TIM_PWM_Start+0x1a8>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a1a      	ldr	r2, [pc, #104]	; (8009a48 <HAL_TIM_PWM_Start+0x1f8>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d009      	beq.n	80099f8 <HAL_TIM_PWM_Start+0x1a8>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a1e      	ldr	r2, [pc, #120]	; (8009a64 <HAL_TIM_PWM_Start+0x214>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d004      	beq.n	80099f8 <HAL_TIM_PWM_Start+0x1a8>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a16      	ldr	r2, [pc, #88]	; (8009a4c <HAL_TIM_PWM_Start+0x1fc>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d115      	bne.n	8009a24 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	689a      	ldr	r2, [r3, #8]
 80099fe:	4b1a      	ldr	r3, [pc, #104]	; (8009a68 <HAL_TIM_PWM_Start+0x218>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b06      	cmp	r3, #6
 8009a08:	d015      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x1e6>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a10:	d011      	beq.n	8009a36 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f042 0201 	orr.w	r2, r2, #1
 8009a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a22:	e008      	b.n	8009a36 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0201 	orr.w	r2, r2, #1
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	e000      	b.n	8009a38 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	40010000 	.word	0x40010000
 8009a48:	40010400 	.word	0x40010400
 8009a4c:	40014000 	.word	0x40014000
 8009a50:	40014400 	.word	0x40014400
 8009a54:	40014800 	.word	0x40014800
 8009a58:	40000400 	.word	0x40000400
 8009a5c:	40000800 	.word	0x40000800
 8009a60:	40000c00 	.word	0x40000c00
 8009a64:	40001800 	.word	0x40001800
 8009a68:	00010007 	.word	0x00010007

08009a6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f001 fbca 	bl	800b218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a3e      	ldr	r2, [pc, #248]	; (8009b84 <HAL_TIM_PWM_Stop+0x118>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d013      	beq.n	8009ab6 <HAL_TIM_PWM_Stop+0x4a>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a3d      	ldr	r2, [pc, #244]	; (8009b88 <HAL_TIM_PWM_Stop+0x11c>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d00e      	beq.n	8009ab6 <HAL_TIM_PWM_Stop+0x4a>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a3b      	ldr	r2, [pc, #236]	; (8009b8c <HAL_TIM_PWM_Stop+0x120>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d009      	beq.n	8009ab6 <HAL_TIM_PWM_Stop+0x4a>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a3a      	ldr	r2, [pc, #232]	; (8009b90 <HAL_TIM_PWM_Stop+0x124>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d004      	beq.n	8009ab6 <HAL_TIM_PWM_Stop+0x4a>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a38      	ldr	r2, [pc, #224]	; (8009b94 <HAL_TIM_PWM_Stop+0x128>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d101      	bne.n	8009aba <HAL_TIM_PWM_Stop+0x4e>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e000      	b.n	8009abc <HAL_TIM_PWM_Stop+0x50>
 8009aba:	2300      	movs	r3, #0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d017      	beq.n	8009af0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6a1a      	ldr	r2, [r3, #32]
 8009ac6:	f241 1311 	movw	r3, #4369	; 0x1111
 8009aca:	4013      	ands	r3, r2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10f      	bne.n	8009af0 <HAL_TIM_PWM_Stop+0x84>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6a1a      	ldr	r2, [r3, #32]
 8009ad6:	f240 4344 	movw	r3, #1092	; 0x444
 8009ada:	4013      	ands	r3, r2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d107      	bne.n	8009af0 <HAL_TIM_PWM_Stop+0x84>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009aee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6a1a      	ldr	r2, [r3, #32]
 8009af6:	f241 1311 	movw	r3, #4369	; 0x1111
 8009afa:	4013      	ands	r3, r2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10f      	bne.n	8009b20 <HAL_TIM_PWM_Stop+0xb4>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6a1a      	ldr	r2, [r3, #32]
 8009b06:	f240 4344 	movw	r3, #1092	; 0x444
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d107      	bne.n	8009b20 <HAL_TIM_PWM_Stop+0xb4>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f022 0201 	bic.w	r2, r2, #1
 8009b1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d104      	bne.n	8009b30 <HAL_TIM_PWM_Stop+0xc4>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b2e:	e023      	b.n	8009b78 <HAL_TIM_PWM_Stop+0x10c>
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	d104      	bne.n	8009b40 <HAL_TIM_PWM_Stop+0xd4>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b3e:	e01b      	b.n	8009b78 <HAL_TIM_PWM_Stop+0x10c>
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b08      	cmp	r3, #8
 8009b44:	d104      	bne.n	8009b50 <HAL_TIM_PWM_Stop+0xe4>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b4e:	e013      	b.n	8009b78 <HAL_TIM_PWM_Stop+0x10c>
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2b0c      	cmp	r3, #12
 8009b54:	d104      	bne.n	8009b60 <HAL_TIM_PWM_Stop+0xf4>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b5e:	e00b      	b.n	8009b78 <HAL_TIM_PWM_Stop+0x10c>
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2b10      	cmp	r3, #16
 8009b64:	d104      	bne.n	8009b70 <HAL_TIM_PWM_Stop+0x104>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b6e:	e003      	b.n	8009b78 <HAL_TIM_PWM_Stop+0x10c>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	40010000 	.word	0x40010000
 8009b88:	40010400 	.word	0x40010400
 8009b8c:	40014000 	.word	0x40014000
 8009b90:	40014400 	.word	0x40014400
 8009b94:	40014800 	.word	0x40014800

08009b98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e049      	b.n	8009c3e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d106      	bne.n	8009bc4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f841 	bl	8009c46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	f000 fde6 	bl	800a7a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b083      	sub	sp, #12
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009c4e:	bf00      	nop
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b082      	sub	sp, #8
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 fad3 	bl	800b218 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6a1a      	ldr	r2, [r3, #32]
 8009c78:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10f      	bne.n	8009ca2 <HAL_TIM_IC_Stop+0x48>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6a1a      	ldr	r2, [r3, #32]
 8009c88:	f240 4344 	movw	r3, #1092	; 0x444
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d107      	bne.n	8009ca2 <HAL_TIM_IC_Stop+0x48>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 0201 	bic.w	r2, r2, #1
 8009ca0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d104      	bne.n	8009cb2 <HAL_TIM_IC_Stop+0x58>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cb0:	e023      	b.n	8009cfa <HAL_TIM_IC_Stop+0xa0>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d104      	bne.n	8009cc2 <HAL_TIM_IC_Stop+0x68>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cc0:	e01b      	b.n	8009cfa <HAL_TIM_IC_Stop+0xa0>
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b08      	cmp	r3, #8
 8009cc6:	d104      	bne.n	8009cd2 <HAL_TIM_IC_Stop+0x78>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cd0:	e013      	b.n	8009cfa <HAL_TIM_IC_Stop+0xa0>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b0c      	cmp	r3, #12
 8009cd6:	d104      	bne.n	8009ce2 <HAL_TIM_IC_Stop+0x88>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ce0:	e00b      	b.n	8009cfa <HAL_TIM_IC_Stop+0xa0>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b10      	cmp	r3, #16
 8009ce6:	d104      	bne.n	8009cf2 <HAL_TIM_IC_Stop+0x98>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cf0:	e003      	b.n	8009cfa <HAL_TIM_IC_Stop+0xa0>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <HAL_TIM_IC_Stop+0xb0>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d08:	e013      	b.n	8009d32 <HAL_TIM_IC_Stop+0xd8>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	d104      	bne.n	8009d1a <HAL_TIM_IC_Stop+0xc0>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d18:	e00b      	b.n	8009d32 <HAL_TIM_IC_Stop+0xd8>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	d104      	bne.n	8009d2a <HAL_TIM_IC_Stop+0xd0>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d28:	e003      	b.n	8009d32 <HAL_TIM_IC_Stop+0xd8>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d104      	bne.n	8009d5a <HAL_TIM_IC_Start_IT+0x1e>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	e023      	b.n	8009da2 <HAL_TIM_IC_Start_IT+0x66>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	d104      	bne.n	8009d6a <HAL_TIM_IC_Start_IT+0x2e>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	e01b      	b.n	8009da2 <HAL_TIM_IC_Start_IT+0x66>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2b08      	cmp	r3, #8
 8009d6e:	d104      	bne.n	8009d7a <HAL_TIM_IC_Start_IT+0x3e>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	e013      	b.n	8009da2 <HAL_TIM_IC_Start_IT+0x66>
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	2b0c      	cmp	r3, #12
 8009d7e:	d104      	bne.n	8009d8a <HAL_TIM_IC_Start_IT+0x4e>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	e00b      	b.n	8009da2 <HAL_TIM_IC_Start_IT+0x66>
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	2b10      	cmp	r3, #16
 8009d8e:	d104      	bne.n	8009d9a <HAL_TIM_IC_Start_IT+0x5e>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	e003      	b.n	8009da2 <HAL_TIM_IC_Start_IT+0x66>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d104      	bne.n	8009db4 <HAL_TIM_IC_Start_IT+0x78>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	e013      	b.n	8009ddc <HAL_TIM_IC_Start_IT+0xa0>
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2b04      	cmp	r3, #4
 8009db8:	d104      	bne.n	8009dc4 <HAL_TIM_IC_Start_IT+0x88>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	e00b      	b.n	8009ddc <HAL_TIM_IC_Start_IT+0xa0>
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	2b08      	cmp	r3, #8
 8009dc8:	d104      	bne.n	8009dd4 <HAL_TIM_IC_Start_IT+0x98>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	e003      	b.n	8009ddc <HAL_TIM_IC_Start_IT+0xa0>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d102      	bne.n	8009dea <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009de4:	7b7b      	ldrb	r3, [r7, #13]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d001      	beq.n	8009dee <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e0e2      	b.n	8009fb4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d104      	bne.n	8009dfe <HAL_TIM_IC_Start_IT+0xc2>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2202      	movs	r2, #2
 8009df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dfc:	e023      	b.n	8009e46 <HAL_TIM_IC_Start_IT+0x10a>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b04      	cmp	r3, #4
 8009e02:	d104      	bne.n	8009e0e <HAL_TIM_IC_Start_IT+0xd2>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e0c:	e01b      	b.n	8009e46 <HAL_TIM_IC_Start_IT+0x10a>
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b08      	cmp	r3, #8
 8009e12:	d104      	bne.n	8009e1e <HAL_TIM_IC_Start_IT+0xe2>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e1c:	e013      	b.n	8009e46 <HAL_TIM_IC_Start_IT+0x10a>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b0c      	cmp	r3, #12
 8009e22:	d104      	bne.n	8009e2e <HAL_TIM_IC_Start_IT+0xf2>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e2c:	e00b      	b.n	8009e46 <HAL_TIM_IC_Start_IT+0x10a>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b10      	cmp	r3, #16
 8009e32:	d104      	bne.n	8009e3e <HAL_TIM_IC_Start_IT+0x102>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2202      	movs	r2, #2
 8009e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e3c:	e003      	b.n	8009e46 <HAL_TIM_IC_Start_IT+0x10a>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2202      	movs	r2, #2
 8009e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d104      	bne.n	8009e56 <HAL_TIM_IC_Start_IT+0x11a>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e54:	e013      	b.n	8009e7e <HAL_TIM_IC_Start_IT+0x142>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	2b04      	cmp	r3, #4
 8009e5a:	d104      	bne.n	8009e66 <HAL_TIM_IC_Start_IT+0x12a>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e64:	e00b      	b.n	8009e7e <HAL_TIM_IC_Start_IT+0x142>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b08      	cmp	r3, #8
 8009e6a:	d104      	bne.n	8009e76 <HAL_TIM_IC_Start_IT+0x13a>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e74:	e003      	b.n	8009e7e <HAL_TIM_IC_Start_IT+0x142>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2202      	movs	r2, #2
 8009e7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2b0c      	cmp	r3, #12
 8009e82:	d841      	bhi.n	8009f08 <HAL_TIM_IC_Start_IT+0x1cc>
 8009e84:	a201      	add	r2, pc, #4	; (adr r2, 8009e8c <HAL_TIM_IC_Start_IT+0x150>)
 8009e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8a:	bf00      	nop
 8009e8c:	08009ec1 	.word	0x08009ec1
 8009e90:	08009f09 	.word	0x08009f09
 8009e94:	08009f09 	.word	0x08009f09
 8009e98:	08009f09 	.word	0x08009f09
 8009e9c:	08009ed3 	.word	0x08009ed3
 8009ea0:	08009f09 	.word	0x08009f09
 8009ea4:	08009f09 	.word	0x08009f09
 8009ea8:	08009f09 	.word	0x08009f09
 8009eac:	08009ee5 	.word	0x08009ee5
 8009eb0:	08009f09 	.word	0x08009f09
 8009eb4:	08009f09 	.word	0x08009f09
 8009eb8:	08009f09 	.word	0x08009f09
 8009ebc:	08009ef7 	.word	0x08009ef7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0202 	orr.w	r2, r2, #2
 8009ece:	60da      	str	r2, [r3, #12]
      break;
 8009ed0:	e01d      	b.n	8009f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68da      	ldr	r2, [r3, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f042 0204 	orr.w	r2, r2, #4
 8009ee0:	60da      	str	r2, [r3, #12]
      break;
 8009ee2:	e014      	b.n	8009f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f042 0208 	orr.w	r2, r2, #8
 8009ef2:	60da      	str	r2, [r3, #12]
      break;
 8009ef4:	e00b      	b.n	8009f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f042 0210 	orr.w	r2, r2, #16
 8009f04:	60da      	str	r2, [r3, #12]
      break;
 8009f06:	e002      	b.n	8009f0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d14e      	bne.n	8009fb2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f001 f97b 	bl	800b218 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a25      	ldr	r2, [pc, #148]	; (8009fbc <HAL_TIM_IC_Start_IT+0x280>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d022      	beq.n	8009f72 <HAL_TIM_IC_Start_IT+0x236>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f34:	d01d      	beq.n	8009f72 <HAL_TIM_IC_Start_IT+0x236>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a21      	ldr	r2, [pc, #132]	; (8009fc0 <HAL_TIM_IC_Start_IT+0x284>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d018      	beq.n	8009f72 <HAL_TIM_IC_Start_IT+0x236>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a1f      	ldr	r2, [pc, #124]	; (8009fc4 <HAL_TIM_IC_Start_IT+0x288>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d013      	beq.n	8009f72 <HAL_TIM_IC_Start_IT+0x236>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a1e      	ldr	r2, [pc, #120]	; (8009fc8 <HAL_TIM_IC_Start_IT+0x28c>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d00e      	beq.n	8009f72 <HAL_TIM_IC_Start_IT+0x236>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a1c      	ldr	r2, [pc, #112]	; (8009fcc <HAL_TIM_IC_Start_IT+0x290>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d009      	beq.n	8009f72 <HAL_TIM_IC_Start_IT+0x236>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a1b      	ldr	r2, [pc, #108]	; (8009fd0 <HAL_TIM_IC_Start_IT+0x294>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d004      	beq.n	8009f72 <HAL_TIM_IC_Start_IT+0x236>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a19      	ldr	r2, [pc, #100]	; (8009fd4 <HAL_TIM_IC_Start_IT+0x298>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d115      	bne.n	8009f9e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689a      	ldr	r2, [r3, #8]
 8009f78:	4b17      	ldr	r3, [pc, #92]	; (8009fd8 <HAL_TIM_IC_Start_IT+0x29c>)
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b06      	cmp	r3, #6
 8009f82:	d015      	beq.n	8009fb0 <HAL_TIM_IC_Start_IT+0x274>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8a:	d011      	beq.n	8009fb0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f042 0201 	orr.w	r2, r2, #1
 8009f9a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f9c:	e008      	b.n	8009fb0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f042 0201 	orr.w	r2, r2, #1
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	e000      	b.n	8009fb2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fb0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	40010000 	.word	0x40010000
 8009fc0:	40000400 	.word	0x40000400
 8009fc4:	40000800 	.word	0x40000800
 8009fc8:	40000c00 	.word	0x40000c00
 8009fcc:	40010400 	.word	0x40010400
 8009fd0:	40001800 	.word	0x40001800
 8009fd4:	40014000 	.word	0x40014000
 8009fd8:	00010007 	.word	0x00010007

08009fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d122      	bne.n	800a038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d11b      	bne.n	800a038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0202 	mvn.w	r2, #2
 800a008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	f003 0303 	and.w	r3, r3, #3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7f8 fe0c 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 800a024:	e005      	b.n	800a032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fba0 	bl	800a76c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fba7 	bl	800a780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	f003 0304 	and.w	r3, r3, #4
 800a042:	2b04      	cmp	r3, #4
 800a044:	d122      	bne.n	800a08c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b04      	cmp	r3, #4
 800a052:	d11b      	bne.n	800a08c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f06f 0204 	mvn.w	r2, #4
 800a05c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2202      	movs	r2, #2
 800a062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d003      	beq.n	800a07a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7f8 fde2 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 800a078:	e005      	b.n	800a086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fb76 	bl	800a76c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fb7d 	bl	800a780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	f003 0308 	and.w	r3, r3, #8
 800a096:	2b08      	cmp	r3, #8
 800a098:	d122      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f003 0308 	and.w	r3, r3, #8
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d11b      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f06f 0208 	mvn.w	r2, #8
 800a0b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2204      	movs	r2, #4
 800a0b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7f8 fdb8 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 800a0cc:	e005      	b.n	800a0da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fb4c 	bl	800a76c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fb53 	bl	800a780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	f003 0310 	and.w	r3, r3, #16
 800a0ea:	2b10      	cmp	r3, #16
 800a0ec:	d122      	bne.n	800a134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f003 0310 	and.w	r3, r3, #16
 800a0f8:	2b10      	cmp	r3, #16
 800a0fa:	d11b      	bne.n	800a134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f06f 0210 	mvn.w	r2, #16
 800a104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2208      	movs	r2, #8
 800a10a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	69db      	ldr	r3, [r3, #28]
 800a112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7f8 fd8e 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 800a120:	e005      	b.n	800a12e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fb22 	bl	800a76c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fb29 	bl	800a780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d10e      	bne.n	800a160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d107      	bne.n	800a160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f06f 0201 	mvn.w	r2, #1
 800a158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f7f8 fdc4 	bl	8002ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16a:	2b80      	cmp	r3, #128	; 0x80
 800a16c:	d10e      	bne.n	800a18c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a178:	2b80      	cmp	r3, #128	; 0x80
 800a17a:	d107      	bne.n	800a18c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f001 f904 	bl	800b394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a19a:	d10e      	bne.n	800a1ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a6:	2b80      	cmp	r3, #128	; 0x80
 800a1a8:	d107      	bne.n	800a1ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a1b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 f8f7 	bl	800b3a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c4:	2b40      	cmp	r3, #64	; 0x40
 800a1c6:	d10e      	bne.n	800a1e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d2:	2b40      	cmp	r3, #64	; 0x40
 800a1d4:	d107      	bne.n	800a1e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fad7 	bl	800a794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f003 0320 	and.w	r3, r3, #32
 800a1f0:	2b20      	cmp	r3, #32
 800a1f2:	d10e      	bne.n	800a212 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	f003 0320 	and.w	r3, r3, #32
 800a1fe:	2b20      	cmp	r3, #32
 800a200:	d107      	bne.n	800a212 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f06f 0220 	mvn.w	r2, #32
 800a20a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f001 f8b7 	bl	800b380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a212:	bf00      	nop
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b086      	sub	sp, #24
 800a21e:	af00      	add	r7, sp, #0
 800a220:	60f8      	str	r0, [r7, #12]
 800a222:	60b9      	str	r1, [r7, #8]
 800a224:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a230:	2b01      	cmp	r3, #1
 800a232:	d101      	bne.n	800a238 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a234:	2302      	movs	r3, #2
 800a236:	e088      	b.n	800a34a <HAL_TIM_IC_ConfigChannel+0x130>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d11b      	bne.n	800a27e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	6819      	ldr	r1, [r3, #0]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f000 fe17 	bl	800ae88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	699a      	ldr	r2, [r3, #24]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f022 020c 	bic.w	r2, r2, #12
 800a268:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6999      	ldr	r1, [r3, #24]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	689a      	ldr	r2, [r3, #8]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	619a      	str	r2, [r3, #24]
 800a27c:	e060      	b.n	800a340 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b04      	cmp	r3, #4
 800a282:	d11c      	bne.n	800a2be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6818      	ldr	r0, [r3, #0]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	6819      	ldr	r1, [r3, #0]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f000 fe9b 	bl	800afce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699a      	ldr	r2, [r3, #24]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a2a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6999      	ldr	r1, [r3, #24]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	021a      	lsls	r2, r3, #8
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	430a      	orrs	r2, r1
 800a2ba:	619a      	str	r2, [r3, #24]
 800a2bc:	e040      	b.n	800a340 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b08      	cmp	r3, #8
 800a2c2:	d11b      	bne.n	800a2fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6818      	ldr	r0, [r3, #0]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6819      	ldr	r1, [r3, #0]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f000 fee8 	bl	800b0a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	69da      	ldr	r2, [r3, #28]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 020c 	bic.w	r2, r2, #12
 800a2e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	69d9      	ldr	r1, [r3, #28]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	689a      	ldr	r2, [r3, #8]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	61da      	str	r2, [r3, #28]
 800a2fa:	e021      	b.n	800a340 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b0c      	cmp	r3, #12
 800a300:	d11c      	bne.n	800a33c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	6819      	ldr	r1, [r3, #0]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	f000 ff05 	bl	800b120 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	69da      	ldr	r2, [r3, #28]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a324:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	69d9      	ldr	r1, [r3, #28]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	021a      	lsls	r2, r3, #8
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	430a      	orrs	r2, r1
 800a338:	61da      	str	r2, [r3, #28]
 800a33a:	e001      	b.n	800a340 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a348:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d101      	bne.n	800a372 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a36e:	2302      	movs	r3, #2
 800a370:	e0ff      	b.n	800a572 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b14      	cmp	r3, #20
 800a37e:	f200 80f0 	bhi.w	800a562 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a382:	a201      	add	r2, pc, #4	; (adr r2, 800a388 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a3dd 	.word	0x0800a3dd
 800a38c:	0800a563 	.word	0x0800a563
 800a390:	0800a563 	.word	0x0800a563
 800a394:	0800a563 	.word	0x0800a563
 800a398:	0800a41d 	.word	0x0800a41d
 800a39c:	0800a563 	.word	0x0800a563
 800a3a0:	0800a563 	.word	0x0800a563
 800a3a4:	0800a563 	.word	0x0800a563
 800a3a8:	0800a45f 	.word	0x0800a45f
 800a3ac:	0800a563 	.word	0x0800a563
 800a3b0:	0800a563 	.word	0x0800a563
 800a3b4:	0800a563 	.word	0x0800a563
 800a3b8:	0800a49f 	.word	0x0800a49f
 800a3bc:	0800a563 	.word	0x0800a563
 800a3c0:	0800a563 	.word	0x0800a563
 800a3c4:	0800a563 	.word	0x0800a563
 800a3c8:	0800a4e1 	.word	0x0800a4e1
 800a3cc:	0800a563 	.word	0x0800a563
 800a3d0:	0800a563 	.word	0x0800a563
 800a3d4:	0800a563 	.word	0x0800a563
 800a3d8:	0800a521 	.word	0x0800a521
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fa7a 	bl	800a8dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	699a      	ldr	r2, [r3, #24]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f042 0208 	orr.w	r2, r2, #8
 800a3f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	699a      	ldr	r2, [r3, #24]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f022 0204 	bic.w	r2, r2, #4
 800a406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6999      	ldr	r1, [r3, #24]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	691a      	ldr	r2, [r3, #16]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	619a      	str	r2, [r3, #24]
      break;
 800a41a:	e0a5      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 faea 	bl	800a9fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	699a      	ldr	r2, [r3, #24]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	699a      	ldr	r2, [r3, #24]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6999      	ldr	r1, [r3, #24]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	021a      	lsls	r2, r3, #8
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	430a      	orrs	r2, r1
 800a45a:	619a      	str	r2, [r3, #24]
      break;
 800a45c:	e084      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68b9      	ldr	r1, [r7, #8]
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fb53 	bl	800ab10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69da      	ldr	r2, [r3, #28]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f042 0208 	orr.w	r2, r2, #8
 800a478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	69da      	ldr	r2, [r3, #28]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 0204 	bic.w	r2, r2, #4
 800a488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69d9      	ldr	r1, [r3, #28]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	691a      	ldr	r2, [r3, #16]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	430a      	orrs	r2, r1
 800a49a:	61da      	str	r2, [r3, #28]
      break;
 800a49c:	e064      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68b9      	ldr	r1, [r7, #8]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 fbbb 	bl	800ac20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	69da      	ldr	r2, [r3, #28]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	69da      	ldr	r2, [r3, #28]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	69d9      	ldr	r1, [r3, #28]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	021a      	lsls	r2, r3, #8
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	61da      	str	r2, [r3, #28]
      break;
 800a4de:	e043      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68b9      	ldr	r1, [r7, #8]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 fc04 	bl	800acf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f042 0208 	orr.w	r2, r2, #8
 800a4fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f022 0204 	bic.w	r2, r2, #4
 800a50a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	691a      	ldr	r2, [r3, #16]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	430a      	orrs	r2, r1
 800a51c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a51e:	e023      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68b9      	ldr	r1, [r7, #8]
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fc48 	bl	800adbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a53a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a54a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	021a      	lsls	r2, r3, #8
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	430a      	orrs	r2, r1
 800a55e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a560:	e002      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	75fb      	strb	r3, [r7, #23]
      break;
 800a566:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a570:	7dfb      	ldrb	r3, [r7, #23]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop

0800a57c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a590:	2b01      	cmp	r3, #1
 800a592:	d101      	bne.n	800a598 <HAL_TIM_ConfigClockSource+0x1c>
 800a594:	2302      	movs	r3, #2
 800a596:	e0dc      	b.n	800a752 <HAL_TIM_ConfigClockSource+0x1d6>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	4b6a      	ldr	r3, [pc, #424]	; (800a75c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a64      	ldr	r2, [pc, #400]	; (800a760 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	f000 80a9 	beq.w	800a726 <HAL_TIM_ConfigClockSource+0x1aa>
 800a5d4:	4a62      	ldr	r2, [pc, #392]	; (800a760 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	f200 80ae 	bhi.w	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5dc:	4a61      	ldr	r2, [pc, #388]	; (800a764 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	f000 80a1 	beq.w	800a726 <HAL_TIM_ConfigClockSource+0x1aa>
 800a5e4:	4a5f      	ldr	r2, [pc, #380]	; (800a764 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	f200 80a6 	bhi.w	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5ec:	4a5e      	ldr	r2, [pc, #376]	; (800a768 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	f000 8099 	beq.w	800a726 <HAL_TIM_ConfigClockSource+0x1aa>
 800a5f4:	4a5c      	ldr	r2, [pc, #368]	; (800a768 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	f200 809e 	bhi.w	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a5fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a600:	f000 8091 	beq.w	800a726 <HAL_TIM_ConfigClockSource+0x1aa>
 800a604:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a608:	f200 8096 	bhi.w	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a60c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a610:	f000 8089 	beq.w	800a726 <HAL_TIM_ConfigClockSource+0x1aa>
 800a614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a618:	f200 808e 	bhi.w	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a61c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a620:	d03e      	beq.n	800a6a0 <HAL_TIM_ConfigClockSource+0x124>
 800a622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a626:	f200 8087 	bhi.w	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a62e:	f000 8086 	beq.w	800a73e <HAL_TIM_ConfigClockSource+0x1c2>
 800a632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a636:	d87f      	bhi.n	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a638:	2b70      	cmp	r3, #112	; 0x70
 800a63a:	d01a      	beq.n	800a672 <HAL_TIM_ConfigClockSource+0xf6>
 800a63c:	2b70      	cmp	r3, #112	; 0x70
 800a63e:	d87b      	bhi.n	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a640:	2b60      	cmp	r3, #96	; 0x60
 800a642:	d050      	beq.n	800a6e6 <HAL_TIM_ConfigClockSource+0x16a>
 800a644:	2b60      	cmp	r3, #96	; 0x60
 800a646:	d877      	bhi.n	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a648:	2b50      	cmp	r3, #80	; 0x50
 800a64a:	d03c      	beq.n	800a6c6 <HAL_TIM_ConfigClockSource+0x14a>
 800a64c:	2b50      	cmp	r3, #80	; 0x50
 800a64e:	d873      	bhi.n	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a650:	2b40      	cmp	r3, #64	; 0x40
 800a652:	d058      	beq.n	800a706 <HAL_TIM_ConfigClockSource+0x18a>
 800a654:	2b40      	cmp	r3, #64	; 0x40
 800a656:	d86f      	bhi.n	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a658:	2b30      	cmp	r3, #48	; 0x30
 800a65a:	d064      	beq.n	800a726 <HAL_TIM_ConfigClockSource+0x1aa>
 800a65c:	2b30      	cmp	r3, #48	; 0x30
 800a65e:	d86b      	bhi.n	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a660:	2b20      	cmp	r3, #32
 800a662:	d060      	beq.n	800a726 <HAL_TIM_ConfigClockSource+0x1aa>
 800a664:	2b20      	cmp	r3, #32
 800a666:	d867      	bhi.n	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d05c      	beq.n	800a726 <HAL_TIM_ConfigClockSource+0x1aa>
 800a66c:	2b10      	cmp	r3, #16
 800a66e:	d05a      	beq.n	800a726 <HAL_TIM_ConfigClockSource+0x1aa>
 800a670:	e062      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6818      	ldr	r0, [r3, #0]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	6899      	ldr	r1, [r3, #8]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	f000 fda9 	bl	800b1d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	609a      	str	r2, [r3, #8]
      break;
 800a69e:	e04f      	b.n	800a740 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6818      	ldr	r0, [r3, #0]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	6899      	ldr	r1, [r3, #8]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	f000 fd92 	bl	800b1d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	689a      	ldr	r2, [r3, #8]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6c2:	609a      	str	r2, [r3, #8]
      break;
 800a6c4:	e03c      	b.n	800a740 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	6859      	ldr	r1, [r3, #4]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f000 fc4c 	bl	800af70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2150      	movs	r1, #80	; 0x50
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 fd5c 	bl	800b19c <TIM_ITRx_SetConfig>
      break;
 800a6e4:	e02c      	b.n	800a740 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	6859      	ldr	r1, [r3, #4]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f000 fca8 	bl	800b048 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2160      	movs	r1, #96	; 0x60
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fd4c 	bl	800b19c <TIM_ITRx_SetConfig>
      break;
 800a704:	e01c      	b.n	800a740 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6818      	ldr	r0, [r3, #0]
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	6859      	ldr	r1, [r3, #4]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	461a      	mov	r2, r3
 800a714:	f000 fc2c 	bl	800af70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2140      	movs	r1, #64	; 0x40
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 fd3c 	bl	800b19c <TIM_ITRx_SetConfig>
      break;
 800a724:	e00c      	b.n	800a740 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4619      	mov	r1, r3
 800a730:	4610      	mov	r0, r2
 800a732:	f000 fd33 	bl	800b19c <TIM_ITRx_SetConfig>
      break;
 800a736:	e003      	b.n	800a740 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	73fb      	strb	r3, [r7, #15]
      break;
 800a73c:	e000      	b.n	800a740 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a73e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	ffceff88 	.word	0xffceff88
 800a760:	00100040 	.word	0x00100040
 800a764:	00100030 	.word	0x00100030
 800a768:	00100020 	.word	0x00100020

0800a76c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a40      	ldr	r2, [pc, #256]	; (800a8bc <TIM_Base_SetConfig+0x114>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d013      	beq.n	800a7e8 <TIM_Base_SetConfig+0x40>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7c6:	d00f      	beq.n	800a7e8 <TIM_Base_SetConfig+0x40>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a3d      	ldr	r2, [pc, #244]	; (800a8c0 <TIM_Base_SetConfig+0x118>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d00b      	beq.n	800a7e8 <TIM_Base_SetConfig+0x40>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a3c      	ldr	r2, [pc, #240]	; (800a8c4 <TIM_Base_SetConfig+0x11c>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d007      	beq.n	800a7e8 <TIM_Base_SetConfig+0x40>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a3b      	ldr	r2, [pc, #236]	; (800a8c8 <TIM_Base_SetConfig+0x120>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d003      	beq.n	800a7e8 <TIM_Base_SetConfig+0x40>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a3a      	ldr	r2, [pc, #232]	; (800a8cc <TIM_Base_SetConfig+0x124>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d108      	bne.n	800a7fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a2f      	ldr	r2, [pc, #188]	; (800a8bc <TIM_Base_SetConfig+0x114>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d01f      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a808:	d01b      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a2c      	ldr	r2, [pc, #176]	; (800a8c0 <TIM_Base_SetConfig+0x118>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d017      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a2b      	ldr	r2, [pc, #172]	; (800a8c4 <TIM_Base_SetConfig+0x11c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d013      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a2a      	ldr	r2, [pc, #168]	; (800a8c8 <TIM_Base_SetConfig+0x120>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d00f      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a29      	ldr	r2, [pc, #164]	; (800a8cc <TIM_Base_SetConfig+0x124>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d00b      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a28      	ldr	r2, [pc, #160]	; (800a8d0 <TIM_Base_SetConfig+0x128>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d007      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a27      	ldr	r2, [pc, #156]	; (800a8d4 <TIM_Base_SetConfig+0x12c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d003      	beq.n	800a842 <TIM_Base_SetConfig+0x9a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a26      	ldr	r2, [pc, #152]	; (800a8d8 <TIM_Base_SetConfig+0x130>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d108      	bne.n	800a854 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	4313      	orrs	r3, r2
 800a852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	4313      	orrs	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	689a      	ldr	r2, [r3, #8]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a10      	ldr	r2, [pc, #64]	; (800a8bc <TIM_Base_SetConfig+0x114>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d00f      	beq.n	800a8a0 <TIM_Base_SetConfig+0xf8>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a12      	ldr	r2, [pc, #72]	; (800a8cc <TIM_Base_SetConfig+0x124>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d00b      	beq.n	800a8a0 <TIM_Base_SetConfig+0xf8>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a11      	ldr	r2, [pc, #68]	; (800a8d0 <TIM_Base_SetConfig+0x128>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d007      	beq.n	800a8a0 <TIM_Base_SetConfig+0xf8>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a10      	ldr	r2, [pc, #64]	; (800a8d4 <TIM_Base_SetConfig+0x12c>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d003      	beq.n	800a8a0 <TIM_Base_SetConfig+0xf8>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a0f      	ldr	r2, [pc, #60]	; (800a8d8 <TIM_Base_SetConfig+0x130>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d103      	bne.n	800a8a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	691a      	ldr	r2, [r3, #16]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	615a      	str	r2, [r3, #20]
}
 800a8ae:	bf00      	nop
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	40010000 	.word	0x40010000
 800a8c0:	40000400 	.word	0x40000400
 800a8c4:	40000800 	.word	0x40000800
 800a8c8:	40000c00 	.word	0x40000c00
 800a8cc:	40010400 	.word	0x40010400
 800a8d0:	40014000 	.word	0x40014000
 800a8d4:	40014400 	.word	0x40014400
 800a8d8:	40014800 	.word	0x40014800

0800a8dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	f023 0201 	bic.w	r2, r3, #1
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	4b37      	ldr	r3, [pc, #220]	; (800a9e4 <TIM_OC1_SetConfig+0x108>)
 800a908:	4013      	ands	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f023 0303 	bic.w	r3, r3, #3
 800a912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f023 0302 	bic.w	r3, r3, #2
 800a924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	697a      	ldr	r2, [r7, #20]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a2d      	ldr	r2, [pc, #180]	; (800a9e8 <TIM_OC1_SetConfig+0x10c>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d00f      	beq.n	800a958 <TIM_OC1_SetConfig+0x7c>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a2c      	ldr	r2, [pc, #176]	; (800a9ec <TIM_OC1_SetConfig+0x110>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d00b      	beq.n	800a958 <TIM_OC1_SetConfig+0x7c>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a2b      	ldr	r2, [pc, #172]	; (800a9f0 <TIM_OC1_SetConfig+0x114>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d007      	beq.n	800a958 <TIM_OC1_SetConfig+0x7c>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a2a      	ldr	r2, [pc, #168]	; (800a9f4 <TIM_OC1_SetConfig+0x118>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d003      	beq.n	800a958 <TIM_OC1_SetConfig+0x7c>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a29      	ldr	r2, [pc, #164]	; (800a9f8 <TIM_OC1_SetConfig+0x11c>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d10c      	bne.n	800a972 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	f023 0308 	bic.w	r3, r3, #8
 800a95e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	4313      	orrs	r3, r2
 800a968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f023 0304 	bic.w	r3, r3, #4
 800a970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a1c      	ldr	r2, [pc, #112]	; (800a9e8 <TIM_OC1_SetConfig+0x10c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00f      	beq.n	800a99a <TIM_OC1_SetConfig+0xbe>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a1b      	ldr	r2, [pc, #108]	; (800a9ec <TIM_OC1_SetConfig+0x110>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d00b      	beq.n	800a99a <TIM_OC1_SetConfig+0xbe>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a1a      	ldr	r2, [pc, #104]	; (800a9f0 <TIM_OC1_SetConfig+0x114>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d007      	beq.n	800a99a <TIM_OC1_SetConfig+0xbe>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a19      	ldr	r2, [pc, #100]	; (800a9f4 <TIM_OC1_SetConfig+0x118>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d003      	beq.n	800a99a <TIM_OC1_SetConfig+0xbe>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a18      	ldr	r2, [pc, #96]	; (800a9f8 <TIM_OC1_SetConfig+0x11c>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d111      	bne.n	800a9be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	693a      	ldr	r2, [r7, #16]
 800a9c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	621a      	str	r2, [r3, #32]
}
 800a9d8:	bf00      	nop
 800a9da:	371c      	adds	r7, #28
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	fffeff8f 	.word	0xfffeff8f
 800a9e8:	40010000 	.word	0x40010000
 800a9ec:	40010400 	.word	0x40010400
 800a9f0:	40014000 	.word	0x40014000
 800a9f4:	40014400 	.word	0x40014400
 800a9f8:	40014800 	.word	0x40014800

0800a9fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f023 0210 	bic.w	r2, r3, #16
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	4b34      	ldr	r3, [pc, #208]	; (800aaf8 <TIM_OC2_SetConfig+0xfc>)
 800aa28:	4013      	ands	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	021b      	lsls	r3, r3, #8
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f023 0320 	bic.w	r3, r3, #32
 800aa46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a29      	ldr	r2, [pc, #164]	; (800aafc <TIM_OC2_SetConfig+0x100>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d003      	beq.n	800aa64 <TIM_OC2_SetConfig+0x68>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a28      	ldr	r2, [pc, #160]	; (800ab00 <TIM_OC2_SetConfig+0x104>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d10d      	bne.n	800aa80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a1e      	ldr	r2, [pc, #120]	; (800aafc <TIM_OC2_SetConfig+0x100>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d00f      	beq.n	800aaa8 <TIM_OC2_SetConfig+0xac>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a1d      	ldr	r2, [pc, #116]	; (800ab00 <TIM_OC2_SetConfig+0x104>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d00b      	beq.n	800aaa8 <TIM_OC2_SetConfig+0xac>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a1c      	ldr	r2, [pc, #112]	; (800ab04 <TIM_OC2_SetConfig+0x108>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d007      	beq.n	800aaa8 <TIM_OC2_SetConfig+0xac>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a1b      	ldr	r2, [pc, #108]	; (800ab08 <TIM_OC2_SetConfig+0x10c>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d003      	beq.n	800aaa8 <TIM_OC2_SetConfig+0xac>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a1a      	ldr	r2, [pc, #104]	; (800ab0c <TIM_OC2_SetConfig+0x110>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d113      	bne.n	800aad0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aab6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	4313      	orrs	r3, r2
 800aace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	693a      	ldr	r2, [r7, #16]
 800aad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	621a      	str	r2, [r3, #32]
}
 800aaea:	bf00      	nop
 800aaec:	371c      	adds	r7, #28
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	feff8fff 	.word	0xfeff8fff
 800aafc:	40010000 	.word	0x40010000
 800ab00:	40010400 	.word	0x40010400
 800ab04:	40014000 	.word	0x40014000
 800ab08:	40014400 	.word	0x40014400
 800ab0c:	40014800 	.word	0x40014800

0800ab10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b087      	sub	sp, #28
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	4b33      	ldr	r3, [pc, #204]	; (800ac08 <TIM_OC3_SetConfig+0xf8>)
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f023 0303 	bic.w	r3, r3, #3
 800ab46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	021b      	lsls	r3, r3, #8
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a28      	ldr	r2, [pc, #160]	; (800ac0c <TIM_OC3_SetConfig+0xfc>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d003      	beq.n	800ab76 <TIM_OC3_SetConfig+0x66>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a27      	ldr	r2, [pc, #156]	; (800ac10 <TIM_OC3_SetConfig+0x100>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d10d      	bne.n	800ab92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	021b      	lsls	r3, r3, #8
 800ab84:	697a      	ldr	r2, [r7, #20]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a1d      	ldr	r2, [pc, #116]	; (800ac0c <TIM_OC3_SetConfig+0xfc>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d00f      	beq.n	800abba <TIM_OC3_SetConfig+0xaa>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a1c      	ldr	r2, [pc, #112]	; (800ac10 <TIM_OC3_SetConfig+0x100>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d00b      	beq.n	800abba <TIM_OC3_SetConfig+0xaa>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a1b      	ldr	r2, [pc, #108]	; (800ac14 <TIM_OC3_SetConfig+0x104>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d007      	beq.n	800abba <TIM_OC3_SetConfig+0xaa>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a1a      	ldr	r2, [pc, #104]	; (800ac18 <TIM_OC3_SetConfig+0x108>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d003      	beq.n	800abba <TIM_OC3_SetConfig+0xaa>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a19      	ldr	r2, [pc, #100]	; (800ac1c <TIM_OC3_SetConfig+0x10c>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d113      	bne.n	800abe2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	011b      	lsls	r3, r3, #4
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	011b      	lsls	r3, r3, #4
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	4313      	orrs	r3, r2
 800abe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	685a      	ldr	r2, [r3, #4]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	621a      	str	r2, [r3, #32]
}
 800abfc:	bf00      	nop
 800abfe:	371c      	adds	r7, #28
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	fffeff8f 	.word	0xfffeff8f
 800ac0c:	40010000 	.word	0x40010000
 800ac10:	40010400 	.word	0x40010400
 800ac14:	40014000 	.word	0x40014000
 800ac18:	40014400 	.word	0x40014400
 800ac1c:	40014800 	.word	0x40014800

0800ac20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	4b24      	ldr	r3, [pc, #144]	; (800acdc <TIM_OC4_SetConfig+0xbc>)
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	031b      	lsls	r3, r3, #12
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a19      	ldr	r2, [pc, #100]	; (800ace0 <TIM_OC4_SetConfig+0xc0>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d00f      	beq.n	800aca0 <TIM_OC4_SetConfig+0x80>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a18      	ldr	r2, [pc, #96]	; (800ace4 <TIM_OC4_SetConfig+0xc4>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d00b      	beq.n	800aca0 <TIM_OC4_SetConfig+0x80>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a17      	ldr	r2, [pc, #92]	; (800ace8 <TIM_OC4_SetConfig+0xc8>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d007      	beq.n	800aca0 <TIM_OC4_SetConfig+0x80>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a16      	ldr	r2, [pc, #88]	; (800acec <TIM_OC4_SetConfig+0xcc>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d003      	beq.n	800aca0 <TIM_OC4_SetConfig+0x80>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a15      	ldr	r2, [pc, #84]	; (800acf0 <TIM_OC4_SetConfig+0xd0>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d109      	bne.n	800acb4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	695b      	ldr	r3, [r3, #20]
 800acac:	019b      	lsls	r3, r3, #6
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	621a      	str	r2, [r3, #32]
}
 800acce:	bf00      	nop
 800acd0:	371c      	adds	r7, #28
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	feff8fff 	.word	0xfeff8fff
 800ace0:	40010000 	.word	0x40010000
 800ace4:	40010400 	.word	0x40010400
 800ace8:	40014000 	.word	0x40014000
 800acec:	40014400 	.word	0x40014400
 800acf0:	40014800 	.word	0x40014800

0800acf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	4b21      	ldr	r3, [pc, #132]	; (800ada4 <TIM_OC5_SetConfig+0xb0>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	041b      	lsls	r3, r3, #16
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a18      	ldr	r2, [pc, #96]	; (800ada8 <TIM_OC5_SetConfig+0xb4>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d00f      	beq.n	800ad6a <TIM_OC5_SetConfig+0x76>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a17      	ldr	r2, [pc, #92]	; (800adac <TIM_OC5_SetConfig+0xb8>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d00b      	beq.n	800ad6a <TIM_OC5_SetConfig+0x76>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a16      	ldr	r2, [pc, #88]	; (800adb0 <TIM_OC5_SetConfig+0xbc>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d007      	beq.n	800ad6a <TIM_OC5_SetConfig+0x76>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a15      	ldr	r2, [pc, #84]	; (800adb4 <TIM_OC5_SetConfig+0xc0>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d003      	beq.n	800ad6a <TIM_OC5_SetConfig+0x76>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a14      	ldr	r2, [pc, #80]	; (800adb8 <TIM_OC5_SetConfig+0xc4>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d109      	bne.n	800ad7e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	695b      	ldr	r3, [r3, #20]
 800ad76:	021b      	lsls	r3, r3, #8
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	697a      	ldr	r2, [r7, #20]
 800ad82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	685a      	ldr	r2, [r3, #4]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	621a      	str	r2, [r3, #32]
}
 800ad98:	bf00      	nop
 800ad9a:	371c      	adds	r7, #28
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	fffeff8f 	.word	0xfffeff8f
 800ada8:	40010000 	.word	0x40010000
 800adac:	40010400 	.word	0x40010400
 800adb0:	40014000 	.word	0x40014000
 800adb4:	40014400 	.word	0x40014400
 800adb8:	40014800 	.word	0x40014800

0800adbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	4b22      	ldr	r3, [pc, #136]	; (800ae70 <TIM_OC6_SetConfig+0xb4>)
 800ade8:	4013      	ands	r3, r2
 800adea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	021b      	lsls	r3, r3, #8
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800adfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	051b      	lsls	r3, r3, #20
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a19      	ldr	r2, [pc, #100]	; (800ae74 <TIM_OC6_SetConfig+0xb8>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d00f      	beq.n	800ae34 <TIM_OC6_SetConfig+0x78>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a18      	ldr	r2, [pc, #96]	; (800ae78 <TIM_OC6_SetConfig+0xbc>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d00b      	beq.n	800ae34 <TIM_OC6_SetConfig+0x78>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a17      	ldr	r2, [pc, #92]	; (800ae7c <TIM_OC6_SetConfig+0xc0>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d007      	beq.n	800ae34 <TIM_OC6_SetConfig+0x78>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a16      	ldr	r2, [pc, #88]	; (800ae80 <TIM_OC6_SetConfig+0xc4>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d003      	beq.n	800ae34 <TIM_OC6_SetConfig+0x78>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a15      	ldr	r2, [pc, #84]	; (800ae84 <TIM_OC6_SetConfig+0xc8>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d109      	bne.n	800ae48 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	695b      	ldr	r3, [r3, #20]
 800ae40:	029b      	lsls	r3, r3, #10
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	697a      	ldr	r2, [r7, #20]
 800ae4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	621a      	str	r2, [r3, #32]
}
 800ae62:	bf00      	nop
 800ae64:	371c      	adds	r7, #28
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	feff8fff 	.word	0xfeff8fff
 800ae74:	40010000 	.word	0x40010000
 800ae78:	40010400 	.word	0x40010400
 800ae7c:	40014000 	.word	0x40014000
 800ae80:	40014400 	.word	0x40014400
 800ae84:	40014800 	.word	0x40014800

0800ae88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	f023 0201 	bic.w	r2, r3, #1
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6a1b      	ldr	r3, [r3, #32]
 800aeac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	4a28      	ldr	r2, [pc, #160]	; (800af54 <TIM_TI1_SetConfig+0xcc>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d01b      	beq.n	800aeee <TIM_TI1_SetConfig+0x66>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aebc:	d017      	beq.n	800aeee <TIM_TI1_SetConfig+0x66>
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	4a25      	ldr	r2, [pc, #148]	; (800af58 <TIM_TI1_SetConfig+0xd0>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d013      	beq.n	800aeee <TIM_TI1_SetConfig+0x66>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	4a24      	ldr	r2, [pc, #144]	; (800af5c <TIM_TI1_SetConfig+0xd4>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d00f      	beq.n	800aeee <TIM_TI1_SetConfig+0x66>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	4a23      	ldr	r2, [pc, #140]	; (800af60 <TIM_TI1_SetConfig+0xd8>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d00b      	beq.n	800aeee <TIM_TI1_SetConfig+0x66>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	4a22      	ldr	r2, [pc, #136]	; (800af64 <TIM_TI1_SetConfig+0xdc>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d007      	beq.n	800aeee <TIM_TI1_SetConfig+0x66>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4a21      	ldr	r2, [pc, #132]	; (800af68 <TIM_TI1_SetConfig+0xe0>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d003      	beq.n	800aeee <TIM_TI1_SetConfig+0x66>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	4a20      	ldr	r2, [pc, #128]	; (800af6c <TIM_TI1_SetConfig+0xe4>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d101      	bne.n	800aef2 <TIM_TI1_SetConfig+0x6a>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e000      	b.n	800aef4 <TIM_TI1_SetConfig+0x6c>
 800aef2:	2300      	movs	r3, #0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d008      	beq.n	800af0a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f023 0303 	bic.w	r3, r3, #3
 800aefe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800af00:	697a      	ldr	r2, [r7, #20]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4313      	orrs	r3, r2
 800af06:	617b      	str	r3, [r7, #20]
 800af08:	e003      	b.n	800af12 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f043 0301 	orr.w	r3, r3, #1
 800af10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	011b      	lsls	r3, r3, #4
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	4313      	orrs	r3, r2
 800af24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	f023 030a 	bic.w	r3, r3, #10
 800af2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	f003 030a 	and.w	r3, r3, #10
 800af34:	693a      	ldr	r2, [r7, #16]
 800af36:	4313      	orrs	r3, r2
 800af38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	697a      	ldr	r2, [r7, #20]
 800af3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	621a      	str	r2, [r3, #32]
}
 800af46:	bf00      	nop
 800af48:	371c      	adds	r7, #28
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	40010000 	.word	0x40010000
 800af58:	40000400 	.word	0x40000400
 800af5c:	40000800 	.word	0x40000800
 800af60:	40000c00 	.word	0x40000c00
 800af64:	40010400 	.word	0x40010400
 800af68:	40001800 	.word	0x40001800
 800af6c:	40014000 	.word	0x40014000

0800af70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af70:	b480      	push	{r7}
 800af72:	b087      	sub	sp, #28
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6a1b      	ldr	r3, [r3, #32]
 800af80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6a1b      	ldr	r3, [r3, #32]
 800af86:	f023 0201 	bic.w	r2, r3, #1
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	011b      	lsls	r3, r3, #4
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	f023 030a 	bic.w	r3, r3, #10
 800afac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	697a      	ldr	r2, [r7, #20]
 800afc0:	621a      	str	r2, [r3, #32]
}
 800afc2:	bf00      	nop
 800afc4:	371c      	adds	r7, #28
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800afce:	b480      	push	{r7}
 800afd0:	b087      	sub	sp, #28
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
 800afda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	f023 0210 	bic.w	r2, r3, #16
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	699b      	ldr	r3, [r3, #24]
 800afec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6a1b      	ldr	r3, [r3, #32]
 800aff2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800affa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	021b      	lsls	r3, r3, #8
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	4313      	orrs	r3, r2
 800b004:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b00c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	031b      	lsls	r3, r3, #12
 800b012:	b29b      	uxth	r3, r3
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	4313      	orrs	r3, r2
 800b018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b020:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	011b      	lsls	r3, r3, #4
 800b026:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	697a      	ldr	r2, [r7, #20]
 800b034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	693a      	ldr	r2, [r7, #16]
 800b03a:	621a      	str	r2, [r3, #32]
}
 800b03c:	bf00      	nop
 800b03e:	371c      	adds	r7, #28
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b048:	b480      	push	{r7}
 800b04a:	b087      	sub	sp, #28
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	f023 0210 	bic.w	r2, r3, #16
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b072:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	031b      	lsls	r3, r3, #12
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b084:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	011b      	lsls	r3, r3, #4
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	621a      	str	r2, [r3, #32]
}
 800b09c:	bf00      	nop
 800b09e:	371c      	adds	r7, #28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
 800b0b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a1b      	ldr	r3, [r3, #32]
 800b0cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f023 0303 	bic.w	r3, r3, #3
 800b0d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	011b      	lsls	r3, r3, #4
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	697a      	ldr	r2, [r7, #20]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b0f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	021b      	lsls	r3, r3, #8
 800b0fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	4313      	orrs	r3, r2
 800b106:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	621a      	str	r2, [r3, #32]
}
 800b114:	bf00      	nop
 800b116:	371c      	adds	r7, #28
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b120:	b480      	push	{r7}
 800b122:	b087      	sub	sp, #28
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	69db      	ldr	r3, [r3, #28]
 800b13e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6a1b      	ldr	r3, [r3, #32]
 800b144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b14c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	021b      	lsls	r3, r3, #8
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	4313      	orrs	r3, r2
 800b156:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b15e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	031b      	lsls	r3, r3, #12
 800b164:	b29b      	uxth	r3, r3
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	4313      	orrs	r3, r2
 800b16a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b172:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	031b      	lsls	r3, r3, #12
 800b178:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	4313      	orrs	r3, r2
 800b180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	697a      	ldr	r2, [r7, #20]
 800b186:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	621a      	str	r2, [r3, #32]
}
 800b18e:	bf00      	nop
 800b190:	371c      	adds	r7, #28
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
	...

0800b19c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	4b09      	ldr	r3, [pc, #36]	; (800b1d4 <TIM_ITRx_SetConfig+0x38>)
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	f043 0307 	orr.w	r3, r3, #7
 800b1be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	609a      	str	r2, [r3, #8]
}
 800b1c6:	bf00      	nop
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	ffcfff8f 	.word	0xffcfff8f

0800b1d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b087      	sub	sp, #28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
 800b1e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	021a      	lsls	r2, r3, #8
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	431a      	orrs	r2, r3
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	697a      	ldr	r2, [r7, #20]
 800b202:	4313      	orrs	r3, r2
 800b204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	697a      	ldr	r2, [r7, #20]
 800b20a:	609a      	str	r2, [r3, #8]
}
 800b20c:	bf00      	nop
 800b20e:	371c      	adds	r7, #28
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b218:	b480      	push	{r7}
 800b21a:	b087      	sub	sp, #28
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	f003 031f 	and.w	r3, r3, #31
 800b22a:	2201      	movs	r2, #1
 800b22c:	fa02 f303 	lsl.w	r3, r2, r3
 800b230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6a1a      	ldr	r2, [r3, #32]
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	43db      	mvns	r3, r3
 800b23a:	401a      	ands	r2, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6a1a      	ldr	r2, [r3, #32]
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	f003 031f 	and.w	r3, r3, #31
 800b24a:	6879      	ldr	r1, [r7, #4]
 800b24c:	fa01 f303 	lsl.w	r3, r1, r3
 800b250:	431a      	orrs	r2, r3
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	621a      	str	r2, [r3, #32]
}
 800b256:	bf00      	nop
 800b258:	371c      	adds	r7, #28
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
	...

0800b264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b274:	2b01      	cmp	r3, #1
 800b276:	d101      	bne.n	800b27c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b278:	2302      	movs	r3, #2
 800b27a:	e06d      	b.n	800b358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2202      	movs	r2, #2
 800b288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a30      	ldr	r2, [pc, #192]	; (800b364 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d004      	beq.n	800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a2f      	ldr	r2, [pc, #188]	; (800b368 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d108      	bne.n	800b2c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b2b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a20      	ldr	r2, [pc, #128]	; (800b364 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d022      	beq.n	800b32c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ee:	d01d      	beq.n	800b32c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a1d      	ldr	r2, [pc, #116]	; (800b36c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d018      	beq.n	800b32c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a1c      	ldr	r2, [pc, #112]	; (800b370 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d013      	beq.n	800b32c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a1a      	ldr	r2, [pc, #104]	; (800b374 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d00e      	beq.n	800b32c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a15      	ldr	r2, [pc, #84]	; (800b368 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d009      	beq.n	800b32c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a16      	ldr	r2, [pc, #88]	; (800b378 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d004      	beq.n	800b32c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a15      	ldr	r2, [pc, #84]	; (800b37c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d10c      	bne.n	800b346 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b332:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2201      	movs	r2, #1
 800b34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	40010000 	.word	0x40010000
 800b368:	40010400 	.word	0x40010400
 800b36c:	40000400 	.word	0x40000400
 800b370:	40000800 	.word	0x40000800
 800b374:	40000c00 	.word	0x40000c00
 800b378:	40001800 	.word	0x40001800
 800b37c:	40014000 	.word	0x40014000

0800b380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e042      	b.n	800b454 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d106      	bne.n	800b3e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f7fa fa27 	bl	8005834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2224      	movs	r2, #36	; 0x24
 800b3ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f022 0201 	bic.w	r2, r2, #1
 800b3fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fccc 	bl	800bd9c <UART_SetConfig>
 800b404:	4603      	mov	r3, r0
 800b406:	2b01      	cmp	r3, #1
 800b408:	d101      	bne.n	800b40e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e022      	b.n	800b454 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 fa28 	bl	800c86c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b42a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	689a      	ldr	r2, [r3, #8]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b43a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f042 0201 	orr.w	r2, r2, #1
 800b44a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f001 faaf 	bl	800c9b0 <UART_CheckIdleState>
 800b452:	4603      	mov	r3, r0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08a      	sub	sp, #40	; 0x28
 800b460:	af02      	add	r7, sp, #8
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	603b      	str	r3, [r7, #0]
 800b468:	4613      	mov	r3, r2
 800b46a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b472:	2b20      	cmp	r3, #32
 800b474:	f040 8083 	bne.w	800b57e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <HAL_UART_Transmit+0x28>
 800b47e:	88fb      	ldrh	r3, [r7, #6]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	e07b      	b.n	800b580 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d101      	bne.n	800b496 <HAL_UART_Transmit+0x3a>
 800b492:	2302      	movs	r3, #2
 800b494:	e074      	b.n	800b580 <HAL_UART_Transmit+0x124>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2221      	movs	r2, #33	; 0x21
 800b4aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4ae:	f7fa fb9d 	bl	8005bec <HAL_GetTick>
 800b4b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	88fa      	ldrh	r2, [r7, #6]
 800b4b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	88fa      	ldrh	r2, [r7, #6]
 800b4c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4cc:	d108      	bne.n	800b4e0 <HAL_UART_Transmit+0x84>
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d104      	bne.n	800b4e0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	61bb      	str	r3, [r7, #24]
 800b4de:	e003      	b.n	800b4e8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b4f0:	e02c      	b.n	800b54c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2180      	movs	r1, #128	; 0x80
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f001 faa2 	bl	800ca46 <UART_WaitOnFlagUntilTimeout>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d001      	beq.n	800b50c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b508:	2303      	movs	r3, #3
 800b50a:	e039      	b.n	800b580 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10b      	bne.n	800b52a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b520:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	3302      	adds	r3, #2
 800b526:	61bb      	str	r3, [r7, #24]
 800b528:	e007      	b.n	800b53a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	781a      	ldrb	r2, [r3, #0]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	3301      	adds	r3, #1
 800b538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b540:	b29b      	uxth	r3, r3
 800b542:	3b01      	subs	r3, #1
 800b544:	b29a      	uxth	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b552:	b29b      	uxth	r3, r3
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1cc      	bne.n	800b4f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	2200      	movs	r2, #0
 800b560:	2140      	movs	r1, #64	; 0x40
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f001 fa6f 	bl	800ca46 <UART_WaitOnFlagUntilTimeout>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d001      	beq.n	800b572 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e006      	b.n	800b580 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2220      	movs	r2, #32
 800b576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	e000      	b.n	800b580 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b57e:	2302      	movs	r3, #2
  }
}
 800b580:	4618      	mov	r0, r3
 800b582:	3720      	adds	r7, #32
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b08a      	sub	sp, #40	; 0x28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	4613      	mov	r3, r2
 800b594:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b59c:	2b20      	cmp	r3, #32
 800b59e:	d142      	bne.n	800b626 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <HAL_UART_Receive_IT+0x24>
 800b5a6:	88fb      	ldrh	r3, [r7, #6]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e03b      	b.n	800b628 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d101      	bne.n	800b5be <HAL_UART_Receive_IT+0x36>
 800b5ba:	2302      	movs	r3, #2
 800b5bc:	e034      	b.n	800b628 <HAL_UART_Receive_IT+0xa0>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a17      	ldr	r2, [pc, #92]	; (800b630 <HAL_UART_Receive_IT+0xa8>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d01f      	beq.n	800b616 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d018      	beq.n	800b616 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b5f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b602:	623b      	str	r3, [r7, #32]
 800b604:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b606:	69f9      	ldr	r1, [r7, #28]
 800b608:	6a3a      	ldr	r2, [r7, #32]
 800b60a:	e841 2300 	strex	r3, r2, [r1]
 800b60e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e6      	bne.n	800b5e4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b616:	88fb      	ldrh	r3, [r7, #6]
 800b618:	461a      	mov	r2, r3
 800b61a:	68b9      	ldr	r1, [r7, #8]
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f001 fadb 	bl	800cbd8 <UART_Start_Receive_IT>
 800b622:	4603      	mov	r3, r0
 800b624:	e000      	b.n	800b628 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b626:	2302      	movs	r3, #2
  }
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3728      	adds	r7, #40	; 0x28
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	58000c00 	.word	0x58000c00

0800b634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b0ba      	sub	sp, #232	; 0xe8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	69db      	ldr	r3, [r3, #28]
 800b642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b65a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b65e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b662:	4013      	ands	r3, r2
 800b664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d11b      	bne.n	800b6a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b674:	f003 0320 	and.w	r3, r3, #32
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d015      	beq.n	800b6a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b680:	f003 0320 	and.w	r3, r3, #32
 800b684:	2b00      	cmp	r3, #0
 800b686:	d105      	bne.n	800b694 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b68c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d009      	beq.n	800b6a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 835a 	beq.w	800bd52 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	4798      	blx	r3
      }
      return;
 800b6a6:	e354      	b.n	800bd52 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b6a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 811f 	beq.w	800b8f0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b6b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b6b6:	4b8b      	ldr	r3, [pc, #556]	; (800b8e4 <HAL_UART_IRQHandler+0x2b0>)
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d106      	bne.n	800b6cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b6be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b6c2:	4b89      	ldr	r3, [pc, #548]	; (800b8e8 <HAL_UART_IRQHandler+0x2b4>)
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f000 8112 	beq.w	800b8f0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b6cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d011      	beq.n	800b6fc <HAL_UART_IRQHandler+0xc8>
 800b6d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00b      	beq.n	800b6fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6f2:	f043 0201 	orr.w	r2, r3, #1
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b700:	f003 0302 	and.w	r3, r3, #2
 800b704:	2b00      	cmp	r3, #0
 800b706:	d011      	beq.n	800b72c <HAL_UART_IRQHandler+0xf8>
 800b708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00b      	beq.n	800b72c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2202      	movs	r2, #2
 800b71a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b722:	f043 0204 	orr.w	r2, r3, #4
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b730:	f003 0304 	and.w	r3, r3, #4
 800b734:	2b00      	cmp	r3, #0
 800b736:	d011      	beq.n	800b75c <HAL_UART_IRQHandler+0x128>
 800b738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b73c:	f003 0301 	and.w	r3, r3, #1
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00b      	beq.n	800b75c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2204      	movs	r2, #4
 800b74a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b752:	f043 0202 	orr.w	r2, r3, #2
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b760:	f003 0308 	and.w	r3, r3, #8
 800b764:	2b00      	cmp	r3, #0
 800b766:	d017      	beq.n	800b798 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b76c:	f003 0320 	and.w	r3, r3, #32
 800b770:	2b00      	cmp	r3, #0
 800b772:	d105      	bne.n	800b780 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b774:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b778:	4b5a      	ldr	r3, [pc, #360]	; (800b8e4 <HAL_UART_IRQHandler+0x2b0>)
 800b77a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00b      	beq.n	800b798 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2208      	movs	r2, #8
 800b786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b78e:	f043 0208 	orr.w	r2, r3, #8
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b79c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d012      	beq.n	800b7ca <HAL_UART_IRQHandler+0x196>
 800b7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00c      	beq.n	800b7ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7c0:	f043 0220 	orr.w	r2, r3, #32
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f000 82c0 	beq.w	800bd56 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7da:	f003 0320 	and.w	r3, r3, #32
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d013      	beq.n	800b80a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b7e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7e6:	f003 0320 	and.w	r3, r3, #32
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d105      	bne.n	800b7fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b7ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d007      	beq.n	800b80a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b81e:	2b40      	cmp	r3, #64	; 0x40
 800b820:	d005      	beq.n	800b82e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b826:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d04f      	beq.n	800b8ce <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f001 fafc 	bl	800ce2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b83e:	2b40      	cmp	r3, #64	; 0x40
 800b840:	d141      	bne.n	800b8c6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3308      	adds	r3, #8
 800b848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b850:	e853 3f00 	ldrex	r3, [r3]
 800b854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b85c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3308      	adds	r3, #8
 800b86a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b86e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b87a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1d9      	bne.n	800b842 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b892:	2b00      	cmp	r3, #0
 800b894:	d013      	beq.n	800b8be <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b89a:	4a14      	ldr	r2, [pc, #80]	; (800b8ec <HAL_UART_IRQHandler+0x2b8>)
 800b89c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fa fe3e 	bl	8006524 <HAL_DMA_Abort_IT>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d017      	beq.n	800b8de <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8bc:	e00f      	b.n	800b8de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fa56 	bl	800bd70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8c4:	e00b      	b.n	800b8de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fa52 	bl	800bd70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8cc:	e007      	b.n	800b8de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fa4e 	bl	800bd70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b8dc:	e23b      	b.n	800bd56 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8de:	bf00      	nop
    return;
 800b8e0:	e239      	b.n	800bd56 <HAL_UART_IRQHandler+0x722>
 800b8e2:	bf00      	nop
 800b8e4:	10000001 	.word	0x10000001
 800b8e8:	04000120 	.word	0x04000120
 800b8ec:	0800cef9 	.word	0x0800cef9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	f040 81ce 	bne.w	800bc96 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8fe:	f003 0310 	and.w	r3, r3, #16
 800b902:	2b00      	cmp	r3, #0
 800b904:	f000 81c7 	beq.w	800bc96 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b90c:	f003 0310 	and.w	r3, r3, #16
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 81c0 	beq.w	800bc96 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2210      	movs	r2, #16
 800b91c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b928:	2b40      	cmp	r3, #64	; 0x40
 800b92a:	f040 813b 	bne.w	800bba4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a8b      	ldr	r2, [pc, #556]	; (800bb64 <HAL_UART_IRQHandler+0x530>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d059      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a89      	ldr	r2, [pc, #548]	; (800bb68 <HAL_UART_IRQHandler+0x534>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d053      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a87      	ldr	r2, [pc, #540]	; (800bb6c <HAL_UART_IRQHandler+0x538>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d04d      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a85      	ldr	r2, [pc, #532]	; (800bb70 <HAL_UART_IRQHandler+0x53c>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d047      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a83      	ldr	r2, [pc, #524]	; (800bb74 <HAL_UART_IRQHandler+0x540>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d041      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a81      	ldr	r2, [pc, #516]	; (800bb78 <HAL_UART_IRQHandler+0x544>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d03b      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a7f      	ldr	r2, [pc, #508]	; (800bb7c <HAL_UART_IRQHandler+0x548>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d035      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a7d      	ldr	r2, [pc, #500]	; (800bb80 <HAL_UART_IRQHandler+0x54c>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d02f      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a7b      	ldr	r2, [pc, #492]	; (800bb84 <HAL_UART_IRQHandler+0x550>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d029      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a79      	ldr	r2, [pc, #484]	; (800bb88 <HAL_UART_IRQHandler+0x554>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d023      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a77      	ldr	r2, [pc, #476]	; (800bb8c <HAL_UART_IRQHandler+0x558>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d01d      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a75      	ldr	r2, [pc, #468]	; (800bb90 <HAL_UART_IRQHandler+0x55c>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d017      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a73      	ldr	r2, [pc, #460]	; (800bb94 <HAL_UART_IRQHandler+0x560>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d011      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a71      	ldr	r2, [pc, #452]	; (800bb98 <HAL_UART_IRQHandler+0x564>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00b      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a6f      	ldr	r2, [pc, #444]	; (800bb9c <HAL_UART_IRQHandler+0x568>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d005      	beq.n	800b9ee <HAL_UART_IRQHandler+0x3ba>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a6d      	ldr	r2, [pc, #436]	; (800bba0 <HAL_UART_IRQHandler+0x56c>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d105      	bne.n	800b9fa <HAL_UART_IRQHandler+0x3c6>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	e004      	b.n	800ba04 <HAL_UART_IRQHandler+0x3d0>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 81a4 	beq.w	800bd5a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	f080 819c 	bcs.w	800bd5a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba30:	69db      	ldr	r3, [r3, #28]
 800ba32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba36:	f000 8086 	beq.w	800bb46 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba46:	e853 3f00 	ldrex	r3, [r3]
 800ba4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba68:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba74:	e841 2300 	strex	r3, r2, [r1]
 800ba78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1da      	bne.n	800ba3a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3308      	adds	r3, #8
 800ba8a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba8e:	e853 3f00 	ldrex	r3, [r3]
 800ba92:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba96:	f023 0301 	bic.w	r3, r3, #1
 800ba9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3308      	adds	r3, #8
 800baa4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800baa8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800baac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bab0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bab4:	e841 2300 	strex	r3, r2, [r1]
 800bab8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800baba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e1      	bne.n	800ba84 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3308      	adds	r3, #8
 800bac6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800baca:	e853 3f00 	ldrex	r3, [r3]
 800bace:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	3308      	adds	r3, #8
 800bae0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bae4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bae6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800baea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800baec:	e841 2300 	strex	r3, r2, [r1]
 800baf0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800baf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d1e3      	bne.n	800bac0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2220      	movs	r2, #32
 800bafc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0e:	e853 3f00 	ldrex	r3, [r3]
 800bb12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb16:	f023 0310 	bic.w	r3, r3, #16
 800bb1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	461a      	mov	r2, r3
 800bb24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb28:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb30:	e841 2300 	strex	r3, r2, [r1]
 800bb34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e4      	bne.n	800bb06 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fa f9d1 	bl	8005ee8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f912 	bl	800bd84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb60:	e0fb      	b.n	800bd5a <HAL_UART_IRQHandler+0x726>
 800bb62:	bf00      	nop
 800bb64:	40020010 	.word	0x40020010
 800bb68:	40020028 	.word	0x40020028
 800bb6c:	40020040 	.word	0x40020040
 800bb70:	40020058 	.word	0x40020058
 800bb74:	40020070 	.word	0x40020070
 800bb78:	40020088 	.word	0x40020088
 800bb7c:	400200a0 	.word	0x400200a0
 800bb80:	400200b8 	.word	0x400200b8
 800bb84:	40020410 	.word	0x40020410
 800bb88:	40020428 	.word	0x40020428
 800bb8c:	40020440 	.word	0x40020440
 800bb90:	40020458 	.word	0x40020458
 800bb94:	40020470 	.word	0x40020470
 800bb98:	40020488 	.word	0x40020488
 800bb9c:	400204a0 	.word	0x400204a0
 800bba0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 80cc 	beq.w	800bd5e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800bbc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f000 80c7 	beq.w	800bd5e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	e853 3f00 	ldrex	r3, [r3]
 800bbdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	461a      	mov	r2, r3
 800bbee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbf2:	647b      	str	r3, [r7, #68]	; 0x44
 800bbf4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbfa:	e841 2300 	strex	r3, r2, [r1]
 800bbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1e4      	bne.n	800bbd0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc10:	e853 3f00 	ldrex	r3, [r3]
 800bc14:	623b      	str	r3, [r7, #32]
   return(result);
 800bc16:	6a3a      	ldr	r2, [r7, #32]
 800bc18:	4b54      	ldr	r3, [pc, #336]	; (800bd6c <HAL_UART_IRQHandler+0x738>)
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3308      	adds	r3, #8
 800bc26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc2a:	633a      	str	r2, [r7, #48]	; 0x30
 800bc2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc32:	e841 2300 	strex	r3, r2, [r1]
 800bc36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1e3      	bne.n	800bc06 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2220      	movs	r2, #32
 800bc42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	e853 3f00 	ldrex	r3, [r3]
 800bc5e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f023 0310 	bic.w	r3, r3, #16
 800bc66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bc74:	61fb      	str	r3, [r7, #28]
 800bc76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc78:	69b9      	ldr	r1, [r7, #24]
 800bc7a:	69fa      	ldr	r2, [r7, #28]
 800bc7c:	e841 2300 	strex	r3, r2, [r1]
 800bc80:	617b      	str	r3, [r7, #20]
   return(result);
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1e4      	bne.n	800bc52 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 f878 	bl	800bd84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc94:	e063      	b.n	800bd5e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00e      	beq.n	800bcc0 <HAL_UART_IRQHandler+0x68c>
 800bca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d008      	beq.n	800bcc0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bcb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f001 fdbb 	bl	800d834 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bcbe:	e051      	b.n	800bd64 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bcc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d014      	beq.n	800bcf6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d105      	bne.n	800bce4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bcd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d008      	beq.n	800bcf6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d03a      	beq.n	800bd62 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	4798      	blx	r3
    }
    return;
 800bcf4:	e035      	b.n	800bd62 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bcf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d009      	beq.n	800bd16 <HAL_UART_IRQHandler+0x6e2>
 800bd02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d003      	beq.n	800bd16 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f001 f908 	bl	800cf24 <UART_EndTransmit_IT>
    return;
 800bd14:	e026      	b.n	800bd64 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bd16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d009      	beq.n	800bd36 <HAL_UART_IRQHandler+0x702>
 800bd22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d003      	beq.n	800bd36 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f001 fd94 	bl	800d85c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd34:	e016      	b.n	800bd64 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d010      	beq.n	800bd64 <HAL_UART_IRQHandler+0x730>
 800bd42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	da0c      	bge.n	800bd64 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f001 fd7c 	bl	800d848 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd50:	e008      	b.n	800bd64 <HAL_UART_IRQHandler+0x730>
      return;
 800bd52:	bf00      	nop
 800bd54:	e006      	b.n	800bd64 <HAL_UART_IRQHandler+0x730>
    return;
 800bd56:	bf00      	nop
 800bd58:	e004      	b.n	800bd64 <HAL_UART_IRQHandler+0x730>
      return;
 800bd5a:	bf00      	nop
 800bd5c:	e002      	b.n	800bd64 <HAL_UART_IRQHandler+0x730>
      return;
 800bd5e:	bf00      	nop
 800bd60:	e000      	b.n	800bd64 <HAL_UART_IRQHandler+0x730>
    return;
 800bd62:	bf00      	nop
  }
}
 800bd64:	37e8      	adds	r7, #232	; 0xe8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	effffffe 	.word	0xeffffffe

0800bd70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd90:	bf00      	nop
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bda0:	b092      	sub	sp, #72	; 0x48
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	431a      	orrs	r2, r3
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	69db      	ldr	r3, [r3, #28]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	4bbe      	ldr	r3, [pc, #760]	; (800c0c4 <UART_SetConfig+0x328>)
 800bdcc:	4013      	ands	r3, r2
 800bdce:	697a      	ldr	r2, [r7, #20]
 800bdd0:	6812      	ldr	r2, [r2, #0]
 800bdd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bdd4:	430b      	orrs	r3, r1
 800bdd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	68da      	ldr	r2, [r3, #12]
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	430a      	orrs	r2, r1
 800bdec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	699b      	ldr	r3, [r3, #24]
 800bdf2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4ab3      	ldr	r2, [pc, #716]	; (800c0c8 <UART_SetConfig+0x32c>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d004      	beq.n	800be08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	6a1b      	ldr	r3, [r3, #32]
 800be02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be04:	4313      	orrs	r3, r2
 800be06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	689a      	ldr	r2, [r3, #8]
 800be0e:	4baf      	ldr	r3, [pc, #700]	; (800c0cc <UART_SetConfig+0x330>)
 800be10:	4013      	ands	r3, r2
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	6812      	ldr	r2, [r2, #0]
 800be16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be18:	430b      	orrs	r3, r1
 800be1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be22:	f023 010f 	bic.w	r1, r3, #15
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4aa6      	ldr	r2, [pc, #664]	; (800c0d0 <UART_SetConfig+0x334>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d177      	bne.n	800bf2c <UART_SetConfig+0x190>
 800be3c:	4ba5      	ldr	r3, [pc, #660]	; (800c0d4 <UART_SetConfig+0x338>)
 800be3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be44:	2b28      	cmp	r3, #40	; 0x28
 800be46:	d86d      	bhi.n	800bf24 <UART_SetConfig+0x188>
 800be48:	a201      	add	r2, pc, #4	; (adr r2, 800be50 <UART_SetConfig+0xb4>)
 800be4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be4e:	bf00      	nop
 800be50:	0800bef5 	.word	0x0800bef5
 800be54:	0800bf25 	.word	0x0800bf25
 800be58:	0800bf25 	.word	0x0800bf25
 800be5c:	0800bf25 	.word	0x0800bf25
 800be60:	0800bf25 	.word	0x0800bf25
 800be64:	0800bf25 	.word	0x0800bf25
 800be68:	0800bf25 	.word	0x0800bf25
 800be6c:	0800bf25 	.word	0x0800bf25
 800be70:	0800befd 	.word	0x0800befd
 800be74:	0800bf25 	.word	0x0800bf25
 800be78:	0800bf25 	.word	0x0800bf25
 800be7c:	0800bf25 	.word	0x0800bf25
 800be80:	0800bf25 	.word	0x0800bf25
 800be84:	0800bf25 	.word	0x0800bf25
 800be88:	0800bf25 	.word	0x0800bf25
 800be8c:	0800bf25 	.word	0x0800bf25
 800be90:	0800bf05 	.word	0x0800bf05
 800be94:	0800bf25 	.word	0x0800bf25
 800be98:	0800bf25 	.word	0x0800bf25
 800be9c:	0800bf25 	.word	0x0800bf25
 800bea0:	0800bf25 	.word	0x0800bf25
 800bea4:	0800bf25 	.word	0x0800bf25
 800bea8:	0800bf25 	.word	0x0800bf25
 800beac:	0800bf25 	.word	0x0800bf25
 800beb0:	0800bf0d 	.word	0x0800bf0d
 800beb4:	0800bf25 	.word	0x0800bf25
 800beb8:	0800bf25 	.word	0x0800bf25
 800bebc:	0800bf25 	.word	0x0800bf25
 800bec0:	0800bf25 	.word	0x0800bf25
 800bec4:	0800bf25 	.word	0x0800bf25
 800bec8:	0800bf25 	.word	0x0800bf25
 800becc:	0800bf25 	.word	0x0800bf25
 800bed0:	0800bf15 	.word	0x0800bf15
 800bed4:	0800bf25 	.word	0x0800bf25
 800bed8:	0800bf25 	.word	0x0800bf25
 800bedc:	0800bf25 	.word	0x0800bf25
 800bee0:	0800bf25 	.word	0x0800bf25
 800bee4:	0800bf25 	.word	0x0800bf25
 800bee8:	0800bf25 	.word	0x0800bf25
 800beec:	0800bf25 	.word	0x0800bf25
 800bef0:	0800bf1d 	.word	0x0800bf1d
 800bef4:	2301      	movs	r3, #1
 800bef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800befa:	e222      	b.n	800c342 <UART_SetConfig+0x5a6>
 800befc:	2304      	movs	r3, #4
 800befe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf02:	e21e      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf04:	2308      	movs	r3, #8
 800bf06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf0a:	e21a      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf0c:	2310      	movs	r3, #16
 800bf0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf12:	e216      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf14:	2320      	movs	r3, #32
 800bf16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf1a:	e212      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf1c:	2340      	movs	r3, #64	; 0x40
 800bf1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf22:	e20e      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf24:	2380      	movs	r3, #128	; 0x80
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2a:	e20a      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a69      	ldr	r2, [pc, #420]	; (800c0d8 <UART_SetConfig+0x33c>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d130      	bne.n	800bf98 <UART_SetConfig+0x1fc>
 800bf36:	4b67      	ldr	r3, [pc, #412]	; (800c0d4 <UART_SetConfig+0x338>)
 800bf38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf3a:	f003 0307 	and.w	r3, r3, #7
 800bf3e:	2b05      	cmp	r3, #5
 800bf40:	d826      	bhi.n	800bf90 <UART_SetConfig+0x1f4>
 800bf42:	a201      	add	r2, pc, #4	; (adr r2, 800bf48 <UART_SetConfig+0x1ac>)
 800bf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf48:	0800bf61 	.word	0x0800bf61
 800bf4c:	0800bf69 	.word	0x0800bf69
 800bf50:	0800bf71 	.word	0x0800bf71
 800bf54:	0800bf79 	.word	0x0800bf79
 800bf58:	0800bf81 	.word	0x0800bf81
 800bf5c:	0800bf89 	.word	0x0800bf89
 800bf60:	2300      	movs	r3, #0
 800bf62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf66:	e1ec      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf68:	2304      	movs	r3, #4
 800bf6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf6e:	e1e8      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf70:	2308      	movs	r3, #8
 800bf72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf76:	e1e4      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf78:	2310      	movs	r3, #16
 800bf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf7e:	e1e0      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf80:	2320      	movs	r3, #32
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf86:	e1dc      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf88:	2340      	movs	r3, #64	; 0x40
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8e:	e1d8      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf90:	2380      	movs	r3, #128	; 0x80
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e1d4      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a4f      	ldr	r2, [pc, #316]	; (800c0dc <UART_SetConfig+0x340>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d130      	bne.n	800c004 <UART_SetConfig+0x268>
 800bfa2:	4b4c      	ldr	r3, [pc, #304]	; (800c0d4 <UART_SetConfig+0x338>)
 800bfa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfa6:	f003 0307 	and.w	r3, r3, #7
 800bfaa:	2b05      	cmp	r3, #5
 800bfac:	d826      	bhi.n	800bffc <UART_SetConfig+0x260>
 800bfae:	a201      	add	r2, pc, #4	; (adr r2, 800bfb4 <UART_SetConfig+0x218>)
 800bfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb4:	0800bfcd 	.word	0x0800bfcd
 800bfb8:	0800bfd5 	.word	0x0800bfd5
 800bfbc:	0800bfdd 	.word	0x0800bfdd
 800bfc0:	0800bfe5 	.word	0x0800bfe5
 800bfc4:	0800bfed 	.word	0x0800bfed
 800bfc8:	0800bff5 	.word	0x0800bff5
 800bfcc:	2300      	movs	r3, #0
 800bfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfd2:	e1b6      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bfd4:	2304      	movs	r3, #4
 800bfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfda:	e1b2      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bfdc:	2308      	movs	r3, #8
 800bfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfe2:	e1ae      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bfe4:	2310      	movs	r3, #16
 800bfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfea:	e1aa      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bfec:	2320      	movs	r3, #32
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bff2:	e1a6      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bff4:	2340      	movs	r3, #64	; 0x40
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffa:	e1a2      	b.n	800c342 <UART_SetConfig+0x5a6>
 800bffc:	2380      	movs	r3, #128	; 0x80
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c002:	e19e      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a35      	ldr	r2, [pc, #212]	; (800c0e0 <UART_SetConfig+0x344>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d130      	bne.n	800c070 <UART_SetConfig+0x2d4>
 800c00e:	4b31      	ldr	r3, [pc, #196]	; (800c0d4 <UART_SetConfig+0x338>)
 800c010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c012:	f003 0307 	and.w	r3, r3, #7
 800c016:	2b05      	cmp	r3, #5
 800c018:	d826      	bhi.n	800c068 <UART_SetConfig+0x2cc>
 800c01a:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <UART_SetConfig+0x284>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c039 	.word	0x0800c039
 800c024:	0800c041 	.word	0x0800c041
 800c028:	0800c049 	.word	0x0800c049
 800c02c:	0800c051 	.word	0x0800c051
 800c030:	0800c059 	.word	0x0800c059
 800c034:	0800c061 	.word	0x0800c061
 800c038:	2300      	movs	r3, #0
 800c03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c03e:	e180      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c040:	2304      	movs	r3, #4
 800c042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c046:	e17c      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c048:	2308      	movs	r3, #8
 800c04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c04e:	e178      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c050:	2310      	movs	r3, #16
 800c052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c056:	e174      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c058:	2320      	movs	r3, #32
 800c05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c05e:	e170      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c060:	2340      	movs	r3, #64	; 0x40
 800c062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c066:	e16c      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c068:	2380      	movs	r3, #128	; 0x80
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06e:	e168      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a1b      	ldr	r2, [pc, #108]	; (800c0e4 <UART_SetConfig+0x348>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d142      	bne.n	800c100 <UART_SetConfig+0x364>
 800c07a:	4b16      	ldr	r3, [pc, #88]	; (800c0d4 <UART_SetConfig+0x338>)
 800c07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c07e:	f003 0307 	and.w	r3, r3, #7
 800c082:	2b05      	cmp	r3, #5
 800c084:	d838      	bhi.n	800c0f8 <UART_SetConfig+0x35c>
 800c086:	a201      	add	r2, pc, #4	; (adr r2, 800c08c <UART_SetConfig+0x2f0>)
 800c088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c08c:	0800c0a5 	.word	0x0800c0a5
 800c090:	0800c0ad 	.word	0x0800c0ad
 800c094:	0800c0b5 	.word	0x0800c0b5
 800c098:	0800c0bd 	.word	0x0800c0bd
 800c09c:	0800c0e9 	.word	0x0800c0e9
 800c0a0:	0800c0f1 	.word	0x0800c0f1
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0aa:	e14a      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c0ac:	2304      	movs	r3, #4
 800c0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0b2:	e146      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c0b4:	2308      	movs	r3, #8
 800c0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ba:	e142      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c0bc:	2310      	movs	r3, #16
 800c0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0c2:	e13e      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c0c4:	cfff69f3 	.word	0xcfff69f3
 800c0c8:	58000c00 	.word	0x58000c00
 800c0cc:	11fff4ff 	.word	0x11fff4ff
 800c0d0:	40011000 	.word	0x40011000
 800c0d4:	58024400 	.word	0x58024400
 800c0d8:	40004400 	.word	0x40004400
 800c0dc:	40004800 	.word	0x40004800
 800c0e0:	40004c00 	.word	0x40004c00
 800c0e4:	40005000 	.word	0x40005000
 800c0e8:	2320      	movs	r3, #32
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ee:	e128      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c0f0:	2340      	movs	r3, #64	; 0x40
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f6:	e124      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c0f8:	2380      	movs	r3, #128	; 0x80
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fe:	e120      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4acb      	ldr	r2, [pc, #812]	; (800c434 <UART_SetConfig+0x698>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d176      	bne.n	800c1f8 <UART_SetConfig+0x45c>
 800c10a:	4bcb      	ldr	r3, [pc, #812]	; (800c438 <UART_SetConfig+0x69c>)
 800c10c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c10e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c112:	2b28      	cmp	r3, #40	; 0x28
 800c114:	d86c      	bhi.n	800c1f0 <UART_SetConfig+0x454>
 800c116:	a201      	add	r2, pc, #4	; (adr r2, 800c11c <UART_SetConfig+0x380>)
 800c118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11c:	0800c1c1 	.word	0x0800c1c1
 800c120:	0800c1f1 	.word	0x0800c1f1
 800c124:	0800c1f1 	.word	0x0800c1f1
 800c128:	0800c1f1 	.word	0x0800c1f1
 800c12c:	0800c1f1 	.word	0x0800c1f1
 800c130:	0800c1f1 	.word	0x0800c1f1
 800c134:	0800c1f1 	.word	0x0800c1f1
 800c138:	0800c1f1 	.word	0x0800c1f1
 800c13c:	0800c1c9 	.word	0x0800c1c9
 800c140:	0800c1f1 	.word	0x0800c1f1
 800c144:	0800c1f1 	.word	0x0800c1f1
 800c148:	0800c1f1 	.word	0x0800c1f1
 800c14c:	0800c1f1 	.word	0x0800c1f1
 800c150:	0800c1f1 	.word	0x0800c1f1
 800c154:	0800c1f1 	.word	0x0800c1f1
 800c158:	0800c1f1 	.word	0x0800c1f1
 800c15c:	0800c1d1 	.word	0x0800c1d1
 800c160:	0800c1f1 	.word	0x0800c1f1
 800c164:	0800c1f1 	.word	0x0800c1f1
 800c168:	0800c1f1 	.word	0x0800c1f1
 800c16c:	0800c1f1 	.word	0x0800c1f1
 800c170:	0800c1f1 	.word	0x0800c1f1
 800c174:	0800c1f1 	.word	0x0800c1f1
 800c178:	0800c1f1 	.word	0x0800c1f1
 800c17c:	0800c1d9 	.word	0x0800c1d9
 800c180:	0800c1f1 	.word	0x0800c1f1
 800c184:	0800c1f1 	.word	0x0800c1f1
 800c188:	0800c1f1 	.word	0x0800c1f1
 800c18c:	0800c1f1 	.word	0x0800c1f1
 800c190:	0800c1f1 	.word	0x0800c1f1
 800c194:	0800c1f1 	.word	0x0800c1f1
 800c198:	0800c1f1 	.word	0x0800c1f1
 800c19c:	0800c1e1 	.word	0x0800c1e1
 800c1a0:	0800c1f1 	.word	0x0800c1f1
 800c1a4:	0800c1f1 	.word	0x0800c1f1
 800c1a8:	0800c1f1 	.word	0x0800c1f1
 800c1ac:	0800c1f1 	.word	0x0800c1f1
 800c1b0:	0800c1f1 	.word	0x0800c1f1
 800c1b4:	0800c1f1 	.word	0x0800c1f1
 800c1b8:	0800c1f1 	.word	0x0800c1f1
 800c1bc:	0800c1e9 	.word	0x0800c1e9
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c6:	e0bc      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c1c8:	2304      	movs	r3, #4
 800c1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ce:	e0b8      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c1d0:	2308      	movs	r3, #8
 800c1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1d6:	e0b4      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c1d8:	2310      	movs	r3, #16
 800c1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1de:	e0b0      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c1e0:	2320      	movs	r3, #32
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e6:	e0ac      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c1e8:	2340      	movs	r3, #64	; 0x40
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ee:	e0a8      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c1f0:	2380      	movs	r3, #128	; 0x80
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f6:	e0a4      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a8f      	ldr	r2, [pc, #572]	; (800c43c <UART_SetConfig+0x6a0>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d130      	bne.n	800c264 <UART_SetConfig+0x4c8>
 800c202:	4b8d      	ldr	r3, [pc, #564]	; (800c438 <UART_SetConfig+0x69c>)
 800c204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c206:	f003 0307 	and.w	r3, r3, #7
 800c20a:	2b05      	cmp	r3, #5
 800c20c:	d826      	bhi.n	800c25c <UART_SetConfig+0x4c0>
 800c20e:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <UART_SetConfig+0x478>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c22d 	.word	0x0800c22d
 800c218:	0800c235 	.word	0x0800c235
 800c21c:	0800c23d 	.word	0x0800c23d
 800c220:	0800c245 	.word	0x0800c245
 800c224:	0800c24d 	.word	0x0800c24d
 800c228:	0800c255 	.word	0x0800c255
 800c22c:	2300      	movs	r3, #0
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c232:	e086      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c234:	2304      	movs	r3, #4
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c23a:	e082      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c23c:	2308      	movs	r3, #8
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c242:	e07e      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c244:	2310      	movs	r3, #16
 800c246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24a:	e07a      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c24c:	2320      	movs	r3, #32
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c252:	e076      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c254:	2340      	movs	r3, #64	; 0x40
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25a:	e072      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c25c:	2380      	movs	r3, #128	; 0x80
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c262:	e06e      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a75      	ldr	r2, [pc, #468]	; (800c440 <UART_SetConfig+0x6a4>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d130      	bne.n	800c2d0 <UART_SetConfig+0x534>
 800c26e:	4b72      	ldr	r3, [pc, #456]	; (800c438 <UART_SetConfig+0x69c>)
 800c270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c272:	f003 0307 	and.w	r3, r3, #7
 800c276:	2b05      	cmp	r3, #5
 800c278:	d826      	bhi.n	800c2c8 <UART_SetConfig+0x52c>
 800c27a:	a201      	add	r2, pc, #4	; (adr r2, 800c280 <UART_SetConfig+0x4e4>)
 800c27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c280:	0800c299 	.word	0x0800c299
 800c284:	0800c2a1 	.word	0x0800c2a1
 800c288:	0800c2a9 	.word	0x0800c2a9
 800c28c:	0800c2b1 	.word	0x0800c2b1
 800c290:	0800c2b9 	.word	0x0800c2b9
 800c294:	0800c2c1 	.word	0x0800c2c1
 800c298:	2300      	movs	r3, #0
 800c29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29e:	e050      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c2a0:	2304      	movs	r3, #4
 800c2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a6:	e04c      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c2a8:	2308      	movs	r3, #8
 800c2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ae:	e048      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c2b0:	2310      	movs	r3, #16
 800c2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2b6:	e044      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c2b8:	2320      	movs	r3, #32
 800c2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2be:	e040      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c2c0:	2340      	movs	r3, #64	; 0x40
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c6:	e03c      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c2c8:	2380      	movs	r3, #128	; 0x80
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ce:	e038      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a5b      	ldr	r2, [pc, #364]	; (800c444 <UART_SetConfig+0x6a8>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d130      	bne.n	800c33c <UART_SetConfig+0x5a0>
 800c2da:	4b57      	ldr	r3, [pc, #348]	; (800c438 <UART_SetConfig+0x69c>)
 800c2dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2de:	f003 0307 	and.w	r3, r3, #7
 800c2e2:	2b05      	cmp	r3, #5
 800c2e4:	d826      	bhi.n	800c334 <UART_SetConfig+0x598>
 800c2e6:	a201      	add	r2, pc, #4	; (adr r2, 800c2ec <UART_SetConfig+0x550>)
 800c2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ec:	0800c305 	.word	0x0800c305
 800c2f0:	0800c30d 	.word	0x0800c30d
 800c2f4:	0800c315 	.word	0x0800c315
 800c2f8:	0800c31d 	.word	0x0800c31d
 800c2fc:	0800c325 	.word	0x0800c325
 800c300:	0800c32d 	.word	0x0800c32d
 800c304:	2302      	movs	r3, #2
 800c306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30a:	e01a      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c30c:	2304      	movs	r3, #4
 800c30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c312:	e016      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c314:	2308      	movs	r3, #8
 800c316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c31a:	e012      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c31c:	2310      	movs	r3, #16
 800c31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c322:	e00e      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c324:	2320      	movs	r3, #32
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32a:	e00a      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c32c:	2340      	movs	r3, #64	; 0x40
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c332:	e006      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c334:	2380      	movs	r3, #128	; 0x80
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33a:	e002      	b.n	800c342 <UART_SetConfig+0x5a6>
 800c33c:	2380      	movs	r3, #128	; 0x80
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a3f      	ldr	r2, [pc, #252]	; (800c444 <UART_SetConfig+0x6a8>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	f040 80f8 	bne.w	800c53e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c34e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c352:	2b20      	cmp	r3, #32
 800c354:	dc46      	bgt.n	800c3e4 <UART_SetConfig+0x648>
 800c356:	2b02      	cmp	r3, #2
 800c358:	f2c0 8082 	blt.w	800c460 <UART_SetConfig+0x6c4>
 800c35c:	3b02      	subs	r3, #2
 800c35e:	2b1e      	cmp	r3, #30
 800c360:	d87e      	bhi.n	800c460 <UART_SetConfig+0x6c4>
 800c362:	a201      	add	r2, pc, #4	; (adr r2, 800c368 <UART_SetConfig+0x5cc>)
 800c364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c368:	0800c3eb 	.word	0x0800c3eb
 800c36c:	0800c461 	.word	0x0800c461
 800c370:	0800c3f3 	.word	0x0800c3f3
 800c374:	0800c461 	.word	0x0800c461
 800c378:	0800c461 	.word	0x0800c461
 800c37c:	0800c461 	.word	0x0800c461
 800c380:	0800c403 	.word	0x0800c403
 800c384:	0800c461 	.word	0x0800c461
 800c388:	0800c461 	.word	0x0800c461
 800c38c:	0800c461 	.word	0x0800c461
 800c390:	0800c461 	.word	0x0800c461
 800c394:	0800c461 	.word	0x0800c461
 800c398:	0800c461 	.word	0x0800c461
 800c39c:	0800c461 	.word	0x0800c461
 800c3a0:	0800c413 	.word	0x0800c413
 800c3a4:	0800c461 	.word	0x0800c461
 800c3a8:	0800c461 	.word	0x0800c461
 800c3ac:	0800c461 	.word	0x0800c461
 800c3b0:	0800c461 	.word	0x0800c461
 800c3b4:	0800c461 	.word	0x0800c461
 800c3b8:	0800c461 	.word	0x0800c461
 800c3bc:	0800c461 	.word	0x0800c461
 800c3c0:	0800c461 	.word	0x0800c461
 800c3c4:	0800c461 	.word	0x0800c461
 800c3c8:	0800c461 	.word	0x0800c461
 800c3cc:	0800c461 	.word	0x0800c461
 800c3d0:	0800c461 	.word	0x0800c461
 800c3d4:	0800c461 	.word	0x0800c461
 800c3d8:	0800c461 	.word	0x0800c461
 800c3dc:	0800c461 	.word	0x0800c461
 800c3e0:	0800c453 	.word	0x0800c453
 800c3e4:	2b40      	cmp	r3, #64	; 0x40
 800c3e6:	d037      	beq.n	800c458 <UART_SetConfig+0x6bc>
 800c3e8:	e03a      	b.n	800c460 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c3ea:	f7fc fc17 	bl	8008c1c <HAL_RCCEx_GetD3PCLK1Freq>
 800c3ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3f0:	e03c      	b.n	800c46c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fc fc26 	bl	8008c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c400:	e034      	b.n	800c46c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c402:	f107 0318 	add.w	r3, r7, #24
 800c406:	4618      	mov	r0, r3
 800c408:	f7fc fd72 	bl	8008ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c410:	e02c      	b.n	800c46c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c412:	4b09      	ldr	r3, [pc, #36]	; (800c438 <UART_SetConfig+0x69c>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 0320 	and.w	r3, r3, #32
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d016      	beq.n	800c44c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c41e:	4b06      	ldr	r3, [pc, #24]	; (800c438 <UART_SetConfig+0x69c>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	08db      	lsrs	r3, r3, #3
 800c424:	f003 0303 	and.w	r3, r3, #3
 800c428:	4a07      	ldr	r2, [pc, #28]	; (800c448 <UART_SetConfig+0x6ac>)
 800c42a:	fa22 f303 	lsr.w	r3, r2, r3
 800c42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c430:	e01c      	b.n	800c46c <UART_SetConfig+0x6d0>
 800c432:	bf00      	nop
 800c434:	40011400 	.word	0x40011400
 800c438:	58024400 	.word	0x58024400
 800c43c:	40007800 	.word	0x40007800
 800c440:	40007c00 	.word	0x40007c00
 800c444:	58000c00 	.word	0x58000c00
 800c448:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c44c:	4b9d      	ldr	r3, [pc, #628]	; (800c6c4 <UART_SetConfig+0x928>)
 800c44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c450:	e00c      	b.n	800c46c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c452:	4b9d      	ldr	r3, [pc, #628]	; (800c6c8 <UART_SetConfig+0x92c>)
 800c454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c456:	e009      	b.n	800c46c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c45e:	e005      	b.n	800c46c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c460:	2300      	movs	r3, #0
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c46a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f000 81de 	beq.w	800c830 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c478:	4a94      	ldr	r2, [pc, #592]	; (800c6cc <UART_SetConfig+0x930>)
 800c47a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c47e:	461a      	mov	r2, r3
 800c480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c482:	fbb3 f3f2 	udiv	r3, r3, r2
 800c486:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	685a      	ldr	r2, [r3, #4]
 800c48c:	4613      	mov	r3, r2
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	4413      	add	r3, r2
 800c492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c494:	429a      	cmp	r2, r3
 800c496:	d305      	bcc.n	800c4a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c49e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d903      	bls.n	800c4ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c4aa:	e1c1      	b.n	800c830 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	60bb      	str	r3, [r7, #8]
 800c4b2:	60fa      	str	r2, [r7, #12]
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b8:	4a84      	ldr	r2, [pc, #528]	; (800c6cc <UART_SetConfig+0x930>)
 800c4ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	603b      	str	r3, [r7, #0]
 800c4c4:	607a      	str	r2, [r7, #4]
 800c4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c4ce:	f7f4 f91b 	bl	8000708 <__aeabi_uldivmod>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	4619      	mov	r1, r3
 800c4da:	f04f 0200 	mov.w	r2, #0
 800c4de:	f04f 0300 	mov.w	r3, #0
 800c4e2:	020b      	lsls	r3, r1, #8
 800c4e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c4e8:	0202      	lsls	r2, r0, #8
 800c4ea:	6979      	ldr	r1, [r7, #20]
 800c4ec:	6849      	ldr	r1, [r1, #4]
 800c4ee:	0849      	lsrs	r1, r1, #1
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	eb12 0804 	adds.w	r8, r2, r4
 800c4fa:	eb43 0905 	adc.w	r9, r3, r5
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	469a      	mov	sl, r3
 800c506:	4693      	mov	fp, r2
 800c508:	4652      	mov	r2, sl
 800c50a:	465b      	mov	r3, fp
 800c50c:	4640      	mov	r0, r8
 800c50e:	4649      	mov	r1, r9
 800c510:	f7f4 f8fa 	bl	8000708 <__aeabi_uldivmod>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	4613      	mov	r3, r2
 800c51a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c522:	d308      	bcc.n	800c536 <UART_SetConfig+0x79a>
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c52a:	d204      	bcs.n	800c536 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c532:	60da      	str	r2, [r3, #12]
 800c534:	e17c      	b.n	800c830 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c53c:	e178      	b.n	800c830 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	69db      	ldr	r3, [r3, #28]
 800c542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c546:	f040 80c5 	bne.w	800c6d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c54a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c54e:	2b20      	cmp	r3, #32
 800c550:	dc48      	bgt.n	800c5e4 <UART_SetConfig+0x848>
 800c552:	2b00      	cmp	r3, #0
 800c554:	db7b      	blt.n	800c64e <UART_SetConfig+0x8b2>
 800c556:	2b20      	cmp	r3, #32
 800c558:	d879      	bhi.n	800c64e <UART_SetConfig+0x8b2>
 800c55a:	a201      	add	r2, pc, #4	; (adr r2, 800c560 <UART_SetConfig+0x7c4>)
 800c55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c560:	0800c5eb 	.word	0x0800c5eb
 800c564:	0800c5f3 	.word	0x0800c5f3
 800c568:	0800c64f 	.word	0x0800c64f
 800c56c:	0800c64f 	.word	0x0800c64f
 800c570:	0800c5fb 	.word	0x0800c5fb
 800c574:	0800c64f 	.word	0x0800c64f
 800c578:	0800c64f 	.word	0x0800c64f
 800c57c:	0800c64f 	.word	0x0800c64f
 800c580:	0800c60b 	.word	0x0800c60b
 800c584:	0800c64f 	.word	0x0800c64f
 800c588:	0800c64f 	.word	0x0800c64f
 800c58c:	0800c64f 	.word	0x0800c64f
 800c590:	0800c64f 	.word	0x0800c64f
 800c594:	0800c64f 	.word	0x0800c64f
 800c598:	0800c64f 	.word	0x0800c64f
 800c59c:	0800c64f 	.word	0x0800c64f
 800c5a0:	0800c61b 	.word	0x0800c61b
 800c5a4:	0800c64f 	.word	0x0800c64f
 800c5a8:	0800c64f 	.word	0x0800c64f
 800c5ac:	0800c64f 	.word	0x0800c64f
 800c5b0:	0800c64f 	.word	0x0800c64f
 800c5b4:	0800c64f 	.word	0x0800c64f
 800c5b8:	0800c64f 	.word	0x0800c64f
 800c5bc:	0800c64f 	.word	0x0800c64f
 800c5c0:	0800c64f 	.word	0x0800c64f
 800c5c4:	0800c64f 	.word	0x0800c64f
 800c5c8:	0800c64f 	.word	0x0800c64f
 800c5cc:	0800c64f 	.word	0x0800c64f
 800c5d0:	0800c64f 	.word	0x0800c64f
 800c5d4:	0800c64f 	.word	0x0800c64f
 800c5d8:	0800c64f 	.word	0x0800c64f
 800c5dc:	0800c64f 	.word	0x0800c64f
 800c5e0:	0800c641 	.word	0x0800c641
 800c5e4:	2b40      	cmp	r3, #64	; 0x40
 800c5e6:	d02e      	beq.n	800c646 <UART_SetConfig+0x8aa>
 800c5e8:	e031      	b.n	800c64e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5ea:	f7fb fba5 	bl	8007d38 <HAL_RCC_GetPCLK1Freq>
 800c5ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5f0:	e033      	b.n	800c65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5f2:	f7fb fbb7 	bl	8007d64 <HAL_RCC_GetPCLK2Freq>
 800c5f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5f8:	e02f      	b.n	800c65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7fc fb22 	bl	8008c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c608:	e027      	b.n	800c65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c60a:	f107 0318 	add.w	r3, r7, #24
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fc fc6e 	bl	8008ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c618:	e01f      	b.n	800c65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c61a:	4b2d      	ldr	r3, [pc, #180]	; (800c6d0 <UART_SetConfig+0x934>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f003 0320 	and.w	r3, r3, #32
 800c622:	2b00      	cmp	r3, #0
 800c624:	d009      	beq.n	800c63a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c626:	4b2a      	ldr	r3, [pc, #168]	; (800c6d0 <UART_SetConfig+0x934>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	08db      	lsrs	r3, r3, #3
 800c62c:	f003 0303 	and.w	r3, r3, #3
 800c630:	4a24      	ldr	r2, [pc, #144]	; (800c6c4 <UART_SetConfig+0x928>)
 800c632:	fa22 f303 	lsr.w	r3, r2, r3
 800c636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c638:	e00f      	b.n	800c65a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c63a:	4b22      	ldr	r3, [pc, #136]	; (800c6c4 <UART_SetConfig+0x928>)
 800c63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c63e:	e00c      	b.n	800c65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c640:	4b21      	ldr	r3, [pc, #132]	; (800c6c8 <UART_SetConfig+0x92c>)
 800c642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c644:	e009      	b.n	800c65a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c64c:	e005      	b.n	800c65a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c64e:	2300      	movs	r3, #0
 800c650:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f000 80e7 	beq.w	800c830 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c666:	4a19      	ldr	r2, [pc, #100]	; (800c6cc <UART_SetConfig+0x930>)
 800c668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c66c:	461a      	mov	r2, r3
 800c66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c670:	fbb3 f3f2 	udiv	r3, r3, r2
 800c674:	005a      	lsls	r2, r3, #1
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	085b      	lsrs	r3, r3, #1
 800c67c:	441a      	add	r2, r3
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	fbb2 f3f3 	udiv	r3, r2, r3
 800c686:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	2b0f      	cmp	r3, #15
 800c68c:	d916      	bls.n	800c6bc <UART_SetConfig+0x920>
 800c68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c694:	d212      	bcs.n	800c6bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c698:	b29b      	uxth	r3, r3
 800c69a:	f023 030f 	bic.w	r3, r3, #15
 800c69e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	085b      	lsrs	r3, r3, #1
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	f003 0307 	and.w	r3, r3, #7
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c6b8:	60da      	str	r2, [r3, #12]
 800c6ba:	e0b9      	b.n	800c830 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c6c2:	e0b5      	b.n	800c830 <UART_SetConfig+0xa94>
 800c6c4:	03d09000 	.word	0x03d09000
 800c6c8:	003d0900 	.word	0x003d0900
 800c6cc:	080110c0 	.word	0x080110c0
 800c6d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c6d8:	2b20      	cmp	r3, #32
 800c6da:	dc49      	bgt.n	800c770 <UART_SetConfig+0x9d4>
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	db7c      	blt.n	800c7da <UART_SetConfig+0xa3e>
 800c6e0:	2b20      	cmp	r3, #32
 800c6e2:	d87a      	bhi.n	800c7da <UART_SetConfig+0xa3e>
 800c6e4:	a201      	add	r2, pc, #4	; (adr r2, 800c6ec <UART_SetConfig+0x950>)
 800c6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ea:	bf00      	nop
 800c6ec:	0800c777 	.word	0x0800c777
 800c6f0:	0800c77f 	.word	0x0800c77f
 800c6f4:	0800c7db 	.word	0x0800c7db
 800c6f8:	0800c7db 	.word	0x0800c7db
 800c6fc:	0800c787 	.word	0x0800c787
 800c700:	0800c7db 	.word	0x0800c7db
 800c704:	0800c7db 	.word	0x0800c7db
 800c708:	0800c7db 	.word	0x0800c7db
 800c70c:	0800c797 	.word	0x0800c797
 800c710:	0800c7db 	.word	0x0800c7db
 800c714:	0800c7db 	.word	0x0800c7db
 800c718:	0800c7db 	.word	0x0800c7db
 800c71c:	0800c7db 	.word	0x0800c7db
 800c720:	0800c7db 	.word	0x0800c7db
 800c724:	0800c7db 	.word	0x0800c7db
 800c728:	0800c7db 	.word	0x0800c7db
 800c72c:	0800c7a7 	.word	0x0800c7a7
 800c730:	0800c7db 	.word	0x0800c7db
 800c734:	0800c7db 	.word	0x0800c7db
 800c738:	0800c7db 	.word	0x0800c7db
 800c73c:	0800c7db 	.word	0x0800c7db
 800c740:	0800c7db 	.word	0x0800c7db
 800c744:	0800c7db 	.word	0x0800c7db
 800c748:	0800c7db 	.word	0x0800c7db
 800c74c:	0800c7db 	.word	0x0800c7db
 800c750:	0800c7db 	.word	0x0800c7db
 800c754:	0800c7db 	.word	0x0800c7db
 800c758:	0800c7db 	.word	0x0800c7db
 800c75c:	0800c7db 	.word	0x0800c7db
 800c760:	0800c7db 	.word	0x0800c7db
 800c764:	0800c7db 	.word	0x0800c7db
 800c768:	0800c7db 	.word	0x0800c7db
 800c76c:	0800c7cd 	.word	0x0800c7cd
 800c770:	2b40      	cmp	r3, #64	; 0x40
 800c772:	d02e      	beq.n	800c7d2 <UART_SetConfig+0xa36>
 800c774:	e031      	b.n	800c7da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c776:	f7fb fadf 	bl	8007d38 <HAL_RCC_GetPCLK1Freq>
 800c77a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c77c:	e033      	b.n	800c7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c77e:	f7fb faf1 	bl	8007d64 <HAL_RCC_GetPCLK2Freq>
 800c782:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c784:	e02f      	b.n	800c7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fc fa5c 	bl	8008c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c794:	e027      	b.n	800c7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c796:	f107 0318 	add.w	r3, r7, #24
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fc fba8 	bl	8008ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a4:	e01f      	b.n	800c7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7a6:	4b2d      	ldr	r3, [pc, #180]	; (800c85c <UART_SetConfig+0xac0>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0320 	and.w	r3, r3, #32
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d009      	beq.n	800c7c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7b2:	4b2a      	ldr	r3, [pc, #168]	; (800c85c <UART_SetConfig+0xac0>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	08db      	lsrs	r3, r3, #3
 800c7b8:	f003 0303 	and.w	r3, r3, #3
 800c7bc:	4a28      	ldr	r2, [pc, #160]	; (800c860 <UART_SetConfig+0xac4>)
 800c7be:	fa22 f303 	lsr.w	r3, r2, r3
 800c7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7c4:	e00f      	b.n	800c7e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c7c6:	4b26      	ldr	r3, [pc, #152]	; (800c860 <UART_SetConfig+0xac4>)
 800c7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ca:	e00c      	b.n	800c7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7cc:	4b25      	ldr	r3, [pc, #148]	; (800c864 <UART_SetConfig+0xac8>)
 800c7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7d0:	e009      	b.n	800c7e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7d8:	e005      	b.n	800c7e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c7e4:	bf00      	nop
    }

    if (pclk != 0U)
 800c7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d021      	beq.n	800c830 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	4a1d      	ldr	r2, [pc, #116]	; (800c868 <UART_SetConfig+0xacc>)
 800c7f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	085b      	lsrs	r3, r3, #1
 800c804:	441a      	add	r2, r3
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c80e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c812:	2b0f      	cmp	r3, #15
 800c814:	d909      	bls.n	800c82a <UART_SetConfig+0xa8e>
 800c816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c81c:	d205      	bcs.n	800c82a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c820:	b29a      	uxth	r2, r3
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	60da      	str	r2, [r3, #12]
 800c828:	e002      	b.n	800c830 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c82a:	2301      	movs	r3, #1
 800c82c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	2201      	movs	r2, #1
 800c834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	2200      	movs	r2, #0
 800c844:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	2200      	movs	r2, #0
 800c84a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c84c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c850:	4618      	mov	r0, r3
 800c852:	3748      	adds	r7, #72	; 0x48
 800c854:	46bd      	mov	sp, r7
 800c856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c85a:	bf00      	nop
 800c85c:	58024400 	.word	0x58024400
 800c860:	03d09000 	.word	0x03d09000
 800c864:	003d0900 	.word	0x003d0900
 800c868:	080110c0 	.word	0x080110c0

0800c86c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00a      	beq.n	800c896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	430a      	orrs	r2, r1
 800c894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c89a:	f003 0302 	and.w	r3, r3, #2
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00a      	beq.n	800c8b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	430a      	orrs	r2, r1
 800c8b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8bc:	f003 0304 	and.w	r3, r3, #4
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00a      	beq.n	800c8da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	430a      	orrs	r2, r1
 800c8d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8de:	f003 0308 	and.w	r3, r3, #8
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00a      	beq.n	800c8fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	430a      	orrs	r2, r1
 800c8fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c900:	f003 0310 	and.w	r3, r3, #16
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00a      	beq.n	800c91e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	430a      	orrs	r2, r1
 800c91c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c922:	f003 0320 	and.w	r3, r3, #32
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00a      	beq.n	800c940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	430a      	orrs	r2, r1
 800c93e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d01a      	beq.n	800c982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	430a      	orrs	r2, r1
 800c960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c96a:	d10a      	bne.n	800c982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	430a      	orrs	r2, r1
 800c980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00a      	beq.n	800c9a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	430a      	orrs	r2, r1
 800c9a2:	605a      	str	r2, [r3, #4]
  }
}
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af02      	add	r7, sp, #8
 800c9b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9c0:	f7f9 f914 	bl	8005bec <HAL_GetTick>
 800c9c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f003 0308 	and.w	r3, r3, #8
 800c9d0:	2b08      	cmp	r3, #8
 800c9d2:	d10e      	bne.n	800c9f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f82f 	bl	800ca46 <UART_WaitOnFlagUntilTimeout>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	e025      	b.n	800ca3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f003 0304 	and.w	r3, r3, #4
 800c9fc:	2b04      	cmp	r3, #4
 800c9fe:	d10e      	bne.n	800ca1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f819 	bl	800ca46 <UART_WaitOnFlagUntilTimeout>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d001      	beq.n	800ca1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca1a:	2303      	movs	r3, #3
 800ca1c:	e00f      	b.n	800ca3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2220      	movs	r2, #32
 800ca22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2220      	movs	r2, #32
 800ca2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3710      	adds	r7, #16
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b09c      	sub	sp, #112	; 0x70
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	60f8      	str	r0, [r7, #12]
 800ca4e:	60b9      	str	r1, [r7, #8]
 800ca50:	603b      	str	r3, [r7, #0]
 800ca52:	4613      	mov	r3, r2
 800ca54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca56:	e0a9      	b.n	800cbac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca5e:	f000 80a5 	beq.w	800cbac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca62:	f7f9 f8c3 	bl	8005bec <HAL_GetTick>
 800ca66:	4602      	mov	r2, r0
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d302      	bcc.n	800ca78 <UART_WaitOnFlagUntilTimeout+0x32>
 800ca72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d140      	bne.n	800cafa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca80:	e853 3f00 	ldrex	r3, [r3]
 800ca84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ca86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca8c:	667b      	str	r3, [r7, #100]	; 0x64
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	461a      	mov	r2, r3
 800ca94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ca9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca9e:	e841 2300 	strex	r3, r2, [r1]
 800caa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800caa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1e6      	bne.n	800ca78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3308      	adds	r3, #8
 800cab0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cab4:	e853 3f00 	ldrex	r3, [r3]
 800cab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabc:	f023 0301 	bic.w	r3, r3, #1
 800cac0:	663b      	str	r3, [r7, #96]	; 0x60
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	3308      	adds	r3, #8
 800cac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800caca:	64ba      	str	r2, [r7, #72]	; 0x48
 800cacc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cace:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cad2:	e841 2300 	strex	r3, r2, [r1]
 800cad6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1e5      	bne.n	800caaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2220      	movs	r2, #32
 800cae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2220      	movs	r2, #32
 800caea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800caf6:	2303      	movs	r3, #3
 800caf8:	e069      	b.n	800cbce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f003 0304 	and.w	r3, r3, #4
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d051      	beq.n	800cbac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	69db      	ldr	r3, [r3, #28]
 800cb0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb16:	d149      	bne.n	800cbac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2a:	e853 3f00 	ldrex	r3, [r3]
 800cb2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb36:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb40:	637b      	str	r3, [r7, #52]	; 0x34
 800cb42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb48:	e841 2300 	strex	r3, r2, [r1]
 800cb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1e6      	bne.n	800cb22 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3308      	adds	r3, #8
 800cb5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	e853 3f00 	ldrex	r3, [r3]
 800cb62:	613b      	str	r3, [r7, #16]
   return(result);
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	f023 0301 	bic.w	r3, r3, #1
 800cb6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3308      	adds	r3, #8
 800cb72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cb74:	623a      	str	r2, [r7, #32]
 800cb76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb78:	69f9      	ldr	r1, [r7, #28]
 800cb7a:	6a3a      	ldr	r2, [r7, #32]
 800cb7c:	e841 2300 	strex	r3, r2, [r1]
 800cb80:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1e5      	bne.n	800cb54 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2220      	movs	r2, #32
 800cb8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2220      	movs	r2, #32
 800cb94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2220      	movs	r2, #32
 800cb9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	e010      	b.n	800cbce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	69da      	ldr	r2, [r3, #28]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	bf0c      	ite	eq
 800cbbc:	2301      	moveq	r3, #1
 800cbbe:	2300      	movne	r3, #0
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	79fb      	ldrb	r3, [r7, #7]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	f43f af46 	beq.w	800ca58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3770      	adds	r7, #112	; 0x70
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
	...

0800cbd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b0a3      	sub	sp, #140	; 0x8c
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	88fa      	ldrh	r2, [r7, #6]
 800cbf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	88fa      	ldrh	r2, [r7, #6]
 800cbf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc0a:	d10e      	bne.n	800cc2a <UART_Start_Receive_IT+0x52>
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d105      	bne.n	800cc20 <UART_Start_Receive_IT+0x48>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cc1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc1e:	e02d      	b.n	800cc7c <UART_Start_Receive_IT+0xa4>
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	22ff      	movs	r2, #255	; 0xff
 800cc24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc28:	e028      	b.n	800cc7c <UART_Start_Receive_IT+0xa4>
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10d      	bne.n	800cc4e <UART_Start_Receive_IT+0x76>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d104      	bne.n	800cc44 <UART_Start_Receive_IT+0x6c>
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	22ff      	movs	r2, #255	; 0xff
 800cc3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc42:	e01b      	b.n	800cc7c <UART_Start_Receive_IT+0xa4>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	227f      	movs	r2, #127	; 0x7f
 800cc48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc4c:	e016      	b.n	800cc7c <UART_Start_Receive_IT+0xa4>
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc56:	d10d      	bne.n	800cc74 <UART_Start_Receive_IT+0x9c>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d104      	bne.n	800cc6a <UART_Start_Receive_IT+0x92>
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	227f      	movs	r2, #127	; 0x7f
 800cc64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc68:	e008      	b.n	800cc7c <UART_Start_Receive_IT+0xa4>
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	223f      	movs	r2, #63	; 0x3f
 800cc6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc72:	e003      	b.n	800cc7c <UART_Start_Receive_IT+0xa4>
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2222      	movs	r2, #34	; 0x22
 800cc88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3308      	adds	r3, #8
 800cc92:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc96:	e853 3f00 	ldrex	r3, [r3]
 800cc9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cc9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc9e:	f043 0301 	orr.w	r3, r3, #1
 800cca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3308      	adds	r3, #8
 800ccac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ccb0:	673a      	str	r2, [r7, #112]	; 0x70
 800ccb2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ccb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ccb8:	e841 2300 	strex	r3, r2, [r1]
 800ccbc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ccbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1e3      	bne.n	800cc8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cccc:	d153      	bne.n	800cd76 <UART_Start_Receive_IT+0x19e>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ccd4:	88fa      	ldrh	r2, [r7, #6]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d34d      	bcc.n	800cd76 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cce2:	d107      	bne.n	800ccf4 <UART_Start_Receive_IT+0x11c>
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d103      	bne.n	800ccf4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4a4b      	ldr	r2, [pc, #300]	; (800ce1c <UART_Start_Receive_IT+0x244>)
 800ccf0:	671a      	str	r2, [r3, #112]	; 0x70
 800ccf2:	e002      	b.n	800ccfa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	4a4a      	ldr	r2, [pc, #296]	; (800ce20 <UART_Start_Receive_IT+0x248>)
 800ccf8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d01a      	beq.n	800cd40 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd12:	e853 3f00 	ldrex	r3, [r3]
 800cd16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cd18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	461a      	mov	r2, r3
 800cd28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd2e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd34:	e841 2300 	strex	r3, r2, [r1]
 800cd38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cd3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1e4      	bne.n	800cd0a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	3308      	adds	r3, #8
 800cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd4a:	e853 3f00 	ldrex	r3, [r3]
 800cd4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd56:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	3308      	adds	r3, #8
 800cd5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cd60:	64ba      	str	r2, [r7, #72]	; 0x48
 800cd62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd68:	e841 2300 	strex	r3, r2, [r1]
 800cd6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cd6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1e5      	bne.n	800cd40 <UART_Start_Receive_IT+0x168>
 800cd74:	e04a      	b.n	800ce0c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd7e:	d107      	bne.n	800cd90 <UART_Start_Receive_IT+0x1b8>
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d103      	bne.n	800cd90 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	4a26      	ldr	r2, [pc, #152]	; (800ce24 <UART_Start_Receive_IT+0x24c>)
 800cd8c:	671a      	str	r2, [r3, #112]	; 0x70
 800cd8e:	e002      	b.n	800cd96 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	4a25      	ldr	r2, [pc, #148]	; (800ce28 <UART_Start_Receive_IT+0x250>)
 800cd94:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	691b      	ldr	r3, [r3, #16]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d019      	beq.n	800cdda <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	e853 3f00 	ldrex	r3, [r3]
 800cdb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cdba:	677b      	str	r3, [r7, #116]	; 0x74
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdc4:	637b      	str	r3, [r7, #52]	; 0x34
 800cdc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cdca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdcc:	e841 2300 	strex	r3, r2, [r1]
 800cdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1e6      	bne.n	800cda6 <UART_Start_Receive_IT+0x1ce>
 800cdd8:	e018      	b.n	800ce0c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	e853 3f00 	ldrex	r3, [r3]
 800cde6:	613b      	str	r3, [r7, #16]
   return(result);
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	f043 0320 	orr.w	r3, r3, #32
 800cdee:	67bb      	str	r3, [r7, #120]	; 0x78
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cdf8:	623b      	str	r3, [r7, #32]
 800cdfa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdfc:	69f9      	ldr	r1, [r7, #28]
 800cdfe:	6a3a      	ldr	r2, [r7, #32]
 800ce00:	e841 2300 	strex	r3, r2, [r1]
 800ce04:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1e6      	bne.n	800cdda <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	378c      	adds	r7, #140	; 0x8c
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	0800d535 	.word	0x0800d535
 800ce20:	0800d23d 	.word	0x0800d23d
 800ce24:	0800d0db 	.word	0x0800d0db
 800ce28:	0800cf7b 	.word	0x0800cf7b

0800ce2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b095      	sub	sp, #84	; 0x54
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3c:	e853 3f00 	ldrex	r3, [r3]
 800ce40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ce42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	461a      	mov	r2, r3
 800ce50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce52:	643b      	str	r3, [r7, #64]	; 0x40
 800ce54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce5a:	e841 2300 	strex	r3, r2, [r1]
 800ce5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ce60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d1e6      	bne.n	800ce34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	3308      	adds	r3, #8
 800ce6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6e:	6a3b      	ldr	r3, [r7, #32]
 800ce70:	e853 3f00 	ldrex	r3, [r3]
 800ce74:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce76:	69fa      	ldr	r2, [r7, #28]
 800ce78:	4b1e      	ldr	r3, [pc, #120]	; (800cef4 <UART_EndRxTransfer+0xc8>)
 800ce7a:	4013      	ands	r3, r2
 800ce7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	3308      	adds	r3, #8
 800ce84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce86:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce8e:	e841 2300 	strex	r3, r2, [r1]
 800ce92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1e5      	bne.n	800ce66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d118      	bne.n	800ced4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	e853 3f00 	ldrex	r3, [r3]
 800ceae:	60bb      	str	r3, [r7, #8]
   return(result);
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	f023 0310 	bic.w	r3, r3, #16
 800ceb6:	647b      	str	r3, [r7, #68]	; 0x44
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	461a      	mov	r2, r3
 800cebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cec0:	61bb      	str	r3, [r7, #24]
 800cec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec4:	6979      	ldr	r1, [r7, #20]
 800cec6:	69ba      	ldr	r2, [r7, #24]
 800cec8:	e841 2300 	strex	r3, r2, [r1]
 800cecc:	613b      	str	r3, [r7, #16]
   return(result);
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1e6      	bne.n	800cea2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2220      	movs	r2, #32
 800ced8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cee8:	bf00      	nop
 800ceea:	3754      	adds	r7, #84	; 0x54
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	effffffe 	.word	0xeffffffe

0800cef8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f7fe ff2a 	bl	800bd70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf1c:	bf00      	nop
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	e853 3f00 	ldrex	r3, [r3]
 800cf38:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf40:	61fb      	str	r3, [r7, #28]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	461a      	mov	r2, r3
 800cf48:	69fb      	ldr	r3, [r7, #28]
 800cf4a:	61bb      	str	r3, [r7, #24]
 800cf4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf4e:	6979      	ldr	r1, [r7, #20]
 800cf50:	69ba      	ldr	r2, [r7, #24]
 800cf52:	e841 2300 	strex	r3, r2, [r1]
 800cf56:	613b      	str	r3, [r7, #16]
   return(result);
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d1e6      	bne.n	800cf2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2220      	movs	r2, #32
 800cf62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7f5 fe59 	bl	8002c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf72:	bf00      	nop
 800cf74:	3720      	adds	r7, #32
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b096      	sub	sp, #88	; 0x58
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf92:	2b22      	cmp	r3, #34	; 0x22
 800cf94:	f040 8095 	bne.w	800d0c2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf9e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cfa2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cfa6:	b2d9      	uxtb	r1, r3
 800cfa8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfb2:	400a      	ands	r2, r1
 800cfb4:	b2d2      	uxtb	r2, r2
 800cfb6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfbc:	1c5a      	adds	r2, r3, #1
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d178      	bne.n	800d0d2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe8:	e853 3f00 	ldrex	r3, [r3]
 800cfec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cff4:	653b      	str	r3, [r7, #80]	; 0x50
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	461a      	mov	r2, r3
 800cffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cffe:	647b      	str	r3, [r7, #68]	; 0x44
 800d000:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d006:	e841 2300 	strex	r3, r2, [r1]
 800d00a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1e6      	bne.n	800cfe0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3308      	adds	r3, #8
 800d018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	e853 3f00 	ldrex	r3, [r3]
 800d020:	623b      	str	r3, [r7, #32]
   return(result);
 800d022:	6a3b      	ldr	r3, [r7, #32]
 800d024:	f023 0301 	bic.w	r3, r3, #1
 800d028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	3308      	adds	r3, #8
 800d030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d032:	633a      	str	r2, [r7, #48]	; 0x30
 800d034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d03a:	e841 2300 	strex	r3, r2, [r1]
 800d03e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1e5      	bne.n	800d012 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2220      	movs	r2, #32
 800d04a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d12e      	bne.n	800d0ba <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	e853 3f00 	ldrex	r3, [r3]
 800d06e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f023 0310 	bic.w	r3, r3, #16
 800d076:	64bb      	str	r3, [r7, #72]	; 0x48
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	461a      	mov	r2, r3
 800d07e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d080:	61fb      	str	r3, [r7, #28]
 800d082:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d084:	69b9      	ldr	r1, [r7, #24]
 800d086:	69fa      	ldr	r2, [r7, #28]
 800d088:	e841 2300 	strex	r3, r2, [r1]
 800d08c:	617b      	str	r3, [r7, #20]
   return(result);
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1e6      	bne.n	800d062 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	69db      	ldr	r3, [r3, #28]
 800d09a:	f003 0310 	and.w	r3, r3, #16
 800d09e:	2b10      	cmp	r3, #16
 800d0a0:	d103      	bne.n	800d0aa <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2210      	movs	r2, #16
 800d0a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7fe fe66 	bl	800bd84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d0b8:	e00b      	b.n	800d0d2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7f5 fd3e 	bl	8002b3c <HAL_UART_RxCpltCallback>
}
 800d0c0:	e007      	b.n	800d0d2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	699a      	ldr	r2, [r3, #24]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f042 0208 	orr.w	r2, r2, #8
 800d0d0:	619a      	str	r2, [r3, #24]
}
 800d0d2:	bf00      	nop
 800d0d4:	3758      	adds	r7, #88	; 0x58
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b096      	sub	sp, #88	; 0x58
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0f2:	2b22      	cmp	r3, #34	; 0x22
 800d0f4:	f040 8095 	bne.w	800d222 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d106:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d108:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d10c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d110:	4013      	ands	r3, r2
 800d112:	b29a      	uxth	r2, r3
 800d114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d116:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d11c:	1c9a      	adds	r2, r3, #2
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d128:	b29b      	uxth	r3, r3
 800d12a:	3b01      	subs	r3, #1
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d178      	bne.n	800d232 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d148:	e853 3f00 	ldrex	r3, [r3]
 800d14c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d154:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	461a      	mov	r2, r3
 800d15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d15e:	643b      	str	r3, [r7, #64]	; 0x40
 800d160:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d162:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d166:	e841 2300 	strex	r3, r2, [r1]
 800d16a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1e6      	bne.n	800d140 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3308      	adds	r3, #8
 800d178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17a:	6a3b      	ldr	r3, [r7, #32]
 800d17c:	e853 3f00 	ldrex	r3, [r3]
 800d180:	61fb      	str	r3, [r7, #28]
   return(result);
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	f023 0301 	bic.w	r3, r3, #1
 800d188:	64bb      	str	r3, [r7, #72]	; 0x48
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3308      	adds	r3, #8
 800d190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d192:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d194:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d19a:	e841 2300 	strex	r3, r2, [r1]
 800d19e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1e5      	bne.n	800d172 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2220      	movs	r2, #32
 800d1aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d12e      	bne.n	800d21a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	e853 3f00 	ldrex	r3, [r3]
 800d1ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	f023 0310 	bic.w	r3, r3, #16
 800d1d6:	647b      	str	r3, [r7, #68]	; 0x44
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1e0:	61bb      	str	r3, [r7, #24]
 800d1e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e4:	6979      	ldr	r1, [r7, #20]
 800d1e6:	69ba      	ldr	r2, [r7, #24]
 800d1e8:	e841 2300 	strex	r3, r2, [r1]
 800d1ec:	613b      	str	r3, [r7, #16]
   return(result);
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1e6      	bne.n	800d1c2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	69db      	ldr	r3, [r3, #28]
 800d1fa:	f003 0310 	and.w	r3, r3, #16
 800d1fe:	2b10      	cmp	r3, #16
 800d200:	d103      	bne.n	800d20a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2210      	movs	r2, #16
 800d208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d210:	4619      	mov	r1, r3
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7fe fdb6 	bl	800bd84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d218:	e00b      	b.n	800d232 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7f5 fc8e 	bl	8002b3c <HAL_UART_RxCpltCallback>
}
 800d220:	e007      	b.n	800d232 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	699a      	ldr	r2, [r3, #24]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f042 0208 	orr.w	r2, r2, #8
 800d230:	619a      	str	r2, [r3, #24]
}
 800d232:	bf00      	nop
 800d234:	3758      	adds	r7, #88	; 0x58
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b0a6      	sub	sp, #152	; 0x98
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d24a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	69db      	ldr	r3, [r3, #28]
 800d254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d272:	2b22      	cmp	r3, #34	; 0x22
 800d274:	f040 814d 	bne.w	800d512 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d27e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d282:	e0f4      	b.n	800d46e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d28a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d28e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800d292:	b2d9      	uxtb	r1, r3
 800d294:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800d298:	b2da      	uxtb	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d29e:	400a      	ands	r2, r1
 800d2a0:	b2d2      	uxtb	r2, r2
 800d2a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2a8:	1c5a      	adds	r2, r3, #1
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	69db      	ldr	r3, [r3, #28]
 800d2c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d2ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2ce:	f003 0307 	and.w	r3, r3, #7
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d053      	beq.n	800d37e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d2d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2da:	f003 0301 	and.w	r3, r3, #1
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d011      	beq.n	800d306 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d2e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00b      	beq.n	800d306 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2fc:	f043 0201 	orr.w	r2, r3, #1
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d306:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d30a:	f003 0302 	and.w	r3, r3, #2
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d011      	beq.n	800d336 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d316:	f003 0301 	and.w	r3, r3, #1
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00b      	beq.n	800d336 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2202      	movs	r2, #2
 800d324:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d32c:	f043 0204 	orr.w	r2, r3, #4
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d336:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d33a:	f003 0304 	and.w	r3, r3, #4
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d011      	beq.n	800d366 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d342:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d346:	f003 0301 	and.w	r3, r3, #1
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00b      	beq.n	800d366 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2204      	movs	r2, #4
 800d354:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d35c:	f043 0202 	orr.w	r2, r3, #2
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d006      	beq.n	800d37e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7fe fcfd 	bl	800bd70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d384:	b29b      	uxth	r3, r3
 800d386:	2b00      	cmp	r3, #0
 800d388:	d171      	bne.n	800d46e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d392:	e853 3f00 	ldrex	r3, [r3]
 800d396:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d39a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d39e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d3ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800d3ae:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d3b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3b4:	e841 2300 	strex	r3, r2, [r1]
 800d3b8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d3ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1e4      	bne.n	800d38a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	3308      	adds	r3, #8
 800d3c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3ca:	e853 3f00 	ldrex	r3, [r3]
 800d3ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d3d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3d2:	4b56      	ldr	r3, [pc, #344]	; (800d52c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	3308      	adds	r3, #8
 800d3de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d3e0:	657a      	str	r2, [r7, #84]	; 0x54
 800d3e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d3e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3e8:	e841 2300 	strex	r3, r2, [r1]
 800d3ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1e5      	bne.n	800d3c0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2220      	movs	r2, #32
 800d3f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d406:	2b01      	cmp	r3, #1
 800d408:	d12e      	bne.n	800d468 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d418:	e853 3f00 	ldrex	r3, [r3]
 800d41c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	f023 0310 	bic.w	r3, r3, #16
 800d424:	67bb      	str	r3, [r7, #120]	; 0x78
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	461a      	mov	r2, r3
 800d42c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d42e:	643b      	str	r3, [r7, #64]	; 0x40
 800d430:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d432:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d436:	e841 2300 	strex	r3, r2, [r1]
 800d43a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1e6      	bne.n	800d410 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	69db      	ldr	r3, [r3, #28]
 800d448:	f003 0310 	and.w	r3, r3, #16
 800d44c:	2b10      	cmp	r3, #16
 800d44e:	d103      	bne.n	800d458 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2210      	movs	r2, #16
 800d456:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d45e:	4619      	mov	r1, r3
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f7fe fc8f 	bl	800bd84 <HAL_UARTEx_RxEventCallback>
 800d466:	e002      	b.n	800d46e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f7f5 fb67 	bl	8002b3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d46e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d472:	2b00      	cmp	r3, #0
 800d474:	d006      	beq.n	800d484 <UART_RxISR_8BIT_FIFOEN+0x248>
 800d476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d47a:	f003 0320 	and.w	r3, r3, #32
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f47f af00 	bne.w	800d284 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d48a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d48e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d492:	2b00      	cmp	r3, #0
 800d494:	d045      	beq.n	800d522 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d49c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d23e      	bcs.n	800d522 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	3308      	adds	r3, #8
 800d4aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ac:	6a3b      	ldr	r3, [r7, #32]
 800d4ae:	e853 3f00 	ldrex	r3, [r3]
 800d4b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4ba:	673b      	str	r3, [r7, #112]	; 0x70
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d4c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d4c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4cc:	e841 2300 	strex	r3, r2, [r1]
 800d4d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1e5      	bne.n	800d4a4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4a15      	ldr	r2, [pc, #84]	; (800d530 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800d4dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	e853 3f00 	ldrex	r3, [r3]
 800d4ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	f043 0320 	orr.w	r3, r3, #32
 800d4f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4fc:	61bb      	str	r3, [r7, #24]
 800d4fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d500:	6979      	ldr	r1, [r7, #20]
 800d502:	69ba      	ldr	r2, [r7, #24]
 800d504:	e841 2300 	strex	r3, r2, [r1]
 800d508:	613b      	str	r3, [r7, #16]
   return(result);
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1e6      	bne.n	800d4de <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d510:	e007      	b.n	800d522 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	699a      	ldr	r2, [r3, #24]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f042 0208 	orr.w	r2, r2, #8
 800d520:	619a      	str	r2, [r3, #24]
}
 800d522:	bf00      	nop
 800d524:	3798      	adds	r7, #152	; 0x98
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	effffffe 	.word	0xeffffffe
 800d530:	0800cf7b 	.word	0x0800cf7b

0800d534 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b0a8      	sub	sp, #160	; 0xa0
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d542:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	69db      	ldr	r3, [r3, #28]
 800d54c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d56a:	2b22      	cmp	r3, #34	; 0x22
 800d56c:	f040 8151 	bne.w	800d812 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d576:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d57a:	e0f8      	b.n	800d76e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d582:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d58a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800d58e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800d592:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800d596:	4013      	ands	r3, r2
 800d598:	b29a      	uxth	r2, r3
 800d59a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d59e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5a4:	1c9a      	adds	r2, r3, #2
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	69db      	ldr	r3, [r3, #28]
 800d5c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d5c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5ca:	f003 0307 	and.w	r3, r3, #7
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d053      	beq.n	800d67a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d5d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d011      	beq.n	800d602 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d5de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00b      	beq.n	800d602 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5f8:	f043 0201 	orr.w	r2, r3, #1
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d602:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d606:	f003 0302 	and.w	r3, r3, #2
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d011      	beq.n	800d632 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d60e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d612:	f003 0301 	and.w	r3, r3, #1
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00b      	beq.n	800d632 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2202      	movs	r2, #2
 800d620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d628:	f043 0204 	orr.w	r2, r3, #4
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d632:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d636:	f003 0304 	and.w	r3, r3, #4
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d011      	beq.n	800d662 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d63e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d642:	f003 0301 	and.w	r3, r3, #1
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00b      	beq.n	800d662 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2204      	movs	r2, #4
 800d650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d658:	f043 0202 	orr.w	r2, r3, #2
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d006      	beq.n	800d67a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f7fe fb7f 	bl	800bd70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d680:	b29b      	uxth	r3, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d173      	bne.n	800d76e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d68e:	e853 3f00 	ldrex	r3, [r3]
 800d692:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d69a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d6a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6aa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d6ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6b0:	e841 2300 	strex	r3, r2, [r1]
 800d6b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d6b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d1e4      	bne.n	800d686 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	3308      	adds	r3, #8
 800d6c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6c6:	e853 3f00 	ldrex	r3, [r3]
 800d6ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d6cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6ce:	4b57      	ldr	r3, [pc, #348]	; (800d82c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800d6d0:	4013      	ands	r3, r2
 800d6d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	3308      	adds	r3, #8
 800d6dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d6e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800d6e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6e8:	e841 2300 	strex	r3, r2, [r1]
 800d6ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1e3      	bne.n	800d6bc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2220      	movs	r2, #32
 800d6f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d706:	2b01      	cmp	r3, #1
 800d708:	d12e      	bne.n	800d768 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d718:	e853 3f00 	ldrex	r3, [r3]
 800d71c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d720:	f023 0310 	bic.w	r3, r3, #16
 800d724:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	461a      	mov	r2, r3
 800d72c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d72e:	647b      	str	r3, [r7, #68]	; 0x44
 800d730:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d732:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d736:	e841 2300 	strex	r3, r2, [r1]
 800d73a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d1e6      	bne.n	800d710 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	69db      	ldr	r3, [r3, #28]
 800d748:	f003 0310 	and.w	r3, r3, #16
 800d74c:	2b10      	cmp	r3, #16
 800d74e:	d103      	bne.n	800d758 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2210      	movs	r2, #16
 800d756:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d75e:	4619      	mov	r1, r3
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f7fe fb0f 	bl	800bd84 <HAL_UARTEx_RxEventCallback>
 800d766:	e002      	b.n	800d76e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f7f5 f9e7 	bl	8002b3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d76e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d772:	2b00      	cmp	r3, #0
 800d774:	d006      	beq.n	800d784 <UART_RxISR_16BIT_FIFOEN+0x250>
 800d776:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d77a:	f003 0320 	and.w	r3, r3, #32
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f47f aefc 	bne.w	800d57c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d78a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d78e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d792:	2b00      	cmp	r3, #0
 800d794:	d045      	beq.n	800d822 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d79c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d23e      	bcs.n	800d822 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	3308      	adds	r3, #8
 800d7aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ae:	e853 3f00 	ldrex	r3, [r3]
 800d7b2:	623b      	str	r3, [r7, #32]
   return(result);
 800d7b4:	6a3b      	ldr	r3, [r7, #32]
 800d7b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d7ba:	677b      	str	r3, [r7, #116]	; 0x74
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	3308      	adds	r3, #8
 800d7c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d7c4:	633a      	str	r2, [r7, #48]	; 0x30
 800d7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7cc:	e841 2300 	strex	r3, r2, [r1]
 800d7d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d1e5      	bne.n	800d7a4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a15      	ldr	r2, [pc, #84]	; (800d830 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800d7dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	e853 3f00 	ldrex	r3, [r3]
 800d7ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f043 0320 	orr.w	r3, r3, #32
 800d7f2:	673b      	str	r3, [r7, #112]	; 0x70
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7fc:	61fb      	str	r3, [r7, #28]
 800d7fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d800:	69b9      	ldr	r1, [r7, #24]
 800d802:	69fa      	ldr	r2, [r7, #28]
 800d804:	e841 2300 	strex	r3, r2, [r1]
 800d808:	617b      	str	r3, [r7, #20]
   return(result);
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1e6      	bne.n	800d7de <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d810:	e007      	b.n	800d822 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	699a      	ldr	r2, [r3, #24]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f042 0208 	orr.w	r2, r2, #8
 800d820:	619a      	str	r2, [r3, #24]
}
 800d822:	bf00      	nop
 800d824:	37a0      	adds	r7, #160	; 0xa0
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	effffffe 	.word	0xeffffffe
 800d830:	0800d0db 	.word	0x0800d0db

0800d834 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d83c:	bf00      	nop
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d850:	bf00      	nop
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d864:	bf00      	nop
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d870:	b480      	push	{r7}
 800d872:	b085      	sub	sp, #20
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d101      	bne.n	800d886 <HAL_UARTEx_DisableFifoMode+0x16>
 800d882:	2302      	movs	r3, #2
 800d884:	e027      	b.n	800d8d6 <HAL_UARTEx_DisableFifoMode+0x66>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2224      	movs	r2, #36	; 0x24
 800d892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f022 0201 	bic.w	r2, r2, #1
 800d8ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d8b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2220      	movs	r2, #32
 800d8c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3714      	adds	r7, #20
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b084      	sub	sp, #16
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d101      	bne.n	800d8fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d8f6:	2302      	movs	r3, #2
 800d8f8:	e02d      	b.n	800d956 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2224      	movs	r2, #36	; 0x24
 800d906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f022 0201 	bic.w	r2, r2, #1
 800d920:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	683a      	ldr	r2, [r7, #0]
 800d932:	430a      	orrs	r2, r1
 800d934:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 f850 	bl	800d9dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	68fa      	ldr	r2, [r7, #12]
 800d942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2220      	movs	r2, #32
 800d948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d954:	2300      	movs	r3, #0
}
 800d956:	4618      	mov	r0, r3
 800d958:	3710      	adds	r7, #16
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d95e:	b580      	push	{r7, lr}
 800d960:	b084      	sub	sp, #16
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
 800d966:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d101      	bne.n	800d976 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d972:	2302      	movs	r3, #2
 800d974:	e02d      	b.n	800d9d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2201      	movs	r2, #1
 800d97a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2224      	movs	r2, #36	; 0x24
 800d982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f022 0201 	bic.w	r2, r2, #1
 800d99c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	683a      	ldr	r2, [r7, #0]
 800d9ae:	430a      	orrs	r2, r1
 800d9b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 f812 	bl	800d9dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68fa      	ldr	r2, [r7, #12]
 800d9be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2220      	movs	r2, #32
 800d9c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
	...

0800d9dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d108      	bne.n	800d9fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d9fc:	e031      	b.n	800da62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d9fe:	2310      	movs	r3, #16
 800da00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da02:	2310      	movs	r3, #16
 800da04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	0e5b      	lsrs	r3, r3, #25
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 0307 	and.w	r3, r3, #7
 800da14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	0f5b      	lsrs	r3, r3, #29
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	f003 0307 	and.w	r3, r3, #7
 800da24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da26:	7bbb      	ldrb	r3, [r7, #14]
 800da28:	7b3a      	ldrb	r2, [r7, #12]
 800da2a:	4911      	ldr	r1, [pc, #68]	; (800da70 <UARTEx_SetNbDataToProcess+0x94>)
 800da2c:	5c8a      	ldrb	r2, [r1, r2]
 800da2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da32:	7b3a      	ldrb	r2, [r7, #12]
 800da34:	490f      	ldr	r1, [pc, #60]	; (800da74 <UARTEx_SetNbDataToProcess+0x98>)
 800da36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da38:	fb93 f3f2 	sdiv	r3, r3, r2
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da44:	7bfb      	ldrb	r3, [r7, #15]
 800da46:	7b7a      	ldrb	r2, [r7, #13]
 800da48:	4909      	ldr	r1, [pc, #36]	; (800da70 <UARTEx_SetNbDataToProcess+0x94>)
 800da4a:	5c8a      	ldrb	r2, [r1, r2]
 800da4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800da50:	7b7a      	ldrb	r2, [r7, #13]
 800da52:	4908      	ldr	r1, [pc, #32]	; (800da74 <UARTEx_SetNbDataToProcess+0x98>)
 800da54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da56:	fb93 f3f2 	sdiv	r3, r3, r2
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800da62:	bf00      	nop
 800da64:	3714      	adds	r7, #20
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr
 800da6e:	bf00      	nop
 800da70:	080110d8 	.word	0x080110d8
 800da74:	080110e0 	.word	0x080110e0

0800da78 <__errno>:
 800da78:	4b01      	ldr	r3, [pc, #4]	; (800da80 <__errno+0x8>)
 800da7a:	6818      	ldr	r0, [r3, #0]
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	2400007c 	.word	0x2400007c

0800da84 <__libc_init_array>:
 800da84:	b570      	push	{r4, r5, r6, lr}
 800da86:	4d0d      	ldr	r5, [pc, #52]	; (800dabc <__libc_init_array+0x38>)
 800da88:	4c0d      	ldr	r4, [pc, #52]	; (800dac0 <__libc_init_array+0x3c>)
 800da8a:	1b64      	subs	r4, r4, r5
 800da8c:	10a4      	asrs	r4, r4, #2
 800da8e:	2600      	movs	r6, #0
 800da90:	42a6      	cmp	r6, r4
 800da92:	d109      	bne.n	800daa8 <__libc_init_array+0x24>
 800da94:	4d0b      	ldr	r5, [pc, #44]	; (800dac4 <__libc_init_array+0x40>)
 800da96:	4c0c      	ldr	r4, [pc, #48]	; (800dac8 <__libc_init_array+0x44>)
 800da98:	f003 fae8 	bl	801106c <_init>
 800da9c:	1b64      	subs	r4, r4, r5
 800da9e:	10a4      	asrs	r4, r4, #2
 800daa0:	2600      	movs	r6, #0
 800daa2:	42a6      	cmp	r6, r4
 800daa4:	d105      	bne.n	800dab2 <__libc_init_array+0x2e>
 800daa6:	bd70      	pop	{r4, r5, r6, pc}
 800daa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800daac:	4798      	blx	r3
 800daae:	3601      	adds	r6, #1
 800dab0:	e7ee      	b.n	800da90 <__libc_init_array+0xc>
 800dab2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dab6:	4798      	blx	r3
 800dab8:	3601      	adds	r6, #1
 800daba:	e7f2      	b.n	800daa2 <__libc_init_array+0x1e>
 800dabc:	08012dd8 	.word	0x08012dd8
 800dac0:	08012dd8 	.word	0x08012dd8
 800dac4:	08012dd8 	.word	0x08012dd8
 800dac8:	08012ddc 	.word	0x08012ddc

0800dacc <memset>:
 800dacc:	4402      	add	r2, r0
 800dace:	4603      	mov	r3, r0
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d100      	bne.n	800dad6 <memset+0xa>
 800dad4:	4770      	bx	lr
 800dad6:	f803 1b01 	strb.w	r1, [r3], #1
 800dada:	e7f9      	b.n	800dad0 <memset+0x4>

0800dadc <sulp>:
 800dadc:	b570      	push	{r4, r5, r6, lr}
 800dade:	4604      	mov	r4, r0
 800dae0:	460d      	mov	r5, r1
 800dae2:	4616      	mov	r6, r2
 800dae4:	ec45 4b10 	vmov	d0, r4, r5
 800dae8:	f001 fcd6 	bl	800f498 <__ulp>
 800daec:	b17e      	cbz	r6, 800db0e <sulp+0x32>
 800daee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800daf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	dd09      	ble.n	800db0e <sulp+0x32>
 800dafa:	051b      	lsls	r3, r3, #20
 800dafc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800db00:	2000      	movs	r0, #0
 800db02:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800db06:	ec41 0b17 	vmov	d7, r0, r1
 800db0a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800db0e:	bd70      	pop	{r4, r5, r6, pc}

0800db10 <_strtod_l>:
 800db10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db14:	ed2d 8b0e 	vpush	{d8-d14}
 800db18:	b097      	sub	sp, #92	; 0x5c
 800db1a:	461f      	mov	r7, r3
 800db1c:	2300      	movs	r3, #0
 800db1e:	9312      	str	r3, [sp, #72]	; 0x48
 800db20:	4ba1      	ldr	r3, [pc, #644]	; (800dda8 <_strtod_l+0x298>)
 800db22:	920d      	str	r2, [sp, #52]	; 0x34
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	9307      	str	r3, [sp, #28]
 800db28:	4604      	mov	r4, r0
 800db2a:	4618      	mov	r0, r3
 800db2c:	468b      	mov	fp, r1
 800db2e:	f7f2 fbd7 	bl	80002e0 <strlen>
 800db32:	f04f 0800 	mov.w	r8, #0
 800db36:	4605      	mov	r5, r0
 800db38:	f04f 0900 	mov.w	r9, #0
 800db3c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800db40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db42:	7813      	ldrb	r3, [r2, #0]
 800db44:	2b2b      	cmp	r3, #43	; 0x2b
 800db46:	d04d      	beq.n	800dbe4 <_strtod_l+0xd4>
 800db48:	d83a      	bhi.n	800dbc0 <_strtod_l+0xb0>
 800db4a:	2b0d      	cmp	r3, #13
 800db4c:	d833      	bhi.n	800dbb6 <_strtod_l+0xa6>
 800db4e:	2b08      	cmp	r3, #8
 800db50:	d833      	bhi.n	800dbba <_strtod_l+0xaa>
 800db52:	2b00      	cmp	r3, #0
 800db54:	d03d      	beq.n	800dbd2 <_strtod_l+0xc2>
 800db56:	2300      	movs	r3, #0
 800db58:	9308      	str	r3, [sp, #32]
 800db5a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800db5c:	7833      	ldrb	r3, [r6, #0]
 800db5e:	2b30      	cmp	r3, #48	; 0x30
 800db60:	f040 80b0 	bne.w	800dcc4 <_strtod_l+0x1b4>
 800db64:	7873      	ldrb	r3, [r6, #1]
 800db66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800db6a:	2b58      	cmp	r3, #88	; 0x58
 800db6c:	d167      	bne.n	800dc3e <_strtod_l+0x12e>
 800db6e:	9b08      	ldr	r3, [sp, #32]
 800db70:	9301      	str	r3, [sp, #4]
 800db72:	ab12      	add	r3, sp, #72	; 0x48
 800db74:	9702      	str	r7, [sp, #8]
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	4a8c      	ldr	r2, [pc, #560]	; (800ddac <_strtod_l+0x29c>)
 800db7a:	ab13      	add	r3, sp, #76	; 0x4c
 800db7c:	a911      	add	r1, sp, #68	; 0x44
 800db7e:	4620      	mov	r0, r4
 800db80:	f000 fdf0 	bl	800e764 <__gethex>
 800db84:	f010 0507 	ands.w	r5, r0, #7
 800db88:	4607      	mov	r7, r0
 800db8a:	d005      	beq.n	800db98 <_strtod_l+0x88>
 800db8c:	2d06      	cmp	r5, #6
 800db8e:	d12b      	bne.n	800dbe8 <_strtod_l+0xd8>
 800db90:	3601      	adds	r6, #1
 800db92:	2300      	movs	r3, #0
 800db94:	9611      	str	r6, [sp, #68]	; 0x44
 800db96:	9308      	str	r3, [sp, #32]
 800db98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f040 854e 	bne.w	800e63c <_strtod_l+0xb2c>
 800dba0:	9b08      	ldr	r3, [sp, #32]
 800dba2:	b1e3      	cbz	r3, 800dbde <_strtod_l+0xce>
 800dba4:	ec49 8b17 	vmov	d7, r8, r9
 800dba8:	eeb1 0b47 	vneg.f64	d0, d7
 800dbac:	b017      	add	sp, #92	; 0x5c
 800dbae:	ecbd 8b0e 	vpop	{d8-d14}
 800dbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb6:	2b20      	cmp	r3, #32
 800dbb8:	d1cd      	bne.n	800db56 <_strtod_l+0x46>
 800dbba:	3201      	adds	r2, #1
 800dbbc:	9211      	str	r2, [sp, #68]	; 0x44
 800dbbe:	e7bf      	b.n	800db40 <_strtod_l+0x30>
 800dbc0:	2b2d      	cmp	r3, #45	; 0x2d
 800dbc2:	d1c8      	bne.n	800db56 <_strtod_l+0x46>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	9308      	str	r3, [sp, #32]
 800dbc8:	1c53      	adds	r3, r2, #1
 800dbca:	9311      	str	r3, [sp, #68]	; 0x44
 800dbcc:	7853      	ldrb	r3, [r2, #1]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1c3      	bne.n	800db5a <_strtod_l+0x4a>
 800dbd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbd4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f040 852d 	bne.w	800e638 <_strtod_l+0xb28>
 800dbde:	ec49 8b10 	vmov	d0, r8, r9
 800dbe2:	e7e3      	b.n	800dbac <_strtod_l+0x9c>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e7ee      	b.n	800dbc6 <_strtod_l+0xb6>
 800dbe8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dbea:	b13a      	cbz	r2, 800dbfc <_strtod_l+0xec>
 800dbec:	2135      	movs	r1, #53	; 0x35
 800dbee:	a814      	add	r0, sp, #80	; 0x50
 800dbf0:	f001 fd5a 	bl	800f6a8 <__copybits>
 800dbf4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f001 f91c 	bl	800ee34 <_Bfree>
 800dbfc:	3d01      	subs	r5, #1
 800dbfe:	2d04      	cmp	r5, #4
 800dc00:	d806      	bhi.n	800dc10 <_strtod_l+0x100>
 800dc02:	e8df f005 	tbb	[pc, r5]
 800dc06:	030a      	.short	0x030a
 800dc08:	1714      	.short	0x1714
 800dc0a:	0a          	.byte	0x0a
 800dc0b:	00          	.byte	0x00
 800dc0c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800dc10:	073f      	lsls	r7, r7, #28
 800dc12:	d5c1      	bpl.n	800db98 <_strtod_l+0x88>
 800dc14:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800dc18:	e7be      	b.n	800db98 <_strtod_l+0x88>
 800dc1a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800dc1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dc20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dc24:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dc28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800dc2c:	e7f0      	b.n	800dc10 <_strtod_l+0x100>
 800dc2e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800ddb0 <_strtod_l+0x2a0>
 800dc32:	e7ed      	b.n	800dc10 <_strtod_l+0x100>
 800dc34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800dc38:	f04f 38ff 	mov.w	r8, #4294967295
 800dc3c:	e7e8      	b.n	800dc10 <_strtod_l+0x100>
 800dc3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc40:	1c5a      	adds	r2, r3, #1
 800dc42:	9211      	str	r2, [sp, #68]	; 0x44
 800dc44:	785b      	ldrb	r3, [r3, #1]
 800dc46:	2b30      	cmp	r3, #48	; 0x30
 800dc48:	d0f9      	beq.n	800dc3e <_strtod_l+0x12e>
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d0a4      	beq.n	800db98 <_strtod_l+0x88>
 800dc4e:	2301      	movs	r3, #1
 800dc50:	f04f 0a00 	mov.w	sl, #0
 800dc54:	9304      	str	r3, [sp, #16]
 800dc56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc58:	930a      	str	r3, [sp, #40]	; 0x28
 800dc5a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800dc5e:	f8cd a018 	str.w	sl, [sp, #24]
 800dc62:	220a      	movs	r2, #10
 800dc64:	9811      	ldr	r0, [sp, #68]	; 0x44
 800dc66:	7807      	ldrb	r7, [r0, #0]
 800dc68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800dc6c:	b2d9      	uxtb	r1, r3
 800dc6e:	2909      	cmp	r1, #9
 800dc70:	d92a      	bls.n	800dcc8 <_strtod_l+0x1b8>
 800dc72:	9907      	ldr	r1, [sp, #28]
 800dc74:	462a      	mov	r2, r5
 800dc76:	f001 fe1f 	bl	800f8b8 <strncmp>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	d033      	beq.n	800dce6 <_strtod_l+0x1d6>
 800dc7e:	2000      	movs	r0, #0
 800dc80:	9b06      	ldr	r3, [sp, #24]
 800dc82:	463a      	mov	r2, r7
 800dc84:	4601      	mov	r1, r0
 800dc86:	4607      	mov	r7, r0
 800dc88:	2a65      	cmp	r2, #101	; 0x65
 800dc8a:	d001      	beq.n	800dc90 <_strtod_l+0x180>
 800dc8c:	2a45      	cmp	r2, #69	; 0x45
 800dc8e:	d117      	bne.n	800dcc0 <_strtod_l+0x1b0>
 800dc90:	b91b      	cbnz	r3, 800dc9a <_strtod_l+0x18a>
 800dc92:	9b04      	ldr	r3, [sp, #16]
 800dc94:	4303      	orrs	r3, r0
 800dc96:	d09c      	beq.n	800dbd2 <_strtod_l+0xc2>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800dc9e:	f10b 0201 	add.w	r2, fp, #1
 800dca2:	9211      	str	r2, [sp, #68]	; 0x44
 800dca4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800dca8:	2a2b      	cmp	r2, #43	; 0x2b
 800dcaa:	d071      	beq.n	800dd90 <_strtod_l+0x280>
 800dcac:	2a2d      	cmp	r2, #45	; 0x2d
 800dcae:	d077      	beq.n	800dda0 <_strtod_l+0x290>
 800dcb0:	f04f 0e00 	mov.w	lr, #0
 800dcb4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800dcb8:	2d09      	cmp	r5, #9
 800dcba:	d97f      	bls.n	800ddbc <_strtod_l+0x2ac>
 800dcbc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800dcc0:	2500      	movs	r5, #0
 800dcc2:	e09b      	b.n	800ddfc <_strtod_l+0x2ec>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	e7c3      	b.n	800dc50 <_strtod_l+0x140>
 800dcc8:	9906      	ldr	r1, [sp, #24]
 800dcca:	2908      	cmp	r1, #8
 800dccc:	bfdd      	ittte	le
 800dcce:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800dcd0:	fb02 3301 	mlale	r3, r2, r1, r3
 800dcd4:	9309      	strle	r3, [sp, #36]	; 0x24
 800dcd6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800dcda:	9b06      	ldr	r3, [sp, #24]
 800dcdc:	3001      	adds	r0, #1
 800dcde:	3301      	adds	r3, #1
 800dce0:	9306      	str	r3, [sp, #24]
 800dce2:	9011      	str	r0, [sp, #68]	; 0x44
 800dce4:	e7be      	b.n	800dc64 <_strtod_l+0x154>
 800dce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dce8:	195a      	adds	r2, r3, r5
 800dcea:	9211      	str	r2, [sp, #68]	; 0x44
 800dcec:	5d5a      	ldrb	r2, [r3, r5]
 800dcee:	9b06      	ldr	r3, [sp, #24]
 800dcf0:	b3a3      	cbz	r3, 800dd5c <_strtod_l+0x24c>
 800dcf2:	4607      	mov	r7, r0
 800dcf4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dcf8:	2909      	cmp	r1, #9
 800dcfa:	d912      	bls.n	800dd22 <_strtod_l+0x212>
 800dcfc:	2101      	movs	r1, #1
 800dcfe:	e7c3      	b.n	800dc88 <_strtod_l+0x178>
 800dd00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd02:	1c5a      	adds	r2, r3, #1
 800dd04:	9211      	str	r2, [sp, #68]	; 0x44
 800dd06:	785a      	ldrb	r2, [r3, #1]
 800dd08:	3001      	adds	r0, #1
 800dd0a:	2a30      	cmp	r2, #48	; 0x30
 800dd0c:	d0f8      	beq.n	800dd00 <_strtod_l+0x1f0>
 800dd0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dd12:	2b08      	cmp	r3, #8
 800dd14:	f200 8497 	bhi.w	800e646 <_strtod_l+0xb36>
 800dd18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd1a:	930a      	str	r3, [sp, #40]	; 0x28
 800dd1c:	4607      	mov	r7, r0
 800dd1e:	2000      	movs	r0, #0
 800dd20:	4603      	mov	r3, r0
 800dd22:	3a30      	subs	r2, #48	; 0x30
 800dd24:	f100 0101 	add.w	r1, r0, #1
 800dd28:	d012      	beq.n	800dd50 <_strtod_l+0x240>
 800dd2a:	440f      	add	r7, r1
 800dd2c:	eb00 0c03 	add.w	ip, r0, r3
 800dd30:	4619      	mov	r1, r3
 800dd32:	250a      	movs	r5, #10
 800dd34:	4561      	cmp	r1, ip
 800dd36:	d113      	bne.n	800dd60 <_strtod_l+0x250>
 800dd38:	1819      	adds	r1, r3, r0
 800dd3a:	2908      	cmp	r1, #8
 800dd3c:	f103 0301 	add.w	r3, r3, #1
 800dd40:	4403      	add	r3, r0
 800dd42:	dc1c      	bgt.n	800dd7e <_strtod_l+0x26e>
 800dd44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd46:	210a      	movs	r1, #10
 800dd48:	fb01 2200 	mla	r2, r1, r0, r2
 800dd4c:	9209      	str	r2, [sp, #36]	; 0x24
 800dd4e:	2100      	movs	r1, #0
 800dd50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dd52:	1c50      	adds	r0, r2, #1
 800dd54:	9011      	str	r0, [sp, #68]	; 0x44
 800dd56:	7852      	ldrb	r2, [r2, #1]
 800dd58:	4608      	mov	r0, r1
 800dd5a:	e7cb      	b.n	800dcf4 <_strtod_l+0x1e4>
 800dd5c:	9806      	ldr	r0, [sp, #24]
 800dd5e:	e7d4      	b.n	800dd0a <_strtod_l+0x1fa>
 800dd60:	2908      	cmp	r1, #8
 800dd62:	dc04      	bgt.n	800dd6e <_strtod_l+0x25e>
 800dd64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dd66:	436e      	muls	r6, r5
 800dd68:	9609      	str	r6, [sp, #36]	; 0x24
 800dd6a:	3101      	adds	r1, #1
 800dd6c:	e7e2      	b.n	800dd34 <_strtod_l+0x224>
 800dd6e:	f101 0e01 	add.w	lr, r1, #1
 800dd72:	f1be 0f10 	cmp.w	lr, #16
 800dd76:	bfd8      	it	le
 800dd78:	fb05 fa0a 	mulle.w	sl, r5, sl
 800dd7c:	e7f5      	b.n	800dd6a <_strtod_l+0x25a>
 800dd7e:	2b10      	cmp	r3, #16
 800dd80:	bfdc      	itt	le
 800dd82:	210a      	movle	r1, #10
 800dd84:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800dd88:	e7e1      	b.n	800dd4e <_strtod_l+0x23e>
 800dd8a:	2700      	movs	r7, #0
 800dd8c:	2101      	movs	r1, #1
 800dd8e:	e780      	b.n	800dc92 <_strtod_l+0x182>
 800dd90:	f04f 0e00 	mov.w	lr, #0
 800dd94:	f10b 0202 	add.w	r2, fp, #2
 800dd98:	9211      	str	r2, [sp, #68]	; 0x44
 800dd9a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800dd9e:	e789      	b.n	800dcb4 <_strtod_l+0x1a4>
 800dda0:	f04f 0e01 	mov.w	lr, #1
 800dda4:	e7f6      	b.n	800dd94 <_strtod_l+0x284>
 800dda6:	bf00      	nop
 800dda8:	080111c0 	.word	0x080111c0
 800ddac:	080110f8 	.word	0x080110f8
 800ddb0:	7ff00000 	.word	0x7ff00000
 800ddb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ddb6:	1c55      	adds	r5, r2, #1
 800ddb8:	9511      	str	r5, [sp, #68]	; 0x44
 800ddba:	7852      	ldrb	r2, [r2, #1]
 800ddbc:	2a30      	cmp	r2, #48	; 0x30
 800ddbe:	d0f9      	beq.n	800ddb4 <_strtod_l+0x2a4>
 800ddc0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800ddc4:	2d08      	cmp	r5, #8
 800ddc6:	f63f af7b 	bhi.w	800dcc0 <_strtod_l+0x1b0>
 800ddca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ddce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ddd0:	9207      	str	r2, [sp, #28]
 800ddd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ddd4:	1c55      	adds	r5, r2, #1
 800ddd6:	9511      	str	r5, [sp, #68]	; 0x44
 800ddd8:	7852      	ldrb	r2, [r2, #1]
 800ddda:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ddde:	2e09      	cmp	r6, #9
 800dde0:	d937      	bls.n	800de52 <_strtod_l+0x342>
 800dde2:	9e07      	ldr	r6, [sp, #28]
 800dde4:	1bad      	subs	r5, r5, r6
 800dde6:	2d08      	cmp	r5, #8
 800dde8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ddec:	dc02      	bgt.n	800ddf4 <_strtod_l+0x2e4>
 800ddee:	4565      	cmp	r5, ip
 800ddf0:	bfa8      	it	ge
 800ddf2:	4665      	movge	r5, ip
 800ddf4:	f1be 0f00 	cmp.w	lr, #0
 800ddf8:	d000      	beq.n	800ddfc <_strtod_l+0x2ec>
 800ddfa:	426d      	negs	r5, r5
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d14d      	bne.n	800de9c <_strtod_l+0x38c>
 800de00:	9b04      	ldr	r3, [sp, #16]
 800de02:	4303      	orrs	r3, r0
 800de04:	f47f aec8 	bne.w	800db98 <_strtod_l+0x88>
 800de08:	2900      	cmp	r1, #0
 800de0a:	f47f aee2 	bne.w	800dbd2 <_strtod_l+0xc2>
 800de0e:	2a69      	cmp	r2, #105	; 0x69
 800de10:	d027      	beq.n	800de62 <_strtod_l+0x352>
 800de12:	dc24      	bgt.n	800de5e <_strtod_l+0x34e>
 800de14:	2a49      	cmp	r2, #73	; 0x49
 800de16:	d024      	beq.n	800de62 <_strtod_l+0x352>
 800de18:	2a4e      	cmp	r2, #78	; 0x4e
 800de1a:	f47f aeda 	bne.w	800dbd2 <_strtod_l+0xc2>
 800de1e:	4996      	ldr	r1, [pc, #600]	; (800e078 <_strtod_l+0x568>)
 800de20:	a811      	add	r0, sp, #68	; 0x44
 800de22:	f000 fef7 	bl	800ec14 <__match>
 800de26:	2800      	cmp	r0, #0
 800de28:	f43f aed3 	beq.w	800dbd2 <_strtod_l+0xc2>
 800de2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	2b28      	cmp	r3, #40	; 0x28
 800de32:	d12d      	bne.n	800de90 <_strtod_l+0x380>
 800de34:	4991      	ldr	r1, [pc, #580]	; (800e07c <_strtod_l+0x56c>)
 800de36:	aa14      	add	r2, sp, #80	; 0x50
 800de38:	a811      	add	r0, sp, #68	; 0x44
 800de3a:	f000 feff 	bl	800ec3c <__hexnan>
 800de3e:	2805      	cmp	r0, #5
 800de40:	d126      	bne.n	800de90 <_strtod_l+0x380>
 800de42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de44:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800de48:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800de4c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800de50:	e6a2      	b.n	800db98 <_strtod_l+0x88>
 800de52:	250a      	movs	r5, #10
 800de54:	fb05 250c 	mla	r5, r5, ip, r2
 800de58:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800de5c:	e7b9      	b.n	800ddd2 <_strtod_l+0x2c2>
 800de5e:	2a6e      	cmp	r2, #110	; 0x6e
 800de60:	e7db      	b.n	800de1a <_strtod_l+0x30a>
 800de62:	4987      	ldr	r1, [pc, #540]	; (800e080 <_strtod_l+0x570>)
 800de64:	a811      	add	r0, sp, #68	; 0x44
 800de66:	f000 fed5 	bl	800ec14 <__match>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	f43f aeb1 	beq.w	800dbd2 <_strtod_l+0xc2>
 800de70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de72:	4984      	ldr	r1, [pc, #528]	; (800e084 <_strtod_l+0x574>)
 800de74:	3b01      	subs	r3, #1
 800de76:	a811      	add	r0, sp, #68	; 0x44
 800de78:	9311      	str	r3, [sp, #68]	; 0x44
 800de7a:	f000 fecb 	bl	800ec14 <__match>
 800de7e:	b910      	cbnz	r0, 800de86 <_strtod_l+0x376>
 800de80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de82:	3301      	adds	r3, #1
 800de84:	9311      	str	r3, [sp, #68]	; 0x44
 800de86:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800e098 <_strtod_l+0x588>
 800de8a:	f04f 0800 	mov.w	r8, #0
 800de8e:	e683      	b.n	800db98 <_strtod_l+0x88>
 800de90:	487d      	ldr	r0, [pc, #500]	; (800e088 <_strtod_l+0x578>)
 800de92:	f001 fcf9 	bl	800f888 <nan>
 800de96:	ec59 8b10 	vmov	r8, r9, d0
 800de9a:	e67d      	b.n	800db98 <_strtod_l+0x88>
 800de9c:	1bea      	subs	r2, r5, r7
 800de9e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800dea2:	9207      	str	r2, [sp, #28]
 800dea4:	9a06      	ldr	r2, [sp, #24]
 800dea6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800deaa:	2a00      	cmp	r2, #0
 800deac:	bf08      	it	eq
 800deae:	461a      	moveq	r2, r3
 800deb0:	2b10      	cmp	r3, #16
 800deb2:	9206      	str	r2, [sp, #24]
 800deb4:	461a      	mov	r2, r3
 800deb6:	bfa8      	it	ge
 800deb8:	2210      	movge	r2, #16
 800deba:	2b09      	cmp	r3, #9
 800debc:	ec59 8b17 	vmov	r8, r9, d7
 800dec0:	dd0c      	ble.n	800dedc <_strtod_l+0x3cc>
 800dec2:	4972      	ldr	r1, [pc, #456]	; (800e08c <_strtod_l+0x57c>)
 800dec4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800dec8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800decc:	ee06 aa90 	vmov	s13, sl
 800ded0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800ded4:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ded8:	ec59 8b16 	vmov	r8, r9, d6
 800dedc:	2b0f      	cmp	r3, #15
 800dede:	dc36      	bgt.n	800df4e <_strtod_l+0x43e>
 800dee0:	9907      	ldr	r1, [sp, #28]
 800dee2:	2900      	cmp	r1, #0
 800dee4:	f43f ae58 	beq.w	800db98 <_strtod_l+0x88>
 800dee8:	dd23      	ble.n	800df32 <_strtod_l+0x422>
 800deea:	2916      	cmp	r1, #22
 800deec:	dc0b      	bgt.n	800df06 <_strtod_l+0x3f6>
 800deee:	4b67      	ldr	r3, [pc, #412]	; (800e08c <_strtod_l+0x57c>)
 800def0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800def4:	ed93 7b00 	vldr	d7, [r3]
 800def8:	ec49 8b16 	vmov	d6, r8, r9
 800defc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df00:	ec59 8b17 	vmov	r8, r9, d7
 800df04:	e648      	b.n	800db98 <_strtod_l+0x88>
 800df06:	9807      	ldr	r0, [sp, #28]
 800df08:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800df0c:	4281      	cmp	r1, r0
 800df0e:	db1e      	blt.n	800df4e <_strtod_l+0x43e>
 800df10:	4a5e      	ldr	r2, [pc, #376]	; (800e08c <_strtod_l+0x57c>)
 800df12:	f1c3 030f 	rsb	r3, r3, #15
 800df16:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800df1a:	ed91 7b00 	vldr	d7, [r1]
 800df1e:	ec49 8b16 	vmov	d6, r8, r9
 800df22:	1ac3      	subs	r3, r0, r3
 800df24:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800df28:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df2c:	ed92 6b00 	vldr	d6, [r2]
 800df30:	e7e4      	b.n	800defc <_strtod_l+0x3ec>
 800df32:	9907      	ldr	r1, [sp, #28]
 800df34:	3116      	adds	r1, #22
 800df36:	db0a      	blt.n	800df4e <_strtod_l+0x43e>
 800df38:	4b54      	ldr	r3, [pc, #336]	; (800e08c <_strtod_l+0x57c>)
 800df3a:	1b7d      	subs	r5, r7, r5
 800df3c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800df40:	ed95 7b00 	vldr	d7, [r5]
 800df44:	ec49 8b16 	vmov	d6, r8, r9
 800df48:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800df4c:	e7d8      	b.n	800df00 <_strtod_l+0x3f0>
 800df4e:	9907      	ldr	r1, [sp, #28]
 800df50:	1a9a      	subs	r2, r3, r2
 800df52:	440a      	add	r2, r1
 800df54:	2a00      	cmp	r2, #0
 800df56:	dd6f      	ble.n	800e038 <_strtod_l+0x528>
 800df58:	f012 000f 	ands.w	r0, r2, #15
 800df5c:	d00a      	beq.n	800df74 <_strtod_l+0x464>
 800df5e:	494b      	ldr	r1, [pc, #300]	; (800e08c <_strtod_l+0x57c>)
 800df60:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800df64:	ed91 7b00 	vldr	d7, [r1]
 800df68:	ec49 8b16 	vmov	d6, r8, r9
 800df6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df70:	ec59 8b17 	vmov	r8, r9, d7
 800df74:	f032 020f 	bics.w	r2, r2, #15
 800df78:	d04f      	beq.n	800e01a <_strtod_l+0x50a>
 800df7a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800df7e:	dd22      	ble.n	800dfc6 <_strtod_l+0x4b6>
 800df80:	2500      	movs	r5, #0
 800df82:	462e      	mov	r6, r5
 800df84:	9506      	str	r5, [sp, #24]
 800df86:	462f      	mov	r7, r5
 800df88:	2322      	movs	r3, #34	; 0x22
 800df8a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800e098 <_strtod_l+0x588>
 800df8e:	6023      	str	r3, [r4, #0]
 800df90:	f04f 0800 	mov.w	r8, #0
 800df94:	9b06      	ldr	r3, [sp, #24]
 800df96:	2b00      	cmp	r3, #0
 800df98:	f43f adfe 	beq.w	800db98 <_strtod_l+0x88>
 800df9c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800df9e:	4620      	mov	r0, r4
 800dfa0:	f000 ff48 	bl	800ee34 <_Bfree>
 800dfa4:	4639      	mov	r1, r7
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f000 ff44 	bl	800ee34 <_Bfree>
 800dfac:	4631      	mov	r1, r6
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f000 ff40 	bl	800ee34 <_Bfree>
 800dfb4:	9906      	ldr	r1, [sp, #24]
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f000 ff3c 	bl	800ee34 <_Bfree>
 800dfbc:	4629      	mov	r1, r5
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f000 ff38 	bl	800ee34 <_Bfree>
 800dfc4:	e5e8      	b.n	800db98 <_strtod_l+0x88>
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	ec49 8b17 	vmov	d7, r8, r9
 800dfcc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800e090 <_strtod_l+0x580>
 800dfd0:	1112      	asrs	r2, r2, #4
 800dfd2:	4601      	mov	r1, r0
 800dfd4:	2a01      	cmp	r2, #1
 800dfd6:	dc23      	bgt.n	800e020 <_strtod_l+0x510>
 800dfd8:	b108      	cbz	r0, 800dfde <_strtod_l+0x4ce>
 800dfda:	ec59 8b17 	vmov	r8, r9, d7
 800dfde:	4a2c      	ldr	r2, [pc, #176]	; (800e090 <_strtod_l+0x580>)
 800dfe0:	482c      	ldr	r0, [pc, #176]	; (800e094 <_strtod_l+0x584>)
 800dfe2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dfe6:	ed92 7b00 	vldr	d7, [r2]
 800dfea:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800dfee:	ec49 8b16 	vmov	d6, r8, r9
 800dff2:	4a29      	ldr	r2, [pc, #164]	; (800e098 <_strtod_l+0x588>)
 800dff4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dff8:	ee17 1a90 	vmov	r1, s15
 800dffc:	400a      	ands	r2, r1
 800dffe:	4282      	cmp	r2, r0
 800e000:	ec59 8b17 	vmov	r8, r9, d7
 800e004:	d8bc      	bhi.n	800df80 <_strtod_l+0x470>
 800e006:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800e00a:	4282      	cmp	r2, r0
 800e00c:	bf86      	itte	hi
 800e00e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800e09c <_strtod_l+0x58c>
 800e012:	f04f 38ff 	movhi.w	r8, #4294967295
 800e016:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800e01a:	2200      	movs	r2, #0
 800e01c:	9204      	str	r2, [sp, #16]
 800e01e:	e078      	b.n	800e112 <_strtod_l+0x602>
 800e020:	07d6      	lsls	r6, r2, #31
 800e022:	d504      	bpl.n	800e02e <_strtod_l+0x51e>
 800e024:	ed9c 6b00 	vldr	d6, [ip]
 800e028:	2001      	movs	r0, #1
 800e02a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e02e:	3101      	adds	r1, #1
 800e030:	1052      	asrs	r2, r2, #1
 800e032:	f10c 0c08 	add.w	ip, ip, #8
 800e036:	e7cd      	b.n	800dfd4 <_strtod_l+0x4c4>
 800e038:	d0ef      	beq.n	800e01a <_strtod_l+0x50a>
 800e03a:	4252      	negs	r2, r2
 800e03c:	f012 000f 	ands.w	r0, r2, #15
 800e040:	d00a      	beq.n	800e058 <_strtod_l+0x548>
 800e042:	4912      	ldr	r1, [pc, #72]	; (800e08c <_strtod_l+0x57c>)
 800e044:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e048:	ed91 7b00 	vldr	d7, [r1]
 800e04c:	ec49 8b16 	vmov	d6, r8, r9
 800e050:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e054:	ec59 8b17 	vmov	r8, r9, d7
 800e058:	1112      	asrs	r2, r2, #4
 800e05a:	d0de      	beq.n	800e01a <_strtod_l+0x50a>
 800e05c:	2a1f      	cmp	r2, #31
 800e05e:	dd1f      	ble.n	800e0a0 <_strtod_l+0x590>
 800e060:	2500      	movs	r5, #0
 800e062:	462e      	mov	r6, r5
 800e064:	9506      	str	r5, [sp, #24]
 800e066:	462f      	mov	r7, r5
 800e068:	2322      	movs	r3, #34	; 0x22
 800e06a:	f04f 0800 	mov.w	r8, #0
 800e06e:	f04f 0900 	mov.w	r9, #0
 800e072:	6023      	str	r3, [r4, #0]
 800e074:	e78e      	b.n	800df94 <_strtod_l+0x484>
 800e076:	bf00      	nop
 800e078:	080110f5 	.word	0x080110f5
 800e07c:	0801110c 	.word	0x0801110c
 800e080:	080110ec 	.word	0x080110ec
 800e084:	080110ef 	.word	0x080110ef
 800e088:	0801137f 	.word	0x0801137f
 800e08c:	08011270 	.word	0x08011270
 800e090:	08011248 	.word	0x08011248
 800e094:	7ca00000 	.word	0x7ca00000
 800e098:	7ff00000 	.word	0x7ff00000
 800e09c:	7fefffff 	.word	0x7fefffff
 800e0a0:	f012 0110 	ands.w	r1, r2, #16
 800e0a4:	bf18      	it	ne
 800e0a6:	216a      	movne	r1, #106	; 0x6a
 800e0a8:	9104      	str	r1, [sp, #16]
 800e0aa:	ec49 8b17 	vmov	d7, r8, r9
 800e0ae:	49be      	ldr	r1, [pc, #760]	; (800e3a8 <_strtod_l+0x898>)
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	07d6      	lsls	r6, r2, #31
 800e0b4:	d504      	bpl.n	800e0c0 <_strtod_l+0x5b0>
 800e0b6:	ed91 6b00 	vldr	d6, [r1]
 800e0ba:	2001      	movs	r0, #1
 800e0bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e0c0:	1052      	asrs	r2, r2, #1
 800e0c2:	f101 0108 	add.w	r1, r1, #8
 800e0c6:	d1f4      	bne.n	800e0b2 <_strtod_l+0x5a2>
 800e0c8:	b108      	cbz	r0, 800e0ce <_strtod_l+0x5be>
 800e0ca:	ec59 8b17 	vmov	r8, r9, d7
 800e0ce:	9a04      	ldr	r2, [sp, #16]
 800e0d0:	b1c2      	cbz	r2, 800e104 <_strtod_l+0x5f4>
 800e0d2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800e0d6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800e0da:	2a00      	cmp	r2, #0
 800e0dc:	4648      	mov	r0, r9
 800e0de:	dd11      	ble.n	800e104 <_strtod_l+0x5f4>
 800e0e0:	2a1f      	cmp	r2, #31
 800e0e2:	f340 812e 	ble.w	800e342 <_strtod_l+0x832>
 800e0e6:	2a34      	cmp	r2, #52	; 0x34
 800e0e8:	bfde      	ittt	le
 800e0ea:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800e0ee:	f04f 32ff 	movle.w	r2, #4294967295
 800e0f2:	fa02 f101 	lslle.w	r1, r2, r1
 800e0f6:	f04f 0800 	mov.w	r8, #0
 800e0fa:	bfcc      	ite	gt
 800e0fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e100:	ea01 0900 	andle.w	r9, r1, r0
 800e104:	ec49 8b17 	vmov	d7, r8, r9
 800e108:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e110:	d0a6      	beq.n	800e060 <_strtod_l+0x550>
 800e112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e114:	9200      	str	r2, [sp, #0]
 800e116:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e118:	9a06      	ldr	r2, [sp, #24]
 800e11a:	4620      	mov	r0, r4
 800e11c:	f000 fef2 	bl	800ef04 <__s2b>
 800e120:	9006      	str	r0, [sp, #24]
 800e122:	2800      	cmp	r0, #0
 800e124:	f43f af2c 	beq.w	800df80 <_strtod_l+0x470>
 800e128:	9b07      	ldr	r3, [sp, #28]
 800e12a:	1b7d      	subs	r5, r7, r5
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	bfb4      	ite	lt
 800e130:	462b      	movlt	r3, r5
 800e132:	2300      	movge	r3, #0
 800e134:	9309      	str	r3, [sp, #36]	; 0x24
 800e136:	9b07      	ldr	r3, [sp, #28]
 800e138:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800e388 <_strtod_l+0x878>
 800e13c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800e390 <_strtod_l+0x880>
 800e140:	ed9f bb95 	vldr	d11, [pc, #596]	; 800e398 <_strtod_l+0x888>
 800e144:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e148:	2500      	movs	r5, #0
 800e14a:	930c      	str	r3, [sp, #48]	; 0x30
 800e14c:	462e      	mov	r6, r5
 800e14e:	9b06      	ldr	r3, [sp, #24]
 800e150:	4620      	mov	r0, r4
 800e152:	6859      	ldr	r1, [r3, #4]
 800e154:	f000 fe2e 	bl	800edb4 <_Balloc>
 800e158:	4607      	mov	r7, r0
 800e15a:	2800      	cmp	r0, #0
 800e15c:	f43f af14 	beq.w	800df88 <_strtod_l+0x478>
 800e160:	9b06      	ldr	r3, [sp, #24]
 800e162:	691a      	ldr	r2, [r3, #16]
 800e164:	3202      	adds	r2, #2
 800e166:	f103 010c 	add.w	r1, r3, #12
 800e16a:	0092      	lsls	r2, r2, #2
 800e16c:	300c      	adds	r0, #12
 800e16e:	f000 fe13 	bl	800ed98 <memcpy>
 800e172:	ec49 8b10 	vmov	d0, r8, r9
 800e176:	aa14      	add	r2, sp, #80	; 0x50
 800e178:	a913      	add	r1, sp, #76	; 0x4c
 800e17a:	4620      	mov	r0, r4
 800e17c:	f001 fa08 	bl	800f590 <__d2b>
 800e180:	ec49 8b18 	vmov	d8, r8, r9
 800e184:	9012      	str	r0, [sp, #72]	; 0x48
 800e186:	2800      	cmp	r0, #0
 800e188:	f43f aefe 	beq.w	800df88 <_strtod_l+0x478>
 800e18c:	2101      	movs	r1, #1
 800e18e:	4620      	mov	r0, r4
 800e190:	f000 ff52 	bl	800f038 <__i2b>
 800e194:	4606      	mov	r6, r0
 800e196:	2800      	cmp	r0, #0
 800e198:	f43f aef6 	beq.w	800df88 <_strtod_l+0x478>
 800e19c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e19e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	bfab      	itete	ge
 800e1a4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800e1a6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800e1a8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800e1ac:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800e1b0:	bfac      	ite	ge
 800e1b2:	eb03 0b02 	addge.w	fp, r3, r2
 800e1b6:	eba2 0a03 	sublt.w	sl, r2, r3
 800e1ba:	9a04      	ldr	r2, [sp, #16]
 800e1bc:	1a9b      	subs	r3, r3, r2
 800e1be:	440b      	add	r3, r1
 800e1c0:	4a7a      	ldr	r2, [pc, #488]	; (800e3ac <_strtod_l+0x89c>)
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800e1ca:	f280 80cd 	bge.w	800e368 <_strtod_l+0x858>
 800e1ce:	1ad2      	subs	r2, r2, r3
 800e1d0:	2a1f      	cmp	r2, #31
 800e1d2:	eba1 0102 	sub.w	r1, r1, r2
 800e1d6:	f04f 0001 	mov.w	r0, #1
 800e1da:	f300 80b9 	bgt.w	800e350 <_strtod_l+0x840>
 800e1de:	fa00 f302 	lsl.w	r3, r0, r2
 800e1e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800e1e8:	eb0b 0301 	add.w	r3, fp, r1
 800e1ec:	9a04      	ldr	r2, [sp, #16]
 800e1ee:	459b      	cmp	fp, r3
 800e1f0:	448a      	add	sl, r1
 800e1f2:	4492      	add	sl, r2
 800e1f4:	465a      	mov	r2, fp
 800e1f6:	bfa8      	it	ge
 800e1f8:	461a      	movge	r2, r3
 800e1fa:	4552      	cmp	r2, sl
 800e1fc:	bfa8      	it	ge
 800e1fe:	4652      	movge	r2, sl
 800e200:	2a00      	cmp	r2, #0
 800e202:	bfc2      	ittt	gt
 800e204:	1a9b      	subgt	r3, r3, r2
 800e206:	ebaa 0a02 	subgt.w	sl, sl, r2
 800e20a:	ebab 0b02 	subgt.w	fp, fp, r2
 800e20e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e210:	2a00      	cmp	r2, #0
 800e212:	dd18      	ble.n	800e246 <_strtod_l+0x736>
 800e214:	4631      	mov	r1, r6
 800e216:	4620      	mov	r0, r4
 800e218:	930f      	str	r3, [sp, #60]	; 0x3c
 800e21a:	f000 ffcd 	bl	800f1b8 <__pow5mult>
 800e21e:	4606      	mov	r6, r0
 800e220:	2800      	cmp	r0, #0
 800e222:	f43f aeb1 	beq.w	800df88 <_strtod_l+0x478>
 800e226:	4601      	mov	r1, r0
 800e228:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e22a:	4620      	mov	r0, r4
 800e22c:	f000 ff1a 	bl	800f064 <__multiply>
 800e230:	900e      	str	r0, [sp, #56]	; 0x38
 800e232:	2800      	cmp	r0, #0
 800e234:	f43f aea8 	beq.w	800df88 <_strtod_l+0x478>
 800e238:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e23a:	4620      	mov	r0, r4
 800e23c:	f000 fdfa 	bl	800ee34 <_Bfree>
 800e240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e244:	9212      	str	r2, [sp, #72]	; 0x48
 800e246:	2b00      	cmp	r3, #0
 800e248:	f300 8093 	bgt.w	800e372 <_strtod_l+0x862>
 800e24c:	9b07      	ldr	r3, [sp, #28]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	dd08      	ble.n	800e264 <_strtod_l+0x754>
 800e252:	4639      	mov	r1, r7
 800e254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e256:	4620      	mov	r0, r4
 800e258:	f000 ffae 	bl	800f1b8 <__pow5mult>
 800e25c:	4607      	mov	r7, r0
 800e25e:	2800      	cmp	r0, #0
 800e260:	f43f ae92 	beq.w	800df88 <_strtod_l+0x478>
 800e264:	f1ba 0f00 	cmp.w	sl, #0
 800e268:	dd08      	ble.n	800e27c <_strtod_l+0x76c>
 800e26a:	4639      	mov	r1, r7
 800e26c:	4652      	mov	r2, sl
 800e26e:	4620      	mov	r0, r4
 800e270:	f000 fffc 	bl	800f26c <__lshift>
 800e274:	4607      	mov	r7, r0
 800e276:	2800      	cmp	r0, #0
 800e278:	f43f ae86 	beq.w	800df88 <_strtod_l+0x478>
 800e27c:	f1bb 0f00 	cmp.w	fp, #0
 800e280:	dd08      	ble.n	800e294 <_strtod_l+0x784>
 800e282:	4631      	mov	r1, r6
 800e284:	465a      	mov	r2, fp
 800e286:	4620      	mov	r0, r4
 800e288:	f000 fff0 	bl	800f26c <__lshift>
 800e28c:	4606      	mov	r6, r0
 800e28e:	2800      	cmp	r0, #0
 800e290:	f43f ae7a 	beq.w	800df88 <_strtod_l+0x478>
 800e294:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e296:	463a      	mov	r2, r7
 800e298:	4620      	mov	r0, r4
 800e29a:	f001 f873 	bl	800f384 <__mdiff>
 800e29e:	4605      	mov	r5, r0
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	f43f ae71 	beq.w	800df88 <_strtod_l+0x478>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800e2ac:	60c3      	str	r3, [r0, #12]
 800e2ae:	4631      	mov	r1, r6
 800e2b0:	f001 f84c 	bl	800f34c <__mcmp>
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	da7d      	bge.n	800e3b4 <_strtod_l+0x8a4>
 800e2b8:	ea5a 0308 	orrs.w	r3, sl, r8
 800e2bc:	f040 80a3 	bne.w	800e406 <_strtod_l+0x8f6>
 800e2c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f040 809e 	bne.w	800e406 <_strtod_l+0x8f6>
 800e2ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e2ce:	0d1b      	lsrs	r3, r3, #20
 800e2d0:	051b      	lsls	r3, r3, #20
 800e2d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e2d6:	f240 8096 	bls.w	800e406 <_strtod_l+0x8f6>
 800e2da:	696b      	ldr	r3, [r5, #20]
 800e2dc:	b91b      	cbnz	r3, 800e2e6 <_strtod_l+0x7d6>
 800e2de:	692b      	ldr	r3, [r5, #16]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	f340 8090 	ble.w	800e406 <_strtod_l+0x8f6>
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	f000 ffbe 	bl	800f26c <__lshift>
 800e2f0:	4631      	mov	r1, r6
 800e2f2:	4605      	mov	r5, r0
 800e2f4:	f001 f82a 	bl	800f34c <__mcmp>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	f340 8084 	ble.w	800e406 <_strtod_l+0x8f6>
 800e2fe:	9904      	ldr	r1, [sp, #16]
 800e300:	4a2b      	ldr	r2, [pc, #172]	; (800e3b0 <_strtod_l+0x8a0>)
 800e302:	464b      	mov	r3, r9
 800e304:	2900      	cmp	r1, #0
 800e306:	f000 809d 	beq.w	800e444 <_strtod_l+0x934>
 800e30a:	ea02 0109 	and.w	r1, r2, r9
 800e30e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e312:	f300 8097 	bgt.w	800e444 <_strtod_l+0x934>
 800e316:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e31a:	f77f aea5 	ble.w	800e068 <_strtod_l+0x558>
 800e31e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e3a0 <_strtod_l+0x890>
 800e322:	ec49 8b16 	vmov	d6, r8, r9
 800e326:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e32a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e32e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800e332:	4313      	orrs	r3, r2
 800e334:	bf08      	it	eq
 800e336:	2322      	moveq	r3, #34	; 0x22
 800e338:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e33c:	bf08      	it	eq
 800e33e:	6023      	streq	r3, [r4, #0]
 800e340:	e62c      	b.n	800df9c <_strtod_l+0x48c>
 800e342:	f04f 31ff 	mov.w	r1, #4294967295
 800e346:	fa01 f202 	lsl.w	r2, r1, r2
 800e34a:	ea02 0808 	and.w	r8, r2, r8
 800e34e:	e6d9      	b.n	800e104 <_strtod_l+0x5f4>
 800e350:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800e354:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e358:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800e35c:	33e2      	adds	r3, #226	; 0xe2
 800e35e:	fa00 f303 	lsl.w	r3, r0, r3
 800e362:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800e366:	e73f      	b.n	800e1e8 <_strtod_l+0x6d8>
 800e368:	2200      	movs	r2, #0
 800e36a:	2301      	movs	r3, #1
 800e36c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e370:	e73a      	b.n	800e1e8 <_strtod_l+0x6d8>
 800e372:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e374:	461a      	mov	r2, r3
 800e376:	4620      	mov	r0, r4
 800e378:	f000 ff78 	bl	800f26c <__lshift>
 800e37c:	9012      	str	r0, [sp, #72]	; 0x48
 800e37e:	2800      	cmp	r0, #0
 800e380:	f47f af64 	bne.w	800e24c <_strtod_l+0x73c>
 800e384:	e600      	b.n	800df88 <_strtod_l+0x478>
 800e386:	bf00      	nop
 800e388:	94a03595 	.word	0x94a03595
 800e38c:	3fcfffff 	.word	0x3fcfffff
 800e390:	94a03595 	.word	0x94a03595
 800e394:	3fdfffff 	.word	0x3fdfffff
 800e398:	35afe535 	.word	0x35afe535
 800e39c:	3fe00000 	.word	0x3fe00000
 800e3a0:	00000000 	.word	0x00000000
 800e3a4:	39500000 	.word	0x39500000
 800e3a8:	08011120 	.word	0x08011120
 800e3ac:	fffffc02 	.word	0xfffffc02
 800e3b0:	7ff00000 	.word	0x7ff00000
 800e3b4:	46cb      	mov	fp, r9
 800e3b6:	d15f      	bne.n	800e478 <_strtod_l+0x968>
 800e3b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3bc:	f1ba 0f00 	cmp.w	sl, #0
 800e3c0:	d02a      	beq.n	800e418 <_strtod_l+0x908>
 800e3c2:	4aa7      	ldr	r2, [pc, #668]	; (800e660 <_strtod_l+0xb50>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d12b      	bne.n	800e420 <_strtod_l+0x910>
 800e3c8:	9b04      	ldr	r3, [sp, #16]
 800e3ca:	4642      	mov	r2, r8
 800e3cc:	b1fb      	cbz	r3, 800e40e <_strtod_l+0x8fe>
 800e3ce:	4ba5      	ldr	r3, [pc, #660]	; (800e664 <_strtod_l+0xb54>)
 800e3d0:	ea09 0303 	and.w	r3, r9, r3
 800e3d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e3d8:	f04f 31ff 	mov.w	r1, #4294967295
 800e3dc:	d81a      	bhi.n	800e414 <_strtod_l+0x904>
 800e3de:	0d1b      	lsrs	r3, r3, #20
 800e3e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e3e4:	fa01 f303 	lsl.w	r3, r1, r3
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d119      	bne.n	800e420 <_strtod_l+0x910>
 800e3ec:	4b9e      	ldr	r3, [pc, #632]	; (800e668 <_strtod_l+0xb58>)
 800e3ee:	459b      	cmp	fp, r3
 800e3f0:	d102      	bne.n	800e3f8 <_strtod_l+0x8e8>
 800e3f2:	3201      	adds	r2, #1
 800e3f4:	f43f adc8 	beq.w	800df88 <_strtod_l+0x478>
 800e3f8:	4b9a      	ldr	r3, [pc, #616]	; (800e664 <_strtod_l+0xb54>)
 800e3fa:	ea0b 0303 	and.w	r3, fp, r3
 800e3fe:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e402:	f04f 0800 	mov.w	r8, #0
 800e406:	9b04      	ldr	r3, [sp, #16]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d188      	bne.n	800e31e <_strtod_l+0x80e>
 800e40c:	e5c6      	b.n	800df9c <_strtod_l+0x48c>
 800e40e:	f04f 33ff 	mov.w	r3, #4294967295
 800e412:	e7e9      	b.n	800e3e8 <_strtod_l+0x8d8>
 800e414:	460b      	mov	r3, r1
 800e416:	e7e7      	b.n	800e3e8 <_strtod_l+0x8d8>
 800e418:	ea53 0308 	orrs.w	r3, r3, r8
 800e41c:	f43f af6f 	beq.w	800e2fe <_strtod_l+0x7ee>
 800e420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e422:	b1cb      	cbz	r3, 800e458 <_strtod_l+0x948>
 800e424:	ea13 0f0b 	tst.w	r3, fp
 800e428:	d0ed      	beq.n	800e406 <_strtod_l+0x8f6>
 800e42a:	9a04      	ldr	r2, [sp, #16]
 800e42c:	4640      	mov	r0, r8
 800e42e:	4649      	mov	r1, r9
 800e430:	f1ba 0f00 	cmp.w	sl, #0
 800e434:	d014      	beq.n	800e460 <_strtod_l+0x950>
 800e436:	f7ff fb51 	bl	800dadc <sulp>
 800e43a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800e43e:	ec59 8b17 	vmov	r8, r9, d7
 800e442:	e7e0      	b.n	800e406 <_strtod_l+0x8f6>
 800e444:	4013      	ands	r3, r2
 800e446:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e44a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e44e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e452:	f04f 38ff 	mov.w	r8, #4294967295
 800e456:	e7d6      	b.n	800e406 <_strtod_l+0x8f6>
 800e458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e45a:	ea13 0f08 	tst.w	r3, r8
 800e45e:	e7e3      	b.n	800e428 <_strtod_l+0x918>
 800e460:	f7ff fb3c 	bl	800dadc <sulp>
 800e464:	ee38 0b40 	vsub.f64	d0, d8, d0
 800e468:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e470:	ec59 8b10 	vmov	r8, r9, d0
 800e474:	d1c7      	bne.n	800e406 <_strtod_l+0x8f6>
 800e476:	e5f7      	b.n	800e068 <_strtod_l+0x558>
 800e478:	4631      	mov	r1, r6
 800e47a:	4628      	mov	r0, r5
 800e47c:	f001 f8e4 	bl	800f648 <__ratio>
 800e480:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e484:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e48c:	d865      	bhi.n	800e55a <_strtod_l+0xa4a>
 800e48e:	f1ba 0f00 	cmp.w	sl, #0
 800e492:	d042      	beq.n	800e51a <_strtod_l+0xa0a>
 800e494:	4b75      	ldr	r3, [pc, #468]	; (800e66c <_strtod_l+0xb5c>)
 800e496:	2200      	movs	r2, #0
 800e498:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800e49c:	4871      	ldr	r0, [pc, #452]	; (800e664 <_strtod_l+0xb54>)
 800e49e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800e678 <_strtod_l+0xb68>
 800e4a2:	ea0b 0100 	and.w	r1, fp, r0
 800e4a6:	4561      	cmp	r1, ip
 800e4a8:	f040 808e 	bne.w	800e5c8 <_strtod_l+0xab8>
 800e4ac:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800e4b0:	ec49 8b10 	vmov	d0, r8, r9
 800e4b4:	ec43 2b1c 	vmov	d12, r2, r3
 800e4b8:	910a      	str	r1, [sp, #40]	; 0x28
 800e4ba:	f000 ffed 	bl	800f498 <__ulp>
 800e4be:	ec49 8b1e 	vmov	d14, r8, r9
 800e4c2:	4868      	ldr	r0, [pc, #416]	; (800e664 <_strtod_l+0xb54>)
 800e4c4:	eeac eb00 	vfma.f64	d14, d12, d0
 800e4c8:	ee1e 3a90 	vmov	r3, s29
 800e4cc:	4a68      	ldr	r2, [pc, #416]	; (800e670 <_strtod_l+0xb60>)
 800e4ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e4d0:	4018      	ands	r0, r3
 800e4d2:	4290      	cmp	r0, r2
 800e4d4:	ec59 8b1e 	vmov	r8, r9, d14
 800e4d8:	d94e      	bls.n	800e578 <_strtod_l+0xa68>
 800e4da:	ee18 3a90 	vmov	r3, s17
 800e4de:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d104      	bne.n	800e4f0 <_strtod_l+0x9e0>
 800e4e6:	ee18 3a10 	vmov	r3, s16
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	f43f ad4c 	beq.w	800df88 <_strtod_l+0x478>
 800e4f0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800e668 <_strtod_l+0xb58>
 800e4f4:	f04f 38ff 	mov.w	r8, #4294967295
 800e4f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	f000 fc9a 	bl	800ee34 <_Bfree>
 800e500:	4639      	mov	r1, r7
 800e502:	4620      	mov	r0, r4
 800e504:	f000 fc96 	bl	800ee34 <_Bfree>
 800e508:	4631      	mov	r1, r6
 800e50a:	4620      	mov	r0, r4
 800e50c:	f000 fc92 	bl	800ee34 <_Bfree>
 800e510:	4629      	mov	r1, r5
 800e512:	4620      	mov	r0, r4
 800e514:	f000 fc8e 	bl	800ee34 <_Bfree>
 800e518:	e619      	b.n	800e14e <_strtod_l+0x63e>
 800e51a:	f1b8 0f00 	cmp.w	r8, #0
 800e51e:	d112      	bne.n	800e546 <_strtod_l+0xa36>
 800e520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e524:	b9b3      	cbnz	r3, 800e554 <_strtod_l+0xa44>
 800e526:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e52a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e532:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800e536:	bf58      	it	pl
 800e538:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800e53c:	eeb1 7b4d 	vneg.f64	d7, d13
 800e540:	ec53 2b17 	vmov	r2, r3, d7
 800e544:	e7aa      	b.n	800e49c <_strtod_l+0x98c>
 800e546:	f1b8 0f01 	cmp.w	r8, #1
 800e54a:	d103      	bne.n	800e554 <_strtod_l+0xa44>
 800e54c:	f1b9 0f00 	cmp.w	r9, #0
 800e550:	f43f ad8a 	beq.w	800e068 <_strtod_l+0x558>
 800e554:	4b47      	ldr	r3, [pc, #284]	; (800e674 <_strtod_l+0xb64>)
 800e556:	2200      	movs	r2, #0
 800e558:	e79e      	b.n	800e498 <_strtod_l+0x988>
 800e55a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800e55e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800e562:	f1ba 0f00 	cmp.w	sl, #0
 800e566:	d104      	bne.n	800e572 <_strtod_l+0xa62>
 800e568:	eeb1 7b4d 	vneg.f64	d7, d13
 800e56c:	ec53 2b17 	vmov	r2, r3, d7
 800e570:	e794      	b.n	800e49c <_strtod_l+0x98c>
 800e572:	eeb0 7b4d 	vmov.f64	d7, d13
 800e576:	e7f9      	b.n	800e56c <_strtod_l+0xa5c>
 800e578:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e57c:	9b04      	ldr	r3, [sp, #16]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1ba      	bne.n	800e4f8 <_strtod_l+0x9e8>
 800e582:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e586:	0d1b      	lsrs	r3, r3, #20
 800e588:	051b      	lsls	r3, r3, #20
 800e58a:	4299      	cmp	r1, r3
 800e58c:	d1b4      	bne.n	800e4f8 <_strtod_l+0x9e8>
 800e58e:	ec51 0b1d 	vmov	r0, r1, d13
 800e592:	f7f2 f8d1 	bl	8000738 <__aeabi_d2lz>
 800e596:	f7f2 f889 	bl	80006ac <__aeabi_l2d>
 800e59a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e59e:	ec41 0b17 	vmov	d7, r0, r1
 800e5a2:	ea43 0308 	orr.w	r3, r3, r8
 800e5a6:	ea53 030a 	orrs.w	r3, r3, sl
 800e5aa:	ee3d db47 	vsub.f64	d13, d13, d7
 800e5ae:	d03c      	beq.n	800e62a <_strtod_l+0xb1a>
 800e5b0:	eeb4 dbca 	vcmpe.f64	d13, d10
 800e5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b8:	f53f acf0 	bmi.w	800df9c <_strtod_l+0x48c>
 800e5bc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800e5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c4:	dd98      	ble.n	800e4f8 <_strtod_l+0x9e8>
 800e5c6:	e4e9      	b.n	800df9c <_strtod_l+0x48c>
 800e5c8:	9804      	ldr	r0, [sp, #16]
 800e5ca:	b1f0      	cbz	r0, 800e60a <_strtod_l+0xafa>
 800e5cc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800e5d0:	d81b      	bhi.n	800e60a <_strtod_l+0xafa>
 800e5d2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e658 <_strtod_l+0xb48>
 800e5d6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800e5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5de:	d811      	bhi.n	800e604 <_strtod_l+0xaf4>
 800e5e0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800e5e4:	ee1d 3a10 	vmov	r3, s26
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	bf38      	it	cc
 800e5ec:	2301      	movcc	r3, #1
 800e5ee:	ee0d 3a10 	vmov	s26, r3
 800e5f2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800e5f6:	f1ba 0f00 	cmp.w	sl, #0
 800e5fa:	d113      	bne.n	800e624 <_strtod_l+0xb14>
 800e5fc:	eeb1 7b4d 	vneg.f64	d7, d13
 800e600:	ec53 2b17 	vmov	r2, r3, d7
 800e604:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800e608:	1a43      	subs	r3, r0, r1
 800e60a:	eeb0 0b48 	vmov.f64	d0, d8
 800e60e:	ec43 2b1c 	vmov	d12, r2, r3
 800e612:	910a      	str	r1, [sp, #40]	; 0x28
 800e614:	f000 ff40 	bl	800f498 <__ulp>
 800e618:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e61a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800e61e:	ec59 8b18 	vmov	r8, r9, d8
 800e622:	e7ab      	b.n	800e57c <_strtod_l+0xa6c>
 800e624:	eeb0 7b4d 	vmov.f64	d7, d13
 800e628:	e7ea      	b.n	800e600 <_strtod_l+0xaf0>
 800e62a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800e62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e632:	f57f af61 	bpl.w	800e4f8 <_strtod_l+0x9e8>
 800e636:	e4b1      	b.n	800df9c <_strtod_l+0x48c>
 800e638:	2300      	movs	r3, #0
 800e63a:	9308      	str	r3, [sp, #32]
 800e63c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e63e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e640:	6013      	str	r3, [r2, #0]
 800e642:	f7ff baad 	b.w	800dba0 <_strtod_l+0x90>
 800e646:	2a65      	cmp	r2, #101	; 0x65
 800e648:	f43f ab9f 	beq.w	800dd8a <_strtod_l+0x27a>
 800e64c:	2a45      	cmp	r2, #69	; 0x45
 800e64e:	f43f ab9c 	beq.w	800dd8a <_strtod_l+0x27a>
 800e652:	2101      	movs	r1, #1
 800e654:	f7ff bbd4 	b.w	800de00 <_strtod_l+0x2f0>
 800e658:	ffc00000 	.word	0xffc00000
 800e65c:	41dfffff 	.word	0x41dfffff
 800e660:	000fffff 	.word	0x000fffff
 800e664:	7ff00000 	.word	0x7ff00000
 800e668:	7fefffff 	.word	0x7fefffff
 800e66c:	3ff00000 	.word	0x3ff00000
 800e670:	7c9fffff 	.word	0x7c9fffff
 800e674:	bff00000 	.word	0xbff00000
 800e678:	7fe00000 	.word	0x7fe00000

0800e67c <strtod>:
 800e67c:	460a      	mov	r2, r1
 800e67e:	4601      	mov	r1, r0
 800e680:	4802      	ldr	r0, [pc, #8]	; (800e68c <strtod+0x10>)
 800e682:	4b03      	ldr	r3, [pc, #12]	; (800e690 <strtod+0x14>)
 800e684:	6800      	ldr	r0, [r0, #0]
 800e686:	f7ff ba43 	b.w	800db10 <_strtod_l>
 800e68a:	bf00      	nop
 800e68c:	2400007c 	.word	0x2400007c
 800e690:	240000e4 	.word	0x240000e4

0800e694 <rshift>:
 800e694:	6903      	ldr	r3, [r0, #16]
 800e696:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e69a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e69e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e6a2:	f100 0414 	add.w	r4, r0, #20
 800e6a6:	dd45      	ble.n	800e734 <rshift+0xa0>
 800e6a8:	f011 011f 	ands.w	r1, r1, #31
 800e6ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e6b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e6b4:	d10c      	bne.n	800e6d0 <rshift+0x3c>
 800e6b6:	f100 0710 	add.w	r7, r0, #16
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	42b1      	cmp	r1, r6
 800e6be:	d334      	bcc.n	800e72a <rshift+0x96>
 800e6c0:	1a9b      	subs	r3, r3, r2
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	1eea      	subs	r2, r5, #3
 800e6c6:	4296      	cmp	r6, r2
 800e6c8:	bf38      	it	cc
 800e6ca:	2300      	movcc	r3, #0
 800e6cc:	4423      	add	r3, r4
 800e6ce:	e015      	b.n	800e6fc <rshift+0x68>
 800e6d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e6d4:	f1c1 0820 	rsb	r8, r1, #32
 800e6d8:	40cf      	lsrs	r7, r1
 800e6da:	f105 0e04 	add.w	lr, r5, #4
 800e6de:	46a1      	mov	r9, r4
 800e6e0:	4576      	cmp	r6, lr
 800e6e2:	46f4      	mov	ip, lr
 800e6e4:	d815      	bhi.n	800e712 <rshift+0x7e>
 800e6e6:	1a9a      	subs	r2, r3, r2
 800e6e8:	0092      	lsls	r2, r2, #2
 800e6ea:	3a04      	subs	r2, #4
 800e6ec:	3501      	adds	r5, #1
 800e6ee:	42ae      	cmp	r6, r5
 800e6f0:	bf38      	it	cc
 800e6f2:	2200      	movcc	r2, #0
 800e6f4:	18a3      	adds	r3, r4, r2
 800e6f6:	50a7      	str	r7, [r4, r2]
 800e6f8:	b107      	cbz	r7, 800e6fc <rshift+0x68>
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	1b1a      	subs	r2, r3, r4
 800e6fe:	42a3      	cmp	r3, r4
 800e700:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e704:	bf08      	it	eq
 800e706:	2300      	moveq	r3, #0
 800e708:	6102      	str	r2, [r0, #16]
 800e70a:	bf08      	it	eq
 800e70c:	6143      	streq	r3, [r0, #20]
 800e70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e712:	f8dc c000 	ldr.w	ip, [ip]
 800e716:	fa0c fc08 	lsl.w	ip, ip, r8
 800e71a:	ea4c 0707 	orr.w	r7, ip, r7
 800e71e:	f849 7b04 	str.w	r7, [r9], #4
 800e722:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e726:	40cf      	lsrs	r7, r1
 800e728:	e7da      	b.n	800e6e0 <rshift+0x4c>
 800e72a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e72e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e732:	e7c3      	b.n	800e6bc <rshift+0x28>
 800e734:	4623      	mov	r3, r4
 800e736:	e7e1      	b.n	800e6fc <rshift+0x68>

0800e738 <__hexdig_fun>:
 800e738:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e73c:	2b09      	cmp	r3, #9
 800e73e:	d802      	bhi.n	800e746 <__hexdig_fun+0xe>
 800e740:	3820      	subs	r0, #32
 800e742:	b2c0      	uxtb	r0, r0
 800e744:	4770      	bx	lr
 800e746:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e74a:	2b05      	cmp	r3, #5
 800e74c:	d801      	bhi.n	800e752 <__hexdig_fun+0x1a>
 800e74e:	3847      	subs	r0, #71	; 0x47
 800e750:	e7f7      	b.n	800e742 <__hexdig_fun+0xa>
 800e752:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e756:	2b05      	cmp	r3, #5
 800e758:	d801      	bhi.n	800e75e <__hexdig_fun+0x26>
 800e75a:	3827      	subs	r0, #39	; 0x27
 800e75c:	e7f1      	b.n	800e742 <__hexdig_fun+0xa>
 800e75e:	2000      	movs	r0, #0
 800e760:	4770      	bx	lr
	...

0800e764 <__gethex>:
 800e764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e768:	ed2d 8b02 	vpush	{d8}
 800e76c:	b089      	sub	sp, #36	; 0x24
 800e76e:	ee08 0a10 	vmov	s16, r0
 800e772:	9304      	str	r3, [sp, #16]
 800e774:	4bb4      	ldr	r3, [pc, #720]	; (800ea48 <__gethex+0x2e4>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	9301      	str	r3, [sp, #4]
 800e77a:	4618      	mov	r0, r3
 800e77c:	468b      	mov	fp, r1
 800e77e:	4690      	mov	r8, r2
 800e780:	f7f1 fdae 	bl	80002e0 <strlen>
 800e784:	9b01      	ldr	r3, [sp, #4]
 800e786:	f8db 2000 	ldr.w	r2, [fp]
 800e78a:	4403      	add	r3, r0
 800e78c:	4682      	mov	sl, r0
 800e78e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e792:	9305      	str	r3, [sp, #20]
 800e794:	1c93      	adds	r3, r2, #2
 800e796:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e79a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e79e:	32fe      	adds	r2, #254	; 0xfe
 800e7a0:	18d1      	adds	r1, r2, r3
 800e7a2:	461f      	mov	r7, r3
 800e7a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e7a8:	9100      	str	r1, [sp, #0]
 800e7aa:	2830      	cmp	r0, #48	; 0x30
 800e7ac:	d0f8      	beq.n	800e7a0 <__gethex+0x3c>
 800e7ae:	f7ff ffc3 	bl	800e738 <__hexdig_fun>
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d13a      	bne.n	800e82e <__gethex+0xca>
 800e7b8:	9901      	ldr	r1, [sp, #4]
 800e7ba:	4652      	mov	r2, sl
 800e7bc:	4638      	mov	r0, r7
 800e7be:	f001 f87b 	bl	800f8b8 <strncmp>
 800e7c2:	4605      	mov	r5, r0
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d168      	bne.n	800e89a <__gethex+0x136>
 800e7c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e7cc:	eb07 060a 	add.w	r6, r7, sl
 800e7d0:	f7ff ffb2 	bl	800e738 <__hexdig_fun>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d062      	beq.n	800e89e <__gethex+0x13a>
 800e7d8:	4633      	mov	r3, r6
 800e7da:	7818      	ldrb	r0, [r3, #0]
 800e7dc:	2830      	cmp	r0, #48	; 0x30
 800e7de:	461f      	mov	r7, r3
 800e7e0:	f103 0301 	add.w	r3, r3, #1
 800e7e4:	d0f9      	beq.n	800e7da <__gethex+0x76>
 800e7e6:	f7ff ffa7 	bl	800e738 <__hexdig_fun>
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	fab0 f480 	clz	r4, r0
 800e7f0:	0964      	lsrs	r4, r4, #5
 800e7f2:	4635      	mov	r5, r6
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	463a      	mov	r2, r7
 800e7f8:	4616      	mov	r6, r2
 800e7fa:	3201      	adds	r2, #1
 800e7fc:	7830      	ldrb	r0, [r6, #0]
 800e7fe:	f7ff ff9b 	bl	800e738 <__hexdig_fun>
 800e802:	2800      	cmp	r0, #0
 800e804:	d1f8      	bne.n	800e7f8 <__gethex+0x94>
 800e806:	9901      	ldr	r1, [sp, #4]
 800e808:	4652      	mov	r2, sl
 800e80a:	4630      	mov	r0, r6
 800e80c:	f001 f854 	bl	800f8b8 <strncmp>
 800e810:	b980      	cbnz	r0, 800e834 <__gethex+0xd0>
 800e812:	b94d      	cbnz	r5, 800e828 <__gethex+0xc4>
 800e814:	eb06 050a 	add.w	r5, r6, sl
 800e818:	462a      	mov	r2, r5
 800e81a:	4616      	mov	r6, r2
 800e81c:	3201      	adds	r2, #1
 800e81e:	7830      	ldrb	r0, [r6, #0]
 800e820:	f7ff ff8a 	bl	800e738 <__hexdig_fun>
 800e824:	2800      	cmp	r0, #0
 800e826:	d1f8      	bne.n	800e81a <__gethex+0xb6>
 800e828:	1bad      	subs	r5, r5, r6
 800e82a:	00ad      	lsls	r5, r5, #2
 800e82c:	e004      	b.n	800e838 <__gethex+0xd4>
 800e82e:	2400      	movs	r4, #0
 800e830:	4625      	mov	r5, r4
 800e832:	e7e0      	b.n	800e7f6 <__gethex+0x92>
 800e834:	2d00      	cmp	r5, #0
 800e836:	d1f7      	bne.n	800e828 <__gethex+0xc4>
 800e838:	7833      	ldrb	r3, [r6, #0]
 800e83a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e83e:	2b50      	cmp	r3, #80	; 0x50
 800e840:	d13b      	bne.n	800e8ba <__gethex+0x156>
 800e842:	7873      	ldrb	r3, [r6, #1]
 800e844:	2b2b      	cmp	r3, #43	; 0x2b
 800e846:	d02c      	beq.n	800e8a2 <__gethex+0x13e>
 800e848:	2b2d      	cmp	r3, #45	; 0x2d
 800e84a:	d02e      	beq.n	800e8aa <__gethex+0x146>
 800e84c:	1c71      	adds	r1, r6, #1
 800e84e:	f04f 0900 	mov.w	r9, #0
 800e852:	7808      	ldrb	r0, [r1, #0]
 800e854:	f7ff ff70 	bl	800e738 <__hexdig_fun>
 800e858:	1e43      	subs	r3, r0, #1
 800e85a:	b2db      	uxtb	r3, r3
 800e85c:	2b18      	cmp	r3, #24
 800e85e:	d82c      	bhi.n	800e8ba <__gethex+0x156>
 800e860:	f1a0 0210 	sub.w	r2, r0, #16
 800e864:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e868:	f7ff ff66 	bl	800e738 <__hexdig_fun>
 800e86c:	1e43      	subs	r3, r0, #1
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	2b18      	cmp	r3, #24
 800e872:	d91d      	bls.n	800e8b0 <__gethex+0x14c>
 800e874:	f1b9 0f00 	cmp.w	r9, #0
 800e878:	d000      	beq.n	800e87c <__gethex+0x118>
 800e87a:	4252      	negs	r2, r2
 800e87c:	4415      	add	r5, r2
 800e87e:	f8cb 1000 	str.w	r1, [fp]
 800e882:	b1e4      	cbz	r4, 800e8be <__gethex+0x15a>
 800e884:	9b00      	ldr	r3, [sp, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	bf14      	ite	ne
 800e88a:	2700      	movne	r7, #0
 800e88c:	2706      	moveq	r7, #6
 800e88e:	4638      	mov	r0, r7
 800e890:	b009      	add	sp, #36	; 0x24
 800e892:	ecbd 8b02 	vpop	{d8}
 800e896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89a:	463e      	mov	r6, r7
 800e89c:	4625      	mov	r5, r4
 800e89e:	2401      	movs	r4, #1
 800e8a0:	e7ca      	b.n	800e838 <__gethex+0xd4>
 800e8a2:	f04f 0900 	mov.w	r9, #0
 800e8a6:	1cb1      	adds	r1, r6, #2
 800e8a8:	e7d3      	b.n	800e852 <__gethex+0xee>
 800e8aa:	f04f 0901 	mov.w	r9, #1
 800e8ae:	e7fa      	b.n	800e8a6 <__gethex+0x142>
 800e8b0:	230a      	movs	r3, #10
 800e8b2:	fb03 0202 	mla	r2, r3, r2, r0
 800e8b6:	3a10      	subs	r2, #16
 800e8b8:	e7d4      	b.n	800e864 <__gethex+0x100>
 800e8ba:	4631      	mov	r1, r6
 800e8bc:	e7df      	b.n	800e87e <__gethex+0x11a>
 800e8be:	1bf3      	subs	r3, r6, r7
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	4621      	mov	r1, r4
 800e8c4:	2b07      	cmp	r3, #7
 800e8c6:	dc0b      	bgt.n	800e8e0 <__gethex+0x17c>
 800e8c8:	ee18 0a10 	vmov	r0, s16
 800e8cc:	f000 fa72 	bl	800edb4 <_Balloc>
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	b940      	cbnz	r0, 800e8e6 <__gethex+0x182>
 800e8d4:	4b5d      	ldr	r3, [pc, #372]	; (800ea4c <__gethex+0x2e8>)
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	21de      	movs	r1, #222	; 0xde
 800e8da:	485d      	ldr	r0, [pc, #372]	; (800ea50 <__gethex+0x2ec>)
 800e8dc:	f001 f80e 	bl	800f8fc <__assert_func>
 800e8e0:	3101      	adds	r1, #1
 800e8e2:	105b      	asrs	r3, r3, #1
 800e8e4:	e7ee      	b.n	800e8c4 <__gethex+0x160>
 800e8e6:	f100 0914 	add.w	r9, r0, #20
 800e8ea:	f04f 0b00 	mov.w	fp, #0
 800e8ee:	f1ca 0301 	rsb	r3, sl, #1
 800e8f2:	f8cd 9008 	str.w	r9, [sp, #8]
 800e8f6:	f8cd b000 	str.w	fp, [sp]
 800e8fa:	9306      	str	r3, [sp, #24]
 800e8fc:	42b7      	cmp	r7, r6
 800e8fe:	d340      	bcc.n	800e982 <__gethex+0x21e>
 800e900:	9802      	ldr	r0, [sp, #8]
 800e902:	9b00      	ldr	r3, [sp, #0]
 800e904:	f840 3b04 	str.w	r3, [r0], #4
 800e908:	eba0 0009 	sub.w	r0, r0, r9
 800e90c:	1080      	asrs	r0, r0, #2
 800e90e:	0146      	lsls	r6, r0, #5
 800e910:	6120      	str	r0, [r4, #16]
 800e912:	4618      	mov	r0, r3
 800e914:	f000 fb40 	bl	800ef98 <__hi0bits>
 800e918:	1a30      	subs	r0, r6, r0
 800e91a:	f8d8 6000 	ldr.w	r6, [r8]
 800e91e:	42b0      	cmp	r0, r6
 800e920:	dd63      	ble.n	800e9ea <__gethex+0x286>
 800e922:	1b87      	subs	r7, r0, r6
 800e924:	4639      	mov	r1, r7
 800e926:	4620      	mov	r0, r4
 800e928:	f000 fee1 	bl	800f6ee <__any_on>
 800e92c:	4682      	mov	sl, r0
 800e92e:	b1a8      	cbz	r0, 800e95c <__gethex+0x1f8>
 800e930:	1e7b      	subs	r3, r7, #1
 800e932:	1159      	asrs	r1, r3, #5
 800e934:	f003 021f 	and.w	r2, r3, #31
 800e938:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e93c:	f04f 0a01 	mov.w	sl, #1
 800e940:	fa0a f202 	lsl.w	r2, sl, r2
 800e944:	420a      	tst	r2, r1
 800e946:	d009      	beq.n	800e95c <__gethex+0x1f8>
 800e948:	4553      	cmp	r3, sl
 800e94a:	dd05      	ble.n	800e958 <__gethex+0x1f4>
 800e94c:	1eb9      	subs	r1, r7, #2
 800e94e:	4620      	mov	r0, r4
 800e950:	f000 fecd 	bl	800f6ee <__any_on>
 800e954:	2800      	cmp	r0, #0
 800e956:	d145      	bne.n	800e9e4 <__gethex+0x280>
 800e958:	f04f 0a02 	mov.w	sl, #2
 800e95c:	4639      	mov	r1, r7
 800e95e:	4620      	mov	r0, r4
 800e960:	f7ff fe98 	bl	800e694 <rshift>
 800e964:	443d      	add	r5, r7
 800e966:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e96a:	42ab      	cmp	r3, r5
 800e96c:	da4c      	bge.n	800ea08 <__gethex+0x2a4>
 800e96e:	ee18 0a10 	vmov	r0, s16
 800e972:	4621      	mov	r1, r4
 800e974:	f000 fa5e 	bl	800ee34 <_Bfree>
 800e978:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e97a:	2300      	movs	r3, #0
 800e97c:	6013      	str	r3, [r2, #0]
 800e97e:	27a3      	movs	r7, #163	; 0xa3
 800e980:	e785      	b.n	800e88e <__gethex+0x12a>
 800e982:	1e73      	subs	r3, r6, #1
 800e984:	9a05      	ldr	r2, [sp, #20]
 800e986:	9303      	str	r3, [sp, #12]
 800e988:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d019      	beq.n	800e9c4 <__gethex+0x260>
 800e990:	f1bb 0f20 	cmp.w	fp, #32
 800e994:	d107      	bne.n	800e9a6 <__gethex+0x242>
 800e996:	9b02      	ldr	r3, [sp, #8]
 800e998:	9a00      	ldr	r2, [sp, #0]
 800e99a:	f843 2b04 	str.w	r2, [r3], #4
 800e99e:	9302      	str	r3, [sp, #8]
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	9300      	str	r3, [sp, #0]
 800e9a4:	469b      	mov	fp, r3
 800e9a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e9aa:	f7ff fec5 	bl	800e738 <__hexdig_fun>
 800e9ae:	9b00      	ldr	r3, [sp, #0]
 800e9b0:	f000 000f 	and.w	r0, r0, #15
 800e9b4:	fa00 f00b 	lsl.w	r0, r0, fp
 800e9b8:	4303      	orrs	r3, r0
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	f10b 0b04 	add.w	fp, fp, #4
 800e9c0:	9b03      	ldr	r3, [sp, #12]
 800e9c2:	e00d      	b.n	800e9e0 <__gethex+0x27c>
 800e9c4:	9b03      	ldr	r3, [sp, #12]
 800e9c6:	9a06      	ldr	r2, [sp, #24]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	42bb      	cmp	r3, r7
 800e9cc:	d3e0      	bcc.n	800e990 <__gethex+0x22c>
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	9901      	ldr	r1, [sp, #4]
 800e9d2:	9307      	str	r3, [sp, #28]
 800e9d4:	4652      	mov	r2, sl
 800e9d6:	f000 ff6f 	bl	800f8b8 <strncmp>
 800e9da:	9b07      	ldr	r3, [sp, #28]
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	d1d7      	bne.n	800e990 <__gethex+0x22c>
 800e9e0:	461e      	mov	r6, r3
 800e9e2:	e78b      	b.n	800e8fc <__gethex+0x198>
 800e9e4:	f04f 0a03 	mov.w	sl, #3
 800e9e8:	e7b8      	b.n	800e95c <__gethex+0x1f8>
 800e9ea:	da0a      	bge.n	800ea02 <__gethex+0x29e>
 800e9ec:	1a37      	subs	r7, r6, r0
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	ee18 0a10 	vmov	r0, s16
 800e9f4:	463a      	mov	r2, r7
 800e9f6:	f000 fc39 	bl	800f26c <__lshift>
 800e9fa:	1bed      	subs	r5, r5, r7
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	f100 0914 	add.w	r9, r0, #20
 800ea02:	f04f 0a00 	mov.w	sl, #0
 800ea06:	e7ae      	b.n	800e966 <__gethex+0x202>
 800ea08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ea0c:	42a8      	cmp	r0, r5
 800ea0e:	dd72      	ble.n	800eaf6 <__gethex+0x392>
 800ea10:	1b45      	subs	r5, r0, r5
 800ea12:	42ae      	cmp	r6, r5
 800ea14:	dc36      	bgt.n	800ea84 <__gethex+0x320>
 800ea16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea1a:	2b02      	cmp	r3, #2
 800ea1c:	d02a      	beq.n	800ea74 <__gethex+0x310>
 800ea1e:	2b03      	cmp	r3, #3
 800ea20:	d02c      	beq.n	800ea7c <__gethex+0x318>
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d11c      	bne.n	800ea60 <__gethex+0x2fc>
 800ea26:	42ae      	cmp	r6, r5
 800ea28:	d11a      	bne.n	800ea60 <__gethex+0x2fc>
 800ea2a:	2e01      	cmp	r6, #1
 800ea2c:	d112      	bne.n	800ea54 <__gethex+0x2f0>
 800ea2e:	9a04      	ldr	r2, [sp, #16]
 800ea30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ea34:	6013      	str	r3, [r2, #0]
 800ea36:	2301      	movs	r3, #1
 800ea38:	6123      	str	r3, [r4, #16]
 800ea3a:	f8c9 3000 	str.w	r3, [r9]
 800ea3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea40:	2762      	movs	r7, #98	; 0x62
 800ea42:	601c      	str	r4, [r3, #0]
 800ea44:	e723      	b.n	800e88e <__gethex+0x12a>
 800ea46:	bf00      	nop
 800ea48:	080111c0 	.word	0x080111c0
 800ea4c:	08011148 	.word	0x08011148
 800ea50:	08011159 	.word	0x08011159
 800ea54:	1e71      	subs	r1, r6, #1
 800ea56:	4620      	mov	r0, r4
 800ea58:	f000 fe49 	bl	800f6ee <__any_on>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d1e6      	bne.n	800ea2e <__gethex+0x2ca>
 800ea60:	ee18 0a10 	vmov	r0, s16
 800ea64:	4621      	mov	r1, r4
 800ea66:	f000 f9e5 	bl	800ee34 <_Bfree>
 800ea6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	6013      	str	r3, [r2, #0]
 800ea70:	2750      	movs	r7, #80	; 0x50
 800ea72:	e70c      	b.n	800e88e <__gethex+0x12a>
 800ea74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1f2      	bne.n	800ea60 <__gethex+0x2fc>
 800ea7a:	e7d8      	b.n	800ea2e <__gethex+0x2ca>
 800ea7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d1d5      	bne.n	800ea2e <__gethex+0x2ca>
 800ea82:	e7ed      	b.n	800ea60 <__gethex+0x2fc>
 800ea84:	1e6f      	subs	r7, r5, #1
 800ea86:	f1ba 0f00 	cmp.w	sl, #0
 800ea8a:	d131      	bne.n	800eaf0 <__gethex+0x38c>
 800ea8c:	b127      	cbz	r7, 800ea98 <__gethex+0x334>
 800ea8e:	4639      	mov	r1, r7
 800ea90:	4620      	mov	r0, r4
 800ea92:	f000 fe2c 	bl	800f6ee <__any_on>
 800ea96:	4682      	mov	sl, r0
 800ea98:	117b      	asrs	r3, r7, #5
 800ea9a:	2101      	movs	r1, #1
 800ea9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800eaa0:	f007 071f 	and.w	r7, r7, #31
 800eaa4:	fa01 f707 	lsl.w	r7, r1, r7
 800eaa8:	421f      	tst	r7, r3
 800eaaa:	4629      	mov	r1, r5
 800eaac:	4620      	mov	r0, r4
 800eaae:	bf18      	it	ne
 800eab0:	f04a 0a02 	orrne.w	sl, sl, #2
 800eab4:	1b76      	subs	r6, r6, r5
 800eab6:	f7ff fded 	bl	800e694 <rshift>
 800eaba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eabe:	2702      	movs	r7, #2
 800eac0:	f1ba 0f00 	cmp.w	sl, #0
 800eac4:	d048      	beq.n	800eb58 <__gethex+0x3f4>
 800eac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eaca:	2b02      	cmp	r3, #2
 800eacc:	d015      	beq.n	800eafa <__gethex+0x396>
 800eace:	2b03      	cmp	r3, #3
 800ead0:	d017      	beq.n	800eb02 <__gethex+0x39e>
 800ead2:	2b01      	cmp	r3, #1
 800ead4:	d109      	bne.n	800eaea <__gethex+0x386>
 800ead6:	f01a 0f02 	tst.w	sl, #2
 800eada:	d006      	beq.n	800eaea <__gethex+0x386>
 800eadc:	f8d9 0000 	ldr.w	r0, [r9]
 800eae0:	ea4a 0a00 	orr.w	sl, sl, r0
 800eae4:	f01a 0f01 	tst.w	sl, #1
 800eae8:	d10e      	bne.n	800eb08 <__gethex+0x3a4>
 800eaea:	f047 0710 	orr.w	r7, r7, #16
 800eaee:	e033      	b.n	800eb58 <__gethex+0x3f4>
 800eaf0:	f04f 0a01 	mov.w	sl, #1
 800eaf4:	e7d0      	b.n	800ea98 <__gethex+0x334>
 800eaf6:	2701      	movs	r7, #1
 800eaf8:	e7e2      	b.n	800eac0 <__gethex+0x35c>
 800eafa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eafc:	f1c3 0301 	rsb	r3, r3, #1
 800eb00:	9315      	str	r3, [sp, #84]	; 0x54
 800eb02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d0f0      	beq.n	800eaea <__gethex+0x386>
 800eb08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eb0c:	f104 0314 	add.w	r3, r4, #20
 800eb10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eb14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eb18:	f04f 0c00 	mov.w	ip, #0
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb22:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eb26:	d01c      	beq.n	800eb62 <__gethex+0x3fe>
 800eb28:	3201      	adds	r2, #1
 800eb2a:	6002      	str	r2, [r0, #0]
 800eb2c:	2f02      	cmp	r7, #2
 800eb2e:	f104 0314 	add.w	r3, r4, #20
 800eb32:	d13f      	bne.n	800ebb4 <__gethex+0x450>
 800eb34:	f8d8 2000 	ldr.w	r2, [r8]
 800eb38:	3a01      	subs	r2, #1
 800eb3a:	42b2      	cmp	r2, r6
 800eb3c:	d10a      	bne.n	800eb54 <__gethex+0x3f0>
 800eb3e:	1171      	asrs	r1, r6, #5
 800eb40:	2201      	movs	r2, #1
 800eb42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb46:	f006 061f 	and.w	r6, r6, #31
 800eb4a:	fa02 f606 	lsl.w	r6, r2, r6
 800eb4e:	421e      	tst	r6, r3
 800eb50:	bf18      	it	ne
 800eb52:	4617      	movne	r7, r2
 800eb54:	f047 0720 	orr.w	r7, r7, #32
 800eb58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb5a:	601c      	str	r4, [r3, #0]
 800eb5c:	9b04      	ldr	r3, [sp, #16]
 800eb5e:	601d      	str	r5, [r3, #0]
 800eb60:	e695      	b.n	800e88e <__gethex+0x12a>
 800eb62:	4299      	cmp	r1, r3
 800eb64:	f843 cc04 	str.w	ip, [r3, #-4]
 800eb68:	d8d8      	bhi.n	800eb1c <__gethex+0x3b8>
 800eb6a:	68a3      	ldr	r3, [r4, #8]
 800eb6c:	459b      	cmp	fp, r3
 800eb6e:	db19      	blt.n	800eba4 <__gethex+0x440>
 800eb70:	6861      	ldr	r1, [r4, #4]
 800eb72:	ee18 0a10 	vmov	r0, s16
 800eb76:	3101      	adds	r1, #1
 800eb78:	f000 f91c 	bl	800edb4 <_Balloc>
 800eb7c:	4681      	mov	r9, r0
 800eb7e:	b918      	cbnz	r0, 800eb88 <__gethex+0x424>
 800eb80:	4b1a      	ldr	r3, [pc, #104]	; (800ebec <__gethex+0x488>)
 800eb82:	4602      	mov	r2, r0
 800eb84:	2184      	movs	r1, #132	; 0x84
 800eb86:	e6a8      	b.n	800e8da <__gethex+0x176>
 800eb88:	6922      	ldr	r2, [r4, #16]
 800eb8a:	3202      	adds	r2, #2
 800eb8c:	f104 010c 	add.w	r1, r4, #12
 800eb90:	0092      	lsls	r2, r2, #2
 800eb92:	300c      	adds	r0, #12
 800eb94:	f000 f900 	bl	800ed98 <memcpy>
 800eb98:	4621      	mov	r1, r4
 800eb9a:	ee18 0a10 	vmov	r0, s16
 800eb9e:	f000 f949 	bl	800ee34 <_Bfree>
 800eba2:	464c      	mov	r4, r9
 800eba4:	6923      	ldr	r3, [r4, #16]
 800eba6:	1c5a      	adds	r2, r3, #1
 800eba8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ebac:	6122      	str	r2, [r4, #16]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	615a      	str	r2, [r3, #20]
 800ebb2:	e7bb      	b.n	800eb2c <__gethex+0x3c8>
 800ebb4:	6922      	ldr	r2, [r4, #16]
 800ebb6:	455a      	cmp	r2, fp
 800ebb8:	dd0b      	ble.n	800ebd2 <__gethex+0x46e>
 800ebba:	2101      	movs	r1, #1
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f7ff fd69 	bl	800e694 <rshift>
 800ebc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebc6:	3501      	adds	r5, #1
 800ebc8:	42ab      	cmp	r3, r5
 800ebca:	f6ff aed0 	blt.w	800e96e <__gethex+0x20a>
 800ebce:	2701      	movs	r7, #1
 800ebd0:	e7c0      	b.n	800eb54 <__gethex+0x3f0>
 800ebd2:	f016 061f 	ands.w	r6, r6, #31
 800ebd6:	d0fa      	beq.n	800ebce <__gethex+0x46a>
 800ebd8:	4453      	add	r3, sl
 800ebda:	f1c6 0620 	rsb	r6, r6, #32
 800ebde:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ebe2:	f000 f9d9 	bl	800ef98 <__hi0bits>
 800ebe6:	42b0      	cmp	r0, r6
 800ebe8:	dbe7      	blt.n	800ebba <__gethex+0x456>
 800ebea:	e7f0      	b.n	800ebce <__gethex+0x46a>
 800ebec:	08011148 	.word	0x08011148

0800ebf0 <L_shift>:
 800ebf0:	f1c2 0208 	rsb	r2, r2, #8
 800ebf4:	0092      	lsls	r2, r2, #2
 800ebf6:	b570      	push	{r4, r5, r6, lr}
 800ebf8:	f1c2 0620 	rsb	r6, r2, #32
 800ebfc:	6843      	ldr	r3, [r0, #4]
 800ebfe:	6804      	ldr	r4, [r0, #0]
 800ec00:	fa03 f506 	lsl.w	r5, r3, r6
 800ec04:	432c      	orrs	r4, r5
 800ec06:	40d3      	lsrs	r3, r2
 800ec08:	6004      	str	r4, [r0, #0]
 800ec0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec0e:	4288      	cmp	r0, r1
 800ec10:	d3f4      	bcc.n	800ebfc <L_shift+0xc>
 800ec12:	bd70      	pop	{r4, r5, r6, pc}

0800ec14 <__match>:
 800ec14:	b530      	push	{r4, r5, lr}
 800ec16:	6803      	ldr	r3, [r0, #0]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec1e:	b914      	cbnz	r4, 800ec26 <__match+0x12>
 800ec20:	6003      	str	r3, [r0, #0]
 800ec22:	2001      	movs	r0, #1
 800ec24:	bd30      	pop	{r4, r5, pc}
 800ec26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ec2e:	2d19      	cmp	r5, #25
 800ec30:	bf98      	it	ls
 800ec32:	3220      	addls	r2, #32
 800ec34:	42a2      	cmp	r2, r4
 800ec36:	d0f0      	beq.n	800ec1a <__match+0x6>
 800ec38:	2000      	movs	r0, #0
 800ec3a:	e7f3      	b.n	800ec24 <__match+0x10>

0800ec3c <__hexnan>:
 800ec3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec40:	680b      	ldr	r3, [r1, #0]
 800ec42:	115e      	asrs	r6, r3, #5
 800ec44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ec48:	f013 031f 	ands.w	r3, r3, #31
 800ec4c:	b087      	sub	sp, #28
 800ec4e:	bf18      	it	ne
 800ec50:	3604      	addne	r6, #4
 800ec52:	2500      	movs	r5, #0
 800ec54:	1f37      	subs	r7, r6, #4
 800ec56:	4690      	mov	r8, r2
 800ec58:	6802      	ldr	r2, [r0, #0]
 800ec5a:	9301      	str	r3, [sp, #4]
 800ec5c:	4682      	mov	sl, r0
 800ec5e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ec62:	46b9      	mov	r9, r7
 800ec64:	463c      	mov	r4, r7
 800ec66:	9502      	str	r5, [sp, #8]
 800ec68:	46ab      	mov	fp, r5
 800ec6a:	7851      	ldrb	r1, [r2, #1]
 800ec6c:	1c53      	adds	r3, r2, #1
 800ec6e:	9303      	str	r3, [sp, #12]
 800ec70:	b341      	cbz	r1, 800ecc4 <__hexnan+0x88>
 800ec72:	4608      	mov	r0, r1
 800ec74:	9205      	str	r2, [sp, #20]
 800ec76:	9104      	str	r1, [sp, #16]
 800ec78:	f7ff fd5e 	bl	800e738 <__hexdig_fun>
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	d14f      	bne.n	800ed20 <__hexnan+0xe4>
 800ec80:	9904      	ldr	r1, [sp, #16]
 800ec82:	9a05      	ldr	r2, [sp, #20]
 800ec84:	2920      	cmp	r1, #32
 800ec86:	d818      	bhi.n	800ecba <__hexnan+0x7e>
 800ec88:	9b02      	ldr	r3, [sp, #8]
 800ec8a:	459b      	cmp	fp, r3
 800ec8c:	dd13      	ble.n	800ecb6 <__hexnan+0x7a>
 800ec8e:	454c      	cmp	r4, r9
 800ec90:	d206      	bcs.n	800eca0 <__hexnan+0x64>
 800ec92:	2d07      	cmp	r5, #7
 800ec94:	dc04      	bgt.n	800eca0 <__hexnan+0x64>
 800ec96:	462a      	mov	r2, r5
 800ec98:	4649      	mov	r1, r9
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f7ff ffa8 	bl	800ebf0 <L_shift>
 800eca0:	4544      	cmp	r4, r8
 800eca2:	d950      	bls.n	800ed46 <__hexnan+0x10a>
 800eca4:	2300      	movs	r3, #0
 800eca6:	f1a4 0904 	sub.w	r9, r4, #4
 800ecaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800ecae:	f8cd b008 	str.w	fp, [sp, #8]
 800ecb2:	464c      	mov	r4, r9
 800ecb4:	461d      	mov	r5, r3
 800ecb6:	9a03      	ldr	r2, [sp, #12]
 800ecb8:	e7d7      	b.n	800ec6a <__hexnan+0x2e>
 800ecba:	2929      	cmp	r1, #41	; 0x29
 800ecbc:	d156      	bne.n	800ed6c <__hexnan+0x130>
 800ecbe:	3202      	adds	r2, #2
 800ecc0:	f8ca 2000 	str.w	r2, [sl]
 800ecc4:	f1bb 0f00 	cmp.w	fp, #0
 800ecc8:	d050      	beq.n	800ed6c <__hexnan+0x130>
 800ecca:	454c      	cmp	r4, r9
 800eccc:	d206      	bcs.n	800ecdc <__hexnan+0xa0>
 800ecce:	2d07      	cmp	r5, #7
 800ecd0:	dc04      	bgt.n	800ecdc <__hexnan+0xa0>
 800ecd2:	462a      	mov	r2, r5
 800ecd4:	4649      	mov	r1, r9
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	f7ff ff8a 	bl	800ebf0 <L_shift>
 800ecdc:	4544      	cmp	r4, r8
 800ecde:	d934      	bls.n	800ed4a <__hexnan+0x10e>
 800ece0:	f1a8 0204 	sub.w	r2, r8, #4
 800ece4:	4623      	mov	r3, r4
 800ece6:	f853 1b04 	ldr.w	r1, [r3], #4
 800ecea:	f842 1f04 	str.w	r1, [r2, #4]!
 800ecee:	429f      	cmp	r7, r3
 800ecf0:	d2f9      	bcs.n	800ece6 <__hexnan+0xaa>
 800ecf2:	1b3b      	subs	r3, r7, r4
 800ecf4:	f023 0303 	bic.w	r3, r3, #3
 800ecf8:	3304      	adds	r3, #4
 800ecfa:	3401      	adds	r4, #1
 800ecfc:	3e03      	subs	r6, #3
 800ecfe:	42b4      	cmp	r4, r6
 800ed00:	bf88      	it	hi
 800ed02:	2304      	movhi	r3, #4
 800ed04:	4443      	add	r3, r8
 800ed06:	2200      	movs	r2, #0
 800ed08:	f843 2b04 	str.w	r2, [r3], #4
 800ed0c:	429f      	cmp	r7, r3
 800ed0e:	d2fb      	bcs.n	800ed08 <__hexnan+0xcc>
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	b91b      	cbnz	r3, 800ed1c <__hexnan+0xe0>
 800ed14:	4547      	cmp	r7, r8
 800ed16:	d127      	bne.n	800ed68 <__hexnan+0x12c>
 800ed18:	2301      	movs	r3, #1
 800ed1a:	603b      	str	r3, [r7, #0]
 800ed1c:	2005      	movs	r0, #5
 800ed1e:	e026      	b.n	800ed6e <__hexnan+0x132>
 800ed20:	3501      	adds	r5, #1
 800ed22:	2d08      	cmp	r5, #8
 800ed24:	f10b 0b01 	add.w	fp, fp, #1
 800ed28:	dd06      	ble.n	800ed38 <__hexnan+0xfc>
 800ed2a:	4544      	cmp	r4, r8
 800ed2c:	d9c3      	bls.n	800ecb6 <__hexnan+0x7a>
 800ed2e:	2300      	movs	r3, #0
 800ed30:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed34:	2501      	movs	r5, #1
 800ed36:	3c04      	subs	r4, #4
 800ed38:	6822      	ldr	r2, [r4, #0]
 800ed3a:	f000 000f 	and.w	r0, r0, #15
 800ed3e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ed42:	6022      	str	r2, [r4, #0]
 800ed44:	e7b7      	b.n	800ecb6 <__hexnan+0x7a>
 800ed46:	2508      	movs	r5, #8
 800ed48:	e7b5      	b.n	800ecb6 <__hexnan+0x7a>
 800ed4a:	9b01      	ldr	r3, [sp, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d0df      	beq.n	800ed10 <__hexnan+0xd4>
 800ed50:	f04f 32ff 	mov.w	r2, #4294967295
 800ed54:	f1c3 0320 	rsb	r3, r3, #32
 800ed58:	fa22 f303 	lsr.w	r3, r2, r3
 800ed5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ed60:	401a      	ands	r2, r3
 800ed62:	f846 2c04 	str.w	r2, [r6, #-4]
 800ed66:	e7d3      	b.n	800ed10 <__hexnan+0xd4>
 800ed68:	3f04      	subs	r7, #4
 800ed6a:	e7d1      	b.n	800ed10 <__hexnan+0xd4>
 800ed6c:	2004      	movs	r0, #4
 800ed6e:	b007      	add	sp, #28
 800ed70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed74 <__ascii_mbtowc>:
 800ed74:	b082      	sub	sp, #8
 800ed76:	b901      	cbnz	r1, 800ed7a <__ascii_mbtowc+0x6>
 800ed78:	a901      	add	r1, sp, #4
 800ed7a:	b142      	cbz	r2, 800ed8e <__ascii_mbtowc+0x1a>
 800ed7c:	b14b      	cbz	r3, 800ed92 <__ascii_mbtowc+0x1e>
 800ed7e:	7813      	ldrb	r3, [r2, #0]
 800ed80:	600b      	str	r3, [r1, #0]
 800ed82:	7812      	ldrb	r2, [r2, #0]
 800ed84:	1e10      	subs	r0, r2, #0
 800ed86:	bf18      	it	ne
 800ed88:	2001      	movne	r0, #1
 800ed8a:	b002      	add	sp, #8
 800ed8c:	4770      	bx	lr
 800ed8e:	4610      	mov	r0, r2
 800ed90:	e7fb      	b.n	800ed8a <__ascii_mbtowc+0x16>
 800ed92:	f06f 0001 	mvn.w	r0, #1
 800ed96:	e7f8      	b.n	800ed8a <__ascii_mbtowc+0x16>

0800ed98 <memcpy>:
 800ed98:	440a      	add	r2, r1
 800ed9a:	4291      	cmp	r1, r2
 800ed9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800eda0:	d100      	bne.n	800eda4 <memcpy+0xc>
 800eda2:	4770      	bx	lr
 800eda4:	b510      	push	{r4, lr}
 800eda6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edae:	4291      	cmp	r1, r2
 800edb0:	d1f9      	bne.n	800eda6 <memcpy+0xe>
 800edb2:	bd10      	pop	{r4, pc}

0800edb4 <_Balloc>:
 800edb4:	b570      	push	{r4, r5, r6, lr}
 800edb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800edb8:	4604      	mov	r4, r0
 800edba:	460d      	mov	r5, r1
 800edbc:	b976      	cbnz	r6, 800eddc <_Balloc+0x28>
 800edbe:	2010      	movs	r0, #16
 800edc0:	f000 fdcc 	bl	800f95c <malloc>
 800edc4:	4602      	mov	r2, r0
 800edc6:	6260      	str	r0, [r4, #36]	; 0x24
 800edc8:	b920      	cbnz	r0, 800edd4 <_Balloc+0x20>
 800edca:	4b18      	ldr	r3, [pc, #96]	; (800ee2c <_Balloc+0x78>)
 800edcc:	4818      	ldr	r0, [pc, #96]	; (800ee30 <_Balloc+0x7c>)
 800edce:	2166      	movs	r1, #102	; 0x66
 800edd0:	f000 fd94 	bl	800f8fc <__assert_func>
 800edd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800edd8:	6006      	str	r6, [r0, #0]
 800edda:	60c6      	str	r6, [r0, #12]
 800eddc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800edde:	68f3      	ldr	r3, [r6, #12]
 800ede0:	b183      	cbz	r3, 800ee04 <_Balloc+0x50>
 800ede2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800edea:	b9b8      	cbnz	r0, 800ee1c <_Balloc+0x68>
 800edec:	2101      	movs	r1, #1
 800edee:	fa01 f605 	lsl.w	r6, r1, r5
 800edf2:	1d72      	adds	r2, r6, #5
 800edf4:	0092      	lsls	r2, r2, #2
 800edf6:	4620      	mov	r0, r4
 800edf8:	f000 fc9a 	bl	800f730 <_calloc_r>
 800edfc:	b160      	cbz	r0, 800ee18 <_Balloc+0x64>
 800edfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee02:	e00e      	b.n	800ee22 <_Balloc+0x6e>
 800ee04:	2221      	movs	r2, #33	; 0x21
 800ee06:	2104      	movs	r1, #4
 800ee08:	4620      	mov	r0, r4
 800ee0a:	f000 fc91 	bl	800f730 <_calloc_r>
 800ee0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee10:	60f0      	str	r0, [r6, #12]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d1e4      	bne.n	800ede2 <_Balloc+0x2e>
 800ee18:	2000      	movs	r0, #0
 800ee1a:	bd70      	pop	{r4, r5, r6, pc}
 800ee1c:	6802      	ldr	r2, [r0, #0]
 800ee1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee22:	2300      	movs	r3, #0
 800ee24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ee28:	e7f7      	b.n	800ee1a <_Balloc+0x66>
 800ee2a:	bf00      	nop
 800ee2c:	080111d4 	.word	0x080111d4
 800ee30:	080111eb 	.word	0x080111eb

0800ee34 <_Bfree>:
 800ee34:	b570      	push	{r4, r5, r6, lr}
 800ee36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee38:	4605      	mov	r5, r0
 800ee3a:	460c      	mov	r4, r1
 800ee3c:	b976      	cbnz	r6, 800ee5c <_Bfree+0x28>
 800ee3e:	2010      	movs	r0, #16
 800ee40:	f000 fd8c 	bl	800f95c <malloc>
 800ee44:	4602      	mov	r2, r0
 800ee46:	6268      	str	r0, [r5, #36]	; 0x24
 800ee48:	b920      	cbnz	r0, 800ee54 <_Bfree+0x20>
 800ee4a:	4b09      	ldr	r3, [pc, #36]	; (800ee70 <_Bfree+0x3c>)
 800ee4c:	4809      	ldr	r0, [pc, #36]	; (800ee74 <_Bfree+0x40>)
 800ee4e:	218a      	movs	r1, #138	; 0x8a
 800ee50:	f000 fd54 	bl	800f8fc <__assert_func>
 800ee54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee58:	6006      	str	r6, [r0, #0]
 800ee5a:	60c6      	str	r6, [r0, #12]
 800ee5c:	b13c      	cbz	r4, 800ee6e <_Bfree+0x3a>
 800ee5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee60:	6862      	ldr	r2, [r4, #4]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee68:	6021      	str	r1, [r4, #0]
 800ee6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee6e:	bd70      	pop	{r4, r5, r6, pc}
 800ee70:	080111d4 	.word	0x080111d4
 800ee74:	080111eb 	.word	0x080111eb

0800ee78 <__multadd>:
 800ee78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7c:	690d      	ldr	r5, [r1, #16]
 800ee7e:	4607      	mov	r7, r0
 800ee80:	460c      	mov	r4, r1
 800ee82:	461e      	mov	r6, r3
 800ee84:	f101 0c14 	add.w	ip, r1, #20
 800ee88:	2000      	movs	r0, #0
 800ee8a:	f8dc 3000 	ldr.w	r3, [ip]
 800ee8e:	b299      	uxth	r1, r3
 800ee90:	fb02 6101 	mla	r1, r2, r1, r6
 800ee94:	0c1e      	lsrs	r6, r3, #16
 800ee96:	0c0b      	lsrs	r3, r1, #16
 800ee98:	fb02 3306 	mla	r3, r2, r6, r3
 800ee9c:	b289      	uxth	r1, r1
 800ee9e:	3001      	adds	r0, #1
 800eea0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eea4:	4285      	cmp	r5, r0
 800eea6:	f84c 1b04 	str.w	r1, [ip], #4
 800eeaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eeae:	dcec      	bgt.n	800ee8a <__multadd+0x12>
 800eeb0:	b30e      	cbz	r6, 800eef6 <__multadd+0x7e>
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	42ab      	cmp	r3, r5
 800eeb6:	dc19      	bgt.n	800eeec <__multadd+0x74>
 800eeb8:	6861      	ldr	r1, [r4, #4]
 800eeba:	4638      	mov	r0, r7
 800eebc:	3101      	adds	r1, #1
 800eebe:	f7ff ff79 	bl	800edb4 <_Balloc>
 800eec2:	4680      	mov	r8, r0
 800eec4:	b928      	cbnz	r0, 800eed2 <__multadd+0x5a>
 800eec6:	4602      	mov	r2, r0
 800eec8:	4b0c      	ldr	r3, [pc, #48]	; (800eefc <__multadd+0x84>)
 800eeca:	480d      	ldr	r0, [pc, #52]	; (800ef00 <__multadd+0x88>)
 800eecc:	21b5      	movs	r1, #181	; 0xb5
 800eece:	f000 fd15 	bl	800f8fc <__assert_func>
 800eed2:	6922      	ldr	r2, [r4, #16]
 800eed4:	3202      	adds	r2, #2
 800eed6:	f104 010c 	add.w	r1, r4, #12
 800eeda:	0092      	lsls	r2, r2, #2
 800eedc:	300c      	adds	r0, #12
 800eede:	f7ff ff5b 	bl	800ed98 <memcpy>
 800eee2:	4621      	mov	r1, r4
 800eee4:	4638      	mov	r0, r7
 800eee6:	f7ff ffa5 	bl	800ee34 <_Bfree>
 800eeea:	4644      	mov	r4, r8
 800eeec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eef0:	3501      	adds	r5, #1
 800eef2:	615e      	str	r6, [r3, #20]
 800eef4:	6125      	str	r5, [r4, #16]
 800eef6:	4620      	mov	r0, r4
 800eef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eefc:	08011148 	.word	0x08011148
 800ef00:	080111eb 	.word	0x080111eb

0800ef04 <__s2b>:
 800ef04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef08:	460c      	mov	r4, r1
 800ef0a:	4615      	mov	r5, r2
 800ef0c:	461f      	mov	r7, r3
 800ef0e:	2209      	movs	r2, #9
 800ef10:	3308      	adds	r3, #8
 800ef12:	4606      	mov	r6, r0
 800ef14:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef18:	2100      	movs	r1, #0
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	db09      	blt.n	800ef34 <__s2b+0x30>
 800ef20:	4630      	mov	r0, r6
 800ef22:	f7ff ff47 	bl	800edb4 <_Balloc>
 800ef26:	b940      	cbnz	r0, 800ef3a <__s2b+0x36>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	4b19      	ldr	r3, [pc, #100]	; (800ef90 <__s2b+0x8c>)
 800ef2c:	4819      	ldr	r0, [pc, #100]	; (800ef94 <__s2b+0x90>)
 800ef2e:	21ce      	movs	r1, #206	; 0xce
 800ef30:	f000 fce4 	bl	800f8fc <__assert_func>
 800ef34:	0052      	lsls	r2, r2, #1
 800ef36:	3101      	adds	r1, #1
 800ef38:	e7f0      	b.n	800ef1c <__s2b+0x18>
 800ef3a:	9b08      	ldr	r3, [sp, #32]
 800ef3c:	6143      	str	r3, [r0, #20]
 800ef3e:	2d09      	cmp	r5, #9
 800ef40:	f04f 0301 	mov.w	r3, #1
 800ef44:	6103      	str	r3, [r0, #16]
 800ef46:	dd16      	ble.n	800ef76 <__s2b+0x72>
 800ef48:	f104 0909 	add.w	r9, r4, #9
 800ef4c:	46c8      	mov	r8, r9
 800ef4e:	442c      	add	r4, r5
 800ef50:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ef54:	4601      	mov	r1, r0
 800ef56:	3b30      	subs	r3, #48	; 0x30
 800ef58:	220a      	movs	r2, #10
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f7ff ff8c 	bl	800ee78 <__multadd>
 800ef60:	45a0      	cmp	r8, r4
 800ef62:	d1f5      	bne.n	800ef50 <__s2b+0x4c>
 800ef64:	f1a5 0408 	sub.w	r4, r5, #8
 800ef68:	444c      	add	r4, r9
 800ef6a:	1b2d      	subs	r5, r5, r4
 800ef6c:	1963      	adds	r3, r4, r5
 800ef6e:	42bb      	cmp	r3, r7
 800ef70:	db04      	blt.n	800ef7c <__s2b+0x78>
 800ef72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef76:	340a      	adds	r4, #10
 800ef78:	2509      	movs	r5, #9
 800ef7a:	e7f6      	b.n	800ef6a <__s2b+0x66>
 800ef7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ef80:	4601      	mov	r1, r0
 800ef82:	3b30      	subs	r3, #48	; 0x30
 800ef84:	220a      	movs	r2, #10
 800ef86:	4630      	mov	r0, r6
 800ef88:	f7ff ff76 	bl	800ee78 <__multadd>
 800ef8c:	e7ee      	b.n	800ef6c <__s2b+0x68>
 800ef8e:	bf00      	nop
 800ef90:	08011148 	.word	0x08011148
 800ef94:	080111eb 	.word	0x080111eb

0800ef98 <__hi0bits>:
 800ef98:	0c03      	lsrs	r3, r0, #16
 800ef9a:	041b      	lsls	r3, r3, #16
 800ef9c:	b9d3      	cbnz	r3, 800efd4 <__hi0bits+0x3c>
 800ef9e:	0400      	lsls	r0, r0, #16
 800efa0:	2310      	movs	r3, #16
 800efa2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800efa6:	bf04      	itt	eq
 800efa8:	0200      	lsleq	r0, r0, #8
 800efaa:	3308      	addeq	r3, #8
 800efac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800efb0:	bf04      	itt	eq
 800efb2:	0100      	lsleq	r0, r0, #4
 800efb4:	3304      	addeq	r3, #4
 800efb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800efba:	bf04      	itt	eq
 800efbc:	0080      	lsleq	r0, r0, #2
 800efbe:	3302      	addeq	r3, #2
 800efc0:	2800      	cmp	r0, #0
 800efc2:	db05      	blt.n	800efd0 <__hi0bits+0x38>
 800efc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800efc8:	f103 0301 	add.w	r3, r3, #1
 800efcc:	bf08      	it	eq
 800efce:	2320      	moveq	r3, #32
 800efd0:	4618      	mov	r0, r3
 800efd2:	4770      	bx	lr
 800efd4:	2300      	movs	r3, #0
 800efd6:	e7e4      	b.n	800efa2 <__hi0bits+0xa>

0800efd8 <__lo0bits>:
 800efd8:	6803      	ldr	r3, [r0, #0]
 800efda:	f013 0207 	ands.w	r2, r3, #7
 800efde:	4601      	mov	r1, r0
 800efe0:	d00b      	beq.n	800effa <__lo0bits+0x22>
 800efe2:	07da      	lsls	r2, r3, #31
 800efe4:	d423      	bmi.n	800f02e <__lo0bits+0x56>
 800efe6:	0798      	lsls	r0, r3, #30
 800efe8:	bf49      	itett	mi
 800efea:	085b      	lsrmi	r3, r3, #1
 800efec:	089b      	lsrpl	r3, r3, #2
 800efee:	2001      	movmi	r0, #1
 800eff0:	600b      	strmi	r3, [r1, #0]
 800eff2:	bf5c      	itt	pl
 800eff4:	600b      	strpl	r3, [r1, #0]
 800eff6:	2002      	movpl	r0, #2
 800eff8:	4770      	bx	lr
 800effa:	b298      	uxth	r0, r3
 800effc:	b9a8      	cbnz	r0, 800f02a <__lo0bits+0x52>
 800effe:	0c1b      	lsrs	r3, r3, #16
 800f000:	2010      	movs	r0, #16
 800f002:	b2da      	uxtb	r2, r3
 800f004:	b90a      	cbnz	r2, 800f00a <__lo0bits+0x32>
 800f006:	3008      	adds	r0, #8
 800f008:	0a1b      	lsrs	r3, r3, #8
 800f00a:	071a      	lsls	r2, r3, #28
 800f00c:	bf04      	itt	eq
 800f00e:	091b      	lsreq	r3, r3, #4
 800f010:	3004      	addeq	r0, #4
 800f012:	079a      	lsls	r2, r3, #30
 800f014:	bf04      	itt	eq
 800f016:	089b      	lsreq	r3, r3, #2
 800f018:	3002      	addeq	r0, #2
 800f01a:	07da      	lsls	r2, r3, #31
 800f01c:	d403      	bmi.n	800f026 <__lo0bits+0x4e>
 800f01e:	085b      	lsrs	r3, r3, #1
 800f020:	f100 0001 	add.w	r0, r0, #1
 800f024:	d005      	beq.n	800f032 <__lo0bits+0x5a>
 800f026:	600b      	str	r3, [r1, #0]
 800f028:	4770      	bx	lr
 800f02a:	4610      	mov	r0, r2
 800f02c:	e7e9      	b.n	800f002 <__lo0bits+0x2a>
 800f02e:	2000      	movs	r0, #0
 800f030:	4770      	bx	lr
 800f032:	2020      	movs	r0, #32
 800f034:	4770      	bx	lr
	...

0800f038 <__i2b>:
 800f038:	b510      	push	{r4, lr}
 800f03a:	460c      	mov	r4, r1
 800f03c:	2101      	movs	r1, #1
 800f03e:	f7ff feb9 	bl	800edb4 <_Balloc>
 800f042:	4602      	mov	r2, r0
 800f044:	b928      	cbnz	r0, 800f052 <__i2b+0x1a>
 800f046:	4b05      	ldr	r3, [pc, #20]	; (800f05c <__i2b+0x24>)
 800f048:	4805      	ldr	r0, [pc, #20]	; (800f060 <__i2b+0x28>)
 800f04a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f04e:	f000 fc55 	bl	800f8fc <__assert_func>
 800f052:	2301      	movs	r3, #1
 800f054:	6144      	str	r4, [r0, #20]
 800f056:	6103      	str	r3, [r0, #16]
 800f058:	bd10      	pop	{r4, pc}
 800f05a:	bf00      	nop
 800f05c:	08011148 	.word	0x08011148
 800f060:	080111eb 	.word	0x080111eb

0800f064 <__multiply>:
 800f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f068:	4691      	mov	r9, r2
 800f06a:	690a      	ldr	r2, [r1, #16]
 800f06c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f070:	429a      	cmp	r2, r3
 800f072:	bfb8      	it	lt
 800f074:	460b      	movlt	r3, r1
 800f076:	460c      	mov	r4, r1
 800f078:	bfbc      	itt	lt
 800f07a:	464c      	movlt	r4, r9
 800f07c:	4699      	movlt	r9, r3
 800f07e:	6927      	ldr	r7, [r4, #16]
 800f080:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f084:	68a3      	ldr	r3, [r4, #8]
 800f086:	6861      	ldr	r1, [r4, #4]
 800f088:	eb07 060a 	add.w	r6, r7, sl
 800f08c:	42b3      	cmp	r3, r6
 800f08e:	b085      	sub	sp, #20
 800f090:	bfb8      	it	lt
 800f092:	3101      	addlt	r1, #1
 800f094:	f7ff fe8e 	bl	800edb4 <_Balloc>
 800f098:	b930      	cbnz	r0, 800f0a8 <__multiply+0x44>
 800f09a:	4602      	mov	r2, r0
 800f09c:	4b44      	ldr	r3, [pc, #272]	; (800f1b0 <__multiply+0x14c>)
 800f09e:	4845      	ldr	r0, [pc, #276]	; (800f1b4 <__multiply+0x150>)
 800f0a0:	f240 115d 	movw	r1, #349	; 0x15d
 800f0a4:	f000 fc2a 	bl	800f8fc <__assert_func>
 800f0a8:	f100 0514 	add.w	r5, r0, #20
 800f0ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f0b0:	462b      	mov	r3, r5
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	4543      	cmp	r3, r8
 800f0b6:	d321      	bcc.n	800f0fc <__multiply+0x98>
 800f0b8:	f104 0314 	add.w	r3, r4, #20
 800f0bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f0c0:	f109 0314 	add.w	r3, r9, #20
 800f0c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f0c8:	9202      	str	r2, [sp, #8]
 800f0ca:	1b3a      	subs	r2, r7, r4
 800f0cc:	3a15      	subs	r2, #21
 800f0ce:	f022 0203 	bic.w	r2, r2, #3
 800f0d2:	3204      	adds	r2, #4
 800f0d4:	f104 0115 	add.w	r1, r4, #21
 800f0d8:	428f      	cmp	r7, r1
 800f0da:	bf38      	it	cc
 800f0dc:	2204      	movcc	r2, #4
 800f0de:	9201      	str	r2, [sp, #4]
 800f0e0:	9a02      	ldr	r2, [sp, #8]
 800f0e2:	9303      	str	r3, [sp, #12]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d80c      	bhi.n	800f102 <__multiply+0x9e>
 800f0e8:	2e00      	cmp	r6, #0
 800f0ea:	dd03      	ble.n	800f0f4 <__multiply+0x90>
 800f0ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d05a      	beq.n	800f1aa <__multiply+0x146>
 800f0f4:	6106      	str	r6, [r0, #16]
 800f0f6:	b005      	add	sp, #20
 800f0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0fc:	f843 2b04 	str.w	r2, [r3], #4
 800f100:	e7d8      	b.n	800f0b4 <__multiply+0x50>
 800f102:	f8b3 a000 	ldrh.w	sl, [r3]
 800f106:	f1ba 0f00 	cmp.w	sl, #0
 800f10a:	d024      	beq.n	800f156 <__multiply+0xf2>
 800f10c:	f104 0e14 	add.w	lr, r4, #20
 800f110:	46a9      	mov	r9, r5
 800f112:	f04f 0c00 	mov.w	ip, #0
 800f116:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f11a:	f8d9 1000 	ldr.w	r1, [r9]
 800f11e:	fa1f fb82 	uxth.w	fp, r2
 800f122:	b289      	uxth	r1, r1
 800f124:	fb0a 110b 	mla	r1, sl, fp, r1
 800f128:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f12c:	f8d9 2000 	ldr.w	r2, [r9]
 800f130:	4461      	add	r1, ip
 800f132:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f136:	fb0a c20b 	mla	r2, sl, fp, ip
 800f13a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f13e:	b289      	uxth	r1, r1
 800f140:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f144:	4577      	cmp	r7, lr
 800f146:	f849 1b04 	str.w	r1, [r9], #4
 800f14a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f14e:	d8e2      	bhi.n	800f116 <__multiply+0xb2>
 800f150:	9a01      	ldr	r2, [sp, #4]
 800f152:	f845 c002 	str.w	ip, [r5, r2]
 800f156:	9a03      	ldr	r2, [sp, #12]
 800f158:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f15c:	3304      	adds	r3, #4
 800f15e:	f1b9 0f00 	cmp.w	r9, #0
 800f162:	d020      	beq.n	800f1a6 <__multiply+0x142>
 800f164:	6829      	ldr	r1, [r5, #0]
 800f166:	f104 0c14 	add.w	ip, r4, #20
 800f16a:	46ae      	mov	lr, r5
 800f16c:	f04f 0a00 	mov.w	sl, #0
 800f170:	f8bc b000 	ldrh.w	fp, [ip]
 800f174:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f178:	fb09 220b 	mla	r2, r9, fp, r2
 800f17c:	4492      	add	sl, r2
 800f17e:	b289      	uxth	r1, r1
 800f180:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f184:	f84e 1b04 	str.w	r1, [lr], #4
 800f188:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f18c:	f8be 1000 	ldrh.w	r1, [lr]
 800f190:	0c12      	lsrs	r2, r2, #16
 800f192:	fb09 1102 	mla	r1, r9, r2, r1
 800f196:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f19a:	4567      	cmp	r7, ip
 800f19c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f1a0:	d8e6      	bhi.n	800f170 <__multiply+0x10c>
 800f1a2:	9a01      	ldr	r2, [sp, #4]
 800f1a4:	50a9      	str	r1, [r5, r2]
 800f1a6:	3504      	adds	r5, #4
 800f1a8:	e79a      	b.n	800f0e0 <__multiply+0x7c>
 800f1aa:	3e01      	subs	r6, #1
 800f1ac:	e79c      	b.n	800f0e8 <__multiply+0x84>
 800f1ae:	bf00      	nop
 800f1b0:	08011148 	.word	0x08011148
 800f1b4:	080111eb 	.word	0x080111eb

0800f1b8 <__pow5mult>:
 800f1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1bc:	4615      	mov	r5, r2
 800f1be:	f012 0203 	ands.w	r2, r2, #3
 800f1c2:	4606      	mov	r6, r0
 800f1c4:	460f      	mov	r7, r1
 800f1c6:	d007      	beq.n	800f1d8 <__pow5mult+0x20>
 800f1c8:	4c25      	ldr	r4, [pc, #148]	; (800f260 <__pow5mult+0xa8>)
 800f1ca:	3a01      	subs	r2, #1
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1d2:	f7ff fe51 	bl	800ee78 <__multadd>
 800f1d6:	4607      	mov	r7, r0
 800f1d8:	10ad      	asrs	r5, r5, #2
 800f1da:	d03d      	beq.n	800f258 <__pow5mult+0xa0>
 800f1dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f1de:	b97c      	cbnz	r4, 800f200 <__pow5mult+0x48>
 800f1e0:	2010      	movs	r0, #16
 800f1e2:	f000 fbbb 	bl	800f95c <malloc>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	6270      	str	r0, [r6, #36]	; 0x24
 800f1ea:	b928      	cbnz	r0, 800f1f8 <__pow5mult+0x40>
 800f1ec:	4b1d      	ldr	r3, [pc, #116]	; (800f264 <__pow5mult+0xac>)
 800f1ee:	481e      	ldr	r0, [pc, #120]	; (800f268 <__pow5mult+0xb0>)
 800f1f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f1f4:	f000 fb82 	bl	800f8fc <__assert_func>
 800f1f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f1fc:	6004      	str	r4, [r0, #0]
 800f1fe:	60c4      	str	r4, [r0, #12]
 800f200:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f204:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f208:	b94c      	cbnz	r4, 800f21e <__pow5mult+0x66>
 800f20a:	f240 2171 	movw	r1, #625	; 0x271
 800f20e:	4630      	mov	r0, r6
 800f210:	f7ff ff12 	bl	800f038 <__i2b>
 800f214:	2300      	movs	r3, #0
 800f216:	f8c8 0008 	str.w	r0, [r8, #8]
 800f21a:	4604      	mov	r4, r0
 800f21c:	6003      	str	r3, [r0, #0]
 800f21e:	f04f 0900 	mov.w	r9, #0
 800f222:	07eb      	lsls	r3, r5, #31
 800f224:	d50a      	bpl.n	800f23c <__pow5mult+0x84>
 800f226:	4639      	mov	r1, r7
 800f228:	4622      	mov	r2, r4
 800f22a:	4630      	mov	r0, r6
 800f22c:	f7ff ff1a 	bl	800f064 <__multiply>
 800f230:	4639      	mov	r1, r7
 800f232:	4680      	mov	r8, r0
 800f234:	4630      	mov	r0, r6
 800f236:	f7ff fdfd 	bl	800ee34 <_Bfree>
 800f23a:	4647      	mov	r7, r8
 800f23c:	106d      	asrs	r5, r5, #1
 800f23e:	d00b      	beq.n	800f258 <__pow5mult+0xa0>
 800f240:	6820      	ldr	r0, [r4, #0]
 800f242:	b938      	cbnz	r0, 800f254 <__pow5mult+0x9c>
 800f244:	4622      	mov	r2, r4
 800f246:	4621      	mov	r1, r4
 800f248:	4630      	mov	r0, r6
 800f24a:	f7ff ff0b 	bl	800f064 <__multiply>
 800f24e:	6020      	str	r0, [r4, #0]
 800f250:	f8c0 9000 	str.w	r9, [r0]
 800f254:	4604      	mov	r4, r0
 800f256:	e7e4      	b.n	800f222 <__pow5mult+0x6a>
 800f258:	4638      	mov	r0, r7
 800f25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f25e:	bf00      	nop
 800f260:	08011338 	.word	0x08011338
 800f264:	080111d4 	.word	0x080111d4
 800f268:	080111eb 	.word	0x080111eb

0800f26c <__lshift>:
 800f26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f270:	460c      	mov	r4, r1
 800f272:	6849      	ldr	r1, [r1, #4]
 800f274:	6923      	ldr	r3, [r4, #16]
 800f276:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f27a:	68a3      	ldr	r3, [r4, #8]
 800f27c:	4607      	mov	r7, r0
 800f27e:	4691      	mov	r9, r2
 800f280:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f284:	f108 0601 	add.w	r6, r8, #1
 800f288:	42b3      	cmp	r3, r6
 800f28a:	db0b      	blt.n	800f2a4 <__lshift+0x38>
 800f28c:	4638      	mov	r0, r7
 800f28e:	f7ff fd91 	bl	800edb4 <_Balloc>
 800f292:	4605      	mov	r5, r0
 800f294:	b948      	cbnz	r0, 800f2aa <__lshift+0x3e>
 800f296:	4602      	mov	r2, r0
 800f298:	4b2a      	ldr	r3, [pc, #168]	; (800f344 <__lshift+0xd8>)
 800f29a:	482b      	ldr	r0, [pc, #172]	; (800f348 <__lshift+0xdc>)
 800f29c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f2a0:	f000 fb2c 	bl	800f8fc <__assert_func>
 800f2a4:	3101      	adds	r1, #1
 800f2a6:	005b      	lsls	r3, r3, #1
 800f2a8:	e7ee      	b.n	800f288 <__lshift+0x1c>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f100 0114 	add.w	r1, r0, #20
 800f2b0:	f100 0210 	add.w	r2, r0, #16
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	4553      	cmp	r3, sl
 800f2b8:	db37      	blt.n	800f32a <__lshift+0xbe>
 800f2ba:	6920      	ldr	r0, [r4, #16]
 800f2bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2c0:	f104 0314 	add.w	r3, r4, #20
 800f2c4:	f019 091f 	ands.w	r9, r9, #31
 800f2c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f2cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f2d0:	d02f      	beq.n	800f332 <__lshift+0xc6>
 800f2d2:	f1c9 0e20 	rsb	lr, r9, #32
 800f2d6:	468a      	mov	sl, r1
 800f2d8:	f04f 0c00 	mov.w	ip, #0
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	fa02 f209 	lsl.w	r2, r2, r9
 800f2e2:	ea42 020c 	orr.w	r2, r2, ip
 800f2e6:	f84a 2b04 	str.w	r2, [sl], #4
 800f2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ee:	4298      	cmp	r0, r3
 800f2f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f2f4:	d8f2      	bhi.n	800f2dc <__lshift+0x70>
 800f2f6:	1b03      	subs	r3, r0, r4
 800f2f8:	3b15      	subs	r3, #21
 800f2fa:	f023 0303 	bic.w	r3, r3, #3
 800f2fe:	3304      	adds	r3, #4
 800f300:	f104 0215 	add.w	r2, r4, #21
 800f304:	4290      	cmp	r0, r2
 800f306:	bf38      	it	cc
 800f308:	2304      	movcc	r3, #4
 800f30a:	f841 c003 	str.w	ip, [r1, r3]
 800f30e:	f1bc 0f00 	cmp.w	ip, #0
 800f312:	d001      	beq.n	800f318 <__lshift+0xac>
 800f314:	f108 0602 	add.w	r6, r8, #2
 800f318:	3e01      	subs	r6, #1
 800f31a:	4638      	mov	r0, r7
 800f31c:	612e      	str	r6, [r5, #16]
 800f31e:	4621      	mov	r1, r4
 800f320:	f7ff fd88 	bl	800ee34 <_Bfree>
 800f324:	4628      	mov	r0, r5
 800f326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f32a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f32e:	3301      	adds	r3, #1
 800f330:	e7c1      	b.n	800f2b6 <__lshift+0x4a>
 800f332:	3904      	subs	r1, #4
 800f334:	f853 2b04 	ldr.w	r2, [r3], #4
 800f338:	f841 2f04 	str.w	r2, [r1, #4]!
 800f33c:	4298      	cmp	r0, r3
 800f33e:	d8f9      	bhi.n	800f334 <__lshift+0xc8>
 800f340:	e7ea      	b.n	800f318 <__lshift+0xac>
 800f342:	bf00      	nop
 800f344:	08011148 	.word	0x08011148
 800f348:	080111eb 	.word	0x080111eb

0800f34c <__mcmp>:
 800f34c:	b530      	push	{r4, r5, lr}
 800f34e:	6902      	ldr	r2, [r0, #16]
 800f350:	690c      	ldr	r4, [r1, #16]
 800f352:	1b12      	subs	r2, r2, r4
 800f354:	d10e      	bne.n	800f374 <__mcmp+0x28>
 800f356:	f100 0314 	add.w	r3, r0, #20
 800f35a:	3114      	adds	r1, #20
 800f35c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f360:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f364:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f368:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f36c:	42a5      	cmp	r5, r4
 800f36e:	d003      	beq.n	800f378 <__mcmp+0x2c>
 800f370:	d305      	bcc.n	800f37e <__mcmp+0x32>
 800f372:	2201      	movs	r2, #1
 800f374:	4610      	mov	r0, r2
 800f376:	bd30      	pop	{r4, r5, pc}
 800f378:	4283      	cmp	r3, r0
 800f37a:	d3f3      	bcc.n	800f364 <__mcmp+0x18>
 800f37c:	e7fa      	b.n	800f374 <__mcmp+0x28>
 800f37e:	f04f 32ff 	mov.w	r2, #4294967295
 800f382:	e7f7      	b.n	800f374 <__mcmp+0x28>

0800f384 <__mdiff>:
 800f384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f388:	460c      	mov	r4, r1
 800f38a:	4606      	mov	r6, r0
 800f38c:	4611      	mov	r1, r2
 800f38e:	4620      	mov	r0, r4
 800f390:	4690      	mov	r8, r2
 800f392:	f7ff ffdb 	bl	800f34c <__mcmp>
 800f396:	1e05      	subs	r5, r0, #0
 800f398:	d110      	bne.n	800f3bc <__mdiff+0x38>
 800f39a:	4629      	mov	r1, r5
 800f39c:	4630      	mov	r0, r6
 800f39e:	f7ff fd09 	bl	800edb4 <_Balloc>
 800f3a2:	b930      	cbnz	r0, 800f3b2 <__mdiff+0x2e>
 800f3a4:	4b3a      	ldr	r3, [pc, #232]	; (800f490 <__mdiff+0x10c>)
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	f240 2132 	movw	r1, #562	; 0x232
 800f3ac:	4839      	ldr	r0, [pc, #228]	; (800f494 <__mdiff+0x110>)
 800f3ae:	f000 faa5 	bl	800f8fc <__assert_func>
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f3b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3bc:	bfa4      	itt	ge
 800f3be:	4643      	movge	r3, r8
 800f3c0:	46a0      	movge	r8, r4
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f3c8:	bfa6      	itte	ge
 800f3ca:	461c      	movge	r4, r3
 800f3cc:	2500      	movge	r5, #0
 800f3ce:	2501      	movlt	r5, #1
 800f3d0:	f7ff fcf0 	bl	800edb4 <_Balloc>
 800f3d4:	b920      	cbnz	r0, 800f3e0 <__mdiff+0x5c>
 800f3d6:	4b2e      	ldr	r3, [pc, #184]	; (800f490 <__mdiff+0x10c>)
 800f3d8:	4602      	mov	r2, r0
 800f3da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f3de:	e7e5      	b.n	800f3ac <__mdiff+0x28>
 800f3e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f3e4:	6926      	ldr	r6, [r4, #16]
 800f3e6:	60c5      	str	r5, [r0, #12]
 800f3e8:	f104 0914 	add.w	r9, r4, #20
 800f3ec:	f108 0514 	add.w	r5, r8, #20
 800f3f0:	f100 0e14 	add.w	lr, r0, #20
 800f3f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f3f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f3fc:	f108 0210 	add.w	r2, r8, #16
 800f400:	46f2      	mov	sl, lr
 800f402:	2100      	movs	r1, #0
 800f404:	f859 3b04 	ldr.w	r3, [r9], #4
 800f408:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f40c:	fa1f f883 	uxth.w	r8, r3
 800f410:	fa11 f18b 	uxtah	r1, r1, fp
 800f414:	0c1b      	lsrs	r3, r3, #16
 800f416:	eba1 0808 	sub.w	r8, r1, r8
 800f41a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f41e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f422:	fa1f f888 	uxth.w	r8, r8
 800f426:	1419      	asrs	r1, r3, #16
 800f428:	454e      	cmp	r6, r9
 800f42a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f42e:	f84a 3b04 	str.w	r3, [sl], #4
 800f432:	d8e7      	bhi.n	800f404 <__mdiff+0x80>
 800f434:	1b33      	subs	r3, r6, r4
 800f436:	3b15      	subs	r3, #21
 800f438:	f023 0303 	bic.w	r3, r3, #3
 800f43c:	3304      	adds	r3, #4
 800f43e:	3415      	adds	r4, #21
 800f440:	42a6      	cmp	r6, r4
 800f442:	bf38      	it	cc
 800f444:	2304      	movcc	r3, #4
 800f446:	441d      	add	r5, r3
 800f448:	4473      	add	r3, lr
 800f44a:	469e      	mov	lr, r3
 800f44c:	462e      	mov	r6, r5
 800f44e:	4566      	cmp	r6, ip
 800f450:	d30e      	bcc.n	800f470 <__mdiff+0xec>
 800f452:	f10c 0203 	add.w	r2, ip, #3
 800f456:	1b52      	subs	r2, r2, r5
 800f458:	f022 0203 	bic.w	r2, r2, #3
 800f45c:	3d03      	subs	r5, #3
 800f45e:	45ac      	cmp	ip, r5
 800f460:	bf38      	it	cc
 800f462:	2200      	movcc	r2, #0
 800f464:	441a      	add	r2, r3
 800f466:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f46a:	b17b      	cbz	r3, 800f48c <__mdiff+0x108>
 800f46c:	6107      	str	r7, [r0, #16]
 800f46e:	e7a3      	b.n	800f3b8 <__mdiff+0x34>
 800f470:	f856 8b04 	ldr.w	r8, [r6], #4
 800f474:	fa11 f288 	uxtah	r2, r1, r8
 800f478:	1414      	asrs	r4, r2, #16
 800f47a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f47e:	b292      	uxth	r2, r2
 800f480:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f484:	f84e 2b04 	str.w	r2, [lr], #4
 800f488:	1421      	asrs	r1, r4, #16
 800f48a:	e7e0      	b.n	800f44e <__mdiff+0xca>
 800f48c:	3f01      	subs	r7, #1
 800f48e:	e7ea      	b.n	800f466 <__mdiff+0xe2>
 800f490:	08011148 	.word	0x08011148
 800f494:	080111eb 	.word	0x080111eb

0800f498 <__ulp>:
 800f498:	b082      	sub	sp, #8
 800f49a:	ed8d 0b00 	vstr	d0, [sp]
 800f49e:	9b01      	ldr	r3, [sp, #4]
 800f4a0:	4912      	ldr	r1, [pc, #72]	; (800f4ec <__ulp+0x54>)
 800f4a2:	4019      	ands	r1, r3
 800f4a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f4a8:	2900      	cmp	r1, #0
 800f4aa:	dd05      	ble.n	800f4b8 <__ulp+0x20>
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	ec43 2b10 	vmov	d0, r2, r3
 800f4b4:	b002      	add	sp, #8
 800f4b6:	4770      	bx	lr
 800f4b8:	4249      	negs	r1, r1
 800f4ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f4be:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f4c2:	f04f 0200 	mov.w	r2, #0
 800f4c6:	f04f 0300 	mov.w	r3, #0
 800f4ca:	da04      	bge.n	800f4d6 <__ulp+0x3e>
 800f4cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f4d0:	fa41 f300 	asr.w	r3, r1, r0
 800f4d4:	e7ec      	b.n	800f4b0 <__ulp+0x18>
 800f4d6:	f1a0 0114 	sub.w	r1, r0, #20
 800f4da:	291e      	cmp	r1, #30
 800f4dc:	bfda      	itte	le
 800f4de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f4e2:	fa20 f101 	lsrle.w	r1, r0, r1
 800f4e6:	2101      	movgt	r1, #1
 800f4e8:	460a      	mov	r2, r1
 800f4ea:	e7e1      	b.n	800f4b0 <__ulp+0x18>
 800f4ec:	7ff00000 	.word	0x7ff00000

0800f4f0 <__b2d>:
 800f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f2:	6905      	ldr	r5, [r0, #16]
 800f4f4:	f100 0714 	add.w	r7, r0, #20
 800f4f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f4fc:	1f2e      	subs	r6, r5, #4
 800f4fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f502:	4620      	mov	r0, r4
 800f504:	f7ff fd48 	bl	800ef98 <__hi0bits>
 800f508:	f1c0 0320 	rsb	r3, r0, #32
 800f50c:	280a      	cmp	r0, #10
 800f50e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f58c <__b2d+0x9c>
 800f512:	600b      	str	r3, [r1, #0]
 800f514:	dc14      	bgt.n	800f540 <__b2d+0x50>
 800f516:	f1c0 0e0b 	rsb	lr, r0, #11
 800f51a:	fa24 f10e 	lsr.w	r1, r4, lr
 800f51e:	42b7      	cmp	r7, r6
 800f520:	ea41 030c 	orr.w	r3, r1, ip
 800f524:	bf34      	ite	cc
 800f526:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f52a:	2100      	movcs	r1, #0
 800f52c:	3015      	adds	r0, #21
 800f52e:	fa04 f000 	lsl.w	r0, r4, r0
 800f532:	fa21 f10e 	lsr.w	r1, r1, lr
 800f536:	ea40 0201 	orr.w	r2, r0, r1
 800f53a:	ec43 2b10 	vmov	d0, r2, r3
 800f53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f540:	42b7      	cmp	r7, r6
 800f542:	bf3a      	itte	cc
 800f544:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f548:	f1a5 0608 	subcc.w	r6, r5, #8
 800f54c:	2100      	movcs	r1, #0
 800f54e:	380b      	subs	r0, #11
 800f550:	d017      	beq.n	800f582 <__b2d+0x92>
 800f552:	f1c0 0c20 	rsb	ip, r0, #32
 800f556:	fa04 f500 	lsl.w	r5, r4, r0
 800f55a:	42be      	cmp	r6, r7
 800f55c:	fa21 f40c 	lsr.w	r4, r1, ip
 800f560:	ea45 0504 	orr.w	r5, r5, r4
 800f564:	bf8c      	ite	hi
 800f566:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f56a:	2400      	movls	r4, #0
 800f56c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f570:	fa01 f000 	lsl.w	r0, r1, r0
 800f574:	fa24 f40c 	lsr.w	r4, r4, ip
 800f578:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f57c:	ea40 0204 	orr.w	r2, r0, r4
 800f580:	e7db      	b.n	800f53a <__b2d+0x4a>
 800f582:	ea44 030c 	orr.w	r3, r4, ip
 800f586:	460a      	mov	r2, r1
 800f588:	e7d7      	b.n	800f53a <__b2d+0x4a>
 800f58a:	bf00      	nop
 800f58c:	3ff00000 	.word	0x3ff00000

0800f590 <__d2b>:
 800f590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f594:	4689      	mov	r9, r1
 800f596:	2101      	movs	r1, #1
 800f598:	ec57 6b10 	vmov	r6, r7, d0
 800f59c:	4690      	mov	r8, r2
 800f59e:	f7ff fc09 	bl	800edb4 <_Balloc>
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	b930      	cbnz	r0, 800f5b4 <__d2b+0x24>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	4b25      	ldr	r3, [pc, #148]	; (800f640 <__d2b+0xb0>)
 800f5aa:	4826      	ldr	r0, [pc, #152]	; (800f644 <__d2b+0xb4>)
 800f5ac:	f240 310a 	movw	r1, #778	; 0x30a
 800f5b0:	f000 f9a4 	bl	800f8fc <__assert_func>
 800f5b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f5b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f5bc:	bb35      	cbnz	r5, 800f60c <__d2b+0x7c>
 800f5be:	2e00      	cmp	r6, #0
 800f5c0:	9301      	str	r3, [sp, #4]
 800f5c2:	d028      	beq.n	800f616 <__d2b+0x86>
 800f5c4:	4668      	mov	r0, sp
 800f5c6:	9600      	str	r6, [sp, #0]
 800f5c8:	f7ff fd06 	bl	800efd8 <__lo0bits>
 800f5cc:	9900      	ldr	r1, [sp, #0]
 800f5ce:	b300      	cbz	r0, 800f612 <__d2b+0x82>
 800f5d0:	9a01      	ldr	r2, [sp, #4]
 800f5d2:	f1c0 0320 	rsb	r3, r0, #32
 800f5d6:	fa02 f303 	lsl.w	r3, r2, r3
 800f5da:	430b      	orrs	r3, r1
 800f5dc:	40c2      	lsrs	r2, r0
 800f5de:	6163      	str	r3, [r4, #20]
 800f5e0:	9201      	str	r2, [sp, #4]
 800f5e2:	9b01      	ldr	r3, [sp, #4]
 800f5e4:	61a3      	str	r3, [r4, #24]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	bf14      	ite	ne
 800f5ea:	2202      	movne	r2, #2
 800f5ec:	2201      	moveq	r2, #1
 800f5ee:	6122      	str	r2, [r4, #16]
 800f5f0:	b1d5      	cbz	r5, 800f628 <__d2b+0x98>
 800f5f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f5f6:	4405      	add	r5, r0
 800f5f8:	f8c9 5000 	str.w	r5, [r9]
 800f5fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f600:	f8c8 0000 	str.w	r0, [r8]
 800f604:	4620      	mov	r0, r4
 800f606:	b003      	add	sp, #12
 800f608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f60c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f610:	e7d5      	b.n	800f5be <__d2b+0x2e>
 800f612:	6161      	str	r1, [r4, #20]
 800f614:	e7e5      	b.n	800f5e2 <__d2b+0x52>
 800f616:	a801      	add	r0, sp, #4
 800f618:	f7ff fcde 	bl	800efd8 <__lo0bits>
 800f61c:	9b01      	ldr	r3, [sp, #4]
 800f61e:	6163      	str	r3, [r4, #20]
 800f620:	2201      	movs	r2, #1
 800f622:	6122      	str	r2, [r4, #16]
 800f624:	3020      	adds	r0, #32
 800f626:	e7e3      	b.n	800f5f0 <__d2b+0x60>
 800f628:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f62c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f630:	f8c9 0000 	str.w	r0, [r9]
 800f634:	6918      	ldr	r0, [r3, #16]
 800f636:	f7ff fcaf 	bl	800ef98 <__hi0bits>
 800f63a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f63e:	e7df      	b.n	800f600 <__d2b+0x70>
 800f640:	08011148 	.word	0x08011148
 800f644:	080111eb 	.word	0x080111eb

0800f648 <__ratio>:
 800f648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f64c:	4688      	mov	r8, r1
 800f64e:	4669      	mov	r1, sp
 800f650:	4681      	mov	r9, r0
 800f652:	f7ff ff4d 	bl	800f4f0 <__b2d>
 800f656:	a901      	add	r1, sp, #4
 800f658:	4640      	mov	r0, r8
 800f65a:	ec55 4b10 	vmov	r4, r5, d0
 800f65e:	ee10 aa10 	vmov	sl, s0
 800f662:	f7ff ff45 	bl	800f4f0 <__b2d>
 800f666:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f66a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f66e:	1a59      	subs	r1, r3, r1
 800f670:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f674:	1ad3      	subs	r3, r2, r3
 800f676:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f67a:	ec57 6b10 	vmov	r6, r7, d0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	bfd6      	itet	le
 800f682:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f686:	462a      	movgt	r2, r5
 800f688:	463a      	movle	r2, r7
 800f68a:	46ab      	mov	fp, r5
 800f68c:	bfd6      	itet	le
 800f68e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800f692:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800f696:	ee00 3a90 	vmovle	s1, r3
 800f69a:	ec4b ab17 	vmov	d7, sl, fp
 800f69e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800f6a2:	b003      	add	sp, #12
 800f6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6a8 <__copybits>:
 800f6a8:	3901      	subs	r1, #1
 800f6aa:	b570      	push	{r4, r5, r6, lr}
 800f6ac:	1149      	asrs	r1, r1, #5
 800f6ae:	6914      	ldr	r4, [r2, #16]
 800f6b0:	3101      	adds	r1, #1
 800f6b2:	f102 0314 	add.w	r3, r2, #20
 800f6b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f6ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f6be:	1f05      	subs	r5, r0, #4
 800f6c0:	42a3      	cmp	r3, r4
 800f6c2:	d30c      	bcc.n	800f6de <__copybits+0x36>
 800f6c4:	1aa3      	subs	r3, r4, r2
 800f6c6:	3b11      	subs	r3, #17
 800f6c8:	f023 0303 	bic.w	r3, r3, #3
 800f6cc:	3211      	adds	r2, #17
 800f6ce:	42a2      	cmp	r2, r4
 800f6d0:	bf88      	it	hi
 800f6d2:	2300      	movhi	r3, #0
 800f6d4:	4418      	add	r0, r3
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	4288      	cmp	r0, r1
 800f6da:	d305      	bcc.n	800f6e8 <__copybits+0x40>
 800f6dc:	bd70      	pop	{r4, r5, r6, pc}
 800f6de:	f853 6b04 	ldr.w	r6, [r3], #4
 800f6e2:	f845 6f04 	str.w	r6, [r5, #4]!
 800f6e6:	e7eb      	b.n	800f6c0 <__copybits+0x18>
 800f6e8:	f840 3b04 	str.w	r3, [r0], #4
 800f6ec:	e7f4      	b.n	800f6d8 <__copybits+0x30>

0800f6ee <__any_on>:
 800f6ee:	f100 0214 	add.w	r2, r0, #20
 800f6f2:	6900      	ldr	r0, [r0, #16]
 800f6f4:	114b      	asrs	r3, r1, #5
 800f6f6:	4298      	cmp	r0, r3
 800f6f8:	b510      	push	{r4, lr}
 800f6fa:	db11      	blt.n	800f720 <__any_on+0x32>
 800f6fc:	dd0a      	ble.n	800f714 <__any_on+0x26>
 800f6fe:	f011 011f 	ands.w	r1, r1, #31
 800f702:	d007      	beq.n	800f714 <__any_on+0x26>
 800f704:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f708:	fa24 f001 	lsr.w	r0, r4, r1
 800f70c:	fa00 f101 	lsl.w	r1, r0, r1
 800f710:	428c      	cmp	r4, r1
 800f712:	d10b      	bne.n	800f72c <__any_on+0x3e>
 800f714:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f718:	4293      	cmp	r3, r2
 800f71a:	d803      	bhi.n	800f724 <__any_on+0x36>
 800f71c:	2000      	movs	r0, #0
 800f71e:	bd10      	pop	{r4, pc}
 800f720:	4603      	mov	r3, r0
 800f722:	e7f7      	b.n	800f714 <__any_on+0x26>
 800f724:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f728:	2900      	cmp	r1, #0
 800f72a:	d0f5      	beq.n	800f718 <__any_on+0x2a>
 800f72c:	2001      	movs	r0, #1
 800f72e:	e7f6      	b.n	800f71e <__any_on+0x30>

0800f730 <_calloc_r>:
 800f730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f732:	fba1 2402 	umull	r2, r4, r1, r2
 800f736:	b94c      	cbnz	r4, 800f74c <_calloc_r+0x1c>
 800f738:	4611      	mov	r1, r2
 800f73a:	9201      	str	r2, [sp, #4]
 800f73c:	f000 f82e 	bl	800f79c <_malloc_r>
 800f740:	9a01      	ldr	r2, [sp, #4]
 800f742:	4605      	mov	r5, r0
 800f744:	b930      	cbnz	r0, 800f754 <_calloc_r+0x24>
 800f746:	4628      	mov	r0, r5
 800f748:	b003      	add	sp, #12
 800f74a:	bd30      	pop	{r4, r5, pc}
 800f74c:	220c      	movs	r2, #12
 800f74e:	6002      	str	r2, [r0, #0]
 800f750:	2500      	movs	r5, #0
 800f752:	e7f8      	b.n	800f746 <_calloc_r+0x16>
 800f754:	4621      	mov	r1, r4
 800f756:	f7fe f9b9 	bl	800dacc <memset>
 800f75a:	e7f4      	b.n	800f746 <_calloc_r+0x16>

0800f75c <sbrk_aligned>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	4e0e      	ldr	r6, [pc, #56]	; (800f798 <sbrk_aligned+0x3c>)
 800f760:	460c      	mov	r4, r1
 800f762:	6831      	ldr	r1, [r6, #0]
 800f764:	4605      	mov	r5, r0
 800f766:	b911      	cbnz	r1, 800f76e <sbrk_aligned+0x12>
 800f768:	f000 f896 	bl	800f898 <_sbrk_r>
 800f76c:	6030      	str	r0, [r6, #0]
 800f76e:	4621      	mov	r1, r4
 800f770:	4628      	mov	r0, r5
 800f772:	f000 f891 	bl	800f898 <_sbrk_r>
 800f776:	1c43      	adds	r3, r0, #1
 800f778:	d00a      	beq.n	800f790 <sbrk_aligned+0x34>
 800f77a:	1cc4      	adds	r4, r0, #3
 800f77c:	f024 0403 	bic.w	r4, r4, #3
 800f780:	42a0      	cmp	r0, r4
 800f782:	d007      	beq.n	800f794 <sbrk_aligned+0x38>
 800f784:	1a21      	subs	r1, r4, r0
 800f786:	4628      	mov	r0, r5
 800f788:	f000 f886 	bl	800f898 <_sbrk_r>
 800f78c:	3001      	adds	r0, #1
 800f78e:	d101      	bne.n	800f794 <sbrk_aligned+0x38>
 800f790:	f04f 34ff 	mov.w	r4, #4294967295
 800f794:	4620      	mov	r0, r4
 800f796:	bd70      	pop	{r4, r5, r6, pc}
 800f798:	24000a00 	.word	0x24000a00

0800f79c <_malloc_r>:
 800f79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a0:	1ccd      	adds	r5, r1, #3
 800f7a2:	f025 0503 	bic.w	r5, r5, #3
 800f7a6:	3508      	adds	r5, #8
 800f7a8:	2d0c      	cmp	r5, #12
 800f7aa:	bf38      	it	cc
 800f7ac:	250c      	movcc	r5, #12
 800f7ae:	2d00      	cmp	r5, #0
 800f7b0:	4607      	mov	r7, r0
 800f7b2:	db01      	blt.n	800f7b8 <_malloc_r+0x1c>
 800f7b4:	42a9      	cmp	r1, r5
 800f7b6:	d905      	bls.n	800f7c4 <_malloc_r+0x28>
 800f7b8:	230c      	movs	r3, #12
 800f7ba:	603b      	str	r3, [r7, #0]
 800f7bc:	2600      	movs	r6, #0
 800f7be:	4630      	mov	r0, r6
 800f7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c4:	4e2e      	ldr	r6, [pc, #184]	; (800f880 <_malloc_r+0xe4>)
 800f7c6:	f000 f8d1 	bl	800f96c <__malloc_lock>
 800f7ca:	6833      	ldr	r3, [r6, #0]
 800f7cc:	461c      	mov	r4, r3
 800f7ce:	bb34      	cbnz	r4, 800f81e <_malloc_r+0x82>
 800f7d0:	4629      	mov	r1, r5
 800f7d2:	4638      	mov	r0, r7
 800f7d4:	f7ff ffc2 	bl	800f75c <sbrk_aligned>
 800f7d8:	1c43      	adds	r3, r0, #1
 800f7da:	4604      	mov	r4, r0
 800f7dc:	d14d      	bne.n	800f87a <_malloc_r+0xde>
 800f7de:	6834      	ldr	r4, [r6, #0]
 800f7e0:	4626      	mov	r6, r4
 800f7e2:	2e00      	cmp	r6, #0
 800f7e4:	d140      	bne.n	800f868 <_malloc_r+0xcc>
 800f7e6:	6823      	ldr	r3, [r4, #0]
 800f7e8:	4631      	mov	r1, r6
 800f7ea:	4638      	mov	r0, r7
 800f7ec:	eb04 0803 	add.w	r8, r4, r3
 800f7f0:	f000 f852 	bl	800f898 <_sbrk_r>
 800f7f4:	4580      	cmp	r8, r0
 800f7f6:	d13a      	bne.n	800f86e <_malloc_r+0xd2>
 800f7f8:	6821      	ldr	r1, [r4, #0]
 800f7fa:	3503      	adds	r5, #3
 800f7fc:	1a6d      	subs	r5, r5, r1
 800f7fe:	f025 0503 	bic.w	r5, r5, #3
 800f802:	3508      	adds	r5, #8
 800f804:	2d0c      	cmp	r5, #12
 800f806:	bf38      	it	cc
 800f808:	250c      	movcc	r5, #12
 800f80a:	4629      	mov	r1, r5
 800f80c:	4638      	mov	r0, r7
 800f80e:	f7ff ffa5 	bl	800f75c <sbrk_aligned>
 800f812:	3001      	adds	r0, #1
 800f814:	d02b      	beq.n	800f86e <_malloc_r+0xd2>
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	442b      	add	r3, r5
 800f81a:	6023      	str	r3, [r4, #0]
 800f81c:	e00e      	b.n	800f83c <_malloc_r+0xa0>
 800f81e:	6822      	ldr	r2, [r4, #0]
 800f820:	1b52      	subs	r2, r2, r5
 800f822:	d41e      	bmi.n	800f862 <_malloc_r+0xc6>
 800f824:	2a0b      	cmp	r2, #11
 800f826:	d916      	bls.n	800f856 <_malloc_r+0xba>
 800f828:	1961      	adds	r1, r4, r5
 800f82a:	42a3      	cmp	r3, r4
 800f82c:	6025      	str	r5, [r4, #0]
 800f82e:	bf18      	it	ne
 800f830:	6059      	strne	r1, [r3, #4]
 800f832:	6863      	ldr	r3, [r4, #4]
 800f834:	bf08      	it	eq
 800f836:	6031      	streq	r1, [r6, #0]
 800f838:	5162      	str	r2, [r4, r5]
 800f83a:	604b      	str	r3, [r1, #4]
 800f83c:	4638      	mov	r0, r7
 800f83e:	f104 060b 	add.w	r6, r4, #11
 800f842:	f000 f899 	bl	800f978 <__malloc_unlock>
 800f846:	f026 0607 	bic.w	r6, r6, #7
 800f84a:	1d23      	adds	r3, r4, #4
 800f84c:	1af2      	subs	r2, r6, r3
 800f84e:	d0b6      	beq.n	800f7be <_malloc_r+0x22>
 800f850:	1b9b      	subs	r3, r3, r6
 800f852:	50a3      	str	r3, [r4, r2]
 800f854:	e7b3      	b.n	800f7be <_malloc_r+0x22>
 800f856:	6862      	ldr	r2, [r4, #4]
 800f858:	42a3      	cmp	r3, r4
 800f85a:	bf0c      	ite	eq
 800f85c:	6032      	streq	r2, [r6, #0]
 800f85e:	605a      	strne	r2, [r3, #4]
 800f860:	e7ec      	b.n	800f83c <_malloc_r+0xa0>
 800f862:	4623      	mov	r3, r4
 800f864:	6864      	ldr	r4, [r4, #4]
 800f866:	e7b2      	b.n	800f7ce <_malloc_r+0x32>
 800f868:	4634      	mov	r4, r6
 800f86a:	6876      	ldr	r6, [r6, #4]
 800f86c:	e7b9      	b.n	800f7e2 <_malloc_r+0x46>
 800f86e:	230c      	movs	r3, #12
 800f870:	603b      	str	r3, [r7, #0]
 800f872:	4638      	mov	r0, r7
 800f874:	f000 f880 	bl	800f978 <__malloc_unlock>
 800f878:	e7a1      	b.n	800f7be <_malloc_r+0x22>
 800f87a:	6025      	str	r5, [r4, #0]
 800f87c:	e7de      	b.n	800f83c <_malloc_r+0xa0>
 800f87e:	bf00      	nop
 800f880:	240009fc 	.word	0x240009fc
 800f884:	00000000 	.word	0x00000000

0800f888 <nan>:
 800f888:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f890 <nan+0x8>
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop
 800f890:	00000000 	.word	0x00000000
 800f894:	7ff80000 	.word	0x7ff80000

0800f898 <_sbrk_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4d06      	ldr	r5, [pc, #24]	; (800f8b4 <_sbrk_r+0x1c>)
 800f89c:	2300      	movs	r3, #0
 800f89e:	4604      	mov	r4, r0
 800f8a0:	4608      	mov	r0, r1
 800f8a2:	602b      	str	r3, [r5, #0]
 800f8a4:	f7f3 fc92 	bl	80031cc <_sbrk>
 800f8a8:	1c43      	adds	r3, r0, #1
 800f8aa:	d102      	bne.n	800f8b2 <_sbrk_r+0x1a>
 800f8ac:	682b      	ldr	r3, [r5, #0]
 800f8ae:	b103      	cbz	r3, 800f8b2 <_sbrk_r+0x1a>
 800f8b0:	6023      	str	r3, [r4, #0]
 800f8b2:	bd38      	pop	{r3, r4, r5, pc}
 800f8b4:	24000a04 	.word	0x24000a04

0800f8b8 <strncmp>:
 800f8b8:	b510      	push	{r4, lr}
 800f8ba:	b17a      	cbz	r2, 800f8dc <strncmp+0x24>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	3901      	subs	r1, #1
 800f8c0:	1884      	adds	r4, r0, r2
 800f8c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f8c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f8ca:	4290      	cmp	r0, r2
 800f8cc:	d101      	bne.n	800f8d2 <strncmp+0x1a>
 800f8ce:	42a3      	cmp	r3, r4
 800f8d0:	d101      	bne.n	800f8d6 <strncmp+0x1e>
 800f8d2:	1a80      	subs	r0, r0, r2
 800f8d4:	bd10      	pop	{r4, pc}
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d1f3      	bne.n	800f8c2 <strncmp+0xa>
 800f8da:	e7fa      	b.n	800f8d2 <strncmp+0x1a>
 800f8dc:	4610      	mov	r0, r2
 800f8de:	e7f9      	b.n	800f8d4 <strncmp+0x1c>

0800f8e0 <__ascii_wctomb>:
 800f8e0:	b149      	cbz	r1, 800f8f6 <__ascii_wctomb+0x16>
 800f8e2:	2aff      	cmp	r2, #255	; 0xff
 800f8e4:	bf85      	ittet	hi
 800f8e6:	238a      	movhi	r3, #138	; 0x8a
 800f8e8:	6003      	strhi	r3, [r0, #0]
 800f8ea:	700a      	strbls	r2, [r1, #0]
 800f8ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800f8f0:	bf98      	it	ls
 800f8f2:	2001      	movls	r0, #1
 800f8f4:	4770      	bx	lr
 800f8f6:	4608      	mov	r0, r1
 800f8f8:	4770      	bx	lr
	...

0800f8fc <__assert_func>:
 800f8fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8fe:	4614      	mov	r4, r2
 800f900:	461a      	mov	r2, r3
 800f902:	4b09      	ldr	r3, [pc, #36]	; (800f928 <__assert_func+0x2c>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	4605      	mov	r5, r0
 800f908:	68d8      	ldr	r0, [r3, #12]
 800f90a:	b14c      	cbz	r4, 800f920 <__assert_func+0x24>
 800f90c:	4b07      	ldr	r3, [pc, #28]	; (800f92c <__assert_func+0x30>)
 800f90e:	9100      	str	r1, [sp, #0]
 800f910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f914:	4906      	ldr	r1, [pc, #24]	; (800f930 <__assert_func+0x34>)
 800f916:	462b      	mov	r3, r5
 800f918:	f000 f80e 	bl	800f938 <fiprintf>
 800f91c:	f000 fc2c 	bl	8010178 <abort>
 800f920:	4b04      	ldr	r3, [pc, #16]	; (800f934 <__assert_func+0x38>)
 800f922:	461c      	mov	r4, r3
 800f924:	e7f3      	b.n	800f90e <__assert_func+0x12>
 800f926:	bf00      	nop
 800f928:	2400007c 	.word	0x2400007c
 800f92c:	08011344 	.word	0x08011344
 800f930:	08011351 	.word	0x08011351
 800f934:	0801137f 	.word	0x0801137f

0800f938 <fiprintf>:
 800f938:	b40e      	push	{r1, r2, r3}
 800f93a:	b503      	push	{r0, r1, lr}
 800f93c:	4601      	mov	r1, r0
 800f93e:	ab03      	add	r3, sp, #12
 800f940:	4805      	ldr	r0, [pc, #20]	; (800f958 <fiprintf+0x20>)
 800f942:	f853 2b04 	ldr.w	r2, [r3], #4
 800f946:	6800      	ldr	r0, [r0, #0]
 800f948:	9301      	str	r3, [sp, #4]
 800f94a:	f000 f891 	bl	800fa70 <_vfiprintf_r>
 800f94e:	b002      	add	sp, #8
 800f950:	f85d eb04 	ldr.w	lr, [sp], #4
 800f954:	b003      	add	sp, #12
 800f956:	4770      	bx	lr
 800f958:	2400007c 	.word	0x2400007c

0800f95c <malloc>:
 800f95c:	4b02      	ldr	r3, [pc, #8]	; (800f968 <malloc+0xc>)
 800f95e:	4601      	mov	r1, r0
 800f960:	6818      	ldr	r0, [r3, #0]
 800f962:	f7ff bf1b 	b.w	800f79c <_malloc_r>
 800f966:	bf00      	nop
 800f968:	2400007c 	.word	0x2400007c

0800f96c <__malloc_lock>:
 800f96c:	4801      	ldr	r0, [pc, #4]	; (800f974 <__malloc_lock+0x8>)
 800f96e:	f000 bdc3 	b.w	80104f8 <__retarget_lock_acquire_recursive>
 800f972:	bf00      	nop
 800f974:	24000a08 	.word	0x24000a08

0800f978 <__malloc_unlock>:
 800f978:	4801      	ldr	r0, [pc, #4]	; (800f980 <__malloc_unlock+0x8>)
 800f97a:	f000 bdbe 	b.w	80104fa <__retarget_lock_release_recursive>
 800f97e:	bf00      	nop
 800f980:	24000a08 	.word	0x24000a08

0800f984 <_free_r>:
 800f984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f986:	2900      	cmp	r1, #0
 800f988:	d044      	beq.n	800fa14 <_free_r+0x90>
 800f98a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f98e:	9001      	str	r0, [sp, #4]
 800f990:	2b00      	cmp	r3, #0
 800f992:	f1a1 0404 	sub.w	r4, r1, #4
 800f996:	bfb8      	it	lt
 800f998:	18e4      	addlt	r4, r4, r3
 800f99a:	f7ff ffe7 	bl	800f96c <__malloc_lock>
 800f99e:	4a1e      	ldr	r2, [pc, #120]	; (800fa18 <_free_r+0x94>)
 800f9a0:	9801      	ldr	r0, [sp, #4]
 800f9a2:	6813      	ldr	r3, [r2, #0]
 800f9a4:	b933      	cbnz	r3, 800f9b4 <_free_r+0x30>
 800f9a6:	6063      	str	r3, [r4, #4]
 800f9a8:	6014      	str	r4, [r2, #0]
 800f9aa:	b003      	add	sp, #12
 800f9ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9b0:	f7ff bfe2 	b.w	800f978 <__malloc_unlock>
 800f9b4:	42a3      	cmp	r3, r4
 800f9b6:	d908      	bls.n	800f9ca <_free_r+0x46>
 800f9b8:	6825      	ldr	r5, [r4, #0]
 800f9ba:	1961      	adds	r1, r4, r5
 800f9bc:	428b      	cmp	r3, r1
 800f9be:	bf01      	itttt	eq
 800f9c0:	6819      	ldreq	r1, [r3, #0]
 800f9c2:	685b      	ldreq	r3, [r3, #4]
 800f9c4:	1949      	addeq	r1, r1, r5
 800f9c6:	6021      	streq	r1, [r4, #0]
 800f9c8:	e7ed      	b.n	800f9a6 <_free_r+0x22>
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	685b      	ldr	r3, [r3, #4]
 800f9ce:	b10b      	cbz	r3, 800f9d4 <_free_r+0x50>
 800f9d0:	42a3      	cmp	r3, r4
 800f9d2:	d9fa      	bls.n	800f9ca <_free_r+0x46>
 800f9d4:	6811      	ldr	r1, [r2, #0]
 800f9d6:	1855      	adds	r5, r2, r1
 800f9d8:	42a5      	cmp	r5, r4
 800f9da:	d10b      	bne.n	800f9f4 <_free_r+0x70>
 800f9dc:	6824      	ldr	r4, [r4, #0]
 800f9de:	4421      	add	r1, r4
 800f9e0:	1854      	adds	r4, r2, r1
 800f9e2:	42a3      	cmp	r3, r4
 800f9e4:	6011      	str	r1, [r2, #0]
 800f9e6:	d1e0      	bne.n	800f9aa <_free_r+0x26>
 800f9e8:	681c      	ldr	r4, [r3, #0]
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	6053      	str	r3, [r2, #4]
 800f9ee:	4421      	add	r1, r4
 800f9f0:	6011      	str	r1, [r2, #0]
 800f9f2:	e7da      	b.n	800f9aa <_free_r+0x26>
 800f9f4:	d902      	bls.n	800f9fc <_free_r+0x78>
 800f9f6:	230c      	movs	r3, #12
 800f9f8:	6003      	str	r3, [r0, #0]
 800f9fa:	e7d6      	b.n	800f9aa <_free_r+0x26>
 800f9fc:	6825      	ldr	r5, [r4, #0]
 800f9fe:	1961      	adds	r1, r4, r5
 800fa00:	428b      	cmp	r3, r1
 800fa02:	bf04      	itt	eq
 800fa04:	6819      	ldreq	r1, [r3, #0]
 800fa06:	685b      	ldreq	r3, [r3, #4]
 800fa08:	6063      	str	r3, [r4, #4]
 800fa0a:	bf04      	itt	eq
 800fa0c:	1949      	addeq	r1, r1, r5
 800fa0e:	6021      	streq	r1, [r4, #0]
 800fa10:	6054      	str	r4, [r2, #4]
 800fa12:	e7ca      	b.n	800f9aa <_free_r+0x26>
 800fa14:	b003      	add	sp, #12
 800fa16:	bd30      	pop	{r4, r5, pc}
 800fa18:	240009fc 	.word	0x240009fc

0800fa1c <__sfputc_r>:
 800fa1c:	6893      	ldr	r3, [r2, #8]
 800fa1e:	3b01      	subs	r3, #1
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	b410      	push	{r4}
 800fa24:	6093      	str	r3, [r2, #8]
 800fa26:	da08      	bge.n	800fa3a <__sfputc_r+0x1e>
 800fa28:	6994      	ldr	r4, [r2, #24]
 800fa2a:	42a3      	cmp	r3, r4
 800fa2c:	db01      	blt.n	800fa32 <__sfputc_r+0x16>
 800fa2e:	290a      	cmp	r1, #10
 800fa30:	d103      	bne.n	800fa3a <__sfputc_r+0x1e>
 800fa32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa36:	f000 badf 	b.w	800fff8 <__swbuf_r>
 800fa3a:	6813      	ldr	r3, [r2, #0]
 800fa3c:	1c58      	adds	r0, r3, #1
 800fa3e:	6010      	str	r0, [r2, #0]
 800fa40:	7019      	strb	r1, [r3, #0]
 800fa42:	4608      	mov	r0, r1
 800fa44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa48:	4770      	bx	lr

0800fa4a <__sfputs_r>:
 800fa4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa4c:	4606      	mov	r6, r0
 800fa4e:	460f      	mov	r7, r1
 800fa50:	4614      	mov	r4, r2
 800fa52:	18d5      	adds	r5, r2, r3
 800fa54:	42ac      	cmp	r4, r5
 800fa56:	d101      	bne.n	800fa5c <__sfputs_r+0x12>
 800fa58:	2000      	movs	r0, #0
 800fa5a:	e007      	b.n	800fa6c <__sfputs_r+0x22>
 800fa5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa60:	463a      	mov	r2, r7
 800fa62:	4630      	mov	r0, r6
 800fa64:	f7ff ffda 	bl	800fa1c <__sfputc_r>
 800fa68:	1c43      	adds	r3, r0, #1
 800fa6a:	d1f3      	bne.n	800fa54 <__sfputs_r+0xa>
 800fa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa70 <_vfiprintf_r>:
 800fa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa74:	460d      	mov	r5, r1
 800fa76:	b09d      	sub	sp, #116	; 0x74
 800fa78:	4614      	mov	r4, r2
 800fa7a:	4698      	mov	r8, r3
 800fa7c:	4606      	mov	r6, r0
 800fa7e:	b118      	cbz	r0, 800fa88 <_vfiprintf_r+0x18>
 800fa80:	6983      	ldr	r3, [r0, #24]
 800fa82:	b90b      	cbnz	r3, 800fa88 <_vfiprintf_r+0x18>
 800fa84:	f000 fc9a 	bl	80103bc <__sinit>
 800fa88:	4b89      	ldr	r3, [pc, #548]	; (800fcb0 <_vfiprintf_r+0x240>)
 800fa8a:	429d      	cmp	r5, r3
 800fa8c:	d11b      	bne.n	800fac6 <_vfiprintf_r+0x56>
 800fa8e:	6875      	ldr	r5, [r6, #4]
 800fa90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa92:	07d9      	lsls	r1, r3, #31
 800fa94:	d405      	bmi.n	800faa2 <_vfiprintf_r+0x32>
 800fa96:	89ab      	ldrh	r3, [r5, #12]
 800fa98:	059a      	lsls	r2, r3, #22
 800fa9a:	d402      	bmi.n	800faa2 <_vfiprintf_r+0x32>
 800fa9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa9e:	f000 fd2b 	bl	80104f8 <__retarget_lock_acquire_recursive>
 800faa2:	89ab      	ldrh	r3, [r5, #12]
 800faa4:	071b      	lsls	r3, r3, #28
 800faa6:	d501      	bpl.n	800faac <_vfiprintf_r+0x3c>
 800faa8:	692b      	ldr	r3, [r5, #16]
 800faaa:	b9eb      	cbnz	r3, 800fae8 <_vfiprintf_r+0x78>
 800faac:	4629      	mov	r1, r5
 800faae:	4630      	mov	r0, r6
 800fab0:	f000 faf4 	bl	801009c <__swsetup_r>
 800fab4:	b1c0      	cbz	r0, 800fae8 <_vfiprintf_r+0x78>
 800fab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fab8:	07dc      	lsls	r4, r3, #31
 800faba:	d50e      	bpl.n	800fada <_vfiprintf_r+0x6a>
 800fabc:	f04f 30ff 	mov.w	r0, #4294967295
 800fac0:	b01d      	add	sp, #116	; 0x74
 800fac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac6:	4b7b      	ldr	r3, [pc, #492]	; (800fcb4 <_vfiprintf_r+0x244>)
 800fac8:	429d      	cmp	r5, r3
 800faca:	d101      	bne.n	800fad0 <_vfiprintf_r+0x60>
 800facc:	68b5      	ldr	r5, [r6, #8]
 800face:	e7df      	b.n	800fa90 <_vfiprintf_r+0x20>
 800fad0:	4b79      	ldr	r3, [pc, #484]	; (800fcb8 <_vfiprintf_r+0x248>)
 800fad2:	429d      	cmp	r5, r3
 800fad4:	bf08      	it	eq
 800fad6:	68f5      	ldreq	r5, [r6, #12]
 800fad8:	e7da      	b.n	800fa90 <_vfiprintf_r+0x20>
 800fada:	89ab      	ldrh	r3, [r5, #12]
 800fadc:	0598      	lsls	r0, r3, #22
 800fade:	d4ed      	bmi.n	800fabc <_vfiprintf_r+0x4c>
 800fae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fae2:	f000 fd0a 	bl	80104fa <__retarget_lock_release_recursive>
 800fae6:	e7e9      	b.n	800fabc <_vfiprintf_r+0x4c>
 800fae8:	2300      	movs	r3, #0
 800faea:	9309      	str	r3, [sp, #36]	; 0x24
 800faec:	2320      	movs	r3, #32
 800faee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800faf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800faf6:	2330      	movs	r3, #48	; 0x30
 800faf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fcbc <_vfiprintf_r+0x24c>
 800fafc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb00:	f04f 0901 	mov.w	r9, #1
 800fb04:	4623      	mov	r3, r4
 800fb06:	469a      	mov	sl, r3
 800fb08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb0c:	b10a      	cbz	r2, 800fb12 <_vfiprintf_r+0xa2>
 800fb0e:	2a25      	cmp	r2, #37	; 0x25
 800fb10:	d1f9      	bne.n	800fb06 <_vfiprintf_r+0x96>
 800fb12:	ebba 0b04 	subs.w	fp, sl, r4
 800fb16:	d00b      	beq.n	800fb30 <_vfiprintf_r+0xc0>
 800fb18:	465b      	mov	r3, fp
 800fb1a:	4622      	mov	r2, r4
 800fb1c:	4629      	mov	r1, r5
 800fb1e:	4630      	mov	r0, r6
 800fb20:	f7ff ff93 	bl	800fa4a <__sfputs_r>
 800fb24:	3001      	adds	r0, #1
 800fb26:	f000 80aa 	beq.w	800fc7e <_vfiprintf_r+0x20e>
 800fb2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb2c:	445a      	add	r2, fp
 800fb2e:	9209      	str	r2, [sp, #36]	; 0x24
 800fb30:	f89a 3000 	ldrb.w	r3, [sl]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f000 80a2 	beq.w	800fc7e <_vfiprintf_r+0x20e>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb44:	f10a 0a01 	add.w	sl, sl, #1
 800fb48:	9304      	str	r3, [sp, #16]
 800fb4a:	9307      	str	r3, [sp, #28]
 800fb4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb50:	931a      	str	r3, [sp, #104]	; 0x68
 800fb52:	4654      	mov	r4, sl
 800fb54:	2205      	movs	r2, #5
 800fb56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb5a:	4858      	ldr	r0, [pc, #352]	; (800fcbc <_vfiprintf_r+0x24c>)
 800fb5c:	f7f0 fbc8 	bl	80002f0 <memchr>
 800fb60:	9a04      	ldr	r2, [sp, #16]
 800fb62:	b9d8      	cbnz	r0, 800fb9c <_vfiprintf_r+0x12c>
 800fb64:	06d1      	lsls	r1, r2, #27
 800fb66:	bf44      	itt	mi
 800fb68:	2320      	movmi	r3, #32
 800fb6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb6e:	0713      	lsls	r3, r2, #28
 800fb70:	bf44      	itt	mi
 800fb72:	232b      	movmi	r3, #43	; 0x2b
 800fb74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb78:	f89a 3000 	ldrb.w	r3, [sl]
 800fb7c:	2b2a      	cmp	r3, #42	; 0x2a
 800fb7e:	d015      	beq.n	800fbac <_vfiprintf_r+0x13c>
 800fb80:	9a07      	ldr	r2, [sp, #28]
 800fb82:	4654      	mov	r4, sl
 800fb84:	2000      	movs	r0, #0
 800fb86:	f04f 0c0a 	mov.w	ip, #10
 800fb8a:	4621      	mov	r1, r4
 800fb8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb90:	3b30      	subs	r3, #48	; 0x30
 800fb92:	2b09      	cmp	r3, #9
 800fb94:	d94e      	bls.n	800fc34 <_vfiprintf_r+0x1c4>
 800fb96:	b1b0      	cbz	r0, 800fbc6 <_vfiprintf_r+0x156>
 800fb98:	9207      	str	r2, [sp, #28]
 800fb9a:	e014      	b.n	800fbc6 <_vfiprintf_r+0x156>
 800fb9c:	eba0 0308 	sub.w	r3, r0, r8
 800fba0:	fa09 f303 	lsl.w	r3, r9, r3
 800fba4:	4313      	orrs	r3, r2
 800fba6:	9304      	str	r3, [sp, #16]
 800fba8:	46a2      	mov	sl, r4
 800fbaa:	e7d2      	b.n	800fb52 <_vfiprintf_r+0xe2>
 800fbac:	9b03      	ldr	r3, [sp, #12]
 800fbae:	1d19      	adds	r1, r3, #4
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	9103      	str	r1, [sp, #12]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	bfbb      	ittet	lt
 800fbb8:	425b      	neglt	r3, r3
 800fbba:	f042 0202 	orrlt.w	r2, r2, #2
 800fbbe:	9307      	strge	r3, [sp, #28]
 800fbc0:	9307      	strlt	r3, [sp, #28]
 800fbc2:	bfb8      	it	lt
 800fbc4:	9204      	strlt	r2, [sp, #16]
 800fbc6:	7823      	ldrb	r3, [r4, #0]
 800fbc8:	2b2e      	cmp	r3, #46	; 0x2e
 800fbca:	d10c      	bne.n	800fbe6 <_vfiprintf_r+0x176>
 800fbcc:	7863      	ldrb	r3, [r4, #1]
 800fbce:	2b2a      	cmp	r3, #42	; 0x2a
 800fbd0:	d135      	bne.n	800fc3e <_vfiprintf_r+0x1ce>
 800fbd2:	9b03      	ldr	r3, [sp, #12]
 800fbd4:	1d1a      	adds	r2, r3, #4
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	9203      	str	r2, [sp, #12]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	bfb8      	it	lt
 800fbde:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbe2:	3402      	adds	r4, #2
 800fbe4:	9305      	str	r3, [sp, #20]
 800fbe6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fccc <_vfiprintf_r+0x25c>
 800fbea:	7821      	ldrb	r1, [r4, #0]
 800fbec:	2203      	movs	r2, #3
 800fbee:	4650      	mov	r0, sl
 800fbf0:	f7f0 fb7e 	bl	80002f0 <memchr>
 800fbf4:	b140      	cbz	r0, 800fc08 <_vfiprintf_r+0x198>
 800fbf6:	2340      	movs	r3, #64	; 0x40
 800fbf8:	eba0 000a 	sub.w	r0, r0, sl
 800fbfc:	fa03 f000 	lsl.w	r0, r3, r0
 800fc00:	9b04      	ldr	r3, [sp, #16]
 800fc02:	4303      	orrs	r3, r0
 800fc04:	3401      	adds	r4, #1
 800fc06:	9304      	str	r3, [sp, #16]
 800fc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc0c:	482c      	ldr	r0, [pc, #176]	; (800fcc0 <_vfiprintf_r+0x250>)
 800fc0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc12:	2206      	movs	r2, #6
 800fc14:	f7f0 fb6c 	bl	80002f0 <memchr>
 800fc18:	2800      	cmp	r0, #0
 800fc1a:	d03f      	beq.n	800fc9c <_vfiprintf_r+0x22c>
 800fc1c:	4b29      	ldr	r3, [pc, #164]	; (800fcc4 <_vfiprintf_r+0x254>)
 800fc1e:	bb1b      	cbnz	r3, 800fc68 <_vfiprintf_r+0x1f8>
 800fc20:	9b03      	ldr	r3, [sp, #12]
 800fc22:	3307      	adds	r3, #7
 800fc24:	f023 0307 	bic.w	r3, r3, #7
 800fc28:	3308      	adds	r3, #8
 800fc2a:	9303      	str	r3, [sp, #12]
 800fc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc2e:	443b      	add	r3, r7
 800fc30:	9309      	str	r3, [sp, #36]	; 0x24
 800fc32:	e767      	b.n	800fb04 <_vfiprintf_r+0x94>
 800fc34:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc38:	460c      	mov	r4, r1
 800fc3a:	2001      	movs	r0, #1
 800fc3c:	e7a5      	b.n	800fb8a <_vfiprintf_r+0x11a>
 800fc3e:	2300      	movs	r3, #0
 800fc40:	3401      	adds	r4, #1
 800fc42:	9305      	str	r3, [sp, #20]
 800fc44:	4619      	mov	r1, r3
 800fc46:	f04f 0c0a 	mov.w	ip, #10
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc50:	3a30      	subs	r2, #48	; 0x30
 800fc52:	2a09      	cmp	r2, #9
 800fc54:	d903      	bls.n	800fc5e <_vfiprintf_r+0x1ee>
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d0c5      	beq.n	800fbe6 <_vfiprintf_r+0x176>
 800fc5a:	9105      	str	r1, [sp, #20]
 800fc5c:	e7c3      	b.n	800fbe6 <_vfiprintf_r+0x176>
 800fc5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc62:	4604      	mov	r4, r0
 800fc64:	2301      	movs	r3, #1
 800fc66:	e7f0      	b.n	800fc4a <_vfiprintf_r+0x1da>
 800fc68:	ab03      	add	r3, sp, #12
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	462a      	mov	r2, r5
 800fc6e:	4b16      	ldr	r3, [pc, #88]	; (800fcc8 <_vfiprintf_r+0x258>)
 800fc70:	a904      	add	r1, sp, #16
 800fc72:	4630      	mov	r0, r6
 800fc74:	f3af 8000 	nop.w
 800fc78:	4607      	mov	r7, r0
 800fc7a:	1c78      	adds	r0, r7, #1
 800fc7c:	d1d6      	bne.n	800fc2c <_vfiprintf_r+0x1bc>
 800fc7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc80:	07d9      	lsls	r1, r3, #31
 800fc82:	d405      	bmi.n	800fc90 <_vfiprintf_r+0x220>
 800fc84:	89ab      	ldrh	r3, [r5, #12]
 800fc86:	059a      	lsls	r2, r3, #22
 800fc88:	d402      	bmi.n	800fc90 <_vfiprintf_r+0x220>
 800fc8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc8c:	f000 fc35 	bl	80104fa <__retarget_lock_release_recursive>
 800fc90:	89ab      	ldrh	r3, [r5, #12]
 800fc92:	065b      	lsls	r3, r3, #25
 800fc94:	f53f af12 	bmi.w	800fabc <_vfiprintf_r+0x4c>
 800fc98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc9a:	e711      	b.n	800fac0 <_vfiprintf_r+0x50>
 800fc9c:	ab03      	add	r3, sp, #12
 800fc9e:	9300      	str	r3, [sp, #0]
 800fca0:	462a      	mov	r2, r5
 800fca2:	4b09      	ldr	r3, [pc, #36]	; (800fcc8 <_vfiprintf_r+0x258>)
 800fca4:	a904      	add	r1, sp, #16
 800fca6:	4630      	mov	r0, r6
 800fca8:	f000 f880 	bl	800fdac <_printf_i>
 800fcac:	e7e4      	b.n	800fc78 <_vfiprintf_r+0x208>
 800fcae:	bf00      	nop
 800fcb0:	080114d4 	.word	0x080114d4
 800fcb4:	080114f4 	.word	0x080114f4
 800fcb8:	080114b4 	.word	0x080114b4
 800fcbc:	08011481 	.word	0x08011481
 800fcc0:	0801148b 	.word	0x0801148b
 800fcc4:	00000000 	.word	0x00000000
 800fcc8:	0800fa4b 	.word	0x0800fa4b
 800fccc:	08011487 	.word	0x08011487

0800fcd0 <_printf_common>:
 800fcd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd4:	4616      	mov	r6, r2
 800fcd6:	4699      	mov	r9, r3
 800fcd8:	688a      	ldr	r2, [r1, #8]
 800fcda:	690b      	ldr	r3, [r1, #16]
 800fcdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fce0:	4293      	cmp	r3, r2
 800fce2:	bfb8      	it	lt
 800fce4:	4613      	movlt	r3, r2
 800fce6:	6033      	str	r3, [r6, #0]
 800fce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fcec:	4607      	mov	r7, r0
 800fcee:	460c      	mov	r4, r1
 800fcf0:	b10a      	cbz	r2, 800fcf6 <_printf_common+0x26>
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	6033      	str	r3, [r6, #0]
 800fcf6:	6823      	ldr	r3, [r4, #0]
 800fcf8:	0699      	lsls	r1, r3, #26
 800fcfa:	bf42      	ittt	mi
 800fcfc:	6833      	ldrmi	r3, [r6, #0]
 800fcfe:	3302      	addmi	r3, #2
 800fd00:	6033      	strmi	r3, [r6, #0]
 800fd02:	6825      	ldr	r5, [r4, #0]
 800fd04:	f015 0506 	ands.w	r5, r5, #6
 800fd08:	d106      	bne.n	800fd18 <_printf_common+0x48>
 800fd0a:	f104 0a19 	add.w	sl, r4, #25
 800fd0e:	68e3      	ldr	r3, [r4, #12]
 800fd10:	6832      	ldr	r2, [r6, #0]
 800fd12:	1a9b      	subs	r3, r3, r2
 800fd14:	42ab      	cmp	r3, r5
 800fd16:	dc26      	bgt.n	800fd66 <_printf_common+0x96>
 800fd18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd1c:	1e13      	subs	r3, r2, #0
 800fd1e:	6822      	ldr	r2, [r4, #0]
 800fd20:	bf18      	it	ne
 800fd22:	2301      	movne	r3, #1
 800fd24:	0692      	lsls	r2, r2, #26
 800fd26:	d42b      	bmi.n	800fd80 <_printf_common+0xb0>
 800fd28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	4638      	mov	r0, r7
 800fd30:	47c0      	blx	r8
 800fd32:	3001      	adds	r0, #1
 800fd34:	d01e      	beq.n	800fd74 <_printf_common+0xa4>
 800fd36:	6823      	ldr	r3, [r4, #0]
 800fd38:	68e5      	ldr	r5, [r4, #12]
 800fd3a:	6832      	ldr	r2, [r6, #0]
 800fd3c:	f003 0306 	and.w	r3, r3, #6
 800fd40:	2b04      	cmp	r3, #4
 800fd42:	bf08      	it	eq
 800fd44:	1aad      	subeq	r5, r5, r2
 800fd46:	68a3      	ldr	r3, [r4, #8]
 800fd48:	6922      	ldr	r2, [r4, #16]
 800fd4a:	bf0c      	ite	eq
 800fd4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd50:	2500      	movne	r5, #0
 800fd52:	4293      	cmp	r3, r2
 800fd54:	bfc4      	itt	gt
 800fd56:	1a9b      	subgt	r3, r3, r2
 800fd58:	18ed      	addgt	r5, r5, r3
 800fd5a:	2600      	movs	r6, #0
 800fd5c:	341a      	adds	r4, #26
 800fd5e:	42b5      	cmp	r5, r6
 800fd60:	d11a      	bne.n	800fd98 <_printf_common+0xc8>
 800fd62:	2000      	movs	r0, #0
 800fd64:	e008      	b.n	800fd78 <_printf_common+0xa8>
 800fd66:	2301      	movs	r3, #1
 800fd68:	4652      	mov	r2, sl
 800fd6a:	4649      	mov	r1, r9
 800fd6c:	4638      	mov	r0, r7
 800fd6e:	47c0      	blx	r8
 800fd70:	3001      	adds	r0, #1
 800fd72:	d103      	bne.n	800fd7c <_printf_common+0xac>
 800fd74:	f04f 30ff 	mov.w	r0, #4294967295
 800fd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd7c:	3501      	adds	r5, #1
 800fd7e:	e7c6      	b.n	800fd0e <_printf_common+0x3e>
 800fd80:	18e1      	adds	r1, r4, r3
 800fd82:	1c5a      	adds	r2, r3, #1
 800fd84:	2030      	movs	r0, #48	; 0x30
 800fd86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd8a:	4422      	add	r2, r4
 800fd8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd94:	3302      	adds	r3, #2
 800fd96:	e7c7      	b.n	800fd28 <_printf_common+0x58>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	4622      	mov	r2, r4
 800fd9c:	4649      	mov	r1, r9
 800fd9e:	4638      	mov	r0, r7
 800fda0:	47c0      	blx	r8
 800fda2:	3001      	adds	r0, #1
 800fda4:	d0e6      	beq.n	800fd74 <_printf_common+0xa4>
 800fda6:	3601      	adds	r6, #1
 800fda8:	e7d9      	b.n	800fd5e <_printf_common+0x8e>
	...

0800fdac <_printf_i>:
 800fdac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb0:	7e0f      	ldrb	r7, [r1, #24]
 800fdb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fdb4:	2f78      	cmp	r7, #120	; 0x78
 800fdb6:	4691      	mov	r9, r2
 800fdb8:	4680      	mov	r8, r0
 800fdba:	460c      	mov	r4, r1
 800fdbc:	469a      	mov	sl, r3
 800fdbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fdc2:	d807      	bhi.n	800fdd4 <_printf_i+0x28>
 800fdc4:	2f62      	cmp	r7, #98	; 0x62
 800fdc6:	d80a      	bhi.n	800fdde <_printf_i+0x32>
 800fdc8:	2f00      	cmp	r7, #0
 800fdca:	f000 80d8 	beq.w	800ff7e <_printf_i+0x1d2>
 800fdce:	2f58      	cmp	r7, #88	; 0x58
 800fdd0:	f000 80a3 	beq.w	800ff1a <_printf_i+0x16e>
 800fdd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fddc:	e03a      	b.n	800fe54 <_printf_i+0xa8>
 800fdde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fde2:	2b15      	cmp	r3, #21
 800fde4:	d8f6      	bhi.n	800fdd4 <_printf_i+0x28>
 800fde6:	a101      	add	r1, pc, #4	; (adr r1, 800fdec <_printf_i+0x40>)
 800fde8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fdec:	0800fe45 	.word	0x0800fe45
 800fdf0:	0800fe59 	.word	0x0800fe59
 800fdf4:	0800fdd5 	.word	0x0800fdd5
 800fdf8:	0800fdd5 	.word	0x0800fdd5
 800fdfc:	0800fdd5 	.word	0x0800fdd5
 800fe00:	0800fdd5 	.word	0x0800fdd5
 800fe04:	0800fe59 	.word	0x0800fe59
 800fe08:	0800fdd5 	.word	0x0800fdd5
 800fe0c:	0800fdd5 	.word	0x0800fdd5
 800fe10:	0800fdd5 	.word	0x0800fdd5
 800fe14:	0800fdd5 	.word	0x0800fdd5
 800fe18:	0800ff65 	.word	0x0800ff65
 800fe1c:	0800fe89 	.word	0x0800fe89
 800fe20:	0800ff47 	.word	0x0800ff47
 800fe24:	0800fdd5 	.word	0x0800fdd5
 800fe28:	0800fdd5 	.word	0x0800fdd5
 800fe2c:	0800ff87 	.word	0x0800ff87
 800fe30:	0800fdd5 	.word	0x0800fdd5
 800fe34:	0800fe89 	.word	0x0800fe89
 800fe38:	0800fdd5 	.word	0x0800fdd5
 800fe3c:	0800fdd5 	.word	0x0800fdd5
 800fe40:	0800ff4f 	.word	0x0800ff4f
 800fe44:	682b      	ldr	r3, [r5, #0]
 800fe46:	1d1a      	adds	r2, r3, #4
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	602a      	str	r2, [r5, #0]
 800fe4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe54:	2301      	movs	r3, #1
 800fe56:	e0a3      	b.n	800ffa0 <_printf_i+0x1f4>
 800fe58:	6820      	ldr	r0, [r4, #0]
 800fe5a:	6829      	ldr	r1, [r5, #0]
 800fe5c:	0606      	lsls	r6, r0, #24
 800fe5e:	f101 0304 	add.w	r3, r1, #4
 800fe62:	d50a      	bpl.n	800fe7a <_printf_i+0xce>
 800fe64:	680e      	ldr	r6, [r1, #0]
 800fe66:	602b      	str	r3, [r5, #0]
 800fe68:	2e00      	cmp	r6, #0
 800fe6a:	da03      	bge.n	800fe74 <_printf_i+0xc8>
 800fe6c:	232d      	movs	r3, #45	; 0x2d
 800fe6e:	4276      	negs	r6, r6
 800fe70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe74:	485e      	ldr	r0, [pc, #376]	; (800fff0 <_printf_i+0x244>)
 800fe76:	230a      	movs	r3, #10
 800fe78:	e019      	b.n	800feae <_printf_i+0x102>
 800fe7a:	680e      	ldr	r6, [r1, #0]
 800fe7c:	602b      	str	r3, [r5, #0]
 800fe7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe82:	bf18      	it	ne
 800fe84:	b236      	sxthne	r6, r6
 800fe86:	e7ef      	b.n	800fe68 <_printf_i+0xbc>
 800fe88:	682b      	ldr	r3, [r5, #0]
 800fe8a:	6820      	ldr	r0, [r4, #0]
 800fe8c:	1d19      	adds	r1, r3, #4
 800fe8e:	6029      	str	r1, [r5, #0]
 800fe90:	0601      	lsls	r1, r0, #24
 800fe92:	d501      	bpl.n	800fe98 <_printf_i+0xec>
 800fe94:	681e      	ldr	r6, [r3, #0]
 800fe96:	e002      	b.n	800fe9e <_printf_i+0xf2>
 800fe98:	0646      	lsls	r6, r0, #25
 800fe9a:	d5fb      	bpl.n	800fe94 <_printf_i+0xe8>
 800fe9c:	881e      	ldrh	r6, [r3, #0]
 800fe9e:	4854      	ldr	r0, [pc, #336]	; (800fff0 <_printf_i+0x244>)
 800fea0:	2f6f      	cmp	r7, #111	; 0x6f
 800fea2:	bf0c      	ite	eq
 800fea4:	2308      	moveq	r3, #8
 800fea6:	230a      	movne	r3, #10
 800fea8:	2100      	movs	r1, #0
 800feaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800feae:	6865      	ldr	r5, [r4, #4]
 800feb0:	60a5      	str	r5, [r4, #8]
 800feb2:	2d00      	cmp	r5, #0
 800feb4:	bfa2      	ittt	ge
 800feb6:	6821      	ldrge	r1, [r4, #0]
 800feb8:	f021 0104 	bicge.w	r1, r1, #4
 800febc:	6021      	strge	r1, [r4, #0]
 800febe:	b90e      	cbnz	r6, 800fec4 <_printf_i+0x118>
 800fec0:	2d00      	cmp	r5, #0
 800fec2:	d04d      	beq.n	800ff60 <_printf_i+0x1b4>
 800fec4:	4615      	mov	r5, r2
 800fec6:	fbb6 f1f3 	udiv	r1, r6, r3
 800feca:	fb03 6711 	mls	r7, r3, r1, r6
 800fece:	5dc7      	ldrb	r7, [r0, r7]
 800fed0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fed4:	4637      	mov	r7, r6
 800fed6:	42bb      	cmp	r3, r7
 800fed8:	460e      	mov	r6, r1
 800feda:	d9f4      	bls.n	800fec6 <_printf_i+0x11a>
 800fedc:	2b08      	cmp	r3, #8
 800fede:	d10b      	bne.n	800fef8 <_printf_i+0x14c>
 800fee0:	6823      	ldr	r3, [r4, #0]
 800fee2:	07de      	lsls	r6, r3, #31
 800fee4:	d508      	bpl.n	800fef8 <_printf_i+0x14c>
 800fee6:	6923      	ldr	r3, [r4, #16]
 800fee8:	6861      	ldr	r1, [r4, #4]
 800feea:	4299      	cmp	r1, r3
 800feec:	bfde      	ittt	le
 800feee:	2330      	movle	r3, #48	; 0x30
 800fef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fef4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fef8:	1b52      	subs	r2, r2, r5
 800fefa:	6122      	str	r2, [r4, #16]
 800fefc:	f8cd a000 	str.w	sl, [sp]
 800ff00:	464b      	mov	r3, r9
 800ff02:	aa03      	add	r2, sp, #12
 800ff04:	4621      	mov	r1, r4
 800ff06:	4640      	mov	r0, r8
 800ff08:	f7ff fee2 	bl	800fcd0 <_printf_common>
 800ff0c:	3001      	adds	r0, #1
 800ff0e:	d14c      	bne.n	800ffaa <_printf_i+0x1fe>
 800ff10:	f04f 30ff 	mov.w	r0, #4294967295
 800ff14:	b004      	add	sp, #16
 800ff16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff1a:	4835      	ldr	r0, [pc, #212]	; (800fff0 <_printf_i+0x244>)
 800ff1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ff20:	6829      	ldr	r1, [r5, #0]
 800ff22:	6823      	ldr	r3, [r4, #0]
 800ff24:	f851 6b04 	ldr.w	r6, [r1], #4
 800ff28:	6029      	str	r1, [r5, #0]
 800ff2a:	061d      	lsls	r5, r3, #24
 800ff2c:	d514      	bpl.n	800ff58 <_printf_i+0x1ac>
 800ff2e:	07df      	lsls	r7, r3, #31
 800ff30:	bf44      	itt	mi
 800ff32:	f043 0320 	orrmi.w	r3, r3, #32
 800ff36:	6023      	strmi	r3, [r4, #0]
 800ff38:	b91e      	cbnz	r6, 800ff42 <_printf_i+0x196>
 800ff3a:	6823      	ldr	r3, [r4, #0]
 800ff3c:	f023 0320 	bic.w	r3, r3, #32
 800ff40:	6023      	str	r3, [r4, #0]
 800ff42:	2310      	movs	r3, #16
 800ff44:	e7b0      	b.n	800fea8 <_printf_i+0xfc>
 800ff46:	6823      	ldr	r3, [r4, #0]
 800ff48:	f043 0320 	orr.w	r3, r3, #32
 800ff4c:	6023      	str	r3, [r4, #0]
 800ff4e:	2378      	movs	r3, #120	; 0x78
 800ff50:	4828      	ldr	r0, [pc, #160]	; (800fff4 <_printf_i+0x248>)
 800ff52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff56:	e7e3      	b.n	800ff20 <_printf_i+0x174>
 800ff58:	0659      	lsls	r1, r3, #25
 800ff5a:	bf48      	it	mi
 800ff5c:	b2b6      	uxthmi	r6, r6
 800ff5e:	e7e6      	b.n	800ff2e <_printf_i+0x182>
 800ff60:	4615      	mov	r5, r2
 800ff62:	e7bb      	b.n	800fedc <_printf_i+0x130>
 800ff64:	682b      	ldr	r3, [r5, #0]
 800ff66:	6826      	ldr	r6, [r4, #0]
 800ff68:	6961      	ldr	r1, [r4, #20]
 800ff6a:	1d18      	adds	r0, r3, #4
 800ff6c:	6028      	str	r0, [r5, #0]
 800ff6e:	0635      	lsls	r5, r6, #24
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	d501      	bpl.n	800ff78 <_printf_i+0x1cc>
 800ff74:	6019      	str	r1, [r3, #0]
 800ff76:	e002      	b.n	800ff7e <_printf_i+0x1d2>
 800ff78:	0670      	lsls	r0, r6, #25
 800ff7a:	d5fb      	bpl.n	800ff74 <_printf_i+0x1c8>
 800ff7c:	8019      	strh	r1, [r3, #0]
 800ff7e:	2300      	movs	r3, #0
 800ff80:	6123      	str	r3, [r4, #16]
 800ff82:	4615      	mov	r5, r2
 800ff84:	e7ba      	b.n	800fefc <_printf_i+0x150>
 800ff86:	682b      	ldr	r3, [r5, #0]
 800ff88:	1d1a      	adds	r2, r3, #4
 800ff8a:	602a      	str	r2, [r5, #0]
 800ff8c:	681d      	ldr	r5, [r3, #0]
 800ff8e:	6862      	ldr	r2, [r4, #4]
 800ff90:	2100      	movs	r1, #0
 800ff92:	4628      	mov	r0, r5
 800ff94:	f7f0 f9ac 	bl	80002f0 <memchr>
 800ff98:	b108      	cbz	r0, 800ff9e <_printf_i+0x1f2>
 800ff9a:	1b40      	subs	r0, r0, r5
 800ff9c:	6060      	str	r0, [r4, #4]
 800ff9e:	6863      	ldr	r3, [r4, #4]
 800ffa0:	6123      	str	r3, [r4, #16]
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffa8:	e7a8      	b.n	800fefc <_printf_i+0x150>
 800ffaa:	6923      	ldr	r3, [r4, #16]
 800ffac:	462a      	mov	r2, r5
 800ffae:	4649      	mov	r1, r9
 800ffb0:	4640      	mov	r0, r8
 800ffb2:	47d0      	blx	sl
 800ffb4:	3001      	adds	r0, #1
 800ffb6:	d0ab      	beq.n	800ff10 <_printf_i+0x164>
 800ffb8:	6823      	ldr	r3, [r4, #0]
 800ffba:	079b      	lsls	r3, r3, #30
 800ffbc:	d413      	bmi.n	800ffe6 <_printf_i+0x23a>
 800ffbe:	68e0      	ldr	r0, [r4, #12]
 800ffc0:	9b03      	ldr	r3, [sp, #12]
 800ffc2:	4298      	cmp	r0, r3
 800ffc4:	bfb8      	it	lt
 800ffc6:	4618      	movlt	r0, r3
 800ffc8:	e7a4      	b.n	800ff14 <_printf_i+0x168>
 800ffca:	2301      	movs	r3, #1
 800ffcc:	4632      	mov	r2, r6
 800ffce:	4649      	mov	r1, r9
 800ffd0:	4640      	mov	r0, r8
 800ffd2:	47d0      	blx	sl
 800ffd4:	3001      	adds	r0, #1
 800ffd6:	d09b      	beq.n	800ff10 <_printf_i+0x164>
 800ffd8:	3501      	adds	r5, #1
 800ffda:	68e3      	ldr	r3, [r4, #12]
 800ffdc:	9903      	ldr	r1, [sp, #12]
 800ffde:	1a5b      	subs	r3, r3, r1
 800ffe0:	42ab      	cmp	r3, r5
 800ffe2:	dcf2      	bgt.n	800ffca <_printf_i+0x21e>
 800ffe4:	e7eb      	b.n	800ffbe <_printf_i+0x212>
 800ffe6:	2500      	movs	r5, #0
 800ffe8:	f104 0619 	add.w	r6, r4, #25
 800ffec:	e7f5      	b.n	800ffda <_printf_i+0x22e>
 800ffee:	bf00      	nop
 800fff0:	08011492 	.word	0x08011492
 800fff4:	080114a3 	.word	0x080114a3

0800fff8 <__swbuf_r>:
 800fff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffa:	460e      	mov	r6, r1
 800fffc:	4614      	mov	r4, r2
 800fffe:	4605      	mov	r5, r0
 8010000:	b118      	cbz	r0, 801000a <__swbuf_r+0x12>
 8010002:	6983      	ldr	r3, [r0, #24]
 8010004:	b90b      	cbnz	r3, 801000a <__swbuf_r+0x12>
 8010006:	f000 f9d9 	bl	80103bc <__sinit>
 801000a:	4b21      	ldr	r3, [pc, #132]	; (8010090 <__swbuf_r+0x98>)
 801000c:	429c      	cmp	r4, r3
 801000e:	d12b      	bne.n	8010068 <__swbuf_r+0x70>
 8010010:	686c      	ldr	r4, [r5, #4]
 8010012:	69a3      	ldr	r3, [r4, #24]
 8010014:	60a3      	str	r3, [r4, #8]
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	071a      	lsls	r2, r3, #28
 801001a:	d52f      	bpl.n	801007c <__swbuf_r+0x84>
 801001c:	6923      	ldr	r3, [r4, #16]
 801001e:	b36b      	cbz	r3, 801007c <__swbuf_r+0x84>
 8010020:	6923      	ldr	r3, [r4, #16]
 8010022:	6820      	ldr	r0, [r4, #0]
 8010024:	1ac0      	subs	r0, r0, r3
 8010026:	6963      	ldr	r3, [r4, #20]
 8010028:	b2f6      	uxtb	r6, r6
 801002a:	4283      	cmp	r3, r0
 801002c:	4637      	mov	r7, r6
 801002e:	dc04      	bgt.n	801003a <__swbuf_r+0x42>
 8010030:	4621      	mov	r1, r4
 8010032:	4628      	mov	r0, r5
 8010034:	f000 f92e 	bl	8010294 <_fflush_r>
 8010038:	bb30      	cbnz	r0, 8010088 <__swbuf_r+0x90>
 801003a:	68a3      	ldr	r3, [r4, #8]
 801003c:	3b01      	subs	r3, #1
 801003e:	60a3      	str	r3, [r4, #8]
 8010040:	6823      	ldr	r3, [r4, #0]
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	6022      	str	r2, [r4, #0]
 8010046:	701e      	strb	r6, [r3, #0]
 8010048:	6963      	ldr	r3, [r4, #20]
 801004a:	3001      	adds	r0, #1
 801004c:	4283      	cmp	r3, r0
 801004e:	d004      	beq.n	801005a <__swbuf_r+0x62>
 8010050:	89a3      	ldrh	r3, [r4, #12]
 8010052:	07db      	lsls	r3, r3, #31
 8010054:	d506      	bpl.n	8010064 <__swbuf_r+0x6c>
 8010056:	2e0a      	cmp	r6, #10
 8010058:	d104      	bne.n	8010064 <__swbuf_r+0x6c>
 801005a:	4621      	mov	r1, r4
 801005c:	4628      	mov	r0, r5
 801005e:	f000 f919 	bl	8010294 <_fflush_r>
 8010062:	b988      	cbnz	r0, 8010088 <__swbuf_r+0x90>
 8010064:	4638      	mov	r0, r7
 8010066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010068:	4b0a      	ldr	r3, [pc, #40]	; (8010094 <__swbuf_r+0x9c>)
 801006a:	429c      	cmp	r4, r3
 801006c:	d101      	bne.n	8010072 <__swbuf_r+0x7a>
 801006e:	68ac      	ldr	r4, [r5, #8]
 8010070:	e7cf      	b.n	8010012 <__swbuf_r+0x1a>
 8010072:	4b09      	ldr	r3, [pc, #36]	; (8010098 <__swbuf_r+0xa0>)
 8010074:	429c      	cmp	r4, r3
 8010076:	bf08      	it	eq
 8010078:	68ec      	ldreq	r4, [r5, #12]
 801007a:	e7ca      	b.n	8010012 <__swbuf_r+0x1a>
 801007c:	4621      	mov	r1, r4
 801007e:	4628      	mov	r0, r5
 8010080:	f000 f80c 	bl	801009c <__swsetup_r>
 8010084:	2800      	cmp	r0, #0
 8010086:	d0cb      	beq.n	8010020 <__swbuf_r+0x28>
 8010088:	f04f 37ff 	mov.w	r7, #4294967295
 801008c:	e7ea      	b.n	8010064 <__swbuf_r+0x6c>
 801008e:	bf00      	nop
 8010090:	080114d4 	.word	0x080114d4
 8010094:	080114f4 	.word	0x080114f4
 8010098:	080114b4 	.word	0x080114b4

0801009c <__swsetup_r>:
 801009c:	4b32      	ldr	r3, [pc, #200]	; (8010168 <__swsetup_r+0xcc>)
 801009e:	b570      	push	{r4, r5, r6, lr}
 80100a0:	681d      	ldr	r5, [r3, #0]
 80100a2:	4606      	mov	r6, r0
 80100a4:	460c      	mov	r4, r1
 80100a6:	b125      	cbz	r5, 80100b2 <__swsetup_r+0x16>
 80100a8:	69ab      	ldr	r3, [r5, #24]
 80100aa:	b913      	cbnz	r3, 80100b2 <__swsetup_r+0x16>
 80100ac:	4628      	mov	r0, r5
 80100ae:	f000 f985 	bl	80103bc <__sinit>
 80100b2:	4b2e      	ldr	r3, [pc, #184]	; (801016c <__swsetup_r+0xd0>)
 80100b4:	429c      	cmp	r4, r3
 80100b6:	d10f      	bne.n	80100d8 <__swsetup_r+0x3c>
 80100b8:	686c      	ldr	r4, [r5, #4]
 80100ba:	89a3      	ldrh	r3, [r4, #12]
 80100bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100c0:	0719      	lsls	r1, r3, #28
 80100c2:	d42c      	bmi.n	801011e <__swsetup_r+0x82>
 80100c4:	06dd      	lsls	r5, r3, #27
 80100c6:	d411      	bmi.n	80100ec <__swsetup_r+0x50>
 80100c8:	2309      	movs	r3, #9
 80100ca:	6033      	str	r3, [r6, #0]
 80100cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80100d0:	81a3      	strh	r3, [r4, #12]
 80100d2:	f04f 30ff 	mov.w	r0, #4294967295
 80100d6:	e03e      	b.n	8010156 <__swsetup_r+0xba>
 80100d8:	4b25      	ldr	r3, [pc, #148]	; (8010170 <__swsetup_r+0xd4>)
 80100da:	429c      	cmp	r4, r3
 80100dc:	d101      	bne.n	80100e2 <__swsetup_r+0x46>
 80100de:	68ac      	ldr	r4, [r5, #8]
 80100e0:	e7eb      	b.n	80100ba <__swsetup_r+0x1e>
 80100e2:	4b24      	ldr	r3, [pc, #144]	; (8010174 <__swsetup_r+0xd8>)
 80100e4:	429c      	cmp	r4, r3
 80100e6:	bf08      	it	eq
 80100e8:	68ec      	ldreq	r4, [r5, #12]
 80100ea:	e7e6      	b.n	80100ba <__swsetup_r+0x1e>
 80100ec:	0758      	lsls	r0, r3, #29
 80100ee:	d512      	bpl.n	8010116 <__swsetup_r+0x7a>
 80100f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100f2:	b141      	cbz	r1, 8010106 <__swsetup_r+0x6a>
 80100f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100f8:	4299      	cmp	r1, r3
 80100fa:	d002      	beq.n	8010102 <__swsetup_r+0x66>
 80100fc:	4630      	mov	r0, r6
 80100fe:	f7ff fc41 	bl	800f984 <_free_r>
 8010102:	2300      	movs	r3, #0
 8010104:	6363      	str	r3, [r4, #52]	; 0x34
 8010106:	89a3      	ldrh	r3, [r4, #12]
 8010108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801010c:	81a3      	strh	r3, [r4, #12]
 801010e:	2300      	movs	r3, #0
 8010110:	6063      	str	r3, [r4, #4]
 8010112:	6923      	ldr	r3, [r4, #16]
 8010114:	6023      	str	r3, [r4, #0]
 8010116:	89a3      	ldrh	r3, [r4, #12]
 8010118:	f043 0308 	orr.w	r3, r3, #8
 801011c:	81a3      	strh	r3, [r4, #12]
 801011e:	6923      	ldr	r3, [r4, #16]
 8010120:	b94b      	cbnz	r3, 8010136 <__swsetup_r+0x9a>
 8010122:	89a3      	ldrh	r3, [r4, #12]
 8010124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801012c:	d003      	beq.n	8010136 <__swsetup_r+0x9a>
 801012e:	4621      	mov	r1, r4
 8010130:	4630      	mov	r0, r6
 8010132:	f000 fa09 	bl	8010548 <__smakebuf_r>
 8010136:	89a0      	ldrh	r0, [r4, #12]
 8010138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801013c:	f010 0301 	ands.w	r3, r0, #1
 8010140:	d00a      	beq.n	8010158 <__swsetup_r+0xbc>
 8010142:	2300      	movs	r3, #0
 8010144:	60a3      	str	r3, [r4, #8]
 8010146:	6963      	ldr	r3, [r4, #20]
 8010148:	425b      	negs	r3, r3
 801014a:	61a3      	str	r3, [r4, #24]
 801014c:	6923      	ldr	r3, [r4, #16]
 801014e:	b943      	cbnz	r3, 8010162 <__swsetup_r+0xc6>
 8010150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010154:	d1ba      	bne.n	80100cc <__swsetup_r+0x30>
 8010156:	bd70      	pop	{r4, r5, r6, pc}
 8010158:	0781      	lsls	r1, r0, #30
 801015a:	bf58      	it	pl
 801015c:	6963      	ldrpl	r3, [r4, #20]
 801015e:	60a3      	str	r3, [r4, #8]
 8010160:	e7f4      	b.n	801014c <__swsetup_r+0xb0>
 8010162:	2000      	movs	r0, #0
 8010164:	e7f7      	b.n	8010156 <__swsetup_r+0xba>
 8010166:	bf00      	nop
 8010168:	2400007c 	.word	0x2400007c
 801016c:	080114d4 	.word	0x080114d4
 8010170:	080114f4 	.word	0x080114f4
 8010174:	080114b4 	.word	0x080114b4

08010178 <abort>:
 8010178:	b508      	push	{r3, lr}
 801017a:	2006      	movs	r0, #6
 801017c:	f000 fa4c 	bl	8010618 <raise>
 8010180:	2001      	movs	r0, #1
 8010182:	f7f2 ffab 	bl	80030dc <_exit>
	...

08010188 <__sflush_r>:
 8010188:	898a      	ldrh	r2, [r1, #12]
 801018a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801018e:	4605      	mov	r5, r0
 8010190:	0710      	lsls	r0, r2, #28
 8010192:	460c      	mov	r4, r1
 8010194:	d458      	bmi.n	8010248 <__sflush_r+0xc0>
 8010196:	684b      	ldr	r3, [r1, #4]
 8010198:	2b00      	cmp	r3, #0
 801019a:	dc05      	bgt.n	80101a8 <__sflush_r+0x20>
 801019c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801019e:	2b00      	cmp	r3, #0
 80101a0:	dc02      	bgt.n	80101a8 <__sflush_r+0x20>
 80101a2:	2000      	movs	r0, #0
 80101a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101aa:	2e00      	cmp	r6, #0
 80101ac:	d0f9      	beq.n	80101a2 <__sflush_r+0x1a>
 80101ae:	2300      	movs	r3, #0
 80101b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80101b4:	682f      	ldr	r7, [r5, #0]
 80101b6:	602b      	str	r3, [r5, #0]
 80101b8:	d032      	beq.n	8010220 <__sflush_r+0x98>
 80101ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80101bc:	89a3      	ldrh	r3, [r4, #12]
 80101be:	075a      	lsls	r2, r3, #29
 80101c0:	d505      	bpl.n	80101ce <__sflush_r+0x46>
 80101c2:	6863      	ldr	r3, [r4, #4]
 80101c4:	1ac0      	subs	r0, r0, r3
 80101c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101c8:	b10b      	cbz	r3, 80101ce <__sflush_r+0x46>
 80101ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101cc:	1ac0      	subs	r0, r0, r3
 80101ce:	2300      	movs	r3, #0
 80101d0:	4602      	mov	r2, r0
 80101d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101d4:	6a21      	ldr	r1, [r4, #32]
 80101d6:	4628      	mov	r0, r5
 80101d8:	47b0      	blx	r6
 80101da:	1c43      	adds	r3, r0, #1
 80101dc:	89a3      	ldrh	r3, [r4, #12]
 80101de:	d106      	bne.n	80101ee <__sflush_r+0x66>
 80101e0:	6829      	ldr	r1, [r5, #0]
 80101e2:	291d      	cmp	r1, #29
 80101e4:	d82c      	bhi.n	8010240 <__sflush_r+0xb8>
 80101e6:	4a2a      	ldr	r2, [pc, #168]	; (8010290 <__sflush_r+0x108>)
 80101e8:	40ca      	lsrs	r2, r1
 80101ea:	07d6      	lsls	r6, r2, #31
 80101ec:	d528      	bpl.n	8010240 <__sflush_r+0xb8>
 80101ee:	2200      	movs	r2, #0
 80101f0:	6062      	str	r2, [r4, #4]
 80101f2:	04d9      	lsls	r1, r3, #19
 80101f4:	6922      	ldr	r2, [r4, #16]
 80101f6:	6022      	str	r2, [r4, #0]
 80101f8:	d504      	bpl.n	8010204 <__sflush_r+0x7c>
 80101fa:	1c42      	adds	r2, r0, #1
 80101fc:	d101      	bne.n	8010202 <__sflush_r+0x7a>
 80101fe:	682b      	ldr	r3, [r5, #0]
 8010200:	b903      	cbnz	r3, 8010204 <__sflush_r+0x7c>
 8010202:	6560      	str	r0, [r4, #84]	; 0x54
 8010204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010206:	602f      	str	r7, [r5, #0]
 8010208:	2900      	cmp	r1, #0
 801020a:	d0ca      	beq.n	80101a2 <__sflush_r+0x1a>
 801020c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010210:	4299      	cmp	r1, r3
 8010212:	d002      	beq.n	801021a <__sflush_r+0x92>
 8010214:	4628      	mov	r0, r5
 8010216:	f7ff fbb5 	bl	800f984 <_free_r>
 801021a:	2000      	movs	r0, #0
 801021c:	6360      	str	r0, [r4, #52]	; 0x34
 801021e:	e7c1      	b.n	80101a4 <__sflush_r+0x1c>
 8010220:	6a21      	ldr	r1, [r4, #32]
 8010222:	2301      	movs	r3, #1
 8010224:	4628      	mov	r0, r5
 8010226:	47b0      	blx	r6
 8010228:	1c41      	adds	r1, r0, #1
 801022a:	d1c7      	bne.n	80101bc <__sflush_r+0x34>
 801022c:	682b      	ldr	r3, [r5, #0]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d0c4      	beq.n	80101bc <__sflush_r+0x34>
 8010232:	2b1d      	cmp	r3, #29
 8010234:	d001      	beq.n	801023a <__sflush_r+0xb2>
 8010236:	2b16      	cmp	r3, #22
 8010238:	d101      	bne.n	801023e <__sflush_r+0xb6>
 801023a:	602f      	str	r7, [r5, #0]
 801023c:	e7b1      	b.n	80101a2 <__sflush_r+0x1a>
 801023e:	89a3      	ldrh	r3, [r4, #12]
 8010240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010244:	81a3      	strh	r3, [r4, #12]
 8010246:	e7ad      	b.n	80101a4 <__sflush_r+0x1c>
 8010248:	690f      	ldr	r7, [r1, #16]
 801024a:	2f00      	cmp	r7, #0
 801024c:	d0a9      	beq.n	80101a2 <__sflush_r+0x1a>
 801024e:	0793      	lsls	r3, r2, #30
 8010250:	680e      	ldr	r6, [r1, #0]
 8010252:	bf08      	it	eq
 8010254:	694b      	ldreq	r3, [r1, #20]
 8010256:	600f      	str	r7, [r1, #0]
 8010258:	bf18      	it	ne
 801025a:	2300      	movne	r3, #0
 801025c:	eba6 0807 	sub.w	r8, r6, r7
 8010260:	608b      	str	r3, [r1, #8]
 8010262:	f1b8 0f00 	cmp.w	r8, #0
 8010266:	dd9c      	ble.n	80101a2 <__sflush_r+0x1a>
 8010268:	6a21      	ldr	r1, [r4, #32]
 801026a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801026c:	4643      	mov	r3, r8
 801026e:	463a      	mov	r2, r7
 8010270:	4628      	mov	r0, r5
 8010272:	47b0      	blx	r6
 8010274:	2800      	cmp	r0, #0
 8010276:	dc06      	bgt.n	8010286 <__sflush_r+0xfe>
 8010278:	89a3      	ldrh	r3, [r4, #12]
 801027a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801027e:	81a3      	strh	r3, [r4, #12]
 8010280:	f04f 30ff 	mov.w	r0, #4294967295
 8010284:	e78e      	b.n	80101a4 <__sflush_r+0x1c>
 8010286:	4407      	add	r7, r0
 8010288:	eba8 0800 	sub.w	r8, r8, r0
 801028c:	e7e9      	b.n	8010262 <__sflush_r+0xda>
 801028e:	bf00      	nop
 8010290:	20400001 	.word	0x20400001

08010294 <_fflush_r>:
 8010294:	b538      	push	{r3, r4, r5, lr}
 8010296:	690b      	ldr	r3, [r1, #16]
 8010298:	4605      	mov	r5, r0
 801029a:	460c      	mov	r4, r1
 801029c:	b913      	cbnz	r3, 80102a4 <_fflush_r+0x10>
 801029e:	2500      	movs	r5, #0
 80102a0:	4628      	mov	r0, r5
 80102a2:	bd38      	pop	{r3, r4, r5, pc}
 80102a4:	b118      	cbz	r0, 80102ae <_fflush_r+0x1a>
 80102a6:	6983      	ldr	r3, [r0, #24]
 80102a8:	b90b      	cbnz	r3, 80102ae <_fflush_r+0x1a>
 80102aa:	f000 f887 	bl	80103bc <__sinit>
 80102ae:	4b14      	ldr	r3, [pc, #80]	; (8010300 <_fflush_r+0x6c>)
 80102b0:	429c      	cmp	r4, r3
 80102b2:	d11b      	bne.n	80102ec <_fflush_r+0x58>
 80102b4:	686c      	ldr	r4, [r5, #4]
 80102b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d0ef      	beq.n	801029e <_fflush_r+0xa>
 80102be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80102c0:	07d0      	lsls	r0, r2, #31
 80102c2:	d404      	bmi.n	80102ce <_fflush_r+0x3a>
 80102c4:	0599      	lsls	r1, r3, #22
 80102c6:	d402      	bmi.n	80102ce <_fflush_r+0x3a>
 80102c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102ca:	f000 f915 	bl	80104f8 <__retarget_lock_acquire_recursive>
 80102ce:	4628      	mov	r0, r5
 80102d0:	4621      	mov	r1, r4
 80102d2:	f7ff ff59 	bl	8010188 <__sflush_r>
 80102d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102d8:	07da      	lsls	r2, r3, #31
 80102da:	4605      	mov	r5, r0
 80102dc:	d4e0      	bmi.n	80102a0 <_fflush_r+0xc>
 80102de:	89a3      	ldrh	r3, [r4, #12]
 80102e0:	059b      	lsls	r3, r3, #22
 80102e2:	d4dd      	bmi.n	80102a0 <_fflush_r+0xc>
 80102e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102e6:	f000 f908 	bl	80104fa <__retarget_lock_release_recursive>
 80102ea:	e7d9      	b.n	80102a0 <_fflush_r+0xc>
 80102ec:	4b05      	ldr	r3, [pc, #20]	; (8010304 <_fflush_r+0x70>)
 80102ee:	429c      	cmp	r4, r3
 80102f0:	d101      	bne.n	80102f6 <_fflush_r+0x62>
 80102f2:	68ac      	ldr	r4, [r5, #8]
 80102f4:	e7df      	b.n	80102b6 <_fflush_r+0x22>
 80102f6:	4b04      	ldr	r3, [pc, #16]	; (8010308 <_fflush_r+0x74>)
 80102f8:	429c      	cmp	r4, r3
 80102fa:	bf08      	it	eq
 80102fc:	68ec      	ldreq	r4, [r5, #12]
 80102fe:	e7da      	b.n	80102b6 <_fflush_r+0x22>
 8010300:	080114d4 	.word	0x080114d4
 8010304:	080114f4 	.word	0x080114f4
 8010308:	080114b4 	.word	0x080114b4

0801030c <std>:
 801030c:	2300      	movs	r3, #0
 801030e:	b510      	push	{r4, lr}
 8010310:	4604      	mov	r4, r0
 8010312:	e9c0 3300 	strd	r3, r3, [r0]
 8010316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801031a:	6083      	str	r3, [r0, #8]
 801031c:	8181      	strh	r1, [r0, #12]
 801031e:	6643      	str	r3, [r0, #100]	; 0x64
 8010320:	81c2      	strh	r2, [r0, #14]
 8010322:	6183      	str	r3, [r0, #24]
 8010324:	4619      	mov	r1, r3
 8010326:	2208      	movs	r2, #8
 8010328:	305c      	adds	r0, #92	; 0x5c
 801032a:	f7fd fbcf 	bl	800dacc <memset>
 801032e:	4b05      	ldr	r3, [pc, #20]	; (8010344 <std+0x38>)
 8010330:	6263      	str	r3, [r4, #36]	; 0x24
 8010332:	4b05      	ldr	r3, [pc, #20]	; (8010348 <std+0x3c>)
 8010334:	62a3      	str	r3, [r4, #40]	; 0x28
 8010336:	4b05      	ldr	r3, [pc, #20]	; (801034c <std+0x40>)
 8010338:	62e3      	str	r3, [r4, #44]	; 0x2c
 801033a:	4b05      	ldr	r3, [pc, #20]	; (8010350 <std+0x44>)
 801033c:	6224      	str	r4, [r4, #32]
 801033e:	6323      	str	r3, [r4, #48]	; 0x30
 8010340:	bd10      	pop	{r4, pc}
 8010342:	bf00      	nop
 8010344:	08010651 	.word	0x08010651
 8010348:	08010673 	.word	0x08010673
 801034c:	080106ab 	.word	0x080106ab
 8010350:	080106cf 	.word	0x080106cf

08010354 <_cleanup_r>:
 8010354:	4901      	ldr	r1, [pc, #4]	; (801035c <_cleanup_r+0x8>)
 8010356:	f000 b8af 	b.w	80104b8 <_fwalk_reent>
 801035a:	bf00      	nop
 801035c:	08010295 	.word	0x08010295

08010360 <__sfmoreglue>:
 8010360:	b570      	push	{r4, r5, r6, lr}
 8010362:	2268      	movs	r2, #104	; 0x68
 8010364:	1e4d      	subs	r5, r1, #1
 8010366:	4355      	muls	r5, r2
 8010368:	460e      	mov	r6, r1
 801036a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801036e:	f7ff fa15 	bl	800f79c <_malloc_r>
 8010372:	4604      	mov	r4, r0
 8010374:	b140      	cbz	r0, 8010388 <__sfmoreglue+0x28>
 8010376:	2100      	movs	r1, #0
 8010378:	e9c0 1600 	strd	r1, r6, [r0]
 801037c:	300c      	adds	r0, #12
 801037e:	60a0      	str	r0, [r4, #8]
 8010380:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010384:	f7fd fba2 	bl	800dacc <memset>
 8010388:	4620      	mov	r0, r4
 801038a:	bd70      	pop	{r4, r5, r6, pc}

0801038c <__sfp_lock_acquire>:
 801038c:	4801      	ldr	r0, [pc, #4]	; (8010394 <__sfp_lock_acquire+0x8>)
 801038e:	f000 b8b3 	b.w	80104f8 <__retarget_lock_acquire_recursive>
 8010392:	bf00      	nop
 8010394:	24000a09 	.word	0x24000a09

08010398 <__sfp_lock_release>:
 8010398:	4801      	ldr	r0, [pc, #4]	; (80103a0 <__sfp_lock_release+0x8>)
 801039a:	f000 b8ae 	b.w	80104fa <__retarget_lock_release_recursive>
 801039e:	bf00      	nop
 80103a0:	24000a09 	.word	0x24000a09

080103a4 <__sinit_lock_acquire>:
 80103a4:	4801      	ldr	r0, [pc, #4]	; (80103ac <__sinit_lock_acquire+0x8>)
 80103a6:	f000 b8a7 	b.w	80104f8 <__retarget_lock_acquire_recursive>
 80103aa:	bf00      	nop
 80103ac:	24000a0a 	.word	0x24000a0a

080103b0 <__sinit_lock_release>:
 80103b0:	4801      	ldr	r0, [pc, #4]	; (80103b8 <__sinit_lock_release+0x8>)
 80103b2:	f000 b8a2 	b.w	80104fa <__retarget_lock_release_recursive>
 80103b6:	bf00      	nop
 80103b8:	24000a0a 	.word	0x24000a0a

080103bc <__sinit>:
 80103bc:	b510      	push	{r4, lr}
 80103be:	4604      	mov	r4, r0
 80103c0:	f7ff fff0 	bl	80103a4 <__sinit_lock_acquire>
 80103c4:	69a3      	ldr	r3, [r4, #24]
 80103c6:	b11b      	cbz	r3, 80103d0 <__sinit+0x14>
 80103c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103cc:	f7ff bff0 	b.w	80103b0 <__sinit_lock_release>
 80103d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80103d4:	6523      	str	r3, [r4, #80]	; 0x50
 80103d6:	4b13      	ldr	r3, [pc, #76]	; (8010424 <__sinit+0x68>)
 80103d8:	4a13      	ldr	r2, [pc, #76]	; (8010428 <__sinit+0x6c>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80103de:	42a3      	cmp	r3, r4
 80103e0:	bf04      	itt	eq
 80103e2:	2301      	moveq	r3, #1
 80103e4:	61a3      	streq	r3, [r4, #24]
 80103e6:	4620      	mov	r0, r4
 80103e8:	f000 f820 	bl	801042c <__sfp>
 80103ec:	6060      	str	r0, [r4, #4]
 80103ee:	4620      	mov	r0, r4
 80103f0:	f000 f81c 	bl	801042c <__sfp>
 80103f4:	60a0      	str	r0, [r4, #8]
 80103f6:	4620      	mov	r0, r4
 80103f8:	f000 f818 	bl	801042c <__sfp>
 80103fc:	2200      	movs	r2, #0
 80103fe:	60e0      	str	r0, [r4, #12]
 8010400:	2104      	movs	r1, #4
 8010402:	6860      	ldr	r0, [r4, #4]
 8010404:	f7ff ff82 	bl	801030c <std>
 8010408:	68a0      	ldr	r0, [r4, #8]
 801040a:	2201      	movs	r2, #1
 801040c:	2109      	movs	r1, #9
 801040e:	f7ff ff7d 	bl	801030c <std>
 8010412:	68e0      	ldr	r0, [r4, #12]
 8010414:	2202      	movs	r2, #2
 8010416:	2112      	movs	r1, #18
 8010418:	f7ff ff78 	bl	801030c <std>
 801041c:	2301      	movs	r3, #1
 801041e:	61a3      	str	r3, [r4, #24]
 8010420:	e7d2      	b.n	80103c8 <__sinit+0xc>
 8010422:	bf00      	nop
 8010424:	080110e8 	.word	0x080110e8
 8010428:	08010355 	.word	0x08010355

0801042c <__sfp>:
 801042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042e:	4607      	mov	r7, r0
 8010430:	f7ff ffac 	bl	801038c <__sfp_lock_acquire>
 8010434:	4b1e      	ldr	r3, [pc, #120]	; (80104b0 <__sfp+0x84>)
 8010436:	681e      	ldr	r6, [r3, #0]
 8010438:	69b3      	ldr	r3, [r6, #24]
 801043a:	b913      	cbnz	r3, 8010442 <__sfp+0x16>
 801043c:	4630      	mov	r0, r6
 801043e:	f7ff ffbd 	bl	80103bc <__sinit>
 8010442:	3648      	adds	r6, #72	; 0x48
 8010444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010448:	3b01      	subs	r3, #1
 801044a:	d503      	bpl.n	8010454 <__sfp+0x28>
 801044c:	6833      	ldr	r3, [r6, #0]
 801044e:	b30b      	cbz	r3, 8010494 <__sfp+0x68>
 8010450:	6836      	ldr	r6, [r6, #0]
 8010452:	e7f7      	b.n	8010444 <__sfp+0x18>
 8010454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010458:	b9d5      	cbnz	r5, 8010490 <__sfp+0x64>
 801045a:	4b16      	ldr	r3, [pc, #88]	; (80104b4 <__sfp+0x88>)
 801045c:	60e3      	str	r3, [r4, #12]
 801045e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010462:	6665      	str	r5, [r4, #100]	; 0x64
 8010464:	f000 f847 	bl	80104f6 <__retarget_lock_init_recursive>
 8010468:	f7ff ff96 	bl	8010398 <__sfp_lock_release>
 801046c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010470:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010474:	6025      	str	r5, [r4, #0]
 8010476:	61a5      	str	r5, [r4, #24]
 8010478:	2208      	movs	r2, #8
 801047a:	4629      	mov	r1, r5
 801047c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010480:	f7fd fb24 	bl	800dacc <memset>
 8010484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801048c:	4620      	mov	r0, r4
 801048e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010490:	3468      	adds	r4, #104	; 0x68
 8010492:	e7d9      	b.n	8010448 <__sfp+0x1c>
 8010494:	2104      	movs	r1, #4
 8010496:	4638      	mov	r0, r7
 8010498:	f7ff ff62 	bl	8010360 <__sfmoreglue>
 801049c:	4604      	mov	r4, r0
 801049e:	6030      	str	r0, [r6, #0]
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d1d5      	bne.n	8010450 <__sfp+0x24>
 80104a4:	f7ff ff78 	bl	8010398 <__sfp_lock_release>
 80104a8:	230c      	movs	r3, #12
 80104aa:	603b      	str	r3, [r7, #0]
 80104ac:	e7ee      	b.n	801048c <__sfp+0x60>
 80104ae:	bf00      	nop
 80104b0:	080110e8 	.word	0x080110e8
 80104b4:	ffff0001 	.word	0xffff0001

080104b8 <_fwalk_reent>:
 80104b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104bc:	4606      	mov	r6, r0
 80104be:	4688      	mov	r8, r1
 80104c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104c4:	2700      	movs	r7, #0
 80104c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104ca:	f1b9 0901 	subs.w	r9, r9, #1
 80104ce:	d505      	bpl.n	80104dc <_fwalk_reent+0x24>
 80104d0:	6824      	ldr	r4, [r4, #0]
 80104d2:	2c00      	cmp	r4, #0
 80104d4:	d1f7      	bne.n	80104c6 <_fwalk_reent+0xe>
 80104d6:	4638      	mov	r0, r7
 80104d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104dc:	89ab      	ldrh	r3, [r5, #12]
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d907      	bls.n	80104f2 <_fwalk_reent+0x3a>
 80104e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104e6:	3301      	adds	r3, #1
 80104e8:	d003      	beq.n	80104f2 <_fwalk_reent+0x3a>
 80104ea:	4629      	mov	r1, r5
 80104ec:	4630      	mov	r0, r6
 80104ee:	47c0      	blx	r8
 80104f0:	4307      	orrs	r7, r0
 80104f2:	3568      	adds	r5, #104	; 0x68
 80104f4:	e7e9      	b.n	80104ca <_fwalk_reent+0x12>

080104f6 <__retarget_lock_init_recursive>:
 80104f6:	4770      	bx	lr

080104f8 <__retarget_lock_acquire_recursive>:
 80104f8:	4770      	bx	lr

080104fa <__retarget_lock_release_recursive>:
 80104fa:	4770      	bx	lr

080104fc <__swhatbuf_r>:
 80104fc:	b570      	push	{r4, r5, r6, lr}
 80104fe:	460e      	mov	r6, r1
 8010500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010504:	2900      	cmp	r1, #0
 8010506:	b096      	sub	sp, #88	; 0x58
 8010508:	4614      	mov	r4, r2
 801050a:	461d      	mov	r5, r3
 801050c:	da08      	bge.n	8010520 <__swhatbuf_r+0x24>
 801050e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010512:	2200      	movs	r2, #0
 8010514:	602a      	str	r2, [r5, #0]
 8010516:	061a      	lsls	r2, r3, #24
 8010518:	d410      	bmi.n	801053c <__swhatbuf_r+0x40>
 801051a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801051e:	e00e      	b.n	801053e <__swhatbuf_r+0x42>
 8010520:	466a      	mov	r2, sp
 8010522:	f000 f8fb 	bl	801071c <_fstat_r>
 8010526:	2800      	cmp	r0, #0
 8010528:	dbf1      	blt.n	801050e <__swhatbuf_r+0x12>
 801052a:	9a01      	ldr	r2, [sp, #4]
 801052c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010530:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010534:	425a      	negs	r2, r3
 8010536:	415a      	adcs	r2, r3
 8010538:	602a      	str	r2, [r5, #0]
 801053a:	e7ee      	b.n	801051a <__swhatbuf_r+0x1e>
 801053c:	2340      	movs	r3, #64	; 0x40
 801053e:	2000      	movs	r0, #0
 8010540:	6023      	str	r3, [r4, #0]
 8010542:	b016      	add	sp, #88	; 0x58
 8010544:	bd70      	pop	{r4, r5, r6, pc}
	...

08010548 <__smakebuf_r>:
 8010548:	898b      	ldrh	r3, [r1, #12]
 801054a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801054c:	079d      	lsls	r5, r3, #30
 801054e:	4606      	mov	r6, r0
 8010550:	460c      	mov	r4, r1
 8010552:	d507      	bpl.n	8010564 <__smakebuf_r+0x1c>
 8010554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010558:	6023      	str	r3, [r4, #0]
 801055a:	6123      	str	r3, [r4, #16]
 801055c:	2301      	movs	r3, #1
 801055e:	6163      	str	r3, [r4, #20]
 8010560:	b002      	add	sp, #8
 8010562:	bd70      	pop	{r4, r5, r6, pc}
 8010564:	ab01      	add	r3, sp, #4
 8010566:	466a      	mov	r2, sp
 8010568:	f7ff ffc8 	bl	80104fc <__swhatbuf_r>
 801056c:	9900      	ldr	r1, [sp, #0]
 801056e:	4605      	mov	r5, r0
 8010570:	4630      	mov	r0, r6
 8010572:	f7ff f913 	bl	800f79c <_malloc_r>
 8010576:	b948      	cbnz	r0, 801058c <__smakebuf_r+0x44>
 8010578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801057c:	059a      	lsls	r2, r3, #22
 801057e:	d4ef      	bmi.n	8010560 <__smakebuf_r+0x18>
 8010580:	f023 0303 	bic.w	r3, r3, #3
 8010584:	f043 0302 	orr.w	r3, r3, #2
 8010588:	81a3      	strh	r3, [r4, #12]
 801058a:	e7e3      	b.n	8010554 <__smakebuf_r+0xc>
 801058c:	4b0d      	ldr	r3, [pc, #52]	; (80105c4 <__smakebuf_r+0x7c>)
 801058e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010590:	89a3      	ldrh	r3, [r4, #12]
 8010592:	6020      	str	r0, [r4, #0]
 8010594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010598:	81a3      	strh	r3, [r4, #12]
 801059a:	9b00      	ldr	r3, [sp, #0]
 801059c:	6163      	str	r3, [r4, #20]
 801059e:	9b01      	ldr	r3, [sp, #4]
 80105a0:	6120      	str	r0, [r4, #16]
 80105a2:	b15b      	cbz	r3, 80105bc <__smakebuf_r+0x74>
 80105a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105a8:	4630      	mov	r0, r6
 80105aa:	f000 f8c9 	bl	8010740 <_isatty_r>
 80105ae:	b128      	cbz	r0, 80105bc <__smakebuf_r+0x74>
 80105b0:	89a3      	ldrh	r3, [r4, #12]
 80105b2:	f023 0303 	bic.w	r3, r3, #3
 80105b6:	f043 0301 	orr.w	r3, r3, #1
 80105ba:	81a3      	strh	r3, [r4, #12]
 80105bc:	89a0      	ldrh	r0, [r4, #12]
 80105be:	4305      	orrs	r5, r0
 80105c0:	81a5      	strh	r5, [r4, #12]
 80105c2:	e7cd      	b.n	8010560 <__smakebuf_r+0x18>
 80105c4:	08010355 	.word	0x08010355

080105c8 <_raise_r>:
 80105c8:	291f      	cmp	r1, #31
 80105ca:	b538      	push	{r3, r4, r5, lr}
 80105cc:	4604      	mov	r4, r0
 80105ce:	460d      	mov	r5, r1
 80105d0:	d904      	bls.n	80105dc <_raise_r+0x14>
 80105d2:	2316      	movs	r3, #22
 80105d4:	6003      	str	r3, [r0, #0]
 80105d6:	f04f 30ff 	mov.w	r0, #4294967295
 80105da:	bd38      	pop	{r3, r4, r5, pc}
 80105dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80105de:	b112      	cbz	r2, 80105e6 <_raise_r+0x1e>
 80105e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105e4:	b94b      	cbnz	r3, 80105fa <_raise_r+0x32>
 80105e6:	4620      	mov	r0, r4
 80105e8:	f000 f830 	bl	801064c <_getpid_r>
 80105ec:	462a      	mov	r2, r5
 80105ee:	4601      	mov	r1, r0
 80105f0:	4620      	mov	r0, r4
 80105f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105f6:	f000 b817 	b.w	8010628 <_kill_r>
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d00a      	beq.n	8010614 <_raise_r+0x4c>
 80105fe:	1c59      	adds	r1, r3, #1
 8010600:	d103      	bne.n	801060a <_raise_r+0x42>
 8010602:	2316      	movs	r3, #22
 8010604:	6003      	str	r3, [r0, #0]
 8010606:	2001      	movs	r0, #1
 8010608:	e7e7      	b.n	80105da <_raise_r+0x12>
 801060a:	2400      	movs	r4, #0
 801060c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010610:	4628      	mov	r0, r5
 8010612:	4798      	blx	r3
 8010614:	2000      	movs	r0, #0
 8010616:	e7e0      	b.n	80105da <_raise_r+0x12>

08010618 <raise>:
 8010618:	4b02      	ldr	r3, [pc, #8]	; (8010624 <raise+0xc>)
 801061a:	4601      	mov	r1, r0
 801061c:	6818      	ldr	r0, [r3, #0]
 801061e:	f7ff bfd3 	b.w	80105c8 <_raise_r>
 8010622:	bf00      	nop
 8010624:	2400007c 	.word	0x2400007c

08010628 <_kill_r>:
 8010628:	b538      	push	{r3, r4, r5, lr}
 801062a:	4d07      	ldr	r5, [pc, #28]	; (8010648 <_kill_r+0x20>)
 801062c:	2300      	movs	r3, #0
 801062e:	4604      	mov	r4, r0
 8010630:	4608      	mov	r0, r1
 8010632:	4611      	mov	r1, r2
 8010634:	602b      	str	r3, [r5, #0]
 8010636:	f7f2 fd41 	bl	80030bc <_kill>
 801063a:	1c43      	adds	r3, r0, #1
 801063c:	d102      	bne.n	8010644 <_kill_r+0x1c>
 801063e:	682b      	ldr	r3, [r5, #0]
 8010640:	b103      	cbz	r3, 8010644 <_kill_r+0x1c>
 8010642:	6023      	str	r3, [r4, #0]
 8010644:	bd38      	pop	{r3, r4, r5, pc}
 8010646:	bf00      	nop
 8010648:	24000a04 	.word	0x24000a04

0801064c <_getpid_r>:
 801064c:	f7f2 bd2e 	b.w	80030ac <_getpid>

08010650 <__sread>:
 8010650:	b510      	push	{r4, lr}
 8010652:	460c      	mov	r4, r1
 8010654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010658:	f000 f894 	bl	8010784 <_read_r>
 801065c:	2800      	cmp	r0, #0
 801065e:	bfab      	itete	ge
 8010660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010662:	89a3      	ldrhlt	r3, [r4, #12]
 8010664:	181b      	addge	r3, r3, r0
 8010666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801066a:	bfac      	ite	ge
 801066c:	6563      	strge	r3, [r4, #84]	; 0x54
 801066e:	81a3      	strhlt	r3, [r4, #12]
 8010670:	bd10      	pop	{r4, pc}

08010672 <__swrite>:
 8010672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010676:	461f      	mov	r7, r3
 8010678:	898b      	ldrh	r3, [r1, #12]
 801067a:	05db      	lsls	r3, r3, #23
 801067c:	4605      	mov	r5, r0
 801067e:	460c      	mov	r4, r1
 8010680:	4616      	mov	r6, r2
 8010682:	d505      	bpl.n	8010690 <__swrite+0x1e>
 8010684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010688:	2302      	movs	r3, #2
 801068a:	2200      	movs	r2, #0
 801068c:	f000 f868 	bl	8010760 <_lseek_r>
 8010690:	89a3      	ldrh	r3, [r4, #12]
 8010692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801069a:	81a3      	strh	r3, [r4, #12]
 801069c:	4632      	mov	r2, r6
 801069e:	463b      	mov	r3, r7
 80106a0:	4628      	mov	r0, r5
 80106a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106a6:	f000 b817 	b.w	80106d8 <_write_r>

080106aa <__sseek>:
 80106aa:	b510      	push	{r4, lr}
 80106ac:	460c      	mov	r4, r1
 80106ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106b2:	f000 f855 	bl	8010760 <_lseek_r>
 80106b6:	1c43      	adds	r3, r0, #1
 80106b8:	89a3      	ldrh	r3, [r4, #12]
 80106ba:	bf15      	itete	ne
 80106bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80106be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106c6:	81a3      	strheq	r3, [r4, #12]
 80106c8:	bf18      	it	ne
 80106ca:	81a3      	strhne	r3, [r4, #12]
 80106cc:	bd10      	pop	{r4, pc}

080106ce <__sclose>:
 80106ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106d2:	f000 b813 	b.w	80106fc <_close_r>
	...

080106d8 <_write_r>:
 80106d8:	b538      	push	{r3, r4, r5, lr}
 80106da:	4d07      	ldr	r5, [pc, #28]	; (80106f8 <_write_r+0x20>)
 80106dc:	4604      	mov	r4, r0
 80106de:	4608      	mov	r0, r1
 80106e0:	4611      	mov	r1, r2
 80106e2:	2200      	movs	r2, #0
 80106e4:	602a      	str	r2, [r5, #0]
 80106e6:	461a      	mov	r2, r3
 80106e8:	f7f2 fd1f 	bl	800312a <_write>
 80106ec:	1c43      	adds	r3, r0, #1
 80106ee:	d102      	bne.n	80106f6 <_write_r+0x1e>
 80106f0:	682b      	ldr	r3, [r5, #0]
 80106f2:	b103      	cbz	r3, 80106f6 <_write_r+0x1e>
 80106f4:	6023      	str	r3, [r4, #0]
 80106f6:	bd38      	pop	{r3, r4, r5, pc}
 80106f8:	24000a04 	.word	0x24000a04

080106fc <_close_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	4d06      	ldr	r5, [pc, #24]	; (8010718 <_close_r+0x1c>)
 8010700:	2300      	movs	r3, #0
 8010702:	4604      	mov	r4, r0
 8010704:	4608      	mov	r0, r1
 8010706:	602b      	str	r3, [r5, #0]
 8010708:	f7f2 fd2b 	bl	8003162 <_close>
 801070c:	1c43      	adds	r3, r0, #1
 801070e:	d102      	bne.n	8010716 <_close_r+0x1a>
 8010710:	682b      	ldr	r3, [r5, #0]
 8010712:	b103      	cbz	r3, 8010716 <_close_r+0x1a>
 8010714:	6023      	str	r3, [r4, #0]
 8010716:	bd38      	pop	{r3, r4, r5, pc}
 8010718:	24000a04 	.word	0x24000a04

0801071c <_fstat_r>:
 801071c:	b538      	push	{r3, r4, r5, lr}
 801071e:	4d07      	ldr	r5, [pc, #28]	; (801073c <_fstat_r+0x20>)
 8010720:	2300      	movs	r3, #0
 8010722:	4604      	mov	r4, r0
 8010724:	4608      	mov	r0, r1
 8010726:	4611      	mov	r1, r2
 8010728:	602b      	str	r3, [r5, #0]
 801072a:	f7f2 fd26 	bl	800317a <_fstat>
 801072e:	1c43      	adds	r3, r0, #1
 8010730:	d102      	bne.n	8010738 <_fstat_r+0x1c>
 8010732:	682b      	ldr	r3, [r5, #0]
 8010734:	b103      	cbz	r3, 8010738 <_fstat_r+0x1c>
 8010736:	6023      	str	r3, [r4, #0]
 8010738:	bd38      	pop	{r3, r4, r5, pc}
 801073a:	bf00      	nop
 801073c:	24000a04 	.word	0x24000a04

08010740 <_isatty_r>:
 8010740:	b538      	push	{r3, r4, r5, lr}
 8010742:	4d06      	ldr	r5, [pc, #24]	; (801075c <_isatty_r+0x1c>)
 8010744:	2300      	movs	r3, #0
 8010746:	4604      	mov	r4, r0
 8010748:	4608      	mov	r0, r1
 801074a:	602b      	str	r3, [r5, #0]
 801074c:	f7f2 fd25 	bl	800319a <_isatty>
 8010750:	1c43      	adds	r3, r0, #1
 8010752:	d102      	bne.n	801075a <_isatty_r+0x1a>
 8010754:	682b      	ldr	r3, [r5, #0]
 8010756:	b103      	cbz	r3, 801075a <_isatty_r+0x1a>
 8010758:	6023      	str	r3, [r4, #0]
 801075a:	bd38      	pop	{r3, r4, r5, pc}
 801075c:	24000a04 	.word	0x24000a04

08010760 <_lseek_r>:
 8010760:	b538      	push	{r3, r4, r5, lr}
 8010762:	4d07      	ldr	r5, [pc, #28]	; (8010780 <_lseek_r+0x20>)
 8010764:	4604      	mov	r4, r0
 8010766:	4608      	mov	r0, r1
 8010768:	4611      	mov	r1, r2
 801076a:	2200      	movs	r2, #0
 801076c:	602a      	str	r2, [r5, #0]
 801076e:	461a      	mov	r2, r3
 8010770:	f7f2 fd1e 	bl	80031b0 <_lseek>
 8010774:	1c43      	adds	r3, r0, #1
 8010776:	d102      	bne.n	801077e <_lseek_r+0x1e>
 8010778:	682b      	ldr	r3, [r5, #0]
 801077a:	b103      	cbz	r3, 801077e <_lseek_r+0x1e>
 801077c:	6023      	str	r3, [r4, #0]
 801077e:	bd38      	pop	{r3, r4, r5, pc}
 8010780:	24000a04 	.word	0x24000a04

08010784 <_read_r>:
 8010784:	b538      	push	{r3, r4, r5, lr}
 8010786:	4d07      	ldr	r5, [pc, #28]	; (80107a4 <_read_r+0x20>)
 8010788:	4604      	mov	r4, r0
 801078a:	4608      	mov	r0, r1
 801078c:	4611      	mov	r1, r2
 801078e:	2200      	movs	r2, #0
 8010790:	602a      	str	r2, [r5, #0]
 8010792:	461a      	mov	r2, r3
 8010794:	f7f2 fcac 	bl	80030f0 <_read>
 8010798:	1c43      	adds	r3, r0, #1
 801079a:	d102      	bne.n	80107a2 <_read_r+0x1e>
 801079c:	682b      	ldr	r3, [r5, #0]
 801079e:	b103      	cbz	r3, 80107a2 <_read_r+0x1e>
 80107a0:	6023      	str	r3, [r4, #0]
 80107a2:	bd38      	pop	{r3, r4, r5, pc}
 80107a4:	24000a04 	.word	0x24000a04

080107a8 <checkint>:
 80107a8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80107ac:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80107b0:	429a      	cmp	r2, r3
 80107b2:	b570      	push	{r4, r5, r6, lr}
 80107b4:	dd2a      	ble.n	801080c <checkint+0x64>
 80107b6:	f240 4333 	movw	r3, #1075	; 0x433
 80107ba:	429a      	cmp	r2, r3
 80107bc:	dc24      	bgt.n	8010808 <checkint+0x60>
 80107be:	1a9b      	subs	r3, r3, r2
 80107c0:	f1a3 0620 	sub.w	r6, r3, #32
 80107c4:	f04f 32ff 	mov.w	r2, #4294967295
 80107c8:	fa02 f403 	lsl.w	r4, r2, r3
 80107cc:	fa02 f606 	lsl.w	r6, r2, r6
 80107d0:	f1c3 0520 	rsb	r5, r3, #32
 80107d4:	fa22 f505 	lsr.w	r5, r2, r5
 80107d8:	4334      	orrs	r4, r6
 80107da:	432c      	orrs	r4, r5
 80107dc:	409a      	lsls	r2, r3
 80107de:	ea20 0202 	bic.w	r2, r0, r2
 80107e2:	ea21 0404 	bic.w	r4, r1, r4
 80107e6:	4322      	orrs	r2, r4
 80107e8:	f1a3 0420 	sub.w	r4, r3, #32
 80107ec:	f1c3 0220 	rsb	r2, r3, #32
 80107f0:	d10c      	bne.n	801080c <checkint+0x64>
 80107f2:	40d8      	lsrs	r0, r3
 80107f4:	fa01 f302 	lsl.w	r3, r1, r2
 80107f8:	4318      	orrs	r0, r3
 80107fa:	40e1      	lsrs	r1, r4
 80107fc:	4308      	orrs	r0, r1
 80107fe:	f000 0001 	and.w	r0, r0, #1
 8010802:	f1d0 0002 	rsbs	r0, r0, #2
 8010806:	bd70      	pop	{r4, r5, r6, pc}
 8010808:	2002      	movs	r0, #2
 801080a:	e7fc      	b.n	8010806 <checkint+0x5e>
 801080c:	2000      	movs	r0, #0
 801080e:	e7fa      	b.n	8010806 <checkint+0x5e>

08010810 <pow>:
 8010810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010814:	ee10 4a90 	vmov	r4, s1
 8010818:	ed2d 8b0a 	vpush	{d8-d12}
 801081c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8010820:	ee11 7a90 	vmov	r7, s3
 8010824:	f10a 32ff 	add.w	r2, sl, #4294967295
 8010828:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801082c:	429a      	cmp	r2, r3
 801082e:	ee10 6a10 	vmov	r6, s0
 8010832:	ee11 0a10 	vmov	r0, s2
 8010836:	b086      	sub	sp, #24
 8010838:	46d4      	mov	ip, sl
 801083a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801083e:	d806      	bhi.n	801084e <pow+0x3e>
 8010840:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8010844:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010848:	2b7f      	cmp	r3, #127	; 0x7f
 801084a:	f240 8156 	bls.w	8010afa <pow+0x2ea>
 801084e:	1802      	adds	r2, r0, r0
 8010850:	eb47 0107 	adc.w	r1, r7, r7
 8010854:	f06f 0e01 	mvn.w	lr, #1
 8010858:	f112 39ff 	adds.w	r9, r2, #4294967295
 801085c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8010860:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8010864:	45ce      	cmp	lr, r9
 8010866:	eb73 0808 	sbcs.w	r8, r3, r8
 801086a:	d23f      	bcs.n	80108ec <pow+0xdc>
 801086c:	ea52 0301 	orrs.w	r3, r2, r1
 8010870:	f04f 0300 	mov.w	r3, #0
 8010874:	d10c      	bne.n	8010890 <pow+0x80>
 8010876:	19b6      	adds	r6, r6, r6
 8010878:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801087c:	4164      	adcs	r4, r4
 801087e:	42b3      	cmp	r3, r6
 8010880:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010884:	41a3      	sbcs	r3, r4
 8010886:	f0c0 808c 	bcc.w	80109a2 <pow+0x192>
 801088a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801088e:	e028      	b.n	80108e2 <pow+0xd2>
 8010890:	4da3      	ldr	r5, [pc, #652]	; (8010b20 <pow+0x310>)
 8010892:	42ac      	cmp	r4, r5
 8010894:	bf08      	it	eq
 8010896:	429e      	cmpeq	r6, r3
 8010898:	d107      	bne.n	80108aa <pow+0x9a>
 801089a:	1800      	adds	r0, r0, r0
 801089c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80108a0:	417f      	adcs	r7, r7
 80108a2:	4283      	cmp	r3, r0
 80108a4:	4b9f      	ldr	r3, [pc, #636]	; (8010b24 <pow+0x314>)
 80108a6:	41bb      	sbcs	r3, r7
 80108a8:	e7ed      	b.n	8010886 <pow+0x76>
 80108aa:	19b6      	adds	r6, r6, r6
 80108ac:	489e      	ldr	r0, [pc, #632]	; (8010b28 <pow+0x318>)
 80108ae:	4164      	adcs	r4, r4
 80108b0:	42b3      	cmp	r3, r6
 80108b2:	eb70 0504 	sbcs.w	r5, r0, r4
 80108b6:	d374      	bcc.n	80109a2 <pow+0x192>
 80108b8:	4281      	cmp	r1, r0
 80108ba:	bf08      	it	eq
 80108bc:	429a      	cmpeq	r2, r3
 80108be:	d170      	bne.n	80109a2 <pow+0x192>
 80108c0:	4a9a      	ldr	r2, [pc, #616]	; (8010b2c <pow+0x31c>)
 80108c2:	4294      	cmp	r4, r2
 80108c4:	bf08      	it	eq
 80108c6:	429e      	cmpeq	r6, r3
 80108c8:	d0df      	beq.n	801088a <pow+0x7a>
 80108ca:	4294      	cmp	r4, r2
 80108cc:	ea6f 0707 	mvn.w	r7, r7
 80108d0:	bf34      	ite	cc
 80108d2:	2400      	movcc	r4, #0
 80108d4:	2401      	movcs	r4, #1
 80108d6:	0fff      	lsrs	r7, r7, #31
 80108d8:	42bc      	cmp	r4, r7
 80108da:	f040 81d9 	bne.w	8010c90 <pow+0x480>
 80108de:	ee21 0b01 	vmul.f64	d0, d1, d1
 80108e2:	b006      	add	sp, #24
 80108e4:	ecbd 8b0a 	vpop	{d8-d12}
 80108e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ec:	eb16 0806 	adds.w	r8, r6, r6
 80108f0:	eb44 0904 	adc.w	r9, r4, r4
 80108f4:	f118 31ff 	adds.w	r1, r8, #4294967295
 80108f8:	f169 0200 	sbc.w	r2, r9, #0
 80108fc:	458e      	cmp	lr, r1
 80108fe:	4193      	sbcs	r3, r2
 8010900:	d223      	bcs.n	801094a <pow+0x13a>
 8010902:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010906:	2c00      	cmp	r4, #0
 8010908:	da12      	bge.n	8010930 <pow+0x120>
 801090a:	4639      	mov	r1, r7
 801090c:	f7ff ff4c 	bl	80107a8 <checkint>
 8010910:	2801      	cmp	r0, #1
 8010912:	d10d      	bne.n	8010930 <pow+0x120>
 8010914:	eeb1 0b40 	vneg.f64	d0, d0
 8010918:	ea58 0309 	orrs.w	r3, r8, r9
 801091c:	d10a      	bne.n	8010934 <pow+0x124>
 801091e:	2f00      	cmp	r7, #0
 8010920:	dadf      	bge.n	80108e2 <pow+0xd2>
 8010922:	b006      	add	sp, #24
 8010924:	ecbd 8b0a 	vpop	{d8-d12}
 8010928:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801092c:	f000 bb50 	b.w	8010fd0 <__math_divzero>
 8010930:	2000      	movs	r0, #0
 8010932:	e7f1      	b.n	8010918 <pow+0x108>
 8010934:	2f00      	cmp	r7, #0
 8010936:	dad4      	bge.n	80108e2 <pow+0xd2>
 8010938:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801093c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010940:	ed8d 7b00 	vstr	d7, [sp]
 8010944:	ed9d 0b00 	vldr	d0, [sp]
 8010948:	e7cb      	b.n	80108e2 <pow+0xd2>
 801094a:	2c00      	cmp	r4, #0
 801094c:	da2c      	bge.n	80109a8 <pow+0x198>
 801094e:	4639      	mov	r1, r7
 8010950:	f7ff ff2a 	bl	80107a8 <checkint>
 8010954:	b930      	cbnz	r0, 8010964 <pow+0x154>
 8010956:	b006      	add	sp, #24
 8010958:	ecbd 8b0a 	vpop	{d8-d12}
 801095c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010960:	f000 bb4e 	b.w	8011000 <__math_invalid>
 8010964:	2801      	cmp	r0, #1
 8010966:	bf14      	ite	ne
 8010968:	2000      	movne	r0, #0
 801096a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801096e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010972:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010976:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801097a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801097e:	2b7f      	cmp	r3, #127	; 0x7f
 8010980:	d92d      	bls.n	80109de <pow+0x1ce>
 8010982:	4b67      	ldr	r3, [pc, #412]	; (8010b20 <pow+0x310>)
 8010984:	2000      	movs	r0, #0
 8010986:	429c      	cmp	r4, r3
 8010988:	bf08      	it	eq
 801098a:	4286      	cmpeq	r6, r0
 801098c:	f43f af7d 	beq.w	801088a <pow+0x7a>
 8010990:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010994:	428a      	cmp	r2, r1
 8010996:	d80c      	bhi.n	80109b2 <pow+0x1a2>
 8010998:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801099c:	42b0      	cmp	r0, r6
 801099e:	41a3      	sbcs	r3, r4
 80109a0:	d204      	bcs.n	80109ac <pow+0x19c>
 80109a2:	ee31 0b00 	vadd.f64	d0, d1, d0
 80109a6:	e79c      	b.n	80108e2 <pow+0xd2>
 80109a8:	2000      	movs	r0, #0
 80109aa:	e7e4      	b.n	8010976 <pow+0x166>
 80109ac:	ee30 0b41 	vsub.f64	d0, d0, d1
 80109b0:	e797      	b.n	80108e2 <pow+0xd2>
 80109b2:	2e01      	cmp	r6, #1
 80109b4:	eb74 0303 	sbcs.w	r3, r4, r3
 80109b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80109bc:	bf34      	ite	cc
 80109be:	2301      	movcc	r3, #1
 80109c0:	2300      	movcs	r3, #0
 80109c2:	4295      	cmp	r5, r2
 80109c4:	bf8c      	ite	hi
 80109c6:	2500      	movhi	r5, #0
 80109c8:	2501      	movls	r5, #1
 80109ca:	42ab      	cmp	r3, r5
 80109cc:	f000 809d 	beq.w	8010b0a <pow+0x2fa>
 80109d0:	b006      	add	sp, #24
 80109d2:	ecbd 8b0a 	vpop	{d8-d12}
 80109d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109da:	f000 baf1 	b.w	8010fc0 <__math_oflow>
 80109de:	f1bc 0f00 	cmp.w	ip, #0
 80109e2:	d10b      	bne.n	80109fc <pow+0x1ec>
 80109e4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010b18 <pow+0x308>
 80109e8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80109ec:	ec53 2b17 	vmov	r2, r3, d7
 80109f0:	ee17 6a10 	vmov	r6, s14
 80109f4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80109f8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80109fc:	4b4c      	ldr	r3, [pc, #304]	; (8010b30 <pow+0x320>)
 80109fe:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010a02:	4423      	add	r3, r4
 8010a04:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010a08:	1519      	asrs	r1, r3, #20
 8010a0a:	0d1b      	lsrs	r3, r3, #20
 8010a0c:	051b      	lsls	r3, r3, #20
 8010a0e:	eba4 0903 	sub.w	r9, r4, r3
 8010a12:	4b48      	ldr	r3, [pc, #288]	; (8010b34 <pow+0x324>)
 8010a14:	ee04 1a10 	vmov	s8, r1
 8010a18:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8010a1c:	f1b6 0800 	subs.w	r8, r6, #0
 8010a20:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8010a24:	ec49 8b15 	vmov	d5, r8, r9
 8010a28:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8010a2c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010a30:	ed93 7b00 	vldr	d7, [r3]
 8010a34:	ed93 5b02 	vldr	d5, [r3, #8]
 8010a38:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8010a3c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010a40:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010a44:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010a48:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8010a4c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010a50:	ed93 5b04 	vldr	d5, [r3, #16]
 8010a54:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010a58:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010a5c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010a60:	ed93 4b08 	vldr	d4, [r3, #32]
 8010a64:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010a68:	eeb0 9b40 	vmov.f64	d9, d0
 8010a6c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010a70:	ed93 5b06 	vldr	d5, [r3, #24]
 8010a74:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010a78:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010a7c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010a80:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010a84:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010a88:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010a8c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010a90:	ee3a ab00 	vadd.f64	d10, d10, d0
 8010a94:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010a98:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010a9c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8010aa0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8010aa4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010aa8:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010aac:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010ab0:	eeab ab05 	vfma.f64	d10, d11, d5
 8010ab4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8010ab8:	ee21 7b06 	vmul.f64	d7, d1, d6
 8010abc:	ee17 3a90 	vmov	r3, s15
 8010ac0:	eeb0 5b47 	vmov.f64	d5, d7
 8010ac4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8010ac8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8010acc:	18b2      	adds	r2, r6, r2
 8010ace:	2a3e      	cmp	r2, #62	; 0x3e
 8010ad0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8010ad4:	ee38 8b46 	vsub.f64	d8, d8, d6
 8010ad8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8010adc:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8010ae0:	d92b      	bls.n	8010b3a <pow+0x32a>
 8010ae2:	2a00      	cmp	r2, #0
 8010ae4:	da0b      	bge.n	8010afe <pow+0x2ee>
 8010ae6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010aea:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010aee:	2800      	cmp	r0, #0
 8010af0:	f43f aef7 	beq.w	80108e2 <pow+0xd2>
 8010af4:	eeb1 0b40 	vneg.f64	d0, d0
 8010af8:	e6f3      	b.n	80108e2 <pow+0xd2>
 8010afa:	2000      	movs	r0, #0
 8010afc:	e77e      	b.n	80109fc <pow+0x1ec>
 8010afe:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010b02:	d919      	bls.n	8010b38 <pow+0x328>
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f6bf af63 	bge.w	80109d0 <pow+0x1c0>
 8010b0a:	b006      	add	sp, #24
 8010b0c:	ecbd 8b0a 	vpop	{d8-d12}
 8010b10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b14:	f000 ba4c 	b.w	8010fb0 <__math_uflow>
 8010b18:	00000000 	.word	0x00000000
 8010b1c:	43300000 	.word	0x43300000
 8010b20:	3ff00000 	.word	0x3ff00000
 8010b24:	fff00000 	.word	0xfff00000
 8010b28:	ffe00000 	.word	0xffe00000
 8010b2c:	7fe00000 	.word	0x7fe00000
 8010b30:	c0196aab 	.word	0xc0196aab
 8010b34:	08011518 	.word	0x08011518
 8010b38:	2600      	movs	r6, #0
 8010b3a:	495d      	ldr	r1, [pc, #372]	; (8010cb0 <pow+0x4a0>)
 8010b3c:	ed91 4b02 	vldr	d4, [r1, #8]
 8010b40:	ed91 3b00 	vldr	d3, [r1]
 8010b44:	eeb0 6b44 	vmov.f64	d6, d4
 8010b48:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010b4c:	ee16 5a10 	vmov	r5, s12
 8010b50:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010b54:	ed91 4b04 	vldr	d4, [r1, #16]
 8010b58:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010b5c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010b60:	eeb0 0b47 	vmov.f64	d0, d7
 8010b64:	ed91 7b06 	vldr	d7, [r1, #24]
 8010b68:	18dc      	adds	r4, r3, r3
 8010b6a:	f104 030f 	add.w	r3, r4, #15
 8010b6e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010b72:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010b76:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8010b7a:	ee35 0b00 	vadd.f64	d0, d5, d0
 8010b7e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010b82:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010b86:	ed91 5b08 	vldr	d5, [r1, #32]
 8010b8a:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010b8e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010b92:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010b96:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8010b9a:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010b9e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010ba2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8010ba6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8010baa:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8010bae:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010bb2:	1940      	adds	r0, r0, r5
 8010bb4:	2700      	movs	r7, #0
 8010bb6:	eb17 020c 	adds.w	r2, r7, ip
 8010bba:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8010bbe:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010bc2:	2e00      	cmp	r6, #0
 8010bc4:	d15f      	bne.n	8010c86 <pow+0x476>
 8010bc6:	42bd      	cmp	r5, r7
 8010bc8:	db13      	blt.n	8010bf2 <pow+0x3e2>
 8010bca:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8010bce:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8010bd2:	4610      	mov	r0, r2
 8010bd4:	ec41 0b10 	vmov	d0, r0, r1
 8010bd8:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010bdc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010c98 <pow+0x488>
 8010be0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010be4:	b006      	add	sp, #24
 8010be6:	ecbd 8b0a 	vpop	{d8-d12}
 8010bea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bee:	f000 ba1f 	b.w	8011030 <__math_check_oflow>
 8010bf2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010bf6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8010bfa:	4610      	mov	r0, r2
 8010bfc:	ec41 0b15 	vmov	d5, r0, r1
 8010c00:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010c04:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010c08:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010c0c:	eeb0 3bc7 	vabs.f64	d3, d7
 8010c10:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c18:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010ca0 <pow+0x490>
 8010c1c:	d52a      	bpl.n	8010c74 <pow+0x464>
 8010c1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010c22:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c2a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010c2e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010c32:	bf48      	it	mi
 8010c34:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010c38:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010c3c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010c40:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010c44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010c48:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010c4c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010c50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c58:	d104      	bne.n	8010c64 <pow+0x454>
 8010c5a:	4632      	mov	r2, r6
 8010c5c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010c60:	ec43 2b17 	vmov	d7, r2, r3
 8010c64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010c68:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c6c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010c70:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010c74:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010c78:	b006      	add	sp, #24
 8010c7a:	ecbd 8b0a 	vpop	{d8-d12}
 8010c7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c82:	f000 b9cc 	b.w	801101e <__math_check_uflow>
 8010c86:	ec43 2b10 	vmov	d0, r2, r3
 8010c8a:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010c8e:	e628      	b.n	80108e2 <pow+0xd2>
 8010c90:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010ca8 <pow+0x498>
 8010c94:	e625      	b.n	80108e2 <pow+0xd2>
 8010c96:	bf00      	nop
 8010c98:	00000000 	.word	0x00000000
 8010c9c:	7f000000 	.word	0x7f000000
 8010ca0:	00000000 	.word	0x00000000
 8010ca4:	00100000 	.word	0x00100000
	...
 8010cb0:	08012560 	.word	0x08012560

08010cb4 <asin>:
 8010cb4:	b508      	push	{r3, lr}
 8010cb6:	ed2d 8b04 	vpush	{d8-d9}
 8010cba:	eeb0 8b40 	vmov.f64	d8, d0
 8010cbe:	f000 f847 	bl	8010d50 <__ieee754_asin>
 8010cc2:	eeb4 8b48 	vcmp.f64	d8, d8
 8010cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cca:	eeb0 9b40 	vmov.f64	d9, d0
 8010cce:	d615      	bvs.n	8010cfc <asin+0x48>
 8010cd0:	eeb0 0b48 	vmov.f64	d0, d8
 8010cd4:	f000 f9c0 	bl	8011058 <fabs>
 8010cd8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010cdc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce4:	dd0a      	ble.n	8010cfc <asin+0x48>
 8010ce6:	f7fc fec7 	bl	800da78 <__errno>
 8010cea:	ecbd 8b04 	vpop	{d8-d9}
 8010cee:	2321      	movs	r3, #33	; 0x21
 8010cf0:	6003      	str	r3, [r0, #0]
 8010cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010cf6:	4804      	ldr	r0, [pc, #16]	; (8010d08 <asin+0x54>)
 8010cf8:	f7fe bdc6 	b.w	800f888 <nan>
 8010cfc:	eeb0 0b49 	vmov.f64	d0, d9
 8010d00:	ecbd 8b04 	vpop	{d8-d9}
 8010d04:	bd08      	pop	{r3, pc}
 8010d06:	bf00      	nop
 8010d08:	0801137f 	.word	0x0801137f
 8010d0c:	00000000 	.word	0x00000000

08010d10 <sqrt>:
 8010d10:	b508      	push	{r3, lr}
 8010d12:	ed2d 8b04 	vpush	{d8-d9}
 8010d16:	eeb0 8b40 	vmov.f64	d8, d0
 8010d1a:	f000 f927 	bl	8010f6c <__ieee754_sqrt>
 8010d1e:	eeb4 8b48 	vcmp.f64	d8, d8
 8010d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d26:	d60c      	bvs.n	8010d42 <sqrt+0x32>
 8010d28:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8010d48 <sqrt+0x38>
 8010d2c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d34:	d505      	bpl.n	8010d42 <sqrt+0x32>
 8010d36:	f7fc fe9f 	bl	800da78 <__errno>
 8010d3a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010d3e:	2321      	movs	r3, #33	; 0x21
 8010d40:	6003      	str	r3, [r0, #0]
 8010d42:	ecbd 8b04 	vpop	{d8-d9}
 8010d46:	bd08      	pop	{r3, pc}
	...

08010d50 <__ieee754_asin>:
 8010d50:	b538      	push	{r3, r4, r5, lr}
 8010d52:	ee10 5a90 	vmov	r5, s1
 8010d56:	4b82      	ldr	r3, [pc, #520]	; (8010f60 <__ieee754_asin+0x210>)
 8010d58:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010d5c:	429c      	cmp	r4, r3
 8010d5e:	ed2d 8b06 	vpush	{d8-d10}
 8010d62:	dd19      	ble.n	8010d98 <__ieee754_asin+0x48>
 8010d64:	ee10 3a10 	vmov	r3, s0
 8010d68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010d6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010d70:	4323      	orrs	r3, r4
 8010d72:	d10c      	bne.n	8010d8e <__ieee754_asin+0x3e>
 8010d74:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8010ee8 <__ieee754_asin+0x198>
 8010d78:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8010ef0 <__ieee754_asin+0x1a0>
 8010d7c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010d80:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010d84:	eeb0 0b47 	vmov.f64	d0, d7
 8010d88:	ecbd 8b06 	vpop	{d8-d10}
 8010d8c:	bd38      	pop	{r3, r4, r5, pc}
 8010d8e:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010d92:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8010d96:	e7f7      	b.n	8010d88 <__ieee754_asin+0x38>
 8010d98:	4b72      	ldr	r3, [pc, #456]	; (8010f64 <__ieee754_asin+0x214>)
 8010d9a:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8010d9e:	429c      	cmp	r4, r3
 8010da0:	dc0b      	bgt.n	8010dba <__ieee754_asin+0x6a>
 8010da2:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8010da6:	da52      	bge.n	8010e4e <__ieee754_asin+0xfe>
 8010da8:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8010ef8 <__ieee754_asin+0x1a8>
 8010dac:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010db0:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8010db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db8:	dce6      	bgt.n	8010d88 <__ieee754_asin+0x38>
 8010dba:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8010dbe:	f000 f94b 	bl	8011058 <fabs>
 8010dc2:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8010f00 <__ieee754_asin+0x1b0>
 8010dc6:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010dca:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010dce:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010f08 <__ieee754_asin+0x1b8>
 8010dd2:	eeb0 0b48 	vmov.f64	d0, d8
 8010dd6:	eea8 6b07 	vfma.f64	d6, d8, d7
 8010dda:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010f10 <__ieee754_asin+0x1c0>
 8010dde:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010de2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8010f18 <__ieee754_asin+0x1c8>
 8010de6:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8010f20 <__ieee754_asin+0x1d0>
 8010dea:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010dee:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8010f28 <__ieee754_asin+0x1d8>
 8010df2:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010df6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010f30 <__ieee754_asin+0x1e0>
 8010dfa:	eea7 ab08 	vfma.f64	d10, d7, d8
 8010dfe:	ee2a ab08 	vmul.f64	d10, d10, d8
 8010e02:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010f38 <__ieee754_asin+0x1e8>
 8010e06:	eea8 7b06 	vfma.f64	d7, d8, d6
 8010e0a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8010f40 <__ieee754_asin+0x1f0>
 8010e0e:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010e12:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010f48 <__ieee754_asin+0x1f8>
 8010e16:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010e1a:	eea7 9b08 	vfma.f64	d9, d7, d8
 8010e1e:	f000 f8a5 	bl	8010f6c <__ieee754_sqrt>
 8010e22:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8010e26:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8010e2a:	4b4f      	ldr	r3, [pc, #316]	; (8010f68 <__ieee754_asin+0x218>)
 8010e2c:	429c      	cmp	r4, r3
 8010e2e:	dd3d      	ble.n	8010eac <__ieee754_asin+0x15c>
 8010e30:	eea0 0b05 	vfma.f64	d0, d0, d5
 8010e34:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8010f50 <__ieee754_asin+0x200>
 8010e38:	eea0 7b04 	vfma.f64	d7, d0, d4
 8010e3c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8010ef0 <__ieee754_asin+0x1a0>
 8010e40:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010e44:	2d00      	cmp	r5, #0
 8010e46:	bfd8      	it	le
 8010e48:	eeb1 0b40 	vnegle.f64	d0, d0
 8010e4c:	e79c      	b.n	8010d88 <__ieee754_asin+0x38>
 8010e4e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010f00 <__ieee754_asin+0x1b0>
 8010e52:	ee20 7b00 	vmul.f64	d7, d0, d0
 8010e56:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8010f08 <__ieee754_asin+0x1b8>
 8010e5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010e5e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010f10 <__ieee754_asin+0x1c0>
 8010e62:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010e66:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8010f18 <__ieee754_asin+0x1c8>
 8010e6a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010e6e:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8010f28 <__ieee754_asin+0x1d8>
 8010e72:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010e76:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8010f20 <__ieee754_asin+0x1d0>
 8010e7a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8010f30 <__ieee754_asin+0x1e0>
 8010e7e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010e82:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010e86:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010f38 <__ieee754_asin+0x1e8>
 8010e8a:	eea7 5b04 	vfma.f64	d5, d7, d4
 8010e8e:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8010f40 <__ieee754_asin+0x1f0>
 8010e92:	eea5 4b07 	vfma.f64	d4, d5, d7
 8010e96:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010f48 <__ieee754_asin+0x1f8>
 8010e9a:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010e9e:	eea5 9b07 	vfma.f64	d9, d5, d7
 8010ea2:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8010ea6:	eea0 0b07 	vfma.f64	d0, d0, d7
 8010eaa:	e76d      	b.n	8010d88 <__ieee754_asin+0x38>
 8010eac:	ec53 2b10 	vmov	r2, r3, d0
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	ec43 2b16 	vmov	d6, r2, r3
 8010eb6:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010eba:	eea6 8b46 	vfms.f64	d8, d6, d6
 8010ebe:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8010ec2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8010ee8 <__ieee754_asin+0x198>
 8010ec6:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010eca:	eea3 7b44 	vfms.f64	d7, d3, d4
 8010ece:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8010ed2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8010f58 <__ieee754_asin+0x208>
 8010ed6:	eeb0 0b45 	vmov.f64	d0, d5
 8010eda:	eea6 0b44 	vfms.f64	d0, d6, d4
 8010ede:	ee37 0b40 	vsub.f64	d0, d7, d0
 8010ee2:	ee35 0b40 	vsub.f64	d0, d5, d0
 8010ee6:	e7ad      	b.n	8010e44 <__ieee754_asin+0xf4>
 8010ee8:	33145c07 	.word	0x33145c07
 8010eec:	3c91a626 	.word	0x3c91a626
 8010ef0:	54442d18 	.word	0x54442d18
 8010ef4:	3ff921fb 	.word	0x3ff921fb
 8010ef8:	8800759c 	.word	0x8800759c
 8010efc:	7e37e43c 	.word	0x7e37e43c
 8010f00:	0dfdf709 	.word	0x0dfdf709
 8010f04:	3f023de1 	.word	0x3f023de1
 8010f08:	7501b288 	.word	0x7501b288
 8010f0c:	3f49efe0 	.word	0x3f49efe0
 8010f10:	b5688f3b 	.word	0xb5688f3b
 8010f14:	bfa48228 	.word	0xbfa48228
 8010f18:	0e884455 	.word	0x0e884455
 8010f1c:	3fc9c155 	.word	0x3fc9c155
 8010f20:	55555555 	.word	0x55555555
 8010f24:	3fc55555 	.word	0x3fc55555
 8010f28:	03eb6f7d 	.word	0x03eb6f7d
 8010f2c:	bfd4d612 	.word	0xbfd4d612
 8010f30:	b12e9282 	.word	0xb12e9282
 8010f34:	3fb3b8c5 	.word	0x3fb3b8c5
 8010f38:	1b8d0159 	.word	0x1b8d0159
 8010f3c:	bfe6066c 	.word	0xbfe6066c
 8010f40:	9c598ac8 	.word	0x9c598ac8
 8010f44:	40002ae5 	.word	0x40002ae5
 8010f48:	1c8a2d4b 	.word	0x1c8a2d4b
 8010f4c:	c0033a27 	.word	0xc0033a27
 8010f50:	33145c07 	.word	0x33145c07
 8010f54:	bc91a626 	.word	0xbc91a626
 8010f58:	54442d18 	.word	0x54442d18
 8010f5c:	3fe921fb 	.word	0x3fe921fb
 8010f60:	3fefffff 	.word	0x3fefffff
 8010f64:	3fdfffff 	.word	0x3fdfffff
 8010f68:	3fef3332 	.word	0x3fef3332

08010f6c <__ieee754_sqrt>:
 8010f6c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010f70:	4770      	bx	lr

08010f72 <with_errno>:
 8010f72:	b513      	push	{r0, r1, r4, lr}
 8010f74:	4604      	mov	r4, r0
 8010f76:	ed8d 0b00 	vstr	d0, [sp]
 8010f7a:	f7fc fd7d 	bl	800da78 <__errno>
 8010f7e:	ed9d 0b00 	vldr	d0, [sp]
 8010f82:	6004      	str	r4, [r0, #0]
 8010f84:	b002      	add	sp, #8
 8010f86:	bd10      	pop	{r4, pc}

08010f88 <xflow>:
 8010f88:	b082      	sub	sp, #8
 8010f8a:	b158      	cbz	r0, 8010fa4 <xflow+0x1c>
 8010f8c:	eeb1 7b40 	vneg.f64	d7, d0
 8010f90:	ed8d 7b00 	vstr	d7, [sp]
 8010f94:	ed9d 7b00 	vldr	d7, [sp]
 8010f98:	2022      	movs	r0, #34	; 0x22
 8010f9a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010f9e:	b002      	add	sp, #8
 8010fa0:	f7ff bfe7 	b.w	8010f72 <with_errno>
 8010fa4:	eeb0 7b40 	vmov.f64	d7, d0
 8010fa8:	e7f2      	b.n	8010f90 <xflow+0x8>
 8010faa:	0000      	movs	r0, r0
 8010fac:	0000      	movs	r0, r0
	...

08010fb0 <__math_uflow>:
 8010fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010fb8 <__math_uflow+0x8>
 8010fb4:	f7ff bfe8 	b.w	8010f88 <xflow>
 8010fb8:	00000000 	.word	0x00000000
 8010fbc:	10000000 	.word	0x10000000

08010fc0 <__math_oflow>:
 8010fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010fc8 <__math_oflow+0x8>
 8010fc4:	f7ff bfe0 	b.w	8010f88 <xflow>
 8010fc8:	00000000 	.word	0x00000000
 8010fcc:	70000000 	.word	0x70000000

08010fd0 <__math_divzero>:
 8010fd0:	b082      	sub	sp, #8
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010fd8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010fdc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010fe0:	ed8d 7b00 	vstr	d7, [sp]
 8010fe4:	ed9d 0b00 	vldr	d0, [sp]
 8010fe8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010ff8 <__math_divzero+0x28>
 8010fec:	2022      	movs	r0, #34	; 0x22
 8010fee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8010ff2:	b002      	add	sp, #8
 8010ff4:	f7ff bfbd 	b.w	8010f72 <with_errno>
	...

08011000 <__math_invalid>:
 8011000:	eeb0 7b40 	vmov.f64	d7, d0
 8011004:	eeb4 7b47 	vcmp.f64	d7, d7
 8011008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011010:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011014:	d602      	bvs.n	801101c <__math_invalid+0x1c>
 8011016:	2021      	movs	r0, #33	; 0x21
 8011018:	f7ff bfab 	b.w	8010f72 <with_errno>
 801101c:	4770      	bx	lr

0801101e <__math_check_uflow>:
 801101e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011026:	d102      	bne.n	801102e <__math_check_uflow+0x10>
 8011028:	2022      	movs	r0, #34	; 0x22
 801102a:	f7ff bfa2 	b.w	8010f72 <with_errno>
 801102e:	4770      	bx	lr

08011030 <__math_check_oflow>:
 8011030:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011050 <__math_check_oflow+0x20>
 8011034:	eeb0 7bc0 	vabs.f64	d7, d0
 8011038:	eeb4 7b46 	vcmp.f64	d7, d6
 801103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011040:	dd02      	ble.n	8011048 <__math_check_oflow+0x18>
 8011042:	2022      	movs	r0, #34	; 0x22
 8011044:	f7ff bf95 	b.w	8010f72 <with_errno>
 8011048:	4770      	bx	lr
 801104a:	bf00      	nop
 801104c:	f3af 8000 	nop.w
 8011050:	ffffffff 	.word	0xffffffff
 8011054:	7fefffff 	.word	0x7fefffff

08011058 <fabs>:
 8011058:	ec51 0b10 	vmov	r0, r1, d0
 801105c:	ee10 2a10 	vmov	r2, s0
 8011060:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011064:	ec43 2b10 	vmov	d0, r2, r3
 8011068:	4770      	bx	lr
	...

0801106c <_init>:
 801106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801106e:	bf00      	nop
 8011070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011072:	bc08      	pop	{r3}
 8011074:	469e      	mov	lr, r3
 8011076:	4770      	bx	lr

08011078 <_fini>:
 8011078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801107a:	bf00      	nop
 801107c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801107e:	bc08      	pop	{r3}
 8011080:	469e      	mov	lr, r3
 8011082:	4770      	bx	lr
